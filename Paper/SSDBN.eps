%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SSDBN-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/10, 10:11:45
%%BoundingBox: 0 0 1171 624
%%HiResBoundingBox: 0 0 1171 624
%%CropBox: 0 0 1171 624
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-10T10:10:58+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-10T10:11:37+08:00"
   xmp:MetadataDate="2019-06-10T10:11:37+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:3a486dd8-e3e9-4989-b51e-0e641b56acd7"
   xmpMM:InstanceID="uuid:2cb8ba77-11ec-4d5c-a307-a34c4abab804"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -624 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 624 li
1171 624 li
1171 0 li
cp
clp
gsave
.00012207 624.68 mo
1171 624.68 li
1171 -.320114 li
.00012207 -.320114 li
.00012207 624.68 li
clp
-87 631.68 mo
1295.4 631.68 li
1295.4 -65.9999 li
-87 -65.9999 li
-87 631.68 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
85.8001 554.935 mo
1157.16 554.935 li
1157.16 17.7215 li
85.8001 17.7215 li
85.8001 554.935 li
f
134.498 554.935 mo
134.498 558.435 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
134.498 554.935 mo
134.498 558.435 li
@
134.492 564.132 mo
133.319 564.132 132.445 564.707 131.847 565.857 cv
131.249 567.007 130.973 568.732 130.973 571.032 cv
130.973 573.332 131.249 575.057 131.847 576.207 cv
132.445 577.357 133.319 577.932 134.492 577.932 cv
135.665 577.932 136.539 577.357 137.137 576.207 cv
137.712 575.057 138.011 573.332 138.011 571.032 cv
138.011 568.732 137.712 567.007 137.137 565.857 cv
136.539 564.707 135.665 564.132 134.492 564.132 cv
134.492 562.338 mo
136.355 562.338 137.781 563.097 138.793 564.569 cv
139.782 566.064 140.288 568.226 140.288 571.032 cv
140.288 573.861 139.782 576.023 138.793 577.495 cv
137.781 578.967 136.355 579.703 134.492 579.703 cv
132.606 579.703 131.157 578.967 130.168 577.495 cv
129.179 576.023 128.696 573.861 128.696 571.032 cv
128.696 568.226 129.179 566.064 130.168 564.569 cv
131.157 563.097 132.606 562.338 134.492 562.338 cv
f
331.259 554.935 mo
331.259 558.435 li
f
331.259 554.935 mo
331.259 558.435 li
@
313.714 577.495 mo
321.626 577.495 li
321.626 579.404 li
310.977 579.404 li
310.977 577.495 li
311.828 576.621 313.001 575.425 314.496 573.907 cv
315.968 572.412 316.911 571.446 317.302 571.009 cv
318.038 570.204 318.544 569.514 318.82 568.939 cv
319.096 568.387 319.257 567.812 319.257 567.26 cv
319.257 566.386 318.935 565.65 318.314 565.098 cv
317.693 564.546 316.888 564.247 315.876 564.247 cv
315.163 564.247 314.404 564.385 313.622 564.615 cv
312.84 564.868 311.989 565.236 311.092 565.742 cv
311.092 563.442 li
312.012 563.074 312.863 562.798 313.645 562.614 cv
314.427 562.43 315.163 562.338 315.83 562.338 cv
317.555 562.338 318.935 562.775 319.97 563.649 cv
321.005 564.523 321.534 565.673 321.534 567.122 cv
321.534 567.812 321.396 568.479 321.143 569.077 cv
320.89 569.698 320.43 570.434 319.74 571.262 cv
319.556 571.492 318.958 572.113 317.946 573.148 cv
316.934 574.183 315.531 575.632 313.714 577.495 cv
f
331.24 564.132 mo
330.067 564.132 329.193 564.707 328.595 565.857 cv
327.997 567.007 327.721 568.732 327.721 571.032 cv
327.721 573.332 327.997 575.057 328.595 576.207 cv
329.193 577.357 330.067 577.932 331.24 577.932 cv
332.413 577.932 333.287 577.357 333.885 576.207 cv
334.46 575.057 334.759 573.332 334.759 571.032 cv
334.759 568.732 334.46 567.007 333.885 565.857 cv
333.287 564.707 332.413 564.132 331.24 564.132 cv
331.24 562.338 mo
333.103 562.338 334.529 563.097 335.541 564.569 cv
336.53 566.064 337.036 568.226 337.036 571.032 cv
337.036 573.861 336.53 576.023 335.541 577.495 cv
334.529 578.967 333.103 579.703 331.24 579.703 cv
329.354 579.703 327.905 578.967 326.916 577.495 cv
325.927 576.023 325.444 573.861 325.444 571.032 cv
325.444 568.226 325.927 566.064 326.916 564.569 cv
327.905 563.097 329.354 562.338 331.24 562.338 cv
f
345.868 564.132 mo
344.695 564.132 343.821 564.707 343.223 565.857 cv
342.625 567.007 342.349 568.732 342.349 571.032 cv
342.349 573.332 342.625 575.057 343.223 576.207 cv
343.821 577.357 344.695 577.932 345.868 577.932 cv
347.041 577.932 347.915 577.357 348.513 576.207 cv
349.088 575.057 349.387 573.332 349.387 571.032 cv
349.387 568.732 349.088 567.007 348.513 565.857 cv
347.915 564.707 347.041 564.132 345.868 564.132 cv
345.868 562.338 mo
347.731 562.338 349.157 563.097 350.169 564.569 cv
351.158 566.064 351.664 568.226 351.664 571.032 cv
351.664 573.861 351.158 576.023 350.169 577.495 cv
349.157 578.967 347.731 579.703 345.868 579.703 cv
343.982 579.703 342.533 578.967 341.544 577.495 cv
340.555 576.023 340.072 573.861 340.072 571.032 cv
340.072 568.226 340.555 566.064 341.544 564.569 cv
342.533 563.097 343.982 562.338 345.868 562.338 cv
f
528.019 554.935 mo
528.019 558.435 li
f
528.019 554.935 mo
528.019 558.435 li
@
514.752 564.615 mo
509.025 573.562 li
514.752 573.562 li
514.752 564.615 li
514.154 562.637 mo
517.006 562.637 li
517.006 573.562 li
519.398 573.562 li
519.398 575.448 li
517.006 575.448 li
517.006 579.404 li
514.752 579.404 li
514.752 575.448 li
507.185 575.448 li
507.185 573.263 li
514.154 562.637 li
f
528 564.132 mo
526.827 564.132 525.953 564.707 525.355 565.857 cv
524.757 567.007 524.481 568.732 524.481 571.032 cv
524.481 573.332 524.757 575.057 525.355 576.207 cv
525.953 577.357 526.827 577.932 528 577.932 cv
529.173 577.932 530.047 577.357 530.645 576.207 cv
531.22 575.057 531.519 573.332 531.519 571.032 cv
531.519 568.732 531.22 567.007 530.645 565.857 cv
530.047 564.707 529.173 564.132 528 564.132 cv
528 562.338 mo
529.863 562.338 531.289 563.097 532.301 564.569 cv
533.29 566.064 533.796 568.226 533.796 571.032 cv
533.796 573.861 533.29 576.023 532.301 577.495 cv
531.289 578.967 529.863 579.703 528 579.703 cv
526.114 579.703 524.665 578.967 523.676 577.495 cv
522.687 576.023 522.204 573.861 522.204 571.032 cv
522.204 568.226 522.687 566.064 523.676 564.569 cv
524.665 563.097 526.114 562.338 528 562.338 cv
f
542.628 564.132 mo
541.455 564.132 540.581 564.707 539.983 565.857 cv
539.385 567.007 539.109 568.732 539.109 571.032 cv
539.109 573.332 539.385 575.057 539.983 576.207 cv
540.581 577.357 541.455 577.932 542.628 577.932 cv
543.801 577.932 544.675 577.357 545.273 576.207 cv
545.848 575.057 546.147 573.332 546.147 571.032 cv
546.147 568.732 545.848 567.007 545.273 565.857 cv
544.675 564.707 543.801 564.132 542.628 564.132 cv
542.628 562.338 mo
544.491 562.338 545.917 563.097 546.929 564.569 cv
547.918 566.064 548.424 568.226 548.424 571.032 cv
548.424 573.861 547.918 576.023 546.929 577.495 cv
545.917 578.967 544.491 579.703 542.628 579.703 cv
540.742 579.703 539.293 578.967 538.304 577.495 cv
537.315 576.023 536.832 573.861 536.832 571.032 cv
536.832 568.226 537.315 566.064 538.304 564.569 cv
539.293 563.097 540.742 562.338 542.628 562.338 cv
f
724.779 554.935 mo
724.779 558.435 li
f
724.779 554.935 mo
724.779 558.435 li
@
710.408 570.112 mo
709.396 570.112 708.591 570.48 707.993 571.17 cv
707.395 571.86 707.096 572.826 707.096 574.022 cv
707.096 575.241 707.395 576.207 707.993 576.897 cv
708.591 577.587 709.396 577.932 710.408 577.932 cv
711.42 577.932 712.225 577.587 712.823 576.897 cv
713.421 576.207 713.72 575.241 713.72 574.022 cv
713.72 572.826 713.421 571.86 712.823 571.17 cv
712.225 570.48 711.42 570.112 710.408 570.112 cv
714.916 563.005 mo
714.916 565.075 li
714.341 564.799 713.766 564.592 713.191 564.454 cv
712.593 564.316 712.018 564.247 711.466 564.247 cv
709.948 564.247 708.798 564.753 708.016 565.765 cv
707.234 566.777 706.774 568.318 706.682 570.342 cv
707.119 569.698 707.671 569.192 708.338 568.847 cv
709.005 568.502 709.741 568.318 710.546 568.318 cv
712.225 568.318 713.559 568.847 714.525 569.859 cv
715.491 570.871 715.997 572.274 715.997 574.022 cv
715.997 575.747 715.468 577.127 714.456 578.162 cv
713.444 579.197 712.087 579.703 710.408 579.703 cv
708.476 579.703 706.981 578.967 705.969 577.495 cv
704.934 576.023 704.428 573.861 704.428 571.032 cv
704.428 568.387 705.049 566.271 706.314 564.707 cv
707.556 563.143 709.258 562.338 711.374 562.338 cv
711.926 562.338 712.501 562.407 713.099 562.499 cv
713.674 562.614 714.272 562.775 714.916 563.005 cv
f
724.76 564.132 mo
723.587 564.132 722.713 564.707 722.115 565.857 cv
721.517 567.007 721.241 568.732 721.241 571.032 cv
721.241 573.332 721.517 575.057 722.115 576.207 cv
722.713 577.357 723.587 577.932 724.76 577.932 cv
725.933 577.932 726.807 577.357 727.405 576.207 cv
727.98 575.057 728.279 573.332 728.279 571.032 cv
728.279 568.732 727.98 567.007 727.405 565.857 cv
726.807 564.707 725.933 564.132 724.76 564.132 cv
724.76 562.338 mo
726.623 562.338 728.049 563.097 729.061 564.569 cv
730.05 566.064 730.556 568.226 730.556 571.032 cv
730.556 573.861 730.05 576.023 729.061 577.495 cv
728.049 578.967 726.623 579.703 724.76 579.703 cv
722.874 579.703 721.425 578.967 720.436 577.495 cv
719.447 576.023 718.964 573.861 718.964 571.032 cv
718.964 568.226 719.447 566.064 720.436 564.569 cv
721.425 563.097 722.874 562.338 724.76 562.338 cv
f
739.388 564.132 mo
738.215 564.132 737.341 564.707 736.743 565.857 cv
736.145 567.007 735.869 568.732 735.869 571.032 cv
735.869 573.332 736.145 575.057 736.743 576.207 cv
737.341 577.357 738.215 577.932 739.388 577.932 cv
740.561 577.932 741.435 577.357 742.033 576.207 cv
742.608 575.057 742.907 573.332 742.907 571.032 cv
742.907 568.732 742.608 567.007 742.033 565.857 cv
741.435 564.707 740.561 564.132 739.388 564.132 cv
739.388 562.338 mo
741.251 562.338 742.677 563.097 743.689 564.569 cv
744.678 566.064 745.184 568.226 745.184 571.032 cv
745.184 573.861 744.678 576.023 743.689 577.495 cv
742.677 578.967 741.251 579.703 739.388 579.703 cv
737.502 579.703 736.053 578.967 735.064 577.495 cv
734.075 576.023 733.592 573.861 733.592 571.032 cv
733.592 568.226 734.075 566.064 735.064 564.569 cv
736.053 563.097 737.502 562.338 739.388 562.338 cv
f
921.539 554.935 mo
921.539 558.435 li
f
921.539 554.935 mo
921.539 558.435 li
@
906.893 571.446 mo
905.812 571.446 904.961 571.745 904.34 572.32 cv
903.719 572.895 903.42 573.677 903.42 574.689 cv
903.42 575.701 903.719 576.506 904.34 577.081 cv
904.961 577.656 905.812 577.932 906.893 577.932 cv
907.951 577.932 908.802 577.656 909.423 577.058 cv
910.044 576.483 910.366 575.701 910.366 574.689 cv
910.366 573.677 910.044 572.895 909.446 572.32 cv
908.825 571.745 907.974 571.446 906.893 571.446 cv
904.616 570.48 mo
903.65 570.25 902.891 569.79 902.339 569.123 cv
901.787 568.456 901.534 567.651 901.534 566.685 cv
901.534 565.351 901.994 564.293 902.96 563.511 cv
903.903 562.729 905.214 562.338 906.893 562.338 cv
908.549 562.338 909.86 562.729 910.826 563.511 cv
911.769 564.293 912.252 565.351 912.252 566.685 cv
912.252 567.651 911.976 568.456 911.424 569.123 cv
910.872 569.79 910.136 570.25 909.17 570.48 cv
910.251 570.733 911.102 571.239 911.723 571.975 cv
912.321 572.711 912.643 573.631 912.643 574.689 cv
912.643 576.322 912.137 577.564 911.148 578.415 cv
910.136 579.289 908.733 579.703 906.893 579.703 cv
905.03 579.703 903.604 579.289 902.615 578.415 cv
901.626 577.564 901.143 576.322 901.143 574.689 cv
901.143 573.631 901.442 572.711 902.063 571.975 cv
902.661 571.239 903.512 570.733 904.616 570.48 cv
903.788 566.892 mo
903.788 567.766 904.041 568.456 904.593 568.939 cv
905.145 569.422 905.904 569.652 906.893 569.652 cv
907.859 569.652 908.618 569.422 909.17 568.939 cv
909.722 568.456 909.998 567.766 909.998 566.892 cv
909.998 566.018 909.722 565.351 909.17 564.868 cv
908.618 564.385 907.859 564.132 906.893 564.132 cv
905.904 564.132 905.145 564.385 904.593 564.868 cv
904.041 565.351 903.788 566.018 903.788 566.892 cv
f
921.521 564.132 mo
920.348 564.132 919.474 564.707 918.876 565.857 cv
918.278 567.007 918.002 568.732 918.002 571.032 cv
918.002 573.332 918.278 575.057 918.876 576.207 cv
919.474 577.357 920.348 577.932 921.521 577.932 cv
922.694 577.932 923.568 577.357 924.166 576.207 cv
924.741 575.057 925.04 573.332 925.04 571.032 cv
925.04 568.732 924.741 567.007 924.166 565.857 cv
923.568 564.707 922.694 564.132 921.521 564.132 cv
921.521 562.338 mo
923.384 562.338 924.81 563.097 925.822 564.569 cv
926.811 566.064 927.317 568.226 927.317 571.032 cv
927.317 573.861 926.811 576.023 925.822 577.495 cv
924.81 578.967 923.384 579.703 921.521 579.703 cv
919.635 579.703 918.186 578.967 917.197 577.495 cv
916.208 576.023 915.725 573.861 915.725 571.032 cv
915.725 568.226 916.208 566.064 917.197 564.569 cv
918.186 563.097 919.635 562.338 921.521 562.338 cv
f
936.149 564.132 mo
934.976 564.132 934.102 564.707 933.504 565.857 cv
932.906 567.007 932.63 568.732 932.63 571.032 cv
932.63 573.332 932.906 575.057 933.504 576.207 cv
934.102 577.357 934.976 577.932 936.149 577.932 cv
937.322 577.932 938.196 577.357 938.794 576.207 cv
939.369 575.057 939.668 573.332 939.668 571.032 cv
939.668 568.732 939.369 567.007 938.794 565.857 cv
938.196 564.707 937.322 564.132 936.149 564.132 cv
936.149 562.338 mo
938.012 562.338 939.438 563.097 940.45 564.569 cv
941.439 566.064 941.945 568.226 941.945 571.032 cv
941.945 573.861 941.439 576.023 940.45 577.495 cv
939.438 578.967 938.012 579.703 936.149 579.703 cv
934.263 579.703 932.814 578.967 931.825 577.495 cv
930.836 576.023 930.353 573.861 930.353 571.032 cv
930.353 568.226 930.836 566.064 931.825 564.569 cv
932.814 563.097 934.263 562.338 936.149 562.338 cv
f
1118.3 554.935 mo
1118.3 558.435 li
f
1118.3 554.935 mo
1118.3 558.435 li
@
1091.87 577.495 mo
1095.57 577.495 li
1095.57 564.707 li
1091.55 565.512 li
1091.55 563.442 li
1095.55 562.637 li
1097.83 562.637 li
1097.83 577.495 li
1101.53 577.495 li
1101.53 579.404 li
1091.87 579.404 li
1091.87 577.495 li
f
1110.96 564.132 mo
1109.79 564.132 1108.91 564.707 1108.32 565.857 cv
1107.72 567.007 1107.44 568.732 1107.44 571.032 cv
1107.44 573.332 1107.72 575.057 1108.32 576.207 cv
1108.91 577.357 1109.79 577.932 1110.96 577.932 cv
1112.13 577.932 1113.01 577.357 1113.61 576.207 cv
1114.18 575.057 1114.48 573.332 1114.48 571.032 cv
1114.48 568.732 1114.18 567.007 1113.61 565.857 cv
1113.01 564.707 1112.13 564.132 1110.96 564.132 cv
1110.96 562.338 mo
1112.82 562.338 1114.25 563.097 1115.26 564.569 cv
1116.25 566.064 1116.76 568.226 1116.76 571.032 cv
1116.76 573.861 1116.25 576.023 1115.26 577.495 cv
1114.25 578.967 1112.82 579.703 1110.96 579.703 cv
1109.07 579.703 1107.63 578.967 1106.64 577.495 cv
1105.65 576.023 1105.16 573.861 1105.16 571.032 cv
1105.16 568.226 1105.65 566.064 1106.64 564.569 cv
1107.63 563.097 1109.07 562.338 1110.96 562.338 cv
f
1125.59 564.132 mo
1124.42 564.132 1123.54 564.707 1122.94 565.857 cv
1122.35 567.007 1122.07 568.732 1122.07 571.032 cv
1122.07 573.332 1122.35 575.057 1122.94 576.207 cv
1123.54 577.357 1124.42 577.932 1125.59 577.932 cv
1126.76 577.932 1127.64 577.357 1128.23 576.207 cv
1128.81 575.057 1129.11 573.332 1129.11 571.032 cv
1129.11 568.732 1128.81 567.007 1128.23 565.857 cv
1127.64 564.707 1126.76 564.132 1125.59 564.132 cv
1125.59 562.338 mo
1127.45 562.338 1128.88 563.097 1129.89 564.569 cv
1130.88 566.064 1131.38 568.226 1131.38 571.032 cv
1131.38 573.861 1130.88 576.023 1129.89 577.495 cv
1128.88 578.967 1127.45 579.703 1125.59 579.703 cv
1123.7 579.703 1122.25 578.967 1121.26 577.495 cv
1120.28 576.023 1119.79 573.861 1119.79 571.032 cv
1119.79 568.226 1120.28 566.064 1121.26 564.569 cv
1122.25 563.097 1123.7 562.338 1125.59 562.338 cv
f
1140.22 564.132 mo
1139.04 564.132 1138.17 564.707 1137.57 565.857 cv
1136.97 567.007 1136.7 568.732 1136.7 571.032 cv
1136.7 573.332 1136.97 575.057 1137.57 576.207 cv
1138.17 577.357 1139.04 577.932 1140.22 577.932 cv
1141.39 577.932 1142.26 577.357 1142.86 576.207 cv
1143.44 575.057 1143.74 573.332 1143.74 571.032 cv
1143.74 568.732 1143.44 567.007 1142.86 565.857 cv
1142.26 564.707 1141.39 564.132 1140.22 564.132 cv
1140.22 562.338 mo
1142.08 562.338 1143.51 563.097 1144.52 564.569 cv
1145.51 566.064 1146.01 568.226 1146.01 571.032 cv
1146.01 573.861 1145.51 576.023 1144.52 577.495 cv
1143.51 578.967 1142.08 579.703 1140.22 579.703 cv
1138.33 579.703 1136.88 578.967 1135.89 577.495 cv
1134.9 576.023 1134.42 573.861 1134.42 571.032 cv
1134.42 568.226 1134.9 566.064 1135.89 564.569 cv
1136.88 563.097 1138.33 562.338 1140.22 562.338 cv
f
578.482 589.112 mo
592.313 589.112 li
592.313 591.602 li
581.452 591.602 li
581.452 598.082 li
591.862 598.082 li
591.862 600.572 li
581.452 600.572 li
581.452 608.492 li
592.582 608.492 li
592.582 610.982 li
578.482 610.982 li
578.482 589.112 li
f
599.933 608.522 mo
599.933 617.192 li
597.233 617.192 li
597.233 594.572 li
599.933 594.572 li
599.933 597.062 li
600.473 596.102 601.193 595.382 602.063 594.902 cv
602.933 594.422 603.983 594.182 605.183 594.182 cv
607.163 594.182 608.783 594.992 610.043 596.552 cv
611.273 598.142 611.903 600.212 611.903 602.792 cv
611.903 605.372 611.273 607.472 610.043 609.032 cv
608.783 610.592 607.163 611.372 605.183 611.372 cv
603.983 611.372 602.933 611.132 602.063 610.682 cv
601.193 610.232 600.473 609.512 599.933 608.522 cv
609.113 602.792 mo
609.113 600.812 608.693 599.282 607.883 598.142 cv
607.043 597.002 605.933 596.432 604.523 596.432 cv
603.083 596.432 601.973 597.002 601.163 598.142 cv
600.323 599.282 599.933 600.812 599.933 602.792 cv
599.933 604.772 600.323 606.332 601.163 607.472 cv
601.973 608.612 603.083 609.152 604.523 609.152 cv
605.933 609.152 607.043 608.612 607.883 607.472 cv
608.693 606.332 609.113 604.772 609.113 602.792 cv
f
622.732 596.462 mo
621.292 596.462 620.152 597.032 619.312 598.172 cv
618.472 599.312 618.052 600.842 618.052 602.792 cv
618.052 604.772 618.442 606.302 619.282 607.442 cv
620.122 608.582 621.262 609.122 622.732 609.122 cv
624.172 609.122 625.312 608.582 626.152 607.442 cv
626.992 606.302 627.412 604.772 627.412 602.792 cv
627.412 600.872 626.992 599.312 626.152 598.172 cv
625.312 597.032 624.172 596.462 622.732 596.462 cv
622.732 594.182 mo
625.072 594.182 626.902 594.962 628.252 596.462 cv
629.572 597.992 630.262 600.092 630.262 602.792 cv
630.262 605.492 629.572 607.592 628.252 609.092 cv
626.902 610.622 625.072 611.372 622.732 611.372 cv
620.362 611.372 618.502 610.622 617.182 609.092 cv
615.862 607.592 615.202 605.492 615.202 602.792 cv
615.202 600.092 615.862 597.992 617.182 596.462 cv
618.502 594.962 620.362 594.182 622.732 594.182 cv
f
646.552 595.202 mo
646.552 597.722 li
645.772 597.302 645.022 597.002 644.242 596.792 cv
643.462 596.582 642.712 596.462 641.932 596.462 cv
640.192 596.462 638.812 597.032 637.852 598.142 cv
636.892 599.252 636.412 600.812 636.412 602.792 cv
636.412 604.802 636.892 606.362 637.852 607.472 cv
638.812 608.582 640.192 609.122 641.932 609.122 cv
642.712 609.122 643.462 609.032 644.242 608.822 cv
645.022 608.612 645.772 608.282 646.552 607.862 cv
646.552 610.352 li
645.772 610.712 644.992 610.982 644.212 611.132 cv
643.402 611.282 642.532 611.372 641.632 611.372 cv
639.172 611.372 637.192 610.622 635.752 609.062 cv
634.282 607.532 633.562 605.432 633.562 602.792 cv
633.562 600.122 634.282 598.022 635.752 596.492 cv
637.222 594.962 639.232 594.182 641.812 594.182 cv
642.652 594.182 643.462 594.272 644.242 594.452 cv
645.022 594.632 645.802 594.872 646.552 595.202 cv
f
664.882 601.082 mo
664.882 610.982 li
662.182 610.982 li
662.182 601.172 li
662.182 599.612 661.852 598.472 661.253 597.692 cv
660.652 596.912 659.753 596.522 658.552 596.522 cv
657.082 596.522 655.943 597.002 655.102 597.932 cv
654.262 598.862 653.842 600.122 653.842 601.712 cv
653.842 610.982 li
651.142 610.982 li
651.142 588.182 li
653.842 588.182 li
653.842 597.122 li
654.472 596.162 655.222 595.412 656.122 594.932 cv
656.992 594.452 658.012 594.182 659.152 594.182 cv
661.012 594.182 662.452 594.782 663.412 595.952 cv
664.372 597.122 664.882 598.832 664.882 601.082 cv
f
85.8 501.703 mo
82.3 501.703 li
f
85.8 501.703 mo
82.3 501.703 li
@
49.5202 495.166 mo
48.3473 495.166 47.4733 495.741 46.8753 496.891 cv
46.2773 498.041 46.0013 499.766 46.0013 502.066 cv
46.0013 504.366 46.2773 506.091 46.8753 507.241 cv
47.4733 508.391 48.3473 508.966 49.5202 508.966 cv
50.6933 508.966 51.5673 508.391 52.1653 507.241 cv
52.7402 506.091 53.0393 504.366 53.0393 502.066 cv
53.0393 499.766 52.7402 498.041 52.1653 496.891 cv
51.5673 495.741 50.6933 495.166 49.5202 495.166 cv
49.5202 493.372 mo
51.3833 493.372 52.8092 494.131 53.8213 495.603 cv
54.8103 497.098 55.3163 499.26 55.3163 502.066 cv
55.3163 504.895 54.8103 507.057 53.8213 508.529 cv
52.8092 510.001 51.3833 510.737 49.5202 510.737 cv
47.6342 510.737 46.1853 510.001 45.1963 508.529 cv
44.2073 507.057 43.7243 504.895 43.7243 502.066 cv
43.7243 499.26 44.2073 497.098 45.1963 495.603 cv
46.1853 494.131 47.6342 493.372 49.5202 493.372 cv
f
59.2953 507.586 mo
61.6643 507.586 li
61.6643 510.438 li
59.2953 510.438 li
59.2953 507.586 li
f
68.5641 508.529 mo
76.4761 508.529 li
76.4761 510.438 li
65.8271 510.438 li
65.8271 508.529 li
66.6781 507.655 67.8511 506.459 69.3461 504.941 cv
70.8181 503.446 71.7611 502.48 72.1521 502.043 cv
72.8881 501.238 73.3941 500.548 73.6701 499.973 cv
73.9461 499.421 74.1071 498.846 74.1071 498.294 cv
74.1071 497.42 73.7851 496.684 73.1641 496.132 cv
72.5431 495.58 71.7381 495.281 70.7261 495.281 cv
70.0131 495.281 69.2541 495.419 68.4721 495.649 cv
67.6901 495.902 66.8391 496.27 65.9421 496.776 cv
65.9421 494.476 li
66.8621 494.108 67.7131 493.832 68.4951 493.648 cv
69.2771 493.464 70.0131 493.372 70.6801 493.372 cv
72.4051 493.372 73.7851 493.809 74.8201 494.683 cv
75.8551 495.557 76.3841 496.707 76.3841 498.156 cv
76.3841 498.846 76.2461 499.513 75.9931 500.111 cv
75.7401 500.732 75.2801 501.468 74.5901 502.296 cv
74.4061 502.526 73.8081 503.147 72.7961 504.182 cv
71.7841 505.217 70.3811 506.666 68.5641 508.529 cv
f
85.8 439.74 mo
82.3 439.74 li
f
85.8 439.74 mo
82.3 439.74 li
@
49.5202 433.202 mo
48.3473 433.202 47.4733 433.777 46.8753 434.927 cv
46.2773 436.077 46.0013 437.802 46.0013 440.102 cv
46.0013 442.402 46.2773 444.127 46.8753 445.277 cv
47.4733 446.427 48.3473 447.002 49.5202 447.002 cv
50.6933 447.002 51.5673 446.427 52.1653 445.277 cv
52.7402 444.127 53.0393 442.402 53.0393 440.102 cv
53.0393 437.802 52.7402 436.077 52.1653 434.927 cv
51.5673 433.777 50.6933 433.202 49.5202 433.202 cv
49.5202 431.408 mo
51.3833 431.408 52.8092 432.167 53.8213 433.639 cv
54.8103 435.134 55.3163 437.296 55.3163 440.102 cv
55.3163 442.931 54.8103 445.093 53.8213 446.565 cv
52.8092 448.037 51.3833 448.773 49.5202 448.773 cv
47.6342 448.773 46.1853 448.037 45.1963 446.565 cv
44.2073 445.093 43.7243 442.931 43.7243 440.102 cv
43.7243 437.296 44.2073 435.134 45.1963 433.639 cv
46.1853 432.167 47.6342 431.408 49.5202 431.408 cv
f
59.2953 445.622 mo
61.6643 445.622 li
61.6643 448.474 li
59.2953 448.474 li
59.2953 445.622 li
f
73.4861 439.435 mo
74.5671 439.665 75.4181 440.148 76.0161 440.884 cv
76.6141 441.62 76.9361 442.54 76.9361 443.598 cv
76.9361 445.254 76.3611 446.542 75.2341 447.439 cv
74.0841 448.336 72.4741 448.773 70.3811 448.773 cv
69.6681 448.773 68.9321 448.704 68.1961 448.566 cv
67.4601 448.451 66.6781 448.244 65.8961 447.968 cv
65.8961 445.783 li
66.5171 446.151 67.2071 446.427 67.9661 446.611 cv
68.7021 446.795 69.4841 446.887 70.3121 446.887 cv
71.7381 446.887 72.8191 446.611 73.5551 446.059 cv
74.2911 445.507 74.6821 444.679 74.6821 443.598 cv
74.6821 442.632 74.3371 441.85 73.6471 441.298 cv
72.9571 440.746 71.9911 440.447 70.7491 440.447 cv
68.7941 440.447 li
68.7941 438.584 li
70.8411 438.584 li
71.9451 438.584 72.7961 438.377 73.3941 437.917 cv
73.9921 437.48 74.2911 436.836 74.2911 435.985 cv
74.2911 435.134 73.9691 434.467 73.3711 434.007 cv
72.7501 433.547 71.8761 433.317 70.7491 433.317 cv
70.1281 433.317 69.4611 433.386 68.7481 433.524 cv
68.0351 433.662 67.2531 433.869 66.4021 434.145 cv
66.4021 432.121 li
67.2531 431.891 68.0581 431.707 68.8171 431.592 cv
69.5531 431.477 70.2661 431.408 70.9561 431.408 cv
72.6581 431.408 74.0151 431.799 75.0271 432.581 cv
76.0391 433.363 76.5451 434.421 76.5451 435.755 cv
76.5451 436.675 76.2691 437.457 75.7401 438.101 cv
75.2111 438.745 74.4521 439.205 73.4861 439.435 cv
f
85.8 377.776 mo
82.3 377.776 li
f
85.8 377.776 mo
82.3 377.776 li
@
49.5202 371.239 mo
48.3473 371.239 47.4733 371.814 46.8753 372.964 cv
46.2773 374.114 46.0013 375.839 46.0013 378.139 cv
46.0013 380.439 46.2773 382.164 46.8753 383.314 cv
47.4733 384.464 48.3473 385.039 49.5202 385.039 cv
50.6933 385.039 51.5673 384.464 52.1653 383.314 cv
52.7402 382.164 53.0393 380.439 53.0393 378.139 cv
53.0393 375.839 52.7402 374.114 52.1653 372.964 cv
51.5673 371.814 50.6933 371.239 49.5202 371.239 cv
49.5202 369.445 mo
51.3833 369.445 52.8092 370.204 53.8213 371.676 cv
54.8103 373.171 55.3163 375.333 55.3163 378.139 cv
55.3163 380.968 54.8103 383.13 53.8213 384.602 cv
52.8092 386.074 51.3833 386.81 49.5202 386.81 cv
47.6342 386.81 46.1853 386.074 45.1963 384.602 cv
44.2073 383.13 43.7243 380.968 43.7243 378.139 cv
43.7243 375.333 44.2073 373.171 45.1963 371.676 cv
46.1853 370.204 47.6342 369.445 49.5202 369.445 cv
f
59.2953 383.659 mo
61.6643 383.659 li
61.6643 386.511 li
59.2953 386.511 li
59.2953 383.659 li
f
72.8421 371.722 mo
67.1151 380.669 li
72.8421 380.669 li
72.8421 371.722 li
72.2441 369.744 mo
75.0961 369.744 li
75.0961 380.669 li
77.4881 380.669 li
77.4881 382.555 li
75.0961 382.555 li
75.0961 386.511 li
72.8421 386.511 li
72.8421 382.555 li
65.2751 382.555 li
65.2751 380.37 li
72.2441 369.744 li
f
85.8 315.813 mo
82.3 315.813 li
f
85.8 315.813 mo
82.3 315.813 li
@
49.5202 309.275 mo
48.3473 309.275 47.4733 309.85 46.8753 311 cv
46.2773 312.15 46.0013 313.875 46.0013 316.175 cv
46.0013 318.475 46.2773 320.2 46.8753 321.35 cv
47.4733 322.5 48.3473 323.075 49.5202 323.075 cv
50.6933 323.075 51.5673 322.5 52.1653 321.35 cv
52.7402 320.2 53.0393 318.475 53.0393 316.175 cv
53.0393 313.875 52.7402 312.15 52.1653 311 cv
51.5673 309.85 50.6933 309.275 49.5202 309.275 cv
49.5202 307.481 mo
51.3833 307.481 52.8092 308.24 53.8213 309.712 cv
54.8103 311.207 55.3163 313.369 55.3163 316.175 cv
55.3163 319.004 54.8103 321.166 53.8213 322.638 cv
52.8092 324.11 51.3833 324.846 49.5202 324.846 cv
47.6342 324.846 46.1853 324.11 45.1963 322.638 cv
44.2073 321.166 43.7243 319.004 43.7243 316.175 cv
43.7243 313.369 44.2073 311.207 45.1963 309.712 cv
46.1853 308.24 47.6342 307.481 49.5202 307.481 cv
f
59.2953 321.695 mo
61.6643 321.695 li
61.6643 324.547 li
59.2953 324.547 li
59.2953 321.695 li
f
66.6321 307.78 mo
75.5331 307.78 li
75.5331 309.689 li
68.7021 309.689 li
68.7021 313.806 li
69.0241 313.691 69.3691 313.599 69.6911 313.553 cv
70.0131 313.507 70.3581 313.461 70.6801 313.461 cv
72.5431 313.461 74.0151 313.99 75.1191 315.002 cv
76.2231 316.037 76.7751 317.417 76.7751 319.165 cv
76.7751 320.982 76.2001 322.385 75.0731 323.374 cv
73.9461 324.363 72.3591 324.846 70.3351 324.846 cv
69.6221 324.846 68.9091 324.777 68.1731 324.685 cv
67.4371 324.57 66.7011 324.409 65.9191 324.156 cv
65.9191 321.879 li
66.5861 322.247 67.2761 322.523 68.0121 322.707 cv
68.7251 322.891 69.4841 322.96 70.2891 322.96 cv
71.5771 322.96 72.6121 322.638 73.3711 321.948 cv
74.1071 321.258 74.4981 320.338 74.4981 319.165 cv
74.4981 318.015 74.1071 317.095 73.3711 316.405 cv
72.6121 315.715 71.5771 315.37 70.2891 315.37 cv
69.6911 315.37 69.0701 315.439 68.4721 315.577 cv
67.8741 315.715 67.2531 315.922 66.6321 316.198 cv
66.6321 307.78 li
f
85.8 253.849 mo
82.3 253.849 li
f
85.8 253.849 mo
82.3 253.849 li
@
49.5202 247.312 mo
48.3473 247.312 47.4733 247.887 46.8753 249.037 cv
46.2773 250.187 46.0013 251.912 46.0013 254.212 cv
46.0013 256.512 46.2773 258.237 46.8753 259.387 cv
47.4733 260.537 48.3473 261.112 49.5202 261.112 cv
50.6933 261.112 51.5673 260.537 52.1653 259.387 cv
52.7402 258.237 53.0393 256.512 53.0393 254.212 cv
53.0393 251.912 52.7402 250.187 52.1653 249.037 cv
51.5673 247.887 50.6933 247.312 49.5202 247.312 cv
49.5202 245.518 mo
51.3833 245.518 52.8092 246.277 53.8213 247.749 cv
54.8103 249.244 55.3163 251.406 55.3163 254.212 cv
55.3163 257.041 54.8103 259.203 53.8213 260.675 cv
52.8092 262.147 51.3833 262.883 49.5202 262.883 cv
47.6342 262.883 46.1853 262.147 45.1963 260.675 cv
44.2073 259.203 43.7243 257.041 43.7243 254.212 cv
43.7243 251.406 44.2073 249.244 45.1963 247.749 cv
46.1853 246.277 47.6342 245.518 49.5202 245.518 cv
f
59.2953 259.732 mo
61.6643 259.732 li
61.6643 262.584 li
59.2953 262.584 li
59.2953 259.732 li
f
71.7381 253.292 mo
70.7261 253.292 69.9211 253.66 69.3231 254.35 cv
68.7251 255.04 68.4261 256.006 68.4261 257.202 cv
68.4261 258.421 68.7251 259.387 69.3231 260.077 cv
69.9211 260.767 70.7261 261.112 71.7381 261.112 cv
72.7501 261.112 73.5551 260.767 74.1531 260.077 cv
74.7511 259.387 75.0501 258.421 75.0501 257.202 cv
75.0501 256.006 74.7511 255.04 74.1531 254.35 cv
73.5551 253.66 72.7501 253.292 71.7381 253.292 cv
76.2461 246.185 mo
76.2461 248.255 li
75.6711 247.979 75.0961 247.772 74.5211 247.634 cv
73.9231 247.496 73.3481 247.427 72.7961 247.427 cv
71.2781 247.427 70.1281 247.933 69.3461 248.945 cv
68.5641 249.957 68.1041 251.498 68.0121 253.522 cv
68.4491 252.878 69.0011 252.372 69.6681 252.027 cv
70.3351 251.682 71.0711 251.498 71.8761 251.498 cv
73.5551 251.498 74.8891 252.027 75.8551 253.039 cv
76.8211 254.051 77.3271 255.454 77.3271 257.202 cv
77.3271 258.927 76.7981 260.307 75.7861 261.342 cv
74.7741 262.377 73.4171 262.883 71.7381 262.883 cv
69.8061 262.883 68.3111 262.147 67.2991 260.675 cv
66.2641 259.203 65.7581 257.041 65.7581 254.212 cv
65.7581 251.567 66.3791 249.451 67.6441 247.887 cv
68.8861 246.323 70.5881 245.518 72.7041 245.518 cv
73.2561 245.518 73.8311 245.587 74.4291 245.679 cv
75.0041 245.794 75.6021 245.955 76.2461 246.185 cv
f
85.8 191.886 mo
82.3 191.886 li
f
85.8 191.886 mo
82.3 191.886 li
@
49.5202 185.348 mo
48.3473 185.348 47.4733 185.923 46.8753 187.073 cv
46.2773 188.223 46.0013 189.948 46.0013 192.248 cv
46.0013 194.548 46.2773 196.273 46.8753 197.423 cv
47.4733 198.573 48.3473 199.148 49.5202 199.148 cv
50.6933 199.148 51.5673 198.573 52.1653 197.423 cv
52.7402 196.273 53.0393 194.548 53.0393 192.248 cv
53.0393 189.948 52.7402 188.223 52.1653 187.073 cv
51.5673 185.923 50.6933 185.348 49.5202 185.348 cv
49.5202 183.554 mo
51.3833 183.554 52.8092 184.313 53.8213 185.785 cv
54.8103 187.28 55.3163 189.442 55.3163 192.248 cv
55.3163 195.077 54.8103 197.239 53.8213 198.711 cv
52.8092 200.183 51.3833 200.919 49.5202 200.919 cv
47.6342 200.919 46.1853 200.183 45.1963 198.711 cv
44.2073 197.239 43.7243 195.077 43.7243 192.248 cv
43.7243 189.442 44.2073 187.28 45.1963 185.785 cv
46.1853 184.313 47.6342 183.554 49.5202 183.554 cv
f
59.2953 197.768 mo
61.6643 197.768 li
61.6643 200.62 li
59.2953 200.62 li
59.2953 197.768 li
f
66.0341 183.853 mo
76.8211 183.853 li
76.8211 184.819 li
70.7261 200.62 li
68.3571 200.62 li
74.0841 185.762 li
66.0341 185.762 li
66.0341 183.853 li
f
85.8 129.922 mo
82.3 129.922 li
f
85.8 129.922 mo
82.3 129.922 li
@
49.5202 123.384 mo
48.3473 123.384 47.4733 123.959 46.8753 125.109 cv
46.2773 126.259 46.0013 127.984 46.0013 130.284 cv
46.0013 132.584 46.2773 134.309 46.8753 135.459 cv
47.4733 136.609 48.3473 137.184 49.5202 137.184 cv
50.6933 137.184 51.5673 136.609 52.1653 135.459 cv
52.7402 134.309 53.0393 132.584 53.0393 130.284 cv
53.0393 127.984 52.7402 126.259 52.1653 125.109 cv
51.5673 123.959 50.6933 123.384 49.5202 123.384 cv
49.5202 121.59 mo
51.3833 121.59 52.8092 122.349 53.8213 123.821 cv
54.8103 125.316 55.3163 127.478 55.3163 130.284 cv
55.3163 133.113 54.8103 135.275 53.8213 136.747 cv
52.8092 138.219 51.3833 138.955 49.5202 138.955 cv
47.6342 138.955 46.1853 138.219 45.1963 136.747 cv
44.2073 135.275 43.7243 133.113 43.7243 130.284 cv
43.7243 127.478 44.2073 125.316 45.1963 123.821 cv
46.1853 122.349 47.6342 121.59 49.5202 121.59 cv
f
59.2953 135.804 mo
61.6643 135.804 li
61.6643 138.656 li
59.2953 138.656 li
59.2953 135.804 li
f
71.4621 130.698 mo
70.3811 130.698 69.5301 130.997 68.9091 131.572 cv
68.2881 132.147 67.9891 132.929 67.9891 133.941 cv
67.9891 134.953 68.2881 135.758 68.9091 136.333 cv
69.5301 136.908 70.3811 137.184 71.4621 137.184 cv
72.5201 137.184 73.3711 136.908 73.9921 136.31 cv
74.6131 135.735 74.9351 134.953 74.9351 133.941 cv
74.9351 132.929 74.6131 132.147 74.0151 131.572 cv
73.3941 130.997 72.5431 130.698 71.4621 130.698 cv
69.1851 129.732 mo
68.2191 129.502 67.4601 129.042 66.9081 128.375 cv
66.3561 127.708 66.1031 126.903 66.1031 125.937 cv
66.1031 124.603 66.5631 123.545 67.5291 122.763 cv
68.4721 121.981 69.7831 121.59 71.4621 121.59 cv
73.1181 121.59 74.4291 121.981 75.3951 122.763 cv
76.3381 123.545 76.8211 124.603 76.8211 125.937 cv
76.8211 126.903 76.5451 127.708 75.9931 128.375 cv
75.4411 129.042 74.7051 129.502 73.7391 129.732 cv
74.8201 129.985 75.6711 130.491 76.2921 131.227 cv
76.8901 131.963 77.2121 132.883 77.2121 133.941 cv
77.2121 135.574 76.7061 136.816 75.7171 137.667 cv
74.7051 138.541 73.3021 138.955 71.4621 138.955 cv
69.5991 138.955 68.1731 138.541 67.1841 137.667 cv
66.1951 136.816 65.7121 135.574 65.7121 133.941 cv
65.7121 132.883 66.0111 131.963 66.6321 131.227 cv
67.2301 130.491 68.0811 129.985 69.1851 129.732 cv
68.3571 126.144 mo
68.3571 127.018 68.6101 127.708 69.1621 128.191 cv
69.7141 128.674 70.4731 128.904 71.4621 128.904 cv
72.4281 128.904 73.1871 128.674 73.7391 128.191 cv
74.2911 127.708 74.5671 127.018 74.5671 126.144 cv
74.5671 125.27 74.2911 124.603 73.7391 124.12 cv
73.1871 123.637 72.4281 123.384 71.4621 123.384 cv
70.4731 123.384 69.7141 123.637 69.1621 124.12 cv
68.6101 124.603 68.3571 125.27 68.3571 126.144 cv
f
85.8 67.9586 mo
82.3 67.9586 li
f
85.8 67.9586 mo
82.3 67.9586 li
@
49.5202 61.4209 mo
48.3473 61.4209 47.4733 61.9959 46.8753 63.1459 cv
46.2773 64.2959 46.0013 66.0209 46.0013 68.3209 cv
46.0013 70.6209 46.2773 72.3459 46.8753 73.4959 cv
47.4733 74.6459 48.3473 75.2209 49.5202 75.2209 cv
50.6933 75.2209 51.5673 74.6459 52.1653 73.4959 cv
52.7402 72.3459 53.0393 70.6209 53.0393 68.3209 cv
53.0393 66.0209 52.7402 64.2959 52.1653 63.1459 cv
51.5673 61.9959 50.6933 61.4209 49.5202 61.4209 cv
49.5202 59.6269 mo
51.3833 59.6269 52.8092 60.3859 53.8213 61.8579 cv
54.8103 63.3529 55.3163 65.5149 55.3163 68.3209 cv
55.3163 71.1499 54.8103 73.3119 53.8213 74.7839 cv
52.8092 76.2559 51.3833 76.9919 49.5202 76.9919 cv
47.6342 76.9919 46.1853 76.2559 45.1963 74.7839 cv
44.2073 73.3119 43.7243 71.1499 43.7243 68.3209 cv
43.7243 65.5149 44.2073 63.3529 45.1963 61.8579 cv
46.1853 60.3859 47.6342 59.6269 49.5202 59.6269 cv
f
59.2953 73.8409 mo
61.6643 73.8409 li
61.6643 76.6929 li
59.2953 76.6929 li
59.2953 73.8409 li
f
66.6781 76.3479 mo
66.6781 74.2779 li
67.2301 74.5539 67.8051 74.7609 68.4031 74.8989 cv
68.9781 75.0369 69.5531 75.1059 70.1281 75.1059 cv
71.6001 75.1059 72.7501 74.6229 73.5321 73.6109 cv
74.3141 72.5989 74.7741 71.0809 74.9121 69.0109 cv
74.4521 69.6549 73.9001 70.1609 73.2561 70.5059 cv
72.5891 70.8509 71.8531 71.0119 71.0481 71.0119 cv
69.3461 71.0119 68.0121 70.5059 67.0461 69.4939 cv
66.0801 68.4819 65.5971 67.1019 65.5971 65.3309 cv
65.5971 63.6289 66.1031 62.2489 67.1151 61.1909 cv
68.1271 60.1559 69.4841 59.6269 71.1861 59.6269 cv
73.1181 59.6269 74.6131 60.3859 75.6251 61.8579 cv
76.6371 63.3529 77.1661 65.5149 77.1661 68.3209 cv
77.1661 70.9889 76.5221 73.0819 75.2801 74.6459 cv
74.0151 76.2099 72.3361 76.9919 70.2201 76.9919 cv
69.6451 76.9919 69.0701 76.9229 68.4951 76.8309 cv
67.8971 76.7389 67.2991 76.5779 66.6781 76.3479 cv
71.1861 69.2409 mo
72.1981 69.2409 73.0031 68.8959 73.6011 68.2059 cv
74.1991 67.5159 74.4981 66.5499 74.4981 65.3309 cv
74.4981 64.1349 74.1991 63.1689 73.6011 62.4789 cv
73.0031 61.7889 72.1981 61.4209 71.1861 61.4209 cv
70.1741 61.4209 69.3691 61.7889 68.7711 62.4789 cv
68.1731 63.1689 67.8741 64.1349 67.8741 65.3309 cv
67.8741 66.5499 68.1731 67.5159 68.7711 68.2059 cv
69.3691 68.8959 70.1741 69.2409 71.1861 69.2409 cv
f
13.0119 384.318 mo
23.9019 388.338 li
23.9019 380.298 li
13.0119 384.318 li
10.1019 385.998 mo
10.1019 382.638 li
31.9719 374.298 li
31.9719 377.388 li
26.3619 379.368 li
26.3619 389.238 li
31.9719 391.218 li
31.9719 394.338 li
10.1019 385.998 li
f
16.1919 359.418 mo
18.7119 359.418 li
18.2919 360.198 17.9919 360.948 17.7819 361.728 cv
17.5719 362.508 17.4519 363.258 17.4519 364.038 cv
17.4519 365.778 18.0219 367.158 19.1319 368.118 cv
20.2419 369.078 21.8019 369.558 23.7819 369.558 cv
25.7919 369.558 27.3519 369.078 28.4619 368.118 cv
29.5719 367.158 30.1119 365.778 30.1119 364.038 cv
30.1119 363.258 30.0219 362.508 29.8119 361.728 cv
29.6019 360.948 29.2719 360.198 28.8519 359.418 cv
31.3419 359.418 li
31.7019 360.198 31.9719 360.978 32.1219 361.758 cv
32.2719 362.568 32.3619 363.438 32.3619 364.338 cv
32.3619 366.798 31.6119 368.778 30.0519 370.218 cv
28.5219 371.688 26.4219 372.408 23.7819 372.408 cv
21.1119 372.408 19.0119 371.688 17.4819 370.218 cv
15.9519 368.748 15.1719 366.738 15.1719 364.158 cv
15.1719 363.318 15.2619 362.508 15.4419 361.728 cv
15.6219 360.948 15.8619 360.168 16.1919 359.418 cv
f
16.1919 342.918 mo
18.7119 342.918 li
18.2919 343.698 17.9919 344.448 17.7819 345.228 cv
17.5719 346.008 17.4519 346.758 17.4519 347.538 cv
17.4519 349.278 18.0219 350.658 19.1319 351.618 cv
20.2419 352.578 21.8019 353.058 23.7819 353.058 cv
25.7919 353.058 27.3519 352.578 28.4619 351.618 cv
29.5719 350.658 30.1119 349.278 30.1119 347.538 cv
30.1119 346.758 30.0219 346.008 29.8119 345.228 cv
29.6019 344.448 29.2719 343.698 28.8519 342.918 cv
31.3419 342.918 li
31.7019 343.698 31.9719 344.478 32.1219 345.258 cv
32.2719 346.068 32.3619 346.938 32.3619 347.838 cv
32.3619 350.298 31.6119 352.278 30.0519 353.718 cv
28.5219 355.188 26.4219 355.908 23.7819 355.908 cv
21.1119 355.908 19.0119 355.188 17.4819 353.718 cv
15.9519 352.248 15.1719 350.238 15.1719 347.658 cv
15.1719 346.818 15.2619 346.008 15.4419 345.228 cv
15.6219 344.448 15.8619 343.668 16.1919 342.918 cv
f
25.4919 338.508 mo
15.5619 338.508 li
15.5619 335.808 li
25.4019 335.808 li
26.9619 335.808 28.1019 335.508 28.8819 334.908 cv
29.6619 334.308 30.0519 333.408 30.0519 332.178 cv
30.0519 330.738 29.6019 329.568 28.6719 328.728 cv
27.7419 327.888 26.4819 327.468 24.8619 327.468 cv
15.5619 327.468 li
15.5619 324.768 li
31.9719 324.768 li
31.9719 327.468 li
29.4519 327.468 li
30.4719 328.128 31.1919 328.908 31.6719 329.748 cv
32.1219 330.618 32.3619 331.608 32.3619 332.748 cv
32.3619 334.638 31.7919 336.078 30.6219 337.038 cv
29.4819 338.028 27.7719 338.508 25.4919 338.508 cv
15.1719 331.728 mo
15.1719 331.728 li
f
18.0819 309.708 mo
17.9019 310.008 17.7819 310.338 17.6919 310.698 cv
17.6319 311.058 17.5719 311.448 17.5719 311.868 cv
17.5719 313.398 18.0819 314.568 19.0719 315.378 cv
20.0619 316.218 21.4719 316.608 23.3319 316.608 cv
31.9719 316.608 li
31.9719 319.308 li
15.5619 319.308 li
15.5619 316.608 li
18.1119 316.608 li
17.1219 316.068 16.3719 315.318 15.8919 314.418 cv
15.4119 313.518 15.1719 312.408 15.1719 311.088 cv
15.1719 310.908 15.2019 310.698 15.2019 310.458 cv
15.2319 310.248 15.2619 310.008 15.3219 309.708 cv
18.0819 309.708 li
f
23.7219 299.418 mo
23.7219 301.608 23.9919 303.108 24.4719 303.948 cv
24.9819 304.788 25.8219 305.208 27.0219 305.208 cv
27.9819 305.208 28.7619 304.908 29.3019 304.278 cv
29.8719 303.648 30.1419 302.778 30.1419 301.698 cv
30.1419 300.198 29.6319 298.998 28.5519 298.098 cv
27.5019 297.198 26.0919 296.748 24.3219 296.748 cv
23.7219 296.748 li
23.7219 299.418 li
22.6119 294.048 mo
31.9719 294.048 li
31.9719 296.748 li
29.4819 296.748 li
30.5019 297.378 31.2219 298.158 31.6719 299.058 cv
32.1219 299.958 32.3619 301.098 32.3619 302.418 cv
32.3619 304.098 31.9119 305.448 30.9819 306.438 cv
30.0519 307.428 28.7919 307.908 27.2019 307.908 cv
25.3719 307.908 23.9919 307.308 23.0319 306.048 cv
22.1019 304.818 21.6219 302.988 21.6219 300.528 cv
21.6219 296.748 li
21.3519 296.748 li
20.1219 296.748 19.1619 297.168 18.4719 297.978 cv
17.8119 298.788 17.4519 299.928 17.4519 301.398 cv
17.4519 302.358 17.5719 303.258 17.8119 304.158 cv
18.0519 305.058 18.3819 305.898 18.8019 306.708 cv
16.3119 306.708 li
15.9519 305.748 15.6519 304.788 15.4719 303.858 cv
15.2919 302.928 15.1719 302.028 15.1719 301.128 cv
15.1719 298.758 15.8019 296.988 17.0319 295.818 cv
18.2619 294.648 20.1219 294.048 22.6119 294.048 cv
f
16.1919 276.678 mo
18.7119 276.678 li
18.2919 277.458 17.9919 278.208 17.7819 278.988 cv
17.5719 279.768 17.4519 280.518 17.4519 281.298 cv
17.4519 283.038 18.0219 284.418 19.1319 285.378 cv
20.2419 286.338 21.8019 286.818 23.7819 286.818 cv
25.7919 286.818 27.3519 286.338 28.4619 285.378 cv
29.5719 284.418 30.1119 283.038 30.1119 281.298 cv
30.1119 280.518 30.0219 279.768 29.8119 278.988 cv
29.6019 278.208 29.2719 277.458 28.8519 276.678 cv
31.3419 276.678 li
31.7019 277.458 31.9719 278.238 32.1219 279.018 cv
32.2719 279.828 32.3619 280.698 32.3619 281.598 cv
32.3619 284.058 31.6119 286.038 30.0519 287.478 cv
28.5219 288.948 26.4219 289.668 23.7819 289.668 cv
21.1119 289.668 19.0119 288.948 17.4819 287.478 cv
15.9519 286.008 15.1719 283.998 15.1719 281.418 cv
15.1719 280.578 15.2619 279.768 15.4419 278.988 cv
15.6219 278.208 15.8619 277.428 16.1919 276.678 cv
f
33.4719 265.158 mo
35.3919 265.938 36.6819 266.688 37.2819 267.408 cv
37.8819 268.128 38.1819 269.088 38.1819 270.288 cv
38.1819 272.448 li
35.9319 272.448 li
35.9319 270.858 li
35.9319 270.138 35.7519 269.568 35.3919 269.148 cv
35.0319 268.728 34.2219 268.278 32.9019 267.768 cv
31.7019 267.288 li
15.5619 273.918 li
15.5619 271.068 li
28.4019 265.938 li
15.5619 260.808 li
15.5619 257.958 li
33.4719 265.158 li
f
21.7119 234.198 mo
21.9519 233.568 22.4019 232.938 23.0919 232.338 cv
23.8119 231.738 24.7719 231.138 26.0019 230.538 cv
31.9719 227.538 li
31.9719 230.718 li
26.3619 233.508 li
24.9219 234.228 23.9319 234.948 23.4519 235.608 cv
22.9719 236.298 22.7319 237.228 22.7319 238.398 cv
22.7319 241.608 li
31.9719 241.608 li
31.9719 244.578 li
10.1019 244.578 li
10.1019 237.888 li
10.1019 235.398 10.6419 233.538 11.6619 232.308 cv
12.7119 231.078 14.3019 230.448 16.4019 230.448 cv
17.7819 230.448 18.9519 230.778 19.8519 231.408 cv
20.7519 232.068 21.3819 232.998 21.7119 234.198 cv
12.5319 241.608 mo
20.3019 241.608 li
20.3019 237.888 li
20.3019 236.478 19.9719 235.398 19.3119 234.678 cv
18.6519 233.958 17.6919 233.568 16.4019 233.568 cv
15.1419 233.568 14.1819 233.958 13.5219 234.678 cv
12.8619 235.398 12.5319 236.478 12.5319 237.888 cv
12.5319 241.608 li
f
23.7219 216.378 mo
23.7219 218.568 23.9919 220.068 24.4719 220.908 cv
24.9819 221.748 25.8219 222.168 27.0219 222.168 cv
27.9819 222.168 28.7619 221.868 29.3019 221.238 cv
29.8719 220.608 30.1419 219.738 30.1419 218.658 cv
30.1419 217.158 29.6319 215.958 28.5519 215.058 cv
27.5019 214.158 26.0919 213.708 24.3219 213.708 cv
23.7219 213.708 li
23.7219 216.378 li
22.6119 211.008 mo
31.9719 211.008 li
31.9719 213.708 li
29.4819 213.708 li
30.5019 214.338 31.2219 215.118 31.6719 216.018 cv
32.1219 216.918 32.3619 218.058 32.3619 219.378 cv
32.3619 221.058 31.9119 222.408 30.9819 223.398 cv
30.0519 224.388 28.7919 224.868 27.2019 224.868 cv
25.3719 224.868 23.9919 224.268 23.0319 223.008 cv
22.1019 221.778 21.6219 219.948 21.6219 217.488 cv
21.6219 213.708 li
21.3519 213.708 li
20.1219 213.708 19.1619 214.128 18.4719 214.938 cv
17.8119 215.748 17.4519 216.888 17.4519 218.358 cv
17.4519 219.318 17.5719 220.218 17.8119 221.118 cv
18.0519 222.018 18.3819 222.858 18.8019 223.668 cv
16.3119 223.668 li
15.9519 222.708 15.6519 221.748 15.4719 220.818 cv
15.2919 219.888 15.1719 218.988 15.1719 218.088 cv
15.1719 215.718 15.8019 213.948 17.0319 212.778 cv
18.2619 211.608 20.1219 211.008 22.6119 211.008 cv
f
10.9119 202.788 mo
15.5619 202.788 li
15.5619 197.238 li
17.6619 197.238 li
17.6619 202.788 li
26.5719 202.788 li
27.9219 202.788 28.7919 202.608 29.1519 202.248 cv
29.5419 201.888 29.7219 201.138 29.7219 199.998 cv
29.7219 197.238 li
31.9719 197.238 li
31.9719 199.998 li
31.9719 202.098 31.5819 203.538 30.8019 204.318 cv
30.0219 205.098 28.6119 205.488 26.5719 205.488 cv
17.6619 205.488 li
17.6619 207.468 li
15.5619 207.468 li
15.5619 205.488 li
10.9119 205.488 li
10.9119 202.788 li
f
23.0919 179.658 mo
24.4119 179.658 li
24.4119 192.048 li
26.2719 191.928 27.7119 191.388 28.6719 190.368 cv
29.6319 189.378 30.1119 187.998 30.1119 186.198 cv
30.1119 185.178 29.9919 184.158 29.7519 183.198 cv
29.5119 182.238 29.1219 181.248 28.5819 180.288 cv
31.1319 180.288 li
31.5519 181.248 31.8819 182.238 32.0619 183.258 cv
32.2419 184.278 32.3619 185.328 32.3619 186.348 cv
32.3619 188.988 31.6119 191.058 30.1119 192.588 cv
28.6119 194.118 26.5419 194.868 23.9319 194.868 cv
21.2619 194.868 19.1319 194.148 17.5419 192.708 cv
15.9819 191.268 15.1719 189.288 15.1719 186.828 cv
15.1719 184.608 15.8919 182.868 17.3019 181.578 cv
18.7419 180.318 20.6619 179.658 23.0919 179.658 cv
22.3119 182.358 mo
20.8419 182.388 19.6719 182.808 18.7719 183.588 cv
17.9019 184.398 17.4519 185.478 17.4519 186.798 cv
17.4519 188.298 17.9019 189.498 18.7419 190.398 cv
19.5819 191.298 20.7819 191.838 22.3119 191.958 cv
22.3119 182.358 li
f
1.5 lw
2 lc
134.498 500.258 mo
144.336 453.991 li
154.174 411.65 li
164.012 413.509 li
173.85 408.551 li
183.688 412.063 li
193.526 383.353 li
203.364 354.437 li
213.202 338.533 li
223.04 316.845 li
232.878 295.778 li
242.716 278.428 li
252.554 264.383 li
262.392 257.98 li
272.23 252.197 li
282.068 247.859 li
291.906 244.968 li
301.744 238.358 li
311.582 236.912 li
321.421 230.716 li
331.259 222.041 li
341.097 217.91 li
350.935 214.812 li
360.773 205.518 li
370.611 196.843 li
380.449 186.309 li
390.287 176.188 li
400.125 165.654 li
409.963 157.186 li
419.801 144.174 li
429.639 139.217 li
439.477 133.433 li
449.315 127.444 li
459.153 123.726 li
468.991 116.703 li
478.829 108.854 li
488.667 104.517 li
498.505 100.799 li
508.343 98.5272 li
518.181 93.157 li
528.019 88.8196 li
537.857 85.7214 li
547.695 83.2429 li
557.533 80.5578 li
567.371 76.4269 li
577.209 72.5025 li
587.047 71.4698 li
596.885 70.6436 li
606.723 67.9586 li
616.561 66.5127 li
626.399 66.7192 li
636.237 64.4473 li
646.075 64.2407 li
655.913 63.8276 li
665.751 63.0015 li
675.589 62.7949 li
685.427 62.1753 li
695.265 61.1425 li
705.103 60.3163 li
714.941 61.1425 li
724.779 59.4902 li
734.617 60.7294 li
744.455 59.9033 li
754.293 62.5884 li
764.131 63.208 li
773.969 61.1425 li
783.807 61.1425 li
793.645 55.1527 li
803.483 54.9462 li
813.321 54.9462 li
823.159 55.3593 li
832.997 55.5659 li
842.835 55.5659 li
852.673 55.1527 li
862.511 55.1527 li
872.349 55.1527 li
882.187 54.7396 li
892.025 54.3265 li
901.863 54.3265 li
911.701 53.9135 li
921.539 53.7069 li
931.378 53.5004 li
941.216 53.0873 li
951.054 52.8807 li
960.892 52.8807 li
970.73 52.8807 li
980.568 52.6742 li
990.406 52.2611 li
1000.24 52.2611 li
1010.08 52.2611 li
1019.92 52.2611 li
1029.76 52.2611 li
1039.6 52.2611 li
1049.43 51.6415 li
1059.27 51.848 li
1069.11 51.6415 li
1078.95 51.6415 li
1088.79 51.6415 li
1098.62 51.4349 li
1108.46 51.4349 li
/1 
[/DeviceCMYK] /CSA add_res
0 .9617 .904814 0 cmyk
@
134.498 520.912 mo
144.336 485.903 li
154.174 453.372 li
164.012 440.359 li
173.85 427.037 li
183.688 423.629 li
193.526 382.733 li
203.364 344.316 li
213.202 331.304 li
223.04 313.644 li
232.878 289.788 li
242.716 272.438 li
252.554 263.144 li
262.392 254.469 li
272.23 247.033 li
282.068 240.527 li
291.906 236.19 li
301.744 231.852 li
311.582 226.585 li
321.421 223.177 li
331.259 211.404 li
341.097 206.757 li
350.935 204.898 li
360.773 195.603 li
370.611 186.619 li
380.449 179.493 li
390.287 173.606 li
400.125 164.931 li
409.963 155.947 li
419.801 147.892 li
429.639 140.146 li
439.477 138.287 li
449.315 132.71 li
459.153 127.753 li
468.991 119.698 li
478.829 111.953 li
488.667 109.164 li
498.505 104.827 li
508.343 102.968 li
518.181 99.2501 li
528.019 95.8421 li
537.857 94.6028 li
547.695 91.8145 li
557.533 86.8574 li
567.371 83.1396 li
577.209 80.6611 li
587.047 77.8727 li
596.885 77.2531 li
606.723 77.8727 li
616.561 77.5629 li
626.399 76.6334 li
636.237 74.1549 li
646.075 72.9156 li
655.913 71.0567 li
665.751 69.8174 li
675.589 71.9861 li
685.427 71.0567 li
695.265 70.1273 li
705.103 70.4371 li
714.941 68.888 li
724.779 71.3665 li
734.617 73.2255 li
744.455 71.3665 li
754.293 75.704 li
764.131 73.5353 li
773.969 74.7745 li
783.807 70.4371 li
793.645 67.0291 li
803.483 67.9586 li
813.321 67.9586 li
823.159 67.3389 li
832.997 67.3389 li
842.835 67.0291 li
852.673 66.7192 li
862.511 66.7192 li
872.349 66.4094 li
882.187 65.7898 li
892.025 65.7898 li
901.863 66.0996 li
911.701 65.48 li
921.539 65.1702 li
931.378 65.7898 li
941.216 64.8604 li
951.054 64.2407 li
960.892 64.5505 li
970.73 64.2407 li
980.568 64.2407 li
990.406 64.5505 li
1000.24 64.2407 li
1010.08 64.5505 li
1019.92 64.5505 li
1029.76 64.8604 li
1039.6 64.5505 li
1049.43 64.8604 li
1059.27 64.5505 li
1069.11 64.2407 li
1078.95 65.1702 li
1088.79 65.48 li
1098.62 65.7898 li
1108.46 65.48 li
@
gsave
130.998 524.412 mo
137.998 524.412 li
137.998 517.412 li
130.998 517.412 li
130.998 524.412 li
clp
131.498 523.912 mo
137.498 517.912 li
131.498 517.912 mo
137.498 523.912 li
f
1 lw
0 lc
131.498 523.912 mo
137.498 517.912 li
131.498 517.912 mo
137.498 523.912 li
@
grestore
gsave
140.836 489.403 mo
147.836 489.403 li
147.836 482.403 li
140.836 482.403 li
140.836 489.403 li
clp
141.336 488.903 mo
147.336 482.903 li
141.336 482.903 mo
147.336 488.903 li
f
1 lw
0 lc
141.336 488.903 mo
147.336 482.903 li
141.336 482.903 mo
147.336 488.903 li
@
grestore
gsave
150.674 456.872 mo
157.674 456.872 li
157.674 449.872 li
150.674 449.872 li
150.674 456.872 li
clp
151.174 456.372 mo
157.174 450.372 li
151.174 450.372 mo
157.174 456.372 li
f
1 lw
0 lc
151.174 456.372 mo
157.174 450.372 li
151.174 450.372 mo
157.174 456.372 li
@
grestore
gsave
160.512 443.859 mo
167.512 443.859 li
167.512 436.859 li
160.512 436.859 li
160.512 443.859 li
clp
161.012 443.359 mo
167.012 437.359 li
161.012 437.359 mo
167.012 443.359 li
f
1 lw
0 lc
161.012 443.359 mo
167.012 437.359 li
161.012 437.359 mo
167.012 443.359 li
@
grestore
gsave
170.35 430.537 mo
177.35 430.537 li
177.35 423.537 li
170.35 423.537 li
170.35 430.537 li
clp
170.85 430.037 mo
176.85 424.037 li
170.85 424.037 mo
176.85 430.037 li
f
1 lw
0 lc
170.85 430.037 mo
176.85 424.037 li
170.85 424.037 mo
176.85 430.037 li
@
grestore
gsave
180.188 427.129 mo
187.188 427.129 li
187.188 420.129 li
180.188 420.129 li
180.188 427.129 li
clp
180.688 426.629 mo
186.688 420.629 li
180.688 420.629 mo
186.688 426.629 li
f
1 lw
0 lc
180.688 426.629 mo
186.688 420.629 li
180.688 420.629 mo
186.688 426.629 li
@
grestore
gsave
190.026 386.233 mo
197.026 386.233 li
197.026 379.233 li
190.026 379.233 li
190.026 386.233 li
clp
190.526 385.733 mo
196.526 379.733 li
190.526 379.733 mo
196.526 385.733 li
f
1 lw
0 lc
190.526 385.733 mo
196.526 379.733 li
190.526 379.733 mo
196.526 385.733 li
@
grestore
gsave
199.864 347.816 mo
206.864 347.816 li
206.864 340.816 li
199.864 340.816 li
199.864 347.816 li
clp
200.364 347.316 mo
206.364 341.316 li
200.364 341.316 mo
206.364 347.316 li
f
1 lw
0 lc
200.364 347.316 mo
206.364 341.316 li
200.364 341.316 mo
206.364 347.316 li
@
grestore
gsave
209.702 334.803 mo
216.702 334.803 li
216.702 327.804 li
209.702 327.804 li
209.702 334.803 li
clp
210.202 334.304 mo
216.202 328.304 li
210.202 328.304 mo
216.202 334.304 li
f
1 lw
0 lc
210.202 334.304 mo
216.202 328.304 li
210.202 328.304 mo
216.202 334.304 li
@
grestore
gsave
219.54 317.144 mo
226.54 317.144 li
226.54 310.144 li
219.54 310.144 li
219.54 317.144 li
clp
220.04 316.644 mo
226.04 310.644 li
220.04 310.644 mo
226.04 316.644 li
f
1 lw
0 lc
220.04 316.644 mo
226.04 310.644 li
220.04 310.644 mo
226.04 316.644 li
@
grestore
gsave
229.378 293.288 mo
236.378 293.288 li
236.378 286.288 li
229.378 286.288 li
229.378 293.288 li
clp
229.878 292.788 mo
235.878 286.788 li
229.878 286.788 mo
235.878 292.788 li
f
1 lw
0 lc
229.878 292.788 mo
235.878 286.788 li
229.878 286.788 mo
235.878 292.788 li
@
grestore
gsave
239.216 275.938 mo
246.216 275.938 li
246.216 268.938 li
239.216 268.938 li
239.216 275.938 li
clp
239.716 275.438 mo
245.716 269.438 li
239.716 269.438 mo
245.716 275.438 li
f
1 lw
0 lc
239.716 275.438 mo
245.716 269.438 li
239.716 269.438 mo
245.716 275.438 li
@
grestore
gsave
249.055 266.644 mo
256.054 266.644 li
256.054 259.644 li
249.055 259.644 li
249.055 266.644 li
clp
249.554 266.144 mo
255.554 260.144 li
249.554 260.144 mo
255.554 266.144 li
f
1 lw
0 lc
249.554 266.144 mo
255.554 260.144 li
249.554 260.144 mo
255.554 266.144 li
@
grestore
gsave
258.892 257.969 mo
265.893 257.969 li
265.893 250.969 li
258.892 250.969 li
258.892 257.969 li
clp
259.392 257.469 mo
265.392 251.469 li
259.392 251.469 mo
265.392 257.469 li
f
1 lw
0 lc
259.392 257.469 mo
265.392 251.469 li
259.392 251.469 mo
265.392 257.469 li
@
grestore
gsave
268.73 250.533 mo
275.73 250.533 li
275.73 243.533 li
268.73 243.533 li
268.73 250.533 li
clp
269.23 250.033 mo
275.23 244.033 li
269.23 244.033 mo
275.23 250.033 li
f
1 lw
0 lc
269.23 250.033 mo
275.23 244.033 li
269.23 244.033 mo
275.23 250.033 li
@
grestore
gsave
278.568 244.027 mo
285.568 244.027 li
285.568 237.027 li
278.568 237.027 li
278.568 244.027 li
clp
279.068 243.527 mo
285.068 237.527 li
279.068 237.527 mo
285.068 243.527 li
f
1 lw
0 lc
279.068 243.527 mo
285.068 237.527 li
279.068 237.527 mo
285.068 243.527 li
@
grestore
gsave
288.406 239.689 mo
295.406 239.689 li
295.406 232.689 li
288.406 232.689 li
288.406 239.689 li
clp
288.906 239.19 mo
294.906 233.19 li
288.906 233.19 mo
294.906 239.19 li
f
1 lw
0 lc
288.906 239.19 mo
294.906 233.19 li
288.906 233.19 mo
294.906 239.19 li
@
grestore
gsave
298.244 235.352 mo
305.244 235.352 li
305.244 228.352 li
298.244 228.352 li
298.244 235.352 li
clp
298.744 234.852 mo
304.744 228.852 li
298.744 228.852 mo
304.744 234.852 li
f
1 lw
0 lc
298.744 234.852 mo
304.744 228.852 li
298.744 228.852 mo
304.744 234.852 li
@
grestore
gsave
308.083 230.085 mo
315.082 230.085 li
315.082 223.085 li
308.083 223.085 li
308.083 230.085 li
clp
308.582 229.585 mo
314.582 223.585 li
308.582 223.585 mo
314.582 229.585 li
f
1 lw
0 lc
308.582 229.585 mo
314.582 223.585 li
308.582 223.585 mo
314.582 229.585 li
@
grestore
gsave
317.921 226.677 mo
324.921 226.677 li
324.921 219.677 li
317.921 219.677 li
317.921 226.677 li
clp
318.42 226.177 mo
324.42 220.177 li
318.42 220.177 mo
324.42 226.177 li
f
1 lw
0 lc
318.42 226.177 mo
324.42 220.177 li
318.42 220.177 mo
324.42 226.177 li
@
grestore
gsave
327.758 214.904 mo
334.759 214.904 li
334.759 207.904 li
327.758 207.904 li
327.758 214.904 li
clp
328.258 214.404 mo
334.258 208.404 li
328.258 208.404 mo
334.258 214.404 li
f
1 lw
0 lc
328.258 214.404 mo
334.258 208.404 li
328.258 208.404 mo
334.258 214.404 li
@
grestore
gsave
337.596 210.257 mo
344.596 210.257 li
344.596 203.257 li
337.596 203.257 li
337.596 210.257 li
clp
338.096 209.757 mo
344.096 203.757 li
338.096 203.757 mo
344.096 209.757 li
f
1 lw
0 lc
338.096 209.757 mo
344.096 203.757 li
338.096 203.757 mo
344.096 209.757 li
@
grestore
gsave
347.434 208.398 mo
354.434 208.398 li
354.434 201.398 li
347.434 201.398 li
347.434 208.398 li
clp
347.934 207.898 mo
353.934 201.898 li
347.934 201.898 mo
353.934 207.898 li
f
1 lw
0 lc
347.934 207.898 mo
353.934 201.898 li
347.934 201.898 mo
353.934 207.898 li
@
grestore
gsave
357.272 199.103 mo
364.272 199.103 li
364.272 192.103 li
357.272 192.103 li
357.272 199.103 li
clp
357.772 198.603 mo
363.772 192.603 li
357.772 192.603 mo
363.772 198.603 li
f
1 lw
0 lc
357.772 198.603 mo
363.772 192.603 li
357.772 192.603 mo
363.772 198.603 li
@
grestore
gsave
367.111 190.119 mo
374.111 190.119 li
374.111 183.119 li
367.111 183.119 li
367.111 190.119 li
clp
367.611 189.619 mo
373.611 183.619 li
367.611 183.619 mo
373.611 189.619 li
f
1 lw
0 lc
367.611 189.619 mo
373.611 183.619 li
367.611 183.619 mo
373.611 189.619 li
@
grestore
gsave
376.949 182.993 mo
383.949 182.993 li
383.949 175.993 li
376.949 175.993 li
376.949 182.993 li
clp
377.449 182.493 mo
383.449 176.493 li
377.449 176.493 mo
383.449 182.493 li
f
1 lw
0 lc
377.449 182.493 mo
383.449 176.493 li
377.449 176.493 mo
383.449 182.493 li
@
grestore
gsave
386.787 177.107 mo
393.787 177.107 li
393.787 170.106 li
386.787 170.106 li
386.787 177.107 li
clp
387.287 176.606 mo
393.287 170.606 li
387.287 170.606 mo
393.287 176.606 li
f
1 lw
0 lc
387.287 176.606 mo
393.287 170.606 li
387.287 170.606 mo
393.287 176.606 li
@
grestore
gsave
396.624 168.432 mo
403.625 168.432 li
403.625 161.431 li
396.624 161.431 li
396.624 168.432 li
clp
397.125 167.931 mo
403.125 161.931 li
397.125 161.931 mo
403.125 167.931 li
f
1 lw
0 lc
397.125 167.931 mo
403.125 161.931 li
397.125 161.931 mo
403.125 167.931 li
@
grestore
gsave
406.462 159.447 mo
413.462 159.447 li
413.462 152.447 li
406.462 152.447 li
406.462 159.447 li
clp
406.963 158.947 mo
412.963 152.947 li
406.963 152.947 mo
412.963 158.947 li
f
1 lw
0 lc
406.963 158.947 mo
412.963 152.947 li
406.963 152.947 mo
412.963 158.947 li
@
grestore
gsave
416.301 151.392 mo
423.3 151.392 li
423.3 144.392 li
416.301 144.392 li
416.301 151.392 li
clp
416.801 150.892 mo
422.801 144.892 li
416.801 144.892 mo
422.801 150.892 li
f
1 lw
0 lc
416.801 150.892 mo
422.801 144.892 li
416.801 144.892 mo
422.801 150.892 li
@
grestore
gsave
426.139 143.646 mo
433.138 143.646 li
433.138 136.646 li
426.139 136.646 li
426.139 143.646 li
clp
426.639 143.146 mo
432.639 137.146 li
426.639 137.146 mo
432.639 143.146 li
f
1 lw
0 lc
426.639 143.146 mo
432.639 137.146 li
426.639 137.146 mo
432.639 143.146 li
@
grestore
gsave
435.977 141.787 mo
442.977 141.787 li
442.977 134.787 li
435.977 134.787 li
435.977 141.787 li
clp
436.477 141.287 mo
442.477 135.287 li
436.477 135.287 mo
442.477 141.287 li
f
1 lw
0 lc
436.477 141.287 mo
442.477 135.287 li
436.477 135.287 mo
442.477 141.287 li
@
grestore
gsave
445.815 136.21 mo
452.815 136.21 li
452.815 129.211 li
445.815 129.211 li
445.815 136.21 li
clp
446.315 135.71 mo
452.315 129.71 li
446.315 129.71 mo
452.315 135.71 li
f
1 lw
0 lc
446.315 135.71 mo
452.315 129.71 li
446.315 129.71 mo
452.315 135.71 li
@
grestore
gsave
455.653 131.253 mo
462.653 131.253 li
462.653 124.253 li
455.653 124.253 li
455.653 131.253 li
clp
456.153 130.753 mo
462.153 124.753 li
456.153 124.753 mo
462.153 130.753 li
f
1 lw
0 lc
456.153 130.753 mo
462.153 124.753 li
456.153 124.753 mo
462.153 130.753 li
@
grestore
gsave
465.491 123.198 mo
472.491 123.198 li
472.491 116.198 li
465.491 116.198 li
465.491 123.198 li
clp
465.991 122.698 mo
471.991 116.698 li
465.991 116.698 mo
471.991 122.698 li
f
1 lw
0 lc
465.991 122.698 mo
471.991 116.698 li
465.991 116.698 mo
471.991 122.698 li
@
grestore
gsave
475.329 115.453 mo
482.329 115.453 li
482.329 108.453 li
475.329 108.453 li
475.329 115.453 li
clp
475.829 114.953 mo
481.829 108.953 li
475.829 108.953 mo
481.829 114.953 li
f
1 lw
0 lc
475.829 114.953 mo
481.829 108.953 li
475.829 108.953 mo
481.829 114.953 li
@
grestore
gsave
485.167 112.664 mo
492.167 112.664 li
492.167 105.664 li
485.167 105.664 li
485.167 112.664 li
clp
485.667 112.164 mo
491.667 106.164 li
485.667 106.164 mo
491.667 112.164 li
f
1 lw
0 lc
485.667 112.164 mo
491.667 106.164 li
485.667 106.164 mo
491.667 112.164 li
@
grestore
gsave
495.005 108.327 mo
502.005 108.327 li
502.005 101.327 li
495.005 101.327 li
495.005 108.327 li
clp
495.505 107.827 mo
501.505 101.827 li
495.505 101.827 mo
501.505 107.827 li
f
1 lw
0 lc
495.505 107.827 mo
501.505 101.827 li
495.505 101.827 mo
501.505 107.827 li
@
grestore
gsave
504.843 106.468 mo
511.843 106.468 li
511.843 99.468 li
504.843 99.468 li
504.843 106.468 li
clp
505.343 105.968 mo
511.343 99.968 li
505.343 99.968 mo
511.343 105.968 li
f
1 lw
0 lc
505.343 105.968 mo
511.343 99.968 li
505.343 99.968 mo
511.343 105.968 li
@
grestore
gsave
514.681 102.75 mo
521.681 102.75 li
521.681 95.7501 li
514.681 95.7501 li
514.681 102.75 li
clp
515.181 102.25 mo
521.181 96.2501 li
515.181 96.2501 mo
521.181 102.25 li
f
1 lw
0 lc
515.181 102.25 mo
521.181 96.2501 li
515.181 96.2501 mo
521.181 102.25 li
@
grestore
gsave
524.519 99.342 mo
531.519 99.342 li
531.519 92.342 li
524.519 92.342 li
524.519 99.342 li
clp
525.019 98.8421 mo
531.019 92.8421 li
525.019 92.8421 mo
531.019 98.8421 li
f
1 lw
0 lc
525.019 98.8421 mo
531.019 92.8421 li
525.019 92.8421 mo
531.019 98.8421 li
@
grestore
gsave
534.357 98.1027 mo
541.357 98.1027 li
541.357 91.1028 li
534.357 91.1028 li
534.357 98.1027 li
clp
534.857 97.6028 mo
540.857 91.6028 li
534.857 91.6028 mo
540.857 97.6028 li
f
1 lw
0 lc
534.857 97.6028 mo
540.857 91.6028 li
534.857 91.6028 mo
540.857 97.6028 li
@
grestore
gsave
544.195 95.3144 mo
551.195 95.3144 li
551.195 88.3145 li
544.195 88.3145 li
544.195 95.3144 li
clp
544.695 94.8145 mo
550.695 88.8145 li
544.695 88.8145 mo
550.695 94.8145 li
f
1 lw
0 lc
544.695 94.8145 mo
550.695 88.8145 li
544.695 88.8145 mo
550.695 94.8145 li
@
grestore
gsave
554.033 90.3573 mo
561.033 90.3573 li
561.033 83.3574 li
554.033 83.3574 li
554.033 90.3573 li
clp
554.533 89.8574 mo
560.533 83.8574 li
554.533 83.8574 mo
560.533 89.8574 li
f
1 lw
0 lc
554.533 89.8574 mo
560.533 83.8574 li
554.533 83.8574 mo
560.533 89.8574 li
@
grestore
gsave
563.871 86.6395 mo
570.871 86.6395 li
570.871 79.6396 li
563.871 79.6396 li
563.871 86.6395 li
clp
564.371 86.1396 mo
570.371 80.1396 li
564.371 80.1396 mo
570.371 86.1396 li
f
1 lw
0 lc
564.371 86.1396 mo
570.371 80.1396 li
564.371 80.1396 mo
570.371 86.1396 li
@
grestore
gsave
573.709 84.161 mo
580.709 84.161 li
580.709 77.161 li
573.709 77.161 li
573.709 84.161 li
clp
574.209 83.6611 mo
580.209 77.6611 li
574.209 77.6611 mo
580.209 83.6611 li
f
1 lw
0 lc
574.209 83.6611 mo
580.209 77.6611 li
574.209 77.6611 mo
580.209 83.6611 li
@
grestore
gsave
583.547 81.3727 mo
590.547 81.3727 li
590.547 74.3727 li
583.547 74.3727 li
583.547 81.3727 li
clp
584.047 80.8727 mo
590.047 74.8727 li
584.047 74.8727 mo
590.047 80.8727 li
f
1 lw
0 lc
584.047 80.8727 mo
590.047 74.8727 li
584.047 74.8727 mo
590.047 80.8727 li
@
grestore
gsave
593.385 80.7532 mo
600.385 80.7532 li
600.385 73.7533 li
593.385 73.7533 li
593.385 80.7532 li
clp
593.885 80.2531 mo
599.885 74.2531 li
593.885 74.2531 mo
599.885 80.2531 li
f
1 lw
0 lc
593.885 80.2531 mo
599.885 74.2531 li
593.885 74.2531 mo
599.885 80.2531 li
@
grestore
gsave
603.223 81.3727 mo
610.223 81.3727 li
610.223 74.3727 li
603.223 74.3727 li
603.223 81.3727 li
clp
603.723 80.8727 mo
609.723 74.8727 li
603.723 74.8727 mo
609.723 80.8727 li
f
1 lw
0 lc
603.723 80.8727 mo
609.723 74.8727 li
603.723 74.8727 mo
609.723 80.8727 li
@
grestore
gsave
613.061 81.063 mo
620.061 81.063 li
620.061 74.063 li
613.061 74.063 li
613.061 81.063 li
clp
613.561 80.5629 mo
619.561 74.5629 li
613.561 74.5629 mo
619.561 80.5629 li
f
1 lw
0 lc
613.561 80.5629 mo
619.561 74.5629 li
613.561 74.5629 mo
619.561 80.5629 li
@
grestore
gsave
622.899 80.1334 mo
629.899 80.1334 li
629.899 73.1335 li
622.899 73.1335 li
622.899 80.1334 li
clp
623.399 79.6335 mo
629.399 73.6335 li
623.399 73.6335 mo
629.399 79.6335 li
f
1 lw
0 lc
623.399 79.6335 mo
629.399 73.6335 li
623.399 73.6335 mo
629.399 79.6335 li
@
grestore
gsave
632.737 77.6549 mo
639.737 77.6549 li
639.737 70.6549 li
632.737 70.6549 li
632.737 77.6549 li
clp
633.237 77.155 mo
639.237 71.155 li
633.237 71.155 mo
639.237 77.155 li
f
1 lw
0 lc
633.237 77.155 mo
639.237 71.155 li
633.237 71.155 mo
639.237 77.155 li
@
grestore
gsave
642.575 76.4156 mo
649.575 76.4156 li
649.575 69.4156 li
642.575 69.4156 li
642.575 76.4156 li
clp
643.075 75.9157 mo
649.075 69.9157 li
643.075 69.9157 mo
649.075 75.9157 li
f
1 lw
0 lc
643.075 75.9157 mo
649.075 69.9157 li
643.075 69.9157 mo
649.075 75.9157 li
@
grestore
gsave
652.413 74.5568 mo
659.413 74.5568 li
659.413 67.5569 li
652.413 67.5569 li
652.413 74.5568 li
clp
652.913 74.0568 mo
658.913 68.0568 li
652.913 68.0568 mo
658.913 74.0568 li
f
1 lw
0 lc
652.913 74.0568 mo
658.913 68.0568 li
652.913 68.0568 mo
658.913 74.0568 li
@
grestore
gsave
662.251 73.3176 mo
669.251 73.3176 li
669.251 66.3176 li
662.251 66.3176 li
662.251 73.3176 li
clp
662.751 72.8176 mo
668.751 66.8176 li
662.751 66.8176 mo
668.751 72.8176 li
f
1 lw
0 lc
662.751 72.8176 mo
668.751 66.8176 li
662.751 66.8176 mo
668.751 72.8176 li
@
grestore
gsave
672.089 75.4864 mo
679.089 75.4864 li
679.089 68.4861 li
672.089 68.4861 li
672.089 75.4864 li
clp
672.589 74.9863 mo
678.589 68.9863 li
672.589 68.9863 mo
678.589 74.9863 li
f
1 lw
0 lc
672.589 74.9863 mo
678.589 68.9863 li
672.589 68.9863 mo
678.589 74.9863 li
@
grestore
gsave
681.927 74.5568 mo
688.927 74.5568 li
688.927 67.5569 li
681.927 67.5569 li
681.927 74.5568 li
clp
682.427 74.0568 mo
688.427 68.0568 li
682.427 68.0568 mo
688.427 74.0568 li
f
1 lw
0 lc
682.427 74.0568 mo
688.427 68.0568 li
682.427 68.0568 mo
688.427 74.0568 li
@
grestore
gsave
691.765 73.6273 mo
698.765 73.6273 li
698.765 66.6274 li
691.765 66.6274 li
691.765 73.6273 li
clp
692.265 73.1274 mo
698.265 67.1274 li
692.265 67.1274 mo
698.265 73.1274 li
f
1 lw
0 lc
692.265 73.1274 mo
698.265 67.1274 li
692.265 67.1274 mo
698.265 73.1274 li
@
grestore
gsave
701.603 73.937 mo
708.603 73.937 li
708.603 66.9371 li
701.603 66.9371 li
701.603 73.937 li
clp
702.103 73.4372 mo
708.103 67.4372 li
702.103 67.4372 mo
708.103 73.4372 li
f
1 lw
0 lc
702.103 73.4372 mo
708.103 67.4372 li
702.103 67.4372 mo
708.103 73.4372 li
@
grestore
gsave
711.441 72.388 mo
718.441 72.388 li
718.441 65.3881 li
711.441 65.3881 li
711.441 72.388 li
clp
711.941 71.8881 mo
717.941 65.8881 li
711.941 65.8881 mo
717.941 71.8881 li
f
1 lw
0 lc
711.941 71.8881 mo
717.941 65.8881 li
711.941 65.8881 mo
717.941 71.8881 li
@
grestore
gsave
721.279 74.8666 mo
728.279 74.8666 li
728.279 67.8666 li
721.279 67.8666 li
721.279 74.8666 li
clp
721.779 74.3666 mo
727.779 68.3666 li
721.779 68.3666 mo
727.779 74.3666 li
f
1 lw
0 lc
721.779 74.3666 mo
727.779 68.3666 li
721.779 68.3666 mo
727.779 74.3666 li
@
grestore
gsave
731.117 76.7257 mo
738.117 76.7257 li
738.117 69.7254 li
731.117 69.7254 li
731.117 76.7257 li
clp
731.617 76.2255 mo
737.617 70.2255 li
731.617 70.2255 mo
737.617 76.2255 li
f
1 lw
0 lc
731.617 76.2255 mo
737.617 70.2255 li
731.617 70.2255 mo
737.617 76.2255 li
@
grestore
gsave
740.955 74.8666 mo
747.955 74.8666 li
747.955 67.8666 li
740.955 67.8666 li
740.955 74.8666 li
clp
741.455 74.3666 mo
747.455 68.3666 li
741.455 68.3666 mo
747.455 74.3666 li
f
1 lw
0 lc
741.455 74.3666 mo
747.455 68.3666 li
741.455 68.3666 mo
747.455 74.3666 li
@
grestore
gsave
750.793 79.2042 mo
757.793 79.2042 li
757.793 72.2043 li
750.793 72.2043 li
750.793 79.2042 li
clp
751.293 78.7041 mo
757.293 72.7041 li
751.293 72.7041 mo
757.293 78.7041 li
f
1 lw
0 lc
751.293 78.7041 mo
757.293 72.7041 li
751.293 72.7041 mo
757.293 78.7041 li
@
grestore
gsave
760.631 77.0354 mo
767.631 77.0354 li
767.631 70.0355 li
760.631 70.0355 li
760.631 77.0354 li
clp
761.131 76.5354 mo
767.131 70.5354 li
761.131 70.5354 mo
767.131 76.5354 li
f
1 lw
0 lc
761.131 76.5354 mo
767.131 70.5354 li
761.131 70.5354 mo
767.131 76.5354 li
@
grestore
gsave
770.469 78.2747 mo
777.469 78.2747 li
777.469 71.2747 li
770.469 71.2747 li
770.469 78.2747 li
clp
770.969 77.7747 mo
776.969 71.7747 li
770.969 71.7747 mo
776.969 77.7747 li
f
1 lw
0 lc
770.969 77.7747 mo
776.969 71.7747 li
770.969 71.7747 mo
776.969 77.7747 li
@
grestore
gsave
780.307 73.937 mo
787.307 73.937 li
787.307 66.9371 li
780.307 66.9371 li
780.307 73.937 li
clp
780.807 73.4372 mo
786.807 67.4372 li
780.807 67.4372 mo
786.807 73.4372 li
f
1 lw
0 lc
780.807 73.4372 mo
786.807 67.4372 li
780.807 67.4372 mo
786.807 73.4372 li
@
grestore
gsave
790.145 70.5293 mo
797.145 70.5293 li
797.145 63.5293 li
790.145 63.5293 li
790.145 70.5293 li
clp
790.645 70.0292 mo
796.645 64.0292 li
790.645 64.0292 mo
796.645 70.0292 li
f
1 lw
0 lc
790.645 70.0292 mo
796.645 64.0292 li
790.645 64.0292 mo
796.645 70.0292 li
@
grestore
gsave
799.983 71.4585 mo
806.983 71.4585 li
806.983 64.4585 li
799.983 64.4585 li
799.983 71.4585 li
clp
800.483 70.9586 mo
806.483 64.9586 li
800.483 64.9586 mo
806.483 70.9586 li
f
1 lw
0 lc
800.483 70.9586 mo
806.483 64.9586 li
800.483 64.9586 mo
806.483 70.9586 li
@
grestore
gsave
809.821 71.4585 mo
816.821 71.4585 li
816.821 64.4585 li
809.821 64.4585 li
809.821 71.4585 li
clp
810.321 70.9586 mo
816.321 64.9586 li
810.321 64.9586 mo
816.321 70.9586 li
f
1 lw
0 lc
810.321 70.9586 mo
816.321 64.9586 li
810.321 64.9586 mo
816.321 70.9586 li
@
grestore
gsave
819.659 70.839 mo
826.659 70.839 li
826.659 63.8391 li
819.659 63.8391 li
819.659 70.839 li
clp
820.159 70.339 mo
826.159 64.339 li
820.159 64.339 mo
826.159 70.339 li
f
1 lw
0 lc
820.159 70.339 mo
826.159 64.339 li
820.159 64.339 mo
826.159 70.339 li
@
grestore
gsave
829.497 70.839 mo
836.497 70.839 li
836.497 63.8391 li
829.497 63.8391 li
829.497 70.839 li
clp
829.997 70.339 mo
835.997 64.339 li
829.997 64.339 mo
835.997 70.339 li
f
1 lw
0 lc
829.997 70.339 mo
835.997 64.339 li
829.997 64.339 mo
835.997 70.339 li
@
grestore
gsave
839.335 70.5293 mo
846.335 70.5293 li
846.335 63.5293 li
839.335 63.5293 li
839.335 70.5293 li
clp
839.835 70.0292 mo
845.835 64.0292 li
839.835 64.0292 mo
845.835 70.0292 li
f
1 lw
0 lc
839.835 70.0292 mo
845.835 64.0292 li
839.835 64.0292 mo
845.835 70.0292 li
@
grestore
gsave
849.173 70.2192 mo
856.173 70.2192 li
856.173 63.2193 li
849.173 63.2193 li
849.173 70.2192 li
clp
849.673 69.7194 mo
855.673 63.7194 li
849.673 63.7194 mo
855.673 69.7194 li
f
1 lw
0 lc
849.673 69.7194 mo
855.673 63.7194 li
849.673 63.7194 mo
855.673 69.7194 li
@
grestore
gsave
859.011 70.2192 mo
866.011 70.2192 li
866.011 63.2193 li
859.011 63.2193 li
859.011 70.2192 li
clp
859.511 69.7194 mo
865.511 63.7194 li
859.511 63.7194 mo
865.511 69.7194 li
f
1 lw
0 lc
859.511 69.7194 mo
865.511 63.7194 li
859.511 63.7194 mo
865.511 69.7194 li
@
grestore
gsave
868.849 69.9095 mo
875.849 69.9095 li
875.849 62.9095 li
868.849 62.9095 li
868.849 69.9095 li
clp
869.349 69.4095 mo
875.349 63.4095 li
869.349 63.4095 mo
875.349 69.4095 li
f
1 lw
0 lc
869.349 69.4095 mo
875.349 63.4095 li
869.349 63.4095 mo
875.349 69.4095 li
@
grestore
gsave
878.687 69.29 mo
885.687 69.29 li
885.687 62.2901 li
878.687 62.2901 li
878.687 69.29 li
clp
879.187 68.7899 mo
885.187 62.7899 li
879.187 62.7899 mo
885.187 68.7899 li
f
1 lw
0 lc
879.187 68.7899 mo
885.187 62.7899 li
879.187 62.7899 mo
885.187 68.7899 li
@
grestore
gsave
888.525 69.29 mo
895.525 69.29 li
895.525 62.2901 li
888.525 62.2901 li
888.525 69.29 li
clp
889.025 68.7899 mo
895.025 62.7899 li
889.025 62.7899 mo
895.025 68.7899 li
f
1 lw
0 lc
889.025 68.7899 mo
895.025 62.7899 li
889.025 62.7899 mo
895.025 68.7899 li
@
grestore
gsave
898.363 69.5997 mo
905.363 69.5997 li
905.363 62.5998 li
898.363 62.5998 li
898.363 69.5997 li
clp
898.863 69.0997 mo
904.863 63.0997 li
898.863 63.0997 mo
904.863 69.0997 li
f
1 lw
0 lc
898.863 69.0997 mo
904.863 63.0997 li
898.863 63.0997 mo
904.863 69.0997 li
@
grestore
gsave
908.201 68.9799 mo
915.201 68.9799 li
915.201 61.98 li
908.201 61.98 li
908.201 68.9799 li
clp
908.701 68.4801 mo
914.701 62.4801 li
908.701 62.4801 mo
914.701 68.4801 li
f
1 lw
0 lc
908.701 68.4801 mo
914.701 62.4801 li
908.701 62.4801 mo
914.701 68.4801 li
@
grestore
gsave
918.039 68.6702 mo
925.039 68.6702 li
925.039 61.6703 li
918.039 61.6703 li
918.039 68.6702 li
clp
918.539 68.1703 mo
924.539 62.1703 li
918.539 62.1703 mo
924.539 68.1703 li
f
1 lw
0 lc
918.539 68.1703 mo
924.539 62.1703 li
918.539 62.1703 mo
924.539 68.1703 li
@
grestore
gsave
927.877 69.29 mo
934.877 69.29 li
934.877 62.2901 li
927.877 62.2901 li
927.877 69.29 li
clp
928.377 68.7899 mo
934.377 62.7899 li
928.377 62.7899 mo
934.377 68.7899 li
f
1 lw
0 lc
928.377 68.7899 mo
934.377 62.7899 li
928.377 62.7899 mo
934.377 68.7899 li
@
grestore
gsave
937.715 68.3605 mo
944.715 68.3605 li
944.715 61.3605 li
937.715 61.3605 li
937.715 68.3605 li
clp
938.215 67.8605 mo
944.215 61.8605 li
938.215 61.8605 mo
944.215 67.8605 li
f
1 lw
0 lc
938.215 67.8605 mo
944.215 61.8605 li
938.215 61.8605 mo
944.215 67.8605 li
@
grestore
gsave
947.553 67.741 mo
954.553 67.741 li
954.553 60.7407 li
947.553 60.7407 li
947.553 67.741 li
clp
948.053 67.2408 mo
954.053 61.2408 li
948.053 61.2408 mo
954.053 67.2408 li
f
1 lw
0 lc
948.053 67.2408 mo
954.053 61.2408 li
948.053 61.2408 mo
954.053 67.2408 li
@
grestore
gsave
957.391 68.0507 mo
964.391 68.0507 li
964.391 61.0508 li
957.391 61.0508 li
957.391 68.0507 li
clp
957.891 67.5507 mo
963.891 61.5507 li
957.891 61.5507 mo
963.891 67.5507 li
f
1 lw
0 lc
957.891 67.5507 mo
963.891 61.5507 li
957.891 61.5507 mo
963.891 67.5507 li
@
grestore
gsave
967.229 67.741 mo
974.229 67.741 li
974.229 60.7407 li
967.229 60.7407 li
967.229 67.741 li
clp
967.729 67.2408 mo
973.729 61.2408 li
967.729 61.2408 mo
973.729 67.2408 li
f
1 lw
0 lc
967.729 67.2408 mo
973.729 61.2408 li
967.729 61.2408 mo
973.729 67.2408 li
@
grestore
gsave
977.067 67.741 mo
984.068 67.741 li
984.068 60.7407 li
977.067 60.7407 li
977.067 67.741 li
clp
977.567 67.2408 mo
983.567 61.2408 li
977.567 61.2408 mo
983.567 67.2408 li
f
1 lw
0 lc
977.567 67.2408 mo
983.567 61.2408 li
977.567 61.2408 mo
983.567 67.2408 li
@
grestore
gsave
986.905 68.0507 mo
993.905 68.0507 li
993.905 61.0508 li
986.905 61.0508 li
986.905 68.0507 li
clp
987.405 67.5507 mo
993.405 61.5507 li
987.405 61.5507 mo
993.405 67.5507 li
f
1 lw
0 lc
987.405 67.5507 mo
993.405 61.5507 li
987.405 61.5507 mo
993.405 67.5507 li
@
grestore
gsave
996.743 67.741 mo
1003.74 67.741 li
1003.74 60.7407 li
996.743 60.7407 li
996.743 67.741 li
clp
997.243 67.2408 mo
1003.24 61.2408 li
997.243 61.2408 mo
1003.24 67.2408 li
f
1 lw
0 lc
997.243 67.2408 mo
1003.24 61.2408 li
997.243 61.2408 mo
1003.24 67.2408 li
@
grestore
gsave
1006.58 68.0507 mo
1013.58 68.0507 li
1013.58 61.0508 li
1006.58 61.0508 li
1006.58 68.0507 li
clp
1007.08 67.5507 mo
1013.08 61.5507 li
1007.08 61.5507 mo
1013.08 67.5507 li
f
1 lw
0 lc
1007.08 67.5507 mo
1013.08 61.5507 li
1007.08 61.5507 mo
1013.08 67.5507 li
@
grestore
gsave
1016.42 68.0507 mo
1023.42 68.0507 li
1023.42 61.0508 li
1016.42 61.0508 li
1016.42 68.0507 li
clp
1016.92 67.5507 mo
1022.92 61.5507 li
1016.92 61.5507 mo
1022.92 67.5507 li
f
1 lw
0 lc
1016.92 67.5507 mo
1022.92 61.5507 li
1016.92 61.5507 mo
1022.92 67.5507 li
@
grestore
gsave
1026.26 68.3605 mo
1033.26 68.3605 li
1033.26 61.3605 li
1026.26 61.3605 li
1026.26 68.3605 li
clp
1026.76 67.8605 mo
1032.76 61.8605 li
1026.76 61.8605 mo
1032.76 67.8605 li
f
1 lw
0 lc
1026.76 67.8605 mo
1032.76 61.8605 li
1026.76 61.8605 mo
1032.76 67.8605 li
@
grestore
gsave
1036.1 68.0507 mo
1043.1 68.0507 li
1043.1 61.0508 li
1036.1 61.0508 li
1036.1 68.0507 li
clp
1036.6 67.5507 mo
1042.6 61.5507 li
1036.6 61.5507 mo
1042.6 67.5507 li
f
1 lw
0 lc
1036.6 67.5507 mo
1042.6 61.5507 li
1036.6 61.5507 mo
1042.6 67.5507 li
@
grestore
gsave
1045.93 68.3605 mo
1052.93 68.3605 li
1052.93 61.3605 li
1045.93 61.3605 li
1045.93 68.3605 li
clp
1046.43 67.8605 mo
1052.43 61.8605 li
1046.43 61.8605 mo
1052.43 67.8605 li
f
1 lw
0 lc
1046.43 67.8605 mo
1052.43 61.8605 li
1046.43 61.8605 mo
1052.43 67.8605 li
@
grestore
gsave
1055.77 68.0507 mo
1062.77 68.0507 li
1062.77 61.0508 li
1055.77 61.0508 li
1055.77 68.0507 li
clp
1056.27 67.5507 mo
1062.27 61.5507 li
1056.27 61.5507 mo
1062.27 67.5507 li
f
1 lw
0 lc
1056.27 67.5507 mo
1062.27 61.5507 li
1056.27 61.5507 mo
1062.27 67.5507 li
@
grestore
gsave
1065.61 67.741 mo
1072.61 67.741 li
1072.61 60.7407 li
1065.61 60.7407 li
1065.61 67.741 li
clp
1066.11 67.2408 mo
1072.11 61.2408 li
1066.11 61.2408 mo
1072.11 67.2408 li
f
1 lw
0 lc
1066.11 67.2408 mo
1072.11 61.2408 li
1066.11 61.2408 mo
1072.11 67.2408 li
@
grestore
gsave
1075.45 68.6702 mo
1082.45 68.6702 li
1082.45 61.6703 li
1075.45 61.6703 li
1075.45 68.6702 li
clp
1075.95 68.1703 mo
1081.95 62.1703 li
1075.95 62.1703 mo
1081.95 68.1703 li
f
1 lw
0 lc
1075.95 68.1703 mo
1081.95 62.1703 li
1075.95 62.1703 mo
1081.95 68.1703 li
@
grestore
gsave
1085.29 68.9799 mo
1092.29 68.9799 li
1092.29 61.98 li
1085.29 61.98 li
1085.29 68.9799 li
clp
1085.79 68.4801 mo
1091.79 62.4801 li
1085.79 62.4801 mo
1091.79 68.4801 li
f
1 lw
0 lc
1085.79 68.4801 mo
1091.79 62.4801 li
1085.79 62.4801 mo
1091.79 68.4801 li
@
grestore
gsave
1095.12 69.29 mo
1102.12 69.29 li
1102.12 62.2901 li
1095.12 62.2901 li
1095.12 69.29 li
clp
1095.62 68.7899 mo
1101.62 62.7899 li
1095.62 62.7899 mo
1101.62 68.7899 li
f
1 lw
0 lc
1095.62 68.7899 mo
1101.62 62.7899 li
1095.62 62.7899 mo
1101.62 68.7899 li
@
grestore
gsave
1104.96 68.9799 mo
1111.96 68.9799 li
1111.96 61.98 li
1104.96 61.98 li
1104.96 68.9799 li
clp
1105.46 68.4801 mo
1111.46 62.4801 li
1105.46 62.4801 mo
1111.46 68.4801 li
f
1 lw
0 lc
1105.46 68.4801 mo
1111.46 62.4801 li
1105.46 62.4801 mo
1111.46 68.4801 li
@
grestore
134.498 513.476 mo
144.336 487.245 li
154.174 477.538 li
164.012 442.631 li
173.85 438.501 li
183.688 425.901 li
193.526 421.977 li
203.364 408.965 li
213.202 395.746 li
223.04 377.983 li
232.878 367.449 li
242.716 350.512 li
252.554 326.966 li
262.392 302.594 li
272.23 280.907 li
282.068 268.927 li
291.906 259.219 li
301.744 247.446 li
311.582 241.043 li
321.421 224.313 li
331.259 216.051 li
341.097 210.268 li
350.935 202.626 li
360.773 191.059 li
370.611 185.07 li
380.449 175.982 li
390.287 162.969 li
400.125 149.131 li
409.963 137.564 li
419.801 130.335 li
429.639 124.965 li
439.477 110.713 li
449.315 98.7338 li
459.153 92.5374 li
468.991 87.3738 li
478.829 82.8298 li
488.667 73.7418 li
498.505 68.3716 li
508.343 64.4473 li
518.181 60.5229 li
528.019 59.0771 li
537.857 58.0444 li
547.695 57.6313 li
557.533 58.664 li
567.371 55.9789 li
577.209 54.3265 li
587.047 54.9462 li
596.885 57.0117 li
606.723 53.2938 li
616.561 55.3593 li
626.399 53.7069 li
636.237 52.2611 li
646.075 51.4349 li
655.913 51.0219 li
665.751 49.3694 li
675.589 50.1957 li
685.427 47.5106 li
695.265 48.1302 li
705.103 46.6844 li
714.941 46.4778 li
724.779 48.1302 li
734.617 49.1629 li
744.455 47.5106 li
754.293 48.1302 li
764.131 46.4778 li
773.969 47.5106 li
783.807 47.304 li
793.645 42.9666 li
803.483 42.76 li
813.321 42.5535 li
823.159 42.5535 li
832.997 42.5535 li
842.835 42.3469 li
852.673 42.5535 li
862.511 42.5535 li
872.349 42.3469 li
882.187 42.3469 li
892.025 42.5535 li
901.863 42.5535 li
911.701 42.5535 li
921.539 42.3469 li
931.378 42.1404 li
941.216 42.1404 li
951.054 42.1404 li
960.892 42.1404 li
970.73 42.3469 li
980.568 42.3469 li
990.406 42.3469 li
1000.24 42.3469 li
1010.08 42.3469 li
1019.92 42.76 li
1029.76 42.76 li
1039.6 42.5535 li
1049.43 42.5535 li
1059.27 42.5535 li
1069.11 42.5535 li
1078.95 42.5535 li
1088.79 42.5535 li
1098.62 42.5535 li
1108.46 42.5535 li
1 /0 /CSD get_res sepcs
1 sep
@
134.498 530.516 mo
144.336 523.391 li
154.174 515.026 li
164.012 473.82 li
173.85 444.697 li
183.688 428.586 li
193.526 423.939 li
203.364 405.04 li
213.202 381.804 li
223.04 356.399 li
232.878 346.794 li
242.716 336.88 li
252.554 318.291 li
262.392 292.886 li
272.23 273.987 li
282.068 261.904 li
291.906 251.371 li
301.744 241.147 li
311.582 233.711 li
321.421 221.318 li
331.259 212.024 li
341.097 205.518 li
350.935 195.294 li
360.773 189.407 li
370.611 184.45 li
380.449 175.465 li
390.287 165.861 li
400.125 155.637 li
409.963 144.484 li
419.801 137.048 li
429.639 129.612 li
439.477 114.431 li
449.315 108.235 li
459.153 101.729 li
468.991 97.0814 li
478.829 92.4341 li
488.667 84.069 li
498.505 77.5629 li
508.343 71.0567 li
518.181 68.5782 li
528.019 67.3389 li
537.857 69.1978 li
547.695 66.4094 li
557.533 67.9586 li
567.371 66.4094 li
577.209 63.9309 li
587.047 63.3113 li
596.885 66.4094 li
606.723 62.3818 li
616.561 64.5505 li
626.399 61.4524 li
636.237 61.1425 li
646.075 61.4524 li
655.913 58.664 li
665.751 57.4247 li
675.589 57.4247 li
685.427 56.8051 li
695.265 55.8757 li
705.103 59.2836 li
714.941 57.4247 li
724.779 58.3542 li
734.617 55.8757 li
744.455 55.256 li
754.293 53.7069 li
764.131 56.8051 li
773.969 56.8051 li
783.807 58.0444 li
793.645 55.8757 li
803.483 55.5659 li
813.321 55.8757 li
823.159 56.1855 li
832.997 56.4953 li
842.835 56.1855 li
852.673 56.1855 li
862.511 55.8757 li
872.349 55.8757 li
882.187 55.8757 li
892.025 55.8757 li
901.863 55.8757 li
911.701 55.8757 li
921.539 55.8757 li
931.378 56.1855 li
941.216 56.1855 li
951.054 56.1855 li
960.892 56.1855 li
970.73 56.1855 li
980.568 56.4953 li
990.406 56.4953 li
1000.24 56.1855 li
1010.08 56.1855 li
1019.92 55.5659 li
1029.76 55.5659 li
1039.6 55.5659 li
1049.43 55.5659 li
1059.27 55.5659 li
1069.11 55.5659 li
1078.95 55.8757 li
1088.79 55.8757 li
1098.62 56.1855 li
1108.46 56.1855 li
@
gsave
130.998 534.017 mo
137.998 534.017 li
137.998 527.016 li
130.998 527.016 li
130.998 534.017 li
clp
131.498 533.516 mo
137.498 527.516 li
131.498 527.516 mo
137.498 533.516 li
f
1 lw
0 lc
131.498 533.516 mo
137.498 527.516 li
131.498 527.516 mo
137.498 533.516 li
@
grestore
gsave
140.836 526.891 mo
147.836 526.891 li
147.836 519.891 li
140.836 519.891 li
140.836 526.891 li
clp
141.336 526.391 mo
147.336 520.391 li
141.336 520.391 mo
147.336 526.391 li
f
1 lw
0 lc
141.336 526.391 mo
147.336 520.391 li
141.336 520.391 mo
147.336 526.391 li
@
grestore
gsave
150.674 518.526 mo
157.674 518.526 li
157.674 511.526 li
150.674 511.526 li
150.674 518.526 li
clp
151.174 518.026 mo
157.174 512.026 li
151.174 512.026 mo
157.174 518.026 li
f
1 lw
0 lc
151.174 518.026 mo
157.174 512.026 li
151.174 512.026 mo
157.174 518.026 li
@
grestore
gsave
160.512 477.32 mo
167.512 477.32 li
167.512 470.32 li
160.512 470.32 li
160.512 477.32 li
clp
161.012 476.82 mo
167.012 470.82 li
161.012 470.82 mo
167.012 476.82 li
f
1 lw
0 lc
161.012 476.82 mo
167.012 470.82 li
161.012 470.82 mo
167.012 476.82 li
@
grestore
gsave
170.35 448.197 mo
177.35 448.197 li
177.35 441.197 li
170.35 441.197 li
170.35 448.197 li
clp
170.85 447.697 mo
176.85 441.697 li
170.85 441.697 mo
176.85 447.697 li
f
1 lw
0 lc
170.85 447.697 mo
176.85 441.697 li
170.85 441.697 mo
176.85 447.697 li
@
grestore
gsave
180.188 432.086 mo
187.188 432.086 li
187.188 425.086 li
180.188 425.086 li
180.188 432.086 li
clp
180.688 431.586 mo
186.688 425.586 li
180.688 425.586 mo
186.688 431.586 li
f
1 lw
0 lc
180.688 431.586 mo
186.688 425.586 li
180.688 425.586 mo
186.688 431.586 li
@
grestore
gsave
190.026 427.439 mo
197.026 427.439 li
197.026 420.439 li
190.026 420.439 li
190.026 427.439 li
clp
190.526 426.939 mo
196.526 420.939 li
190.526 420.939 mo
196.526 426.939 li
f
1 lw
0 lc
190.526 426.939 mo
196.526 420.939 li
190.526 420.939 mo
196.526 426.939 li
@
grestore
gsave
199.864 408.54 mo
206.864 408.54 li
206.864 401.54 li
199.864 401.54 li
199.864 408.54 li
clp
200.364 408.04 mo
206.364 402.04 li
200.364 402.04 mo
206.364 408.04 li
f
1 lw
0 lc
200.364 408.04 mo
206.364 402.04 li
200.364 402.04 mo
206.364 408.04 li
@
grestore
gsave
209.702 385.304 mo
216.702 385.304 li
216.702 378.304 li
209.702 378.304 li
209.702 385.304 li
clp
210.202 384.804 mo
216.202 378.804 li
210.202 378.804 mo
216.202 384.804 li
f
1 lw
0 lc
210.202 384.804 mo
216.202 378.804 li
210.202 378.804 mo
216.202 384.804 li
@
grestore
gsave
219.54 359.899 mo
226.54 359.899 li
226.54 352.899 li
219.54 352.899 li
219.54 359.899 li
clp
220.04 359.399 mo
226.04 353.399 li
220.04 353.399 mo
226.04 359.399 li
f
1 lw
0 lc
220.04 359.399 mo
226.04 353.399 li
220.04 353.399 mo
226.04 359.399 li
@
grestore
gsave
229.378 350.295 mo
236.378 350.295 li
236.378 343.295 li
229.378 343.295 li
229.378 350.295 li
clp
229.878 349.794 mo
235.878 343.794 li
229.878 343.794 mo
235.878 349.794 li
f
1 lw
0 lc
229.878 349.794 mo
235.878 343.794 li
229.878 343.794 mo
235.878 349.794 li
@
grestore
gsave
239.216 340.38 mo
246.216 340.38 li
246.216 333.38 li
239.216 333.38 li
239.216 340.38 li
clp
239.716 339.88 mo
245.716 333.88 li
239.716 333.88 mo
245.716 339.88 li
f
1 lw
0 lc
239.716 339.88 mo
245.716 333.88 li
239.716 333.88 mo
245.716 339.88 li
@
grestore
gsave
249.055 321.791 mo
256.054 321.791 li
256.054 314.791 li
249.055 314.791 li
249.055 321.791 li
clp
249.554 321.291 mo
255.554 315.291 li
249.554 315.291 mo
255.554 321.291 li
f
1 lw
0 lc
249.554 321.291 mo
255.554 315.291 li
249.554 315.291 mo
255.554 321.291 li
@
grestore
gsave
258.892 296.386 mo
265.893 296.386 li
265.893 289.386 li
258.892 289.386 li
258.892 296.386 li
clp
259.392 295.886 mo
265.392 289.886 li
259.392 289.886 mo
265.392 295.886 li
f
1 lw
0 lc
259.392 295.886 mo
265.392 289.886 li
259.392 289.886 mo
265.392 295.886 li
@
grestore
gsave
268.73 277.487 mo
275.73 277.487 li
275.73 270.488 li
268.73 270.488 li
268.73 277.487 li
clp
269.23 276.987 mo
275.23 270.987 li
269.23 270.987 mo
275.23 276.987 li
f
1 lw
0 lc
269.23 276.987 mo
275.23 270.987 li
269.23 270.987 mo
275.23 276.987 li
@
grestore
gsave
278.568 265.404 mo
285.568 265.404 li
285.568 258.404 li
278.568 258.404 li
278.568 265.404 li
clp
279.068 264.904 mo
285.068 258.904 li
279.068 258.904 mo
285.068 264.904 li
f
1 lw
0 lc
279.068 264.904 mo
285.068 258.904 li
279.068 258.904 mo
285.068 264.904 li
@
grestore
gsave
288.406 254.871 mo
295.406 254.871 li
295.406 247.871 li
288.406 247.871 li
288.406 254.871 li
clp
288.906 254.371 mo
294.906 248.371 li
288.906 248.371 mo
294.906 254.371 li
f
1 lw
0 lc
288.906 254.371 mo
294.906 248.371 li
288.906 248.371 mo
294.906 254.371 li
@
grestore
gsave
298.244 244.646 mo
305.244 244.646 li
305.244 237.647 li
298.244 237.647 li
298.244 244.646 li
clp
298.744 244.147 mo
304.744 238.147 li
298.744 238.147 mo
304.744 244.147 li
f
1 lw
0 lc
298.744 244.147 mo
304.744 238.147 li
298.744 238.147 mo
304.744 244.147 li
@
grestore
gsave
308.083 237.211 mo
315.082 237.211 li
315.082 230.211 li
308.083 230.211 li
308.083 237.211 li
clp
308.582 236.711 mo
314.582 230.711 li
308.582 230.711 mo
314.582 236.711 li
f
1 lw
0 lc
308.582 236.711 mo
314.582 230.711 li
308.582 230.711 mo
314.582 236.711 li
@
grestore
gsave
317.921 224.818 mo
324.921 224.818 li
324.921 217.818 li
317.921 217.818 li
317.921 224.818 li
clp
318.42 224.318 mo
324.42 218.318 li
318.42 218.318 mo
324.42 224.318 li
f
1 lw
0 lc
318.42 224.318 mo
324.42 218.318 li
318.42 218.318 mo
324.42 224.318 li
@
grestore
gsave
327.758 215.524 mo
334.759 215.524 li
334.759 208.524 li
327.758 208.524 li
327.758 215.524 li
clp
328.258 215.024 mo
334.258 209.024 li
328.258 209.024 mo
334.258 215.024 li
f
1 lw
0 lc
328.258 215.024 mo
334.258 209.024 li
328.258 209.024 mo
334.258 215.024 li
@
grestore
gsave
337.596 209.018 mo
344.596 209.018 li
344.596 202.018 li
337.596 202.018 li
337.596 209.018 li
clp
338.096 208.518 mo
344.096 202.518 li
338.096 202.518 mo
344.096 208.518 li
f
1 lw
0 lc
338.096 208.518 mo
344.096 202.518 li
338.096 202.518 mo
344.096 208.518 li
@
grestore
gsave
347.434 198.794 mo
354.434 198.794 li
354.434 191.794 li
347.434 191.794 li
347.434 198.794 li
clp
347.934 198.294 mo
353.934 192.294 li
347.934 192.294 mo
353.934 198.294 li
f
1 lw
0 lc
347.934 198.294 mo
353.934 192.294 li
347.934 192.294 mo
353.934 198.294 li
@
grestore
gsave
357.272 192.907 mo
364.272 192.907 li
364.272 185.907 li
357.272 185.907 li
357.272 192.907 li
clp
357.772 192.407 mo
363.772 186.407 li
357.772 186.407 mo
363.772 192.407 li
f
1 lw
0 lc
357.772 192.407 mo
363.772 186.407 li
357.772 186.407 mo
363.772 192.407 li
@
grestore
gsave
367.111 187.95 mo
374.111 187.95 li
374.111 180.95 li
367.111 180.95 li
367.111 187.95 li
clp
367.611 187.45 mo
373.611 181.45 li
367.611 181.45 mo
373.611 187.45 li
f
1 lw
0 lc
367.611 187.45 mo
373.611 181.45 li
367.611 181.45 mo
373.611 187.45 li
@
grestore
gsave
376.949 178.965 mo
383.949 178.965 li
383.949 171.965 li
376.949 171.965 li
376.949 178.965 li
clp
377.449 178.465 mo
383.449 172.465 li
377.449 172.465 mo
383.449 178.465 li
f
1 lw
0 lc
377.449 178.465 mo
383.449 172.465 li
377.449 172.465 mo
383.449 178.465 li
@
grestore
gsave
386.787 169.361 mo
393.787 169.361 li
393.787 162.361 li
386.787 162.361 li
386.787 169.361 li
clp
387.287 168.861 mo
393.287 162.861 li
387.287 162.861 mo
393.287 168.861 li
f
1 lw
0 lc
387.287 168.861 mo
393.287 162.861 li
387.287 162.861 mo
393.287 168.861 li
@
grestore
gsave
396.624 159.137 mo
403.625 159.137 li
403.625 152.137 li
396.624 152.137 li
396.624 159.137 li
clp
397.125 158.637 mo
403.125 152.637 li
397.125 152.637 mo
403.125 158.637 li
f
1 lw
0 lc
397.125 158.637 mo
403.125 152.637 li
397.125 152.637 mo
403.125 158.637 li
@
grestore
gsave
406.462 147.983 mo
413.462 147.983 li
413.462 140.983 li
406.462 140.983 li
406.462 147.983 li
clp
406.963 147.484 mo
412.963 141.484 li
406.963 141.484 mo
412.963 147.484 li
f
1 lw
0 lc
406.963 147.484 mo
412.963 141.484 li
406.963 141.484 mo
412.963 147.484 li
@
grestore
gsave
416.301 140.548 mo
423.3 140.548 li
423.3 133.548 li
416.301 133.548 li
416.301 140.548 li
clp
416.801 140.048 mo
422.801 134.048 li
416.801 134.048 mo
422.801 140.048 li
f
1 lw
0 lc
416.801 140.048 mo
422.801 134.048 li
416.801 134.048 mo
422.801 140.048 li
@
grestore
gsave
426.139 133.112 mo
433.138 133.112 li
433.138 126.112 li
426.139 126.112 li
426.139 133.112 li
clp
426.639 132.612 mo
432.639 126.612 li
426.639 126.612 mo
432.639 132.612 li
f
1 lw
0 lc
426.639 132.612 mo
432.639 126.612 li
426.639 126.612 mo
432.639 132.612 li
@
grestore
gsave
435.977 117.931 mo
442.977 117.931 li
442.977 110.931 li
435.977 110.931 li
435.977 117.931 li
clp
436.477 117.431 mo
442.477 111.431 li
436.477 111.431 mo
442.477 117.431 li
f
1 lw
0 lc
436.477 117.431 mo
442.477 111.431 li
436.477 111.431 mo
442.477 117.431 li
@
grestore
gsave
445.815 111.735 mo
452.815 111.735 li
452.815 104.735 li
445.815 104.735 li
445.815 111.735 li
clp
446.315 111.235 mo
452.315 105.235 li
446.315 105.235 mo
452.315 111.235 li
f
1 lw
0 lc
446.315 111.235 mo
452.315 105.235 li
446.315 105.235 mo
452.315 111.235 li
@
grestore
gsave
455.653 105.229 mo
462.653 105.229 li
462.653 98.2287 li
455.653 98.2287 li
455.653 105.229 li
clp
456.153 104.729 mo
462.153 98.7286 li
456.153 98.7286 mo
462.153 104.729 li
f
1 lw
0 lc
456.153 104.729 mo
462.153 98.7286 li
456.153 98.7286 mo
462.153 104.729 li
@
grestore
gsave
465.491 100.581 mo
472.491 100.581 li
472.491 93.5813 li
465.491 93.5813 li
465.491 100.581 li
clp
465.991 100.081 mo
471.991 94.0814 li
465.991 94.0814 mo
471.991 100.081 li
f
1 lw
0 lc
465.991 100.081 mo
471.991 94.0814 li
465.991 94.0814 mo
471.991 100.081 li
@
grestore
gsave
475.329 95.9342 mo
482.329 95.9342 li
482.329 88.934 li
475.329 88.934 li
475.329 95.9342 li
clp
475.829 95.4341 mo
481.829 89.4341 li
475.829 89.4341 mo
481.829 95.4341 li
f
1 lw
0 lc
475.829 95.4341 mo
481.829 89.4341 li
475.829 89.4341 mo
481.829 95.4341 li
@
grestore
gsave
485.167 87.5691 mo
492.167 87.5691 li
492.167 80.5691 li
485.167 80.5691 li
485.167 87.5691 li
clp
485.667 87.069 mo
491.667 81.069 li
485.667 81.069 mo
491.667 87.069 li
f
1 lw
0 lc
485.667 87.069 mo
491.667 81.069 li
485.667 81.069 mo
491.667 87.069 li
@
grestore
gsave
495.005 81.063 mo
502.005 81.063 li
502.005 74.063 li
495.005 74.063 li
495.005 81.063 li
clp
495.505 80.5629 mo
501.505 74.5629 li
495.505 74.5629 mo
501.505 80.5629 li
f
1 lw
0 lc
495.505 80.5629 mo
501.505 74.5629 li
495.505 74.5629 mo
501.505 80.5629 li
@
grestore
gsave
504.843 74.5568 mo
511.843 74.5568 li
511.843 67.5566 li
504.843 67.5566 li
504.843 74.5568 li
clp
505.343 74.0567 mo
511.343 68.0567 li
505.343 68.0567 mo
511.343 74.0567 li
f
1 lw
0 lc
505.343 74.0567 mo
511.343 68.0567 li
505.343 68.0567 mo
511.343 74.0567 li
@
grestore
gsave
514.681 72.0783 mo
521.681 72.0783 li
521.681 65.0784 li
514.681 65.0784 li
514.681 72.0783 li
clp
515.181 71.5782 mo
521.181 65.5782 li
515.181 65.5782 mo
521.181 71.5782 li
f
1 lw
0 lc
515.181 71.5782 mo
521.181 65.5782 li
515.181 65.5782 mo
521.181 71.5782 li
@
grestore
gsave
524.519 70.839 mo
531.519 70.839 li
531.519 63.8391 li
524.519 63.8391 li
524.519 70.839 li
clp
525.019 70.3389 mo
531.019 64.3389 li
525.019 64.3389 mo
531.019 70.3389 li
f
1 lw
0 lc
525.019 70.3389 mo
531.019 64.3389 li
525.019 64.3389 mo
531.019 70.3389 li
@
grestore
gsave
534.357 72.6978 mo
541.357 72.6978 li
541.357 65.6978 li
534.357 65.6978 li
534.357 72.6978 li
clp
534.857 72.1978 mo
540.857 66.1978 li
534.857 66.1978 mo
540.857 72.1978 li
f
1 lw
0 lc
534.857 72.1978 mo
540.857 66.1978 li
534.857 66.1978 mo
540.857 72.1978 li
@
grestore
gsave
544.195 69.9095 mo
551.195 69.9095 li
551.195 62.9095 li
544.195 62.9095 li
544.195 69.9095 li
clp
544.695 69.4095 mo
550.695 63.4095 li
544.695 63.4095 mo
550.695 69.4095 li
f
1 lw
0 lc
544.695 69.4095 mo
550.695 63.4095 li
544.695 63.4095 mo
550.695 69.4095 li
@
grestore
gsave
554.033 71.4585 mo
561.033 71.4585 li
561.033 64.4585 li
554.033 64.4585 li
554.033 71.4585 li
clp
554.533 70.9586 mo
560.533 64.9586 li
554.533 64.9586 mo
560.533 70.9586 li
f
1 lw
0 lc
554.533 70.9586 mo
560.533 64.9586 li
554.533 64.9586 mo
560.533 70.9586 li
@
grestore
gsave
563.871 69.9095 mo
570.871 69.9095 li
570.871 62.9095 li
563.871 62.9095 li
563.871 69.9095 li
clp
564.371 69.4095 mo
570.371 63.4095 li
564.371 63.4095 mo
570.371 69.4095 li
f
1 lw
0 lc
564.371 69.4095 mo
570.371 63.4095 li
564.371 63.4095 mo
570.371 69.4095 li
@
grestore
gsave
573.709 67.4309 mo
580.709 67.4309 li
580.709 60.431 li
573.709 60.431 li
573.709 67.4309 li
clp
574.209 66.931 mo
580.209 60.931 li
574.209 60.931 mo
580.209 66.931 li
f
1 lw
0 lc
574.209 66.931 mo
580.209 60.931 li
574.209 60.931 mo
580.209 66.931 li
@
grestore
gsave
583.547 66.8115 mo
590.547 66.8115 li
590.547 59.8112 li
583.547 59.8112 li
583.547 66.8115 li
clp
584.047 66.3113 mo
590.047 60.3113 li
584.047 60.3113 mo
590.047 66.3113 li
f
1 lw
0 lc
584.047 66.3113 mo
590.047 60.3113 li
584.047 60.3113 mo
590.047 66.3113 li
@
grestore
gsave
593.385 69.9095 mo
600.385 69.9095 li
600.385 62.9095 li
593.385 62.9095 li
593.385 69.9095 li
clp
593.885 69.4095 mo
599.885 63.4095 li
593.885 63.4095 mo
599.885 69.4095 li
f
1 lw
0 lc
593.885 69.4095 mo
599.885 63.4095 li
593.885 63.4095 mo
599.885 69.4095 li
@
grestore
gsave
603.223 65.8819 mo
610.223 65.8819 li
610.223 58.882 li
603.223 58.882 li
603.223 65.8819 li
clp
603.723 65.3819 mo
609.723 59.3819 li
603.723 59.3819 mo
609.723 65.3819 li
f
1 lw
0 lc
603.723 65.3819 mo
609.723 59.3819 li
603.723 59.3819 mo
609.723 65.3819 li
@
grestore
gsave
613.061 68.0507 mo
620.061 68.0507 li
620.061 61.0504 li
613.061 61.0504 li
613.061 68.0507 li
clp
613.561 67.5506 mo
619.561 61.5506 li
613.561 61.5506 mo
619.561 67.5506 li
f
1 lw
0 lc
613.561 67.5506 mo
619.561 61.5506 li
613.561 61.5506 mo
619.561 67.5506 li
@
grestore
gsave
622.899 64.9524 mo
629.899 64.9524 li
629.899 57.9524 li
622.899 57.9524 li
622.899 64.9524 li
clp
623.399 64.4524 mo
629.399 58.4524 li
623.399 58.4524 mo
629.399 64.4524 li
f
1 lw
0 lc
623.399 64.4524 mo
629.399 58.4524 li
623.399 58.4524 mo
629.399 64.4524 li
@
grestore
gsave
632.737 64.6427 mo
639.737 64.6427 li
639.737 57.6427 li
632.737 57.6427 li
632.737 64.6427 li
clp
633.237 64.1426 mo
639.237 58.1426 li
633.237 58.1426 mo
639.237 64.1426 li
f
1 lw
0 lc
633.237 64.1426 mo
639.237 58.1426 li
633.237 58.1426 mo
639.237 64.1426 li
@
grestore
gsave
642.575 64.9524 mo
649.575 64.9524 li
649.575 57.9524 li
642.575 57.9524 li
642.575 64.9524 li
clp
643.075 64.4524 mo
649.075 58.4524 li
643.075 58.4524 mo
649.075 64.4524 li
f
1 lw
0 lc
643.075 64.4524 mo
649.075 58.4524 li
643.075 58.4524 mo
649.075 64.4524 li
@
grestore
gsave
652.413 62.1641 mo
659.413 62.1641 li
659.413 55.1642 li
652.413 55.1642 li
652.413 62.1641 li
clp
652.913 61.6641 mo
658.913 55.6641 li
652.913 55.6641 mo
658.913 61.6641 li
f
1 lw
0 lc
652.913 61.6641 mo
658.913 55.6641 li
652.913 55.6641 mo
658.913 61.6641 li
@
grestore
gsave
662.251 60.9248 mo
669.251 60.9248 li
669.251 53.9249 li
662.251 53.9249 li
662.251 60.9248 li
clp
662.751 60.4248 mo
668.751 54.4248 li
662.751 54.4248 mo
668.751 60.4248 li
f
1 lw
0 lc
662.751 60.4248 mo
668.751 54.4248 li
662.751 54.4248 mo
668.751 60.4248 li
@
grestore
gsave
672.089 60.9248 mo
679.089 60.9248 li
679.089 53.9249 li
672.089 53.9249 li
672.089 60.9248 li
clp
672.589 60.4248 mo
678.589 54.4248 li
672.589 54.4248 mo
678.589 60.4248 li
f
1 lw
0 lc
672.589 60.4248 mo
678.589 54.4248 li
672.589 54.4248 mo
678.589 60.4248 li
@
grestore
gsave
681.927 60.305 mo
688.927 60.305 li
688.927 53.3051 li
681.927 53.3051 li
681.927 60.305 li
clp
682.427 59.8052 mo
688.427 53.8052 li
682.427 53.8052 mo
688.427 59.8052 li
f
1 lw
0 lc
682.427 59.8052 mo
688.427 53.8052 li
682.427 53.8052 mo
688.427 59.8052 li
@
grestore
gsave
691.765 59.3758 mo
698.765 59.3758 li
698.765 52.3759 li
691.765 52.3759 li
691.765 59.3758 li
clp
692.265 58.8757 mo
698.265 52.8757 li
692.265 52.8757 mo
698.265 58.8757 li
f
1 lw
0 lc
692.265 58.8757 mo
698.265 52.8757 li
692.265 52.8757 mo
698.265 58.8757 li
@
grestore
gsave
701.603 62.7839 mo
708.603 62.7839 li
708.603 55.7836 li
701.603 55.7836 li
701.603 62.7839 li
clp
702.103 62.2838 mo
708.103 56.2838 li
702.103 56.2838 mo
708.103 62.2838 li
f
1 lw
0 lc
702.103 62.2838 mo
708.103 56.2838 li
702.103 56.2838 mo
708.103 62.2838 li
@
grestore
gsave
711.441 60.9248 mo
718.441 60.9248 li
718.441 53.9249 li
711.441 53.9249 li
711.441 60.9248 li
clp
711.941 60.4249 mo
717.941 54.4249 li
711.941 54.4249 mo
717.941 60.4249 li
f
1 lw
0 lc
711.941 60.4249 mo
717.941 54.4249 li
711.941 54.4249 mo
717.941 60.4249 li
@
grestore
gsave
721.279 61.8544 mo
728.279 61.8544 li
728.279 54.8544 li
721.279 54.8544 li
721.279 61.8544 li
clp
721.779 61.3543 mo
727.779 55.3543 li
721.779 55.3543 mo
727.779 61.3543 li
f
1 lw
0 lc
721.779 61.3543 mo
727.779 55.3543 li
721.779 55.3543 mo
727.779 61.3543 li
@
grestore
gsave
731.117 59.3758 mo
738.117 59.3758 li
738.117 52.3759 li
731.117 52.3759 li
731.117 59.3758 li
clp
731.617 58.8758 mo
737.617 52.8758 li
731.617 52.8758 mo
737.617 58.8758 li
f
1 lw
0 lc
731.617 58.8758 mo
737.617 52.8758 li
731.617 52.8758 mo
737.617 58.8758 li
@
grestore
gsave
740.955 58.756 mo
747.955 58.756 li
747.955 51.7561 li
740.955 51.7561 li
740.955 58.756 li
clp
741.455 58.2562 mo
747.455 52.2562 li
741.455 52.2562 mo
747.455 58.2562 li
f
1 lw
0 lc
741.455 58.2562 mo
747.455 52.2562 li
741.455 52.2562 mo
747.455 58.2562 li
@
grestore
gsave
750.793 57.207 mo
757.793 57.207 li
757.793 50.2071 li
750.793 50.2071 li
750.793 57.207 li
clp
751.293 56.7071 mo
757.293 50.7071 li
751.293 50.7071 mo
757.293 56.7071 li
f
1 lw
0 lc
751.293 56.7071 mo
757.293 50.7071 li
751.293 50.7071 mo
757.293 56.7071 li
@
grestore
gsave
760.631 60.3054 mo
767.631 60.3054 li
767.631 53.3054 li
760.631 53.3054 li
760.631 60.3054 li
clp
761.131 59.8053 mo
767.131 53.8053 li
761.131 53.8053 mo
767.131 59.8053 li
f
1 lw
0 lc
761.131 59.8053 mo
767.131 53.8053 li
761.131 53.8053 mo
767.131 59.8053 li
@
grestore
gsave
770.469 60.3054 mo
777.469 60.3054 li
777.469 53.3054 li
770.469 53.3054 li
770.469 60.3054 li
clp
770.969 59.8053 mo
776.969 53.8053 li
770.969 53.8053 mo
776.969 59.8053 li
f
1 lw
0 lc
770.969 59.8053 mo
776.969 53.8053 li
770.969 53.8053 mo
776.969 59.8053 li
@
grestore
gsave
780.307 61.5446 mo
787.307 61.5446 li
787.307 54.5447 li
780.307 54.5447 li
780.307 61.5446 li
clp
780.807 61.0446 mo
786.807 55.0446 li
780.807 55.0446 mo
786.807 61.0446 li
f
1 lw
0 lc
780.807 61.0446 mo
786.807 55.0446 li
780.807 55.0446 mo
786.807 61.0446 li
@
grestore
gsave
790.145 59.3758 mo
797.145 59.3758 li
797.145 52.3759 li
790.145 52.3759 li
790.145 59.3758 li
clp
790.645 58.8759 mo
796.645 52.8759 li
790.645 52.8759 mo
796.645 58.8759 li
f
1 lw
0 lc
790.645 58.8759 mo
796.645 52.8759 li
790.645 52.8759 mo
796.645 58.8759 li
@
grestore
gsave
799.983 59.0661 mo
806.983 59.0661 li
806.983 52.0661 li
799.983 52.0661 li
799.983 59.0661 li
clp
800.483 58.566 mo
806.483 52.566 li
800.483 52.566 mo
806.483 58.566 li
f
1 lw
0 lc
800.483 58.566 mo
806.483 52.566 li
800.483 52.566 mo
806.483 58.566 li
@
grestore
gsave
809.821 59.3758 mo
816.821 59.3758 li
816.821 52.3759 li
809.821 52.3759 li
809.821 59.3758 li
clp
810.321 58.8759 mo
816.321 52.8759 li
810.321 52.8759 mo
816.321 58.8759 li
f
1 lw
0 lc
810.321 58.8759 mo
816.321 52.8759 li
810.321 52.8759 mo
816.321 58.8759 li
@
grestore
gsave
819.659 59.6856 mo
826.659 59.6856 li
826.659 52.6856 li
819.659 52.6856 li
819.659 59.6856 li
clp
820.159 59.1857 mo
826.159 53.1857 li
820.159 53.1857 mo
826.159 59.1857 li
f
1 lw
0 lc
820.159 59.1857 mo
826.159 53.1857 li
820.159 53.1857 mo
826.159 59.1857 li
@
grestore
gsave
829.497 59.9956 mo
836.497 59.9956 li
836.497 52.9953 li
829.497 52.9953 li
829.497 59.9956 li
clp
829.997 59.4955 mo
835.997 53.4955 li
829.997 53.4955 mo
835.997 59.4955 li
f
1 lw
0 lc
829.997 59.4955 mo
835.997 53.4955 li
829.997 53.4955 mo
835.997 59.4955 li
@
grestore
gsave
839.335 59.6856 mo
846.335 59.6856 li
846.335 52.6856 li
839.335 52.6856 li
839.335 59.6856 li
clp
839.835 59.1857 mo
845.835 53.1857 li
839.835 53.1857 mo
845.835 59.1857 li
f
1 lw
0 lc
839.835 59.1857 mo
845.835 53.1857 li
839.835 53.1857 mo
845.835 59.1857 li
@
grestore
gsave
849.173 59.6856 mo
856.173 59.6856 li
856.173 52.6856 li
849.173 52.6856 li
849.173 59.6856 li
clp
849.673 59.1857 mo
855.673 53.1857 li
849.673 53.1857 mo
855.673 59.1857 li
f
1 lw
0 lc
849.673 59.1857 mo
855.673 53.1857 li
849.673 53.1857 mo
855.673 59.1857 li
@
grestore
gsave
859.011 59.3758 mo
866.011 59.3758 li
866.011 52.3759 li
859.011 52.3759 li
859.011 59.3758 li
clp
859.511 58.8759 mo
865.511 52.8759 li
859.511 52.8759 mo
865.511 58.8759 li
f
1 lw
0 lc
859.511 58.8759 mo
865.511 52.8759 li
859.511 52.8759 mo
865.511 58.8759 li
@
grestore
gsave
868.849 59.3758 mo
875.849 59.3758 li
875.849 52.3759 li
868.849 52.3759 li
868.849 59.3758 li
clp
869.349 58.8759 mo
875.349 52.8759 li
869.349 52.8759 mo
875.349 58.8759 li
f
1 lw
0 lc
869.349 58.8759 mo
875.349 52.8759 li
869.349 52.8759 mo
875.349 58.8759 li
@
grestore
gsave
878.687 59.3758 mo
885.687 59.3758 li
885.687 52.3759 li
878.687 52.3759 li
878.687 59.3758 li
clp
879.187 58.8759 mo
885.187 52.8759 li
879.187 52.8759 mo
885.187 58.8759 li
f
1 lw
0 lc
879.187 58.8759 mo
885.187 52.8759 li
879.187 52.8759 mo
885.187 58.8759 li
@
grestore
gsave
888.525 59.3758 mo
895.525 59.3758 li
895.525 52.3759 li
888.525 52.3759 li
888.525 59.3758 li
clp
889.025 58.8759 mo
895.025 52.8759 li
889.025 52.8759 mo
895.025 58.8759 li
f
1 lw
0 lc
889.025 58.8759 mo
895.025 52.8759 li
889.025 52.8759 mo
895.025 58.8759 li
@
grestore
gsave
898.363 59.3758 mo
905.363 59.3758 li
905.363 52.3759 li
898.363 52.3759 li
898.363 59.3758 li
clp
898.863 58.8759 mo
904.863 52.8759 li
898.863 52.8759 mo
904.863 58.8759 li
f
1 lw
0 lc
898.863 58.8759 mo
904.863 52.8759 li
898.863 52.8759 mo
904.863 58.8759 li
@
grestore
gsave
908.201 59.3758 mo
915.201 59.3758 li
915.201 52.3759 li
908.201 52.3759 li
908.201 59.3758 li
clp
908.701 58.8759 mo
914.701 52.8759 li
908.701 52.8759 mo
914.701 58.8759 li
f
1 lw
0 lc
908.701 58.8759 mo
914.701 52.8759 li
908.701 52.8759 mo
914.701 58.8759 li
@
grestore
gsave
918.039 59.3758 mo
925.039 59.3758 li
925.039 52.3759 li
918.039 52.3759 li
918.039 59.3758 li
clp
918.539 58.8759 mo
924.539 52.8759 li
918.539 52.8759 mo
924.539 58.8759 li
f
1 lw
0 lc
918.539 58.8759 mo
924.539 52.8759 li
918.539 52.8759 mo
924.539 58.8759 li
@
grestore
gsave
927.877 59.6856 mo
934.877 59.6856 li
934.877 52.6856 li
927.877 52.6856 li
927.877 59.6856 li
clp
928.377 59.1857 mo
934.377 53.1857 li
928.377 53.1857 mo
934.377 59.1857 li
f
1 lw
0 lc
928.377 59.1857 mo
934.377 53.1857 li
928.377 53.1857 mo
934.377 59.1857 li
@
grestore
gsave
937.715 59.6856 mo
944.715 59.6856 li
944.715 52.6856 li
937.715 52.6856 li
937.715 59.6856 li
clp
938.215 59.1857 mo
944.215 53.1857 li
938.215 53.1857 mo
944.215 59.1857 li
f
1 lw
0 lc
938.215 59.1857 mo
944.215 53.1857 li
938.215 53.1857 mo
944.215 59.1857 li
@
grestore
gsave
947.553 59.6856 mo
954.553 59.6856 li
954.553 52.6856 li
947.553 52.6856 li
947.553 59.6856 li
clp
948.053 59.1857 mo
954.053 53.1857 li
948.053 53.1857 mo
954.053 59.1857 li
f
1 lw
0 lc
948.053 59.1857 mo
954.053 53.1857 li
948.053 53.1857 mo
954.053 59.1857 li
@
grestore
gsave
957.391 59.6856 mo
964.391 59.6856 li
964.391 52.6856 li
957.391 52.6856 li
957.391 59.6856 li
clp
957.891 59.1857 mo
963.891 53.1857 li
957.891 53.1857 mo
963.891 59.1857 li
f
1 lw
0 lc
957.891 59.1857 mo
963.891 53.1857 li
957.891 53.1857 mo
963.891 59.1857 li
@
grestore
gsave
967.229 59.6856 mo
974.229 59.6856 li
974.229 52.6856 li
967.229 52.6856 li
967.229 59.6856 li
clp
967.729 59.1857 mo
973.729 53.1857 li
967.729 53.1857 mo
973.729 59.1857 li
f
1 lw
0 lc
967.729 59.1857 mo
973.729 53.1857 li
967.729 53.1857 mo
973.729 59.1857 li
@
grestore
gsave
977.067 59.9956 mo
984.068 59.9956 li
984.068 52.9953 li
977.067 52.9953 li
977.067 59.9956 li
clp
977.567 59.4955 mo
983.567 53.4955 li
977.567 53.4955 mo
983.567 59.4955 li
f
1 lw
0 lc
977.567 59.4955 mo
983.567 53.4955 li
977.567 53.4955 mo
983.567 59.4955 li
@
grestore
gsave
986.905 59.9956 mo
993.905 59.9956 li
993.905 52.9953 li
986.905 52.9953 li
986.905 59.9956 li
clp
987.405 59.4955 mo
993.405 53.4955 li
987.405 53.4955 mo
993.405 59.4955 li
f
1 lw
0 lc
987.405 59.4955 mo
993.405 53.4955 li
987.405 53.4955 mo
993.405 59.4955 li
@
grestore
gsave
996.743 59.6856 mo
1003.74 59.6856 li
1003.74 52.6856 li
996.743 52.6856 li
996.743 59.6856 li
clp
997.243 59.1857 mo
1003.24 53.1857 li
997.243 53.1857 mo
1003.24 59.1857 li
f
1 lw
0 lc
997.243 59.1857 mo
1003.24 53.1857 li
997.243 53.1857 mo
1003.24 59.1857 li
@
grestore
gsave
1006.58 59.6856 mo
1013.58 59.6856 li
1013.58 52.6856 li
1006.58 52.6856 li
1006.58 59.6856 li
clp
1007.08 59.1857 mo
1013.08 53.1857 li
1007.08 53.1857 mo
1013.08 59.1857 li
f
1 lw
0 lc
1007.08 59.1857 mo
1013.08 53.1857 li
1007.08 53.1857 mo
1013.08 59.1857 li
@
grestore
gsave
1016.42 59.0661 mo
1023.42 59.0661 li
1023.42 52.0661 li
1016.42 52.0661 li
1016.42 59.0661 li
clp
1016.92 58.566 mo
1022.92 52.566 li
1016.92 52.566 mo
1022.92 58.566 li
f
1 lw
0 lc
1016.92 58.566 mo
1022.92 52.566 li
1016.92 52.566 mo
1022.92 58.566 li
@
grestore
gsave
1026.26 59.0661 mo
1033.26 59.0661 li
1033.26 52.0661 li
1026.26 52.0661 li
1026.26 59.0661 li
clp
1026.76 58.566 mo
1032.76 52.566 li
1026.76 52.566 mo
1032.76 58.566 li
f
1 lw
0 lc
1026.76 58.566 mo
1032.76 52.566 li
1026.76 52.566 mo
1032.76 58.566 li
@
grestore
gsave
1036.1 59.0661 mo
1043.1 59.0661 li
1043.1 52.0661 li
1036.1 52.0661 li
1036.1 59.0661 li
clp
1036.6 58.566 mo
1042.6 52.566 li
1036.6 52.566 mo
1042.6 58.566 li
f
1 lw
0 lc
1036.6 58.566 mo
1042.6 52.566 li
1036.6 52.566 mo
1042.6 58.566 li
@
grestore
gsave
1045.93 59.0661 mo
1052.93 59.0661 li
1052.93 52.0661 li
1045.93 52.0661 li
1045.93 59.0661 li
clp
1046.43 58.566 mo
1052.43 52.566 li
1046.43 52.566 mo
1052.43 58.566 li
f
1 lw
0 lc
1046.43 58.566 mo
1052.43 52.566 li
1046.43 52.566 mo
1052.43 58.566 li
@
grestore
gsave
1055.77 59.0661 mo
1062.77 59.0661 li
1062.77 52.0661 li
1055.77 52.0661 li
1055.77 59.0661 li
clp
1056.27 58.566 mo
1062.27 52.566 li
1056.27 52.566 mo
1062.27 58.566 li
f
1 lw
0 lc
1056.27 58.566 mo
1062.27 52.566 li
1056.27 52.566 mo
1062.27 58.566 li
@
grestore
gsave
1065.61 59.0661 mo
1072.61 59.0661 li
1072.61 52.0661 li
1065.61 52.0661 li
1065.61 59.0661 li
clp
1066.11 58.566 mo
1072.11 52.566 li
1066.11 52.566 mo
1072.11 58.566 li
f
1 lw
0 lc
1066.11 58.566 mo
1072.11 52.566 li
1066.11 52.566 mo
1072.11 58.566 li
@
grestore
gsave
1075.45 59.3758 mo
1082.45 59.3758 li
1082.45 52.3759 li
1075.45 52.3759 li
1075.45 59.3758 li
clp
1075.95 58.8759 mo
1081.95 52.8759 li
1075.95 52.8759 mo
1081.95 58.8759 li
f
1 lw
0 lc
1075.95 58.8759 mo
1081.95 52.8759 li
1075.95 52.8759 mo
1081.95 58.8759 li
@
grestore
gsave
1085.29 59.3758 mo
1092.29 59.3758 li
1092.29 52.3759 li
1085.29 52.3759 li
1085.29 59.3758 li
clp
1085.79 58.8759 mo
1091.79 52.8759 li
1085.79 52.8759 mo
1091.79 58.8759 li
f
1 lw
0 lc
1085.79 58.8759 mo
1091.79 52.8759 li
1085.79 52.8759 mo
1091.79 58.8759 li
@
grestore
gsave
1095.12 59.6856 mo
1102.12 59.6856 li
1102.12 52.6856 li
1095.12 52.6856 li
1095.12 59.6856 li
clp
1095.62 59.1857 mo
1101.62 53.1857 li
1095.62 53.1857 mo
1101.62 59.1857 li
f
1 lw
0 lc
1095.62 59.1857 mo
1101.62 53.1857 li
1095.62 53.1857 mo
1101.62 59.1857 li
@
grestore
gsave
1104.96 59.6856 mo
1111.96 59.6856 li
1111.96 52.6856 li
1104.96 52.6856 li
1104.96 59.6856 li
clp
1105.46 59.1857 mo
1111.46 53.1857 li
1105.46 53.1857 mo
1111.46 59.1857 li
f
1 lw
0 lc
1105.46 59.1857 mo
1111.46 53.1857 li
1105.46 53.1857 mo
1111.46 59.1857 li
@
grestore
.8 lw
0 lj
85.8 554.935 mo
85.8 17.7216 li
@
1157.16 554.935 mo
1157.16 17.7216 li
@
85.8 554.935 mo
1157.16 554.935 li
@
85.8 17.7216 mo
1157.16 17.7216 li
@
1150.16 549.435 mo
698.738 549.435 li
698.148 549.433 697.801 549.291 697.592 549.082 cv
697.382 548.873 697.24 548.525 697.238 547.935 cv
697.238 412.81 li
697.24 412.22 697.382 411.873 697.592 411.664 cv
697.801 411.454 698.148 411.312 698.738 411.31 cv
1150.16 411.31 li
1150.75 411.312 1151.1 411.454 1151.31 411.664 cv
1151.52 411.873 1151.66 412.22 1151.66 412.81 cv
1151.66 547.935 li
1151.66 548.525 1151.52 548.873 1151.31 549.082 cv
1151.1 549.291 1150.75 549.433 1150.16 549.435 cv
0 0 0 0 cmyk
f
1150.17 550.435 mo
1150.17 550.435 1150.16 550.435 1150.16 550.435 cv
698.738 550.435 li
698.735 550.435 698.731 550.435 698.728 550.435 cv
697.989 550.435 697.34 550.244 696.885 549.789 cv
696.427 549.331 696.236 548.679 696.238 547.935 cv
696.238 412.81 li
696.236 412.067 696.427 411.414 696.885 410.957 cv
697.34 410.502 697.989 410.31 698.728 410.31 cv
698.732 410.31 698.735 410.31 698.738 410.31 cv
1150.16 410.31 li
1150.16 410.31 1150.17 410.31 1150.17 410.31 cv
1150.91 410.31 1151.56 410.502 1152.01 410.957 cv
1152.47 411.414 1152.66 412.067 1152.66 412.81 cv
1152.66 547.935 li
1152.66 548.679 1152.47 549.331 1152.01 549.789 cv
1151.56 550.244 1150.91 550.435 1150.17 550.435 cv
698.738 549.435 mo
1150.16 549.435 li
1150.75 549.433 1151.1 549.291 1151.31 549.082 cv
1151.52 548.873 1151.66 548.525 1151.66 547.935 cv
1151.66 412.81 li
1151.66 412.22 1151.52 411.873 1151.31 411.664 cv
1151.1 411.454 1150.75 411.312 1150.16 411.31 cv
698.738 411.31 li
698.148 411.312 697.801 411.454 697.592 411.664 cv
697.382 411.873 697.24 412.22 697.238 412.81 cv
697.238 547.935 li
697.24 548.525 697.382 548.873 697.592 549.082 cv
697.801 549.291 698.148 549.433 698.738 549.435 cv
698.738 549.435 li
.194827 .146395 .141878 0 cmyk
f
1.5 lw
1 lj
700.738 434.107 mo
720.738 434.107 li
0 .9617 .904814 0 cmyk
@
734.648 418.167 mo
734.648 435.177 li
738.218 435.177 li
741.218 435.177 743.438 434.517 744.848 433.137 cv
746.228 431.757 746.948 429.597 746.948 426.657 cv
746.948 423.717 746.228 421.587 744.848 420.207 cv
743.438 418.857 741.218 418.167 738.218 418.167 cv
734.648 418.167 li
731.678 415.737 mo
737.768 415.737 li
741.998 415.737 745.118 416.637 747.098 418.377 cv
749.078 420.147 750.068 422.907 750.068 426.657 cv
750.068 430.437 749.048 433.197 747.068 434.967 cv
745.088 436.737 741.968 437.607 737.768 437.607 cv
731.678 437.607 li
731.678 415.737 li
1 /0 /CSD get_res sepcs
1 sep
f
757.748 427.167 mo
757.748 435.177 li
762.488 435.177 li
764.078 435.177 765.248 434.847 766.028 434.187 cv
766.778 433.527 767.168 432.537 767.168 431.157 cv
767.168 429.807 766.778 428.817 766.028 428.157 cv
765.248 427.497 764.078 427.167 762.488 427.167 cv
757.748 427.167 li
757.748 418.167 mo
757.748 424.767 li
762.128 424.767 li
763.568 424.767 764.618 424.497 765.338 423.957 cv
766.058 423.417 766.418 422.607 766.418 421.467 cv
766.418 420.387 766.058 419.547 765.338 419.007 cv
764.618 418.467 763.568 418.167 762.128 418.167 cv
757.748 418.167 li
754.778 415.737 mo
762.338 415.737 li
764.588 415.737 766.328 416.217 767.558 417.147 cv
768.758 418.107 769.388 419.427 769.388 421.137 cv
769.388 422.487 769.058 423.567 768.428 424.347 cv
767.798 425.127 766.898 425.637 765.698 425.817 cv
767.138 426.147 768.278 426.807 769.088 427.797 cv
769.868 428.787 770.288 430.017 770.288 431.487 cv
770.288 433.467 769.598 434.967 768.278 436.017 cv
766.958 437.097 765.068 437.607 762.638 437.607 cv
754.778 437.607 li
754.778 415.737 li
f
775.358 415.737 mo
779.348 415.737 li
789.038 434.037 li
789.038 415.737 li
791.918 415.737 li
791.918 437.607 li
787.928 437.607 li
778.238 419.307 li
778.238 437.607 li
775.358 437.607 li
775.358 415.737 li
f
813.698 414.837 mo
812.378 417.117 811.418 419.337 810.788 421.527 cv
810.128 423.717 809.828 425.937 809.828 428.187 cv
809.828 430.467 810.128 432.687 810.788 434.877 cv
811.418 437.097 812.378 439.287 813.698 441.537 cv
811.358 441.537 li
809.888 439.227 808.778 437.007 808.058 434.787 cv
807.338 432.567 806.978 430.377 806.978 428.187 cv
806.978 426.027 807.338 423.837 808.058 421.617 cv
808.778 419.397 809.858 417.147 811.358 414.837 cv
813.698 414.837 li
f
816.038 415.737 mo
834.518 415.737 li
834.518 418.227 li
826.748 418.227 li
826.748 437.607 li
823.778 437.607 li
823.778 418.227 li
816.038 418.227 li
816.038 415.737 li
f
846.758 423.717 mo
846.458 423.537 846.128 423.417 845.768 423.327 cv
845.408 423.267 845.018 423.207 844.598 423.207 cv
843.068 423.207 841.898 423.717 841.088 424.707 cv
840.248 425.697 839.858 427.107 839.858 428.967 cv
839.858 437.607 li
837.158 437.607 li
837.158 421.197 li
839.858 421.197 li
839.858 423.747 li
840.398 422.757 841.148 422.007 842.048 421.527 cv
842.948 421.047 844.058 420.807 845.378 420.807 cv
845.558 420.807 845.768 420.837 846.008 420.837 cv
846.218 420.867 846.458 420.897 846.758 420.957 cv
846.758 423.717 li
f
857.048 429.357 mo
854.858 429.357 853.358 429.627 852.518 430.107 cv
851.678 430.617 851.258 431.457 851.258 432.657 cv
851.258 433.617 851.558 434.397 852.188 434.937 cv
852.818 435.507 853.688 435.777 854.768 435.777 cv
856.268 435.777 857.468 435.267 858.368 434.187 cv
859.268 433.137 859.718 431.727 859.718 429.957 cv
859.718 429.357 li
857.048 429.357 li
862.418 428.247 mo
862.418 437.607 li
859.718 437.607 li
859.718 435.117 li
859.088 436.137 858.308 436.857 857.408 437.307 cv
856.508 437.757 855.368 437.997 854.048 437.997 cv
852.368 437.997 851.018 437.547 850.028 436.617 cv
849.038 435.687 848.558 434.427 848.558 432.837 cv
848.558 431.007 849.158 429.627 850.418 428.667 cv
851.648 427.737 853.478 427.257 855.938 427.257 cv
859.718 427.257 li
859.718 426.987 li
859.718 425.757 859.298 424.797 858.488 424.107 cv
857.678 423.447 856.538 423.087 855.068 423.087 cv
854.108 423.087 853.208 423.207 852.308 423.447 cv
851.408 423.687 850.568 424.017 849.758 424.437 cv
849.758 421.947 li
850.718 421.587 851.678 421.287 852.608 421.107 cv
853.538 420.927 854.438 420.807 855.338 420.807 cv
857.708 420.807 859.478 421.437 860.648 422.667 cv
861.818 423.897 862.418 425.757 862.418 428.247 cv
f
867.968 421.197 mo
870.668 421.197 li
870.668 437.607 li
867.968 437.607 li
867.968 421.197 li
867.968 414.807 mo
870.668 414.807 li
870.668 418.227 li
867.968 418.227 li
867.968 414.807 li
f
889.958 427.707 mo
889.958 437.607 li
887.258 437.607 li
887.258 427.797 li
887.258 426.237 886.928 425.097 886.328 424.317 cv
885.728 423.537 884.828 423.147 883.628 423.147 cv
882.158 423.147 881.018 423.627 880.178 424.557 cv
879.338 425.487 878.918 426.747 878.918 428.337 cv
878.918 437.607 li
876.218 437.607 li
876.218 421.197 li
878.918 421.197 li
878.918 423.747 li
879.548 422.787 880.298 422.037 881.198 421.557 cv
882.068 421.077 883.088 420.807 884.228 420.807 cv
886.088 420.807 887.528 421.407 888.488 422.577 cv
889.448 423.747 889.958 425.457 889.958 427.707 cv
f
895.328 421.197 mo
898.028 421.197 li
898.028 437.607 li
895.328 437.607 li
895.328 421.197 li
895.328 414.807 mo
898.028 414.807 li
898.028 418.227 li
895.328 418.227 li
895.328 414.807 li
f
917.318 427.707 mo
917.318 437.607 li
914.618 437.607 li
914.618 427.797 li
914.618 426.237 914.288 425.097 913.688 424.317 cv
913.088 423.537 912.188 423.147 910.988 423.147 cv
909.518 423.147 908.378 423.627 907.538 424.557 cv
906.698 425.487 906.278 426.747 906.278 428.337 cv
906.278 437.607 li
903.578 437.607 li
903.578 421.197 li
906.278 421.197 li
906.278 423.747 li
906.908 422.787 907.658 422.037 908.558 421.557 cv
909.428 421.077 910.448 420.807 911.588 420.807 cv
913.448 420.807 914.888 421.407 915.848 422.577 cv
916.808 423.747 917.318 425.457 917.318 427.707 cv
f
933.488 429.207 mo
933.488 427.287 933.068 425.757 932.288 424.677 cv
931.478 423.597 930.338 423.057 928.898 423.057 cv
927.458 423.057 926.318 423.597 925.508 424.677 cv
924.698 425.757 924.308 427.287 924.308 429.207 cv
924.308 431.157 924.698 432.657 925.508 433.737 cv
926.318 434.817 927.458 435.357 928.898 435.357 cv
930.338 435.357 931.478 434.817 932.288 433.737 cv
933.068 432.657 933.488 431.157 933.488 429.207 cv
936.188 435.567 mo
936.188 438.327 935.558 440.397 934.328 441.777 cv
933.068 443.127 931.178 443.817 928.628 443.817 cv
927.668 443.817 926.798 443.727 925.958 443.607 cv
925.118 443.457 924.278 443.247 923.498 442.947 cv
923.498 440.337 li
924.278 440.757 925.058 441.057 925.838 441.267 cv
926.618 441.477 927.398 441.597 928.208 441.597 cv
929.948 441.597 931.268 441.117 932.168 440.217 cv
933.038 439.287 933.488 437.907 933.488 436.047 cv
933.488 434.727 li
932.918 435.687 932.198 436.407 931.328 436.887 cv
930.458 437.367 929.438 437.607 928.238 437.607 cv
926.198 437.607 924.578 436.857 923.348 435.327 cv
922.118 433.797 921.518 431.757 921.518 429.207 cv
921.518 426.687 922.118 424.647 923.348 423.117 cv
924.578 421.587 926.198 420.807 928.238 420.807 cv
929.438 420.807 930.458 421.047 931.328 421.527 cv
932.198 422.007 932.918 422.727 933.488 423.687 cv
933.488 421.197 li
936.188 421.197 li
936.188 435.567 li
f
942.428 433.887 mo
945.518 433.887 li
945.518 436.407 li
943.118 441.057 li
941.228 441.057 li
942.428 436.407 li
942.428 433.887 li
f
974.048 416.457 mo
974.048 419.337 li
972.908 418.797 971.858 418.407 970.868 418.137 cv
969.848 417.897 968.888 417.747 967.988 417.747 cv
966.368 417.747 965.108 418.077 964.238 418.677 cv
963.368 419.307 962.948 420.207 962.948 421.347 cv
962.948 422.307 963.218 423.057 963.818 423.537 cv
964.388 424.047 965.498 424.437 967.118 424.737 cv
968.918 425.097 li
971.108 425.517 972.728 426.267 973.778 427.317 cv
974.828 428.397 975.368 429.807 975.368 431.577 cv
975.368 433.707 974.648 435.297 973.238 436.377 cv
971.798 437.457 969.728 437.997 966.998 437.997 cv
965.948 437.997 964.838 437.877 963.668 437.667 cv
962.498 437.457 961.298 437.127 960.068 436.647 cv
960.068 433.587 li
961.268 434.277 962.438 434.787 963.578 435.117 cv
964.718 435.477 965.858 435.627 966.998 435.627 cv
968.678 435.627 969.968 435.297 970.898 434.637 cv
971.798 433.977 972.278 433.047 972.278 431.787 cv
972.278 430.707 971.948 429.867 971.288 429.267 cv
970.628 428.667 969.548 428.217 968.048 427.917 cv
966.248 427.557 li
964.028 427.137 962.438 426.447 961.448 425.487 cv
960.458 424.557 959.978 423.267 959.978 421.587 cv
959.978 419.667 960.638 418.137 962.018 417.027 cv
963.368 415.917 965.258 415.347 967.658 415.347 cv
968.678 415.347 969.698 415.437 970.778 415.617 cv
971.828 415.797 972.908 416.097 974.048 416.457 cv
f
979.867 421.197 mo
982.567 421.197 li
982.567 437.607 li
979.867 437.607 li
979.867 421.197 li
979.867 414.807 mo
982.567 414.807 li
982.567 418.227 li
979.867 418.227 li
979.867 414.807 li
f
999.007 429.207 mo
999.007 427.287 998.587 425.757 997.807 424.677 cv
996.997 423.597 995.857 423.057 994.417 423.057 cv
992.977 423.057 991.837 423.597 991.027 424.677 cv
990.217 425.757 989.827 427.287 989.827 429.207 cv
989.827 431.157 990.217 432.657 991.027 433.737 cv
991.837 434.817 992.977 435.357 994.417 435.357 cv
995.857 435.357 996.997 434.817 997.807 433.737 cv
998.587 432.657 999.007 431.157 999.007 429.207 cv
1001.71 435.567 mo
1001.71 438.327 1001.08 440.397 999.847 441.777 cv
998.587 443.127 996.698 443.817 994.147 443.817 cv
993.188 443.817 992.318 443.727 991.477 443.607 cv
990.637 443.457 989.797 443.247 989.017 442.947 cv
989.017 440.337 li
989.797 440.757 990.577 441.057 991.357 441.267 cv
992.137 441.477 992.917 441.597 993.727 441.597 cv
995.467 441.597 996.787 441.117 997.688 440.217 cv
998.557 439.287 999.007 437.907 999.007 436.047 cv
999.007 434.727 li
998.438 435.687 997.717 436.407 996.847 436.887 cv
995.977 437.367 994.957 437.607 993.757 437.607 cv
991.717 437.607 990.097 436.857 988.867 435.327 cv
987.637 433.797 987.037 431.757 987.037 429.207 cv
987.037 426.687 987.637 424.647 988.867 423.117 cv
990.097 421.587 991.717 420.807 993.757 420.807 cv
994.957 420.807 995.977 421.047 996.847 421.527 cv
997.717 422.007 998.438 422.727 999.007 423.687 cv
999.007 421.197 li
1001.71 421.197 li
1001.71 435.567 li
f
1020.04 424.347 mo
1020.7 423.147 1021.51 422.277 1022.44 421.677 cv
1023.37 421.107 1024.48 420.807 1025.77 420.807 cv
1027.45 420.807 1028.77 421.407 1029.7 422.607 cv
1030.63 423.807 1031.11 425.517 1031.11 427.707 cv
1031.11 437.607 li
1028.41 437.607 li
1028.41 427.797 li
1028.41 426.237 1028.11 425.067 1027.57 424.287 cv
1027 423.537 1026.16 423.147 1025.02 423.147 cv
1023.61 423.147 1022.5 423.627 1021.69 424.557 cv
1020.88 425.487 1020.49 426.747 1020.49 428.337 cv
1020.49 437.607 li
1017.79 437.607 li
1017.79 427.797 li
1017.79 426.237 1017.49 425.067 1016.95 424.287 cv
1016.38 423.537 1015.51 423.147 1014.37 423.147 cv
1012.99 423.147 1011.88 423.627 1011.07 424.557 cv
1010.26 425.487 1009.87 426.747 1009.87 428.337 cv
1009.87 437.607 li
1007.17 437.607 li
1007.17 421.197 li
1009.87 421.197 li
1009.87 423.747 li
1010.47 422.757 1011.22 422.007 1012.09 421.527 cv
1012.93 421.047 1013.95 420.807 1015.15 420.807 cv
1016.35 420.807 1017.34 421.107 1018.18 421.707 cv
1019.02 422.307 1019.62 423.207 1020.04 424.347 cv
f
1042.84 423.087 mo
1041.4 423.087 1040.26 423.657 1039.42 424.797 cv
1038.58 425.937 1038.16 427.467 1038.16 429.417 cv
1038.16 431.397 1038.55 432.927 1039.39 434.067 cv
1040.23 435.207 1041.37 435.747 1042.84 435.747 cv
1044.28 435.747 1045.42 435.207 1046.26 434.067 cv
1047.1 432.927 1047.52 431.397 1047.52 429.417 cv
1047.52 427.497 1047.1 425.937 1046.26 424.797 cv
1045.42 423.657 1044.28 423.087 1042.84 423.087 cv
1042.84 420.807 mo
1045.18 420.807 1047.01 421.587 1048.36 423.087 cv
1049.68 424.617 1050.37 426.717 1050.37 429.417 cv
1050.37 432.117 1049.68 434.217 1048.36 435.717 cv
1047.01 437.247 1045.18 437.997 1042.84 437.997 cv
1040.47 437.997 1038.61 437.247 1037.29 435.717 cv
1035.97 434.217 1035.31 432.117 1035.31 429.417 cv
1035.31 426.717 1035.97 424.617 1037.29 423.087 cv
1038.61 421.587 1040.47 420.807 1042.84 420.807 cv
f
1054.84 421.197 mo
1057.54 421.197 li
1057.54 437.607 li
1054.84 437.607 li
1054.84 421.197 li
1054.84 414.807 mo
1057.54 414.807 li
1057.54 418.227 li
1054.84 418.227 li
1054.84 414.807 li
f
1073.98 423.687 mo
1073.98 414.807 li
1076.68 414.807 li
1076.68 437.607 li
1073.98 437.607 li
1073.98 435.147 li
1073.41 436.137 1072.69 436.857 1071.82 437.307 cv
1070.95 437.757 1069.93 437.997 1068.73 437.997 cv
1066.75 437.997 1065.13 437.217 1063.87 435.657 cv
1062.61 434.097 1062.01 431.997 1062.01 429.417 cv
1062.01 426.837 1062.61 424.767 1063.87 423.177 cv
1065.13 421.617 1066.75 420.807 1068.73 420.807 cv
1069.93 420.807 1070.95 421.047 1071.82 421.527 cv
1072.69 422.007 1073.41 422.727 1073.98 423.687 cv
1064.8 429.417 mo
1064.8 431.397 1065.19 432.957 1066 434.097 cv
1066.81 435.237 1067.95 435.777 1069.39 435.777 cv
1070.8 435.777 1071.91 435.237 1072.75 434.097 cv
1073.56 432.957 1073.98 431.397 1073.98 429.417 cv
1073.98 427.437 1073.56 425.907 1072.75 424.767 cv
1071.91 423.627 1070.8 423.057 1069.39 423.057 cv
1067.95 423.057 1066.81 423.627 1066 424.767 cv
1065.19 425.907 1064.8 427.437 1064.8 429.417 cv
f
1081.81 414.837 mo
1084.15 414.837 li
1085.59 417.147 1086.7 419.397 1087.42 421.617 cv
1088.14 423.837 1088.53 426.027 1088.53 428.187 cv
1088.53 430.377 1088.14 432.567 1087.42 434.787 cv
1086.7 437.007 1085.59 439.227 1084.15 441.537 cv
1081.81 441.537 li
1083.1 439.287 1084.06 437.097 1084.72 434.877 cv
1085.35 432.687 1085.68 430.467 1085.68 428.187 cv
1085.68 425.937 1085.35 423.717 1084.72 421.527 cv
1084.06 419.337 1083.1 417.117 1081.81 414.837 cv
f
700.738 468.138 mo
720.738 468.138 li
0 .9617 .904814 0 cmyk
@
707.738 471.138 mo
713.738 465.138 li
707.738 465.138 mo
713.738 471.138 li
f
1 lw
0 lc
707.738 471.138 mo
713.738 465.138 li
707.738 465.138 mo
713.738 471.138 li
@
734.648 452.198 mo
734.648 469.208 li
738.218 469.208 li
741.218 469.208 743.438 468.548 744.848 467.168 cv
746.228 465.788 746.948 463.628 746.948 460.688 cv
746.948 457.748 746.228 455.618 744.848 454.238 cv
743.438 452.888 741.218 452.198 738.218 452.198 cv
734.648 452.198 li
731.678 449.768 mo
737.768 449.768 li
741.998 449.768 745.118 450.668 747.098 452.408 cv
749.078 454.178 750.068 456.938 750.068 460.688 cv
750.068 464.468 749.048 467.228 747.068 468.998 cv
745.088 470.768 741.968 471.638 737.768 471.638 cv
731.678 471.638 li
731.678 449.768 li
1 /0 /CSD get_res sepcs
1 sep
f
757.748 461.198 mo
757.748 469.208 li
762.488 469.208 li
764.078 469.208 765.248 468.878 766.028 468.218 cv
766.778 467.558 767.168 466.568 767.168 465.188 cv
767.168 463.838 766.778 462.848 766.028 462.188 cv
765.248 461.528 764.078 461.198 762.488 461.198 cv
757.748 461.198 li
757.748 452.198 mo
757.748 458.798 li
762.128 458.798 li
763.568 458.798 764.618 458.528 765.338 457.988 cv
766.058 457.448 766.418 456.638 766.418 455.498 cv
766.418 454.418 766.058 453.578 765.338 453.038 cv
764.618 452.498 763.568 452.198 762.128 452.198 cv
757.748 452.198 li
754.778 449.768 mo
762.338 449.768 li
764.588 449.768 766.328 450.248 767.558 451.178 cv
768.758 452.138 769.388 453.458 769.388 455.168 cv
769.388 456.518 769.058 457.598 768.428 458.378 cv
767.798 459.158 766.898 459.668 765.698 459.848 cv
767.138 460.178 768.278 460.838 769.088 461.828 cv
769.868 462.818 770.288 464.048 770.288 465.518 cv
770.288 467.498 769.598 468.998 768.278 470.048 cv
766.958 471.128 765.068 471.638 762.638 471.638 cv
754.778 471.638 li
754.778 449.768 li
f
775.358 449.768 mo
779.348 449.768 li
789.038 468.068 li
789.038 449.768 li
791.918 449.768 li
791.918 471.638 li
787.928 471.638 li
778.238 453.338 li
778.238 471.638 li
775.358 471.638 li
775.358 449.768 li
f
813.698 448.868 mo
812.378 451.148 811.418 453.368 810.788 455.558 cv
810.128 457.748 809.828 459.968 809.828 462.218 cv
809.828 464.498 810.128 466.718 810.788 468.908 cv
811.418 471.128 812.378 473.318 813.698 475.568 cv
811.358 475.568 li
809.888 473.258 808.778 471.038 808.058 468.818 cv
807.338 466.598 806.978 464.408 806.978 462.218 cv
806.978 460.058 807.338 457.868 808.058 455.648 cv
808.778 453.428 809.858 451.178 811.358 448.868 cv
813.698 448.868 li
f
816.038 449.768 mo
834.518 449.768 li
834.518 452.258 li
826.748 452.258 li
826.748 471.638 li
823.778 471.638 li
823.778 452.258 li
816.038 452.258 li
816.038 449.768 li
f
851.288 462.758 mo
851.288 464.078 li
838.898 464.078 li
839.018 465.938 839.558 467.378 840.578 468.338 cv
841.568 469.298 842.948 469.778 844.748 469.778 cv
845.768 469.778 846.788 469.658 847.748 469.418 cv
848.708 469.178 849.698 468.788 850.658 468.248 cv
850.658 470.798 li
849.698 471.218 848.708 471.548 847.688 471.728 cv
846.668 471.908 845.618 472.028 844.598 472.028 cv
841.958 472.028 839.888 471.278 838.358 469.778 cv
836.828 468.278 836.078 466.208 836.078 463.598 cv
836.078 460.928 836.798 458.798 838.238 457.208 cv
839.678 455.648 841.658 454.838 844.118 454.838 cv
846.338 454.838 848.078 455.558 849.368 456.968 cv
850.628 458.408 851.288 460.328 851.288 462.758 cv
848.588 461.978 mo
848.558 460.508 848.138 459.338 847.358 458.438 cv
846.548 457.568 845.468 457.118 844.148 457.118 cv
842.648 457.118 841.448 457.568 840.548 458.408 cv
839.648 459.248 839.108 460.448 838.988 461.978 cv
848.588 461.978 li
f
866.168 455.708 mo
866.168 458.258 li
865.388 457.898 864.608 457.598 863.798 457.388 cv
862.958 457.208 862.118 457.088 861.248 457.088 cv
859.898 457.088 858.878 457.298 858.218 457.718 cv
857.558 458.138 857.228 458.738 857.228 459.548 cv
857.228 460.178 857.468 460.658 857.948 461.018 cv
858.428 461.378 859.388 461.738 860.828 462.038 cv
861.758 462.248 li
863.678 462.668 865.028 463.268 865.838 463.988 cv
866.618 464.738 867.038 465.788 867.038 467.108 cv
867.038 468.638 866.438 469.838 865.238 470.708 cv
864.038 471.608 862.358 472.028 860.258 472.028 cv
859.358 472.028 858.458 471.938 857.498 471.788 cv
856.538 471.638 855.548 471.398 854.498 471.038 cv
854.498 468.248 li
855.488 468.788 856.478 469.178 857.438 469.418 cv
858.398 469.688 859.358 469.808 860.318 469.808 cv
861.578 469.808 862.568 469.598 863.258 469.178 cv
863.918 468.758 864.278 468.128 864.278 467.318 cv
864.278 466.598 864.008 466.028 863.528 465.638 cv
863.048 465.248 861.968 464.858 860.288 464.498 cv
859.358 464.288 li
857.678 463.928 856.448 463.388 855.728 462.668 cv
854.978 461.948 854.618 460.958 854.618 459.668 cv
854.618 458.138 855.158 456.938 856.238 456.098 cv
857.318 455.258 858.878 454.838 860.918 454.838 cv
861.908 454.838 862.838 454.928 863.738 455.078 cv
864.608 455.228 865.418 455.438 866.168 455.708 cv
f
873.998 450.578 mo
873.998 455.228 li
879.548 455.228 li
879.548 457.328 li
873.998 457.328 li
873.998 466.238 li
873.998 467.588 874.178 468.458 874.538 468.818 cv
874.898 469.208 875.648 469.388 876.788 469.388 cv
879.548 469.388 li
879.548 471.638 li
876.788 471.638 li
874.688 471.638 873.248 471.248 872.468 470.468 cv
871.688 469.688 871.298 468.278 871.298 466.238 cv
871.298 457.328 li
869.318 457.328 li
869.318 455.228 li
871.298 455.228 li
871.298 450.578 li
873.998 450.578 li
f
883.088 455.228 mo
885.788 455.228 li
885.788 471.638 li
883.088 471.638 li
883.088 455.228 li
883.088 448.838 mo
885.788 448.838 li
885.788 452.258 li
883.088 452.258 li
883.088 448.838 li
f
905.078 461.738 mo
905.078 471.638 li
902.378 471.638 li
902.378 461.828 li
902.378 460.268 902.048 459.128 901.448 458.348 cv
900.848 457.568 899.948 457.178 898.748 457.178 cv
897.278 457.178 896.138 457.658 895.298 458.588 cv
894.458 459.518 894.038 460.778 894.038 462.368 cv
894.038 471.638 li
891.338 471.638 li
891.338 455.228 li
894.038 455.228 li
894.038 457.778 li
894.668 456.818 895.418 456.068 896.318 455.588 cv
897.188 455.108 898.208 454.838 899.348 454.838 cv
901.208 454.838 902.648 455.438 903.608 456.608 cv
904.568 457.778 905.078 459.488 905.078 461.738 cv
f
921.248 463.238 mo
921.248 461.318 920.828 459.788 920.048 458.708 cv
919.238 457.628 918.098 457.088 916.658 457.088 cv
915.218 457.088 914.078 457.628 913.268 458.708 cv
912.458 459.788 912.068 461.318 912.068 463.238 cv
912.068 465.188 912.458 466.688 913.268 467.768 cv
914.078 468.848 915.218 469.388 916.658 469.388 cv
918.098 469.388 919.238 468.848 920.048 467.768 cv
920.828 466.688 921.248 465.188 921.248 463.238 cv
923.948 469.598 mo
923.948 472.358 923.318 474.428 922.088 475.808 cv
920.828 477.158 918.938 477.848 916.388 477.848 cv
915.428 477.848 914.558 477.758 913.718 477.638 cv
912.878 477.488 912.038 477.278 911.258 476.978 cv
911.258 474.368 li
912.038 474.788 912.818 475.088 913.598 475.298 cv
914.378 475.508 915.158 475.628 915.968 475.628 cv
917.708 475.628 919.028 475.148 919.928 474.248 cv
920.798 473.318 921.248 471.938 921.248 470.078 cv
921.248 468.758 li
920.678 469.718 919.958 470.438 919.088 470.918 cv
918.218 471.398 917.198 471.638 915.998 471.638 cv
913.958 471.638 912.338 470.888 911.108 469.358 cv
909.878 467.828 909.278 465.788 909.278 463.238 cv
909.278 460.718 909.878 458.678 911.108 457.148 cv
912.338 455.618 913.958 454.838 915.998 454.838 cv
917.198 454.838 918.218 455.078 919.088 455.558 cv
919.958 456.038 920.678 456.758 921.248 457.718 cv
921.248 455.228 li
923.948 455.228 li
923.948 469.598 li
f
930.188 467.918 mo
933.278 467.918 li
933.278 470.438 li
930.878 475.088 li
928.988 475.088 li
930.188 470.438 li
930.188 467.918 li
f
961.807 450.488 mo
961.807 453.368 li
960.667 452.828 959.617 452.438 958.627 452.168 cv
957.607 451.928 956.647 451.778 955.747 451.778 cv
954.127 451.778 952.867 452.108 951.997 452.708 cv
951.127 453.338 950.707 454.238 950.707 455.378 cv
950.707 456.338 950.977 457.088 951.577 457.568 cv
952.147 458.078 953.257 458.468 954.877 458.768 cv
956.677 459.128 li
958.867 459.548 960.487 460.298 961.537 461.348 cv
962.587 462.428 963.127 463.838 963.127 465.608 cv
963.127 467.738 962.407 469.328 960.997 470.408 cv
959.557 471.488 957.487 472.028 954.757 472.028 cv
953.707 472.028 952.597 471.908 951.427 471.698 cv
950.257 471.488 949.057 471.158 947.827 470.678 cv
947.827 467.618 li
949.027 468.308 950.197 468.818 951.337 469.148 cv
952.477 469.508 953.617 469.658 954.757 469.658 cv
956.438 469.658 957.727 469.328 958.657 468.668 cv
959.557 468.008 960.037 467.078 960.037 465.818 cv
960.037 464.738 959.707 463.898 959.047 463.298 cv
958.387 462.698 957.307 462.248 955.807 461.948 cv
954.007 461.588 li
951.787 461.168 950.197 460.478 949.207 459.518 cv
948.217 458.588 947.737 457.298 947.737 455.618 cv
947.737 453.698 948.397 452.168 949.777 451.058 cv
951.127 449.948 953.017 449.378 955.417 449.378 cv
956.438 449.378 957.457 449.468 958.537 449.648 cv
959.587 449.828 960.667 450.128 961.807 450.488 cv
f
967.627 455.228 mo
970.327 455.228 li
970.327 471.638 li
967.627 471.638 li
967.627 455.228 li
967.627 448.838 mo
970.327 448.838 li
970.327 452.258 li
967.627 452.258 li
967.627 448.838 li
f
986.767 463.238 mo
986.767 461.318 986.347 459.788 985.567 458.708 cv
984.757 457.628 983.617 457.088 982.177 457.088 cv
980.737 457.088 979.597 457.628 978.787 458.708 cv
977.977 459.788 977.587 461.318 977.587 463.238 cv
977.587 465.188 977.977 466.688 978.787 467.768 cv
979.597 468.848 980.737 469.388 982.177 469.388 cv
983.617 469.388 984.757 468.848 985.567 467.768 cv
986.347 466.688 986.767 465.188 986.767 463.238 cv
989.467 469.598 mo
989.467 472.358 988.837 474.428 987.607 475.808 cv
986.347 477.158 984.457 477.848 981.907 477.848 cv
980.947 477.848 980.077 477.758 979.237 477.638 cv
978.397 477.488 977.557 477.278 976.777 476.978 cv
976.777 474.368 li
977.557 474.788 978.337 475.088 979.117 475.298 cv
979.897 475.508 980.677 475.628 981.487 475.628 cv
983.227 475.628 984.547 475.148 985.447 474.248 cv
986.317 473.318 986.767 471.938 986.767 470.078 cv
986.767 468.758 li
986.197 469.718 985.477 470.438 984.607 470.918 cv
983.737 471.398 982.717 471.638 981.517 471.638 cv
979.477 471.638 977.857 470.888 976.627 469.358 cv
975.397 467.828 974.797 465.788 974.797 463.238 cv
974.797 460.718 975.397 458.678 976.627 457.148 cv
977.857 455.618 979.477 454.838 981.517 454.838 cv
982.717 454.838 983.737 455.078 984.607 455.558 cv
985.477 456.038 986.197 456.758 986.767 457.718 cv
986.767 455.228 li
989.467 455.228 li
989.467 469.598 li
f
1007.8 458.378 mo
1008.46 457.178 1009.27 456.308 1010.2 455.708 cv
1011.13 455.138 1012.24 454.838 1013.53 454.838 cv
1015.21 454.838 1016.53 455.438 1017.46 456.638 cv
1018.39 457.838 1018.87 459.548 1018.87 461.738 cv
1018.87 471.638 li
1016.17 471.638 li
1016.17 461.828 li
1016.17 460.268 1015.87 459.098 1015.33 458.318 cv
1014.76 457.568 1013.92 457.178 1012.78 457.178 cv
1011.37 457.178 1010.26 457.658 1009.45 458.588 cv
1008.64 459.518 1008.25 460.778 1008.25 462.368 cv
1008.25 471.638 li
1005.55 471.638 li
1005.55 461.828 li
1005.55 460.268 1005.25 459.098 1004.71 458.318 cv
1004.14 457.568 1003.27 457.178 1002.13 457.178 cv
1000.75 457.178 999.637 457.658 998.827 458.588 cv
998.017 459.518 997.627 460.778 997.627 462.368 cv
997.627 471.638 li
994.927 471.638 li
994.927 455.228 li
997.627 455.228 li
997.627 457.778 li
998.227 456.788 998.977 456.038 999.847 455.558 cv
1000.69 455.078 1001.71 454.838 1002.91 454.838 cv
1004.11 454.838 1005.1 455.138 1005.94 455.738 cv
1006.78 456.338 1007.38 457.238 1007.8 458.378 cv
f
1030.6 457.118 mo
1029.16 457.118 1028.02 457.688 1027.18 458.828 cv
1026.34 459.968 1025.92 461.498 1025.92 463.448 cv
1025.92 465.428 1026.31 466.958 1027.15 468.098 cv
1027.99 469.238 1029.13 469.778 1030.6 469.778 cv
1032.04 469.778 1033.18 469.238 1034.02 468.098 cv
1034.86 466.958 1035.28 465.428 1035.28 463.448 cv
1035.28 461.528 1034.86 459.968 1034.02 458.828 cv
1033.18 457.688 1032.04 457.118 1030.6 457.118 cv
1030.6 454.838 mo
1032.94 454.838 1034.77 455.618 1036.12 457.118 cv
1037.44 458.648 1038.13 460.748 1038.13 463.448 cv
1038.13 466.148 1037.44 468.248 1036.12 469.748 cv
1034.77 471.278 1032.94 472.028 1030.6 472.028 cv
1028.23 472.028 1026.37 471.278 1025.05 469.748 cv
1023.73 468.248 1023.07 466.148 1023.07 463.448 cv
1023.07 460.748 1023.73 458.648 1025.05 457.118 cv
1026.37 455.618 1028.23 454.838 1030.6 454.838 cv
f
1042.6 455.228 mo
1045.3 455.228 li
1045.3 471.638 li
1042.6 471.638 li
1042.6 455.228 li
1042.6 448.838 mo
1045.3 448.838 li
1045.3 452.258 li
1042.6 452.258 li
1042.6 448.838 li
f
1061.74 457.718 mo
1061.74 448.838 li
1064.44 448.838 li
1064.44 471.638 li
1061.74 471.638 li
1061.74 469.178 li
1061.17 470.168 1060.45 470.888 1059.58 471.338 cv
1058.71 471.788 1057.69 472.028 1056.49 472.028 cv
1054.51 472.028 1052.89 471.248 1051.63 469.688 cv
1050.37 468.128 1049.77 466.028 1049.77 463.448 cv
1049.77 460.868 1050.37 458.798 1051.63 457.208 cv
1052.89 455.648 1054.51 454.838 1056.49 454.838 cv
1057.69 454.838 1058.71 455.078 1059.58 455.558 cv
1060.45 456.038 1061.17 456.758 1061.74 457.718 cv
1052.56 463.448 mo
1052.56 465.428 1052.95 466.988 1053.76 468.128 cv
1054.57 469.268 1055.71 469.808 1057.15 469.808 cv
1058.56 469.808 1059.67 469.268 1060.51 468.128 cv
1061.32 466.988 1061.74 465.428 1061.74 463.448 cv
1061.74 461.468 1061.32 459.938 1060.51 458.798 cv
1059.67 457.658 1058.56 457.088 1057.15 457.088 cv
1055.71 457.088 1054.57 457.658 1053.76 458.798 cv
1052.95 459.938 1052.56 461.468 1052.56 463.448 cv
f
1069.57 448.868 mo
1071.91 448.868 li
1073.35 451.178 1074.46 453.428 1075.18 455.648 cv
1075.9 457.868 1076.29 460.058 1076.29 462.218 cv
1076.29 464.408 1075.9 466.598 1075.18 468.818 cv
1074.46 471.038 1073.35 473.258 1071.91 475.568 cv
1069.57 475.568 li
1070.86 473.318 1071.82 471.128 1072.48 468.908 cv
1073.11 466.718 1073.44 464.498 1073.44 462.218 cv
1073.44 459.968 1073.11 457.748 1072.48 455.558 cv
1071.82 453.368 1070.86 451.148 1069.57 448.868 cv
f
1.5 lw
2 lc
700.738 502.17 mo
720.738 502.17 li
@
744.788 484.52 mo
744.788 487.4 li
743.648 486.86 742.598 486.47 741.608 486.2 cv
740.588 485.96 739.628 485.81 738.728 485.81 cv
737.108 485.81 735.848 486.14 734.978 486.74 cv
734.108 487.37 733.688 488.27 733.688 489.41 cv
733.688 490.37 733.958 491.12 734.558 491.6 cv
735.128 492.11 736.238 492.5 737.858 492.8 cv
739.658 493.16 li
741.848 493.58 743.468 494.33 744.518 495.38 cv
745.568 496.46 746.108 497.87 746.108 499.64 cv
746.108 501.77 745.388 503.36 743.978 504.44 cv
742.538 505.52 740.468 506.06 737.738 506.06 cv
736.688 506.06 735.578 505.94 734.408 505.73 cv
733.238 505.52 732.038 505.19 730.808 504.71 cv
730.808 501.65 li
732.008 502.34 733.178 502.85 734.318 503.18 cv
735.458 503.54 736.598 503.69 737.738 503.69 cv
739.418 503.69 740.708 503.36 741.638 502.7 cv
742.538 502.04 743.018 501.11 743.018 499.85 cv
743.018 498.77 742.688 497.93 742.028 497.33 cv
741.368 496.73 740.288 496.28 738.788 495.98 cv
736.988 495.62 li
734.768 495.2 733.178 494.51 732.188 493.55 cv
731.198 492.62 730.718 491.33 730.718 489.65 cv
730.718 487.73 731.378 486.2 732.758 485.09 cv
734.108 483.98 735.998 483.41 738.398 483.41 cv
739.418 483.41 740.438 483.5 741.518 483.68 cv
742.568 483.86 743.648 484.16 744.788 484.52 cv
f
763.838 484.52 mo
763.838 487.4 li
762.698 486.86 761.648 486.47 760.658 486.2 cv
759.638 485.96 758.678 485.81 757.778 485.81 cv
756.158 485.81 754.898 486.14 754.028 486.74 cv
753.158 487.37 752.738 488.27 752.738 489.41 cv
752.738 490.37 753.008 491.12 753.608 491.6 cv
754.178 492.11 755.288 492.5 756.908 492.8 cv
758.708 493.16 li
760.898 493.58 762.518 494.33 763.568 495.38 cv
764.618 496.46 765.158 497.87 765.158 499.64 cv
765.158 501.77 764.438 503.36 763.028 504.44 cv
761.588 505.52 759.518 506.06 756.788 506.06 cv
755.738 506.06 754.628 505.94 753.458 505.73 cv
752.288 505.52 751.088 505.19 749.858 504.71 cv
749.858 501.65 li
751.058 502.34 752.228 502.85 753.368 503.18 cv
754.508 503.54 755.648 503.69 756.788 503.69 cv
758.468 503.69 759.758 503.36 760.688 502.7 cv
761.588 502.04 762.068 501.11 762.068 499.85 cv
762.068 498.77 761.738 497.93 761.078 497.33 cv
760.418 496.73 759.338 496.28 757.838 495.98 cv
756.038 495.62 li
753.818 495.2 752.228 494.51 751.238 493.55 cv
750.248 492.62 749.768 491.33 749.768 489.65 cv
749.768 487.73 750.428 486.2 751.808 485.09 cv
753.158 483.98 755.048 483.41 757.448 483.41 cv
758.468 483.41 759.488 483.5 760.568 483.68 cv
761.618 483.86 762.698 484.16 763.838 484.52 cv
f
772.748 486.23 mo
772.748 503.24 li
776.318 503.24 li
779.318 503.24 781.538 502.58 782.948 501.2 cv
784.328 499.82 785.048 497.66 785.048 494.72 cv
785.048 491.78 784.328 489.65 782.948 488.27 cv
781.538 486.92 779.318 486.23 776.318 486.23 cv
772.748 486.23 li
769.778 483.8 mo
775.868 483.8 li
780.098 483.8 783.218 484.7 785.198 486.44 cv
787.178 488.21 788.168 490.97 788.168 494.72 cv
788.168 498.5 787.148 501.26 785.168 503.03 cv
783.188 504.8 780.068 505.67 775.868 505.67 cv
769.778 505.67 li
769.778 483.8 li
f
795.848 495.23 mo
795.848 503.24 li
800.588 503.24 li
802.178 503.24 803.348 502.91 804.128 502.25 cv
804.878 501.59 805.268 500.6 805.268 499.22 cv
805.268 497.87 804.878 496.88 804.128 496.22 cv
803.348 495.56 802.178 495.23 800.588 495.23 cv
795.848 495.23 li
795.848 486.23 mo
795.848 492.83 li
800.228 492.83 li
801.668 492.83 802.718 492.56 803.438 492.02 cv
804.158 491.48 804.518 490.67 804.518 489.53 cv
804.518 488.45 804.158 487.61 803.438 487.07 cv
802.718 486.53 801.668 486.23 800.228 486.23 cv
795.848 486.23 li
792.878 483.8 mo
800.438 483.8 li
802.688 483.8 804.428 484.28 805.658 485.21 cv
806.858 486.17 807.488 487.49 807.488 489.2 cv
807.488 490.55 807.158 491.63 806.528 492.41 cv
805.898 493.19 804.998 493.7 803.798 493.88 cv
805.238 494.21 806.378 494.87 807.188 495.86 cv
807.968 496.85 808.388 498.08 808.388 499.55 cv
808.388 501.53 807.698 503.03 806.378 504.08 cv
805.058 505.16 803.168 505.67 800.738 505.67 cv
792.878 505.67 li
792.878 483.8 li
f
813.458 483.8 mo
817.448 483.8 li
827.138 502.1 li
827.138 483.8 li
830.018 483.8 li
830.018 505.67 li
826.028 505.67 li
816.338 487.37 li
816.338 505.67 li
813.458 505.67 li
813.458 483.8 li
f
851.798 482.9 mo
850.478 485.18 849.518 487.4 848.888 489.59 cv
848.228 491.78 847.928 494 847.928 496.25 cv
847.928 498.53 848.228 500.75 848.888 502.94 cv
849.518 505.16 850.478 507.35 851.798 509.6 cv
849.458 509.6 li
847.988 507.29 846.878 505.07 846.158 502.85 cv
845.438 500.63 845.078 498.44 845.078 496.25 cv
845.078 494.09 845.438 491.9 846.158 489.68 cv
846.878 487.46 847.958 485.21 849.458 482.9 cv
851.798 482.9 li
f
854.138 483.8 mo
872.618 483.8 li
872.618 486.29 li
864.848 486.29 li
864.848 505.67 li
861.878 505.67 li
861.878 486.29 li
854.138 486.29 li
854.138 483.8 li
f
884.858 491.78 mo
884.558 491.6 884.228 491.48 883.868 491.39 cv
883.508 491.33 883.118 491.27 882.698 491.27 cv
881.168 491.27 879.998 491.78 879.188 492.77 cv
878.348 493.76 877.958 495.17 877.958 497.03 cv
877.958 505.67 li
875.258 505.67 li
875.258 489.26 li
877.958 489.26 li
877.958 491.81 li
878.498 490.82 879.248 490.07 880.148 489.59 cv
881.048 489.11 882.158 488.87 883.478 488.87 cv
883.658 488.87 883.868 488.9 884.108 488.9 cv
884.318 488.93 884.558 488.96 884.858 489.02 cv
884.858 491.78 li
f
895.147 497.42 mo
892.957 497.42 891.457 497.69 890.617 498.17 cv
889.777 498.68 889.357 499.52 889.357 500.72 cv
889.357 501.68 889.657 502.46 890.287 503 cv
890.917 503.57 891.787 503.84 892.867 503.84 cv
894.367 503.84 895.568 503.33 896.467 502.25 cv
897.367 501.2 897.818 499.79 897.818 498.02 cv
897.818 497.42 li
895.147 497.42 li
900.517 496.31 mo
900.517 505.67 li
897.818 505.67 li
897.818 503.18 li
897.188 504.2 896.407 504.92 895.508 505.37 cv
894.607 505.82 893.467 506.06 892.147 506.06 cv
890.467 506.06 889.117 505.61 888.128 504.68 cv
887.138 503.75 886.657 502.49 886.657 500.9 cv
886.657 499.07 887.258 497.69 888.517 496.73 cv
889.747 495.8 891.577 495.32 894.037 495.32 cv
897.818 495.32 li
897.818 495.05 li
897.818 493.82 897.397 492.86 896.587 492.17 cv
895.777 491.51 894.638 491.15 893.167 491.15 cv
892.207 491.15 891.307 491.27 890.407 491.51 cv
889.508 491.75 888.667 492.08 887.857 492.5 cv
887.857 490.01 li
888.818 489.65 889.777 489.35 890.707 489.17 cv
891.638 488.99 892.537 488.87 893.438 488.87 cv
895.807 488.87 897.577 489.5 898.747 490.73 cv
899.917 491.96 900.517 493.82 900.517 496.31 cv
f
906.068 489.26 mo
908.768 489.26 li
908.768 505.67 li
906.068 505.67 li
906.068 489.26 li
906.068 482.87 mo
908.768 482.87 li
908.768 486.29 li
906.068 486.29 li
906.068 482.87 li
f
928.058 495.77 mo
928.058 505.67 li
925.358 505.67 li
925.358 495.86 li
925.358 494.3 925.028 493.16 924.428 492.38 cv
923.828 491.6 922.928 491.21 921.728 491.21 cv
920.258 491.21 919.118 491.69 918.278 492.62 cv
917.438 493.55 917.018 494.81 917.018 496.4 cv
917.018 505.67 li
914.318 505.67 li
914.318 489.26 li
917.018 489.26 li
917.018 491.81 li
917.648 490.85 918.398 490.1 919.298 489.62 cv
920.168 489.14 921.188 488.87 922.328 488.87 cv
924.188 488.87 925.628 489.47 926.588 490.64 cv
927.548 491.81 928.058 493.52 928.058 495.77 cv
f
944.228 497.27 mo
944.228 495.35 943.808 493.82 943.028 492.74 cv
942.218 491.66 941.078 491.12 939.638 491.12 cv
938.198 491.12 937.058 491.66 936.248 492.74 cv
935.438 493.82 935.048 495.35 935.048 497.27 cv
935.048 499.22 935.438 500.72 936.248 501.8 cv
937.058 502.88 938.198 503.42 939.638 503.42 cv
941.078 503.42 942.218 502.88 943.028 501.8 cv
943.808 500.72 944.228 499.22 944.228 497.27 cv
946.928 503.63 mo
946.928 506.39 946.298 508.46 945.068 509.84 cv
943.808 511.19 941.918 511.88 939.368 511.88 cv
938.408 511.88 937.538 511.79 936.698 511.67 cv
935.858 511.52 935.018 511.31 934.238 511.01 cv
934.238 508.4 li
935.018 508.82 935.798 509.12 936.578 509.33 cv
937.358 509.54 938.138 509.66 938.948 509.66 cv
940.688 509.66 942.008 509.18 942.908 508.28 cv
943.778 507.35 944.228 505.97 944.228 504.11 cv
944.228 502.79 li
943.658 503.75 942.938 504.47 942.068 504.95 cv
941.198 505.43 940.178 505.67 938.978 505.67 cv
936.938 505.67 935.318 504.92 934.088 503.39 cv
932.858 501.86 932.258 499.82 932.258 497.27 cv
932.258 494.75 932.858 492.71 934.088 491.18 cv
935.318 489.65 936.938 488.87 938.978 488.87 cv
940.178 488.87 941.198 489.11 942.068 489.59 cv
942.938 490.07 943.658 490.79 944.228 491.75 cv
944.228 489.26 li
946.928 489.26 li
946.928 503.63 li
f
952.478 489.26 mo
955.178 489.26 li
955.178 505.67 li
952.478 505.67 li
952.478 489.26 li
952.478 482.87 mo
955.178 482.87 li
955.178 486.29 li
952.478 486.29 li
952.478 482.87 li
f
974.468 495.77 mo
974.468 505.67 li
971.768 505.67 li
971.768 495.86 li
971.768 494.3 971.438 493.16 970.838 492.38 cv
970.238 491.6 969.338 491.21 968.138 491.21 cv
966.668 491.21 965.528 491.69 964.688 492.62 cv
963.848 493.55 963.428 494.81 963.428 496.4 cv
963.428 505.67 li
960.728 505.67 li
960.728 489.26 li
963.428 489.26 li
963.428 491.81 li
964.058 490.85 964.808 490.1 965.708 489.62 cv
966.578 489.14 967.598 488.87 968.738 488.87 cv
970.598 488.87 972.038 489.47 972.998 490.64 cv
973.958 491.81 974.468 493.52 974.468 495.77 cv
f
990.638 497.27 mo
990.638 495.35 990.218 493.82 989.438 492.74 cv
988.628 491.66 987.488 491.12 986.048 491.12 cv
984.608 491.12 983.468 491.66 982.658 492.74 cv
981.848 493.82 981.458 495.35 981.458 497.27 cv
981.458 499.22 981.848 500.72 982.658 501.8 cv
983.468 502.88 984.608 503.42 986.048 503.42 cv
987.488 503.42 988.628 502.88 989.438 501.8 cv
990.218 500.72 990.638 499.22 990.638 497.27 cv
993.338 503.63 mo
993.338 506.39 992.708 508.46 991.478 509.84 cv
990.218 511.19 988.328 511.88 985.778 511.88 cv
984.818 511.88 983.948 511.79 983.108 511.67 cv
982.268 511.52 981.428 511.31 980.648 511.01 cv
980.648 508.4 li
981.428 508.82 982.208 509.12 982.988 509.33 cv
983.768 509.54 984.548 509.66 985.358 509.66 cv
987.098 509.66 988.418 509.18 989.318 508.28 cv
990.188 507.35 990.638 505.97 990.638 504.11 cv
990.638 502.79 li
990.068 503.75 989.348 504.47 988.478 504.95 cv
987.608 505.43 986.588 505.67 985.388 505.67 cv
983.348 505.67 981.728 504.92 980.498 503.39 cv
979.268 501.86 978.668 499.82 978.668 497.27 cv
978.668 494.75 979.268 492.71 980.498 491.18 cv
981.728 489.65 983.348 488.87 985.388 488.87 cv
986.588 488.87 987.608 489.11 988.478 489.59 cv
989.348 490.07 990.068 490.79 990.638 491.75 cv
990.638 489.26 li
993.338 489.26 li
993.338 503.63 li
f
999.578 501.95 mo
1002.67 501.95 li
1002.67 504.47 li
1000.27 509.12 li
998.378 509.12 li
999.578 504.47 li
999.578 501.95 li
f
1031.2 484.52 mo
1031.2 487.4 li
1030.06 486.86 1029.01 486.47 1028.02 486.2 cv
1027 485.96 1026.04 485.81 1025.14 485.81 cv
1023.52 485.81 1022.26 486.14 1021.39 486.74 cv
1020.52 487.37 1020.1 488.27 1020.1 489.41 cv
1020.1 490.37 1020.37 491.12 1020.97 491.6 cv
1021.54 492.11 1022.65 492.5 1024.27 492.8 cv
1026.07 493.16 li
1028.26 493.58 1029.88 494.33 1030.93 495.38 cv
1031.98 496.46 1032.52 497.87 1032.52 499.64 cv
1032.52 501.77 1031.8 503.36 1030.39 504.44 cv
1028.95 505.52 1026.88 506.06 1024.15 506.06 cv
1023.1 506.06 1021.99 505.94 1020.82 505.73 cv
1019.65 505.52 1018.45 505.19 1017.22 504.71 cv
1017.22 501.65 li
1018.42 502.34 1019.59 502.85 1020.73 503.18 cv
1021.87 503.54 1023.01 503.69 1024.15 503.69 cv
1025.83 503.69 1027.12 503.36 1028.05 502.7 cv
1028.95 502.04 1029.43 501.11 1029.43 499.85 cv
1029.43 498.77 1029.1 497.93 1028.44 497.33 cv
1027.78 496.73 1026.7 496.28 1025.2 495.98 cv
1023.4 495.62 li
1021.18 495.2 1019.59 494.51 1018.6 493.55 cv
1017.61 492.62 1017.13 491.33 1017.13 489.65 cv
1017.13 487.73 1017.79 486.2 1019.17 485.09 cv
1020.52 483.98 1022.41 483.41 1024.81 483.41 cv
1025.83 483.41 1026.85 483.5 1027.93 483.68 cv
1028.98 483.86 1030.06 484.16 1031.2 484.52 cv
f
1037.02 489.26 mo
1039.72 489.26 li
1039.72 505.67 li
1037.02 505.67 li
1037.02 489.26 li
1037.02 482.87 mo
1039.72 482.87 li
1039.72 486.29 li
1037.02 486.29 li
1037.02 482.87 li
f
1056.16 497.27 mo
1056.16 495.35 1055.74 493.82 1054.96 492.74 cv
1054.15 491.66 1053.01 491.12 1051.57 491.12 cv
1050.13 491.12 1048.99 491.66 1048.18 492.74 cv
1047.37 493.82 1046.98 495.35 1046.98 497.27 cv
1046.98 499.22 1047.37 500.72 1048.18 501.8 cv
1048.99 502.88 1050.13 503.42 1051.57 503.42 cv
1053.01 503.42 1054.15 502.88 1054.96 501.8 cv
1055.74 500.72 1056.16 499.22 1056.16 497.27 cv
1058.86 503.63 mo
1058.86 506.39 1058.23 508.46 1057 509.84 cv
1055.74 511.19 1053.85 511.88 1051.3 511.88 cv
1050.34 511.88 1049.47 511.79 1048.63 511.67 cv
1047.79 511.52 1046.95 511.31 1046.17 511.01 cv
1046.17 508.4 li
1046.95 508.82 1047.73 509.12 1048.51 509.33 cv
1049.29 509.54 1050.07 509.66 1050.88 509.66 cv
1052.62 509.66 1053.94 509.18 1054.84 508.28 cv
1055.71 507.35 1056.16 505.97 1056.16 504.11 cv
1056.16 502.79 li
1055.59 503.75 1054.87 504.47 1054 504.95 cv
1053.13 505.43 1052.11 505.67 1050.91 505.67 cv
1048.87 505.67 1047.25 504.92 1046.02 503.39 cv
1044.79 501.86 1044.19 499.82 1044.19 497.27 cv
1044.19 494.75 1044.79 492.71 1046.02 491.18 cv
1047.25 489.65 1048.87 488.87 1050.91 488.87 cv
1052.11 488.87 1053.13 489.11 1054 489.59 cv
1054.87 490.07 1055.59 490.79 1056.16 491.75 cv
1056.16 489.26 li
1058.86 489.26 li
1058.86 503.63 li
f
1077.19 492.41 mo
1077.85 491.21 1078.66 490.34 1079.59 489.74 cv
1080.52 489.17 1081.63 488.87 1082.92 488.87 cv
1084.6 488.87 1085.92 489.47 1086.85 490.67 cv
1087.78 491.87 1088.26 493.58 1088.26 495.77 cv
1088.26 505.67 li
1085.56 505.67 li
1085.56 495.86 li
1085.56 494.3 1085.26 493.13 1084.72 492.35 cv
1084.15 491.6 1083.31 491.21 1082.17 491.21 cv
1080.76 491.21 1079.65 491.69 1078.84 492.62 cv
1078.03 493.55 1077.64 494.81 1077.64 496.4 cv
1077.64 505.67 li
1074.94 505.67 li
1074.94 495.86 li
1074.94 494.3 1074.64 493.13 1074.1 492.35 cv
1073.53 491.6 1072.66 491.21 1071.52 491.21 cv
1070.14 491.21 1069.03 491.69 1068.22 492.62 cv
1067.41 493.55 1067.02 494.81 1067.02 496.4 cv
1067.02 505.67 li
1064.32 505.67 li
1064.32 489.26 li
1067.02 489.26 li
1067.02 491.81 li
1067.62 490.82 1068.37 490.07 1069.24 489.59 cv
1070.08 489.11 1071.1 488.87 1072.3 488.87 cv
1073.5 488.87 1074.49 489.17 1075.33 489.77 cv
1076.17 490.37 1076.77 491.27 1077.19 492.41 cv
f
1099.99 491.15 mo
1098.55 491.15 1097.41 491.72 1096.57 492.86 cv
1095.73 494 1095.31 495.53 1095.31 497.48 cv
1095.31 499.46 1095.7 500.99 1096.54 502.13 cv
1097.38 503.27 1098.52 503.81 1099.99 503.81 cv
1101.43 503.81 1102.57 503.27 1103.41 502.13 cv
1104.25 500.99 1104.67 499.46 1104.67 497.48 cv
1104.67 495.56 1104.25 494 1103.41 492.86 cv
1102.57 491.72 1101.43 491.15 1099.99 491.15 cv
1099.99 488.87 mo
1102.33 488.87 1104.16 489.65 1105.51 491.15 cv
1106.83 492.68 1107.52 494.78 1107.52 497.48 cv
1107.52 500.18 1106.83 502.28 1105.51 503.78 cv
1104.16 505.31 1102.33 506.06 1099.99 506.06 cv
1097.62 506.06 1095.76 505.31 1094.44 503.78 cv
1093.12 502.28 1092.46 500.18 1092.46 497.48 cv
1092.46 494.78 1093.12 492.68 1094.44 491.15 cv
1095.76 489.65 1097.62 488.87 1099.99 488.87 cv
f
1111.99 489.26 mo
1114.69 489.26 li
1114.69 505.67 li
1111.99 505.67 li
1111.99 489.26 li
1111.99 482.87 mo
1114.69 482.87 li
1114.69 486.29 li
1111.99 486.29 li
1111.99 482.87 li
f
1131.13 491.75 mo
1131.13 482.87 li
1133.83 482.87 li
1133.83 505.67 li
1131.13 505.67 li
1131.13 503.21 li
1130.56 504.2 1129.84 504.92 1128.97 505.37 cv
1128.1 505.82 1127.08 506.06 1125.88 506.06 cv
1123.9 506.06 1122.28 505.28 1121.02 503.72 cv
1119.76 502.16 1119.16 500.06 1119.16 497.48 cv
1119.16 494.9 1119.76 492.83 1121.02 491.24 cv
1122.28 489.68 1123.9 488.87 1125.88 488.87 cv
1127.08 488.87 1128.1 489.11 1128.97 489.59 cv
1129.84 490.07 1130.56 490.79 1131.13 491.75 cv
1121.95 497.48 mo
1121.95 499.46 1122.34 501.02 1123.15 502.16 cv
1123.96 503.3 1125.1 503.84 1126.54 503.84 cv
1127.95 503.84 1129.06 503.3 1129.9 502.16 cv
1130.71 501.02 1131.13 499.46 1131.13 497.48 cv
1131.13 495.5 1130.71 493.97 1129.9 492.83 cv
1129.06 491.69 1127.95 491.12 1126.54 491.12 cv
1125.1 491.12 1123.96 491.69 1123.15 492.83 cv
1122.34 493.97 1121.95 495.5 1121.95 497.48 cv
f
1138.96 482.9 mo
1141.3 482.9 li
1142.74 485.21 1143.85 487.46 1144.57 489.68 cv
1145.29 491.9 1145.68 494.09 1145.68 496.25 cv
1145.68 498.44 1145.29 500.63 1144.57 502.85 cv
1143.85 505.07 1142.74 507.29 1141.3 509.6 cv
1138.96 509.6 li
1140.25 507.35 1141.21 505.16 1141.87 502.94 cv
1142.5 500.75 1142.83 498.53 1142.83 496.25 cv
1142.83 494 1142.5 491.78 1141.87 489.59 cv
1141.21 487.4 1140.25 485.18 1138.96 482.9 cv
f
700.738 536.201 mo
720.738 536.201 li
@
707.738 539.201 mo
713.738 533.201 li
707.738 533.201 mo
713.738 539.201 li
f
1 lw
0 lc
707.738 539.201 mo
713.738 533.201 li
707.738 533.201 mo
713.738 539.201 li
@
744.788 518.551 mo
744.788 521.431 li
743.648 520.891 742.598 520.501 741.608 520.231 cv
740.588 519.991 739.628 519.841 738.728 519.841 cv
737.108 519.841 735.848 520.171 734.978 520.771 cv
734.108 521.401 733.688 522.301 733.688 523.441 cv
733.688 524.401 733.958 525.151 734.558 525.631 cv
735.128 526.141 736.238 526.531 737.858 526.831 cv
739.658 527.191 li
741.848 527.611 743.468 528.361 744.518 529.411 cv
745.568 530.491 746.108 531.901 746.108 533.671 cv
746.108 535.801 745.388 537.391 743.978 538.471 cv
742.538 539.551 740.468 540.091 737.738 540.091 cv
736.688 540.091 735.578 539.971 734.408 539.761 cv
733.238 539.551 732.038 539.221 730.808 538.741 cv
730.808 535.681 li
732.008 536.371 733.178 536.881 734.318 537.211 cv
735.458 537.571 736.598 537.721 737.738 537.721 cv
739.418 537.721 740.708 537.391 741.638 536.731 cv
742.538 536.071 743.018 535.141 743.018 533.881 cv
743.018 532.801 742.688 531.961 742.028 531.361 cv
741.368 530.761 740.288 530.311 738.788 530.011 cv
736.988 529.651 li
734.768 529.231 733.178 528.541 732.188 527.581 cv
731.198 526.651 730.718 525.361 730.718 523.681 cv
730.718 521.761 731.378 520.231 732.758 519.121 cv
734.108 518.011 735.998 517.441 738.398 517.441 cv
739.418 517.441 740.438 517.531 741.518 517.711 cv
742.568 517.891 743.648 518.191 744.788 518.551 cv
f
763.838 518.551 mo
763.838 521.431 li
762.698 520.891 761.648 520.501 760.658 520.231 cv
759.638 519.991 758.678 519.841 757.778 519.841 cv
756.158 519.841 754.898 520.171 754.028 520.771 cv
753.158 521.401 752.738 522.301 752.738 523.441 cv
752.738 524.401 753.008 525.151 753.608 525.631 cv
754.178 526.141 755.288 526.531 756.908 526.831 cv
758.708 527.191 li
760.898 527.611 762.518 528.361 763.568 529.411 cv
764.618 530.491 765.158 531.901 765.158 533.671 cv
765.158 535.801 764.438 537.391 763.028 538.471 cv
761.588 539.551 759.518 540.091 756.788 540.091 cv
755.738 540.091 754.628 539.971 753.458 539.761 cv
752.288 539.551 751.088 539.221 749.858 538.741 cv
749.858 535.681 li
751.058 536.371 752.228 536.881 753.368 537.211 cv
754.508 537.571 755.648 537.721 756.788 537.721 cv
758.468 537.721 759.758 537.391 760.688 536.731 cv
761.588 536.071 762.068 535.141 762.068 533.881 cv
762.068 532.801 761.738 531.961 761.078 531.361 cv
760.418 530.761 759.338 530.311 757.838 530.011 cv
756.038 529.651 li
753.818 529.231 752.228 528.541 751.238 527.581 cv
750.248 526.651 749.768 525.361 749.768 523.681 cv
749.768 521.761 750.428 520.231 751.808 519.121 cv
753.158 518.011 755.048 517.441 757.448 517.441 cv
758.468 517.441 759.488 517.531 760.568 517.711 cv
761.618 517.891 762.698 518.191 763.838 518.551 cv
f
772.748 520.261 mo
772.748 537.271 li
776.318 537.271 li
779.318 537.271 781.538 536.611 782.948 535.231 cv
784.328 533.851 785.048 531.691 785.048 528.751 cv
785.048 525.811 784.328 523.681 782.948 522.301 cv
781.538 520.951 779.318 520.261 776.318 520.261 cv
772.748 520.261 li
769.778 517.831 mo
775.868 517.831 li
780.098 517.831 783.218 518.731 785.198 520.471 cv
787.178 522.241 788.168 525.001 788.168 528.751 cv
788.168 532.531 787.148 535.291 785.168 537.061 cv
783.188 538.831 780.068 539.701 775.868 539.701 cv
769.778 539.701 li
769.778 517.831 li
f
795.848 529.261 mo
795.848 537.271 li
800.588 537.271 li
802.178 537.271 803.348 536.941 804.128 536.281 cv
804.878 535.621 805.268 534.631 805.268 533.251 cv
805.268 531.901 804.878 530.911 804.128 530.251 cv
803.348 529.591 802.178 529.261 800.588 529.261 cv
795.848 529.261 li
795.848 520.261 mo
795.848 526.861 li
800.228 526.861 li
801.668 526.861 802.718 526.591 803.438 526.051 cv
804.158 525.511 804.518 524.701 804.518 523.561 cv
804.518 522.481 804.158 521.641 803.438 521.101 cv
802.718 520.561 801.668 520.261 800.228 520.261 cv
795.848 520.261 li
792.878 517.831 mo
800.438 517.831 li
802.688 517.831 804.428 518.311 805.658 519.241 cv
806.858 520.201 807.488 521.521 807.488 523.231 cv
807.488 524.581 807.158 525.661 806.528 526.441 cv
805.898 527.221 804.998 527.731 803.798 527.911 cv
805.238 528.241 806.378 528.901 807.188 529.891 cv
807.968 530.881 808.388 532.111 808.388 533.581 cv
808.388 535.561 807.698 537.061 806.378 538.111 cv
805.058 539.191 803.168 539.701 800.738 539.701 cv
792.878 539.701 li
792.878 517.831 li
f
813.458 517.831 mo
817.448 517.831 li
827.138 536.131 li
827.138 517.831 li
830.018 517.831 li
830.018 539.701 li
826.028 539.701 li
816.338 521.401 li
816.338 539.701 li
813.458 539.701 li
813.458 517.831 li
f
851.798 516.931 mo
850.478 519.211 849.518 521.431 848.888 523.621 cv
848.228 525.811 847.928 528.031 847.928 530.281 cv
847.928 532.561 848.228 534.781 848.888 536.971 cv
849.518 539.191 850.478 541.381 851.798 543.631 cv
849.458 543.631 li
847.988 541.321 846.878 539.101 846.158 536.881 cv
845.438 534.661 845.078 532.471 845.078 530.281 cv
845.078 528.121 845.438 525.931 846.158 523.711 cv
846.878 521.491 847.958 519.241 849.458 516.931 cv
851.798 516.931 li
f
854.138 517.831 mo
872.618 517.831 li
872.618 520.321 li
864.848 520.321 li
864.848 539.701 li
861.878 539.701 li
861.878 520.321 li
854.138 520.321 li
854.138 517.831 li
f
889.388 530.821 mo
889.388 532.141 li
876.998 532.141 li
877.118 534.001 877.658 535.441 878.678 536.401 cv
879.668 537.361 881.048 537.841 882.848 537.841 cv
883.868 537.841 884.888 537.721 885.848 537.481 cv
886.808 537.241 887.798 536.851 888.758 536.311 cv
888.758 538.861 li
887.798 539.281 886.808 539.611 885.788 539.791 cv
884.768 539.971 883.718 540.091 882.698 540.091 cv
880.058 540.091 877.988 539.341 876.458 537.841 cv
874.928 536.341 874.178 534.271 874.178 531.661 cv
874.178 528.991 874.898 526.861 876.338 525.271 cv
877.778 523.711 879.758 522.901 882.218 522.901 cv
884.438 522.901 886.178 523.621 887.468 525.031 cv
888.728 526.471 889.388 528.391 889.388 530.821 cv
886.688 530.041 mo
886.658 528.571 886.238 527.401 885.458 526.501 cv
884.648 525.631 883.568 525.181 882.248 525.181 cv
880.748 525.181 879.548 525.631 878.648 526.471 cv
877.748 527.311 877.208 528.511 877.088 530.041 cv
886.688 530.041 li
f
904.268 523.771 mo
904.268 526.321 li
903.488 525.961 902.708 525.661 901.898 525.451 cv
901.058 525.271 900.218 525.151 899.348 525.151 cv
897.998 525.151 896.978 525.361 896.318 525.781 cv
895.658 526.201 895.328 526.801 895.328 527.611 cv
895.328 528.241 895.568 528.721 896.048 529.081 cv
896.528 529.441 897.488 529.801 898.928 530.101 cv
899.858 530.311 li
901.778 530.731 903.128 531.331 903.938 532.051 cv
904.718 532.801 905.138 533.851 905.138 535.171 cv
905.138 536.701 904.538 537.901 903.338 538.771 cv
902.138 539.671 900.458 540.091 898.358 540.091 cv
897.458 540.091 896.558 540.001 895.598 539.851 cv
894.638 539.701 893.648 539.461 892.598 539.101 cv
892.598 536.311 li
893.588 536.851 894.578 537.241 895.538 537.481 cv
896.498 537.751 897.458 537.871 898.418 537.871 cv
899.678 537.871 900.668 537.661 901.358 537.241 cv
902.018 536.821 902.378 536.191 902.378 535.381 cv
902.378 534.661 902.108 534.091 901.628 533.701 cv
901.148 533.311 900.068 532.921 898.388 532.561 cv
897.458 532.351 li
895.778 531.991 894.548 531.451 893.828 530.731 cv
893.078 530.011 892.718 529.021 892.718 527.731 cv
892.718 526.201 893.258 525.001 894.338 524.161 cv
895.418 523.321 896.978 522.901 899.018 522.901 cv
900.008 522.901 900.938 522.991 901.838 523.141 cv
902.708 523.291 903.518 523.501 904.268 523.771 cv
f
912.098 518.641 mo
912.098 523.291 li
917.648 523.291 li
917.648 525.391 li
912.098 525.391 li
912.098 534.301 li
912.098 535.651 912.278 536.521 912.638 536.881 cv
912.998 537.271 913.748 537.451 914.888 537.451 cv
917.648 537.451 li
917.648 539.701 li
914.888 539.701 li
912.788 539.701 911.348 539.311 910.568 538.531 cv
909.788 537.751 909.398 536.341 909.398 534.301 cv
909.398 525.391 li
907.418 525.391 li
907.418 523.291 li
909.398 523.291 li
909.398 518.641 li
912.098 518.641 li
f
921.188 523.291 mo
923.888 523.291 li
923.888 539.701 li
921.188 539.701 li
921.188 523.291 li
921.188 516.901 mo
923.888 516.901 li
923.888 520.321 li
921.188 520.321 li
921.188 516.901 li
f
943.178 529.801 mo
943.178 539.701 li
940.478 539.701 li
940.478 529.891 li
940.478 528.331 940.148 527.191 939.548 526.411 cv
938.948 525.631 938.048 525.241 936.848 525.241 cv
935.378 525.241 934.238 525.721 933.398 526.651 cv
932.558 527.581 932.138 528.841 932.138 530.431 cv
932.138 539.701 li
929.438 539.701 li
929.438 523.291 li
932.138 523.291 li
932.138 525.841 li
932.768 524.881 933.518 524.131 934.418 523.651 cv
935.288 523.171 936.308 522.901 937.448 522.901 cv
939.308 522.901 940.748 523.501 941.708 524.671 cv
942.668 525.841 943.178 527.551 943.178 529.801 cv
f
959.348 531.301 mo
959.348 529.381 958.928 527.851 958.148 526.771 cv
957.338 525.691 956.198 525.151 954.758 525.151 cv
953.318 525.151 952.178 525.691 951.368 526.771 cv
950.558 527.851 950.168 529.381 950.168 531.301 cv
950.168 533.251 950.558 534.751 951.368 535.831 cv
952.178 536.911 953.318 537.451 954.758 537.451 cv
956.198 537.451 957.338 536.911 958.148 535.831 cv
958.928 534.751 959.348 533.251 959.348 531.301 cv
962.048 537.661 mo
962.048 540.421 961.418 542.491 960.188 543.871 cv
958.928 545.221 957.038 545.911 954.488 545.911 cv
953.528 545.911 952.658 545.821 951.818 545.701 cv
950.978 545.551 950.138 545.341 949.358 545.041 cv
949.358 542.431 li
950.138 542.851 950.918 543.151 951.698 543.361 cv
952.478 543.571 953.258 543.691 954.068 543.691 cv
955.808 543.691 957.128 543.211 958.028 542.311 cv
958.898 541.381 959.348 540.001 959.348 538.141 cv
959.348 536.821 li
958.778 537.781 958.058 538.501 957.188 538.981 cv
956.318 539.461 955.298 539.701 954.098 539.701 cv
952.058 539.701 950.438 538.951 949.208 537.421 cv
947.978 535.891 947.378 533.851 947.378 531.301 cv
947.378 528.781 947.978 526.741 949.208 525.211 cv
950.438 523.681 952.058 522.901 954.098 522.901 cv
955.298 522.901 956.318 523.141 957.188 523.621 cv
958.058 524.101 958.778 524.821 959.348 525.781 cv
959.348 523.291 li
962.048 523.291 li
962.048 537.661 li
f
968.288 535.981 mo
971.378 535.981 li
971.378 538.501 li
968.978 543.151 li
967.088 543.151 li
968.288 538.501 li
968.288 535.981 li
f
999.907 518.551 mo
999.907 521.431 li
998.767 520.891 997.717 520.501 996.727 520.231 cv
995.707 519.991 994.747 519.841 993.847 519.841 cv
992.227 519.841 990.967 520.171 990.097 520.771 cv
989.227 521.401 988.807 522.301 988.807 523.441 cv
988.807 524.401 989.077 525.151 989.677 525.631 cv
990.247 526.141 991.357 526.531 992.977 526.831 cv
994.777 527.191 li
996.967 527.611 998.587 528.361 999.637 529.411 cv
1000.69 530.491 1001.23 531.901 1001.23 533.671 cv
1001.23 535.801 1000.51 537.391 999.097 538.471 cv
997.657 539.551 995.587 540.091 992.857 540.091 cv
991.807 540.091 990.697 539.971 989.527 539.761 cv
988.357 539.551 987.157 539.221 985.927 538.741 cv
985.927 535.681 li
987.127 536.371 988.297 536.881 989.437 537.211 cv
990.577 537.571 991.717 537.721 992.857 537.721 cv
994.537 537.721 995.827 537.391 996.757 536.731 cv
997.657 536.071 998.137 535.141 998.137 533.881 cv
998.137 532.801 997.807 531.961 997.147 531.361 cv
996.487 530.761 995.407 530.311 993.907 530.011 cv
992.107 529.651 li
989.887 529.231 988.297 528.541 987.307 527.581 cv
986.317 526.651 985.837 525.361 985.837 523.681 cv
985.837 521.761 986.497 520.231 987.877 519.121 cv
989.227 518.011 991.117 517.441 993.517 517.441 cv
994.537 517.441 995.557 517.531 996.637 517.711 cv
997.687 517.891 998.767 518.191 999.907 518.551 cv
f
1005.73 523.291 mo
1008.43 523.291 li
1008.43 539.701 li
1005.73 539.701 li
1005.73 523.291 li
1005.73 516.901 mo
1008.43 516.901 li
1008.43 520.321 li
1005.73 520.321 li
1005.73 516.901 li
f
1024.87 531.301 mo
1024.87 529.381 1024.45 527.851 1023.67 526.771 cv
1022.86 525.691 1021.72 525.151 1020.28 525.151 cv
1018.84 525.151 1017.7 525.691 1016.89 526.771 cv
1016.08 527.851 1015.69 529.381 1015.69 531.301 cv
1015.69 533.251 1016.08 534.751 1016.89 535.831 cv
1017.7 536.911 1018.84 537.451 1020.28 537.451 cv
1021.72 537.451 1022.86 536.911 1023.67 535.831 cv
1024.45 534.751 1024.87 533.251 1024.87 531.301 cv
1027.57 537.661 mo
1027.57 540.421 1026.94 542.491 1025.71 543.871 cv
1024.45 545.221 1022.56 545.911 1020.01 545.911 cv
1019.05 545.911 1018.18 545.821 1017.34 545.701 cv
1016.5 545.551 1015.66 545.341 1014.88 545.041 cv
1014.88 542.431 li
1015.66 542.851 1016.44 543.151 1017.22 543.361 cv
1018 543.571 1018.78 543.691 1019.59 543.691 cv
1021.33 543.691 1022.65 543.211 1023.55 542.311 cv
1024.42 541.381 1024.87 540.001 1024.87 538.141 cv
1024.87 536.821 li
1024.3 537.781 1023.58 538.501 1022.71 538.981 cv
1021.84 539.461 1020.82 539.701 1019.62 539.701 cv
1017.58 539.701 1015.96 538.951 1014.73 537.421 cv
1013.5 535.891 1012.9 533.851 1012.9 531.301 cv
1012.9 528.781 1013.5 526.741 1014.73 525.211 cv
1015.96 523.681 1017.58 522.901 1019.62 522.901 cv
1020.82 522.901 1021.84 523.141 1022.71 523.621 cv
1023.58 524.101 1024.3 524.821 1024.87 525.781 cv
1024.87 523.291 li
1027.57 523.291 li
1027.57 537.661 li
f
1045.9 526.441 mo
1046.56 525.241 1047.37 524.371 1048.3 523.771 cv
1049.23 523.201 1050.34 522.901 1051.63 522.901 cv
1053.31 522.901 1054.63 523.501 1055.56 524.701 cv
1056.49 525.901 1056.97 527.611 1056.97 529.801 cv
1056.97 539.701 li
1054.27 539.701 li
1054.27 529.891 li
1054.27 528.331 1053.97 527.161 1053.43 526.381 cv
1052.86 525.631 1052.02 525.241 1050.88 525.241 cv
1049.47 525.241 1048.36 525.721 1047.55 526.651 cv
1046.74 527.581 1046.35 528.841 1046.35 530.431 cv
1046.35 539.701 li
1043.65 539.701 li
1043.65 529.891 li
1043.65 528.331 1043.35 527.161 1042.81 526.381 cv
1042.24 525.631 1041.37 525.241 1040.23 525.241 cv
1038.85 525.241 1037.74 525.721 1036.93 526.651 cv
1036.12 527.581 1035.73 528.841 1035.73 530.431 cv
1035.73 539.701 li
1033.03 539.701 li
1033.03 523.291 li
1035.73 523.291 li
1035.73 525.841 li
1036.33 524.851 1037.08 524.101 1037.95 523.621 cv
1038.79 523.141 1039.81 522.901 1041.01 522.901 cv
1042.21 522.901 1043.2 523.201 1044.04 523.801 cv
1044.88 524.401 1045.48 525.301 1045.9 526.441 cv
f
1068.7 525.181 mo
1067.26 525.181 1066.12 525.751 1065.28 526.891 cv
1064.44 528.031 1064.02 529.561 1064.02 531.511 cv
1064.02 533.491 1064.41 535.021 1065.25 536.161 cv
1066.09 537.301 1067.23 537.841 1068.7 537.841 cv
1070.14 537.841 1071.28 537.301 1072.12 536.161 cv
1072.96 535.021 1073.38 533.491 1073.38 531.511 cv
1073.38 529.591 1072.96 528.031 1072.12 526.891 cv
1071.28 525.751 1070.14 525.181 1068.7 525.181 cv
1068.7 522.901 mo
1071.04 522.901 1072.87 523.681 1074.22 525.181 cv
1075.54 526.711 1076.23 528.811 1076.23 531.511 cv
1076.23 534.211 1075.54 536.311 1074.22 537.811 cv
1072.87 539.341 1071.04 540.091 1068.7 540.091 cv
1066.33 540.091 1064.47 539.341 1063.15 537.811 cv
1061.83 536.311 1061.17 534.211 1061.17 531.511 cv
1061.17 528.811 1061.83 526.711 1063.15 525.181 cv
1064.47 523.681 1066.33 522.901 1068.7 522.901 cv
f
1080.7 523.291 mo
1083.4 523.291 li
1083.4 539.701 li
1080.7 539.701 li
1080.7 523.291 li
1080.7 516.901 mo
1083.4 516.901 li
1083.4 520.321 li
1080.7 520.321 li
1080.7 516.901 li
f
1099.84 525.781 mo
1099.84 516.901 li
1102.54 516.901 li
1102.54 539.701 li
1099.84 539.701 li
1099.84 537.241 li
1099.27 538.231 1098.55 538.951 1097.68 539.401 cv
1096.81 539.851 1095.79 540.091 1094.59 540.091 cv
1092.61 540.091 1090.99 539.311 1089.73 537.751 cv
1088.47 536.191 1087.87 534.091 1087.87 531.511 cv
1087.87 528.931 1088.47 526.861 1089.73 525.271 cv
1090.99 523.711 1092.61 522.901 1094.59 522.901 cv
1095.79 522.901 1096.81 523.141 1097.68 523.621 cv
1098.55 524.101 1099.27 524.821 1099.84 525.781 cv
1090.66 531.511 mo
1090.66 533.491 1091.05 535.051 1091.86 536.191 cv
1092.67 537.331 1093.81 537.871 1095.25 537.871 cv
1096.66 537.871 1097.77 537.331 1098.61 536.191 cv
1099.42 535.051 1099.84 533.491 1099.84 531.511 cv
1099.84 529.531 1099.42 528.001 1098.61 526.861 cv
1097.77 525.721 1096.66 525.151 1095.25 525.151 cv
1093.81 525.151 1092.67 525.721 1091.86 526.861 cv
1091.05 528.001 1090.66 529.531 1090.66 531.511 cv
f
1107.67 516.931 mo
1110.01 516.931 li
1111.45 519.241 1112.56 521.491 1113.28 523.711 cv
1114 525.931 1114.39 528.121 1114.39 530.281 cv
1114.39 532.471 1114 534.661 1113.28 536.881 cv
1112.56 539.101 1111.45 541.321 1110.01 543.631 cv
1107.67 543.631 li
1108.96 541.381 1109.92 539.191 1110.58 536.971 cv
1111.21 534.781 1111.54 532.561 1111.54 530.281 cv
1111.54 528.031 1111.21 525.811 1110.58 523.621 cv
1109.92 521.431 1108.96 519.211 1107.67 516.931 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
