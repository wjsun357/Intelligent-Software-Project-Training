%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SSDBN-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/2, 16:35:37
%%BoundingBox: -1 0 1193 622
%%HiResBoundingBox: 0 0 1192.5182 621.0095
%%CropBox: 0 0 1192.5182 621.0095
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2019-06-02T16:35:02+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -621.009 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-4.57764e-5 0 mo
-4.57764e-5 621.009 li
1192.52 621.009 li
1192.52 0 li
cp
clp
gsave
-.001091 621.679 mo
1193 621.679 li
1193 -.321152 li
-.001091 -.321152 li
-.001091 621.679 li
clp
-69.0011 631.679 mo
1313.4 631.679 li
1313.4 -66.001 li
-69.0011 -66.001 li
-69.0011 631.679 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
103.799 554.934 mo
1175.16 554.934 li
1175.16 17.7205 li
103.799 17.7205 li
103.799 554.934 li
f
152.497 554.934 mo
152.497 558.434 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
152.497 554.934 mo
152.497 558.434 li
@
152.491 564.131 mo
151.318 564.131 150.444 564.706 149.846 565.856 cv
149.248 567.006 148.972 568.731 148.972 571.031 cv
148.972 573.331 149.248 575.056 149.846 576.206 cv
150.444 577.356 151.318 577.931 152.491 577.931 cv
153.664 577.931 154.538 577.356 155.136 576.206 cv
155.711 575.056 156.01 573.331 156.01 571.031 cv
156.01 568.731 155.711 567.006 155.136 565.856 cv
154.538 564.706 153.664 564.131 152.491 564.131 cv
152.491 562.337 mo
154.354 562.337 155.78 563.096 156.792 564.568 cv
157.781 566.063 158.287 568.225 158.287 571.031 cv
158.287 573.86 157.781 576.022 156.792 577.494 cv
155.78 578.966 154.354 579.702 152.491 579.702 cv
150.605 579.702 149.156 578.966 148.167 577.494 cv
147.178 576.022 146.695 573.86 146.695 571.031 cv
146.695 568.225 147.178 566.063 148.167 564.568 cv
149.156 563.096 150.605 562.337 152.491 562.337 cv
f
349.257 554.934 mo
349.257 558.434 li
f
349.257 554.934 mo
349.257 558.434 li
@
331.712 577.494 mo
339.624 577.494 li
339.624 579.403 li
328.975 579.403 li
328.975 577.494 li
329.826 576.62 330.999 575.424 332.494 573.906 cv
333.966 572.411 334.909 571.445 335.3 571.008 cv
336.036 570.203 336.542 569.513 336.818 568.938 cv
337.094 568.386 337.255 567.811 337.255 567.259 cv
337.255 566.385 336.933 565.649 336.312 565.097 cv
335.691 564.545 334.886 564.246 333.874 564.246 cv
333.161 564.246 332.402 564.384 331.62 564.614 cv
330.838 564.867 329.987 565.235 329.09 565.741 cv
329.09 563.441 li
330.01 563.073 330.861 562.797 331.643 562.613 cv
332.425 562.429 333.161 562.337 333.828 562.337 cv
335.553 562.337 336.933 562.774 337.968 563.648 cv
339.003 564.522 339.532 565.672 339.532 567.121 cv
339.532 567.811 339.394 568.478 339.141 569.076 cv
338.888 569.697 338.428 570.433 337.738 571.261 cv
337.554 571.491 336.956 572.112 335.944 573.147 cv
334.932 574.182 333.529 575.631 331.712 577.494 cv
f
349.238 564.131 mo
348.065 564.131 347.191 564.706 346.594 565.856 cv
345.996 567.006 345.72 568.731 345.72 571.031 cv
345.72 573.331 345.996 575.056 346.594 576.206 cv
347.191 577.356 348.065 577.931 349.238 577.931 cv
350.411 577.931 351.285 577.356 351.884 576.206 cv
352.458 575.056 352.758 573.331 352.758 571.031 cv
352.758 568.731 352.458 567.006 351.884 565.856 cv
351.285 564.706 350.411 564.131 349.238 564.131 cv
349.238 562.337 mo
351.102 562.337 352.527 563.096 353.539 564.568 cv
354.529 566.063 355.034 568.225 355.034 571.031 cv
355.034 573.86 354.529 576.022 353.539 577.494 cv
352.527 578.966 351.102 579.702 349.238 579.702 cv
347.353 579.702 345.904 578.966 344.914 577.494 cv
343.926 576.022 343.443 573.86 343.443 571.031 cv
343.443 568.225 343.926 566.063 344.914 564.568 cv
345.904 563.096 347.353 562.337 349.238 562.337 cv
f
363.867 564.131 mo
362.694 564.131 361.82 564.706 361.222 565.856 cv
360.624 567.006 360.348 568.731 360.348 571.031 cv
360.348 573.331 360.624 575.056 361.222 576.206 cv
361.82 577.356 362.694 577.931 363.867 577.931 cv
365.04 577.931 365.914 577.356 366.512 576.206 cv
367.087 575.056 367.386 573.331 367.386 571.031 cv
367.386 568.731 367.087 567.006 366.512 565.856 cv
365.914 564.706 365.04 564.131 363.867 564.131 cv
363.867 562.337 mo
365.73 562.337 367.156 563.096 368.168 564.568 cv
369.157 566.063 369.663 568.225 369.663 571.031 cv
369.663 573.86 369.157 576.022 368.168 577.494 cv
367.156 578.966 365.73 579.702 363.867 579.702 cv
361.981 579.702 360.532 578.966 359.543 577.494 cv
358.554 576.022 358.071 573.86 358.071 571.031 cv
358.071 568.225 358.554 566.063 359.543 564.568 cv
360.532 563.096 361.981 562.337 363.867 562.337 cv
f
546.018 554.934 mo
546.018 558.434 li
f
546.018 554.934 mo
546.018 558.434 li
@
532.751 564.614 mo
527.024 573.561 li
532.751 573.561 li
532.751 564.614 li
532.153 562.636 mo
535.005 562.636 li
535.005 573.561 li
537.397 573.561 li
537.397 575.447 li
535.005 575.447 li
535.005 579.403 li
532.751 579.403 li
532.751 575.447 li
525.184 575.447 li
525.184 573.262 li
532.153 562.636 li
f
545.999 564.131 mo
544.826 564.131 543.952 564.706 543.354 565.856 cv
542.756 567.006 542.48 568.731 542.48 571.031 cv
542.48 573.331 542.756 575.056 543.354 576.206 cv
543.952 577.356 544.826 577.931 545.999 577.931 cv
547.172 577.931 548.046 577.356 548.644 576.206 cv
549.219 575.056 549.518 573.331 549.518 571.031 cv
549.518 568.731 549.219 567.006 548.644 565.856 cv
548.046 564.706 547.172 564.131 545.999 564.131 cv
545.999 562.337 mo
547.862 562.337 549.288 563.096 550.3 564.568 cv
551.289 566.063 551.795 568.225 551.795 571.031 cv
551.795 573.86 551.289 576.022 550.3 577.494 cv
549.288 578.966 547.862 579.702 545.999 579.702 cv
544.113 579.702 542.664 578.966 541.675 577.494 cv
540.686 576.022 540.203 573.86 540.203 571.031 cv
540.203 568.225 540.686 566.063 541.675 564.568 cv
542.664 563.096 544.113 562.337 545.999 562.337 cv
f
560.627 564.131 mo
559.454 564.131 558.58 564.706 557.982 565.856 cv
557.384 567.006 557.108 568.731 557.108 571.031 cv
557.108 573.331 557.384 575.056 557.982 576.206 cv
558.58 577.356 559.454 577.931 560.627 577.931 cv
561.8 577.931 562.674 577.356 563.272 576.206 cv
563.847 575.056 564.146 573.331 564.146 571.031 cv
564.146 568.731 563.847 567.006 563.272 565.856 cv
562.674 564.706 561.8 564.131 560.627 564.131 cv
560.627 562.337 mo
562.49 562.337 563.916 563.096 564.928 564.568 cv
565.917 566.063 566.423 568.225 566.423 571.031 cv
566.423 573.86 565.917 576.022 564.928 577.494 cv
563.916 578.966 562.49 579.702 560.627 579.702 cv
558.741 579.702 557.292 578.966 556.303 577.494 cv
555.314 576.022 554.831 573.86 554.831 571.031 cv
554.831 568.225 555.314 566.063 556.303 564.568 cv
557.292 563.096 558.741 562.337 560.627 562.337 cv
f
742.778 554.934 mo
742.778 558.434 li
f
742.778 554.934 mo
742.778 558.434 li
@
728.407 570.111 mo
727.395 570.111 726.59 570.479 725.992 571.169 cv
725.394 571.859 725.095 572.825 725.095 574.021 cv
725.095 575.24 725.394 576.206 725.992 576.896 cv
726.59 577.586 727.395 577.931 728.407 577.931 cv
729.419 577.931 730.224 577.586 730.822 576.896 cv
731.42 576.206 731.719 575.24 731.719 574.021 cv
731.719 572.825 731.42 571.859 730.822 571.169 cv
730.224 570.479 729.419 570.111 728.407 570.111 cv
732.915 563.004 mo
732.915 565.074 li
732.34 564.798 731.765 564.591 731.19 564.453 cv
730.592 564.315 730.017 564.246 729.465 564.246 cv
727.947 564.246 726.797 564.752 726.015 565.764 cv
725.233 566.776 724.773 568.317 724.681 570.341 cv
725.118 569.697 725.67 569.191 726.337 568.846 cv
727.004 568.501 727.74 568.317 728.545 568.317 cv
730.224 568.317 731.558 568.846 732.524 569.858 cv
733.49 570.87 733.996 572.273 733.996 574.021 cv
733.996 575.746 733.467 577.126 732.455 578.161 cv
731.443 579.196 730.086 579.702 728.407 579.702 cv
726.475 579.702 724.98 578.966 723.968 577.494 cv
722.933 576.022 722.427 573.86 722.427 571.031 cv
722.427 568.386 723.048 566.27 724.313 564.706 cv
725.555 563.142 727.257 562.337 729.373 562.337 cv
729.925 562.337 730.5 562.406 731.098 562.498 cv
731.673 562.613 732.271 562.774 732.915 563.004 cv
f
742.759 564.131 mo
741.586 564.131 740.712 564.706 740.114 565.856 cv
739.516 567.006 739.24 568.731 739.24 571.031 cv
739.24 573.331 739.516 575.056 740.114 576.206 cv
740.712 577.356 741.586 577.931 742.759 577.931 cv
743.932 577.931 744.806 577.356 745.404 576.206 cv
745.979 575.056 746.278 573.331 746.278 571.031 cv
746.278 568.731 745.979 567.006 745.404 565.856 cv
744.806 564.706 743.932 564.131 742.759 564.131 cv
742.759 562.337 mo
744.622 562.337 746.048 563.096 747.06 564.568 cv
748.049 566.063 748.555 568.225 748.555 571.031 cv
748.555 573.86 748.049 576.022 747.06 577.494 cv
746.048 578.966 744.622 579.702 742.759 579.702 cv
740.873 579.702 739.424 578.966 738.435 577.494 cv
737.446 576.022 736.963 573.86 736.963 571.031 cv
736.963 568.225 737.446 566.063 738.435 564.568 cv
739.424 563.096 740.873 562.337 742.759 562.337 cv
f
757.387 564.131 mo
756.214 564.131 755.34 564.706 754.742 565.856 cv
754.144 567.006 753.868 568.731 753.868 571.031 cv
753.868 573.331 754.144 575.056 754.742 576.206 cv
755.34 577.356 756.214 577.931 757.387 577.931 cv
758.56 577.931 759.434 577.356 760.032 576.206 cv
760.607 575.056 760.906 573.331 760.906 571.031 cv
760.906 568.731 760.607 567.006 760.032 565.856 cv
759.434 564.706 758.56 564.131 757.387 564.131 cv
757.387 562.337 mo
759.25 562.337 760.676 563.096 761.688 564.568 cv
762.677 566.063 763.183 568.225 763.183 571.031 cv
763.183 573.86 762.677 576.022 761.688 577.494 cv
760.676 578.966 759.25 579.702 757.387 579.702 cv
755.501 579.702 754.052 578.966 753.063 577.494 cv
752.074 576.022 751.591 573.86 751.591 571.031 cv
751.591 568.225 752.074 566.063 753.063 564.568 cv
754.052 563.096 755.501 562.337 757.387 562.337 cv
f
939.538 554.934 mo
939.538 558.434 li
f
939.538 554.934 mo
939.538 558.434 li
@
924.891 571.445 mo
923.81 571.445 922.959 571.744 922.338 572.319 cv
921.717 572.894 921.418 573.676 921.418 574.688 cv
921.418 575.7 921.717 576.505 922.338 577.08 cv
922.959 577.655 923.81 577.931 924.891 577.931 cv
925.949 577.931 926.8 577.655 927.421 577.057 cv
928.042 576.482 928.364 575.7 928.364 574.688 cv
928.364 573.676 928.042 572.894 927.444 572.319 cv
926.823 571.744 925.972 571.445 924.891 571.445 cv
922.614 570.479 mo
921.648 570.249 920.889 569.789 920.337 569.122 cv
919.785 568.455 919.532 567.65 919.532 566.684 cv
919.532 565.35 919.992 564.292 920.958 563.51 cv
921.901 562.728 923.212 562.337 924.891 562.337 cv
926.547 562.337 927.858 562.728 928.824 563.51 cv
929.767 564.292 930.25 565.35 930.25 566.684 cv
930.25 567.65 929.974 568.455 929.422 569.122 cv
928.87 569.789 928.134 570.249 927.168 570.479 cv
928.249 570.732 929.1 571.238 929.721 571.974 cv
930.319 572.71 930.641 573.63 930.641 574.688 cv
930.641 576.321 930.135 577.563 929.146 578.414 cv
928.134 579.288 926.731 579.702 924.891 579.702 cv
923.028 579.702 921.602 579.288 920.613 578.414 cv
919.624 577.563 919.141 576.321 919.141 574.688 cv
919.141 573.63 919.44 572.71 920.061 571.974 cv
920.659 571.238 921.51 570.732 922.614 570.479 cv
921.786 566.891 mo
921.786 567.765 922.039 568.455 922.591 568.938 cv
923.143 569.421 923.902 569.651 924.891 569.651 cv
925.857 569.651 926.616 569.421 927.168 568.938 cv
927.72 568.455 927.996 567.765 927.996 566.891 cv
927.996 566.017 927.72 565.35 927.168 564.867 cv
926.616 564.384 925.857 564.131 924.891 564.131 cv
923.902 564.131 923.143 564.384 922.591 564.867 cv
922.039 565.35 921.786 566.017 921.786 566.891 cv
f
939.52 564.131 mo
938.346 564.131 937.473 564.706 936.875 565.856 cv
936.276 567.006 936 568.731 936 571.031 cv
936 573.331 936.276 575.056 936.875 576.206 cv
937.473 577.356 938.346 577.931 939.52 577.931 cv
940.693 577.931 941.567 577.356 942.164 576.206 cv
942.74 575.056 943.039 573.331 943.039 571.031 cv
943.039 568.731 942.74 567.006 942.164 565.856 cv
941.567 564.706 940.693 564.131 939.52 564.131 cv
939.52 562.337 mo
941.383 562.337 942.809 563.096 943.82 564.568 cv
944.81 566.063 945.315 568.225 945.315 571.031 cv
945.315 573.86 944.81 576.022 943.82 577.494 cv
942.809 578.966 941.383 579.702 939.52 579.702 cv
937.633 579.702 936.185 578.966 935.195 577.494 cv
934.206 576.022 933.724 573.86 933.724 571.031 cv
933.724 568.225 934.206 566.063 935.195 564.568 cv
936.185 563.096 937.633 562.337 939.52 562.337 cv
f
954.148 564.131 mo
952.974 564.131 952.101 564.706 951.503 565.856 cv
950.904 567.006 950.628 568.731 950.628 571.031 cv
950.628 573.331 950.904 575.056 951.503 576.206 cv
952.101 577.356 952.974 577.931 954.148 577.931 cv
955.321 577.931 956.194 577.356 956.792 576.206 cv
957.368 575.056 957.667 573.331 957.667 571.031 cv
957.667 568.731 957.368 567.006 956.792 565.856 cv
956.194 564.706 955.321 564.131 954.148 564.131 cv
954.148 562.337 mo
956.01 562.337 957.437 563.096 958.448 564.568 cv
959.438 566.063 959.943 568.225 959.943 571.031 cv
959.943 573.86 959.438 576.022 958.448 577.494 cv
957.437 578.966 956.01 579.702 954.148 579.702 cv
952.261 579.702 950.813 578.966 949.823 577.494 cv
948.834 576.022 948.352 573.86 948.352 571.031 cv
948.352 568.225 948.834 566.063 949.823 564.568 cv
950.813 563.096 952.261 562.337 954.148 562.337 cv
f
1136.3 554.934 mo
1136.3 558.434 li
f
1136.3 554.934 mo
1136.3 558.434 li
@
1109.87 577.494 mo
1113.57 577.494 li
1113.57 564.706 li
1109.55 565.511 li
1109.55 563.441 li
1113.55 562.636 li
1115.83 562.636 li
1115.83 577.494 li
1119.53 577.494 li
1119.53 579.403 li
1109.87 579.403 li
1109.87 577.494 li
f
1128.96 564.131 mo
1127.79 564.131 1126.91 564.706 1126.31 565.856 cv
1125.72 567.006 1125.44 568.731 1125.44 571.031 cv
1125.44 573.331 1125.72 575.056 1126.31 576.206 cv
1126.91 577.356 1127.79 577.931 1128.96 577.931 cv
1130.13 577.931 1131.01 577.356 1131.6 576.206 cv
1132.18 575.056 1132.48 573.331 1132.48 571.031 cv
1132.48 568.731 1132.18 567.006 1131.6 565.856 cv
1131.01 564.706 1130.13 564.131 1128.96 564.131 cv
1128.96 562.337 mo
1130.82 562.337 1132.25 563.096 1133.26 564.568 cv
1134.25 566.063 1134.76 568.225 1134.76 571.031 cv
1134.76 573.86 1134.25 576.022 1133.26 577.494 cv
1132.25 578.966 1130.82 579.702 1128.96 579.702 cv
1127.07 579.702 1125.62 578.966 1124.64 577.494 cv
1123.65 576.022 1123.16 573.86 1123.16 571.031 cv
1123.16 568.225 1123.65 566.063 1124.64 564.568 cv
1125.62 563.096 1127.07 562.337 1128.96 562.337 cv
f
1143.59 564.131 mo
1142.41 564.131 1141.54 564.706 1140.94 565.856 cv
1140.34 567.006 1140.07 568.731 1140.07 571.031 cv
1140.07 573.331 1140.34 575.056 1140.94 576.206 cv
1141.54 577.356 1142.41 577.931 1143.59 577.931 cv
1144.76 577.931 1145.63 577.356 1146.23 576.206 cv
1146.81 575.056 1147.11 573.331 1147.11 571.031 cv
1147.11 568.731 1146.81 567.006 1146.23 565.856 cv
1145.63 564.706 1144.76 564.131 1143.59 564.131 cv
1143.59 562.337 mo
1145.45 562.337 1146.88 563.096 1147.89 564.568 cv
1148.88 566.063 1149.38 568.225 1149.38 571.031 cv
1149.38 573.86 1148.88 576.022 1147.89 577.494 cv
1146.88 578.966 1145.45 579.702 1143.59 579.702 cv
1141.7 579.702 1140.25 578.966 1139.26 577.494 cv
1138.27 576.022 1137.79 573.86 1137.79 571.031 cv
1137.79 568.225 1138.27 566.063 1139.26 564.568 cv
1140.25 563.096 1141.7 562.337 1143.59 562.337 cv
f
1158.22 564.131 mo
1157.04 564.131 1156.17 564.706 1155.57 565.856 cv
1154.97 567.006 1154.7 568.731 1154.7 571.031 cv
1154.7 573.331 1154.97 575.056 1155.57 576.206 cv
1156.17 577.356 1157.04 577.931 1158.22 577.931 cv
1159.39 577.931 1160.26 577.356 1160.86 576.206 cv
1161.44 575.056 1161.73 573.331 1161.73 571.031 cv
1161.73 568.731 1161.44 567.006 1160.86 565.856 cv
1160.26 564.706 1159.39 564.131 1158.22 564.131 cv
1158.22 562.337 mo
1160.08 562.337 1161.5 563.096 1162.52 564.568 cv
1163.51 566.063 1164.01 568.225 1164.01 571.031 cv
1164.01 573.86 1163.51 576.022 1162.52 577.494 cv
1161.5 578.966 1160.08 579.702 1158.22 579.702 cv
1156.33 579.702 1154.88 578.966 1153.89 577.494 cv
1152.9 576.022 1152.42 573.86 1152.42 571.031 cv
1152.42 568.225 1152.9 566.063 1153.89 564.568 cv
1154.88 563.096 1156.33 562.337 1158.22 562.337 cv
f
596.481 589.111 mo
610.311 589.111 li
610.311 591.601 li
599.451 591.601 li
599.451 598.081 li
609.861 598.081 li
609.861 600.571 li
599.451 600.571 li
599.451 608.491 li
610.581 608.491 li
610.581 610.981 li
596.481 610.981 li
596.481 589.111 li
f
617.931 608.521 mo
617.931 617.191 li
615.231 617.191 li
615.231 594.571 li
617.931 594.571 li
617.931 597.061 li
618.471 596.101 619.191 595.381 620.061 594.901 cv
620.931 594.421 621.981 594.181 623.181 594.181 cv
625.161 594.181 626.781 594.991 628.041 596.551 cv
629.271 598.141 629.901 600.211 629.901 602.791 cv
629.901 605.371 629.271 607.471 628.041 609.031 cv
626.781 610.591 625.161 611.371 623.181 611.371 cv
621.981 611.371 620.931 611.131 620.061 610.681 cv
619.191 610.231 618.471 609.511 617.931 608.521 cv
627.111 602.791 mo
627.111 600.811 626.691 599.281 625.881 598.141 cv
625.041 597.001 623.931 596.431 622.521 596.431 cv
621.081 596.431 619.971 597.001 619.161 598.141 cv
618.321 599.281 617.931 600.811 617.931 602.791 cv
617.931 604.771 618.321 606.331 619.161 607.471 cv
619.971 608.611 621.081 609.151 622.521 609.151 cv
623.931 609.151 625.041 608.611 625.881 607.471 cv
626.691 606.331 627.111 604.771 627.111 602.791 cv
f
640.731 596.461 mo
639.291 596.461 638.151 597.031 637.311 598.171 cv
636.471 599.311 636.051 600.841 636.051 602.791 cv
636.051 604.771 636.441 606.301 637.281 607.441 cv
638.121 608.581 639.261 609.121 640.731 609.121 cv
642.171 609.121 643.311 608.581 644.151 607.441 cv
644.991 606.301 645.411 604.771 645.411 602.791 cv
645.411 600.871 644.991 599.311 644.151 598.171 cv
643.311 597.031 642.171 596.461 640.731 596.461 cv
640.731 594.181 mo
643.071 594.181 644.901 594.961 646.251 596.461 cv
647.571 597.991 648.261 600.091 648.261 602.791 cv
648.261 605.491 647.571 607.591 646.251 609.091 cv
644.901 610.621 643.071 611.371 640.731 611.371 cv
638.361 611.371 636.501 610.621 635.181 609.091 cv
633.861 607.591 633.201 605.491 633.201 602.791 cv
633.201 600.091 633.861 597.991 635.181 596.461 cv
636.501 594.961 638.361 594.181 640.731 594.181 cv
f
664.551 595.201 mo
664.551 597.721 li
663.771 597.301 663.021 597.001 662.241 596.791 cv
661.461 596.581 660.711 596.461 659.931 596.461 cv
658.191 596.461 656.811 597.031 655.851 598.141 cv
654.891 599.251 654.411 600.811 654.411 602.791 cv
654.411 604.801 654.891 606.361 655.851 607.471 cv
656.811 608.581 658.191 609.121 659.931 609.121 cv
660.711 609.121 661.461 609.031 662.241 608.821 cv
663.021 608.611 663.771 608.281 664.551 607.861 cv
664.551 610.351 li
663.771 610.711 662.991 610.981 662.211 611.131 cv
661.401 611.281 660.531 611.371 659.631 611.371 cv
657.171 611.371 655.191 610.621 653.751 609.061 cv
652.281 607.531 651.561 605.431 651.561 602.791 cv
651.561 600.121 652.281 598.021 653.751 596.491 cv
655.221 594.961 657.231 594.181 659.811 594.181 cv
660.651 594.181 661.461 594.271 662.241 594.451 cv
663.021 594.631 663.801 594.871 664.551 595.201 cv
f
682.881 601.081 mo
682.881 610.981 li
680.181 610.981 li
680.181 601.171 li
680.181 599.611 679.851 598.471 679.251 597.691 cv
678.651 596.911 677.751 596.521 676.551 596.521 cv
675.081 596.521 673.941 597.001 673.101 597.931 cv
672.261 598.861 671.841 600.121 671.841 601.711 cv
671.841 610.981 li
669.141 610.981 li
669.141 588.181 li
671.841 588.181 li
671.841 597.121 li
672.471 596.161 673.221 595.411 674.121 594.931 cv
674.991 594.451 676.011 594.181 677.151 594.181 cv
679.011 594.181 680.451 594.781 681.411 595.951 cv
682.371 597.121 682.881 598.831 682.881 601.081 cv
f
103.799 500.031 mo
100.299 500.031 li
f
103.799 500.031 mo
100.299 500.031 li
@
67.5191 493.493 mo
66.3462 493.493 65.4722 494.068 64.8742 495.218 cv
64.2762 496.368 64.0002 498.093 64.0002 500.393 cv
64.0002 502.693 64.2762 504.418 64.8742 505.568 cv
65.4722 506.718 66.3462 507.293 67.5191 507.293 cv
68.6922 507.293 69.5662 506.718 70.1642 505.568 cv
70.7392 504.418 71.0382 502.693 71.0382 500.393 cv
71.0382 498.093 70.7392 496.368 70.1642 495.218 cv
69.5662 494.068 68.6922 493.493 67.5191 493.493 cv
67.5191 491.699 mo
69.3822 491.699 70.8082 492.458 71.8202 493.93 cv
72.8092 495.425 73.3152 497.587 73.3152 500.393 cv
73.3152 503.222 72.8092 505.384 71.8202 506.856 cv
70.8082 508.328 69.3822 509.064 67.5191 509.064 cv
65.6331 509.064 64.1842 508.328 63.1952 506.856 cv
62.2062 505.384 61.7232 503.222 61.7232 500.393 cv
61.7232 497.587 62.2062 495.425 63.1952 493.93 cv
64.1842 492.458 65.6331 491.699 67.5191 491.699 cv
f
77.2942 505.913 mo
79.6632 505.913 li
79.6632 508.765 li
77.2942 508.765 li
77.2942 505.913 li
f
86.563 506.856 mo
94.475 506.856 li
94.475 508.765 li
83.826 508.765 li
83.826 506.856 li
84.677 505.982 85.85 504.786 87.345 503.268 cv
88.817 501.773 89.76 500.807 90.151 500.37 cv
90.887 499.565 91.393 498.875 91.669 498.3 cv
91.945 497.748 92.106 497.173 92.106 496.621 cv
92.106 495.747 91.784 495.011 91.163 494.459 cv
90.542 493.907 89.737 493.608 88.725 493.608 cv
88.012 493.608 87.253 493.746 86.471 493.976 cv
85.689 494.229 84.838 494.597 83.941 495.103 cv
83.941 492.803 li
84.861 492.435 85.712 492.159 86.494 491.975 cv
87.276 491.791 88.012 491.699 88.679 491.699 cv
90.404 491.699 91.784 492.136 92.819 493.01 cv
93.854 493.884 94.383 495.034 94.383 496.483 cv
94.383 497.173 94.245 497.84 93.992 498.438 cv
93.739 499.059 93.279 499.795 92.589 500.623 cv
92.405 500.853 91.807 501.474 90.795 502.509 cv
89.783 503.544 88.38 504.993 86.563 506.856 cv
f
103.799 437.817 mo
100.299 437.817 li
f
103.799 437.817 mo
100.299 437.817 li
@
67.5191 431.28 mo
66.3462 431.28 65.4722 431.855 64.8742 433.005 cv
64.2762 434.155 64.0002 435.88 64.0002 438.18 cv
64.0002 440.48 64.2762 442.205 64.8742 443.355 cv
65.4722 444.505 66.3462 445.08 67.5191 445.08 cv
68.6922 445.08 69.5662 444.505 70.1642 443.355 cv
70.7392 442.205 71.0382 440.48 71.0382 438.18 cv
71.0382 435.88 70.7392 434.155 70.1642 433.005 cv
69.5662 431.855 68.6922 431.28 67.5191 431.28 cv
67.5191 429.486 mo
69.3822 429.486 70.8082 430.245 71.8202 431.717 cv
72.8092 433.212 73.3152 435.374 73.3152 438.18 cv
73.3152 441.009 72.8092 443.171 71.8202 444.643 cv
70.8082 446.115 69.3822 446.851 67.5191 446.851 cv
65.6331 446.851 64.1842 446.115 63.1952 444.643 cv
62.2062 443.171 61.7232 441.009 61.7232 438.18 cv
61.7232 435.374 62.2062 433.212 63.1952 431.717 cv
64.1842 430.245 65.6331 429.486 67.5191 429.486 cv
f
77.2942 443.7 mo
79.6632 443.7 li
79.6632 446.552 li
77.2942 446.552 li
77.2942 443.7 li
f
91.485 437.513 mo
92.566 437.743 93.417 438.226 94.015 438.962 cv
94.613 439.698 94.935 440.618 94.935 441.676 cv
94.935 443.332 94.36 444.62 93.233 445.517 cv
92.083 446.414 90.473 446.851 88.38 446.851 cv
87.667 446.851 86.931 446.782 86.195 446.644 cv
85.459 446.529 84.677 446.322 83.895 446.046 cv
83.895 443.861 li
84.516 444.229 85.206 444.505 85.965 444.689 cv
86.701 444.873 87.483 444.965 88.311 444.965 cv
89.737 444.965 90.818 444.689 91.554 444.137 cv
92.29 443.585 92.681 442.757 92.681 441.676 cv
92.681 440.71 92.336 439.928 91.646 439.376 cv
90.956 438.824 89.99 438.525 88.748 438.525 cv
86.793 438.525 li
86.793 436.662 li
88.84 436.662 li
89.944 436.662 90.795 436.455 91.393 435.995 cv
91.991 435.558 92.29 434.914 92.29 434.063 cv
92.29 433.212 91.968 432.545 91.37 432.085 cv
90.749 431.625 89.875 431.395 88.748 431.395 cv
88.127 431.395 87.46 431.464 86.747 431.602 cv
86.034 431.74 85.252 431.947 84.401 432.223 cv
84.401 430.199 li
85.252 429.969 86.057 429.785 86.816 429.67 cv
87.552 429.555 88.265 429.486 88.955 429.486 cv
90.657 429.486 92.014 429.877 93.026 430.659 cv
94.038 431.441 94.544 432.499 94.544 433.833 cv
94.544 434.753 94.268 435.535 93.739 436.179 cv
93.21 436.823 92.451 437.283 91.485 437.513 cv
f
103.799 375.604 mo
100.299 375.604 li
f
103.799 375.604 mo
100.299 375.604 li
@
67.5191 369.066 mo
66.3462 369.066 65.4722 369.641 64.8742 370.791 cv
64.2762 371.941 64.0002 373.666 64.0002 375.966 cv
64.0002 378.266 64.2762 379.991 64.8742 381.141 cv
65.4722 382.291 66.3462 382.866 67.5191 382.866 cv
68.6922 382.866 69.5662 382.291 70.1642 381.141 cv
70.7392 379.991 71.0382 378.266 71.0382 375.966 cv
71.0382 373.666 70.7392 371.941 70.1642 370.791 cv
69.5662 369.641 68.6922 369.066 67.5191 369.066 cv
67.5191 367.272 mo
69.3822 367.272 70.8082 368.031 71.8202 369.503 cv
72.8092 370.998 73.3152 373.16 73.3152 375.966 cv
73.3152 378.795 72.8092 380.957 71.8202 382.429 cv
70.8082 383.901 69.3822 384.637 67.5191 384.637 cv
65.6331 384.637 64.1842 383.901 63.1952 382.429 cv
62.2062 380.957 61.7232 378.795 61.7232 375.966 cv
61.7232 373.16 62.2062 370.998 63.1952 369.503 cv
64.1842 368.031 65.6331 367.272 67.5191 367.272 cv
f
77.2942 381.486 mo
79.6632 381.486 li
79.6632 384.338 li
77.2942 384.338 li
77.2942 381.486 li
f
90.841 369.549 mo
85.114 378.496 li
90.841 378.496 li
90.841 369.549 li
90.243 367.571 mo
93.095 367.571 li
93.095 378.496 li
95.487 378.496 li
95.487 380.382 li
93.095 380.382 li
93.095 384.338 li
90.841 384.338 li
90.841 380.382 li
83.274 380.382 li
83.274 378.197 li
90.243 367.571 li
f
103.799 313.39 mo
100.299 313.39 li
f
103.799 313.39 mo
100.299 313.39 li
@
67.5191 306.853 mo
66.3462 306.853 65.4722 307.428 64.8742 308.578 cv
64.2762 309.728 64.0002 311.453 64.0002 313.753 cv
64.0002 316.053 64.2762 317.778 64.8742 318.928 cv
65.4722 320.078 66.3462 320.653 67.5191 320.653 cv
68.6922 320.653 69.5662 320.078 70.1642 318.928 cv
70.7392 317.778 71.0382 316.053 71.0382 313.753 cv
71.0382 311.453 70.7392 309.728 70.1642 308.578 cv
69.5662 307.428 68.6922 306.853 67.5191 306.853 cv
67.5191 305.059 mo
69.3822 305.059 70.8082 305.818 71.8202 307.29 cv
72.8092 308.785 73.3152 310.947 73.3152 313.753 cv
73.3152 316.582 72.8092 318.744 71.8202 320.216 cv
70.8082 321.688 69.3822 322.424 67.5191 322.424 cv
65.6331 322.424 64.1842 321.688 63.1952 320.216 cv
62.2062 318.744 61.7232 316.582 61.7232 313.753 cv
61.7232 310.947 62.2062 308.785 63.1952 307.29 cv
64.1842 305.818 65.6331 305.059 67.5191 305.059 cv
f
77.2942 319.273 mo
79.6632 319.273 li
79.6632 322.125 li
77.2942 322.125 li
77.2942 319.273 li
f
84.631 305.358 mo
93.532 305.358 li
93.532 307.267 li
86.701 307.267 li
86.701 311.384 li
87.023 311.269 87.368 311.177 87.69 311.131 cv
88.012 311.085 88.357 311.039 88.679 311.039 cv
90.542 311.039 92.014 311.568 93.118 312.58 cv
94.222 313.615 94.774 314.995 94.774 316.743 cv
94.774 318.56 94.199 319.963 93.072 320.952 cv
91.945 321.941 90.358 322.424 88.334 322.424 cv
87.621 322.424 86.908 322.355 86.172 322.263 cv
85.436 322.148 84.7 321.987 83.918 321.734 cv
83.918 319.457 li
84.585 319.825 85.275 320.101 86.011 320.285 cv
86.724 320.469 87.483 320.538 88.288 320.538 cv
89.576 320.538 90.611 320.216 91.37 319.526 cv
92.106 318.836 92.497 317.916 92.497 316.743 cv
92.497 315.593 92.106 314.673 91.37 313.983 cv
90.611 313.293 89.576 312.948 88.288 312.948 cv
87.69 312.948 87.069 313.017 86.471 313.155 cv
85.873 313.293 85.252 313.5 84.631 313.776 cv
84.631 305.358 li
f
103.799 251.177 mo
100.299 251.177 li
f
103.799 251.177 mo
100.299 251.177 li
@
67.5191 244.639 mo
66.3462 244.639 65.4722 245.214 64.8742 246.364 cv
64.2762 247.514 64.0002 249.239 64.0002 251.539 cv
64.0002 253.839 64.2762 255.564 64.8742 256.714 cv
65.4722 257.864 66.3462 258.439 67.5191 258.439 cv
68.6922 258.439 69.5662 257.864 70.1642 256.714 cv
70.7392 255.564 71.0382 253.839 71.0382 251.539 cv
71.0382 249.239 70.7392 247.514 70.1642 246.364 cv
69.5662 245.214 68.6922 244.639 67.5191 244.639 cv
67.5191 242.845 mo
69.3822 242.845 70.8082 243.604 71.8202 245.076 cv
72.8092 246.571 73.3152 248.733 73.3152 251.539 cv
73.3152 254.368 72.8092 256.53 71.8202 258.002 cv
70.8082 259.474 69.3822 260.21 67.5191 260.21 cv
65.6331 260.21 64.1842 259.474 63.1952 258.002 cv
62.2062 256.53 61.7232 254.368 61.7232 251.539 cv
61.7232 248.733 62.2062 246.571 63.1952 245.076 cv
64.1842 243.604 65.6331 242.845 67.5191 242.845 cv
f
77.2942 257.059 mo
79.6632 257.059 li
79.6632 259.911 li
77.2942 259.911 li
77.2942 257.059 li
f
89.737 250.619 mo
88.725 250.619 87.92 250.987 87.322 251.677 cv
86.724 252.367 86.425 253.333 86.425 254.529 cv
86.425 255.748 86.724 256.714 87.322 257.404 cv
87.92 258.094 88.725 258.439 89.737 258.439 cv
90.749 258.439 91.554 258.094 92.152 257.404 cv
92.75 256.714 93.049 255.748 93.049 254.529 cv
93.049 253.333 92.75 252.367 92.152 251.677 cv
91.554 250.987 90.749 250.619 89.737 250.619 cv
94.245 243.512 mo
94.245 245.582 li
93.67 245.306 93.095 245.099 92.52 244.961 cv
91.922 244.823 91.347 244.754 90.795 244.754 cv
89.277 244.754 88.127 245.26 87.345 246.272 cv
86.563 247.284 86.103 248.825 86.011 250.849 cv
86.448 250.205 87 249.699 87.667 249.354 cv
88.334 249.009 89.07 248.825 89.875 248.825 cv
91.554 248.825 92.888 249.354 93.854 250.366 cv
94.82 251.378 95.326 252.781 95.326 254.529 cv
95.326 256.254 94.797 257.634 93.785 258.669 cv
92.773 259.704 91.416 260.21 89.737 260.21 cv
87.805 260.21 86.31 259.474 85.298 258.002 cv
84.263 256.53 83.757 254.368 83.757 251.539 cv
83.757 248.894 84.378 246.778 85.643 245.214 cv
86.885 243.65 88.587 242.845 90.703 242.845 cv
91.255 242.845 91.83 242.914 92.428 243.006 cv
93.003 243.121 93.601 243.282 94.245 243.512 cv
f
103.799 188.963 mo
100.299 188.963 li
f
103.799 188.963 mo
100.299 188.963 li
@
67.5191 182.426 mo
66.3462 182.426 65.4722 183.001 64.8742 184.151 cv
64.2762 185.301 64.0002 187.026 64.0002 189.326 cv
64.0002 191.626 64.2762 193.351 64.8742 194.501 cv
65.4722 195.651 66.3462 196.226 67.5191 196.226 cv
68.6922 196.226 69.5662 195.651 70.1642 194.501 cv
70.7392 193.351 71.0382 191.626 71.0382 189.326 cv
71.0382 187.026 70.7392 185.301 70.1642 184.151 cv
69.5662 183.001 68.6922 182.426 67.5191 182.426 cv
67.5191 180.632 mo
69.3822 180.632 70.8082 181.391 71.8202 182.863 cv
72.8092 184.358 73.3152 186.52 73.3152 189.326 cv
73.3152 192.155 72.8092 194.317 71.8202 195.789 cv
70.8082 197.261 69.3822 197.997 67.5191 197.997 cv
65.6331 197.997 64.1842 197.261 63.1952 195.789 cv
62.2062 194.317 61.7232 192.155 61.7232 189.326 cv
61.7232 186.52 62.2062 184.358 63.1952 182.863 cv
64.1842 181.391 65.6331 180.632 67.5191 180.632 cv
f
77.2942 194.846 mo
79.6632 194.846 li
79.6632 197.698 li
77.2942 197.698 li
77.2942 194.846 li
f
84.033 180.931 mo
94.82 180.931 li
94.82 181.897 li
88.725 197.698 li
86.356 197.698 li
92.083 182.84 li
84.033 182.84 li
84.033 180.931 li
f
103.799 126.75 mo
100.299 126.75 li
f
103.799 126.75 mo
100.299 126.75 li
@
67.5191 120.212 mo
66.3462 120.212 65.4722 120.787 64.8742 121.937 cv
64.2762 123.087 64.0002 124.812 64.0002 127.112 cv
64.0002 129.412 64.2762 131.137 64.8742 132.287 cv
65.4722 133.437 66.3462 134.012 67.5191 134.012 cv
68.6922 134.012 69.5662 133.437 70.1642 132.287 cv
70.7392 131.137 71.0382 129.412 71.0382 127.112 cv
71.0382 124.812 70.7392 123.087 70.1642 121.937 cv
69.5662 120.787 68.6922 120.212 67.5191 120.212 cv
67.5191 118.418 mo
69.3822 118.418 70.8082 119.177 71.8202 120.649 cv
72.8092 122.144 73.3152 124.306 73.3152 127.112 cv
73.3152 129.941 72.8092 132.103 71.8202 133.575 cv
70.8082 135.047 69.3822 135.783 67.5191 135.783 cv
65.6331 135.783 64.1842 135.047 63.1952 133.575 cv
62.2062 132.103 61.7232 129.941 61.7232 127.112 cv
61.7232 124.306 62.2062 122.144 63.1952 120.649 cv
64.1842 119.177 65.6331 118.418 67.5191 118.418 cv
f
77.2942 132.632 mo
79.6632 132.632 li
79.6632 135.484 li
77.2942 135.484 li
77.2942 132.632 li
f
89.461 127.526 mo
88.38 127.526 87.529 127.825 86.908 128.4 cv
86.287 128.975 85.988 129.757 85.988 130.769 cv
85.988 131.781 86.287 132.586 86.908 133.161 cv
87.529 133.736 88.38 134.012 89.461 134.012 cv
90.519 134.012 91.37 133.736 91.991 133.138 cv
92.612 132.563 92.934 131.781 92.934 130.769 cv
92.934 129.757 92.612 128.975 92.014 128.4 cv
91.393 127.825 90.542 127.526 89.461 127.526 cv
87.184 126.56 mo
86.218 126.33 85.459 125.87 84.907 125.203 cv
84.355 124.536 84.102 123.731 84.102 122.765 cv
84.102 121.431 84.562 120.373 85.528 119.591 cv
86.471 118.809 87.782 118.418 89.461 118.418 cv
91.117 118.418 92.428 118.809 93.394 119.591 cv
94.337 120.373 94.82 121.431 94.82 122.765 cv
94.82 123.731 94.544 124.536 93.992 125.203 cv
93.44 125.87 92.704 126.33 91.738 126.56 cv
92.819 126.813 93.67 127.319 94.291 128.055 cv
94.889 128.791 95.211 129.711 95.211 130.769 cv
95.211 132.402 94.705 133.644 93.716 134.495 cv
92.704 135.369 91.301 135.783 89.461 135.783 cv
87.598 135.783 86.172 135.369 85.183 134.495 cv
84.194 133.644 83.711 132.402 83.711 130.769 cv
83.711 129.711 84.01 128.791 84.631 128.055 cv
85.229 127.319 86.08 126.813 87.184 126.56 cv
86.356 122.972 mo
86.356 123.846 86.609 124.536 87.161 125.019 cv
87.713 125.502 88.472 125.732 89.461 125.732 cv
90.427 125.732 91.186 125.502 91.738 125.019 cv
92.29 124.536 92.566 123.846 92.566 122.972 cv
92.566 122.098 92.29 121.431 91.738 120.948 cv
91.186 120.465 90.427 120.212 89.461 120.212 cv
88.472 120.212 87.713 120.465 87.161 120.948 cv
86.609 121.431 86.356 122.098 86.356 122.972 cv
f
103.799 64.5362 mo
100.299 64.5362 li
f
103.799 64.5362 mo
100.299 64.5362 li
@
67.5191 57.9986 mo
66.3462 57.9986 65.4722 58.5736 64.8742 59.7236 cv
64.2762 60.8736 64.0002 62.5986 64.0002 64.8986 cv
64.0002 67.1986 64.2762 68.9236 64.8742 70.0736 cv
65.4722 71.2236 66.3462 71.7986 67.5191 71.7986 cv
68.6922 71.7986 69.5662 71.2236 70.1642 70.0736 cv
70.7392 68.9236 71.0382 67.1986 71.0382 64.8986 cv
71.0382 62.5986 70.7392 60.8736 70.1642 59.7236 cv
69.5662 58.5736 68.6922 57.9986 67.5191 57.9986 cv
67.5191 56.2046 mo
69.3822 56.2046 70.8082 56.9636 71.8202 58.4356 cv
72.8092 59.9306 73.3152 62.0926 73.3152 64.8986 cv
73.3152 67.7276 72.8092 69.8896 71.8202 71.3616 cv
70.8082 72.8336 69.3822 73.5696 67.5191 73.5696 cv
65.6331 73.5696 64.1842 72.8336 63.1952 71.3616 cv
62.2062 69.8896 61.7232 67.7276 61.7232 64.8986 cv
61.7232 62.0926 62.2062 59.9306 63.1952 58.4356 cv
64.1842 56.9636 65.6331 56.2046 67.5191 56.2046 cv
f
77.2942 70.4186 mo
79.6632 70.4186 li
79.6632 73.2706 li
77.2942 73.2706 li
77.2942 70.4186 li
f
84.677 72.9256 mo
84.677 70.8556 li
85.229 71.1316 85.804 71.3386 86.402 71.4766 cv
86.977 71.6146 87.552 71.6836 88.127 71.6836 cv
89.599 71.6836 90.749 71.2006 91.531 70.1886 cv
92.313 69.1766 92.773 67.6586 92.911 65.5886 cv
92.451 66.2326 91.899 66.7386 91.255 67.0836 cv
90.588 67.4286 89.852 67.5896 89.047 67.5896 cv
87.345 67.5896 86.011 67.0836 85.045 66.0716 cv
84.079 65.0596 83.596 63.6796 83.596 61.9086 cv
83.596 60.2066 84.102 58.8266 85.114 57.7686 cv
86.126 56.7336 87.483 56.2046 89.185 56.2046 cv
91.117 56.2046 92.612 56.9636 93.624 58.4356 cv
94.636 59.9306 95.165 62.0926 95.165 64.8986 cv
95.165 67.5666 94.521 69.6596 93.279 71.2236 cv
92.014 72.7876 90.335 73.5696 88.219 73.5696 cv
87.644 73.5696 87.069 73.5006 86.494 73.4086 cv
85.896 73.3166 85.298 73.1556 84.677 72.9256 cv
89.185 65.8186 mo
90.197 65.8186 91.002 65.4736 91.6 64.7836 cv
92.198 64.0936 92.497 63.1276 92.497 61.9086 cv
92.497 60.7126 92.198 59.7466 91.6 59.0566 cv
91.002 58.3666 90.197 57.9986 89.185 57.9986 cv
88.173 57.9986 87.368 58.3666 86.77 59.0566 cv
86.172 59.7466 85.873 60.7126 85.873 61.9086 cv
85.873 63.1276 86.172 64.0936 86.77 64.7836 cv
87.368 65.4736 88.173 65.8186 89.185 65.8186 cv
f
31.0108 384.317 mo
41.9008 388.337 li
41.9008 380.297 li
31.0108 384.317 li
28.1008 385.997 mo
28.1008 382.637 li
49.9708 374.297 li
49.9708 377.387 li
44.3608 379.367 li
44.3608 389.237 li
49.9708 391.217 li
49.9708 394.337 li
28.1008 385.997 li
f
34.1908 359.417 mo
36.7108 359.417 li
36.2908 360.197 35.9908 360.947 35.7808 361.727 cv
35.5708 362.507 35.4508 363.257 35.4508 364.037 cv
35.4508 365.777 36.0208 367.157 37.1308 368.117 cv
38.2408 369.077 39.8008 369.557 41.7808 369.557 cv
43.7908 369.557 45.3508 369.077 46.4608 368.117 cv
47.5708 367.157 48.1108 365.777 48.1108 364.037 cv
48.1108 363.257 48.0208 362.507 47.8108 361.727 cv
47.6008 360.947 47.2708 360.197 46.8508 359.417 cv
49.3408 359.417 li
49.7008 360.197 49.9708 360.977 50.1208 361.757 cv
50.2708 362.567 50.3608 363.437 50.3608 364.337 cv
50.3608 366.797 49.6108 368.777 48.0508 370.217 cv
46.5208 371.687 44.4208 372.407 41.7808 372.407 cv
39.1108 372.407 37.0108 371.687 35.4808 370.217 cv
33.9508 368.747 33.1708 366.737 33.1708 364.157 cv
33.1708 363.317 33.2608 362.507 33.4408 361.727 cv
33.6208 360.947 33.8608 360.167 34.1908 359.417 cv
f
34.1908 342.917 mo
36.7108 342.917 li
36.2908 343.697 35.9908 344.447 35.7808 345.227 cv
35.5708 346.007 35.4508 346.757 35.4508 347.537 cv
35.4508 349.277 36.0208 350.657 37.1308 351.617 cv
38.2408 352.577 39.8008 353.057 41.7808 353.057 cv
43.7908 353.057 45.3508 352.577 46.4608 351.617 cv
47.5708 350.657 48.1108 349.277 48.1108 347.537 cv
48.1108 346.757 48.0208 346.007 47.8108 345.227 cv
47.6008 344.447 47.2708 343.697 46.8508 342.917 cv
49.3408 342.917 li
49.7008 343.697 49.9708 344.477 50.1208 345.257 cv
50.2708 346.067 50.3608 346.937 50.3608 347.837 cv
50.3608 350.297 49.6108 352.277 48.0508 353.717 cv
46.5208 355.187 44.4208 355.907 41.7808 355.907 cv
39.1108 355.907 37.0108 355.187 35.4808 353.717 cv
33.9508 352.247 33.1708 350.237 33.1708 347.657 cv
33.1708 346.817 33.2608 346.007 33.4408 345.227 cv
33.6208 344.447 33.8608 343.667 34.1908 342.917 cv
f
43.4908 338.507 mo
33.5608 338.507 li
33.5608 335.807 li
43.4008 335.807 li
44.9608 335.807 46.1008 335.507 46.8808 334.907 cv
47.6608 334.307 48.0508 333.407 48.0508 332.177 cv
48.0508 330.737 47.6008 329.567 46.6708 328.727 cv
45.7408 327.887 44.4808 327.467 42.8608 327.467 cv
33.5608 327.467 li
33.5608 324.767 li
49.9708 324.767 li
49.9708 327.467 li
47.4508 327.467 li
48.4708 328.127 49.1908 328.907 49.6708 329.747 cv
50.1208 330.617 50.3608 331.607 50.3608 332.747 cv
50.3608 334.637 49.7908 336.077 48.6208 337.037 cv
47.4808 338.027 45.7708 338.507 43.4908 338.507 cv
33.1708 331.727 mo
33.1708 331.727 li
f
36.0808 309.707 mo
35.9008 310.007 35.7808 310.337 35.6908 310.697 cv
35.6308 311.057 35.5708 311.447 35.5708 311.867 cv
35.5708 313.397 36.0808 314.567 37.0708 315.377 cv
38.0608 316.217 39.4708 316.607 41.3308 316.607 cv
49.9708 316.607 li
49.9708 319.307 li
33.5608 319.307 li
33.5608 316.607 li
36.1108 316.607 li
35.1208 316.067 34.3708 315.317 33.8908 314.417 cv
33.4108 313.517 33.1708 312.407 33.1708 311.087 cv
33.1708 310.907 33.2008 310.697 33.2008 310.457 cv
33.2308 310.247 33.2608 310.007 33.3208 309.707 cv
36.0808 309.707 li
f
41.7208 299.417 mo
41.7208 301.607 41.9908 303.107 42.4708 303.947 cv
42.9808 304.787 43.8208 305.207 45.0208 305.207 cv
45.9808 305.207 46.7608 304.907 47.3008 304.277 cv
47.8708 303.647 48.1408 302.777 48.1408 301.697 cv
48.1408 300.197 47.6308 298.997 46.5508 298.097 cv
45.5008 297.197 44.0908 296.747 42.3208 296.747 cv
41.7208 296.747 li
41.7208 299.417 li
40.6108 294.047 mo
49.9708 294.047 li
49.9708 296.747 li
47.4808 296.747 li
48.5008 297.377 49.2208 298.157 49.6708 299.057 cv
50.1208 299.957 50.3608 301.097 50.3608 302.417 cv
50.3608 304.097 49.9108 305.447 48.9808 306.437 cv
48.0508 307.427 46.7908 307.907 45.2008 307.907 cv
43.3708 307.907 41.9908 307.307 41.0308 306.047 cv
40.1008 304.817 39.6208 302.987 39.6208 300.527 cv
39.6208 296.747 li
39.3508 296.747 li
38.1208 296.747 37.1608 297.167 36.4708 297.977 cv
35.8108 298.787 35.4508 299.927 35.4508 301.397 cv
35.4508 302.357 35.5708 303.257 35.8108 304.157 cv
36.0508 305.057 36.3808 305.897 36.8008 306.707 cv
34.3108 306.707 li
33.9508 305.747 33.6508 304.787 33.4708 303.857 cv
33.2908 302.927 33.1708 302.027 33.1708 301.127 cv
33.1708 298.757 33.8008 296.987 35.0308 295.817 cv
36.2608 294.647 38.1208 294.047 40.6108 294.047 cv
f
34.1908 276.677 mo
36.7108 276.677 li
36.2908 277.457 35.9908 278.207 35.7808 278.987 cv
35.5708 279.767 35.4508 280.517 35.4508 281.297 cv
35.4508 283.037 36.0208 284.417 37.1308 285.377 cv
38.2408 286.337 39.8008 286.817 41.7808 286.817 cv
43.7908 286.817 45.3508 286.337 46.4608 285.377 cv
47.5708 284.417 48.1108 283.037 48.1108 281.297 cv
48.1108 280.517 48.0208 279.767 47.8108 278.987 cv
47.6008 278.207 47.2708 277.457 46.8508 276.677 cv
49.3408 276.677 li
49.7008 277.457 49.9708 278.237 50.1208 279.017 cv
50.2708 279.827 50.3608 280.697 50.3608 281.597 cv
50.3608 284.057 49.6108 286.037 48.0508 287.477 cv
46.5208 288.947 44.4208 289.667 41.7808 289.667 cv
39.1108 289.667 37.0108 288.947 35.4808 287.477 cv
33.9508 286.007 33.1708 283.997 33.1708 281.417 cv
33.1708 280.577 33.2608 279.767 33.4408 278.987 cv
33.6208 278.207 33.8608 277.427 34.1908 276.677 cv
f
51.4708 265.157 mo
53.3908 265.937 54.6808 266.687 55.2808 267.407 cv
55.8808 268.127 56.1808 269.087 56.1808 270.287 cv
56.1808 272.447 li
53.9308 272.447 li
53.9308 270.857 li
53.9308 270.137 53.7508 269.567 53.3908 269.147 cv
53.0308 268.727 52.2208 268.277 50.9008 267.767 cv
49.7008 267.287 li
33.5608 273.917 li
33.5608 271.067 li
46.4008 265.937 li
33.5608 260.807 li
33.5608 257.957 li
51.4708 265.157 li
f
39.7108 234.197 mo
39.9508 233.567 40.4008 232.937 41.0908 232.337 cv
41.8108 231.737 42.7708 231.137 44.0008 230.537 cv
49.9708 227.537 li
49.9708 230.717 li
44.3608 233.507 li
42.9208 234.227 41.9308 234.947 41.4508 235.607 cv
40.9708 236.297 40.7308 237.227 40.7308 238.397 cv
40.7308 241.607 li
49.9708 241.607 li
49.9708 244.577 li
28.1008 244.577 li
28.1008 237.887 li
28.1008 235.397 28.6408 233.537 29.6608 232.307 cv
30.7108 231.077 32.3008 230.447 34.4008 230.447 cv
35.7808 230.447 36.9508 230.777 37.8508 231.407 cv
38.7508 232.067 39.3808 232.997 39.7108 234.197 cv
30.5308 241.607 mo
38.3008 241.607 li
38.3008 237.887 li
38.3008 236.477 37.9708 235.397 37.3108 234.677 cv
36.6508 233.957 35.6908 233.567 34.4008 233.567 cv
33.1408 233.567 32.1808 233.957 31.5208 234.677 cv
30.8608 235.397 30.5308 236.477 30.5308 237.887 cv
30.5308 241.607 li
f
41.7208 216.377 mo
41.7208 218.567 41.9908 220.067 42.4708 220.907 cv
42.9808 221.747 43.8208 222.167 45.0208 222.167 cv
45.9808 222.167 46.7608 221.867 47.3008 221.237 cv
47.8708 220.607 48.1408 219.737 48.1408 218.657 cv
48.1408 217.157 47.6308 215.957 46.5508 215.057 cv
45.5008 214.157 44.0908 213.707 42.3208 213.707 cv
41.7208 213.707 li
41.7208 216.377 li
40.6108 211.007 mo
49.9708 211.007 li
49.9708 213.707 li
47.4808 213.707 li
48.5008 214.337 49.2208 215.117 49.6708 216.017 cv
50.1208 216.917 50.3608 218.057 50.3608 219.377 cv
50.3608 221.057 49.9108 222.407 48.9808 223.397 cv
48.0508 224.387 46.7908 224.867 45.2008 224.867 cv
43.3708 224.867 41.9908 224.267 41.0308 223.007 cv
40.1008 221.777 39.6208 219.947 39.6208 217.487 cv
39.6208 213.707 li
39.3508 213.707 li
38.1208 213.707 37.1608 214.127 36.4708 214.937 cv
35.8108 215.747 35.4508 216.887 35.4508 218.357 cv
35.4508 219.317 35.5708 220.217 35.8108 221.117 cv
36.0508 222.017 36.3808 222.857 36.8008 223.667 cv
34.3108 223.667 li
33.9508 222.707 33.6508 221.747 33.4708 220.817 cv
33.2908 219.887 33.1708 218.987 33.1708 218.087 cv
33.1708 215.717 33.8008 213.947 35.0308 212.777 cv
36.2608 211.607 38.1208 211.007 40.6108 211.007 cv
f
28.9108 202.787 mo
33.5608 202.787 li
33.5608 197.237 li
35.6608 197.237 li
35.6608 202.787 li
44.5708 202.787 li
45.9208 202.787 46.7908 202.607 47.1508 202.247 cv
47.5408 201.887 47.7208 201.137 47.7208 199.997 cv
47.7208 197.237 li
49.9708 197.237 li
49.9708 199.997 li
49.9708 202.097 49.5808 203.537 48.8008 204.317 cv
48.0208 205.097 46.6108 205.487 44.5708 205.487 cv
35.6608 205.487 li
35.6608 207.467 li
33.5608 207.467 li
33.5608 205.487 li
28.9108 205.487 li
28.9108 202.787 li
f
41.0908 179.657 mo
42.4108 179.657 li
42.4108 192.047 li
44.2708 191.927 45.7108 191.387 46.6708 190.367 cv
47.6308 189.377 48.1108 187.997 48.1108 186.197 cv
48.1108 185.177 47.9908 184.157 47.7508 183.197 cv
47.5108 182.237 47.1208 181.247 46.5808 180.287 cv
49.1308 180.287 li
49.5508 181.247 49.8808 182.237 50.0608 183.257 cv
50.2408 184.277 50.3608 185.327 50.3608 186.347 cv
50.3608 188.987 49.6108 191.057 48.1108 192.587 cv
46.6108 194.117 44.5408 194.867 41.9308 194.867 cv
39.2608 194.867 37.1308 194.147 35.5408 192.707 cv
33.9808 191.267 33.1708 189.287 33.1708 186.827 cv
33.1708 184.607 33.8908 182.867 35.3008 181.577 cv
36.7408 180.317 38.6608 179.657 41.0908 179.657 cv
40.3108 182.357 mo
38.8408 182.387 37.6708 182.807 36.7708 183.587 cv
35.9008 184.397 35.4508 185.477 35.4508 186.797 cv
35.4508 188.297 35.9008 189.497 36.7408 190.397 cv
37.5808 191.297 38.7808 191.837 40.3108 191.957 cv
40.3108 182.357 li
f
1.5 lw
2 lc
152.497 498.579 mo
162.335 452.126 li
172.173 409.614 li
182.011 411.48 li
191.849 406.503 li
201.687 410.029 li
211.525 381.203 li
221.363 352.17 li
231.201 336.202 li
241.039 314.427 li
250.877 293.275 li
260.715 275.855 li
270.553 261.753 li
280.391 255.324 li
290.229 249.518 li
300.067 245.163 li
309.905 242.259 li
319.743 235.623 li
329.581 234.172 li
339.419 227.95 li
349.257 219.24 li
359.095 215.093 li
368.933 211.982 li
378.771 202.65 li
388.609 193.94 li
398.448 183.364 li
408.286 173.202 li
418.124 162.626 li
427.962 154.124 li
437.8 141.059 li
447.638 136.082 li
457.476 130.275 li
467.314 124.261 li
477.152 120.528 li
486.99 113.477 li
496.828 105.597 li
506.666 101.242 li
516.504 97.5094 li
526.342 95.2282 li
536.18 89.8364 li
546.018 85.4814 li
555.856 82.3707 li
565.694 79.8822 li
575.532 77.1863 li
585.37 73.0388 li
595.208 69.0985 li
605.046 68.0616 li
614.884 67.2321 li
624.722 64.5362 li
634.56 63.0846 li
644.398 63.2919 li
654.236 61.0108 li
664.074 60.8034 li
673.912 60.3887 li
683.75 59.5591 li
693.588 59.3517 li
703.426 58.7296 li
713.264 57.6927 li
723.102 56.8632 li
732.94 57.6927 li
742.778 56.0337 li
752.616 57.278 li
762.454 56.4485 li
772.292 59.1444 li
782.13 59.7665 li
791.968 57.6927 li
801.806 57.6927 li
811.644 51.6788 li
821.482 51.4714 li
831.32 51.4714 li
841.158 51.8861 li
850.996 52.0935 li
860.834 52.0935 li
870.672 51.6788 li
880.51 51.6788 li
890.348 51.6788 li
900.186 51.264 li
910.024 50.8492 li
919.862 50.8492 li
929.7 50.4345 li
939.538 50.2271 li
949.376 50.0197 li
959.214 49.605 li
969.052 49.3976 li
978.891 49.3976 li
988.729 49.3976 li
998.567 49.1902 li
1008.4 48.7755 li
1018.24 48.7755 li
1028.08 48.7755 li
1037.92 48.7755 li
1047.76 48.7755 li
1057.59 48.7755 li
1067.43 48.1533 li
1077.27 48.3607 li
1087.11 48.1533 li
1096.95 48.1533 li
1106.78 48.1533 li
1116.62 47.9459 li
1126.46 47.9459 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
152.497 519.317 mo
162.335 484.166 li
172.173 451.504 li
182.011 438.439 li
191.849 425.063 li
201.687 421.642 li
211.525 380.581 li
221.363 342.008 li
231.201 328.944 li
241.039 311.213 li
250.877 287.261 li
260.715 269.841 li
270.553 260.509 li
280.391 251.799 li
290.229 244.333 li
300.067 237.801 li
309.905 233.446 li
319.743 229.091 li
329.581 223.803 li
339.419 220.381 li
349.257 208.56 li
359.095 203.894 li
368.933 202.028 li
378.771 192.696 li
388.609 183.675 li
398.448 176.521 li
408.286 170.61 li
418.124 161.9 li
427.962 152.879 li
437.8 144.792 li
447.638 137.015 li
457.476 135.149 li
467.314 129.549 li
477.152 124.572 li
486.99 116.484 li
496.828 108.708 li
506.666 105.908 li
516.504 101.553 li
526.342 99.6868 li
536.18 95.954 li
546.018 92.5323 li
555.856 91.288 li
565.694 88.4884 li
575.532 83.5114 li
585.37 79.7785 li
595.208 77.29 li
605.046 74.4904 li
614.884 73.8682 li
624.722 74.4904 li
634.56 74.1793 li
644.398 73.2461 li
654.236 70.7576 li
664.074 69.5133 li
673.912 67.6469 li
683.75 66.4026 li
693.588 68.5801 li
703.426 67.6469 li
713.264 66.7137 li
723.102 67.0248 li
732.94 65.4694 li
742.778 67.9579 li
752.616 69.8243 li
762.454 67.9579 li
772.292 72.3129 li
782.13 70.1354 li
791.968 71.3797 li
801.806 67.0248 li
811.644 63.603 li
821.482 64.5362 li
831.32 64.5362 li
841.158 63.9141 li
850.996 63.9141 li
860.834 63.603 li
870.672 63.2919 li
880.51 63.2919 li
890.348 62.9809 li
900.186 62.3588 li
910.024 62.3588 li
919.862 62.6698 li
929.7 62.0477 li
939.538 61.7366 li
949.376 62.3588 li
959.214 61.4255 li
969.052 60.8034 li
978.891 61.1145 li
988.729 60.8034 li
998.567 60.8034 li
1008.4 61.1145 li
1018.24 60.8034 li
1028.08 61.1145 li
1037.92 61.1145 li
1047.76 61.4255 li
1057.59 61.1145 li
1067.43 61.4255 li
1077.27 61.1145 li
1087.11 60.8034 li
1096.95 61.7366 li
1106.78 62.0477 li
1116.62 62.3588 li
1126.46 62.0477 li
@
gsave
148.997 522.817 mo
155.997 522.817 li
155.997 515.817 li
148.997 515.817 li
148.997 522.817 li
clp
149.497 522.317 mo
155.497 516.317 li
149.497 516.317 mo
155.497 522.317 li
f
1 lw
0 lc
149.497 522.317 mo
155.497 516.317 li
149.497 516.317 mo
155.497 522.317 li
@
grestore
gsave
158.835 487.666 mo
165.835 487.666 li
165.835 480.666 li
158.835 480.666 li
158.835 487.666 li
clp
159.335 487.166 mo
165.335 481.166 li
159.335 481.166 mo
165.335 487.166 li
f
1 lw
0 lc
159.335 487.166 mo
165.335 481.166 li
159.335 481.166 mo
165.335 487.166 li
@
grestore
gsave
168.673 455.004 mo
175.673 455.004 li
175.673 448.004 li
168.673 448.004 li
168.673 455.004 li
clp
169.173 454.504 mo
175.173 448.504 li
169.173 448.504 mo
175.173 454.504 li
f
1 lw
0 lc
169.173 454.504 mo
175.173 448.504 li
169.173 448.504 mo
175.173 454.504 li
@
grestore
gsave
178.511 441.939 mo
185.511 441.939 li
185.511 434.939 li
178.511 434.939 li
178.511 441.939 li
clp
179.011 441.439 mo
185.011 435.439 li
179.011 435.439 mo
185.011 441.439 li
f
1 lw
0 lc
179.011 441.439 mo
185.011 435.439 li
179.011 435.439 mo
185.011 441.439 li
@
grestore
gsave
188.349 428.563 mo
195.349 428.563 li
195.349 421.563 li
188.349 421.563 li
188.349 428.563 li
clp
188.849 428.063 mo
194.849 422.063 li
188.849 422.063 mo
194.849 428.063 li
f
1 lw
0 lc
188.849 428.063 mo
194.849 422.063 li
188.849 422.063 mo
194.849 428.063 li
@
grestore
gsave
198.187 425.142 mo
205.187 425.142 li
205.187 418.142 li
198.187 418.142 li
198.187 425.142 li
clp
198.687 424.642 mo
204.687 418.642 li
198.687 418.642 mo
204.687 424.642 li
f
1 lw
0 lc
198.687 424.642 mo
204.687 418.642 li
198.687 418.642 mo
204.687 424.642 li
@
grestore
gsave
208.025 384.081 mo
215.025 384.081 li
215.025 377.081 li
208.025 377.081 li
208.025 384.081 li
clp
208.525 383.581 mo
214.525 377.581 li
208.525 377.581 mo
214.525 383.581 li
f
1 lw
0 lc
208.525 383.581 mo
214.525 377.581 li
208.525 377.581 mo
214.525 383.581 li
@
grestore
gsave
217.863 345.508 mo
224.863 345.508 li
224.863 338.508 li
217.863 338.508 li
217.863 345.508 li
clp
218.363 345.008 mo
224.363 339.008 li
218.363 339.008 mo
224.363 345.008 li
f
1 lw
0 lc
218.363 345.008 mo
224.363 339.008 li
218.363 339.008 mo
224.363 345.008 li
@
grestore
gsave
227.701 332.444 mo
234.701 332.444 li
234.701 325.444 li
227.701 325.444 li
227.701 332.444 li
clp
228.201 331.944 mo
234.201 325.944 li
228.201 325.944 mo
234.201 331.944 li
f
1 lw
0 lc
228.201 331.944 mo
234.201 325.944 li
228.201 325.944 mo
234.201 331.944 li
@
grestore
gsave
237.539 314.713 mo
244.539 314.713 li
244.539 307.713 li
237.539 307.713 li
237.539 314.713 li
clp
238.039 314.213 mo
244.039 308.213 li
238.039 308.213 mo
244.039 314.213 li
f
1 lw
0 lc
238.039 314.213 mo
244.039 308.213 li
238.039 308.213 mo
244.039 314.213 li
@
grestore
gsave
247.377 290.761 mo
254.377 290.761 li
254.377 283.761 li
247.377 283.761 li
247.377 290.761 li
clp
247.877 290.261 mo
253.877 284.261 li
247.877 284.261 mo
253.877 290.261 li
f
1 lw
0 lc
247.877 290.261 mo
253.877 284.261 li
247.877 284.261 mo
253.877 290.261 li
@
grestore
gsave
257.215 273.341 mo
264.215 273.341 li
264.215 266.341 li
257.215 266.341 li
257.215 273.341 li
clp
257.715 272.841 mo
263.715 266.841 li
257.715 266.841 mo
263.715 272.841 li
f
1 lw
0 lc
257.715 272.841 mo
263.715 266.841 li
257.715 266.841 mo
263.715 272.841 li
@
grestore
gsave
267.053 264.009 mo
274.053 264.009 li
274.053 257.009 li
267.053 257.009 li
267.053 264.009 li
clp
267.553 263.509 mo
273.553 257.509 li
267.553 257.509 mo
273.553 263.509 li
f
1 lw
0 lc
267.553 263.509 mo
273.553 257.509 li
267.553 257.509 mo
273.553 263.509 li
@
grestore
gsave
276.891 255.299 mo
283.891 255.299 li
283.891 248.299 li
276.891 248.299 li
276.891 255.299 li
clp
277.391 254.799 mo
283.391 248.799 li
277.391 248.799 mo
283.391 254.799 li
f
1 lw
0 lc
277.391 254.799 mo
283.391 248.799 li
277.391 248.799 mo
283.391 254.799 li
@
grestore
gsave
286.729 247.833 mo
293.729 247.833 li
293.729 240.833 li
286.729 240.833 li
286.729 247.833 li
clp
287.229 247.333 mo
293.229 241.333 li
287.229 241.333 mo
293.229 247.333 li
f
1 lw
0 lc
287.229 247.333 mo
293.229 241.333 li
287.229 241.333 mo
293.229 247.333 li
@
grestore
gsave
296.567 241.301 mo
303.567 241.301 li
303.567 234.301 li
296.567 234.301 li
296.567 241.301 li
clp
297.067 240.801 mo
303.067 234.801 li
297.067 234.801 mo
303.067 240.801 li
f
1 lw
0 lc
297.067 240.801 mo
303.067 234.801 li
297.067 234.801 mo
303.067 240.801 li
@
grestore
gsave
306.405 236.946 mo
313.405 236.946 li
313.405 229.946 li
306.405 229.946 li
306.405 236.946 li
clp
306.905 236.446 mo
312.905 230.446 li
306.905 230.446 mo
312.905 236.446 li
f
1 lw
0 lc
306.905 236.446 mo
312.905 230.446 li
306.905 230.446 mo
312.905 236.446 li
@
grestore
gsave
316.243 232.591 mo
323.243 232.591 li
323.243 225.591 li
316.243 225.591 li
316.243 232.591 li
clp
316.743 232.091 mo
322.743 226.091 li
316.743 226.091 mo
322.743 232.091 li
f
1 lw
0 lc
316.743 232.091 mo
322.743 226.091 li
316.743 226.091 mo
322.743 232.091 li
@
grestore
gsave
326.081 227.303 mo
333.081 227.303 li
333.081 220.303 li
326.081 220.303 li
326.081 227.303 li
clp
326.581 226.803 mo
332.581 220.803 li
326.581 220.803 mo
332.581 226.803 li
f
1 lw
0 lc
326.581 226.803 mo
332.581 220.803 li
326.581 220.803 mo
332.581 226.803 li
@
grestore
gsave
335.919 223.881 mo
342.919 223.881 li
342.919 216.881 li
335.919 216.881 li
335.919 223.881 li
clp
336.419 223.381 mo
342.419 217.381 li
336.419 217.381 mo
342.419 223.381 li
f
1 lw
0 lc
336.419 223.381 mo
342.419 217.381 li
336.419 217.381 mo
342.419 223.381 li
@
grestore
gsave
345.757 212.061 mo
352.758 212.061 li
352.758 205.06 li
345.757 205.06 li
345.757 212.061 li
clp
346.257 211.56 mo
352.257 205.56 li
346.257 205.56 mo
352.257 211.56 li
f
1 lw
0 lc
346.257 211.56 mo
352.257 205.56 li
346.257 205.56 mo
352.257 211.56 li
@
grestore
gsave
355.595 207.395 mo
362.595 207.395 li
362.595 200.395 li
355.595 200.395 li
355.595 207.395 li
clp
356.095 206.894 mo
362.095 200.894 li
356.095 200.894 mo
362.095 206.894 li
f
1 lw
0 lc
356.095 206.894 mo
362.095 200.894 li
356.095 200.894 mo
362.095 206.894 li
@
grestore
gsave
365.433 205.528 mo
372.433 205.528 li
372.433 198.528 li
365.433 198.528 li
365.433 205.528 li
clp
365.933 205.028 mo
371.933 199.028 li
365.933 199.028 mo
371.933 205.028 li
f
1 lw
0 lc
365.933 205.028 mo
371.933 199.028 li
365.933 199.028 mo
371.933 205.028 li
@
grestore
gsave
375.271 196.196 mo
382.271 196.196 li
382.271 189.196 li
375.271 189.196 li
375.271 196.196 li
clp
375.771 195.696 mo
381.771 189.696 li
375.771 189.696 mo
381.771 195.696 li
f
1 lw
0 lc
375.771 195.696 mo
381.771 189.696 li
375.771 189.696 mo
381.771 195.696 li
@
grestore
gsave
385.109 187.175 mo
392.109 187.175 li
392.109 180.175 li
385.109 180.175 li
385.109 187.175 li
clp
385.609 186.675 mo
391.609 180.675 li
385.609 180.675 mo
391.609 186.675 li
f
1 lw
0 lc
385.609 186.675 mo
391.609 180.675 li
385.609 180.675 mo
391.609 186.675 li
@
grestore
gsave
394.948 180.02 mo
401.947 180.02 li
401.947 173.021 li
394.948 173.021 li
394.948 180.02 li
clp
395.447 179.521 mo
401.447 173.521 li
395.447 173.521 mo
401.447 179.521 li
f
1 lw
0 lc
395.447 179.521 mo
401.447 173.521 li
395.447 173.521 mo
401.447 179.521 li
@
grestore
gsave
404.786 174.11 mo
411.786 174.11 li
411.786 167.11 li
404.786 167.11 li
404.786 174.11 li
clp
405.285 173.61 mo
411.285 167.61 li
405.285 167.61 mo
411.285 173.61 li
f
1 lw
0 lc
405.285 173.61 mo
411.285 167.61 li
405.285 167.61 mo
411.285 173.61 li
@
grestore
gsave
414.623 165.4 mo
421.624 165.4 li
421.624 158.4 li
414.623 158.4 li
414.623 165.4 li
clp
415.123 164.9 mo
421.123 158.9 li
415.123 158.9 mo
421.123 164.9 li
f
1 lw
0 lc
415.123 164.9 mo
421.123 158.9 li
415.123 158.9 mo
421.123 164.9 li
@
grestore
gsave
424.461 156.379 mo
431.461 156.379 li
431.461 149.379 li
424.461 149.379 li
424.461 156.379 li
clp
424.961 155.879 mo
430.961 149.879 li
424.961 149.879 mo
430.961 155.879 li
f
1 lw
0 lc
424.961 155.879 mo
430.961 149.879 li
424.961 149.879 mo
430.961 155.879 li
@
grestore
gsave
434.299 148.291 mo
441.299 148.291 li
441.299 141.291 li
434.299 141.291 li
434.299 148.291 li
clp
434.799 147.792 mo
440.799 141.792 li
434.799 141.792 mo
440.799 147.792 li
f
1 lw
0 lc
434.799 147.792 mo
440.799 141.792 li
434.799 141.792 mo
440.799 147.792 li
@
grestore
gsave
444.137 140.515 mo
451.137 140.515 li
451.137 133.515 li
444.137 133.515 li
444.137 140.515 li
clp
444.638 140.015 mo
450.638 134.015 li
444.638 134.015 mo
450.638 140.015 li
f
1 lw
0 lc
444.638 140.015 mo
450.638 134.015 li
444.638 134.015 mo
450.638 140.015 li
@
grestore
gsave
453.976 138.649 mo
460.975 138.649 li
460.975 131.649 li
453.976 131.649 li
453.976 138.649 li
clp
454.476 138.148 mo
460.476 132.148 li
454.476 132.148 mo
460.476 138.148 li
f
1 lw
0 lc
454.476 138.148 mo
460.476 132.148 li
454.476 132.148 mo
460.476 138.148 li
@
grestore
gsave
463.814 133.049 mo
470.814 133.049 li
470.814 126.049 li
463.814 126.049 li
463.814 133.049 li
clp
464.314 132.549 mo
470.314 126.549 li
464.314 126.549 mo
470.314 132.549 li
f
1 lw
0 lc
464.314 132.549 mo
470.314 126.549 li
464.314 126.549 mo
470.314 132.549 li
@
grestore
gsave
473.652 128.072 mo
480.652 128.072 li
480.652 121.072 li
473.652 121.072 li
473.652 128.072 li
clp
474.152 127.572 mo
480.152 121.572 li
474.152 121.572 mo
480.152 127.572 li
f
1 lw
0 lc
474.152 127.572 mo
480.152 121.572 li
474.152 121.572 mo
480.152 127.572 li
@
grestore
gsave
483.49 119.984 mo
490.49 119.984 li
490.49 112.984 li
483.49 112.984 li
483.49 119.984 li
clp
483.99 119.484 mo
489.99 113.484 li
483.99 113.484 mo
489.99 119.484 li
f
1 lw
0 lc
483.99 119.484 mo
489.99 113.484 li
483.99 113.484 mo
489.99 119.484 li
@
grestore
gsave
493.327 112.208 mo
500.328 112.208 li
500.328 105.208 li
493.327 105.208 li
493.327 112.208 li
clp
493.828 111.708 mo
499.828 105.708 li
493.828 105.708 mo
499.828 111.708 li
f
1 lw
0 lc
493.828 111.708 mo
499.828 105.708 li
493.828 105.708 mo
499.828 111.708 li
@
grestore
gsave
503.165 109.408 mo
510.165 109.408 li
510.165 102.408 li
503.165 102.408 li
503.165 109.408 li
clp
503.666 108.908 mo
509.666 102.908 li
503.666 102.908 mo
509.666 108.908 li
f
1 lw
0 lc
503.666 108.908 mo
509.666 102.908 li
503.666 102.908 mo
509.666 108.908 li
@
grestore
gsave
513.004 105.053 mo
520.003 105.053 li
520.003 98.0532 li
513.004 98.0532 li
513.004 105.053 li
clp
513.504 104.553 mo
519.504 98.5532 li
513.504 98.5532 mo
519.504 104.553 li
f
1 lw
0 lc
513.504 104.553 mo
519.504 98.5532 li
513.504 98.5532 mo
519.504 104.553 li
@
grestore
gsave
522.842 103.187 mo
529.842 103.187 li
529.842 96.1869 li
522.842 96.1869 li
522.842 103.187 li
clp
523.342 102.687 mo
529.342 96.6868 li
523.342 96.6868 mo
529.342 102.687 li
f
1 lw
0 lc
523.342 102.687 mo
529.342 96.6868 li
523.342 96.6868 mo
529.342 102.687 li
@
grestore
gsave
532.68 99.4541 mo
539.68 99.4541 li
539.68 92.4542 li
532.68 92.4542 li
532.68 99.4541 li
clp
533.18 98.954 mo
539.18 92.954 li
533.18 92.954 mo
539.18 98.954 li
f
1 lw
0 lc
533.18 98.954 mo
539.18 92.954 li
533.18 92.954 mo
539.18 98.954 li
@
grestore
gsave
542.518 96.0322 mo
549.518 96.0322 li
549.518 89.0322 li
542.518 89.0322 li
542.518 96.0322 li
clp
543.018 95.5323 mo
549.018 89.5323 li
543.018 89.5323 mo
549.018 95.5323 li
f
1 lw
0 lc
543.018 95.5323 mo
549.018 89.5323 li
543.018 89.5323 mo
549.018 95.5323 li
@
grestore
gsave
552.356 94.7881 mo
559.356 94.7881 li
559.356 87.7881 li
552.356 87.7881 li
552.356 94.7881 li
clp
552.856 94.288 mo
558.856 88.288 li
552.856 88.288 mo
558.856 94.288 li
f
1 lw
0 lc
552.856 94.288 mo
558.856 88.288 li
552.856 88.288 mo
558.856 94.288 li
@
grestore
gsave
562.193 91.9884 mo
569.194 91.9884 li
569.194 84.9884 li
562.193 84.9884 li
562.193 91.9884 li
clp
562.694 91.4884 mo
568.694 85.4884 li
562.694 85.4884 mo
568.694 91.4884 li
f
1 lw
0 lc
562.694 91.4884 mo
568.694 85.4884 li
562.694 85.4884 mo
568.694 91.4884 li
@
grestore
gsave
572.032 87.0112 mo
579.031 87.0112 li
579.031 80.0112 li
572.032 80.0112 li
572.032 87.0112 li
clp
572.532 86.5114 mo
578.532 80.5114 li
572.532 80.5114 mo
578.532 86.5114 li
f
1 lw
0 lc
572.532 86.5114 mo
578.532 80.5114 li
572.532 80.5114 mo
578.532 86.5114 li
@
grestore
gsave
581.87 83.2785 mo
588.87 83.2785 li
588.87 76.2785 li
581.87 76.2785 li
581.87 83.2785 li
clp
582.37 82.7786 mo
588.37 76.7786 li
582.37 76.7786 mo
588.37 82.7786 li
f
1 lw
0 lc
582.37 82.7786 mo
588.37 76.7786 li
582.37 76.7786 mo
588.37 82.7786 li
@
grestore
gsave
591.708 80.7899 mo
598.708 80.7899 li
598.708 73.79 li
591.708 73.79 li
591.708 80.7899 li
clp
592.208 80.29 mo
598.208 74.29 li
592.208 74.29 mo
598.208 80.29 li
f
1 lw
0 lc
592.208 80.29 mo
598.208 74.29 li
592.208 74.29 mo
598.208 80.29 li
@
grestore
gsave
601.546 77.9905 mo
608.546 77.9905 li
608.546 70.9903 li
601.546 70.9903 li
601.546 77.9905 li
clp
602.046 77.4904 mo
608.046 71.4904 li
602.046 71.4904 mo
608.046 77.4904 li
f
1 lw
0 lc
602.046 77.4904 mo
608.046 71.4904 li
602.046 71.4904 mo
608.046 77.4904 li
@
grestore
gsave
611.384 77.3683 mo
618.384 77.3683 li
618.384 70.3684 li
611.384 70.3684 li
611.384 77.3683 li
clp
611.884 76.8683 mo
617.884 70.8683 li
611.884 70.8683 mo
617.884 76.8683 li
f
1 lw
0 lc
611.884 76.8683 mo
617.884 70.8683 li
611.884 70.8683 mo
617.884 76.8683 li
@
grestore
gsave
621.222 77.9905 mo
628.222 77.9905 li
628.222 70.9903 li
621.222 70.9903 li
621.222 77.9905 li
clp
621.722 77.4904 mo
627.722 71.4904 li
621.722 71.4904 mo
627.722 77.4904 li
f
1 lw
0 lc
621.722 77.4904 mo
627.722 71.4904 li
621.722 71.4904 mo
627.722 77.4904 li
@
grestore
gsave
631.06 77.6794 mo
638.06 77.6794 li
638.06 70.6795 li
631.06 70.6795 li
631.06 77.6794 li
clp
631.56 77.1793 mo
637.56 71.1793 li
631.56 71.1793 mo
637.56 77.1793 li
f
1 lw
0 lc
631.56 77.1793 mo
637.56 71.1793 li
631.56 71.1793 mo
637.56 77.1793 li
@
grestore
gsave
640.898 76.7461 mo
647.898 76.7461 li
647.898 69.7461 li
640.898 69.7461 li
640.898 76.7461 li
clp
641.398 76.2461 mo
647.398 70.2461 li
641.398 70.2461 mo
647.398 76.2461 li
f
1 lw
0 lc
641.398 76.2461 mo
647.398 70.2461 li
641.398 70.2461 mo
647.398 76.2461 li
@
grestore
gsave
650.736 74.2575 mo
657.736 74.2575 li
657.736 67.2576 li
650.736 67.2576 li
650.736 74.2575 li
clp
651.236 73.7576 mo
657.236 67.7576 li
651.236 67.7576 mo
657.236 73.7576 li
f
1 lw
0 lc
651.236 73.7576 mo
657.236 67.7576 li
651.236 67.7576 mo
657.236 73.7576 li
@
grestore
gsave
660.574 73.0134 mo
667.574 73.0134 li
667.574 66.0134 li
660.574 66.0134 li
660.574 73.0134 li
clp
661.074 72.5133 mo
667.074 66.5133 li
661.074 66.5133 mo
667.074 72.5133 li
f
1 lw
0 lc
661.074 72.5133 mo
667.074 66.5133 li
661.074 66.5133 mo
667.074 72.5133 li
@
grestore
gsave
670.412 71.147 mo
677.412 71.147 li
677.412 64.1471 li
670.412 64.1471 li
670.412 71.147 li
clp
670.912 70.6469 mo
676.912 64.6469 li
670.912 64.6469 mo
676.912 70.6469 li
f
1 lw
0 lc
670.912 70.6469 mo
676.912 64.6469 li
670.912 64.6469 mo
676.912 70.6469 li
@
grestore
gsave
680.25 69.9026 mo
687.25 69.9026 li
687.25 62.9026 li
680.25 62.9026 li
680.25 69.9026 li
clp
680.75 69.4026 mo
686.75 63.4026 li
680.75 63.4026 mo
686.75 69.4026 li
f
1 lw
0 lc
680.75 69.4026 mo
686.75 63.4026 li
680.75 63.4026 mo
686.75 69.4026 li
@
grestore
gsave
690.088 72.08 mo
697.088 72.08 li
697.088 65.0801 li
690.088 65.0801 li
690.088 72.08 li
clp
690.588 71.5801 mo
696.588 65.5801 li
690.588 65.5801 mo
696.588 71.5801 li
f
1 lw
0 lc
690.588 71.5801 mo
696.588 65.5801 li
690.588 65.5801 mo
696.588 71.5801 li
@
grestore
gsave
699.926 71.147 mo
706.926 71.147 li
706.926 64.1471 li
699.926 64.1471 li
699.926 71.147 li
clp
700.426 70.6469 mo
706.426 64.6469 li
700.426 64.6469 mo
706.426 70.6469 li
f
1 lw
0 lc
700.426 70.6469 mo
706.426 64.6469 li
700.426 64.6469 mo
706.426 70.6469 li
@
grestore
gsave
709.764 70.2137 mo
716.764 70.2137 li
716.764 63.2137 li
709.764 63.2137 li
709.764 70.2137 li
clp
710.264 69.7137 mo
716.264 63.7137 li
710.264 63.7137 mo
716.264 69.7137 li
f
1 lw
0 lc
710.264 69.7137 mo
716.264 63.7137 li
710.264 63.7137 mo
716.264 69.7137 li
@
grestore
gsave
719.602 70.5248 mo
726.602 70.5248 li
726.602 63.5248 li
719.602 63.5248 li
719.602 70.5248 li
clp
720.102 70.0248 mo
726.102 64.0248 li
720.102 64.0248 mo
726.102 70.0248 li
f
1 lw
0 lc
720.102 70.0248 mo
726.102 64.0248 li
720.102 64.0248 mo
726.102 70.0248 li
@
grestore
gsave
729.44 68.9696 mo
736.44 68.9696 li
736.44 61.9693 li
729.44 61.9693 li
729.44 68.9696 li
clp
729.94 68.4694 mo
735.94 62.4694 li
729.94 62.4694 mo
735.94 68.4694 li
f
1 lw
0 lc
729.94 68.4694 mo
735.94 62.4694 li
729.94 62.4694 mo
735.94 68.4694 li
@
grestore
gsave
739.278 71.4578 mo
746.278 71.4578 li
746.278 64.4578 li
739.278 64.4578 li
739.278 71.4578 li
clp
739.778 70.9579 mo
745.778 64.9579 li
739.778 64.9579 mo
745.778 70.9579 li
f
1 lw
0 lc
739.778 70.9579 mo
745.778 64.9579 li
739.778 64.9579 mo
745.778 70.9579 li
@
grestore
gsave
749.116 73.3245 mo
756.116 73.3245 li
756.116 66.3242 li
749.116 66.3242 li
749.116 73.3245 li
clp
749.616 72.8243 mo
755.616 66.8243 li
749.616 66.8243 mo
755.616 72.8243 li
f
1 lw
0 lc
749.616 72.8243 mo
755.616 66.8243 li
749.616 66.8243 mo
755.616 72.8243 li
@
grestore
gsave
758.954 71.4578 mo
765.954 71.4578 li
765.954 64.4578 li
758.954 64.4578 li
758.954 71.4578 li
clp
759.454 70.9579 mo
765.454 64.9579 li
759.454 64.9579 mo
765.454 70.9579 li
f
1 lw
0 lc
759.454 70.9579 mo
765.454 64.9579 li
759.454 64.9579 mo
765.454 70.9579 li
@
grestore
gsave
768.792 75.8127 mo
775.792 75.8127 li
775.792 68.8128 li
768.792 68.8128 li
768.792 75.8127 li
clp
769.292 75.3129 mo
775.292 69.3129 li
769.292 69.3129 mo
775.292 75.3129 li
f
1 lw
0 lc
769.292 75.3129 mo
775.292 69.3129 li
769.292 69.3129 mo
775.292 75.3129 li
@
grestore
gsave
778.63 73.6353 mo
785.63 73.6353 li
785.63 66.6353 li
778.63 66.6353 li
778.63 73.6353 li
clp
779.13 73.1354 mo
785.13 67.1354 li
779.13 67.1354 mo
785.13 73.1354 li
f
1 lw
0 lc
779.13 73.1354 mo
785.13 67.1354 li
779.13 67.1354 mo
785.13 73.1354 li
@
grestore
gsave
788.468 74.8797 mo
795.468 74.8797 li
795.468 67.8798 li
788.468 67.8798 li
788.468 74.8797 li
clp
788.968 74.3796 mo
794.968 68.3796 li
788.968 68.3796 mo
794.968 74.3796 li
f
1 lw
0 lc
788.968 74.3796 mo
794.968 68.3796 li
788.968 68.3796 mo
794.968 74.3796 li
@
grestore
gsave
798.306 70.5248 mo
805.306 70.5248 li
805.306 63.5248 li
798.306 63.5248 li
798.306 70.5248 li
clp
798.806 70.0247 mo
804.806 64.0247 li
798.806 64.0247 mo
804.806 70.0247 li
f
1 lw
0 lc
798.806 70.0247 mo
804.806 64.0247 li
798.806 64.0247 mo
804.806 70.0247 li
@
grestore
gsave
808.144 67.1029 mo
815.144 67.1029 li
815.144 60.1029 li
808.144 60.1029 li
808.144 67.1029 li
clp
808.644 66.603 mo
814.644 60.603 li
808.644 60.603 mo
814.644 66.603 li
f
1 lw
0 lc
808.644 66.603 mo
814.644 60.603 li
808.644 60.603 mo
814.644 66.603 li
@
grestore
gsave
817.982 68.0362 mo
824.982 68.0362 li
824.982 61.0363 li
817.982 61.0363 li
817.982 68.0362 li
clp
818.482 67.5362 mo
824.482 61.5362 li
818.482 61.5362 mo
824.482 67.5362 li
f
1 lw
0 lc
818.482 67.5362 mo
824.482 61.5362 li
818.482 61.5362 mo
824.482 67.5362 li
@
grestore
gsave
827.82 68.0362 mo
834.82 68.0362 li
834.82 61.0363 li
827.82 61.0363 li
827.82 68.0362 li
clp
828.32 67.5362 mo
834.32 61.5362 li
828.32 61.5362 mo
834.32 67.5362 li
f
1 lw
0 lc
828.32 67.5362 mo
834.32 61.5362 li
828.32 61.5362 mo
834.32 67.5362 li
@
grestore
gsave
837.658 67.414 mo
844.658 67.414 li
844.658 60.414 li
837.658 60.414 li
837.658 67.414 li
clp
838.158 66.9141 mo
844.158 60.9141 li
838.158 60.9141 mo
844.158 66.9141 li
f
1 lw
0 lc
838.158 66.9141 mo
844.158 60.9141 li
838.158 60.9141 mo
844.158 66.9141 li
@
grestore
gsave
847.496 67.414 mo
854.496 67.414 li
854.496 60.414 li
847.496 60.414 li
847.496 67.414 li
clp
847.996 66.9141 mo
853.996 60.9141 li
847.996 60.9141 mo
853.996 66.9141 li
f
1 lw
0 lc
847.996 66.9141 mo
853.996 60.9141 li
847.996 60.9141 mo
853.996 66.9141 li
@
grestore
gsave
857.334 67.1029 mo
864.334 67.1029 li
864.334 60.1029 li
857.334 60.1029 li
857.334 67.1029 li
clp
857.834 66.603 mo
863.834 60.603 li
857.834 60.603 mo
863.834 66.603 li
f
1 lw
0 lc
857.834 66.603 mo
863.834 60.603 li
857.834 60.603 mo
863.834 66.603 li
@
grestore
gsave
867.172 66.7917 mo
874.172 66.7917 li
874.172 59.7918 li
867.172 59.7918 li
867.172 66.7917 li
clp
867.672 66.2919 mo
873.672 60.2919 li
867.672 60.2919 mo
873.672 66.2919 li
f
1 lw
0 lc
867.672 66.2919 mo
873.672 60.2919 li
867.672 60.2919 mo
873.672 66.2919 li
@
grestore
gsave
877.01 66.7917 mo
884.01 66.7917 li
884.01 59.7918 li
877.01 59.7918 li
877.01 66.7917 li
clp
877.51 66.2919 mo
883.51 60.2919 li
877.51 60.2919 mo
883.51 66.2919 li
f
1 lw
0 lc
877.51 66.2919 mo
883.51 60.2919 li
877.51 60.2919 mo
883.51 66.2919 li
@
grestore
gsave
886.848 66.4806 mo
893.848 66.4806 li
893.848 59.4807 li
886.848 59.4807 li
886.848 66.4806 li
clp
887.348 65.9808 mo
893.348 59.9808 li
887.348 59.9808 mo
893.348 65.9808 li
f
1 lw
0 lc
887.348 65.9808 mo
893.348 59.9808 li
887.348 59.9808 mo
893.348 65.9808 li
@
grestore
gsave
896.686 65.8587 mo
903.686 65.8587 li
903.686 58.8588 li
896.686 58.8588 li
896.686 65.8587 li
clp
897.186 65.3586 mo
903.186 59.3586 li
897.186 59.3586 mo
903.186 65.3586 li
f
1 lw
0 lc
897.186 65.3586 mo
903.186 59.3586 li
897.186 59.3586 mo
903.186 65.3586 li
@
grestore
gsave
906.524 65.8587 mo
913.524 65.8587 li
913.524 58.8588 li
906.524 58.8588 li
906.524 65.8587 li
clp
907.024 65.3586 mo
913.024 59.3586 li
907.024 59.3586 mo
913.024 65.3586 li
f
1 lw
0 lc
907.024 65.3586 mo
913.024 59.3586 li
907.024 59.3586 mo
913.024 65.3586 li
@
grestore
gsave
916.362 66.1699 mo
923.362 66.1699 li
923.362 59.1699 li
916.362 59.1699 li
916.362 66.1699 li
clp
916.862 65.6697 mo
922.862 59.6697 li
916.862 59.6697 mo
922.862 65.6697 li
f
1 lw
0 lc
916.862 65.6697 mo
922.862 59.6697 li
916.862 59.6697 mo
922.862 65.6697 li
@
grestore
gsave
926.2 65.5476 mo
933.2 65.5476 li
933.2 58.5477 li
926.2 58.5477 li
926.2 65.5476 li
clp
926.7 65.0476 mo
932.7 59.0476 li
926.7 59.0476 mo
932.7 65.0476 li
f
1 lw
0 lc
926.7 65.0476 mo
932.7 59.0476 li
926.7 59.0476 mo
932.7 65.0476 li
@
grestore
gsave
936.038 65.2365 mo
943.038 65.2365 li
943.038 58.2366 li
936.038 58.2366 li
936.038 65.2365 li
clp
936.538 64.7365 mo
942.538 58.7365 li
936.538 58.7365 mo
942.538 64.7365 li
f
1 lw
0 lc
936.538 64.7365 mo
942.538 58.7365 li
936.538 58.7365 mo
942.538 64.7365 li
@
grestore
gsave
945.876 65.8587 mo
952.876 65.8587 li
952.876 58.8588 li
945.876 58.8588 li
945.876 65.8587 li
clp
946.376 65.3586 mo
952.376 59.3586 li
946.376 59.3586 mo
952.376 65.3586 li
f
1 lw
0 lc
946.376 65.3586 mo
952.376 59.3586 li
946.376 59.3586 mo
952.376 65.3586 li
@
grestore
gsave
955.714 64.9254 mo
962.714 64.9254 li
962.714 57.9254 li
955.714 57.9254 li
955.714 64.9254 li
clp
956.214 64.4254 mo
962.214 58.4254 li
956.214 58.4254 mo
962.214 64.4254 li
f
1 lw
0 lc
956.214 64.4254 mo
962.214 58.4254 li
956.214 58.4254 mo
962.214 64.4254 li
@
grestore
gsave
965.552 64.3032 mo
972.552 64.3032 li
972.552 57.3032 li
965.552 57.3032 li
965.552 64.3032 li
clp
966.052 63.8033 mo
972.052 57.8033 li
966.052 57.8033 mo
972.052 63.8033 li
f
1 lw
0 lc
966.052 63.8033 mo
972.052 57.8033 li
966.052 57.8033 mo
972.052 63.8033 li
@
grestore
gsave
975.39 64.6143 mo
982.39 64.6143 li
982.39 57.6143 li
975.39 57.6143 li
975.39 64.6143 li
clp
975.89 64.1144 mo
981.89 58.1144 li
975.89 58.1144 mo
981.89 64.1144 li
f
1 lw
0 lc
975.89 64.1144 mo
981.89 58.1144 li
975.89 58.1144 mo
981.89 64.1144 li
@
grestore
gsave
985.228 64.3032 mo
992.228 64.3032 li
992.228 57.3032 li
985.228 57.3032 li
985.228 64.3032 li
clp
985.728 63.8033 mo
991.728 57.8033 li
985.728 57.8033 mo
991.728 63.8033 li
f
1 lw
0 lc
985.728 63.8033 mo
991.728 57.8033 li
985.728 57.8033 mo
991.728 63.8033 li
@
grestore
gsave
995.066 64.3032 mo
1002.07 64.3032 li
1002.07 57.3032 li
995.066 57.3032 li
995.066 64.3032 li
clp
995.566 63.8033 mo
1001.57 57.8033 li
995.566 57.8033 mo
1001.57 63.8033 li
f
1 lw
0 lc
995.566 63.8033 mo
1001.57 57.8033 li
995.566 57.8033 mo
1001.57 63.8033 li
@
grestore
gsave
1004.9 64.6143 mo
1011.9 64.6143 li
1011.9 57.6143 li
1004.9 57.6143 li
1004.9 64.6143 li
clp
1005.4 64.1144 mo
1011.4 58.1144 li
1005.4 58.1144 mo
1011.4 64.1144 li
f
1 lw
0 lc
1005.4 64.1144 mo
1011.4 58.1144 li
1005.4 58.1144 mo
1011.4 64.1144 li
@
grestore
gsave
1014.74 64.3032 mo
1021.74 64.3032 li
1021.74 57.3032 li
1014.74 57.3032 li
1014.74 64.3032 li
clp
1015.24 63.8033 mo
1021.24 57.8033 li
1015.24 57.8033 mo
1021.24 63.8033 li
f
1 lw
0 lc
1015.24 63.8033 mo
1021.24 57.8033 li
1015.24 57.8033 mo
1021.24 63.8033 li
@
grestore
gsave
1024.58 64.6143 mo
1031.58 64.6143 li
1031.58 57.6143 li
1024.58 57.6143 li
1024.58 64.6143 li
clp
1025.08 64.1144 mo
1031.08 58.1144 li
1025.08 58.1144 mo
1031.08 64.1144 li
f
1 lw
0 lc
1025.08 64.1144 mo
1031.08 58.1144 li
1025.08 58.1144 mo
1031.08 64.1144 li
@
grestore
gsave
1034.42 64.6143 mo
1041.42 64.6143 li
1041.42 57.6143 li
1034.42 57.6143 li
1034.42 64.6143 li
clp
1034.92 64.1144 mo
1040.92 58.1144 li
1034.92 58.1144 mo
1040.92 64.1144 li
f
1 lw
0 lc
1034.92 64.1144 mo
1040.92 58.1144 li
1034.92 58.1144 mo
1040.92 64.1144 li
@
grestore
gsave
1044.26 64.9254 mo
1051.26 64.9254 li
1051.26 57.9254 li
1044.26 57.9254 li
1044.26 64.9254 li
clp
1044.76 64.4255 mo
1050.76 58.4255 li
1044.76 58.4255 mo
1050.76 64.4255 li
f
1 lw
0 lc
1044.76 64.4255 mo
1050.76 58.4255 li
1044.76 58.4255 mo
1050.76 64.4255 li
@
grestore
gsave
1054.09 64.6143 mo
1061.09 64.6143 li
1061.09 57.6143 li
1054.09 57.6143 li
1054.09 64.6143 li
clp
1054.59 64.1144 mo
1060.59 58.1144 li
1054.59 58.1144 mo
1060.59 64.1144 li
f
1 lw
0 lc
1054.59 64.1144 mo
1060.59 58.1144 li
1054.59 58.1144 mo
1060.59 64.1144 li
@
grestore
gsave
1063.93 64.9254 mo
1070.93 64.9254 li
1070.93 57.9254 li
1063.93 57.9254 li
1063.93 64.9254 li
clp
1064.43 64.4255 mo
1070.43 58.4255 li
1064.43 58.4255 mo
1070.43 64.4255 li
f
1 lw
0 lc
1064.43 64.4255 mo
1070.43 58.4255 li
1064.43 58.4255 mo
1070.43 64.4255 li
@
grestore
gsave
1073.77 64.6143 mo
1080.77 64.6143 li
1080.77 57.6143 li
1073.77 57.6143 li
1073.77 64.6143 li
clp
1074.27 64.1144 mo
1080.27 58.1144 li
1074.27 58.1144 mo
1080.27 64.1144 li
f
1 lw
0 lc
1074.27 64.1144 mo
1080.27 58.1144 li
1074.27 58.1144 mo
1080.27 64.1144 li
@
grestore
gsave
1083.61 64.3032 mo
1090.61 64.3032 li
1090.61 57.3032 li
1083.61 57.3032 li
1083.61 64.3032 li
clp
1084.11 63.8033 mo
1090.11 57.8033 li
1084.11 57.8033 mo
1090.11 63.8033 li
f
1 lw
0 lc
1084.11 63.8033 mo
1090.11 57.8033 li
1084.11 57.8033 mo
1090.11 63.8033 li
@
grestore
gsave
1093.45 65.2365 mo
1100.45 65.2365 li
1100.45 58.2366 li
1093.45 58.2366 li
1093.45 65.2365 li
clp
1093.95 64.7365 mo
1099.95 58.7365 li
1093.95 58.7365 mo
1099.95 64.7365 li
f
1 lw
0 lc
1093.95 64.7365 mo
1099.95 58.7365 li
1093.95 58.7365 mo
1099.95 64.7365 li
@
grestore
gsave
1103.28 65.5476 mo
1110.28 65.5476 li
1110.28 58.5477 li
1103.28 58.5477 li
1103.28 65.5476 li
clp
1103.78 65.0476 mo
1109.78 59.0476 li
1103.78 59.0476 mo
1109.78 65.0476 li
f
1 lw
0 lc
1103.78 65.0476 mo
1109.78 59.0476 li
1103.78 59.0476 mo
1109.78 65.0476 li
@
grestore
gsave
1113.12 65.8587 mo
1120.12 65.8587 li
1120.12 58.8588 li
1113.12 58.8588 li
1113.12 65.8587 li
clp
1113.62 65.3587 mo
1119.62 59.3587 li
1113.62 59.3587 mo
1119.62 65.3587 li
f
1 lw
0 lc
1113.62 65.3587 mo
1119.62 59.3587 li
1113.62 59.3587 mo
1119.62 65.3587 li
@
grestore
gsave
1122.96 65.5476 mo
1129.96 65.5476 li
1129.96 58.5477 li
1122.96 58.5477 li
1122.96 65.5476 li
clp
1123.46 65.0476 mo
1129.46 59.0476 li
1123.46 59.0476 mo
1129.46 65.0476 li
f
1 lw
0 lc
1123.46 65.0476 mo
1129.46 59.0476 li
1123.46 59.0476 mo
1129.46 65.0476 li
@
grestore
152.497 521.183 mo
162.335 482.611 li
172.173 471.827 li
182.011 435.329 li
191.849 409.821 li
201.687 411.273 li
211.525 414.383 li
221.363 406.918 li
231.201 388.876 li
241.039 367.101 li
250.877 349.267 li
260.715 329.151 li
270.553 317.123 li
280.391 292.445 li
290.229 272.951 li
300.067 254.702 li
309.905 239.149 li
319.743 231.268 li
329.581 226.706 li
339.419 221.936 li
349.257 211.775 li
359.095 198.71 li
368.933 188.963 li
378.771 181.912 li
388.609 179.009 li
398.448 178.18 li
408.286 170.092 li
418.124 162.004 li
427.962 153.087 li
437.8 145.206 li
447.638 135.252 li
457.476 124.883 li
467.314 121.358 li
477.152 115.759 li
486.99 111.196 li
496.828 105.182 li
506.666 103.316 li
516.504 103.316 li
526.342 100.205 li
536.18 94.8135 li
546.018 91.0806 li
555.856 90.0438 li
565.694 89.0068 li
575.532 86.7257 li
585.37 84.2372 li
595.208 81.956 li
605.046 80.7117 li
614.884 77.8084 li
624.722 73.4535 li
634.56 67.2321 li
644.398 64.951 li
654.236 62.4625 li
664.074 62.4625 li
673.912 59.3517 li
683.75 61.4255 li
693.588 58.3149 li
703.426 57.9001 li
713.264 54.582 li
723.102 53.1304 li
732.94 51.6788 li
742.778 51.4714 li
752.616 50.0197 li
762.454 50.0197 li
772.292 49.8124 li
782.13 48.9828 li
791.968 50.8492 li
801.806 48.7755 li
811.644 43.7984 li
821.482 43.591 li
831.32 43.3836 li
841.158 43.3836 li
850.996 43.591 li
860.834 43.591 li
870.672 44.0057 li
880.51 44.0057 li
890.348 44.0057 li
900.186 44.0057 li
910.024 44.0057 li
919.862 43.591 li
929.7 43.591 li
939.538 43.1763 li
949.376 43.1763 li
959.214 42.7615 li
969.052 42.7615 li
978.891 42.5541 li
988.729 42.3467 li
998.567 42.3467 li
1008.4 42.1393 li
1018.24 42.1393 li
1028.08 42.1393 li
1037.92 42.1393 li
1047.76 42.1393 li
1057.59 42.1393 li
1067.43 42.1393 li
1077.27 42.3467 li
1087.11 42.3467 li
1096.95 42.3467 li
1106.78 42.5541 li
1116.62 42.5541 li
1126.46 42.1393 li
1 /0 /CSD get_res sepcs
1 sep
@
152.497 530.515 mo
162.335 519.317 li
172.173 506.252 li
182.011 467.68 li
191.849 435.951 li
201.687 436.262 li
211.525 425.686 li
221.363 402.978 li
231.201 379.959 li
241.039 355.695 li
250.877 332.365 li
260.715 311.524 li
270.553 302.814 li
280.391 275.129 li
290.229 262.686 li
300.067 246.822 li
309.905 235.001 li
319.743 225.669 li
329.581 219.137 li
339.419 216.959 li
349.257 206.072 li
359.095 196.429 li
368.933 184.297 li
378.771 179.942 li
388.609 177.765 li
398.448 173.41 li
408.286 165.944 li
418.124 157.234 li
427.962 151.946 li
437.8 142.925 li
447.638 134.526 li
457.476 128.616 li
467.314 126.439 li
477.152 122.706 li
486.99 118.973 li
496.828 114.307 li
506.666 110.574 li
516.504 107.775 li
526.342 104.975 li
536.18 104.042 li
546.018 99.0647 li
555.856 95.954 li
565.694 93.7766 li
575.532 91.288 li
585.37 91.5991 li
595.208 92.5323 li
605.046 91.9102 li
614.884 89.4216 li
624.722 86.3109 li
634.56 81.3339 li
644.398 81.956 li
654.236 77.6011 li
664.074 77.9121 li
673.912 74.4904 li
683.75 71.6908 li
693.588 72.0018 li
703.426 68.8912 li
713.264 64.2252 li
723.102 67.3358 li
732.94 64.2252 li
742.778 65.4694 li
752.616 65.4694 li
762.454 63.603 li
772.292 62.9809 li
782.13 61.7366 li
791.968 60.4923 li
801.806 58.3149 li
811.644 58.937 li
821.482 58.6259 li
831.32 58.937 li
841.158 58.3149 li
850.996 58.3149 li
860.834 58.3149 li
870.672 58.3149 li
880.51 58.0038 li
890.348 57.3817 li
900.186 57.3817 li
910.024 57.0706 li
919.862 56.7595 li
929.7 56.7595 li
939.538 56.4485 li
949.376 56.7595 li
959.214 56.7595 li
969.052 57.0706 li
978.891 57.0706 li
988.729 57.0706 li
998.567 56.4485 li
1008.4 56.1374 li
1018.24 56.1374 li
1028.08 56.1374 li
1037.92 55.8264 li
1047.76 55.2042 li
1057.59 55.2042 li
1067.43 55.5153 li
1077.27 55.5153 li
1087.11 55.5153 li
1096.95 55.8264 li
1106.78 55.8264 li
1116.62 55.5153 li
1126.46 55.5153 li
@
gsave
148.997 534.016 mo
155.997 534.016 li
155.997 527.015 li
148.997 527.015 li
148.997 534.016 li
clp
149.497 533.515 mo
155.497 527.515 li
149.497 527.515 mo
155.497 533.515 li
f
1 lw
0 lc
149.497 533.515 mo
155.497 527.515 li
149.497 527.515 mo
155.497 533.515 li
@
grestore
gsave
158.835 522.817 mo
165.835 522.817 li
165.835 515.817 li
158.835 515.817 li
158.835 522.817 li
clp
159.335 522.317 mo
165.335 516.317 li
159.335 516.317 mo
165.335 522.317 li
f
1 lw
0 lc
159.335 522.317 mo
165.335 516.317 li
159.335 516.317 mo
165.335 522.317 li
@
grestore
gsave
168.673 509.752 mo
175.673 509.752 li
175.673 502.752 li
168.673 502.752 li
168.673 509.752 li
clp
169.173 509.252 mo
175.173 503.252 li
169.173 503.252 mo
175.173 509.252 li
f
1 lw
0 lc
169.173 509.252 mo
175.173 503.252 li
169.173 503.252 mo
175.173 509.252 li
@
grestore
gsave
178.511 471.18 mo
185.511 471.18 li
185.511 464.18 li
178.511 464.18 li
178.511 471.18 li
clp
179.011 470.68 mo
185.011 464.68 li
179.011 464.68 mo
185.011 470.68 li
f
1 lw
0 lc
179.011 470.68 mo
185.011 464.68 li
179.011 464.68 mo
185.011 470.68 li
@
grestore
gsave
188.349 439.451 mo
195.349 439.451 li
195.349 432.451 li
188.349 432.451 li
188.349 439.451 li
clp
188.849 438.951 mo
194.849 432.951 li
188.849 432.951 mo
194.849 438.951 li
f
1 lw
0 lc
188.849 438.951 mo
194.849 432.951 li
188.849 432.951 mo
194.849 438.951 li
@
grestore
gsave
198.187 439.762 mo
205.187 439.762 li
205.187 432.762 li
198.187 432.762 li
198.187 439.762 li
clp
198.687 439.262 mo
204.687 433.262 li
198.687 433.262 mo
204.687 439.262 li
f
1 lw
0 lc
198.687 439.262 mo
204.687 433.262 li
198.687 433.262 mo
204.687 439.262 li
@
grestore
gsave
208.025 429.186 mo
215.025 429.186 li
215.025 422.186 li
208.025 422.186 li
208.025 429.186 li
clp
208.525 428.686 mo
214.525 422.686 li
208.525 422.686 mo
214.525 428.686 li
f
1 lw
0 lc
208.525 428.686 mo
214.525 422.686 li
208.525 422.686 mo
214.525 428.686 li
@
grestore
gsave
217.863 406.478 mo
224.863 406.478 li
224.863 399.478 li
217.863 399.478 li
217.863 406.478 li
clp
218.363 405.978 mo
224.363 399.978 li
218.363 399.978 mo
224.363 405.978 li
f
1 lw
0 lc
218.363 405.978 mo
224.363 399.978 li
218.363 399.978 mo
224.363 405.978 li
@
grestore
gsave
227.701 383.459 mo
234.701 383.459 li
234.701 376.459 li
227.701 376.459 li
227.701 383.459 li
clp
228.201 382.959 mo
234.201 376.959 li
228.201 376.959 mo
234.201 382.959 li
f
1 lw
0 lc
228.201 382.959 mo
234.201 376.959 li
228.201 376.959 mo
234.201 382.959 li
@
grestore
gsave
237.539 359.195 mo
244.539 359.195 li
244.539 352.196 li
237.539 352.196 li
237.539 359.195 li
clp
238.039 358.695 mo
244.039 352.695 li
238.039 352.695 mo
244.039 358.695 li
f
1 lw
0 lc
238.039 358.695 mo
244.039 352.695 li
238.039 352.695 mo
244.039 358.695 li
@
grestore
gsave
247.377 335.865 mo
254.377 335.865 li
254.377 328.865 li
247.377 328.865 li
247.377 335.865 li
clp
247.877 335.365 mo
253.877 329.365 li
247.877 329.365 mo
253.877 335.365 li
f
1 lw
0 lc
247.877 335.365 mo
253.877 329.365 li
247.877 329.365 mo
253.877 335.365 li
@
grestore
gsave
257.215 315.024 mo
264.215 315.024 li
264.215 308.024 li
257.215 308.024 li
257.215 315.024 li
clp
257.715 314.524 mo
263.715 308.524 li
257.715 308.524 mo
263.715 314.524 li
f
1 lw
0 lc
257.715 314.524 mo
263.715 308.524 li
257.715 308.524 mo
263.715 314.524 li
@
grestore
gsave
267.053 306.314 mo
274.053 306.314 li
274.053 299.314 li
267.053 299.314 li
267.053 306.314 li
clp
267.553 305.814 mo
273.553 299.814 li
267.553 299.814 mo
273.553 305.814 li
f
1 lw
0 lc
267.553 305.814 mo
273.553 299.814 li
267.553 299.814 mo
273.553 305.814 li
@
grestore
gsave
276.891 278.629 mo
283.891 278.629 li
283.891 271.629 li
276.891 271.629 li
276.891 278.629 li
clp
277.391 278.129 mo
283.391 272.129 li
277.391 272.129 mo
283.391 278.129 li
f
1 lw
0 lc
277.391 278.129 mo
283.391 272.129 li
277.391 272.129 mo
283.391 278.129 li
@
grestore
gsave
286.729 266.186 mo
293.729 266.186 li
293.729 259.186 li
286.729 259.186 li
286.729 266.186 li
clp
287.229 265.686 mo
293.229 259.686 li
287.229 259.686 mo
293.229 265.686 li
f
1 lw
0 lc
287.229 265.686 mo
293.229 259.686 li
287.229 259.686 mo
293.229 265.686 li
@
grestore
gsave
296.567 250.322 mo
303.567 250.322 li
303.567 243.322 li
296.567 243.322 li
296.567 250.322 li
clp
297.067 249.822 mo
303.067 243.822 li
297.067 243.822 mo
303.067 249.822 li
f
1 lw
0 lc
297.067 249.822 mo
303.067 243.822 li
297.067 243.822 mo
303.067 249.822 li
@
grestore
gsave
306.405 238.501 mo
313.405 238.501 li
313.405 231.501 li
306.405 231.501 li
306.405 238.501 li
clp
306.905 238.001 mo
312.905 232.001 li
306.905 232.001 mo
312.905 238.001 li
f
1 lw
0 lc
306.905 238.001 mo
312.905 232.001 li
306.905 232.001 mo
312.905 238.001 li
@
grestore
gsave
316.243 229.169 mo
323.243 229.169 li
323.243 222.169 li
316.243 222.169 li
316.243 229.169 li
clp
316.743 228.669 mo
322.743 222.669 li
316.743 222.669 mo
322.743 228.669 li
f
1 lw
0 lc
316.743 228.669 mo
322.743 222.669 li
316.743 222.669 mo
322.743 228.669 li
@
grestore
gsave
326.081 222.637 mo
333.081 222.637 li
333.081 215.637 li
326.081 215.637 li
326.081 222.637 li
clp
326.581 222.137 mo
332.581 216.137 li
326.581 216.137 mo
332.581 222.137 li
f
1 lw
0 lc
326.581 222.137 mo
332.581 216.137 li
326.581 216.137 mo
332.581 222.137 li
@
grestore
gsave
335.919 220.459 mo
342.919 220.459 li
342.919 213.459 li
335.919 213.459 li
335.919 220.459 li
clp
336.419 219.959 mo
342.419 213.959 li
336.419 213.959 mo
342.419 219.959 li
f
1 lw
0 lc
336.419 219.959 mo
342.419 213.959 li
336.419 213.959 mo
342.419 219.959 li
@
grestore
gsave
345.757 209.572 mo
352.758 209.572 li
352.758 202.572 li
345.757 202.572 li
345.757 209.572 li
clp
346.257 209.072 mo
352.257 203.072 li
346.257 203.072 mo
352.257 209.072 li
f
1 lw
0 lc
346.257 209.072 mo
352.257 203.072 li
346.257 203.072 mo
352.257 209.072 li
@
grestore
gsave
355.595 199.929 mo
362.595 199.929 li
362.595 192.929 li
355.595 192.929 li
355.595 199.929 li
clp
356.095 199.429 mo
362.095 193.429 li
356.095 193.429 mo
362.095 199.429 li
f
1 lw
0 lc
356.095 199.429 mo
362.095 193.429 li
356.095 193.429 mo
362.095 199.429 li
@
grestore
gsave
365.433 187.797 mo
372.433 187.797 li
372.433 180.797 li
365.433 180.797 li
365.433 187.797 li
clp
365.933 187.297 mo
371.933 181.297 li
365.933 181.297 mo
371.933 187.297 li
f
1 lw
0 lc
365.933 187.297 mo
371.933 181.297 li
365.933 181.297 mo
371.933 187.297 li
@
grestore
gsave
375.271 183.442 mo
382.271 183.442 li
382.271 176.442 li
375.271 176.442 li
375.271 183.442 li
clp
375.771 182.942 mo
381.771 176.942 li
375.771 176.942 mo
381.771 182.942 li
f
1 lw
0 lc
375.771 182.942 mo
381.771 176.942 li
375.771 176.942 mo
381.771 182.942 li
@
grestore
gsave
385.109 181.265 mo
392.109 181.265 li
392.109 174.265 li
385.109 174.265 li
385.109 181.265 li
clp
385.609 180.765 mo
391.609 174.765 li
385.609 174.765 mo
391.609 180.765 li
f
1 lw
0 lc
385.609 180.765 mo
391.609 174.765 li
385.609 174.765 mo
391.609 180.765 li
@
grestore
gsave
394.948 176.91 mo
401.947 176.91 li
401.947 169.91 li
394.948 169.91 li
394.948 176.91 li
clp
395.447 176.41 mo
401.447 170.41 li
395.447 170.41 mo
401.447 176.41 li
f
1 lw
0 lc
395.447 176.41 mo
401.447 170.41 li
395.447 170.41 mo
401.447 176.41 li
@
grestore
gsave
404.786 169.444 mo
411.786 169.444 li
411.786 162.444 li
404.786 162.444 li
404.786 169.444 li
clp
405.285 168.944 mo
411.285 162.944 li
405.285 162.944 mo
411.285 168.944 li
f
1 lw
0 lc
405.285 168.944 mo
411.285 162.944 li
405.285 162.944 mo
411.285 168.944 li
@
grestore
gsave
414.623 160.734 mo
421.624 160.734 li
421.624 153.734 li
414.623 153.734 li
414.623 160.734 li
clp
415.123 160.234 mo
421.123 154.234 li
415.123 154.234 mo
421.123 160.234 li
f
1 lw
0 lc
415.123 160.234 mo
421.123 154.234 li
415.123 154.234 mo
421.123 160.234 li
@
grestore
gsave
424.461 155.446 mo
431.461 155.446 li
431.461 148.446 li
424.461 148.446 li
424.461 155.446 li
clp
424.961 154.946 mo
430.961 148.946 li
424.961 148.946 mo
430.961 154.946 li
f
1 lw
0 lc
424.961 154.946 mo
430.961 148.946 li
424.961 148.946 mo
430.961 154.946 li
@
grestore
gsave
434.299 146.425 mo
441.299 146.425 li
441.299 139.425 li
434.299 139.425 li
434.299 146.425 li
clp
434.799 145.925 mo
440.799 139.925 li
434.799 139.925 mo
440.799 145.925 li
f
1 lw
0 lc
434.799 145.925 mo
440.799 139.925 li
434.799 139.925 mo
440.799 145.925 li
@
grestore
gsave
444.137 138.026 mo
451.137 138.026 li
451.137 131.026 li
444.137 131.026 li
444.137 138.026 li
clp
444.638 137.526 mo
450.638 131.526 li
444.638 131.526 mo
450.638 137.526 li
f
1 lw
0 lc
444.638 137.526 mo
450.638 131.526 li
444.638 131.526 mo
450.638 137.526 li
@
grestore
gsave
453.976 132.116 mo
460.975 132.116 li
460.975 125.116 li
453.976 125.116 li
453.976 132.116 li
clp
454.476 131.616 mo
460.476 125.616 li
454.476 125.616 mo
460.476 131.616 li
f
1 lw
0 lc
454.476 131.616 mo
460.476 125.616 li
454.476 125.616 mo
460.476 131.616 li
@
grestore
gsave
463.814 129.939 mo
470.814 129.939 li
470.814 122.939 li
463.814 122.939 li
463.814 129.939 li
clp
464.314 129.439 mo
470.314 123.439 li
464.314 123.439 mo
470.314 129.439 li
f
1 lw
0 lc
464.314 129.439 mo
470.314 123.439 li
464.314 123.439 mo
470.314 129.439 li
@
grestore
gsave
473.652 126.206 mo
480.652 126.206 li
480.652 119.206 li
473.652 119.206 li
473.652 126.206 li
clp
474.152 125.706 mo
480.152 119.706 li
474.152 119.706 mo
480.152 125.706 li
f
1 lw
0 lc
474.152 125.706 mo
480.152 119.706 li
474.152 119.706 mo
480.152 125.706 li
@
grestore
gsave
483.49 122.473 mo
490.49 122.473 li
490.49 115.473 li
483.49 115.473 li
483.49 122.473 li
clp
483.99 121.973 mo
489.99 115.973 li
483.99 115.973 mo
489.99 121.973 li
f
1 lw
0 lc
483.99 121.973 mo
489.99 115.973 li
483.99 115.973 mo
489.99 121.973 li
@
grestore
gsave
493.327 117.807 mo
500.328 117.807 li
500.328 110.807 li
493.327 110.807 li
493.327 117.807 li
clp
493.828 117.307 mo
499.828 111.307 li
493.828 111.307 mo
499.828 117.307 li
f
1 lw
0 lc
493.828 117.307 mo
499.828 111.307 li
493.828 111.307 mo
499.828 117.307 li
@
grestore
gsave
503.165 114.074 mo
510.165 114.074 li
510.165 107.074 li
503.165 107.074 li
503.165 114.074 li
clp
503.666 113.574 mo
509.666 107.574 li
503.666 107.574 mo
509.666 113.574 li
f
1 lw
0 lc
503.666 113.574 mo
509.666 107.574 li
503.666 107.574 mo
509.666 113.574 li
@
grestore
gsave
513.004 111.275 mo
520.003 111.275 li
520.003 104.275 li
513.004 104.275 li
513.004 111.275 li
clp
513.504 110.775 mo
519.504 104.775 li
513.504 104.775 mo
519.504 110.775 li
f
1 lw
0 lc
513.504 110.775 mo
519.504 104.775 li
513.504 104.775 mo
519.504 110.775 li
@
grestore
gsave
522.842 108.475 mo
529.842 108.475 li
529.842 101.475 li
522.842 101.475 li
522.842 108.475 li
clp
523.342 107.975 mo
529.342 101.975 li
523.342 101.975 mo
529.342 107.975 li
f
1 lw
0 lc
523.342 107.975 mo
529.342 101.975 li
523.342 101.975 mo
529.342 107.975 li
@
grestore
gsave
532.68 107.542 mo
539.68 107.542 li
539.68 100.542 li
532.68 100.542 li
532.68 107.542 li
clp
533.18 107.042 mo
539.18 101.042 li
533.18 101.042 mo
539.18 107.042 li
f
1 lw
0 lc
533.18 107.042 mo
539.18 101.042 li
533.18 101.042 mo
539.18 107.042 li
@
grestore
gsave
542.518 102.565 mo
549.518 102.565 li
549.518 95.5646 li
542.518 95.5646 li
542.518 102.565 li
clp
543.018 102.065 mo
549.018 96.0648 li
543.018 96.0648 mo
549.018 102.065 li
f
1 lw
0 lc
543.018 102.065 mo
549.018 96.0648 li
543.018 96.0648 mo
549.018 102.065 li
@
grestore
gsave
552.356 99.4541 mo
559.356 99.4541 li
559.356 92.4542 li
552.356 92.4542 li
552.356 99.4541 li
clp
552.856 98.9541 mo
558.856 92.9541 li
552.856 92.9541 mo
558.856 98.9541 li
f
1 lw
0 lc
552.856 98.9541 mo
558.856 92.9541 li
552.856 92.9541 mo
558.856 98.9541 li
@
grestore
gsave
562.193 97.2766 mo
569.194 97.2766 li
569.194 90.2767 li
562.193 90.2767 li
562.193 97.2766 li
clp
562.694 96.7766 mo
568.694 90.7766 li
562.694 90.7766 mo
568.694 96.7766 li
f
1 lw
0 lc
562.694 96.7766 mo
568.694 90.7766 li
562.694 90.7766 mo
568.694 96.7766 li
@
grestore
gsave
572.032 94.7881 mo
579.031 94.7881 li
579.031 87.7881 li
572.032 87.7881 li
572.032 94.7881 li
clp
572.532 94.2881 mo
578.532 88.2881 li
572.532 88.2881 mo
578.532 94.2881 li
f
1 lw
0 lc
572.532 94.2881 mo
578.532 88.2881 li
572.532 88.2881 mo
578.532 94.2881 li
@
grestore
gsave
581.87 95.0992 mo
588.87 95.0992 li
588.87 88.0992 li
581.87 88.0992 li
581.87 95.0992 li
clp
582.37 94.5992 mo
588.37 88.5992 li
582.37 88.5992 mo
588.37 94.5992 li
f
1 lw
0 lc
582.37 94.5992 mo
588.37 88.5992 li
582.37 88.5992 mo
588.37 94.5992 li
@
grestore
gsave
591.708 96.0325 mo
598.708 96.0325 li
598.708 89.0322 li
591.708 89.0322 li
591.708 96.0325 li
clp
592.208 95.5324 mo
598.208 89.5324 li
592.208 89.5324 mo
598.208 95.5324 li
f
1 lw
0 lc
592.208 95.5324 mo
598.208 89.5324 li
592.208 89.5324 mo
598.208 95.5324 li
@
grestore
gsave
601.546 95.4103 mo
608.546 95.4103 li
608.546 88.4104 li
601.546 88.4104 li
601.546 95.4103 li
clp
602.046 94.9103 mo
608.046 88.9103 li
602.046 88.9103 mo
608.046 94.9103 li
f
1 lw
0 lc
602.046 94.9103 mo
608.046 88.9103 li
602.046 88.9103 mo
608.046 94.9103 li
@
grestore
gsave
611.384 92.9217 mo
618.384 92.9217 li
618.384 85.9218 li
611.384 85.9218 li
611.384 92.9217 li
clp
611.884 92.4218 mo
617.884 86.4218 li
611.884 86.4218 mo
617.884 92.4218 li
f
1 lw
0 lc
611.884 92.4218 mo
617.884 86.4218 li
611.884 86.4218 mo
617.884 92.4218 li
@
grestore
gsave
621.222 89.8112 mo
628.222 89.8112 li
628.222 82.811 li
621.222 82.811 li
621.222 89.8112 li
clp
621.722 89.3111 mo
627.722 83.3111 li
621.722 83.3111 mo
627.722 89.3111 li
f
1 lw
0 lc
621.722 89.3111 mo
627.722 83.3111 li
621.722 83.3111 mo
627.722 89.3111 li
@
grestore
gsave
631.06 84.8341 mo
638.06 84.8341 li
638.06 77.8341 li
631.06 77.8341 li
631.06 84.8341 li
clp
631.56 84.334 mo
637.56 78.334 li
631.56 78.334 mo
637.56 84.334 li
f
1 lw
0 lc
631.56 84.334 mo
637.56 78.334 li
631.56 78.334 mo
637.56 84.334 li
@
grestore
gsave
640.898 85.4563 mo
647.898 85.4563 li
647.898 78.456 li
640.898 78.456 li
640.898 85.4563 li
clp
641.398 84.9562 mo
647.398 78.9562 li
641.398 78.9562 mo
647.398 84.9562 li
f
1 lw
0 lc
641.398 84.9562 mo
647.398 78.9562 li
641.398 78.9562 mo
647.398 84.9562 li
@
grestore
gsave
650.736 81.1014 mo
657.736 81.1014 li
657.736 74.1014 li
650.736 74.1014 li
650.736 81.1014 li
clp
651.236 80.6013 mo
657.236 74.6013 li
651.236 74.6013 mo
657.236 80.6013 li
f
1 lw
0 lc
651.236 80.6013 mo
657.236 74.6013 li
651.236 74.6013 mo
657.236 80.6013 li
@
grestore
gsave
660.574 81.4125 mo
667.574 81.4125 li
667.574 74.4122 li
660.574 74.4122 li
660.574 81.4125 li
clp
661.074 80.9124 mo
667.074 74.9124 li
661.074 74.9124 mo
667.074 80.9124 li
f
1 lw
0 lc
661.074 80.9124 mo
667.074 74.9124 li
661.074 74.9124 mo
667.074 80.9124 li
@
grestore
gsave
670.412 77.9905 mo
677.412 77.9905 li
677.412 70.9906 li
670.412 70.9906 li
670.412 77.9905 li
clp
670.912 77.4906 mo
676.912 71.4906 li
670.912 71.4906 mo
676.912 77.4906 li
f
1 lw
0 lc
670.912 77.4906 mo
676.912 71.4906 li
670.912 71.4906 mo
676.912 77.4906 li
@
grestore
gsave
680.25 75.1908 mo
687.25 75.1908 li
687.25 68.1909 li
680.25 68.1909 li
680.25 75.1908 li
clp
680.75 74.691 mo
686.75 68.691 li
680.75 68.691 mo
686.75 74.691 li
f
1 lw
0 lc
680.75 74.691 mo
686.75 68.691 li
680.75 68.691 mo
686.75 74.691 li
@
grestore
gsave
690.088 75.502 mo
697.088 75.502 li
697.088 68.502 li
690.088 68.502 li
690.088 75.502 li
clp
690.588 75.0021 mo
696.588 69.0021 li
690.588 69.0021 mo
696.588 75.0021 li
f
1 lw
0 lc
690.588 75.0021 mo
696.588 69.0021 li
690.588 69.0021 mo
696.588 75.0021 li
@
grestore
gsave
699.926 72.3915 mo
706.926 72.3915 li
706.926 65.3915 li
699.926 65.3915 li
699.926 72.3915 li
clp
700.426 71.8914 mo
706.426 65.8914 li
700.426 65.8914 mo
706.426 71.8914 li
f
1 lw
0 lc
700.426 71.8914 mo
706.426 65.8914 li
700.426 65.8914 mo
706.426 71.8914 li
@
grestore
gsave
709.764 67.7254 mo
716.764 67.7254 li
716.764 60.7255 li
709.764 60.7255 li
709.764 67.7254 li
clp
710.264 67.2254 mo
716.264 61.2254 li
710.264 61.2254 mo
716.264 67.2254 li
f
1 lw
0 lc
710.264 67.2254 mo
716.264 61.2254 li
710.264 61.2254 mo
716.264 67.2254 li
@
grestore
gsave
719.602 70.8359 mo
726.602 70.8359 li
726.602 63.836 li
719.602 63.836 li
719.602 70.8359 li
clp
720.102 70.3361 mo
726.102 64.3361 li
720.102 64.3361 mo
726.102 70.3361 li
f
1 lw
0 lc
720.102 70.3361 mo
726.102 64.3361 li
720.102 64.3361 mo
726.102 70.3361 li
@
grestore
gsave
729.44 67.7254 mo
736.44 67.7254 li
736.44 60.7255 li
729.44 60.7255 li
729.44 67.7254 li
clp
729.94 67.2254 mo
735.94 61.2254 li
729.94 61.2254 mo
735.94 67.2254 li
f
1 lw
0 lc
729.94 67.2254 mo
735.94 61.2254 li
729.94 61.2254 mo
735.94 67.2254 li
@
grestore
gsave
739.278 68.9696 mo
746.278 68.9696 li
746.278 61.9696 li
739.278 61.9696 li
739.278 68.9696 li
clp
739.778 68.4697 mo
745.778 62.4697 li
739.778 62.4697 mo
745.778 68.4697 li
f
1 lw
0 lc
739.778 68.4697 mo
745.778 62.4697 li
739.778 62.4697 mo
745.778 68.4697 li
@
grestore
gsave
749.116 68.9696 mo
756.116 68.9696 li
756.116 61.9696 li
749.116 61.9696 li
749.116 68.9696 li
clp
749.616 68.4697 mo
755.616 62.4697 li
749.616 62.4697 mo
755.616 68.4697 li
f
1 lw
0 lc
749.616 68.4697 mo
755.616 62.4697 li
749.616 62.4697 mo
755.616 68.4697 li
@
grestore
gsave
758.954 67.1032 mo
765.954 67.1032 li
765.954 60.1033 li
758.954 60.1033 li
758.954 67.1032 li
clp
759.454 66.6033 mo
765.454 60.6033 li
759.454 60.6033 mo
765.454 66.6033 li
f
1 lw
0 lc
759.454 66.6033 mo
765.454 60.6033 li
759.454 60.6033 mo
765.454 66.6033 li
@
grestore
gsave
768.792 66.481 mo
775.792 66.481 li
775.792 59.481 li
768.792 59.481 li
768.792 66.481 li
clp
769.292 65.9811 mo
775.292 59.9811 li
769.292 59.9811 mo
775.292 65.9811 li
f
1 lw
0 lc
769.292 65.9811 mo
775.292 59.9811 li
769.292 59.9811 mo
775.292 65.9811 li
@
grestore
gsave
778.63 65.2369 mo
785.63 65.2369 li
785.63 58.2369 li
778.63 58.2369 li
778.63 65.2369 li
clp
779.13 64.7369 mo
785.13 58.7369 li
779.13 58.7369 mo
785.13 64.7369 li
f
1 lw
0 lc
779.13 64.7369 mo
785.13 58.7369 li
779.13 58.7369 mo
785.13 64.7369 li
@
grestore
gsave
788.468 63.9927 mo
795.468 63.9927 li
795.468 56.9928 li
788.468 56.9928 li
788.468 63.9927 li
clp
788.968 63.4926 mo
794.968 57.4926 li
788.968 57.4926 mo
794.968 63.4926 li
f
1 lw
0 lc
788.968 63.4926 mo
794.968 57.4926 li
788.968 57.4926 mo
794.968 63.4926 li
@
grestore
gsave
798.306 61.8153 mo
805.306 61.8153 li
805.306 54.815 li
798.306 54.815 li
798.306 61.8153 li
clp
798.806 61.3151 mo
804.806 55.3151 li
798.806 55.3151 mo
804.806 61.3151 li
f
1 lw
0 lc
798.806 61.3151 mo
804.806 55.3151 li
798.806 55.3151 mo
804.806 61.3151 li
@
grestore
gsave
808.144 62.4371 mo
815.144 62.4371 li
815.144 55.4372 li
808.144 55.4372 li
808.144 62.4371 li
clp
808.644 61.9373 mo
814.644 55.9373 li
808.644 55.9373 mo
814.644 61.9373 li
f
1 lw
0 lc
808.644 61.9373 mo
814.644 55.9373 li
808.644 55.9373 mo
814.644 61.9373 li
@
grestore
gsave
817.982 62.126 mo
824.982 62.126 li
824.982 55.1261 li
817.982 55.1261 li
817.982 62.126 li
clp
818.482 61.6262 mo
824.482 55.6262 li
818.482 55.6262 mo
824.482 61.6262 li
f
1 lw
0 lc
818.482 61.6262 mo
824.482 55.6262 li
818.482 55.6262 mo
824.482 61.6262 li
@
grestore
gsave
827.82 62.4371 mo
834.82 62.4371 li
834.82 55.4372 li
827.82 55.4372 li
827.82 62.4371 li
clp
828.32 61.9373 mo
834.32 55.9373 li
828.32 55.9373 mo
834.32 61.9373 li
f
1 lw
0 lc
828.32 61.9373 mo
834.32 55.9373 li
828.32 55.9373 mo
834.32 61.9373 li
@
grestore
gsave
837.658 61.8153 mo
844.658 61.8153 li
844.658 54.815 li
837.658 54.815 li
837.658 61.8153 li
clp
838.158 61.3151 mo
844.158 55.3151 li
838.158 55.3151 mo
844.158 61.3151 li
f
1 lw
0 lc
838.158 61.3151 mo
844.158 55.3151 li
838.158 55.3151 mo
844.158 61.3151 li
@
grestore
gsave
847.496 61.8153 mo
854.496 61.8153 li
854.496 54.815 li
847.496 54.815 li
847.496 61.8153 li
clp
847.996 61.3151 mo
853.996 55.3151 li
847.996 55.3151 mo
853.996 61.3151 li
f
1 lw
0 lc
847.996 61.3151 mo
853.996 55.3151 li
847.996 55.3151 mo
853.996 61.3151 li
@
grestore
gsave
857.334 61.8153 mo
864.334 61.8153 li
864.334 54.815 li
857.334 54.815 li
857.334 61.8153 li
clp
857.834 61.3151 mo
863.834 55.3151 li
857.834 55.3151 mo
863.834 61.3151 li
f
1 lw
0 lc
857.834 61.3151 mo
863.834 55.3151 li
857.834 55.3151 mo
863.834 61.3151 li
@
grestore
gsave
867.172 61.8153 mo
874.172 61.8153 li
874.172 54.815 li
867.172 54.815 li
867.172 61.8153 li
clp
867.672 61.3151 mo
873.672 55.3151 li
867.672 55.3151 mo
873.672 61.3151 li
f
1 lw
0 lc
867.672 61.3151 mo
873.672 55.3151 li
867.672 55.3151 mo
873.672 61.3151 li
@
grestore
gsave
877.01 61.5041 mo
884.01 61.5041 li
884.01 54.5039 li
877.01 54.5039 li
877.01 61.5041 li
clp
877.51 61.004 mo
883.51 55.004 li
877.51 55.004 mo
883.51 61.004 li
f
1 lw
0 lc
877.51 61.004 mo
883.51 55.004 li
877.51 55.004 mo
883.51 61.004 li
@
grestore
gsave
886.848 60.8819 mo
893.848 60.8819 li
893.848 53.882 li
886.848 53.882 li
886.848 60.8819 li
clp
887.348 60.3819 mo
893.348 54.3819 li
887.348 54.3819 mo
893.348 60.3819 li
f
1 lw
0 lc
887.348 60.3819 mo
893.348 54.3819 li
887.348 54.3819 mo
893.348 60.3819 li
@
grestore
gsave
896.686 60.8819 mo
903.686 60.8819 li
903.686 53.882 li
896.686 53.882 li
896.686 60.8819 li
clp
897.186 60.3819 mo
903.186 54.3819 li
897.186 54.3819 mo
903.186 60.3819 li
f
1 lw
0 lc
897.186 60.3819 mo
903.186 54.3819 li
897.186 54.3819 mo
903.186 60.3819 li
@
grestore
gsave
906.524 60.5708 mo
913.524 60.5708 li
913.524 53.5709 li
906.524 53.5709 li
906.524 60.5708 li
clp
907.024 60.0708 mo
913.024 54.0708 li
907.024 54.0708 mo
913.024 60.0708 li
f
1 lw
0 lc
907.024 60.0708 mo
913.024 54.0708 li
907.024 54.0708 mo
913.024 60.0708 li
@
grestore
gsave
916.362 60.2597 mo
923.362 60.2597 li
923.362 53.2597 li
916.362 53.2597 li
916.362 60.2597 li
clp
916.862 59.7597 mo
922.862 53.7597 li
916.862 53.7597 mo
922.862 59.7597 li
f
1 lw
0 lc
916.862 59.7597 mo
922.862 53.7597 li
916.862 53.7597 mo
922.862 59.7597 li
@
grestore
gsave
926.2 60.2597 mo
933.2 60.2597 li
933.2 53.2597 li
926.2 53.2597 li
926.2 60.2597 li
clp
926.7 59.7597 mo
932.7 53.7597 li
926.7 53.7597 mo
932.7 59.7597 li
f
1 lw
0 lc
926.7 59.7597 mo
932.7 53.7597 li
926.7 53.7597 mo
932.7 59.7597 li
@
grestore
gsave
936.038 59.9486 mo
943.038 59.9486 li
943.038 52.9486 li
936.038 52.9486 li
936.038 59.9486 li
clp
936.538 59.4486 mo
942.538 53.4486 li
936.538 53.4486 mo
942.538 59.4486 li
f
1 lw
0 lc
936.538 59.4486 mo
942.538 53.4486 li
936.538 53.4486 mo
942.538 59.4486 li
@
grestore
gsave
945.876 60.2597 mo
952.876 60.2597 li
952.876 53.2597 li
945.876 53.2597 li
945.876 60.2597 li
clp
946.376 59.7597 mo
952.376 53.7597 li
946.376 53.7597 mo
952.376 59.7597 li
f
1 lw
0 lc
946.376 59.7597 mo
952.376 53.7597 li
946.376 53.7597 mo
952.376 59.7597 li
@
grestore
gsave
955.714 60.2597 mo
962.714 60.2597 li
962.714 53.2597 li
955.714 53.2597 li
955.714 60.2597 li
clp
956.214 59.7597 mo
962.214 53.7597 li
956.214 53.7597 mo
962.214 59.7597 li
f
1 lw
0 lc
956.214 59.7597 mo
962.214 53.7597 li
956.214 53.7597 mo
962.214 59.7597 li
@
grestore
gsave
965.552 60.5708 mo
972.552 60.5708 li
972.552 53.5709 li
965.552 53.5709 li
965.552 60.5708 li
clp
966.052 60.0708 mo
972.052 54.0708 li
966.052 54.0708 mo
972.052 60.0708 li
f
1 lw
0 lc
966.052 60.0708 mo
972.052 54.0708 li
966.052 54.0708 mo
972.052 60.0708 li
@
grestore
gsave
975.39 60.5708 mo
982.39 60.5708 li
982.39 53.5709 li
975.39 53.5709 li
975.39 60.5708 li
clp
975.89 60.0708 mo
981.89 54.0708 li
975.89 54.0708 mo
981.89 60.0708 li
f
1 lw
0 lc
975.89 60.0708 mo
981.89 54.0708 li
975.89 54.0708 mo
981.89 60.0708 li
@
grestore
gsave
985.228 60.5708 mo
992.228 60.5708 li
992.228 53.5709 li
985.228 53.5709 li
985.228 60.5708 li
clp
985.728 60.0708 mo
991.728 54.0708 li
985.728 54.0708 mo
991.728 60.0708 li
f
1 lw
0 lc
985.728 60.0708 mo
991.728 54.0708 li
985.728 54.0708 mo
991.728 60.0708 li
@
grestore
gsave
995.066 59.9486 mo
1002.07 59.9486 li
1002.07 52.9486 li
995.066 52.9486 li
995.066 59.9486 li
clp
995.566 59.4487 mo
1001.57 53.4487 li
995.566 53.4487 mo
1001.57 59.4487 li
f
1 lw
0 lc
995.566 59.4487 mo
1001.57 53.4487 li
995.566 53.4487 mo
1001.57 59.4487 li
@
grestore
gsave
1004.9 59.6374 mo
1011.9 59.6374 li
1011.9 52.6375 li
1004.9 52.6375 li
1004.9 59.6374 li
clp
1005.4 59.1376 mo
1011.4 53.1376 li
1005.4 53.1376 mo
1011.4 59.1376 li
f
1 lw
0 lc
1005.4 59.1376 mo
1011.4 53.1376 li
1005.4 53.1376 mo
1011.4 59.1376 li
@
grestore
gsave
1014.74 59.6374 mo
1021.74 59.6374 li
1021.74 52.6375 li
1014.74 52.6375 li
1014.74 59.6374 li
clp
1015.24 59.1376 mo
1021.24 53.1376 li
1015.24 53.1376 mo
1021.24 59.1376 li
f
1 lw
0 lc
1015.24 59.1376 mo
1021.24 53.1376 li
1015.24 53.1376 mo
1021.24 59.1376 li
@
grestore
gsave
1024.58 59.6374 mo
1031.58 59.6374 li
1031.58 52.6375 li
1024.58 52.6375 li
1024.58 59.6374 li
clp
1025.08 59.1376 mo
1031.08 53.1376 li
1025.08 53.1376 mo
1031.08 59.1376 li
f
1 lw
0 lc
1025.08 59.1376 mo
1031.08 53.1376 li
1025.08 53.1376 mo
1031.08 59.1376 li
@
grestore
gsave
1034.42 59.3263 mo
1041.42 59.3263 li
1041.42 52.3264 li
1034.42 52.3264 li
1034.42 59.3263 li
clp
1034.92 58.8265 mo
1040.92 52.8265 li
1034.92 52.8265 mo
1040.92 58.8265 li
f
1 lw
0 lc
1034.92 58.8265 mo
1040.92 52.8265 li
1034.92 52.8265 mo
1040.92 58.8265 li
@
grestore
gsave
1044.26 58.7044 mo
1051.26 58.7044 li
1051.26 51.7045 li
1044.26 51.7045 li
1044.26 58.7044 li
clp
1044.76 58.2043 mo
1050.76 52.2043 li
1044.76 52.2043 mo
1050.76 58.2043 li
f
1 lw
0 lc
1044.76 58.2043 mo
1050.76 52.2043 li
1044.76 52.2043 mo
1050.76 58.2043 li
@
grestore
gsave
1054.09 58.7044 mo
1061.09 58.7044 li
1061.09 51.7045 li
1054.09 51.7045 li
1054.09 58.7044 li
clp
1054.59 58.2043 mo
1060.59 52.2043 li
1054.59 52.2043 mo
1060.59 58.2043 li
f
1 lw
0 lc
1054.59 58.2043 mo
1060.59 52.2043 li
1054.59 52.2043 mo
1060.59 58.2043 li
@
grestore
gsave
1063.93 59.0156 mo
1070.93 59.0156 li
1070.93 52.0153 li
1063.93 52.0153 li
1063.93 59.0156 li
clp
1064.43 58.5154 mo
1070.43 52.5154 li
1064.43 52.5154 mo
1070.43 58.5154 li
f
1 lw
0 lc
1064.43 58.5154 mo
1070.43 52.5154 li
1064.43 52.5154 mo
1070.43 58.5154 li
@
grestore
gsave
1073.77 59.0156 mo
1080.77 59.0156 li
1080.77 52.0153 li
1073.77 52.0153 li
1073.77 59.0156 li
clp
1074.27 58.5154 mo
1080.27 52.5154 li
1074.27 52.5154 mo
1080.27 58.5154 li
f
1 lw
0 lc
1074.27 58.5154 mo
1080.27 52.5154 li
1074.27 52.5154 mo
1080.27 58.5154 li
@
grestore
gsave
1083.61 59.0156 mo
1090.61 59.0156 li
1090.61 52.0153 li
1083.61 52.0153 li
1083.61 59.0156 li
clp
1084.11 58.5154 mo
1090.11 52.5154 li
1084.11 52.5154 mo
1090.11 58.5154 li
f
1 lw
0 lc
1084.11 58.5154 mo
1090.11 52.5154 li
1084.11 52.5154 mo
1090.11 58.5154 li
@
grestore
gsave
1093.45 59.3267 mo
1100.45 59.3267 li
1100.45 52.3264 li
1093.45 52.3264 li
1093.45 59.3267 li
clp
1093.95 58.8265 mo
1099.95 52.8265 li
1093.95 52.8265 mo
1099.95 58.8265 li
f
1 lw
0 lc
1093.95 58.8265 mo
1099.95 52.8265 li
1093.95 52.8265 mo
1099.95 58.8265 li
@
grestore
gsave
1103.28 59.3267 mo
1110.28 59.3267 li
1110.28 52.3264 li
1103.28 52.3264 li
1103.28 59.3267 li
clp
1103.78 58.8265 mo
1109.78 52.8265 li
1103.78 52.8265 mo
1109.78 58.8265 li
f
1 lw
0 lc
1103.78 58.8265 mo
1109.78 52.8265 li
1103.78 52.8265 mo
1109.78 58.8265 li
@
grestore
gsave
1113.12 59.0156 mo
1120.12 59.0156 li
1120.12 52.0153 li
1113.12 52.0153 li
1113.12 59.0156 li
clp
1113.62 58.5154 mo
1119.62 52.5154 li
1113.62 52.5154 mo
1119.62 58.5154 li
f
1 lw
0 lc
1113.62 58.5154 mo
1119.62 52.5154 li
1113.62 52.5154 mo
1119.62 58.5154 li
@
grestore
gsave
1122.96 59.0156 mo
1129.96 59.0156 li
1129.96 52.0153 li
1122.96 52.0153 li
1122.96 59.0156 li
clp
1123.46 58.5154 mo
1129.46 52.5154 li
1123.46 52.5154 mo
1129.46 58.5154 li
f
1 lw
0 lc
1123.46 58.5154 mo
1129.46 52.5154 li
1123.46 52.5154 mo
1129.46 58.5154 li
@
grestore
.8 lw
0 lj
103.799 554.934 mo
103.799 17.7206 li
@
1175.16 554.934 mo
1175.16 17.7206 li
@
103.799 554.934 mo
1175.16 554.934 li
@
103.799 17.7206 mo
1175.16 17.7206 li
@
1168.16 549.434 mo
716.737 549.434 li
716.147 549.432 715.8 549.29 715.591 549.081 cv
715.381 548.872 715.239 548.524 715.237 547.934 cv
715.237 412.809 li
715.239 412.219 715.381 411.872 715.591 411.663 cv
715.8 411.453 716.147 411.311 716.737 411.309 cv
1168.16 411.309 li
1168.75 411.311 1169.1 411.453 1169.31 411.663 cv
1169.51 411.872 1169.66 412.219 1169.66 412.809 cv
1169.66 547.934 li
1169.66 548.524 1169.51 548.871 1169.31 549.081 cv
1169.1 549.29 1168.75 549.432 1168.16 549.434 cv
0 0 0 0 cmyk
f
1168.17 550.434 mo
1168.17 550.434 1168.16 550.434 1168.16 550.434 cv
716.737 550.434 li
716.734 550.434 716.73 550.434 716.727 550.434 cv
715.988 550.434 715.339 550.243 714.883 549.788 cv
714.426 549.33 714.235 548.677 714.237 547.934 cv
714.237 412.809 li
714.235 412.066 714.426 411.413 714.883 410.956 cv
715.339 410.501 715.988 410.309 716.727 410.309 cv
716.73 410.309 716.734 410.309 716.737 410.309 cv
1168.16 410.309 li
1168.16 410.309 1168.17 410.309 1168.17 410.309 cv
1168.91 410.309 1169.56 410.501 1170.01 410.956 cv
1170.47 411.413 1170.66 412.066 1170.66 412.809 cv
1170.66 547.934 li
1170.66 548.677 1170.47 549.33 1170.01 549.788 cv
1169.56 550.243 1168.91 550.434 1168.17 550.434 cv
716.737 549.434 mo
1168.16 549.434 li
1168.75 549.432 1169.1 549.29 1169.31 549.081 cv
1169.51 548.871 1169.66 548.524 1169.66 547.934 cv
1169.66 412.809 li
1169.66 412.219 1169.51 411.872 1169.31 411.663 cv
1169.1 411.453 1168.75 411.311 1168.16 411.309 cv
716.737 411.309 li
716.147 411.311 715.8 411.453 715.591 411.663 cv
715.381 411.872 715.239 412.219 715.237 412.809 cv
715.237 547.934 li
715.239 548.524 715.381 548.872 715.591 549.081 cv
715.8 549.29 716.147 549.432 716.737 549.434 cv
716.737 549.434 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
718.737 434.106 mo
738.737 434.106 li
0 1 1 0 cmyk
@
752.647 418.166 mo
752.647 435.176 li
756.217 435.176 li
759.217 435.176 761.437 434.516 762.847 433.136 cv
764.227 431.756 764.947 429.596 764.947 426.656 cv
764.947 423.716 764.227 421.586 762.847 420.206 cv
761.437 418.856 759.217 418.166 756.217 418.166 cv
752.647 418.166 li
749.677 415.736 mo
755.767 415.736 li
759.997 415.736 763.117 416.636 765.097 418.376 cv
767.077 420.146 768.067 422.906 768.067 426.656 cv
768.067 430.436 767.047 433.196 765.067 434.966 cv
763.087 436.736 759.967 437.606 755.767 437.606 cv
749.677 437.606 li
749.677 415.736 li
1 /0 /CSD get_res sepcs
1 sep
f
775.747 427.166 mo
775.747 435.176 li
780.487 435.176 li
782.077 435.176 783.247 434.846 784.027 434.186 cv
784.777 433.526 785.167 432.536 785.167 431.156 cv
785.167 429.806 784.777 428.816 784.027 428.156 cv
783.247 427.496 782.077 427.166 780.487 427.166 cv
775.747 427.166 li
775.747 418.166 mo
775.747 424.766 li
780.127 424.766 li
781.567 424.766 782.617 424.496 783.337 423.956 cv
784.057 423.416 784.417 422.606 784.417 421.466 cv
784.417 420.386 784.057 419.546 783.337 419.006 cv
782.617 418.466 781.567 418.166 780.127 418.166 cv
775.747 418.166 li
772.777 415.736 mo
780.337 415.736 li
782.587 415.736 784.327 416.216 785.557 417.146 cv
786.757 418.106 787.387 419.426 787.387 421.136 cv
787.387 422.486 787.057 423.566 786.427 424.346 cv
785.797 425.126 784.897 425.636 783.697 425.816 cv
785.137 426.146 786.277 426.806 787.087 427.796 cv
787.867 428.786 788.287 430.016 788.287 431.486 cv
788.287 433.466 787.597 434.966 786.277 436.016 cv
784.957 437.096 783.067 437.606 780.637 437.606 cv
772.777 437.606 li
772.777 415.736 li
f
793.357 415.736 mo
797.347 415.736 li
807.037 434.036 li
807.037 415.736 li
809.917 415.736 li
809.917 437.606 li
805.927 437.606 li
796.237 419.306 li
796.237 437.606 li
793.357 437.606 li
793.357 415.736 li
f
831.697 414.836 mo
830.377 417.116 829.417 419.336 828.787 421.526 cv
828.127 423.716 827.827 425.936 827.827 428.186 cv
827.827 430.466 828.127 432.686 828.787 434.876 cv
829.417 437.096 830.377 439.286 831.697 441.536 cv
829.357 441.536 li
827.887 439.226 826.777 437.006 826.057 434.786 cv
825.337 432.566 824.977 430.376 824.977 428.186 cv
824.977 426.026 825.337 423.836 826.057 421.616 cv
826.777 419.396 827.857 417.146 829.357 414.836 cv
831.697 414.836 li
f
834.037 415.736 mo
852.517 415.736 li
852.517 418.226 li
844.747 418.226 li
844.747 437.606 li
841.777 437.606 li
841.777 418.226 li
834.037 418.226 li
834.037 415.736 li
f
864.757 423.716 mo
864.457 423.536 864.127 423.416 863.767 423.326 cv
863.407 423.266 863.017 423.206 862.597 423.206 cv
861.067 423.206 859.897 423.716 859.087 424.706 cv
858.247 425.696 857.857 427.106 857.857 428.966 cv
857.857 437.606 li
855.157 437.606 li
855.157 421.196 li
857.857 421.196 li
857.857 423.746 li
858.397 422.756 859.147 422.006 860.047 421.526 cv
860.947 421.046 862.057 420.806 863.377 420.806 cv
863.557 420.806 863.767 420.836 864.007 420.836 cv
864.217 420.866 864.457 420.896 864.757 420.956 cv
864.757 423.716 li
f
875.047 429.356 mo
872.857 429.356 871.357 429.626 870.517 430.106 cv
869.677 430.616 869.257 431.456 869.257 432.656 cv
869.257 433.616 869.557 434.396 870.187 434.936 cv
870.817 435.506 871.687 435.776 872.767 435.776 cv
874.267 435.776 875.467 435.266 876.367 434.186 cv
877.267 433.136 877.717 431.726 877.717 429.956 cv
877.717 429.356 li
875.047 429.356 li
880.417 428.246 mo
880.417 437.606 li
877.717 437.606 li
877.717 435.116 li
877.087 436.136 876.307 436.856 875.407 437.306 cv
874.507 437.756 873.367 437.996 872.047 437.996 cv
870.367 437.996 869.017 437.546 868.027 436.616 cv
867.037 435.686 866.557 434.426 866.557 432.836 cv
866.557 431.006 867.157 429.626 868.417 428.666 cv
869.647 427.736 871.477 427.256 873.937 427.256 cv
877.717 427.256 li
877.717 426.986 li
877.717 425.756 877.297 424.796 876.487 424.106 cv
875.677 423.446 874.537 423.086 873.067 423.086 cv
872.107 423.086 871.207 423.206 870.307 423.446 cv
869.407 423.686 868.567 424.016 867.757 424.436 cv
867.757 421.946 li
868.717 421.586 869.677 421.286 870.607 421.106 cv
871.537 420.926 872.437 420.806 873.337 420.806 cv
875.707 420.806 877.477 421.436 878.647 422.666 cv
879.817 423.896 880.417 425.756 880.417 428.246 cv
f
885.967 421.196 mo
888.667 421.196 li
888.667 437.606 li
885.967 437.606 li
885.967 421.196 li
885.967 414.806 mo
888.667 414.806 li
888.667 418.226 li
885.967 418.226 li
885.967 414.806 li
f
907.957 427.706 mo
907.957 437.606 li
905.257 437.606 li
905.257 427.796 li
905.257 426.236 904.927 425.096 904.327 424.316 cv
903.727 423.536 902.827 423.146 901.627 423.146 cv
900.157 423.146 899.017 423.626 898.177 424.556 cv
897.337 425.486 896.917 426.746 896.917 428.336 cv
896.917 437.606 li
894.217 437.606 li
894.217 421.196 li
896.917 421.196 li
896.917 423.746 li
897.547 422.786 898.297 422.036 899.197 421.556 cv
900.067 421.076 901.087 420.806 902.227 420.806 cv
904.087 420.806 905.527 421.406 906.487 422.576 cv
907.447 423.746 907.957 425.456 907.957 427.706 cv
f
913.327 421.196 mo
916.027 421.196 li
916.027 437.606 li
913.327 437.606 li
913.327 421.196 li
913.327 414.806 mo
916.027 414.806 li
916.027 418.226 li
913.327 418.226 li
913.327 414.806 li
f
935.317 427.706 mo
935.317 437.606 li
932.617 437.606 li
932.617 427.796 li
932.617 426.236 932.287 425.096 931.687 424.316 cv
931.087 423.536 930.187 423.146 928.987 423.146 cv
927.517 423.146 926.377 423.626 925.537 424.556 cv
924.697 425.486 924.277 426.746 924.277 428.336 cv
924.277 437.606 li
921.577 437.606 li
921.577 421.196 li
924.277 421.196 li
924.277 423.746 li
924.907 422.786 925.657 422.036 926.557 421.556 cv
927.427 421.076 928.447 420.806 929.587 420.806 cv
931.447 420.806 932.887 421.406 933.847 422.576 cv
934.807 423.746 935.317 425.456 935.317 427.706 cv
f
951.487 429.206 mo
951.487 427.286 951.067 425.756 950.287 424.676 cv
949.477 423.596 948.337 423.056 946.897 423.056 cv
945.457 423.056 944.317 423.596 943.507 424.676 cv
942.697 425.756 942.307 427.286 942.307 429.206 cv
942.307 431.156 942.697 432.656 943.507 433.736 cv
944.317 434.816 945.457 435.356 946.897 435.356 cv
948.337 435.356 949.477 434.816 950.287 433.736 cv
951.067 432.656 951.487 431.156 951.487 429.206 cv
954.187 435.566 mo
954.187 438.326 953.557 440.396 952.327 441.776 cv
951.067 443.126 949.177 443.816 946.627 443.816 cv
945.667 443.816 944.797 443.726 943.957 443.606 cv
943.117 443.456 942.277 443.246 941.497 442.946 cv
941.497 440.336 li
942.277 440.756 943.057 441.056 943.837 441.266 cv
944.617 441.476 945.397 441.596 946.207 441.596 cv
947.947 441.596 949.267 441.116 950.167 440.216 cv
951.037 439.286 951.487 437.906 951.487 436.046 cv
951.487 434.726 li
950.917 435.686 950.197 436.406 949.327 436.886 cv
948.457 437.366 947.437 437.606 946.237 437.606 cv
944.197 437.606 942.577 436.856 941.347 435.326 cv
940.117 433.796 939.517 431.756 939.517 429.206 cv
939.517 426.686 940.117 424.646 941.347 423.116 cv
942.577 421.586 944.197 420.806 946.237 420.806 cv
947.437 420.806 948.457 421.046 949.327 421.526 cv
950.197 422.006 950.917 422.726 951.487 423.686 cv
951.487 421.196 li
954.187 421.196 li
954.187 435.566 li
f
960.427 433.886 mo
963.517 433.886 li
963.517 436.406 li
961.117 441.056 li
959.227 441.056 li
960.427 436.406 li
960.427 433.886 li
f
992.047 416.456 mo
992.047 419.336 li
990.906 418.796 989.856 418.406 988.866 418.136 cv
987.846 417.896 986.886 417.746 985.986 417.746 cv
984.366 417.746 983.106 418.076 982.236 418.676 cv
981.366 419.306 980.946 420.206 980.946 421.346 cv
980.946 422.306 981.216 423.056 981.816 423.536 cv
982.386 424.046 983.496 424.436 985.116 424.736 cv
986.917 425.096 li
989.106 425.516 990.726 426.266 991.776 427.316 cv
992.826 428.396 993.366 429.806 993.366 431.576 cv
993.366 433.706 992.646 435.296 991.236 436.376 cv
989.797 437.456 987.726 437.996 984.996 437.996 cv
983.946 437.996 982.836 437.876 981.667 437.666 cv
980.496 437.456 979.297 437.126 978.066 436.646 cv
978.066 433.586 li
979.266 434.276 980.436 434.786 981.576 435.116 cv
982.716 435.476 983.856 435.626 984.996 435.626 cv
986.677 435.626 987.966 435.296 988.896 434.636 cv
989.797 433.976 990.276 433.046 990.276 431.786 cv
990.276 430.706 989.946 429.866 989.286 429.266 cv
988.626 428.666 987.547 428.216 986.047 427.916 cv
984.246 427.556 li
982.026 427.136 980.436 426.446 979.446 425.486 cv
978.456 424.556 977.976 423.266 977.976 421.586 cv
977.976 419.666 978.636 418.136 980.016 417.026 cv
981.366 415.916 983.256 415.346 985.656 415.346 cv
986.677 415.346 987.696 415.436 988.776 415.616 cv
989.826 415.796 990.906 416.096 992.047 416.456 cv
f
997.866 421.196 mo
1000.57 421.196 li
1000.57 437.606 li
997.866 437.606 li
997.866 421.196 li
997.866 414.806 mo
1000.57 414.806 li
1000.57 418.226 li
997.866 418.226 li
997.866 414.806 li
f
1017.01 429.206 mo
1017.01 427.286 1016.59 425.756 1015.81 424.676 cv
1015 423.596 1013.86 423.056 1012.42 423.056 cv
1010.98 423.056 1009.84 423.596 1009.03 424.676 cv
1008.22 425.756 1007.83 427.286 1007.83 429.206 cv
1007.83 431.156 1008.22 432.656 1009.03 433.736 cv
1009.84 434.816 1010.98 435.356 1012.42 435.356 cv
1013.86 435.356 1015 434.816 1015.81 433.736 cv
1016.59 432.656 1017.01 431.156 1017.01 429.206 cv
1019.71 435.566 mo
1019.71 438.326 1019.08 440.396 1017.85 441.776 cv
1016.59 443.126 1014.7 443.816 1012.15 443.816 cv
1011.19 443.816 1010.32 443.726 1009.48 443.606 cv
1008.64 443.456 1007.8 443.246 1007.02 442.946 cv
1007.02 440.336 li
1007.8 440.756 1008.58 441.056 1009.36 441.266 cv
1010.14 441.476 1010.92 441.596 1011.73 441.596 cv
1013.47 441.596 1014.79 441.116 1015.69 440.216 cv
1016.56 439.286 1017.01 437.906 1017.01 436.046 cv
1017.01 434.726 li
1016.44 435.686 1015.72 436.406 1014.85 436.886 cv
1013.98 437.366 1012.96 437.606 1011.76 437.606 cv
1009.72 437.606 1008.1 436.856 1006.87 435.326 cv
1005.64 433.796 1005.04 431.756 1005.04 429.206 cv
1005.04 426.686 1005.64 424.646 1006.87 423.116 cv
1008.1 421.586 1009.72 420.806 1011.76 420.806 cv
1012.96 420.806 1013.98 421.046 1014.85 421.526 cv
1015.72 422.006 1016.44 422.726 1017.01 423.686 cv
1017.01 421.196 li
1019.71 421.196 li
1019.71 435.566 li
f
1038.04 424.346 mo
1038.7 423.146 1039.51 422.276 1040.44 421.676 cv
1041.37 421.106 1042.48 420.806 1043.77 420.806 cv
1045.45 420.806 1046.77 421.406 1047.7 422.606 cv
1048.63 423.806 1049.11 425.516 1049.11 427.706 cv
1049.11 437.606 li
1046.41 437.606 li
1046.41 427.796 li
1046.41 426.236 1046.11 425.066 1045.57 424.286 cv
1045 423.536 1044.16 423.146 1043.02 423.146 cv
1041.61 423.146 1040.5 423.626 1039.69 424.556 cv
1038.88 425.486 1038.49 426.746 1038.49 428.336 cv
1038.49 437.606 li
1035.79 437.606 li
1035.79 427.796 li
1035.79 426.236 1035.49 425.066 1034.95 424.286 cv
1034.38 423.536 1033.51 423.146 1032.37 423.146 cv
1030.99 423.146 1029.88 423.626 1029.07 424.556 cv
1028.26 425.486 1027.87 426.746 1027.87 428.336 cv
1027.87 437.606 li
1025.17 437.606 li
1025.17 421.196 li
1027.87 421.196 li
1027.87 423.746 li
1028.47 422.756 1029.22 422.006 1030.09 421.526 cv
1030.93 421.046 1031.95 420.806 1033.15 420.806 cv
1034.35 420.806 1035.34 421.106 1036.18 421.706 cv
1037.02 422.306 1037.62 423.206 1038.04 424.346 cv
f
1060.84 423.086 mo
1059.4 423.086 1058.26 423.656 1057.42 424.796 cv
1056.58 425.936 1056.16 427.466 1056.16 429.416 cv
1056.16 431.396 1056.55 432.926 1057.39 434.066 cv
1058.23 435.206 1059.37 435.746 1060.84 435.746 cv
1062.28 435.746 1063.42 435.206 1064.26 434.066 cv
1065.1 432.926 1065.52 431.396 1065.52 429.416 cv
1065.52 427.496 1065.1 425.936 1064.26 424.796 cv
1063.42 423.656 1062.28 423.086 1060.84 423.086 cv
1060.84 420.806 mo
1063.18 420.806 1065.01 421.586 1066.36 423.086 cv
1067.68 424.616 1068.37 426.716 1068.37 429.416 cv
1068.37 432.116 1067.68 434.216 1066.36 435.716 cv
1065.01 437.246 1063.18 437.996 1060.84 437.996 cv
1058.47 437.996 1056.61 437.246 1055.29 435.716 cv
1053.97 434.216 1053.31 432.116 1053.31 429.416 cv
1053.31 426.716 1053.97 424.616 1055.29 423.086 cv
1056.61 421.586 1058.47 420.806 1060.84 420.806 cv
f
1072.84 421.196 mo
1075.54 421.196 li
1075.54 437.606 li
1072.84 437.606 li
1072.84 421.196 li
1072.84 414.806 mo
1075.54 414.806 li
1075.54 418.226 li
1072.84 418.226 li
1072.84 414.806 li
f
1091.98 423.686 mo
1091.98 414.806 li
1094.68 414.806 li
1094.68 437.606 li
1091.98 437.606 li
1091.98 435.146 li
1091.41 436.136 1090.69 436.856 1089.82 437.306 cv
1088.95 437.756 1087.93 437.996 1086.73 437.996 cv
1084.75 437.996 1083.13 437.216 1081.87 435.656 cv
1080.61 434.096 1080.01 431.996 1080.01 429.416 cv
1080.01 426.836 1080.61 424.766 1081.87 423.176 cv
1083.13 421.616 1084.75 420.806 1086.73 420.806 cv
1087.93 420.806 1088.95 421.046 1089.82 421.526 cv
1090.69 422.006 1091.41 422.726 1091.98 423.686 cv
1082.8 429.416 mo
1082.8 431.396 1083.19 432.956 1084 434.096 cv
1084.81 435.236 1085.95 435.776 1087.39 435.776 cv
1088.8 435.776 1089.91 435.236 1090.75 434.096 cv
1091.56 432.956 1091.98 431.396 1091.98 429.416 cv
1091.98 427.436 1091.56 425.906 1090.75 424.766 cv
1089.91 423.626 1088.8 423.056 1087.39 423.056 cv
1085.95 423.056 1084.81 423.626 1084 424.766 cv
1083.19 425.906 1082.8 427.436 1082.8 429.416 cv
f
1099.81 414.836 mo
1102.15 414.836 li
1103.59 417.146 1104.7 419.396 1105.42 421.616 cv
1106.14 423.836 1106.53 426.026 1106.53 428.186 cv
1106.53 430.376 1106.14 432.566 1105.42 434.786 cv
1104.7 437.006 1103.59 439.226 1102.15 441.536 cv
1099.81 441.536 li
1101.1 439.286 1102.06 437.096 1102.72 434.876 cv
1103.35 432.686 1103.68 430.466 1103.68 428.186 cv
1103.68 425.936 1103.35 423.716 1102.72 421.526 cv
1102.06 419.336 1101.1 417.116 1099.81 414.836 cv
f
718.737 468.137 mo
738.737 468.137 li
0 1 1 0 cmyk
@
725.737 471.137 mo
731.737 465.137 li
725.737 465.137 mo
731.737 471.137 li
f
1 lw
0 lc
725.737 471.137 mo
731.737 465.137 li
725.737 465.137 mo
731.737 471.137 li
@
752.647 452.197 mo
752.647 469.207 li
756.217 469.207 li
759.217 469.207 761.437 468.547 762.847 467.167 cv
764.227 465.787 764.947 463.627 764.947 460.687 cv
764.947 457.747 764.227 455.617 762.847 454.237 cv
761.437 452.887 759.217 452.197 756.217 452.197 cv
752.647 452.197 li
749.677 449.767 mo
755.767 449.767 li
759.997 449.767 763.117 450.667 765.097 452.407 cv
767.077 454.177 768.067 456.937 768.067 460.687 cv
768.067 464.467 767.047 467.227 765.067 468.997 cv
763.087 470.767 759.967 471.637 755.767 471.637 cv
749.677 471.637 li
749.677 449.767 li
1 /0 /CSD get_res sepcs
1 sep
f
775.747 461.197 mo
775.747 469.207 li
780.487 469.207 li
782.077 469.207 783.247 468.877 784.027 468.217 cv
784.777 467.557 785.167 466.567 785.167 465.187 cv
785.167 463.837 784.777 462.847 784.027 462.187 cv
783.247 461.527 782.077 461.197 780.487 461.197 cv
775.747 461.197 li
775.747 452.197 mo
775.747 458.797 li
780.127 458.797 li
781.567 458.797 782.617 458.527 783.337 457.987 cv
784.057 457.447 784.417 456.637 784.417 455.497 cv
784.417 454.417 784.057 453.577 783.337 453.037 cv
782.617 452.497 781.567 452.197 780.127 452.197 cv
775.747 452.197 li
772.777 449.767 mo
780.337 449.767 li
782.587 449.767 784.327 450.247 785.557 451.177 cv
786.757 452.137 787.387 453.457 787.387 455.167 cv
787.387 456.517 787.057 457.597 786.427 458.377 cv
785.797 459.157 784.897 459.667 783.697 459.847 cv
785.137 460.177 786.277 460.837 787.087 461.827 cv
787.867 462.817 788.287 464.047 788.287 465.517 cv
788.287 467.497 787.597 468.997 786.277 470.047 cv
784.957 471.127 783.067 471.637 780.637 471.637 cv
772.777 471.637 li
772.777 449.767 li
f
793.357 449.767 mo
797.347 449.767 li
807.037 468.067 li
807.037 449.767 li
809.917 449.767 li
809.917 471.637 li
805.927 471.637 li
796.237 453.337 li
796.237 471.637 li
793.357 471.637 li
793.357 449.767 li
f
831.697 448.867 mo
830.377 451.147 829.417 453.367 828.787 455.557 cv
828.127 457.747 827.827 459.967 827.827 462.217 cv
827.827 464.497 828.127 466.717 828.787 468.907 cv
829.417 471.127 830.377 473.317 831.697 475.567 cv
829.357 475.567 li
827.887 473.257 826.777 471.037 826.057 468.817 cv
825.337 466.597 824.977 464.407 824.977 462.217 cv
824.977 460.057 825.337 457.867 826.057 455.647 cv
826.777 453.427 827.857 451.177 829.357 448.867 cv
831.697 448.867 li
f
834.037 449.767 mo
852.517 449.767 li
852.517 452.257 li
844.747 452.257 li
844.747 471.637 li
841.777 471.637 li
841.777 452.257 li
834.037 452.257 li
834.037 449.767 li
f
869.287 462.757 mo
869.287 464.077 li
856.897 464.077 li
857.017 465.937 857.557 467.377 858.577 468.337 cv
859.567 469.297 860.947 469.777 862.747 469.777 cv
863.767 469.777 864.787 469.657 865.747 469.417 cv
866.707 469.177 867.697 468.787 868.657 468.247 cv
868.657 470.797 li
867.697 471.217 866.707 471.547 865.687 471.727 cv
864.667 471.907 863.617 472.027 862.597 472.027 cv
859.957 472.027 857.887 471.277 856.357 469.777 cv
854.827 468.277 854.077 466.207 854.077 463.597 cv
854.077 460.927 854.797 458.797 856.237 457.207 cv
857.677 455.647 859.657 454.837 862.117 454.837 cv
864.337 454.837 866.077 455.557 867.367 456.967 cv
868.627 458.407 869.287 460.327 869.287 462.757 cv
866.587 461.977 mo
866.557 460.507 866.137 459.337 865.357 458.437 cv
864.547 457.567 863.467 457.117 862.147 457.117 cv
860.647 457.117 859.447 457.567 858.547 458.407 cv
857.647 459.247 857.107 460.447 856.987 461.977 cv
866.587 461.977 li
f
884.167 455.707 mo
884.167 458.257 li
883.387 457.897 882.607 457.597 881.797 457.387 cv
880.957 457.207 880.117 457.087 879.247 457.087 cv
877.897 457.087 876.877 457.297 876.217 457.717 cv
875.557 458.137 875.227 458.737 875.227 459.547 cv
875.227 460.177 875.467 460.657 875.947 461.017 cv
876.427 461.377 877.387 461.737 878.827 462.037 cv
879.757 462.247 li
881.677 462.667 883.027 463.267 883.837 463.987 cv
884.617 464.737 885.037 465.787 885.037 467.107 cv
885.037 468.637 884.437 469.837 883.237 470.707 cv
882.037 471.607 880.357 472.027 878.257 472.027 cv
877.357 472.027 876.457 471.937 875.497 471.787 cv
874.537 471.637 873.547 471.397 872.497 471.037 cv
872.497 468.247 li
873.487 468.787 874.477 469.177 875.437 469.417 cv
876.397 469.687 877.357 469.807 878.317 469.807 cv
879.577 469.807 880.567 469.597 881.257 469.177 cv
881.917 468.757 882.277 468.127 882.277 467.317 cv
882.277 466.597 882.007 466.027 881.527 465.637 cv
881.047 465.247 879.967 464.857 878.287 464.497 cv
877.357 464.287 li
875.677 463.927 874.447 463.387 873.727 462.667 cv
872.977 461.947 872.617 460.957 872.617 459.667 cv
872.617 458.137 873.157 456.937 874.237 456.097 cv
875.317 455.257 876.877 454.837 878.917 454.837 cv
879.907 454.837 880.837 454.927 881.737 455.077 cv
882.607 455.227 883.417 455.437 884.167 455.707 cv
f
891.997 450.577 mo
891.997 455.227 li
897.547 455.227 li
897.547 457.327 li
891.997 457.327 li
891.997 466.237 li
891.997 467.587 892.177 468.457 892.537 468.817 cv
892.897 469.207 893.647 469.387 894.787 469.387 cv
897.547 469.387 li
897.547 471.637 li
894.787 471.637 li
892.687 471.637 891.247 471.247 890.467 470.467 cv
889.687 469.687 889.297 468.277 889.297 466.237 cv
889.297 457.327 li
887.317 457.327 li
887.317 455.227 li
889.297 455.227 li
889.297 450.577 li
891.997 450.577 li
f
901.087 455.227 mo
903.787 455.227 li
903.787 471.637 li
901.087 471.637 li
901.087 455.227 li
901.087 448.837 mo
903.787 448.837 li
903.787 452.257 li
901.087 452.257 li
901.087 448.837 li
f
923.077 461.737 mo
923.077 471.637 li
920.377 471.637 li
920.377 461.827 li
920.377 460.267 920.047 459.127 919.447 458.347 cv
918.847 457.567 917.947 457.177 916.747 457.177 cv
915.277 457.177 914.137 457.657 913.297 458.587 cv
912.457 459.517 912.037 460.777 912.037 462.367 cv
912.037 471.637 li
909.337 471.637 li
909.337 455.227 li
912.037 455.227 li
912.037 457.777 li
912.667 456.817 913.417 456.067 914.317 455.587 cv
915.187 455.107 916.207 454.837 917.347 454.837 cv
919.207 454.837 920.647 455.437 921.607 456.607 cv
922.567 457.777 923.077 459.487 923.077 461.737 cv
f
939.247 463.237 mo
939.247 461.317 938.827 459.787 938.047 458.707 cv
937.237 457.627 936.097 457.087 934.657 457.087 cv
933.217 457.087 932.077 457.627 931.267 458.707 cv
930.457 459.787 930.067 461.317 930.067 463.237 cv
930.067 465.187 930.457 466.687 931.267 467.767 cv
932.077 468.847 933.217 469.387 934.657 469.387 cv
936.097 469.387 937.237 468.847 938.047 467.767 cv
938.827 466.687 939.247 465.187 939.247 463.237 cv
941.947 469.597 mo
941.947 472.357 941.317 474.427 940.087 475.807 cv
938.827 477.157 936.937 477.847 934.387 477.847 cv
933.427 477.847 932.557 477.757 931.717 477.637 cv
930.877 477.487 930.037 477.277 929.257 476.977 cv
929.257 474.367 li
930.037 474.787 930.817 475.087 931.597 475.297 cv
932.377 475.507 933.157 475.627 933.967 475.627 cv
935.707 475.627 937.027 475.147 937.927 474.247 cv
938.797 473.317 939.247 471.937 939.247 470.077 cv
939.247 468.757 li
938.677 469.717 937.957 470.437 937.087 470.917 cv
936.217 471.397 935.197 471.637 933.997 471.637 cv
931.957 471.637 930.337 470.887 929.107 469.357 cv
927.877 467.827 927.277 465.787 927.277 463.237 cv
927.277 460.717 927.877 458.677 929.107 457.147 cv
930.337 455.617 931.957 454.837 933.997 454.837 cv
935.197 454.837 936.217 455.077 937.087 455.557 cv
937.957 456.037 938.677 456.757 939.247 457.717 cv
939.247 455.227 li
941.947 455.227 li
941.947 469.597 li
f
948.187 467.917 mo
951.277 467.917 li
951.277 470.437 li
948.877 475.087 li
946.987 475.087 li
948.187 470.437 li
948.187 467.917 li
f
979.806 450.487 mo
979.806 453.367 li
978.666 452.827 977.616 452.437 976.626 452.167 cv
975.606 451.927 974.646 451.777 973.746 451.777 cv
972.126 451.777 970.866 452.107 969.996 452.707 cv
969.126 453.337 968.706 454.237 968.706 455.377 cv
968.706 456.337 968.976 457.087 969.576 457.567 cv
970.146 458.077 971.256 458.467 972.876 458.767 cv
974.676 459.127 li
976.866 459.547 978.486 460.297 979.536 461.347 cv
980.586 462.427 981.126 463.837 981.126 465.607 cv
981.126 467.737 980.406 469.327 978.996 470.407 cv
977.556 471.487 975.486 472.027 972.756 472.027 cv
971.706 472.027 970.596 471.907 969.426 471.697 cv
968.256 471.487 967.056 471.157 965.826 470.677 cv
965.826 467.617 li
967.026 468.307 968.196 468.817 969.336 469.147 cv
970.476 469.507 971.616 469.657 972.756 469.657 cv
974.436 469.657 975.726 469.327 976.656 468.667 cv
977.556 468.007 978.036 467.077 978.036 465.817 cv
978.036 464.737 977.706 463.897 977.046 463.297 cv
976.386 462.697 975.306 462.247 973.806 461.947 cv
972.006 461.587 li
969.786 461.167 968.196 460.477 967.206 459.517 cv
966.216 458.587 965.736 457.297 965.736 455.617 cv
965.736 453.697 966.396 452.167 967.776 451.057 cv
969.126 449.947 971.016 449.377 973.416 449.377 cv
974.436 449.377 975.456 449.467 976.536 449.647 cv
977.586 449.827 978.666 450.127 979.806 450.487 cv
f
985.626 455.227 mo
988.326 455.227 li
988.326 471.637 li
985.626 471.637 li
985.626 455.227 li
985.626 448.837 mo
988.326 448.837 li
988.326 452.257 li
985.626 452.257 li
985.626 448.837 li
f
1004.77 463.237 mo
1004.77 461.317 1004.35 459.787 1003.57 458.707 cv
1002.76 457.627 1001.62 457.087 1000.18 457.087 cv
998.736 457.087 997.596 457.627 996.786 458.707 cv
995.976 459.787 995.586 461.317 995.586 463.237 cv
995.586 465.187 995.976 466.687 996.786 467.767 cv
997.596 468.847 998.736 469.387 1000.18 469.387 cv
1001.62 469.387 1002.76 468.847 1003.57 467.767 cv
1004.35 466.687 1004.77 465.187 1004.77 463.237 cv
1007.47 469.597 mo
1007.47 472.357 1006.84 474.427 1005.61 475.807 cv
1004.35 477.157 1002.46 477.847 999.906 477.847 cv
998.946 477.847 998.076 477.757 997.236 477.637 cv
996.396 477.487 995.556 477.277 994.776 476.977 cv
994.776 474.367 li
995.556 474.787 996.336 475.087 997.116 475.297 cv
997.896 475.507 998.676 475.627 999.486 475.627 cv
1001.23 475.627 1002.55 475.147 1003.45 474.247 cv
1004.32 473.317 1004.77 471.937 1004.77 470.077 cv
1004.77 468.757 li
1004.2 469.717 1003.48 470.437 1002.61 470.917 cv
1001.74 471.397 1000.72 471.637 999.516 471.637 cv
997.476 471.637 995.856 470.887 994.626 469.357 cv
993.396 467.827 992.796 465.787 992.796 463.237 cv
992.796 460.717 993.396 458.677 994.626 457.147 cv
995.856 455.617 997.476 454.837 999.516 454.837 cv
1000.72 454.837 1001.74 455.077 1002.61 455.557 cv
1003.48 456.037 1004.2 456.757 1004.77 457.717 cv
1004.77 455.227 li
1007.47 455.227 li
1007.47 469.597 li
f
1025.8 458.377 mo
1026.46 457.177 1027.27 456.307 1028.2 455.707 cv
1029.13 455.137 1030.24 454.837 1031.53 454.837 cv
1033.21 454.837 1034.53 455.437 1035.46 456.637 cv
1036.39 457.837 1036.87 459.547 1036.87 461.737 cv
1036.87 471.637 li
1034.17 471.637 li
1034.17 461.827 li
1034.17 460.267 1033.87 459.097 1033.33 458.317 cv
1032.76 457.567 1031.92 457.177 1030.78 457.177 cv
1029.37 457.177 1028.26 457.657 1027.45 458.587 cv
1026.64 459.517 1026.25 460.777 1026.25 462.367 cv
1026.25 471.637 li
1023.55 471.637 li
1023.55 461.827 li
1023.55 460.267 1023.25 459.097 1022.71 458.317 cv
1022.14 457.567 1021.27 457.177 1020.13 457.177 cv
1018.75 457.177 1017.64 457.657 1016.83 458.587 cv
1016.02 459.517 1015.63 460.777 1015.63 462.367 cv
1015.63 471.637 li
1012.93 471.637 li
1012.93 455.227 li
1015.63 455.227 li
1015.63 457.777 li
1016.23 456.787 1016.98 456.037 1017.85 455.557 cv
1018.69 455.077 1019.71 454.837 1020.91 454.837 cv
1022.11 454.837 1023.1 455.137 1023.94 455.737 cv
1024.78 456.337 1025.38 457.237 1025.8 458.377 cv
f
1048.6 457.117 mo
1047.16 457.117 1046.02 457.687 1045.18 458.827 cv
1044.34 459.967 1043.92 461.497 1043.92 463.447 cv
1043.92 465.427 1044.31 466.957 1045.15 468.097 cv
1045.99 469.237 1047.13 469.777 1048.6 469.777 cv
1050.04 469.777 1051.18 469.237 1052.02 468.097 cv
1052.86 466.957 1053.28 465.427 1053.28 463.447 cv
1053.28 461.527 1052.86 459.967 1052.02 458.827 cv
1051.18 457.687 1050.04 457.117 1048.6 457.117 cv
1048.6 454.837 mo
1050.94 454.837 1052.77 455.617 1054.12 457.117 cv
1055.44 458.647 1056.13 460.747 1056.13 463.447 cv
1056.13 466.147 1055.44 468.247 1054.12 469.747 cv
1052.77 471.277 1050.94 472.027 1048.6 472.027 cv
1046.23 472.027 1044.37 471.277 1043.05 469.747 cv
1041.73 468.247 1041.07 466.147 1041.07 463.447 cv
1041.07 460.747 1041.73 458.647 1043.05 457.117 cv
1044.37 455.617 1046.23 454.837 1048.6 454.837 cv
f
1060.6 455.227 mo
1063.3 455.227 li
1063.3 471.637 li
1060.6 471.637 li
1060.6 455.227 li
1060.6 448.837 mo
1063.3 448.837 li
1063.3 452.257 li
1060.6 452.257 li
1060.6 448.837 li
f
1079.74 457.717 mo
1079.74 448.837 li
1082.44 448.837 li
1082.44 471.637 li
1079.74 471.637 li
1079.74 469.177 li
1079.17 470.167 1078.45 470.887 1077.58 471.337 cv
1076.71 471.787 1075.69 472.027 1074.49 472.027 cv
1072.51 472.027 1070.89 471.247 1069.63 469.687 cv
1068.37 468.127 1067.77 466.027 1067.77 463.447 cv
1067.77 460.867 1068.37 458.797 1069.63 457.207 cv
1070.89 455.647 1072.51 454.837 1074.49 454.837 cv
1075.69 454.837 1076.71 455.077 1077.58 455.557 cv
1078.45 456.037 1079.17 456.757 1079.74 457.717 cv
1070.56 463.447 mo
1070.56 465.427 1070.95 466.987 1071.76 468.127 cv
1072.57 469.267 1073.71 469.807 1075.15 469.807 cv
1076.56 469.807 1077.67 469.267 1078.51 468.127 cv
1079.32 466.987 1079.74 465.427 1079.74 463.447 cv
1079.74 461.467 1079.32 459.937 1078.51 458.797 cv
1077.67 457.657 1076.56 457.087 1075.15 457.087 cv
1073.71 457.087 1072.57 457.657 1071.76 458.797 cv
1070.95 459.937 1070.56 461.467 1070.56 463.447 cv
f
1087.57 448.867 mo
1089.91 448.867 li
1091.35 451.177 1092.46 453.427 1093.18 455.647 cv
1093.9 457.867 1094.29 460.057 1094.29 462.217 cv
1094.29 464.407 1093.9 466.597 1093.18 468.817 cv
1092.46 471.037 1091.35 473.257 1089.91 475.567 cv
1087.57 475.567 li
1088.86 473.317 1089.82 471.127 1090.48 468.907 cv
1091.11 466.717 1091.44 464.497 1091.44 462.217 cv
1091.44 459.967 1091.11 457.747 1090.48 455.557 cv
1089.82 453.367 1088.86 451.147 1087.57 448.867 cv
f
1.5 lw
2 lc
718.737 502.169 mo
738.737 502.169 li
@
762.787 484.519 mo
762.787 487.399 li
761.647 486.859 760.597 486.469 759.607 486.199 cv
758.587 485.959 757.627 485.809 756.727 485.809 cv
755.107 485.809 753.847 486.139 752.977 486.739 cv
752.107 487.369 751.687 488.269 751.687 489.409 cv
751.687 490.369 751.957 491.119 752.557 491.599 cv
753.127 492.109 754.237 492.499 755.857 492.799 cv
757.657 493.159 li
759.847 493.579 761.467 494.329 762.517 495.379 cv
763.567 496.459 764.107 497.869 764.107 499.639 cv
764.107 501.769 763.387 503.359 761.977 504.439 cv
760.537 505.519 758.467 506.059 755.737 506.059 cv
754.687 506.059 753.577 505.939 752.407 505.729 cv
751.237 505.519 750.037 505.189 748.807 504.709 cv
748.807 501.649 li
750.007 502.339 751.177 502.849 752.317 503.179 cv
753.457 503.539 754.597 503.689 755.737 503.689 cv
757.417 503.689 758.707 503.359 759.637 502.699 cv
760.537 502.039 761.017 501.109 761.017 499.849 cv
761.017 498.769 760.687 497.929 760.027 497.329 cv
759.367 496.729 758.287 496.279 756.787 495.979 cv
754.987 495.619 li
752.767 495.199 751.177 494.509 750.187 493.549 cv
749.197 492.619 748.717 491.329 748.717 489.649 cv
748.717 487.729 749.377 486.199 750.757 485.089 cv
752.107 483.979 753.997 483.409 756.397 483.409 cv
757.417 483.409 758.437 483.499 759.517 483.679 cv
760.567 483.859 761.647 484.159 762.787 484.519 cv
f
781.837 484.519 mo
781.837 487.399 li
780.697 486.859 779.647 486.469 778.657 486.199 cv
777.637 485.959 776.677 485.809 775.777 485.809 cv
774.157 485.809 772.897 486.139 772.027 486.739 cv
771.157 487.369 770.737 488.269 770.737 489.409 cv
770.737 490.369 771.007 491.119 771.607 491.599 cv
772.177 492.109 773.287 492.499 774.907 492.799 cv
776.707 493.159 li
778.897 493.579 780.517 494.329 781.567 495.379 cv
782.617 496.459 783.157 497.869 783.157 499.639 cv
783.157 501.769 782.437 503.359 781.027 504.439 cv
779.587 505.519 777.517 506.059 774.787 506.059 cv
773.737 506.059 772.627 505.939 771.457 505.729 cv
770.287 505.519 769.087 505.189 767.857 504.709 cv
767.857 501.649 li
769.057 502.339 770.227 502.849 771.367 503.179 cv
772.507 503.539 773.647 503.689 774.787 503.689 cv
776.467 503.689 777.757 503.359 778.687 502.699 cv
779.587 502.039 780.067 501.109 780.067 499.849 cv
780.067 498.769 779.737 497.929 779.077 497.329 cv
778.417 496.729 777.337 496.279 775.837 495.979 cv
774.037 495.619 li
771.817 495.199 770.227 494.509 769.237 493.549 cv
768.247 492.619 767.767 491.329 767.767 489.649 cv
767.767 487.729 768.427 486.199 769.807 485.089 cv
771.157 483.979 773.047 483.409 775.447 483.409 cv
776.467 483.409 777.487 483.499 778.567 483.679 cv
779.617 483.859 780.697 484.159 781.837 484.519 cv
f
790.747 486.229 mo
790.747 503.239 li
794.317 503.239 li
797.317 503.239 799.537 502.579 800.947 501.199 cv
802.327 499.819 803.047 497.659 803.047 494.719 cv
803.047 491.779 802.327 489.649 800.947 488.269 cv
799.537 486.919 797.317 486.229 794.317 486.229 cv
790.747 486.229 li
787.777 483.799 mo
793.867 483.799 li
798.097 483.799 801.217 484.699 803.197 486.439 cv
805.177 488.209 806.167 490.969 806.167 494.719 cv
806.167 498.499 805.147 501.259 803.167 503.029 cv
801.187 504.799 798.067 505.669 793.867 505.669 cv
787.777 505.669 li
787.777 483.799 li
f
813.847 495.229 mo
813.847 503.239 li
818.587 503.239 li
820.177 503.239 821.347 502.909 822.127 502.249 cv
822.877 501.589 823.267 500.599 823.267 499.219 cv
823.267 497.869 822.877 496.879 822.127 496.219 cv
821.347 495.559 820.177 495.229 818.587 495.229 cv
813.847 495.229 li
813.847 486.229 mo
813.847 492.829 li
818.227 492.829 li
819.667 492.829 820.717 492.559 821.437 492.019 cv
822.157 491.479 822.517 490.669 822.517 489.529 cv
822.517 488.449 822.157 487.609 821.437 487.069 cv
820.717 486.529 819.667 486.229 818.227 486.229 cv
813.847 486.229 li
810.877 483.799 mo
818.437 483.799 li
820.687 483.799 822.427 484.279 823.657 485.209 cv
824.857 486.169 825.487 487.489 825.487 489.199 cv
825.487 490.549 825.157 491.629 824.527 492.409 cv
823.897 493.189 822.997 493.699 821.797 493.879 cv
823.237 494.209 824.377 494.869 825.187 495.859 cv
825.967 496.849 826.387 498.079 826.387 499.549 cv
826.387 501.529 825.697 503.029 824.377 504.079 cv
823.057 505.159 821.167 505.669 818.737 505.669 cv
810.877 505.669 li
810.877 483.799 li
f
831.457 483.799 mo
835.447 483.799 li
845.137 502.099 li
845.137 483.799 li
848.017 483.799 li
848.017 505.669 li
844.027 505.669 li
834.337 487.369 li
834.337 505.669 li
831.457 505.669 li
831.457 483.799 li
f
869.797 482.899 mo
868.477 485.179 867.517 487.399 866.887 489.589 cv
866.227 491.779 865.927 493.999 865.927 496.249 cv
865.927 498.529 866.227 500.749 866.887 502.939 cv
867.517 505.159 868.477 507.349 869.797 509.599 cv
867.457 509.599 li
865.987 507.289 864.877 505.069 864.157 502.849 cv
863.437 500.629 863.077 498.439 863.077 496.249 cv
863.077 494.089 863.437 491.899 864.157 489.679 cv
864.877 487.459 865.957 485.209 867.457 482.899 cv
869.797 482.899 li
f
872.137 483.799 mo
890.617 483.799 li
890.617 486.289 li
882.847 486.289 li
882.847 505.669 li
879.877 505.669 li
879.877 486.289 li
872.137 486.289 li
872.137 483.799 li
f
902.857 491.779 mo
902.557 491.599 902.227 491.479 901.867 491.389 cv
901.506 491.329 901.117 491.269 900.696 491.269 cv
899.167 491.269 897.996 491.779 897.186 492.769 cv
896.346 493.759 895.956 495.169 895.956 497.029 cv
895.956 505.669 li
893.256 505.669 li
893.256 489.259 li
895.956 489.259 li
895.956 491.809 li
896.496 490.819 897.246 490.069 898.146 489.589 cv
899.047 489.109 900.156 488.869 901.477 488.869 cv
901.656 488.869 901.867 488.899 902.107 488.899 cv
902.316 488.929 902.557 488.959 902.857 489.019 cv
902.857 491.779 li
f
913.146 497.419 mo
910.956 497.419 909.456 497.689 908.616 498.169 cv
907.776 498.679 907.356 499.519 907.356 500.719 cv
907.356 501.679 907.656 502.459 908.286 502.999 cv
908.916 503.569 909.786 503.839 910.866 503.839 cv
912.366 503.839 913.566 503.329 914.466 502.249 cv
915.366 501.199 915.816 499.789 915.816 498.019 cv
915.816 497.419 li
913.146 497.419 li
918.516 496.309 mo
918.516 505.669 li
915.816 505.669 li
915.816 503.179 li
915.186 504.199 914.406 504.919 913.506 505.369 cv
912.606 505.819 911.466 506.059 910.146 506.059 cv
908.466 506.059 907.116 505.609 906.126 504.679 cv
905.136 503.749 904.656 502.489 904.656 500.899 cv
904.656 499.069 905.256 497.689 906.516 496.729 cv
907.746 495.799 909.576 495.319 912.036 495.319 cv
915.816 495.319 li
915.816 495.049 li
915.816 493.819 915.396 492.859 914.586 492.169 cv
913.776 491.509 912.636 491.149 911.166 491.149 cv
910.206 491.149 909.306 491.269 908.406 491.509 cv
907.506 491.749 906.666 492.079 905.856 492.499 cv
905.856 490.009 li
906.816 489.649 907.776 489.349 908.706 489.169 cv
909.636 488.989 910.536 488.869 911.436 488.869 cv
913.806 488.869 915.576 489.499 916.746 490.729 cv
917.916 491.959 918.516 493.819 918.516 496.309 cv
f
924.067 489.259 mo
926.767 489.259 li
926.767 505.669 li
924.067 505.669 li
924.067 489.259 li
924.067 482.869 mo
926.767 482.869 li
926.767 486.289 li
924.067 486.289 li
924.067 482.869 li
f
946.057 495.769 mo
946.057 505.669 li
943.357 505.669 li
943.357 495.859 li
943.357 494.299 943.027 493.159 942.427 492.379 cv
941.827 491.599 940.927 491.209 939.727 491.209 cv
938.257 491.209 937.117 491.689 936.277 492.619 cv
935.437 493.549 935.017 494.809 935.017 496.399 cv
935.017 505.669 li
932.317 505.669 li
932.317 489.259 li
935.017 489.259 li
935.017 491.809 li
935.647 490.849 936.397 490.099 937.297 489.619 cv
938.167 489.139 939.187 488.869 940.327 488.869 cv
942.187 488.869 943.627 489.469 944.587 490.639 cv
945.547 491.809 946.057 493.519 946.057 495.769 cv
f
962.227 497.269 mo
962.227 495.349 961.807 493.819 961.027 492.739 cv
960.217 491.659 959.077 491.119 957.637 491.119 cv
956.197 491.119 955.057 491.659 954.247 492.739 cv
953.437 493.819 953.047 495.349 953.047 497.269 cv
953.047 499.219 953.437 500.719 954.247 501.799 cv
955.057 502.879 956.197 503.419 957.637 503.419 cv
959.077 503.419 960.217 502.879 961.027 501.799 cv
961.807 500.719 962.227 499.219 962.227 497.269 cv
964.927 503.629 mo
964.927 506.389 964.297 508.459 963.067 509.839 cv
961.807 511.189 959.917 511.879 957.367 511.879 cv
956.407 511.879 955.537 511.789 954.697 511.669 cv
953.857 511.519 953.017 511.309 952.237 511.009 cv
952.237 508.399 li
953.017 508.819 953.797 509.119 954.577 509.329 cv
955.357 509.539 956.137 509.659 956.947 509.659 cv
958.687 509.659 960.007 509.179 960.907 508.279 cv
961.777 507.349 962.227 505.969 962.227 504.109 cv
962.227 502.789 li
961.657 503.749 960.937 504.469 960.067 504.949 cv
959.197 505.429 958.177 505.669 956.977 505.669 cv
954.937 505.669 953.317 504.919 952.087 503.389 cv
950.857 501.859 950.257 499.819 950.257 497.269 cv
950.257 494.749 950.857 492.709 952.087 491.179 cv
953.317 489.649 954.937 488.869 956.977 488.869 cv
958.177 488.869 959.197 489.109 960.067 489.589 cv
960.937 490.069 961.657 490.789 962.227 491.749 cv
962.227 489.259 li
964.927 489.259 li
964.927 503.629 li
f
970.476 489.259 mo
973.177 489.259 li
973.177 505.669 li
970.476 505.669 li
970.476 489.259 li
970.476 482.869 mo
973.177 482.869 li
973.177 486.289 li
970.476 486.289 li
970.476 482.869 li
f
992.466 495.769 mo
992.466 505.669 li
989.766 505.669 li
989.766 495.859 li
989.766 494.299 989.436 493.159 988.836 492.379 cv
988.236 491.599 987.336 491.209 986.136 491.209 cv
984.667 491.209 983.526 491.689 982.686 492.619 cv
981.846 493.549 981.427 494.809 981.427 496.399 cv
981.427 505.669 li
978.726 505.669 li
978.726 489.259 li
981.427 489.259 li
981.427 491.809 li
982.057 490.849 982.807 490.099 983.706 489.619 cv
984.576 489.139 985.596 488.869 986.736 488.869 cv
988.596 488.869 990.036 489.469 990.996 490.639 cv
991.956 491.809 992.466 493.519 992.466 495.769 cv
f
1008.64 497.269 mo
1008.64 495.349 1008.22 493.819 1007.44 492.739 cv
1006.63 491.659 1005.49 491.119 1004.05 491.119 cv
1002.61 491.119 1001.47 491.659 1000.66 492.739 cv
999.847 493.819 999.457 495.349 999.457 497.269 cv
999.457 499.219 999.847 500.719 1000.66 501.799 cv
1001.47 502.879 1002.61 503.419 1004.05 503.419 cv
1005.49 503.419 1006.63 502.879 1007.44 501.799 cv
1008.22 500.719 1008.64 499.219 1008.64 497.269 cv
1011.34 503.629 mo
1011.34 506.389 1010.71 508.459 1009.48 509.839 cv
1008.22 511.189 1006.33 511.879 1003.78 511.879 cv
1002.82 511.879 1001.95 511.789 1001.11 511.669 cv
1000.27 511.519 999.427 511.309 998.647 511.009 cv
998.647 508.399 li
999.427 508.819 1000.21 509.119 1000.99 509.329 cv
1001.77 509.539 1002.55 509.659 1003.36 509.659 cv
1005.1 509.659 1006.42 509.179 1007.32 508.279 cv
1008.19 507.349 1008.64 505.969 1008.64 504.109 cv
1008.64 502.789 li
1008.07 503.749 1007.35 504.469 1006.48 504.949 cv
1005.61 505.429 1004.59 505.669 1003.39 505.669 cv
1001.35 505.669 999.727 504.919 998.497 503.389 cv
997.267 501.859 996.667 499.819 996.667 497.269 cv
996.667 494.749 997.267 492.709 998.497 491.179 cv
999.727 489.649 1001.35 488.869 1003.39 488.869 cv
1004.59 488.869 1005.61 489.109 1006.48 489.589 cv
1007.35 490.069 1008.07 490.789 1008.64 491.749 cv
1008.64 489.259 li
1011.34 489.259 li
1011.34 503.629 li
f
1017.58 501.949 mo
1020.67 501.949 li
1020.67 504.469 li
1018.27 509.119 li
1016.38 509.119 li
1017.58 504.469 li
1017.58 501.949 li
f
1049.2 484.519 mo
1049.2 487.399 li
1048.06 486.859 1047.01 486.469 1046.02 486.199 cv
1045 485.959 1044.04 485.809 1043.14 485.809 cv
1041.52 485.809 1040.26 486.139 1039.39 486.739 cv
1038.52 487.369 1038.1 488.269 1038.1 489.409 cv
1038.1 490.369 1038.37 491.119 1038.97 491.599 cv
1039.54 492.109 1040.65 492.499 1042.27 492.799 cv
1044.07 493.159 li
1046.26 493.579 1047.88 494.329 1048.93 495.379 cv
1049.98 496.459 1050.52 497.869 1050.52 499.639 cv
1050.52 501.769 1049.8 503.359 1048.39 504.439 cv
1046.95 505.519 1044.88 506.059 1042.15 506.059 cv
1041.1 506.059 1039.99 505.939 1038.82 505.729 cv
1037.65 505.519 1036.45 505.189 1035.22 504.709 cv
1035.22 501.649 li
1036.42 502.339 1037.59 502.849 1038.73 503.179 cv
1039.87 503.539 1041.01 503.689 1042.15 503.689 cv
1043.83 503.689 1045.12 503.359 1046.05 502.699 cv
1046.95 502.039 1047.43 501.109 1047.43 499.849 cv
1047.43 498.769 1047.1 497.929 1046.44 497.329 cv
1045.78 496.729 1044.7 496.279 1043.2 495.979 cv
1041.4 495.619 li
1039.18 495.199 1037.59 494.509 1036.6 493.549 cv
1035.61 492.619 1035.13 491.329 1035.13 489.649 cv
1035.13 487.729 1035.79 486.199 1037.17 485.089 cv
1038.52 483.979 1040.41 483.409 1042.81 483.409 cv
1043.83 483.409 1044.85 483.499 1045.93 483.679 cv
1046.98 483.859 1048.06 484.159 1049.2 484.519 cv
f
1055.02 489.259 mo
1057.72 489.259 li
1057.72 505.669 li
1055.02 505.669 li
1055.02 489.259 li
1055.02 482.869 mo
1057.72 482.869 li
1057.72 486.289 li
1055.02 486.289 li
1055.02 482.869 li
f
1074.16 497.269 mo
1074.16 495.349 1073.74 493.819 1072.96 492.739 cv
1072.15 491.659 1071.01 491.119 1069.57 491.119 cv
1068.13 491.119 1066.99 491.659 1066.18 492.739 cv
1065.37 493.819 1064.98 495.349 1064.98 497.269 cv
1064.98 499.219 1065.37 500.719 1066.18 501.799 cv
1066.99 502.879 1068.13 503.419 1069.57 503.419 cv
1071.01 503.419 1072.15 502.879 1072.96 501.799 cv
1073.74 500.719 1074.16 499.219 1074.16 497.269 cv
1076.86 503.629 mo
1076.86 506.389 1076.23 508.459 1075 509.839 cv
1073.74 511.189 1071.85 511.879 1069.3 511.879 cv
1068.34 511.879 1067.47 511.789 1066.63 511.669 cv
1065.79 511.519 1064.95 511.309 1064.17 511.009 cv
1064.17 508.399 li
1064.95 508.819 1065.73 509.119 1066.51 509.329 cv
1067.29 509.539 1068.07 509.659 1068.88 509.659 cv
1070.62 509.659 1071.94 509.179 1072.84 508.279 cv
1073.71 507.349 1074.16 505.969 1074.16 504.109 cv
1074.16 502.789 li
1073.59 503.749 1072.87 504.469 1072 504.949 cv
1071.13 505.429 1070.11 505.669 1068.91 505.669 cv
1066.87 505.669 1065.25 504.919 1064.02 503.389 cv
1062.79 501.859 1062.19 499.819 1062.19 497.269 cv
1062.19 494.749 1062.79 492.709 1064.02 491.179 cv
1065.25 489.649 1066.87 488.869 1068.91 488.869 cv
1070.11 488.869 1071.13 489.109 1072 489.589 cv
1072.87 490.069 1073.59 490.789 1074.16 491.749 cv
1074.16 489.259 li
1076.86 489.259 li
1076.86 503.629 li
f
1095.19 492.409 mo
1095.85 491.209 1096.66 490.339 1097.59 489.739 cv
1098.52 489.169 1099.63 488.869 1100.92 488.869 cv
1102.6 488.869 1103.92 489.469 1104.85 490.669 cv
1105.78 491.869 1106.26 493.579 1106.26 495.769 cv
1106.26 505.669 li
1103.56 505.669 li
1103.56 495.859 li
1103.56 494.299 1103.26 493.129 1102.72 492.349 cv
1102.15 491.599 1101.31 491.209 1100.17 491.209 cv
1098.76 491.209 1097.65 491.689 1096.84 492.619 cv
1096.03 493.549 1095.64 494.809 1095.64 496.399 cv
1095.64 505.669 li
1092.94 505.669 li
1092.94 495.859 li
1092.94 494.299 1092.64 493.129 1092.1 492.349 cv
1091.53 491.599 1090.66 491.209 1089.52 491.209 cv
1088.14 491.209 1087.03 491.689 1086.22 492.619 cv
1085.41 493.549 1085.02 494.809 1085.02 496.399 cv
1085.02 505.669 li
1082.32 505.669 li
1082.32 489.259 li
1085.02 489.259 li
1085.02 491.809 li
1085.62 490.819 1086.37 490.069 1087.24 489.589 cv
1088.08 489.109 1089.1 488.869 1090.3 488.869 cv
1091.5 488.869 1092.49 489.169 1093.33 489.769 cv
1094.17 490.369 1094.77 491.269 1095.19 492.409 cv
f
1117.99 491.149 mo
1116.55 491.149 1115.41 491.719 1114.57 492.859 cv
1113.73 493.999 1113.31 495.529 1113.31 497.479 cv
1113.31 499.459 1113.7 500.989 1114.54 502.129 cv
1115.38 503.269 1116.52 503.809 1117.99 503.809 cv
1119.43 503.809 1120.57 503.269 1121.41 502.129 cv
1122.25 500.989 1122.67 499.459 1122.67 497.479 cv
1122.67 495.559 1122.25 493.999 1121.41 492.859 cv
1120.57 491.719 1119.43 491.149 1117.99 491.149 cv
1117.99 488.869 mo
1120.33 488.869 1122.16 489.649 1123.51 491.149 cv
1124.83 492.679 1125.52 494.779 1125.52 497.479 cv
1125.52 500.179 1124.83 502.279 1123.51 503.779 cv
1122.16 505.309 1120.33 506.059 1117.99 506.059 cv
1115.62 506.059 1113.76 505.309 1112.44 503.779 cv
1111.12 502.279 1110.46 500.179 1110.46 497.479 cv
1110.46 494.779 1111.12 492.679 1112.44 491.149 cv
1113.76 489.649 1115.62 488.869 1117.99 488.869 cv
f
1129.99 489.259 mo
1132.69 489.259 li
1132.69 505.669 li
1129.99 505.669 li
1129.99 489.259 li
1129.99 482.869 mo
1132.69 482.869 li
1132.69 486.289 li
1129.99 486.289 li
1129.99 482.869 li
f
1149.13 491.749 mo
1149.13 482.869 li
1151.83 482.869 li
1151.83 505.669 li
1149.13 505.669 li
1149.13 503.209 li
1148.56 504.199 1147.84 504.919 1146.97 505.369 cv
1146.1 505.819 1145.08 506.059 1143.88 506.059 cv
1141.9 506.059 1140.28 505.279 1139.02 503.719 cv
1137.76 502.159 1137.16 500.059 1137.16 497.479 cv
1137.16 494.899 1137.76 492.829 1139.02 491.239 cv
1140.28 489.679 1141.9 488.869 1143.88 488.869 cv
1145.08 488.869 1146.1 489.109 1146.97 489.589 cv
1147.84 490.069 1148.56 490.789 1149.13 491.749 cv
1139.95 497.479 mo
1139.95 499.459 1140.34 501.019 1141.15 502.159 cv
1141.96 503.299 1143.1 503.839 1144.54 503.839 cv
1145.95 503.839 1147.06 503.299 1147.9 502.159 cv
1148.71 501.019 1149.13 499.459 1149.13 497.479 cv
1149.13 495.499 1148.71 493.969 1147.9 492.829 cv
1147.06 491.689 1145.95 491.119 1144.54 491.119 cv
1143.1 491.119 1141.96 491.689 1141.15 492.829 cv
1140.34 493.969 1139.95 495.499 1139.95 497.479 cv
f
1156.96 482.899 mo
1159.3 482.899 li
1160.74 485.209 1161.85 487.459 1162.57 489.679 cv
1163.29 491.899 1163.68 494.089 1163.68 496.249 cv
1163.68 498.439 1163.29 500.629 1162.57 502.849 cv
1161.85 505.069 1160.74 507.289 1159.3 509.599 cv
1156.96 509.599 li
1158.25 507.349 1159.21 505.159 1159.87 502.939 cv
1160.5 500.749 1160.83 498.529 1160.83 496.249 cv
1160.83 493.999 1160.5 491.779 1159.87 489.589 cv
1159.21 487.399 1158.25 485.179 1156.96 482.899 cv
f
718.737 536.2 mo
738.737 536.2 li
@
725.737 539.2 mo
731.737 533.2 li
725.737 533.2 mo
731.737 539.2 li
f
1 lw
0 lc
725.737 539.2 mo
731.737 533.2 li
725.737 533.2 mo
731.737 539.2 li
@
762.787 518.55 mo
762.787 521.43 li
761.647 520.89 760.597 520.5 759.607 520.23 cv
758.587 519.99 757.627 519.84 756.727 519.84 cv
755.107 519.84 753.847 520.17 752.977 520.77 cv
752.107 521.4 751.687 522.3 751.687 523.44 cv
751.687 524.4 751.957 525.15 752.557 525.63 cv
753.127 526.14 754.237 526.53 755.857 526.83 cv
757.657 527.19 li
759.847 527.61 761.467 528.36 762.517 529.41 cv
763.567 530.49 764.107 531.9 764.107 533.67 cv
764.107 535.8 763.387 537.39 761.977 538.47 cv
760.537 539.55 758.467 540.09 755.737 540.09 cv
754.687 540.09 753.577 539.97 752.407 539.76 cv
751.237 539.55 750.037 539.22 748.807 538.74 cv
748.807 535.68 li
750.007 536.37 751.177 536.88 752.317 537.21 cv
753.457 537.57 754.597 537.72 755.737 537.72 cv
757.417 537.72 758.707 537.39 759.637 536.73 cv
760.537 536.07 761.017 535.14 761.017 533.88 cv
761.017 532.8 760.687 531.96 760.027 531.36 cv
759.367 530.76 758.287 530.31 756.787 530.01 cv
754.987 529.65 li
752.767 529.23 751.177 528.54 750.187 527.58 cv
749.197 526.65 748.717 525.36 748.717 523.68 cv
748.717 521.76 749.377 520.23 750.757 519.12 cv
752.107 518.01 753.997 517.44 756.397 517.44 cv
757.417 517.44 758.437 517.53 759.517 517.71 cv
760.567 517.89 761.647 518.19 762.787 518.55 cv
f
781.837 518.55 mo
781.837 521.43 li
780.697 520.89 779.647 520.5 778.657 520.23 cv
777.637 519.99 776.677 519.84 775.777 519.84 cv
774.157 519.84 772.897 520.17 772.027 520.77 cv
771.157 521.4 770.737 522.3 770.737 523.44 cv
770.737 524.4 771.007 525.15 771.607 525.63 cv
772.177 526.14 773.287 526.53 774.907 526.83 cv
776.707 527.19 li
778.897 527.61 780.517 528.36 781.567 529.41 cv
782.617 530.49 783.157 531.9 783.157 533.67 cv
783.157 535.8 782.437 537.39 781.027 538.47 cv
779.587 539.55 777.517 540.09 774.787 540.09 cv
773.737 540.09 772.627 539.97 771.457 539.76 cv
770.287 539.55 769.087 539.22 767.857 538.74 cv
767.857 535.68 li
769.057 536.37 770.227 536.88 771.367 537.21 cv
772.507 537.57 773.647 537.72 774.787 537.72 cv
776.467 537.72 777.757 537.39 778.687 536.73 cv
779.587 536.07 780.067 535.14 780.067 533.88 cv
780.067 532.8 779.737 531.96 779.077 531.36 cv
778.417 530.76 777.337 530.31 775.837 530.01 cv
774.037 529.65 li
771.817 529.23 770.227 528.54 769.237 527.58 cv
768.247 526.65 767.767 525.36 767.767 523.68 cv
767.767 521.76 768.427 520.23 769.807 519.12 cv
771.157 518.01 773.047 517.44 775.447 517.44 cv
776.467 517.44 777.487 517.53 778.567 517.71 cv
779.617 517.89 780.697 518.19 781.837 518.55 cv
f
790.747 520.26 mo
790.747 537.27 li
794.317 537.27 li
797.317 537.27 799.537 536.61 800.947 535.23 cv
802.327 533.85 803.047 531.69 803.047 528.75 cv
803.047 525.81 802.327 523.68 800.947 522.3 cv
799.537 520.95 797.317 520.26 794.317 520.26 cv
790.747 520.26 li
787.777 517.83 mo
793.867 517.83 li
798.097 517.83 801.217 518.73 803.197 520.47 cv
805.177 522.24 806.167 525 806.167 528.75 cv
806.167 532.53 805.147 535.29 803.167 537.06 cv
801.187 538.83 798.067 539.7 793.867 539.7 cv
787.777 539.7 li
787.777 517.83 li
f
813.847 529.26 mo
813.847 537.27 li
818.587 537.27 li
820.177 537.27 821.347 536.94 822.127 536.28 cv
822.877 535.62 823.267 534.63 823.267 533.25 cv
823.267 531.9 822.877 530.91 822.127 530.25 cv
821.347 529.59 820.177 529.26 818.587 529.26 cv
813.847 529.26 li
813.847 520.26 mo
813.847 526.86 li
818.227 526.86 li
819.667 526.86 820.717 526.59 821.437 526.05 cv
822.157 525.51 822.517 524.7 822.517 523.56 cv
822.517 522.48 822.157 521.64 821.437 521.1 cv
820.717 520.56 819.667 520.26 818.227 520.26 cv
813.847 520.26 li
810.877 517.83 mo
818.437 517.83 li
820.687 517.83 822.427 518.31 823.657 519.24 cv
824.857 520.2 825.487 521.52 825.487 523.23 cv
825.487 524.58 825.157 525.66 824.527 526.44 cv
823.897 527.22 822.997 527.73 821.797 527.91 cv
823.237 528.24 824.377 528.9 825.187 529.89 cv
825.967 530.88 826.387 532.11 826.387 533.58 cv
826.387 535.56 825.697 537.06 824.377 538.11 cv
823.057 539.19 821.167 539.7 818.737 539.7 cv
810.877 539.7 li
810.877 517.83 li
f
831.457 517.83 mo
835.447 517.83 li
845.137 536.13 li
845.137 517.83 li
848.017 517.83 li
848.017 539.7 li
844.027 539.7 li
834.337 521.4 li
834.337 539.7 li
831.457 539.7 li
831.457 517.83 li
f
869.797 516.93 mo
868.477 519.21 867.517 521.43 866.887 523.62 cv
866.227 525.81 865.927 528.03 865.927 530.28 cv
865.927 532.56 866.227 534.78 866.887 536.97 cv
867.517 539.19 868.477 541.38 869.797 543.63 cv
867.457 543.63 li
865.987 541.32 864.877 539.1 864.157 536.88 cv
863.437 534.66 863.077 532.47 863.077 530.28 cv
863.077 528.12 863.437 525.93 864.157 523.71 cv
864.877 521.49 865.957 519.24 867.457 516.93 cv
869.797 516.93 li
f
872.137 517.83 mo
890.617 517.83 li
890.617 520.32 li
882.847 520.32 li
882.847 539.7 li
879.877 539.7 li
879.877 520.32 li
872.137 520.32 li
872.137 517.83 li
f
907.386 530.82 mo
907.386 532.14 li
894.996 532.14 li
895.117 534 895.656 535.44 896.677 536.4 cv
897.667 537.36 899.047 537.84 900.846 537.84 cv
901.867 537.84 902.886 537.72 903.846 537.48 cv
904.807 537.24 905.797 536.85 906.756 536.31 cv
906.756 538.86 li
905.797 539.28 904.807 539.61 903.786 539.79 cv
902.766 539.97 901.716 540.09 900.696 540.09 cv
898.057 540.09 895.987 539.34 894.456 537.84 cv
892.927 536.34 892.177 534.27 892.177 531.66 cv
892.177 528.99 892.896 526.86 894.336 525.27 cv
895.776 523.71 897.756 522.9 900.216 522.9 cv
902.436 522.9 904.177 523.62 905.466 525.03 cv
906.727 526.47 907.386 528.39 907.386 530.82 cv
904.686 530.04 mo
904.656 528.57 904.237 527.4 903.456 526.5 cv
902.646 525.63 901.566 525.18 900.246 525.18 cv
898.746 525.18 897.547 525.63 896.646 526.47 cv
895.746 527.31 895.206 528.51 895.086 530.04 cv
904.686 530.04 li
f
922.267 523.77 mo
922.267 526.32 li
921.487 525.96 920.707 525.66 919.897 525.45 cv
919.057 525.27 918.217 525.15 917.347 525.15 cv
915.997 525.15 914.977 525.36 914.317 525.78 cv
913.657 526.2 913.327 526.8 913.327 527.61 cv
913.327 528.24 913.567 528.72 914.047 529.08 cv
914.527 529.44 915.487 529.8 916.927 530.1 cv
917.857 530.31 li
919.777 530.73 921.127 531.33 921.937 532.05 cv
922.717 532.8 923.137 533.85 923.137 535.17 cv
923.137 536.7 922.537 537.9 921.337 538.77 cv
920.137 539.67 918.457 540.09 916.357 540.09 cv
915.457 540.09 914.557 540 913.597 539.85 cv
912.637 539.7 911.647 539.46 910.597 539.1 cv
910.597 536.31 li
911.587 536.85 912.577 537.24 913.537 537.48 cv
914.497 537.75 915.457 537.87 916.417 537.87 cv
917.677 537.87 918.667 537.66 919.357 537.24 cv
920.017 536.82 920.377 536.19 920.377 535.38 cv
920.377 534.66 920.107 534.09 919.627 533.7 cv
919.147 533.31 918.067 532.92 916.387 532.56 cv
915.457 532.35 li
913.777 531.99 912.547 531.45 911.827 530.73 cv
911.077 530.01 910.717 529.02 910.717 527.73 cv
910.717 526.2 911.257 525 912.337 524.16 cv
913.417 523.32 914.977 522.9 917.017 522.9 cv
918.007 522.9 918.937 522.99 919.837 523.14 cv
920.707 523.29 921.517 523.5 922.267 523.77 cv
f
930.097 518.64 mo
930.097 523.29 li
935.647 523.29 li
935.647 525.39 li
930.097 525.39 li
930.097 534.3 li
930.097 535.65 930.277 536.52 930.637 536.88 cv
930.997 537.27 931.747 537.45 932.887 537.45 cv
935.647 537.45 li
935.647 539.7 li
932.887 539.7 li
930.787 539.7 929.347 539.31 928.567 538.53 cv
927.787 537.75 927.397 536.34 927.397 534.3 cv
927.397 525.39 li
925.417 525.39 li
925.417 523.29 li
927.397 523.29 li
927.397 518.64 li
930.097 518.64 li
f
939.187 523.29 mo
941.887 523.29 li
941.887 539.7 li
939.187 539.7 li
939.187 523.29 li
939.187 516.9 mo
941.887 516.9 li
941.887 520.32 li
939.187 520.32 li
939.187 516.9 li
f
961.177 529.8 mo
961.177 539.7 li
958.477 539.7 li
958.477 529.89 li
958.477 528.33 958.146 527.19 957.547 526.41 cv
956.947 525.63 956.047 525.24 954.847 525.24 cv
953.377 525.24 952.237 525.72 951.397 526.65 cv
950.557 527.58 950.137 528.84 950.137 530.43 cv
950.137 539.7 li
947.437 539.7 li
947.437 523.29 li
950.137 523.29 li
950.137 525.84 li
950.767 524.88 951.517 524.13 952.417 523.65 cv
953.287 523.17 954.307 522.9 955.447 522.9 cv
957.307 522.9 958.747 523.5 959.707 524.67 cv
960.667 525.84 961.177 527.55 961.177 529.8 cv
f
977.347 531.3 mo
977.347 529.38 976.927 527.85 976.147 526.77 cv
975.337 525.69 974.197 525.15 972.757 525.15 cv
971.317 525.15 970.177 525.69 969.367 526.77 cv
968.557 527.85 968.167 529.38 968.167 531.3 cv
968.167 533.25 968.557 534.75 969.367 535.83 cv
970.177 536.91 971.317 537.45 972.757 537.45 cv
974.197 537.45 975.337 536.91 976.147 535.83 cv
976.927 534.75 977.347 533.25 977.347 531.3 cv
980.047 537.66 mo
980.047 540.42 979.417 542.49 978.187 543.87 cv
976.927 545.22 975.037 545.91 972.487 545.91 cv
971.527 545.91 970.657 545.82 969.817 545.7 cv
968.977 545.55 968.137 545.34 967.357 545.04 cv
967.357 542.43 li
968.137 542.85 968.917 543.15 969.697 543.36 cv
970.477 543.57 971.257 543.69 972.067 543.69 cv
973.807 543.69 975.127 543.21 976.027 542.31 cv
976.897 541.38 977.347 540 977.347 538.14 cv
977.347 536.82 li
976.777 537.78 976.057 538.5 975.187 538.98 cv
974.317 539.46 973.297 539.7 972.097 539.7 cv
970.057 539.7 968.437 538.95 967.207 537.42 cv
965.977 535.89 965.377 533.85 965.377 531.3 cv
965.377 528.78 965.977 526.74 967.207 525.21 cv
968.437 523.68 970.057 522.9 972.097 522.9 cv
973.297 522.9 974.317 523.14 975.187 523.62 cv
976.057 524.1 976.777 524.82 977.347 525.78 cv
977.347 523.29 li
980.047 523.29 li
980.047 537.66 li
f
986.286 535.98 mo
989.376 535.98 li
989.376 538.5 li
986.976 543.15 li
985.087 543.15 li
986.286 538.5 li
986.286 535.98 li
f
1017.91 518.55 mo
1017.91 521.43 li
1016.77 520.89 1015.72 520.5 1014.73 520.23 cv
1013.71 519.99 1012.75 519.84 1011.85 519.84 cv
1010.23 519.84 1008.97 520.17 1008.1 520.77 cv
1007.23 521.4 1006.81 522.3 1006.81 523.44 cv
1006.81 524.4 1007.08 525.15 1007.68 525.63 cv
1008.25 526.14 1009.36 526.53 1010.98 526.83 cv
1012.78 527.19 li
1014.97 527.61 1016.59 528.36 1017.64 529.41 cv
1018.69 530.49 1019.23 531.9 1019.23 533.67 cv
1019.23 535.8 1018.51 537.39 1017.1 538.47 cv
1015.66 539.55 1013.59 540.09 1010.86 540.09 cv
1009.81 540.09 1008.7 539.97 1007.53 539.76 cv
1006.36 539.55 1005.16 539.22 1003.93 538.74 cv
1003.93 535.68 li
1005.13 536.37 1006.3 536.88 1007.44 537.21 cv
1008.58 537.57 1009.72 537.72 1010.86 537.72 cv
1012.54 537.72 1013.83 537.39 1014.76 536.73 cv
1015.66 536.07 1016.14 535.14 1016.14 533.88 cv
1016.14 532.8 1015.81 531.96 1015.15 531.36 cv
1014.49 530.76 1013.41 530.31 1011.91 530.01 cv
1010.11 529.65 li
1007.89 529.23 1006.3 528.54 1005.31 527.58 cv
1004.32 526.65 1003.84 525.36 1003.84 523.68 cv
1003.84 521.76 1004.5 520.23 1005.88 519.12 cv
1007.23 518.01 1009.12 517.44 1011.52 517.44 cv
1012.54 517.44 1013.56 517.53 1014.64 517.71 cv
1015.69 517.89 1016.77 518.19 1017.91 518.55 cv
f
1023.73 523.29 mo
1026.43 523.29 li
1026.43 539.7 li
1023.73 539.7 li
1023.73 523.29 li
1023.73 516.9 mo
1026.43 516.9 li
1026.43 520.32 li
1023.73 520.32 li
1023.73 516.9 li
f
1042.87 531.3 mo
1042.87 529.38 1042.45 527.85 1041.67 526.77 cv
1040.86 525.69 1039.72 525.15 1038.28 525.15 cv
1036.84 525.15 1035.7 525.69 1034.89 526.77 cv
1034.08 527.85 1033.69 529.38 1033.69 531.3 cv
1033.69 533.25 1034.08 534.75 1034.89 535.83 cv
1035.7 536.91 1036.84 537.45 1038.28 537.45 cv
1039.72 537.45 1040.86 536.91 1041.67 535.83 cv
1042.45 534.75 1042.87 533.25 1042.87 531.3 cv
1045.57 537.66 mo
1045.57 540.42 1044.94 542.49 1043.71 543.87 cv
1042.45 545.22 1040.56 545.91 1038.01 545.91 cv
1037.05 545.91 1036.18 545.82 1035.34 545.7 cv
1034.5 545.55 1033.66 545.34 1032.88 545.04 cv
1032.88 542.43 li
1033.66 542.85 1034.44 543.15 1035.22 543.36 cv
1036 543.57 1036.78 543.69 1037.59 543.69 cv
1039.33 543.69 1040.65 543.21 1041.55 542.31 cv
1042.42 541.38 1042.87 540 1042.87 538.14 cv
1042.87 536.82 li
1042.3 537.78 1041.58 538.5 1040.71 538.98 cv
1039.84 539.46 1038.82 539.7 1037.62 539.7 cv
1035.58 539.7 1033.96 538.95 1032.73 537.42 cv
1031.5 535.89 1030.9 533.85 1030.9 531.3 cv
1030.9 528.78 1031.5 526.74 1032.73 525.21 cv
1033.96 523.68 1035.58 522.9 1037.62 522.9 cv
1038.82 522.9 1039.84 523.14 1040.71 523.62 cv
1041.58 524.1 1042.3 524.82 1042.87 525.78 cv
1042.87 523.29 li
1045.57 523.29 li
1045.57 537.66 li
f
1063.9 526.44 mo
1064.56 525.24 1065.37 524.37 1066.3 523.77 cv
1067.23 523.2 1068.34 522.9 1069.63 522.9 cv
1071.31 522.9 1072.63 523.5 1073.56 524.7 cv
1074.49 525.9 1074.97 527.61 1074.97 529.8 cv
1074.97 539.7 li
1072.27 539.7 li
1072.27 529.89 li
1072.27 528.33 1071.97 527.16 1071.43 526.38 cv
1070.86 525.63 1070.02 525.24 1068.88 525.24 cv
1067.47 525.24 1066.36 525.72 1065.55 526.65 cv
1064.74 527.58 1064.35 528.84 1064.35 530.43 cv
1064.35 539.7 li
1061.65 539.7 li
1061.65 529.89 li
1061.65 528.33 1061.35 527.16 1060.81 526.38 cv
1060.24 525.63 1059.37 525.24 1058.23 525.24 cv
1056.85 525.24 1055.74 525.72 1054.93 526.65 cv
1054.12 527.58 1053.73 528.84 1053.73 530.43 cv
1053.73 539.7 li
1051.03 539.7 li
1051.03 523.29 li
1053.73 523.29 li
1053.73 525.84 li
1054.33 524.85 1055.08 524.1 1055.95 523.62 cv
1056.79 523.14 1057.81 522.9 1059.01 522.9 cv
1060.21 522.9 1061.2 523.2 1062.04 523.8 cv
1062.88 524.4 1063.48 525.3 1063.9 526.44 cv
f
1086.7 525.18 mo
1085.26 525.18 1084.12 525.75 1083.28 526.89 cv
1082.44 528.03 1082.02 529.56 1082.02 531.51 cv
1082.02 533.49 1082.41 535.02 1083.25 536.16 cv
1084.09 537.3 1085.23 537.84 1086.7 537.84 cv
1088.14 537.84 1089.28 537.3 1090.12 536.16 cv
1090.96 535.02 1091.38 533.49 1091.38 531.51 cv
1091.38 529.59 1090.96 528.03 1090.12 526.89 cv
1089.28 525.75 1088.14 525.18 1086.7 525.18 cv
1086.7 522.9 mo
1089.04 522.9 1090.87 523.68 1092.22 525.18 cv
1093.54 526.71 1094.23 528.81 1094.23 531.51 cv
1094.23 534.21 1093.54 536.31 1092.22 537.81 cv
1090.87 539.34 1089.04 540.09 1086.7 540.09 cv
1084.33 540.09 1082.47 539.34 1081.15 537.81 cv
1079.83 536.31 1079.17 534.21 1079.17 531.51 cv
1079.17 528.81 1079.83 526.71 1081.15 525.18 cv
1082.47 523.68 1084.33 522.9 1086.7 522.9 cv
f
1098.7 523.29 mo
1101.4 523.29 li
1101.4 539.7 li
1098.7 539.7 li
1098.7 523.29 li
1098.7 516.9 mo
1101.4 516.9 li
1101.4 520.32 li
1098.7 520.32 li
1098.7 516.9 li
f
1117.84 525.78 mo
1117.84 516.9 li
1120.54 516.9 li
1120.54 539.7 li
1117.84 539.7 li
1117.84 537.24 li
1117.27 538.23 1116.55 538.95 1115.68 539.4 cv
1114.81 539.85 1113.79 540.09 1112.59 540.09 cv
1110.61 540.09 1108.99 539.31 1107.73 537.75 cv
1106.47 536.19 1105.87 534.09 1105.87 531.51 cv
1105.87 528.93 1106.47 526.86 1107.73 525.27 cv
1108.99 523.71 1110.61 522.9 1112.59 522.9 cv
1113.79 522.9 1114.81 523.14 1115.68 523.62 cv
1116.55 524.1 1117.27 524.82 1117.84 525.78 cv
1108.66 531.51 mo
1108.66 533.49 1109.05 535.05 1109.86 536.19 cv
1110.67 537.33 1111.81 537.87 1113.25 537.87 cv
1114.66 537.87 1115.77 537.33 1116.61 536.19 cv
1117.42 535.05 1117.84 533.49 1117.84 531.51 cv
1117.84 529.53 1117.42 528 1116.61 526.86 cv
1115.77 525.72 1114.66 525.15 1113.25 525.15 cv
1111.81 525.15 1110.67 525.72 1109.86 526.86 cv
1109.05 528 1108.66 529.53 1108.66 531.51 cv
f
1125.67 516.93 mo
1128.01 516.93 li
1129.45 519.24 1130.56 521.49 1131.28 523.71 cv
1132 525.93 1132.39 528.12 1132.39 530.28 cv
1132.39 532.47 1132 534.66 1131.28 536.88 cv
1130.56 539.1 1129.45 541.32 1128.01 543.63 cv
1125.67 543.63 li
1126.96 541.38 1127.92 539.19 1128.58 536.97 cv
1129.21 534.78 1129.54 532.56 1129.54 530.28 cv
1129.54 528.03 1129.21 525.81 1128.58 523.62 cv
1127.92 521.43 1126.96 519.21 1125.67 516.93 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
