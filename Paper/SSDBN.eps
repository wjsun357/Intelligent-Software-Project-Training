%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SSDBN-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/11, 22:18:23
%%BoundingBox: 0 0 1154 601
%%HiResBoundingBox: 0 0 1154 601
%%CropBox: 0 0 1154 601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-11T22:17:40+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-11T22:18:15+08:00"
   xmp:MetadataDate="2019-06-11T22:18:15+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:7757d8bd-075c-4394-98ff-83d23bf3f7cc"
   xmpMM:InstanceID="uuid:13193d5f-ecc1-4097-a6bf-4caca8d7cf6e"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -601 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 601 li
1154 601 li
1154 0 li
cp
clp
gsave
7.62939e-6 601.68 mo
1154 601.68 li
1154 -.320114 li
7.62939e-6 -.320114 li
7.62939e-6 601.68 li
clp
-101 625.68 mo
1281.4 625.68 li
1281.4 -72.0001 li
-101 -72.0001 li
-101 625.68 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
71.8001 548.935 mo
1143.16 548.935 li
1143.16 11.7217 li
71.8001 11.7217 li
71.8001 548.935 li
f
120.498 548.935 mo
120.498 552.435 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
120.498 548.935 mo
120.498 552.435 li
@
120.499 557.858 mo
119.479 557.858 118.719 558.358 118.199 559.358 cv
117.679 560.358 117.439 561.858 117.439 563.858 cv
117.439 565.858 117.679 567.358 118.199 568.358 cv
118.719 569.358 119.479 569.858 120.499 569.858 cv
121.519 569.858 122.279 569.358 122.799 568.358 cv
123.299 567.358 123.559 565.858 123.559 563.858 cv
123.559 561.858 123.299 560.358 122.799 559.358 cv
122.279 558.358 121.519 557.858 120.499 557.858 cv
120.499 556.298 mo
122.119 556.298 123.359 556.958 124.239 558.238 cv
125.099 559.538 125.539 561.418 125.539 563.858 cv
125.539 566.318 125.099 568.198 124.239 569.478 cv
123.359 570.758 122.119 571.398 120.499 571.398 cv
118.859 571.398 117.599 570.758 116.739 569.478 cv
115.879 568.198 115.459 566.318 115.459 563.858 cv
115.459 561.418 115.879 559.538 116.739 558.238 cv
117.599 556.958 118.859 556.298 120.499 556.298 cv
f
317.259 548.935 mo
317.259 552.435 li
f
317.259 548.935 mo
317.259 552.435 li
@
302.02 569.478 mo
308.9 569.478 li
308.9 571.138 li
299.64 571.138 li
299.64 569.478 li
300.38 568.718 301.4 567.678 302.7 566.358 cv
303.98 565.058 304.8 564.218 305.14 563.838 cv
305.78 563.138 306.22 562.538 306.46 562.038 cv
306.7 561.558 306.84 561.058 306.84 560.578 cv
306.84 559.818 306.56 559.178 306.02 558.698 cv
305.48 558.218 304.78 557.958 303.9 557.958 cv
303.28 557.958 302.62 558.078 301.94 558.278 cv
301.26 558.498 300.52 558.818 299.74 559.258 cv
299.74 557.258 li
300.54 556.938 301.28 556.698 301.96 556.538 cv
302.64 556.378 303.28 556.298 303.86 556.298 cv
305.36 556.298 306.56 556.678 307.46 557.438 cv
308.36 558.198 308.82 559.198 308.82 560.458 cv
308.82 561.058 308.7 561.638 308.48 562.158 cv
308.26 562.698 307.86 563.338 307.26 564.058 cv
307.1 564.258 306.58 564.798 305.7 565.698 cv
304.82 566.598 303.6 567.858 302.02 569.478 cv
f
317.26 557.858 mo
316.24 557.858 315.48 558.358 314.96 559.358 cv
314.44 560.358 314.2 561.858 314.2 563.858 cv
314.2 565.858 314.44 567.358 314.96 568.358 cv
315.48 569.358 316.24 569.858 317.26 569.858 cv
318.28 569.858 319.04 569.358 319.56 568.358 cv
320.06 567.358 320.32 565.858 320.32 563.858 cv
320.32 561.858 320.06 560.358 319.56 559.358 cv
319.04 558.358 318.28 557.858 317.26 557.858 cv
317.26 556.298 mo
318.88 556.298 320.12 556.958 321 558.238 cv
321.86 559.538 322.3 561.418 322.3 563.858 cv
322.3 566.318 321.86 568.198 321 569.478 cv
320.12 570.758 318.88 571.398 317.26 571.398 cv
315.62 571.398 314.36 570.758 313.5 569.478 cv
312.64 568.198 312.22 566.318 312.22 563.858 cv
312.22 561.418 312.64 559.538 313.5 558.238 cv
314.36 556.958 315.62 556.298 317.26 556.298 cv
f
329.98 557.858 mo
328.96 557.858 328.2 558.358 327.68 559.358 cv
327.16 560.358 326.92 561.858 326.92 563.858 cv
326.92 565.858 327.16 567.358 327.68 568.358 cv
328.2 569.358 328.96 569.858 329.98 569.858 cv
331 569.858 331.76 569.358 332.28 568.358 cv
332.78 567.358 333.04 565.858 333.04 563.858 cv
333.04 561.858 332.78 560.358 332.28 559.358 cv
331.76 558.358 331 557.858 329.98 557.858 cv
329.98 556.298 mo
331.6 556.298 332.84 556.958 333.72 558.238 cv
334.58 559.538 335.02 561.418 335.02 563.858 cv
335.02 566.318 334.58 568.198 333.72 569.478 cv
332.84 570.758 331.6 571.398 329.98 571.398 cv
328.34 571.398 327.08 570.758 326.22 569.478 cv
325.36 568.198 324.94 566.318 324.94 563.858 cv
324.94 561.418 325.36 559.538 326.22 558.238 cv
327.08 556.958 328.34 556.298 329.98 556.298 cv
f
514.019 548.935 mo
514.019 552.435 li
f
514.019 548.935 mo
514.019 552.435 li
@
502.501 558.278 mo
497.521 566.058 li
502.501 566.058 li
502.501 558.278 li
501.981 556.558 mo
504.461 556.558 li
504.461 566.058 li
506.541 566.058 li
506.541 567.698 li
504.461 567.698 li
504.461 571.138 li
502.501 571.138 li
502.501 567.698 li
495.921 567.698 li
495.921 565.798 li
501.981 556.558 li
f
514.021 557.858 mo
513.001 557.858 512.241 558.358 511.721 559.358 cv
511.201 560.358 510.961 561.858 510.961 563.858 cv
510.961 565.858 511.201 567.358 511.721 568.358 cv
512.241 569.358 513.001 569.858 514.021 569.858 cv
515.041 569.858 515.801 569.358 516.321 568.358 cv
516.821 567.358 517.081 565.858 517.081 563.858 cv
517.081 561.858 516.821 560.358 516.321 559.358 cv
515.801 558.358 515.041 557.858 514.021 557.858 cv
514.021 556.298 mo
515.641 556.298 516.881 556.958 517.761 558.238 cv
518.621 559.538 519.061 561.418 519.061 563.858 cv
519.061 566.318 518.621 568.198 517.761 569.478 cv
516.881 570.758 515.641 571.398 514.021 571.398 cv
512.381 571.398 511.121 570.758 510.261 569.478 cv
509.401 568.198 508.981 566.318 508.981 563.858 cv
508.981 561.418 509.401 559.538 510.261 558.238 cv
511.121 556.958 512.381 556.298 514.021 556.298 cv
f
526.741 557.858 mo
525.721 557.858 524.961 558.358 524.441 559.358 cv
523.921 560.358 523.681 561.858 523.681 563.858 cv
523.681 565.858 523.921 567.358 524.441 568.358 cv
524.961 569.358 525.721 569.858 526.741 569.858 cv
527.761 569.858 528.521 569.358 529.041 568.358 cv
529.541 567.358 529.801 565.858 529.801 563.858 cv
529.801 561.858 529.541 560.358 529.041 559.358 cv
528.521 558.358 527.761 557.858 526.741 557.858 cv
526.741 556.298 mo
528.361 556.298 529.601 556.958 530.481 558.238 cv
531.341 559.538 531.781 561.418 531.781 563.858 cv
531.781 566.318 531.341 568.198 530.481 569.478 cv
529.601 570.758 528.361 571.398 526.741 571.398 cv
525.101 571.398 523.841 570.758 522.981 569.478 cv
522.121 568.198 521.701 566.318 521.701 563.858 cv
521.701 561.418 522.121 559.538 522.981 558.238 cv
523.841 556.958 525.101 556.298 526.741 556.298 cv
f
710.779 548.935 mo
710.779 552.435 li
f
710.779 548.935 mo
710.779 552.435 li
@
698.301 563.058 mo
697.421 563.058 696.721 563.378 696.201 563.978 cv
695.681 564.578 695.421 565.418 695.421 566.458 cv
695.421 567.518 695.681 568.358 696.201 568.958 cv
696.721 569.558 697.421 569.858 698.301 569.858 cv
699.181 569.858 699.881 569.558 700.401 568.958 cv
700.921 568.358 701.181 567.518 701.181 566.458 cv
701.181 565.418 700.921 564.578 700.401 563.978 cv
699.881 563.378 699.181 563.058 698.301 563.058 cv
702.221 556.878 mo
702.221 558.678 li
701.721 558.438 701.221 558.258 700.721 558.138 cv
700.201 558.018 699.701 557.958 699.221 557.958 cv
697.901 557.958 696.901 558.398 696.221 559.278 cv
695.541 560.158 695.141 561.498 695.061 563.258 cv
695.441 562.698 695.921 562.258 696.501 561.958 cv
697.081 561.658 697.721 561.498 698.421 561.498 cv
699.881 561.498 701.041 561.958 701.881 562.838 cv
702.721 563.718 703.161 564.938 703.161 566.458 cv
703.161 567.958 702.701 569.158 701.821 570.058 cv
700.941 570.958 699.761 571.398 698.301 571.398 cv
696.621 571.398 695.321 570.758 694.441 569.478 cv
693.541 568.198 693.101 566.318 693.101 563.858 cv
693.101 561.558 693.641 559.718 694.741 558.358 cv
695.821 556.998 697.301 556.298 699.141 556.298 cv
699.621 556.298 700.121 556.358 700.641 556.438 cv
701.141 556.538 701.661 556.678 702.221 556.878 cv
f
710.781 557.858 mo
709.761 557.858 709.001 558.358 708.481 559.358 cv
707.961 560.358 707.721 561.858 707.721 563.858 cv
707.721 565.858 707.961 567.358 708.481 568.358 cv
709.001 569.358 709.761 569.858 710.781 569.858 cv
711.801 569.858 712.561 569.358 713.081 568.358 cv
713.581 567.358 713.841 565.858 713.841 563.858 cv
713.841 561.858 713.581 560.358 713.081 559.358 cv
712.561 558.358 711.801 557.858 710.781 557.858 cv
710.781 556.298 mo
712.401 556.298 713.641 556.958 714.521 558.238 cv
715.381 559.538 715.821 561.418 715.821 563.858 cv
715.821 566.318 715.381 568.198 714.521 569.478 cv
713.641 570.758 712.401 571.398 710.781 571.398 cv
709.141 571.398 707.881 570.758 707.021 569.478 cv
706.161 568.198 705.741 566.318 705.741 563.858 cv
705.741 561.418 706.161 559.538 707.021 558.238 cv
707.881 556.958 709.141 556.298 710.781 556.298 cv
f
723.501 557.858 mo
722.481 557.858 721.721 558.358 721.201 559.358 cv
720.681 560.358 720.441 561.858 720.441 563.858 cv
720.441 565.858 720.681 567.358 721.201 568.358 cv
721.721 569.358 722.481 569.858 723.501 569.858 cv
724.521 569.858 725.281 569.358 725.801 568.358 cv
726.301 567.358 726.561 565.858 726.561 563.858 cv
726.561 561.858 726.301 560.358 725.801 559.358 cv
725.281 558.358 724.521 557.858 723.501 557.858 cv
723.501 556.298 mo
725.121 556.298 726.361 556.958 727.241 558.238 cv
728.101 559.538 728.541 561.418 728.541 563.858 cv
728.541 566.318 728.101 568.198 727.241 569.478 cv
726.361 570.758 725.121 571.398 723.501 571.398 cv
721.861 571.398 720.601 570.758 719.741 569.478 cv
718.881 568.198 718.461 566.318 718.461 563.858 cv
718.461 561.418 718.881 559.538 719.741 558.238 cv
720.601 556.958 721.861 556.298 723.501 556.298 cv
f
907.539 548.935 mo
907.539 552.435 li
f
907.539 548.935 mo
907.539 552.435 li
@
894.821 564.218 mo
893.881 564.218 893.141 564.478 892.601 564.978 cv
892.061 565.478 891.801 566.158 891.801 567.038 cv
891.801 567.918 892.061 568.618 892.601 569.118 cv
893.141 569.618 893.881 569.858 894.821 569.858 cv
895.741 569.858 896.481 569.618 897.021 569.098 cv
897.561 568.598 897.841 567.918 897.841 567.038 cv
897.841 566.158 897.561 565.478 897.041 564.978 cv
896.501 564.478 895.761 564.218 894.821 564.218 cv
892.841 563.378 mo
892.001 563.178 891.341 562.778 890.861 562.198 cv
890.381 561.618 890.161 560.918 890.161 560.078 cv
890.161 558.918 890.561 557.998 891.401 557.318 cv
892.221 556.638 893.361 556.298 894.821 556.298 cv
896.261 556.298 897.401 556.638 898.241 557.318 cv
899.061 557.998 899.481 558.918 899.481 560.078 cv
899.481 560.918 899.241 561.618 898.761 562.198 cv
898.281 562.778 897.641 563.178 896.801 563.378 cv
897.741 563.598 898.481 564.038 899.021 564.678 cv
899.541 565.318 899.821 566.118 899.821 567.038 cv
899.821 568.458 899.381 569.538 898.521 570.278 cv
897.641 571.038 896.421 571.398 894.821 571.398 cv
893.201 571.398 891.961 571.038 891.101 570.278 cv
890.241 569.538 889.821 568.458 889.821 567.038 cv
889.821 566.118 890.081 565.318 890.621 564.678 cv
891.141 564.038 891.881 563.598 892.841 563.378 cv
892.121 560.258 mo
892.121 561.018 892.341 561.618 892.821 562.038 cv
893.301 562.458 893.961 562.658 894.821 562.658 cv
895.661 562.658 896.321 562.458 896.801 562.038 cv
897.281 561.618 897.521 561.018 897.521 560.258 cv
897.521 559.498 897.281 558.918 896.801 558.498 cv
896.321 558.078 895.661 557.858 894.821 557.858 cv
893.961 557.858 893.301 558.078 892.821 558.498 cv
892.341 558.918 892.121 559.498 892.121 560.258 cv
f
907.541 557.858 mo
906.521 557.858 905.761 558.358 905.241 559.358 cv
904.721 560.358 904.481 561.858 904.481 563.858 cv
904.481 565.858 904.721 567.358 905.241 568.358 cv
905.761 569.358 906.521 569.858 907.541 569.858 cv
908.561 569.858 909.321 569.358 909.841 568.358 cv
910.341 567.358 910.601 565.858 910.601 563.858 cv
910.601 561.858 910.341 560.358 909.841 559.358 cv
909.321 558.358 908.561 557.858 907.541 557.858 cv
907.541 556.298 mo
909.161 556.298 910.401 556.958 911.281 558.238 cv
912.141 559.538 912.581 561.418 912.581 563.858 cv
912.581 566.318 912.141 568.198 911.281 569.478 cv
910.401 570.758 909.161 571.398 907.541 571.398 cv
905.901 571.398 904.641 570.758 903.781 569.478 cv
902.921 568.198 902.501 566.318 902.501 563.858 cv
902.501 561.418 902.921 559.538 903.781 558.238 cv
904.641 556.958 905.901 556.298 907.541 556.298 cv
f
920.261 557.858 mo
919.241 557.858 918.481 558.358 917.961 559.358 cv
917.441 560.358 917.201 561.858 917.201 563.858 cv
917.201 565.858 917.441 567.358 917.961 568.358 cv
918.481 569.358 919.241 569.858 920.261 569.858 cv
921.281 569.858 922.041 569.358 922.561 568.358 cv
923.061 567.358 923.321 565.858 923.321 563.858 cv
923.321 561.858 923.061 560.358 922.561 559.358 cv
922.041 558.358 921.281 557.858 920.261 557.858 cv
920.261 556.298 mo
921.881 556.298 923.121 556.958 924.001 558.238 cv
924.861 559.538 925.301 561.418 925.301 563.858 cv
925.301 566.318 924.861 568.198 924.001 569.478 cv
923.121 570.758 921.881 571.398 920.261 571.398 cv
918.621 571.398 917.361 570.758 916.501 569.478 cv
915.641 568.198 915.221 566.318 915.221 563.858 cv
915.221 561.418 915.641 559.538 916.501 558.238 cv
917.361 556.958 918.621 556.298 920.261 556.298 cv
f
1104.3 548.935 mo
1104.3 552.435 li
f
1104.3 548.935 mo
1104.3 552.435 li
@
1081.34 569.478 mo
1084.56 569.478 li
1084.56 558.358 li
1081.06 559.058 li
1081.06 557.258 li
1084.54 556.558 li
1086.52 556.558 li
1086.52 569.478 li
1089.74 569.478 li
1089.74 571.138 li
1081.34 571.138 li
1081.34 569.478 li
f
1097.94 557.858 mo
1096.92 557.858 1096.16 558.358 1095.64 559.358 cv
1095.12 560.358 1094.88 561.858 1094.88 563.858 cv
1094.88 565.858 1095.12 567.358 1095.64 568.358 cv
1096.16 569.358 1096.92 569.858 1097.94 569.858 cv
1098.96 569.858 1099.72 569.358 1100.24 568.358 cv
1100.74 567.358 1101 565.858 1101 563.858 cv
1101 561.858 1100.74 560.358 1100.24 559.358 cv
1099.72 558.358 1098.96 557.858 1097.94 557.858 cv
1097.94 556.298 mo
1099.56 556.298 1100.8 556.958 1101.68 558.238 cv
1102.54 559.538 1102.98 561.418 1102.98 563.858 cv
1102.98 566.318 1102.54 568.198 1101.68 569.478 cv
1100.8 570.758 1099.56 571.398 1097.94 571.398 cv
1096.3 571.398 1095.04 570.758 1094.18 569.478 cv
1093.32 568.198 1092.9 566.318 1092.9 563.858 cv
1092.9 561.418 1093.32 559.538 1094.18 558.238 cv
1095.04 556.958 1096.3 556.298 1097.94 556.298 cv
f
1110.66 557.858 mo
1109.64 557.858 1108.88 558.358 1108.36 559.358 cv
1107.84 560.358 1107.6 561.858 1107.6 563.858 cv
1107.6 565.858 1107.84 567.358 1108.36 568.358 cv
1108.88 569.358 1109.64 569.858 1110.66 569.858 cv
1111.68 569.858 1112.44 569.358 1112.96 568.358 cv
1113.46 567.358 1113.72 565.858 1113.72 563.858 cv
1113.72 561.858 1113.46 560.358 1112.96 559.358 cv
1112.44 558.358 1111.68 557.858 1110.66 557.858 cv
1110.66 556.298 mo
1112.28 556.298 1113.52 556.958 1114.4 558.238 cv
1115.26 559.538 1115.7 561.418 1115.7 563.858 cv
1115.7 566.318 1115.26 568.198 1114.4 569.478 cv
1113.52 570.758 1112.28 571.398 1110.66 571.398 cv
1109.02 571.398 1107.76 570.758 1106.9 569.478 cv
1106.04 568.198 1105.62 566.318 1105.62 563.858 cv
1105.62 561.418 1106.04 559.538 1106.9 558.238 cv
1107.76 556.958 1109.02 556.298 1110.66 556.298 cv
f
1123.38 557.858 mo
1122.36 557.858 1121.6 558.358 1121.08 559.358 cv
1120.56 560.358 1120.32 561.858 1120.32 563.858 cv
1120.32 565.858 1120.56 567.358 1121.08 568.358 cv
1121.6 569.358 1122.36 569.858 1123.38 569.858 cv
1124.4 569.858 1125.16 569.358 1125.68 568.358 cv
1126.18 567.358 1126.44 565.858 1126.44 563.858 cv
1126.44 561.858 1126.18 560.358 1125.68 559.358 cv
1125.16 558.358 1124.4 557.858 1123.38 557.858 cv
1123.38 556.298 mo
1125 556.298 1126.24 556.958 1127.12 558.238 cv
1127.98 559.538 1128.42 561.418 1128.42 563.858 cv
1128.42 566.318 1127.98 568.198 1127.12 569.478 cv
1126.24 570.758 1125 571.398 1123.38 571.398 cv
1121.74 571.398 1120.48 570.758 1119.62 569.478 cv
1118.76 568.198 1118.34 566.318 1118.34 563.858 cv
1118.34 561.418 1118.76 559.538 1119.62 558.238 cv
1120.48 556.958 1121.74 556.298 1123.38 556.298 cv
f
578.815 579.918 mo
588.035 579.918 li
588.035 581.578 li
580.795 581.578 li
580.795 585.898 li
587.735 585.898 li
587.735 587.558 li
580.795 587.558 li
580.795 592.838 li
588.215 592.838 li
588.215 594.498 li
578.815 594.498 li
578.815 579.918 li
f
593.115 592.858 mo
593.115 598.638 li
591.315 598.638 li
591.315 583.558 li
593.115 583.558 li
593.115 585.218 li
593.475 584.578 593.955 584.098 594.535 583.778 cv
595.115 583.458 595.815 583.298 596.615 583.298 cv
597.935 583.298 599.015 583.838 599.855 584.878 cv
600.675 585.938 601.095 587.318 601.095 589.038 cv
601.095 590.758 600.675 592.158 599.855 593.198 cv
599.015 594.238 597.935 594.758 596.615 594.758 cv
595.815 594.758 595.115 594.598 594.535 594.298 cv
593.955 593.998 593.475 593.518 593.115 592.858 cv
599.235 589.038 mo
599.235 587.718 598.955 586.698 598.415 585.938 cv
597.855 585.178 597.115 584.798 596.175 584.798 cv
595.215 584.798 594.475 585.178 593.935 585.938 cv
593.375 586.698 593.115 587.718 593.115 589.038 cv
593.115 590.358 593.375 591.398 593.935 592.158 cv
594.475 592.918 595.215 593.278 596.175 593.278 cv
597.115 593.278 597.855 592.918 598.415 592.158 cv
598.955 591.398 599.235 590.358 599.235 589.038 cv
f
608.315 584.818 mo
607.355 584.818 606.595 585.198 606.035 585.958 cv
605.475 586.718 605.195 587.738 605.195 589.038 cv
605.195 590.358 605.455 591.378 606.015 592.138 cv
606.575 592.898 607.335 593.258 608.315 593.258 cv
609.275 593.258 610.035 592.898 610.595 592.138 cv
611.155 591.378 611.435 590.358 611.435 589.038 cv
611.435 587.758 611.155 586.718 610.595 585.958 cv
610.035 585.198 609.275 584.818 608.315 584.818 cv
608.315 583.298 mo
609.875 583.298 611.095 583.818 611.995 584.818 cv
612.875 585.838 613.335 587.238 613.335 589.038 cv
613.335 590.838 612.875 592.238 611.995 593.238 cv
611.095 594.258 609.875 594.758 608.315 594.758 cv
606.735 594.758 605.495 594.258 604.615 593.238 cv
603.735 592.238 603.295 590.838 603.295 589.038 cv
603.295 587.238 603.735 585.838 604.615 584.818 cv
605.495 583.818 606.735 583.298 608.315 583.298 cv
f
624.195 583.978 mo
624.195 585.658 li
623.675 585.378 623.175 585.178 622.655 585.038 cv
622.135 584.898 621.635 584.818 621.115 584.818 cv
619.955 584.818 619.035 585.198 618.395 585.938 cv
617.755 586.678 617.435 587.718 617.435 589.038 cv
617.435 590.378 617.755 591.418 618.395 592.158 cv
619.035 592.898 619.955 593.258 621.115 593.258 cv
621.635 593.258 622.135 593.198 622.655 593.058 cv
623.175 592.918 623.675 592.698 624.195 592.418 cv
624.195 594.078 li
623.675 594.318 623.155 594.498 622.635 594.598 cv
622.095 594.698 621.515 594.758 620.915 594.758 cv
619.275 594.758 617.955 594.258 616.995 593.218 cv
616.015 592.198 615.535 590.798 615.535 589.038 cv
615.535 587.258 616.015 585.858 616.995 584.838 cv
617.975 583.818 619.315 583.298 621.035 583.298 cv
621.595 583.298 622.135 583.358 622.655 583.478 cv
623.175 583.598 623.695 583.758 624.195 583.978 cv
f
636.415 587.898 mo
636.415 594.498 li
634.615 594.498 li
634.615 587.958 li
634.615 586.918 634.395 586.158 633.995 585.638 cv
633.595 585.118 632.995 584.858 632.195 584.858 cv
631.215 584.858 630.455 585.178 629.895 585.798 cv
629.335 586.418 629.055 587.258 629.055 588.318 cv
629.055 594.498 li
627.255 594.498 li
627.255 579.298 li
629.055 579.298 li
629.055 585.258 li
629.475 584.618 629.975 584.118 630.575 583.798 cv
631.155 583.478 631.835 583.298 632.595 583.298 cv
633.835 583.298 634.795 583.698 635.435 584.478 cv
636.075 585.258 636.415 586.398 636.415 587.898 cv
f
71.8 510.904 mo
68.3 510.904 li
f
71.8 510.904 mo
68.3 510.904 li
@
39.3631 505.226 mo
38.3431 505.226 37.5831 505.726 37.0631 506.726 cv
36.5431 507.726 36.3031 509.226 36.3031 511.226 cv
36.3031 513.226 36.5431 514.726 37.0631 515.726 cv
37.5831 516.726 38.3431 517.226 39.3631 517.226 cv
40.3831 517.226 41.1431 516.726 41.6631 515.726 cv
42.1631 514.726 42.4231 513.226 42.4231 511.226 cv
42.4231 509.226 42.1631 507.726 41.6631 506.726 cv
41.1431 505.726 40.3831 505.226 39.3631 505.226 cv
39.3631 503.666 mo
40.9831 503.666 42.2231 504.326 43.1031 505.606 cv
43.9631 506.906 44.4031 508.786 44.4031 511.226 cv
44.4031 513.686 43.9631 515.566 43.1031 516.846 cv
42.2231 518.126 40.9831 518.766 39.3631 518.766 cv
37.7231 518.766 36.4631 518.126 35.6031 516.846 cv
34.7431 515.566 34.3231 513.686 34.3231 511.226 cv
34.3231 508.786 34.7431 506.906 35.6031 505.606 cv
36.4631 504.326 37.7231 503.666 39.3631 503.666 cv
f
47.8632 516.026 mo
49.9232 516.026 li
49.9232 518.506 li
47.8632 518.506 li
47.8632 516.026 li
f
55.923 516.846 mo
62.803 516.846 li
62.803 518.506 li
53.543 518.506 li
53.543 516.846 li
54.283 516.086 55.303 515.046 56.603 513.726 cv
57.883 512.426 58.703 511.586 59.043 511.206 cv
59.683 510.506 60.123 509.906 60.363 509.406 cv
60.603 508.926 60.743 508.426 60.743 507.946 cv
60.743 507.186 60.463 506.546 59.923 506.066 cv
59.383 505.586 58.683 505.326 57.803 505.326 cv
57.183 505.326 56.523 505.446 55.843 505.646 cv
55.163 505.866 54.423 506.186 53.643 506.626 cv
53.643 504.626 li
54.443 504.306 55.183 504.066 55.863 503.906 cv
56.543 503.746 57.183 503.666 57.763 503.666 cv
59.263 503.666 60.463 504.046 61.363 504.806 cv
62.263 505.566 62.723 506.566 62.723 507.826 cv
62.723 508.426 62.603 509.006 62.383 509.526 cv
62.163 510.066 61.763 510.706 61.163 511.426 cv
61.003 511.626 60.483 512.166 59.603 513.066 cv
58.723 513.966 57.503 515.226 55.923 516.846 cv
f
71.8 450.315 mo
68.3 450.315 li
f
71.8 450.315 mo
68.3 450.315 li
@
39.3631 444.636 mo
38.3431 444.636 37.5831 445.136 37.0631 446.136 cv
36.5431 447.136 36.3031 448.636 36.3031 450.636 cv
36.3031 452.636 36.5431 454.136 37.0631 455.136 cv
37.5831 456.136 38.3431 456.636 39.3631 456.636 cv
40.3831 456.636 41.1431 456.136 41.6631 455.136 cv
42.1631 454.136 42.4231 452.636 42.4231 450.636 cv
42.4231 448.636 42.1631 447.136 41.6631 446.136 cv
41.1431 445.136 40.3831 444.636 39.3631 444.636 cv
39.3631 443.076 mo
40.9831 443.076 42.2231 443.736 43.1031 445.016 cv
43.9631 446.316 44.4031 448.196 44.4031 450.636 cv
44.4031 453.096 43.9631 454.976 43.1031 456.256 cv
42.2231 457.536 40.9831 458.176 39.3631 458.176 cv
37.7231 458.176 36.4631 457.536 35.6031 456.256 cv
34.7431 454.976 34.3231 453.096 34.3231 450.636 cv
34.3231 448.196 34.7431 446.316 35.6031 445.016 cv
36.4631 443.736 37.7231 443.076 39.3631 443.076 cv
f
47.8632 455.436 mo
49.9232 455.436 li
49.9232 457.916 li
47.8632 457.916 li
47.8632 455.436 li
f
60.203 450.056 mo
61.143 450.256 61.883 450.676 62.403 451.316 cv
62.923 451.956 63.203 452.756 63.203 453.676 cv
63.203 455.116 62.703 456.236 61.723 457.016 cv
60.723 457.796 59.323 458.176 57.503 458.176 cv
56.883 458.176 56.243 458.116 55.603 457.996 cv
54.963 457.896 54.283 457.716 53.603 457.476 cv
53.603 455.576 li
54.143 455.896 54.743 456.136 55.403 456.296 cv
56.043 456.456 56.723 456.536 57.443 456.536 cv
58.683 456.536 59.623 456.296 60.263 455.816 cv
60.903 455.336 61.243 454.616 61.243 453.676 cv
61.243 452.836 60.943 452.156 60.343 451.676 cv
59.743 451.196 58.903 450.936 57.823 450.936 cv
56.123 450.936 li
56.123 449.316 li
57.903 449.316 li
58.863 449.316 59.603 449.136 60.123 448.736 cv
60.643 448.356 60.903 447.796 60.903 447.056 cv
60.903 446.316 60.623 445.736 60.103 445.336 cv
59.563 444.936 58.803 444.736 57.823 444.736 cv
57.283 444.736 56.703 444.796 56.083 444.916 cv
55.463 445.036 54.783 445.216 54.043 445.456 cv
54.043 443.696 li
54.783 443.496 55.483 443.336 56.143 443.236 cv
56.783 443.136 57.403 443.076 58.003 443.076 cv
59.483 443.076 60.663 443.416 61.543 444.096 cv
62.423 444.776 62.863 445.696 62.863 446.856 cv
62.863 447.656 62.623 448.336 62.163 448.896 cv
61.703 449.456 61.043 449.856 60.203 450.056 cv
f
71.8 389.726 mo
68.3 389.726 li
f
71.8 389.726 mo
68.3 389.726 li
@
39.3631 384.047 mo
38.3431 384.047 37.5831 384.547 37.0631 385.547 cv
36.5431 386.547 36.3031 388.047 36.3031 390.047 cv
36.3031 392.047 36.5431 393.547 37.0631 394.547 cv
37.5831 395.547 38.3431 396.047 39.3631 396.047 cv
40.3831 396.047 41.1431 395.547 41.6631 394.547 cv
42.1631 393.547 42.4231 392.047 42.4231 390.047 cv
42.4231 388.047 42.1631 386.547 41.6631 385.547 cv
41.1431 384.547 40.3831 384.047 39.3631 384.047 cv
39.3631 382.487 mo
40.9831 382.487 42.2231 383.147 43.1031 384.427 cv
43.9631 385.727 44.4031 387.607 44.4031 390.047 cv
44.4031 392.507 43.9631 394.387 43.1031 395.667 cv
42.2231 396.947 40.9831 397.587 39.3631 397.587 cv
37.7231 397.587 36.4631 396.947 35.6031 395.667 cv
34.7431 394.387 34.3231 392.507 34.3231 390.047 cv
34.3231 387.607 34.7431 385.727 35.6031 384.427 cv
36.4631 383.147 37.7231 382.487 39.3631 382.487 cv
f
47.8632 394.847 mo
49.9232 394.847 li
49.9232 397.327 li
47.8632 397.327 li
47.8632 394.847 li
f
59.643 384.467 mo
54.663 392.247 li
59.643 392.247 li
59.643 384.467 li
59.123 382.747 mo
61.603 382.747 li
61.603 392.247 li
63.683 392.247 li
63.683 393.887 li
61.603 393.887 li
61.603 397.327 li
59.643 397.327 li
59.643 393.887 li
53.063 393.887 li
53.063 391.987 li
59.123 382.747 li
f
71.8 329.136 mo
68.3 329.136 li
f
71.8 329.136 mo
68.3 329.136 li
@
39.3631 323.458 mo
38.3431 323.458 37.5831 323.958 37.0631 324.958 cv
36.5431 325.958 36.3031 327.458 36.3031 329.458 cv
36.3031 331.458 36.5431 332.958 37.0631 333.958 cv
37.5831 334.958 38.3431 335.458 39.3631 335.458 cv
40.3831 335.458 41.1431 334.958 41.6631 333.958 cv
42.1631 332.958 42.4231 331.458 42.4231 329.458 cv
42.4231 327.458 42.1631 325.958 41.6631 324.958 cv
41.1431 323.958 40.3831 323.458 39.3631 323.458 cv
39.3631 321.898 mo
40.9831 321.898 42.2231 322.558 43.1031 323.838 cv
43.9631 325.138 44.4031 327.018 44.4031 329.458 cv
44.4031 331.918 43.9631 333.798 43.1031 335.078 cv
42.2231 336.358 40.9831 336.998 39.3631 336.998 cv
37.7231 336.998 36.4631 336.358 35.6031 335.078 cv
34.7431 333.798 34.3231 331.918 34.3231 329.458 cv
34.3231 327.018 34.7431 325.138 35.6031 323.838 cv
36.4631 322.558 37.7231 321.898 39.3631 321.898 cv
f
47.8632 334.258 mo
49.9232 334.258 li
49.9232 336.738 li
47.8632 336.738 li
47.8632 334.258 li
f
54.243 322.158 mo
61.983 322.158 li
61.983 323.818 li
56.043 323.818 li
56.043 327.398 li
56.323 327.298 56.623 327.218 56.903 327.178 cv
57.183 327.138 57.483 327.098 57.763 327.098 cv
59.383 327.098 60.663 327.558 61.623 328.438 cv
62.583 329.338 63.063 330.538 63.063 332.058 cv
63.063 333.638 62.563 334.858 61.583 335.718 cv
60.603 336.578 59.223 336.998 57.463 336.998 cv
56.843 336.998 56.223 336.938 55.583 336.858 cv
54.943 336.758 54.303 336.618 53.623 336.398 cv
53.623 334.418 li
54.203 334.738 54.803 334.978 55.443 335.138 cv
56.063 335.298 56.723 335.358 57.423 335.358 cv
58.543 335.358 59.443 335.078 60.103 334.478 cv
60.743 333.878 61.083 333.078 61.083 332.058 cv
61.083 331.058 60.743 330.258 60.103 329.658 cv
59.443 329.058 58.543 328.758 57.423 328.758 cv
56.903 328.758 56.363 328.818 55.843 328.938 cv
55.323 329.058 54.783 329.238 54.243 329.478 cv
54.243 322.158 li
f
71.8 268.547 mo
68.3 268.547 li
f
71.8 268.547 mo
68.3 268.547 li
@
39.3631 262.869 mo
38.3431 262.869 37.5831 263.369 37.0631 264.369 cv
36.5431 265.369 36.3031 266.869 36.3031 268.869 cv
36.3031 270.869 36.5431 272.369 37.0631 273.369 cv
37.5831 274.369 38.3431 274.869 39.3631 274.869 cv
40.3831 274.869 41.1431 274.369 41.6631 273.369 cv
42.1631 272.369 42.4231 270.869 42.4231 268.869 cv
42.4231 266.869 42.1631 265.369 41.6631 264.369 cv
41.1431 263.369 40.3831 262.869 39.3631 262.869 cv
39.3631 261.309 mo
40.9831 261.309 42.2231 261.969 43.1031 263.249 cv
43.9631 264.549 44.4031 266.429 44.4031 268.869 cv
44.4031 271.329 43.9631 273.209 43.1031 274.489 cv
42.2231 275.769 40.9831 276.409 39.3631 276.409 cv
37.7231 276.409 36.4631 275.769 35.6031 274.489 cv
34.7431 273.209 34.3231 271.329 34.3231 268.869 cv
34.3231 266.429 34.7431 264.549 35.6031 263.249 cv
36.4631 261.969 37.7231 261.309 39.3631 261.309 cv
f
47.8632 273.669 mo
49.9232 273.669 li
49.9232 276.149 li
47.8632 276.149 li
47.8632 273.669 li
f
58.683 268.069 mo
57.803 268.069 57.103 268.389 56.583 268.989 cv
56.063 269.589 55.803 270.429 55.803 271.469 cv
55.803 272.529 56.063 273.369 56.583 273.969 cv
57.103 274.569 57.803 274.869 58.683 274.869 cv
59.563 274.869 60.263 274.569 60.783 273.969 cv
61.303 273.369 61.563 272.529 61.563 271.469 cv
61.563 270.429 61.303 269.589 60.783 268.989 cv
60.263 268.389 59.563 268.069 58.683 268.069 cv
62.603 261.889 mo
62.603 263.689 li
62.103 263.449 61.603 263.269 61.103 263.149 cv
60.583 263.029 60.083 262.969 59.603 262.969 cv
58.283 262.969 57.283 263.409 56.603 264.289 cv
55.923 265.169 55.523 266.509 55.443 268.269 cv
55.823 267.709 56.303 267.269 56.883 266.969 cv
57.463 266.669 58.103 266.509 58.803 266.509 cv
60.263 266.509 61.423 266.969 62.263 267.849 cv
63.103 268.729 63.543 269.949 63.543 271.469 cv
63.543 272.969 63.083 274.169 62.203 275.069 cv
61.323 275.969 60.143 276.409 58.683 276.409 cv
57.003 276.409 55.703 275.769 54.823 274.489 cv
53.923 273.209 53.483 271.329 53.483 268.869 cv
53.483 266.569 54.023 264.729 55.123 263.369 cv
56.203 262.009 57.683 261.309 59.523 261.309 cv
60.003 261.309 60.503 261.369 61.023 261.449 cv
61.523 261.549 62.043 261.689 62.603 261.889 cv
f
71.8 207.958 mo
68.3 207.958 li
f
71.8 207.958 mo
68.3 207.958 li
@
39.3631 202.28 mo
38.3431 202.28 37.5831 202.78 37.0631 203.78 cv
36.5431 204.78 36.3031 206.28 36.3031 208.28 cv
36.3031 210.28 36.5431 211.78 37.0631 212.78 cv
37.5831 213.78 38.3431 214.28 39.3631 214.28 cv
40.3831 214.28 41.1431 213.78 41.6631 212.78 cv
42.1631 211.78 42.4231 210.28 42.4231 208.28 cv
42.4231 206.28 42.1631 204.78 41.6631 203.78 cv
41.1431 202.78 40.3831 202.28 39.3631 202.28 cv
39.3631 200.72 mo
40.9831 200.72 42.2231 201.38 43.1031 202.66 cv
43.9631 203.96 44.4031 205.84 44.4031 208.28 cv
44.4031 210.74 43.9631 212.62 43.1031 213.9 cv
42.2231 215.18 40.9831 215.82 39.3631 215.82 cv
37.7231 215.82 36.4631 215.18 35.6031 213.9 cv
34.7431 212.62 34.3231 210.74 34.3231 208.28 cv
34.3231 205.84 34.7431 203.96 35.6031 202.66 cv
36.4631 201.38 37.7231 200.72 39.3631 200.72 cv
f
47.8632 213.08 mo
49.9232 213.08 li
49.9232 215.56 li
47.8632 215.56 li
47.8632 213.08 li
f
53.723 200.98 mo
63.103 200.98 li
63.103 201.82 li
57.803 215.56 li
55.743 215.56 li
60.723 202.64 li
53.723 202.64 li
53.723 200.98 li
f
71.8 147.369 mo
68.3 147.369 li
f
71.8 147.369 mo
68.3 147.369 li
@
39.3631 141.69 mo
38.3431 141.69 37.5831 142.19 37.0631 143.19 cv
36.5431 144.19 36.3031 145.69 36.3031 147.69 cv
36.3031 149.69 36.5431 151.19 37.0631 152.19 cv
37.5831 153.19 38.3431 153.69 39.3631 153.69 cv
40.3831 153.69 41.1431 153.19 41.6631 152.19 cv
42.1631 151.19 42.4231 149.69 42.4231 147.69 cv
42.4231 145.69 42.1631 144.19 41.6631 143.19 cv
41.1431 142.19 40.3831 141.69 39.3631 141.69 cv
39.3631 140.13 mo
40.9831 140.13 42.2231 140.79 43.1031 142.07 cv
43.9631 143.37 44.4031 145.25 44.4031 147.69 cv
44.4031 150.15 43.9631 152.03 43.1031 153.31 cv
42.2231 154.59 40.9831 155.23 39.3631 155.23 cv
37.7231 155.23 36.4631 154.59 35.6031 153.31 cv
34.7431 152.03 34.3231 150.15 34.3231 147.69 cv
34.3231 145.25 34.7431 143.37 35.6031 142.07 cv
36.4631 140.79 37.7231 140.13 39.3631 140.13 cv
f
47.8632 152.49 mo
49.9232 152.49 li
49.9232 154.97 li
47.8632 154.97 li
47.8632 152.49 li
f
58.443 148.05 mo
57.503 148.05 56.763 148.31 56.223 148.81 cv
55.683 149.31 55.423 149.99 55.423 150.87 cv
55.423 151.75 55.683 152.45 56.223 152.95 cv
56.763 153.45 57.503 153.69 58.443 153.69 cv
59.363 153.69 60.103 153.45 60.643 152.93 cv
61.183 152.43 61.463 151.75 61.463 150.87 cv
61.463 149.99 61.183 149.31 60.663 148.81 cv
60.123 148.31 59.383 148.05 58.443 148.05 cv
56.463 147.21 mo
55.623 147.01 54.963 146.61 54.483 146.03 cv
54.003 145.45 53.783 144.75 53.783 143.91 cv
53.783 142.75 54.183 141.83 55.023 141.15 cv
55.843 140.47 56.983 140.13 58.443 140.13 cv
59.883 140.13 61.023 140.47 61.863 141.15 cv
62.683 141.83 63.103 142.75 63.103 143.91 cv
63.103 144.75 62.863 145.45 62.383 146.03 cv
61.903 146.61 61.263 147.01 60.423 147.21 cv
61.363 147.43 62.103 147.87 62.643 148.51 cv
63.163 149.15 63.443 149.95 63.443 150.87 cv
63.443 152.29 63.003 153.37 62.143 154.11 cv
61.263 154.87 60.043 155.23 58.443 155.23 cv
56.823 155.23 55.583 154.87 54.723 154.11 cv
53.863 153.37 53.443 152.29 53.443 150.87 cv
53.443 149.95 53.703 149.15 54.243 148.51 cv
54.763 147.87 55.503 147.43 56.463 147.21 cv
55.743 144.09 mo
55.743 144.85 55.963 145.45 56.443 145.87 cv
56.923 146.29 57.583 146.49 58.443 146.49 cv
59.283 146.49 59.943 146.29 60.423 145.87 cv
60.903 145.45 61.143 144.85 61.143 144.09 cv
61.143 143.33 60.903 142.75 60.423 142.33 cv
59.943 141.91 59.283 141.69 58.443 141.69 cv
57.583 141.69 56.923 141.91 56.443 142.33 cv
55.963 142.75 55.743 143.33 55.743 144.09 cv
f
71.8 86.7795 mo
68.3 86.7795 li
f
71.8 86.7795 mo
68.3 86.7795 li
@
39.3631 81.1011 mo
38.3431 81.1011 37.5831 81.6011 37.0631 82.6011 cv
36.5431 83.6011 36.3031 85.1011 36.3031 87.1011 cv
36.3031 89.1011 36.5431 90.6011 37.0631 91.6011 cv
37.5831 92.6011 38.3431 93.1011 39.3631 93.1011 cv
40.3831 93.1011 41.1431 92.6011 41.6631 91.6011 cv
42.1631 90.6011 42.4231 89.1011 42.4231 87.1011 cv
42.4231 85.1011 42.1631 83.6011 41.6631 82.6011 cv
41.1431 81.6011 40.3831 81.1011 39.3631 81.1011 cv
39.3631 79.5411 mo
40.9831 79.5411 42.2231 80.2011 43.1031 81.4811 cv
43.9631 82.7811 44.4031 84.6611 44.4031 87.1011 cv
44.4031 89.5611 43.9631 91.4411 43.1031 92.7211 cv
42.2231 94.0011 40.9831 94.6411 39.3631 94.6411 cv
37.7231 94.6411 36.4631 94.0011 35.6031 92.7211 cv
34.7431 91.4411 34.3231 89.5611 34.3231 87.1011 cv
34.3231 84.6611 34.7431 82.7811 35.6031 81.4811 cv
36.4631 80.2011 37.7231 79.5411 39.3631 79.5411 cv
f
47.8632 91.9011 mo
49.9232 91.9011 li
49.9232 94.3811 li
47.8632 94.3811 li
47.8632 91.9011 li
f
54.283 94.0811 mo
54.283 92.2811 li
54.763 92.5211 55.263 92.7011 55.783 92.8211 cv
56.283 92.9411 56.783 93.0011 57.283 93.0011 cv
58.563 93.0011 59.563 92.5811 60.243 91.7011 cv
60.923 90.8211 61.323 89.5011 61.443 87.7011 cv
61.043 88.2611 60.563 88.7011 60.003 89.0011 cv
59.423 89.3011 58.783 89.4411 58.083 89.4411 cv
56.603 89.4411 55.443 89.0011 54.603 88.1211 cv
53.763 87.2411 53.343 86.0411 53.343 84.5011 cv
53.343 83.0211 53.783 81.8211 54.663 80.9011 cv
55.543 80.0011 56.723 79.5411 58.203 79.5411 cv
59.883 79.5411 61.183 80.2011 62.063 81.4811 cv
62.943 82.7811 63.403 84.6611 63.403 87.1011 cv
63.403 89.4211 62.843 91.2411 61.763 92.6011 cv
60.663 93.9611 59.203 94.6411 57.363 94.6411 cv
56.863 94.6411 56.363 94.5811 55.863 94.5011 cv
55.343 94.4211 54.823 94.2811 54.283 94.0811 cv
58.203 87.9011 mo
59.083 87.9011 59.783 87.6011 60.303 87.0011 cv
60.823 86.4011 61.083 85.5611 61.083 84.5011 cv
61.083 83.4611 60.823 82.6211 60.303 82.0211 cv
59.783 81.4211 59.083 81.1011 58.203 81.1011 cv
57.323 81.1011 56.623 81.4211 56.103 82.0211 cv
55.583 82.6211 55.323 83.4611 55.323 84.5011 cv
55.323 85.5611 55.583 86.4011 56.103 87.0011 cv
56.623 87.6011 57.323 87.9011 58.203 87.9011 cv
f
71.8 26.1903 mo
68.3 26.1903 li
f
71.8 26.1903 mo
68.3 26.1903 li
@
35.4831 32.1319 mo
38.7031 32.1319 li
38.7031 21.0119 li
35.2031 21.7119 li
35.2031 19.9119 li
38.6831 19.2119 li
40.6631 19.2119 li
40.6631 32.1319 li
43.8831 32.1319 li
43.8831 33.7919 li
35.4831 33.7919 li
35.4831 32.1319 li
f
47.8632 31.3119 mo
49.9232 31.3119 li
49.9232 33.7919 li
47.8632 33.7919 li
47.8632 31.3119 li
f
58.443 20.5119 mo
57.423 20.5119 56.663 21.0119 56.143 22.0119 cv
55.623 23.0119 55.383 24.5119 55.383 26.5119 cv
55.383 28.5119 55.623 30.0119 56.143 31.0119 cv
56.663 32.0119 57.423 32.5119 58.443 32.5119 cv
59.463 32.5119 60.223 32.0119 60.743 31.0119 cv
61.243 30.0119 61.503 28.5119 61.503 26.5119 cv
61.503 24.5119 61.243 23.0119 60.743 22.0119 cv
60.223 21.0119 59.463 20.5119 58.443 20.5119 cv
58.443 18.9519 mo
60.063 18.9519 61.303 19.6119 62.183 20.8919 cv
63.043 22.1919 63.483 24.0719 63.483 26.5119 cv
63.483 28.9719 63.043 30.8519 62.183 32.1319 cv
61.303 33.4119 60.063 34.0519 58.443 34.0519 cv
56.803 34.0519 55.543 33.4119 54.683 32.1319 cv
53.823 30.8519 53.403 28.9719 53.403 26.5119 cv
53.403 24.0719 53.823 22.1919 54.683 20.8919 cv
55.543 19.6119 56.803 18.9519 58.443 18.9519 cv
f
12.2069 345.652 mo
19.4669 348.332 li
19.4669 342.972 li
12.2069 345.652 li
10.2669 346.772 mo
10.2669 344.532 li
24.8469 338.972 li
24.8469 341.032 li
21.1069 342.352 li
21.1069 348.932 li
24.8469 350.252 li
24.8469 352.332 li
10.2669 346.772 li
f
14.3269 329.052 mo
16.0069 329.052 li
15.7269 329.572 15.5269 330.072 15.3869 330.592 cv
15.2469 331.112 15.1669 331.612 15.1669 332.132 cv
15.1669 333.292 15.5469 334.212 16.2869 334.852 cv
17.0269 335.492 18.0669 335.812 19.3869 335.812 cv
20.7269 335.812 21.7669 335.492 22.5069 334.852 cv
23.2469 334.212 23.6069 333.292 23.6069 332.132 cv
23.6069 331.612 23.5469 331.112 23.4069 330.592 cv
23.2669 330.072 23.0469 329.572 22.7669 329.052 cv
24.4269 329.052 li
24.6669 329.572 24.8469 330.092 24.9469 330.612 cv
25.0469 331.152 25.1069 331.732 25.1069 332.332 cv
25.1069 333.972 24.6069 335.292 23.5669 336.252 cv
22.5469 337.232 21.1469 337.712 19.3869 337.712 cv
17.6069 337.712 16.2069 337.232 15.1869 336.252 cv
14.1669 335.272 13.6469 333.932 13.6469 332.212 cv
13.6469 331.652 13.7069 331.112 13.8269 330.592 cv
13.9469 330.072 14.1069 329.552 14.3269 329.052 cv
f
14.3269 318.052 mo
16.0069 318.052 li
15.7269 318.572 15.5269 319.072 15.3869 319.592 cv
15.2469 320.112 15.1669 320.612 15.1669 321.132 cv
15.1669 322.292 15.5469 323.212 16.2869 323.852 cv
17.0269 324.492 18.0669 324.812 19.3869 324.812 cv
20.7269 324.812 21.7669 324.492 22.5069 323.852 cv
23.2469 323.212 23.6069 322.292 23.6069 321.132 cv
23.6069 320.612 23.5469 320.112 23.4069 319.592 cv
23.2669 319.072 23.0469 318.572 22.7669 318.052 cv
24.4269 318.052 li
24.6669 318.572 24.8469 319.092 24.9469 319.612 cv
25.0469 320.152 25.1069 320.732 25.1069 321.332 cv
25.1069 322.972 24.6069 324.292 23.5669 325.252 cv
22.5469 326.232 21.1469 326.712 19.3869 326.712 cv
17.6069 326.712 16.2069 326.232 15.1869 325.252 cv
14.1669 324.272 13.6469 322.932 13.6469 321.212 cv
13.6469 320.652 13.7069 320.112 13.8269 319.592 cv
13.9469 319.072 14.1069 318.552 14.3269 318.052 cv
f
20.5269 315.112 mo
13.9069 315.112 li
13.9069 313.312 li
20.4669 313.312 li
21.5069 313.312 22.2669 313.112 22.7869 312.712 cv
23.3069 312.312 23.5669 311.712 23.5669 310.892 cv
23.5669 309.932 23.2669 309.152 22.6469 308.592 cv
22.0269 308.032 21.1869 307.752 20.1069 307.752 cv
13.9069 307.752 li
13.9069 305.952 li
24.8469 305.952 li
24.8469 307.752 li
23.1669 307.752 li
23.8469 308.192 24.3269 308.712 24.6469 309.272 cv
24.9469 309.852 25.1069 310.512 25.1069 311.272 cv
25.1069 312.532 24.7269 313.492 23.9469 314.132 cv
23.1869 314.792 22.0469 315.112 20.5269 315.112 cv
13.6469 310.592 mo
13.6469 310.592 li
f
15.5869 295.912 mo
15.4669 296.112 15.3869 296.332 15.3269 296.572 cv
15.2869 296.812 15.2469 297.072 15.2469 297.352 cv
15.2469 298.372 15.5869 299.152 16.2469 299.692 cv
16.9069 300.252 17.8469 300.512 19.0869 300.512 cv
24.8469 300.512 li
24.8469 302.312 li
13.9069 302.312 li
13.9069 300.512 li
15.6069 300.512 li
14.9469 300.152 14.4469 299.652 14.1269 299.052 cv
13.8069 298.452 13.6469 297.712 13.6469 296.832 cv
13.6469 296.712 13.6669 296.572 13.6669 296.412 cv
13.6869 296.272 13.7069 296.112 13.7469 295.912 cv
15.5869 295.912 li
f
19.3469 289.052 mo
19.3469 290.512 19.5269 291.512 19.8469 292.072 cv
20.1869 292.632 20.7469 292.912 21.5469 292.912 cv
22.1869 292.912 22.7069 292.712 23.0669 292.292 cv
23.4469 291.872 23.6269 291.292 23.6269 290.572 cv
23.6269 289.572 23.2869 288.772 22.5669 288.172 cv
21.8669 287.572 20.9269 287.272 19.7469 287.272 cv
19.3469 287.272 li
19.3469 289.052 li
18.6069 285.472 mo
24.8469 285.472 li
24.8469 287.272 li
23.1869 287.272 li
23.8669 287.692 24.3469 288.212 24.6469 288.812 cv
24.9469 289.412 25.1069 290.172 25.1069 291.052 cv
25.1069 292.172 24.8069 293.072 24.1869 293.732 cv
23.5669 294.392 22.7269 294.712 21.6669 294.712 cv
20.4469 294.712 19.5269 294.312 18.8869 293.472 cv
18.2669 292.652 17.9469 291.432 17.9469 289.792 cv
17.9469 287.272 li
17.7669 287.272 li
16.9469 287.272 16.3069 287.552 15.8469 288.092 cv
15.4069 288.632 15.1669 289.392 15.1669 290.372 cv
15.1669 291.012 15.2469 291.612 15.4069 292.212 cv
15.5669 292.812 15.7869 293.372 16.0669 293.912 cv
14.4069 293.912 li
14.1669 293.272 13.9669 292.632 13.8469 292.012 cv
13.7269 291.392 13.6469 290.792 13.6469 290.192 cv
13.6469 288.612 14.0669 287.432 14.8869 286.652 cv
15.7069 285.872 16.9469 285.472 18.6069 285.472 cv
f
14.3269 273.892 mo
16.0069 273.892 li
15.7269 274.412 15.5269 274.912 15.3869 275.432 cv
15.2469 275.952 15.1669 276.452 15.1669 276.972 cv
15.1669 278.132 15.5469 279.052 16.2869 279.692 cv
17.0269 280.332 18.0669 280.652 19.3869 280.652 cv
20.7269 280.652 21.7669 280.332 22.5069 279.692 cv
23.2469 279.052 23.6069 278.132 23.6069 276.972 cv
23.6069 276.452 23.5469 275.952 23.4069 275.432 cv
23.2669 274.912 23.0469 274.412 22.7669 273.892 cv
24.4269 273.892 li
24.6669 274.412 24.8469 274.932 24.9469 275.452 cv
25.0469 275.992 25.1069 276.572 25.1069 277.172 cv
25.1069 278.812 24.6069 280.132 23.5669 281.092 cv
22.5469 282.072 21.1469 282.552 19.3869 282.552 cv
17.6069 282.552 16.2069 282.072 15.1869 281.092 cv
14.1669 280.112 13.6469 278.772 13.6469 277.052 cv
13.6469 276.492 13.7069 275.952 13.8269 275.432 cv
13.9469 274.912 14.1069 274.392 14.3269 273.892 cv
f
25.8469 266.212 mo
27.1269 266.732 27.9869 267.232 28.3869 267.712 cv
28.7869 268.192 28.9869 268.832 28.9869 269.632 cv
28.9869 271.072 li
27.4869 271.072 li
27.4869 270.012 li
27.4869 269.532 27.3669 269.152 27.1269 268.872 cv
26.8869 268.592 26.3469 268.292 25.4669 267.952 cv
24.6669 267.632 li
13.9069 272.052 li
13.9069 270.152 li
22.4669 266.732 li
13.9069 263.312 li
13.9069 261.412 li
25.8469 266.212 li
f
18.0069 245.572 mo
18.1669 245.152 18.4669 244.732 18.9269 244.332 cv
19.4069 243.932 20.0469 243.532 20.8669 243.132 cv
24.8469 241.132 li
24.8469 243.252 li
21.1069 245.112 li
20.1469 245.592 19.4869 246.072 19.1669 246.512 cv
18.8469 246.972 18.6869 247.592 18.6869 248.372 cv
18.6869 250.512 li
24.8469 250.512 li
24.8469 252.492 li
10.2669 252.492 li
10.2669 248.032 li
10.2669 246.372 10.6269 245.132 11.3069 244.312 cv
12.0069 243.492 13.0669 243.072 14.4669 243.072 cv
15.3869 243.072 16.1669 243.292 16.7669 243.712 cv
17.3669 244.152 17.7869 244.772 18.0069 245.572 cv
11.8869 250.512 mo
17.0669 250.512 li
17.0669 248.032 li
17.0669 247.092 16.8469 246.372 16.4069 245.892 cv
15.9669 245.412 15.3269 245.152 14.4669 245.152 cv
13.6269 245.152 12.9869 245.412 12.5469 245.892 cv
12.1069 246.372 11.8869 247.092 11.8869 248.032 cv
11.8869 250.512 li
f
19.3469 233.692 mo
19.3469 235.152 19.5269 236.152 19.8469 236.712 cv
20.1869 237.272 20.7469 237.552 21.5469 237.552 cv
22.1869 237.552 22.7069 237.352 23.0669 236.932 cv
23.4469 236.512 23.6269 235.932 23.6269 235.212 cv
23.6269 234.212 23.2869 233.412 22.5669 232.812 cv
21.8669 232.212 20.9269 231.912 19.7469 231.912 cv
19.3469 231.912 li
19.3469 233.692 li
18.6069 230.112 mo
24.8469 230.112 li
24.8469 231.912 li
23.1869 231.912 li
23.8669 232.332 24.3469 232.852 24.6469 233.452 cv
24.9469 234.052 25.1069 234.812 25.1069 235.692 cv
25.1069 236.812 24.8069 237.712 24.1869 238.372 cv
23.5669 239.032 22.7269 239.352 21.6669 239.352 cv
20.4469 239.352 19.5269 238.952 18.8869 238.112 cv
18.2669 237.292 17.9469 236.072 17.9469 234.432 cv
17.9469 231.912 li
17.7669 231.912 li
16.9469 231.912 16.3069 232.192 15.8469 232.732 cv
15.4069 233.272 15.1669 234.032 15.1669 235.012 cv
15.1669 235.652 15.2469 236.252 15.4069 236.852 cv
15.5669 237.452 15.7869 238.012 16.0669 238.552 cv
14.4069 238.552 li
14.1669 237.912 13.9669 237.272 13.8469 236.652 cv
13.7269 236.032 13.6469 235.432 13.6469 234.832 cv
13.6469 233.252 14.0669 232.072 14.8869 231.292 cv
15.7069 230.512 16.9469 230.112 18.6069 230.112 cv
f
10.8069 224.632 mo
13.9069 224.632 li
13.9069 220.932 li
15.3069 220.932 li
15.3069 224.632 li
21.2469 224.632 li
22.1469 224.632 22.7269 224.512 22.9669 224.272 cv
23.2269 224.032 23.3469 223.532 23.3469 222.772 cv
23.3469 220.932 li
24.8469 220.932 li
24.8469 222.772 li
24.8469 224.172 24.5869 225.132 24.0669 225.652 cv
23.5469 226.172 22.6069 226.432 21.2469 226.432 cv
15.3069 226.432 li
15.3069 227.752 li
13.9069 227.752 li
13.9069 226.432 li
10.8069 226.432 li
10.8069 224.632 li
f
18.9269 209.212 mo
19.8069 209.212 li
19.8069 217.472 li
21.0469 217.392 22.0069 217.032 22.6469 216.352 cv
23.2869 215.692 23.6069 214.772 23.6069 213.572 cv
23.6069 212.892 23.5269 212.212 23.3669 211.572 cv
23.2069 210.932 22.9469 210.272 22.5869 209.632 cv
24.2869 209.632 li
24.5669 210.272 24.7869 210.932 24.9069 211.612 cv
25.0269 212.292 25.1069 212.992 25.1069 213.672 cv
25.1069 215.432 24.6069 216.812 23.6069 217.832 cv
22.6069 218.852 21.2269 219.352 19.4869 219.352 cv
17.7069 219.352 16.2869 218.872 15.2269 217.912 cv
14.1869 216.952 13.6469 215.632 13.6469 213.992 cv
13.6469 212.512 14.1269 211.352 15.0669 210.492 cv
16.0269 209.652 17.3069 209.212 18.9269 209.212 cv
18.4069 211.012 mo
17.4269 211.032 16.6469 211.312 16.0469 211.832 cv
15.4669 212.372 15.1669 213.092 15.1669 213.972 cv
15.1669 214.972 15.4669 215.772 16.0269 216.372 cv
16.5869 216.972 17.3869 217.332 18.4069 217.412 cv
18.4069 211.012 li
f
1.5 lw
2 lc
120.498 509.813 mo
130.336 379.56 li
140.174 323.872 li
150.012 290.682 li
159.85 264.912 li
169.688 255.864 li
179.526 244.608 li
189.364 227.818 li
199.202 209.062 li
209.04 185.459 li
218.878 164.832 li
228.716 150.412 li
238.554 137.984 li
248.392 126.943 li
258.23 115.351 li
268.068 107.218 li
277.906 101.321 li
287.744 92.9058 li
297.582 87.3046 li
307.421 83.4808 li
317.259 82.2421 li
327.097 79.4684 li
336.935 76.1562 li
346.773 72.5747 li
356.611 69.5183 li
366.449 67.4583 li
376.287 65.4117 li
386.125 63.5132 li
395.963 62.463 li
405.801 60.605 li
415.639 59.4067 li
425.477 58.141 li
435.315 56.8619 li
445.153 56.1752 li
454.991 55.3809 li
464.829 54.3441 li
474.667 53.5093 li
484.505 53.2804 li
494.343 53.3746 li
504.181 53.4958 li
514.019 52.4322 li
523.857 51.8801 li
533.695 52.2437 li
543.533 50.9376 li
553.371 50.0759 li
563.209 49.4969 li
573.047 49.4296 li
582.885 49.0257 li
592.723 47.8408 li
602.561 47.006 li
612.399 46.1848 li
622.237 46.279 li
632.075 45.2827 li
641.913 44.973 li
651.751 44.7172 li
661.589 44.394 li
671.427 44.192 li
681.265 44.0709 li
691.103 43.6938 li
700.941 43.7208 li
710.779 43.8689 li
720.617 43.9766 li
730.455 43.3842 li
740.293 43.6669 li
750.131 43.6669 li
759.969 43.6669 li
769.807 42.7244 li
779.645 40.0989 li
789.483 40.072 li
799.321 39.9777 li
809.159 39.9104 li
818.997 39.8969 li
828.835 39.8431 li
838.673 39.8431 li
848.511 39.7892 li
858.349 39.7219 li
868.187 39.6949 li
878.025 39.668 li
887.863 39.6007 li
897.701 39.5872 li
907.539 39.5603 li
917.378 39.5334 li
927.216 39.5334 li
937.054 39.4796 li
946.892 39.4122 li
956.73 39.3853 li
966.568 39.3853 li
976.406 39.3987 li
986.244 39.3314 li
996.082 39.3449 li
1005.92 39.3314 li
1015.76 39.3179 li
1025.6 39.291 li
1035.43 39.2506 li
1045.27 39.2237 li
1055.11 39.2103 li
1064.95 39.1833 li
1074.79 39.1564 li
1084.62 39.1699 li
1094.46 39.1295 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
120.498 517.65 mo
130.336 398.228 li
140.174 338.184 li
150.012 302.679 li
159.85 275.172 li
169.688 266.709 li
179.526 255.056 li
189.364 237.748 li
199.202 217.935 li
209.04 194.487 li
218.878 171.544 li
228.716 157.629 li
238.554 144.258 li
248.392 133.231 li
258.23 122.426 li
268.068 113.661 li
277.906 107.4 li
287.744 98.4329 li
297.582 91.1621 li
307.421 87.8297 li
317.259 86.7593 li
327.097 84.3964 li
336.935 81.4476 li
346.773 77.8729 li
356.611 75.005 li
366.449 73.0056 li
376.287 71.1273 li
386.125 69.5318 li
395.963 68.4412 li
405.801 66.2397 li
415.639 64.927 li
425.477 63.2507 li
435.315 62.0187 li
445.153 60.7463 li
454.991 60.1606 li
464.829 59.1508 li
474.667 58.2016 li
484.505 58.1612 li
494.343 59.0095 li
504.181 58.9286 li
514.019 58.3228 li
523.857 57.5755 li
533.695 58.1006 li
543.533 56.0608 li
553.371 55.3943 li
563.209 54.9702 li
573.047 55.0106 li
582.885 54.4249 li
592.723 53.6574 li
602.561 53.2333 li
612.399 52.486 li
622.237 52.2437 li
632.075 51.456 li
641.913 51.456 li
651.751 50.9915 li
661.589 50.7895 li
671.427 50.6279 li
681.265 50.1837 li
691.103 49.9211 li
700.941 49.6989 li
710.779 49.9211 li
720.617 49.7393 li
730.455 49.3556 li
740.293 49.7797 li
750.131 49.7595 li
759.969 49.8201 li
769.807 49.1536 li
779.645 47.1744 li
789.483 47.1744 li
799.321 47.1138 li
809.159 47.033 li
818.997 47.0128 li
828.835 46.9926 li
838.673 47.0128 li
848.511 47.033 li
858.349 46.8916 li
868.187 46.8916 li
878.025 46.8916 li
887.863 46.8109 li
897.701 46.7906 li
907.539 46.7098 li
917.378 46.73 li
927.216 46.7906 li
937.054 46.7906 li
946.892 46.7704 li
956.73 46.7098 li
966.568 46.6492 li
976.406 46.6492 li
986.244 46.5887 li
996.082 46.5685 li
1005.92 46.4675 li
1015.76 46.4877 li
1025.6 46.4877 li
1035.43 46.5079 li
1045.27 46.4877 li
1055.11 46.4675 li
1064.95 46.4473 li
1074.79 46.4069 li
1084.62 46.3867 li
1094.46 46.4069 li
@
gsave
116.998 521.15 mo
123.998 521.15 li
123.998 514.149 li
116.998 514.149 li
116.998 521.15 li
clp
117.498 520.65 mo
123.498 514.65 li
117.498 514.65 mo
123.498 520.65 li
f
1 lw
0 lc
117.498 520.65 mo
123.498 514.65 li
117.498 514.65 mo
123.498 520.65 li
@
grestore
gsave
126.836 401.728 mo
133.836 401.728 li
133.836 394.728 li
126.836 394.728 li
126.836 401.728 li
clp
127.336 401.228 mo
133.336 395.228 li
127.336 395.228 mo
133.336 401.228 li
f
1 lw
0 lc
127.336 401.228 mo
133.336 395.228 li
127.336 395.228 mo
133.336 401.228 li
@
grestore
gsave
136.674 341.684 mo
143.674 341.684 li
143.674 334.684 li
136.674 334.684 li
136.674 341.684 li
clp
137.174 341.184 mo
143.174 335.184 li
137.174 335.184 mo
143.174 341.184 li
f
1 lw
0 lc
137.174 341.184 mo
143.174 335.184 li
137.174 335.184 mo
143.174 341.184 li
@
grestore
gsave
146.512 306.179 mo
153.512 306.179 li
153.512 299.179 li
146.512 299.179 li
146.512 306.179 li
clp
147.012 305.679 mo
153.012 299.679 li
147.012 299.679 mo
153.012 305.679 li
f
1 lw
0 lc
147.012 305.679 mo
153.012 299.679 li
147.012 299.679 mo
153.012 305.679 li
@
grestore
gsave
156.35 278.672 mo
163.35 278.672 li
163.35 271.671 li
156.35 271.671 li
156.35 278.672 li
clp
156.85 278.172 mo
162.85 272.172 li
156.85 272.172 mo
162.85 278.172 li
f
1 lw
0 lc
156.85 278.172 mo
162.85 272.172 li
156.85 272.172 mo
162.85 278.172 li
@
grestore
gsave
166.188 270.209 mo
173.188 270.209 li
173.188 263.209 li
166.188 263.209 li
166.188 270.209 li
clp
166.688 269.709 mo
172.688 263.709 li
166.688 263.709 mo
172.688 269.709 li
f
1 lw
0 lc
166.688 269.709 mo
172.688 263.709 li
166.688 263.709 mo
172.688 269.709 li
@
grestore
gsave
176.026 258.556 mo
183.026 258.556 li
183.026 251.556 li
176.026 251.556 li
176.026 258.556 li
clp
176.526 258.056 mo
182.526 252.056 li
176.526 252.056 mo
182.526 258.056 li
f
1 lw
0 lc
176.526 258.056 mo
182.526 252.056 li
176.526 252.056 mo
182.526 258.056 li
@
grestore
gsave
185.864 241.248 mo
192.864 241.248 li
192.864 234.248 li
185.864 234.248 li
185.864 241.248 li
clp
186.364 240.748 mo
192.364 234.748 li
186.364 234.748 mo
192.364 240.748 li
f
1 lw
0 lc
186.364 240.748 mo
192.364 234.748 li
186.364 234.748 mo
192.364 240.748 li
@
grestore
gsave
195.702 221.435 mo
202.702 221.435 li
202.702 214.435 li
195.702 214.435 li
195.702 221.435 li
clp
196.202 220.935 mo
202.202 214.935 li
196.202 214.935 mo
202.202 220.935 li
f
1 lw
0 lc
196.202 220.935 mo
202.202 214.935 li
196.202 214.935 mo
202.202 220.935 li
@
grestore
gsave
205.54 197.987 mo
212.54 197.987 li
212.54 190.987 li
205.54 190.987 li
205.54 197.987 li
clp
206.04 197.487 mo
212.04 191.487 li
206.04 191.487 mo
212.04 197.487 li
f
1 lw
0 lc
206.04 197.487 mo
212.04 191.487 li
206.04 191.487 mo
212.04 197.487 li
@
grestore
gsave
215.378 175.044 mo
222.378 175.044 li
222.378 168.044 li
215.378 168.044 li
215.378 175.044 li
clp
215.878 174.544 mo
221.878 168.544 li
215.878 168.544 mo
221.878 174.544 li
f
1 lw
0 lc
215.878 174.544 mo
221.878 168.544 li
215.878 168.544 mo
221.878 174.544 li
@
grestore
gsave
225.216 161.129 mo
232.216 161.129 li
232.216 154.129 li
225.216 154.129 li
225.216 161.129 li
clp
225.716 160.629 mo
231.716 154.629 li
225.716 154.629 mo
231.716 160.629 li
f
1 lw
0 lc
225.716 160.629 mo
231.716 154.629 li
225.716 154.629 mo
231.716 160.629 li
@
grestore
gsave
235.055 147.758 mo
242.054 147.758 li
242.054 140.759 li
235.055 140.759 li
235.055 147.758 li
clp
235.554 147.258 mo
241.554 141.258 li
235.554 141.258 mo
241.554 147.258 li
f
1 lw
0 lc
235.554 147.258 mo
241.554 141.258 li
235.554 141.258 mo
241.554 147.258 li
@
grestore
gsave
244.892 136.731 mo
251.893 136.731 li
251.893 129.731 li
244.892 129.731 li
244.892 136.731 li
clp
245.392 136.231 mo
251.392 130.231 li
245.392 130.231 mo
251.392 136.231 li
f
1 lw
0 lc
245.392 136.231 mo
251.392 130.231 li
245.392 130.231 mo
251.392 136.231 li
@
grestore
gsave
254.73 125.926 mo
261.73 125.926 li
261.73 118.926 li
254.73 118.926 li
254.73 125.926 li
clp
255.23 125.426 mo
261.23 119.426 li
255.23 119.426 mo
261.23 125.426 li
f
1 lw
0 lc
255.23 125.426 mo
261.23 119.426 li
255.23 119.426 mo
261.23 125.426 li
@
grestore
gsave
264.568 117.161 mo
271.568 117.161 li
271.568 110.161 li
264.568 110.161 li
264.568 117.161 li
clp
265.068 116.661 mo
271.068 110.661 li
265.068 110.661 mo
271.068 116.661 li
f
1 lw
0 lc
265.068 116.661 mo
271.068 110.661 li
265.068 110.661 mo
271.068 116.661 li
@
grestore
gsave
274.406 110.9 mo
281.406 110.9 li
281.406 103.9 li
274.406 103.9 li
274.406 110.9 li
clp
274.906 110.4 mo
280.906 104.4 li
274.906 104.4 mo
280.906 110.4 li
f
1 lw
0 lc
274.906 110.4 mo
280.906 104.4 li
274.906 104.4 mo
280.906 110.4 li
@
grestore
gsave
284.244 101.933 mo
291.244 101.933 li
291.244 94.9327 li
284.244 94.9327 li
284.244 101.933 li
clp
284.744 101.433 mo
290.744 95.4329 li
284.744 95.4329 mo
290.744 101.433 li
f
1 lw
0 lc
284.744 101.433 mo
290.744 95.4329 li
284.744 95.4329 mo
290.744 101.433 li
@
grestore
gsave
294.083 94.6621 mo
301.082 94.6621 li
301.082 87.6621 li
294.083 87.6621 li
294.083 94.6621 li
clp
294.582 94.1622 mo
300.582 88.1622 li
294.582 88.1622 mo
300.582 94.1622 li
f
1 lw
0 lc
294.582 94.1622 mo
300.582 88.1622 li
294.582 88.1622 mo
300.582 94.1622 li
@
grestore
gsave
303.921 91.3298 mo
310.921 91.3298 li
310.921 84.3298 li
303.921 84.3298 li
303.921 91.3298 li
clp
304.42 90.8298 mo
310.42 84.8298 li
304.42 84.8298 mo
310.42 90.8298 li
f
1 lw
0 lc
304.42 90.8298 mo
310.42 84.8298 li
304.42 84.8298 mo
310.42 90.8298 li
@
grestore
gsave
313.758 90.2594 mo
320.759 90.2594 li
320.759 83.2595 li
313.758 83.2595 li
313.758 90.2594 li
clp
314.258 89.7593 mo
320.258 83.7593 li
314.258 83.7593 mo
320.258 89.7593 li
f
1 lw
0 lc
314.258 89.7593 mo
320.258 83.7593 li
314.258 83.7593 mo
320.258 89.7593 li
@
grestore
gsave
323.596 87.8964 mo
330.596 87.8964 li
330.596 80.8965 li
323.596 80.8965 li
323.596 87.8964 li
clp
324.096 87.3964 mo
330.096 81.3964 li
324.096 81.3964 mo
330.096 87.3964 li
f
1 lw
0 lc
324.096 87.3964 mo
330.096 81.3964 li
324.096 81.3964 mo
330.096 87.3964 li
@
grestore
gsave
333.434 84.9476 mo
340.434 84.9476 li
340.434 77.9476 li
333.434 77.9476 li
333.434 84.9476 li
clp
333.934 84.4477 mo
339.934 78.4477 li
333.934 78.4477 mo
339.934 84.4477 li
f
1 lw
0 lc
333.934 84.4477 mo
339.934 78.4477 li
333.934 78.4477 mo
339.934 84.4477 li
@
grestore
gsave
343.272 81.373 mo
350.272 81.373 li
350.272 74.3731 li
343.272 74.3731 li
343.272 81.373 li
clp
343.772 80.8729 mo
349.772 74.8729 li
343.772 74.8729 mo
349.772 80.8729 li
f
1 lw
0 lc
343.772 80.8729 mo
349.772 74.8729 li
343.772 74.8729 mo
349.772 80.8729 li
@
grestore
gsave
353.111 78.5051 mo
360.111 78.5051 li
360.111 71.5052 li
353.111 71.5052 li
353.111 78.5051 li
clp
353.611 78.0051 mo
359.611 72.0051 li
353.611 72.0051 mo
359.611 78.0051 li
f
1 lw
0 lc
353.611 78.0051 mo
359.611 72.0051 li
353.611 72.0051 mo
359.611 78.0051 li
@
grestore
gsave
362.949 76.5056 mo
369.949 76.5056 li
369.949 69.5056 li
362.949 69.5056 li
362.949 76.5056 li
clp
363.449 76.0056 mo
369.449 70.0056 li
363.449 70.0056 mo
369.449 76.0056 li
f
1 lw
0 lc
363.449 76.0056 mo
369.449 70.0056 li
363.449 70.0056 mo
369.449 76.0056 li
@
grestore
gsave
372.787 74.6274 mo
379.787 74.6274 li
379.787 67.6272 li
372.787 67.6272 li
372.787 74.6274 li
clp
373.287 74.1273 mo
379.287 68.1273 li
373.287 68.1273 mo
379.287 74.1273 li
f
1 lw
0 lc
373.287 74.1273 mo
379.287 68.1273 li
373.287 68.1273 mo
379.287 74.1273 li
@
grestore
gsave
382.624 73.0317 mo
389.625 73.0317 li
389.625 66.0318 li
382.624 66.0318 li
382.624 73.0317 li
clp
383.125 72.5318 mo
389.125 66.5318 li
383.125 66.5318 mo
389.125 72.5318 li
f
1 lw
0 lc
383.125 72.5318 mo
389.125 66.5318 li
383.125 66.5318 mo
389.125 72.5318 li
@
grestore
gsave
392.462 71.9413 mo
399.462 71.9413 li
399.462 64.9413 li
392.462 64.9413 li
392.462 71.9413 li
clp
392.963 71.4412 mo
398.963 65.4412 li
392.963 65.4412 mo
398.963 71.4412 li
f
1 lw
0 lc
392.963 71.4412 mo
398.963 65.4412 li
392.963 65.4412 mo
398.963 71.4412 li
@
grestore
gsave
402.301 69.7399 mo
409.3 69.7399 li
409.3 62.74 li
402.301 62.74 li
402.301 69.7399 li
clp
402.801 69.2398 mo
408.801 63.2398 li
402.801 63.2398 mo
408.801 69.2398 li
f
1 lw
0 lc
402.801 69.2398 mo
408.801 63.2398 li
402.801 63.2398 mo
408.801 69.2398 li
@
grestore
gsave
412.139 68.4269 mo
419.138 68.4269 li
419.138 61.427 li
412.139 61.427 li
412.139 68.4269 li
clp
412.639 67.9271 mo
418.639 61.9271 li
412.639 61.9271 mo
418.639 67.9271 li
f
1 lw
0 lc
412.639 67.9271 mo
418.639 61.9271 li
412.639 61.9271 mo
418.639 67.9271 li
@
grestore
gsave
421.977 66.7506 mo
428.977 66.7506 li
428.977 59.7506 li
421.977 59.7506 li
421.977 66.7506 li
clp
422.477 66.2507 mo
428.477 60.2507 li
422.477 60.2507 mo
428.477 66.2507 li
f
1 lw
0 lc
422.477 66.2507 mo
428.477 60.2507 li
422.477 60.2507 mo
428.477 66.2507 li
@
grestore
gsave
431.815 65.5189 mo
438.815 65.5189 li
438.815 58.5186 li
431.815 58.5186 li
431.815 65.5189 li
clp
432.315 65.0187 mo
438.315 59.0187 li
432.315 59.0187 mo
438.315 65.0187 li
f
1 lw
0 lc
432.315 65.0187 mo
438.315 59.0187 li
432.315 59.0187 mo
438.315 65.0187 li
@
grestore
gsave
441.653 64.2464 mo
448.653 64.2464 li
448.653 57.2465 li
441.653 57.2465 li
441.653 64.2464 li
clp
442.153 63.7463 mo
448.153 57.7463 li
442.153 57.7463 mo
448.153 63.7463 li
f
1 lw
0 lc
442.153 63.7463 mo
448.153 57.7463 li
442.153 57.7463 mo
448.153 63.7463 li
@
grestore
gsave
451.491 63.6605 mo
458.491 63.6605 li
458.491 56.6606 li
451.491 56.6606 li
451.491 63.6605 li
clp
451.991 63.1606 mo
457.991 57.1606 li
451.991 57.1606 mo
457.991 63.1606 li
f
1 lw
0 lc
451.991 63.1606 mo
457.991 57.1606 li
451.991 57.1606 mo
457.991 63.1606 li
@
grestore
gsave
461.329 62.6507 mo
468.329 62.6507 li
468.329 55.6507 li
461.329 55.6507 li
461.329 62.6507 li
clp
461.829 62.1508 mo
467.829 56.1508 li
461.829 56.1508 mo
467.829 62.1508 li
f
1 lw
0 lc
461.829 62.1508 mo
467.829 56.1508 li
461.829 56.1508 mo
467.829 62.1508 li
@
grestore
gsave
471.167 61.7018 mo
478.167 61.7018 li
478.167 54.7015 li
471.167 54.7015 li
471.167 61.7018 li
clp
471.667 61.2016 mo
477.667 55.2016 li
471.667 55.2016 mo
477.667 61.2016 li
f
1 lw
0 lc
471.667 61.2016 mo
477.667 55.2016 li
471.667 55.2016 mo
477.667 61.2016 li
@
grestore
gsave
481.005 61.6613 mo
488.005 61.6613 li
488.005 54.6613 li
481.005 54.6613 li
481.005 61.6613 li
clp
481.505 61.1612 mo
487.505 55.1612 li
481.505 55.1612 mo
487.505 61.1612 li
f
1 lw
0 lc
481.505 61.1612 mo
487.505 55.1612 li
481.505 55.1612 mo
487.505 61.1612 li
@
grestore
gsave
490.843 62.5095 mo
497.843 62.5095 li
497.843 55.5095 li
490.843 55.5095 li
490.843 62.5095 li
clp
491.343 62.0095 mo
497.343 56.0095 li
491.343 56.0095 mo
497.343 62.0095 li
f
1 lw
0 lc
491.343 62.0095 mo
497.343 56.0095 li
491.343 56.0095 mo
497.343 62.0095 li
@
grestore
gsave
500.681 62.4285 mo
507.681 62.4285 li
507.681 55.4286 li
500.681 55.4286 li
500.681 62.4285 li
clp
501.181 61.9286 mo
507.181 55.9286 li
501.181 55.9286 mo
507.181 61.9286 li
f
1 lw
0 lc
501.181 61.9286 mo
507.181 55.9286 li
501.181 55.9286 mo
507.181 61.9286 li
@
grestore
gsave
510.519 61.8229 mo
517.519 61.8229 li
517.519 54.8226 li
510.519 54.8226 li
510.519 61.8229 li
clp
511.019 61.3228 mo
517.019 55.3228 li
511.019 55.3228 mo
517.019 61.3228 li
f
1 lw
0 lc
511.019 61.3228 mo
517.019 55.3228 li
511.019 55.3228 mo
517.019 61.3228 li
@
grestore
gsave
520.357 61.0754 mo
527.357 61.0754 li
527.357 54.0754 li
520.357 54.0754 li
520.357 61.0754 li
clp
520.857 60.5755 mo
526.857 54.5755 li
520.857 54.5755 mo
526.857 60.5755 li
f
1 lw
0 lc
520.857 60.5755 mo
526.857 54.5755 li
520.857 54.5755 mo
526.857 60.5755 li
@
grestore
gsave
530.195 61.6007 mo
537.195 61.6007 li
537.195 54.6008 li
530.195 54.6008 li
530.195 61.6007 li
clp
530.695 61.1006 mo
536.695 55.1006 li
530.695 55.1006 mo
536.695 61.1006 li
f
1 lw
0 lc
530.695 61.1006 mo
536.695 55.1006 li
530.695 55.1006 mo
536.695 61.1006 li
@
grestore
gsave
540.033 59.5606 mo
547.033 59.5606 li
547.033 52.5607 li
540.033 52.5607 li
540.033 59.5606 li
clp
540.533 59.0607 mo
546.533 53.0607 li
540.533 53.0607 mo
546.533 59.0607 li
f
1 lw
0 lc
540.533 59.0607 mo
546.533 53.0607 li
540.533 53.0607 mo
546.533 59.0607 li
@
grestore
gsave
549.871 58.8941 mo
556.871 58.8941 li
556.871 51.8941 li
549.871 51.8941 li
549.871 58.8941 li
clp
550.371 58.3942 mo
556.371 52.3942 li
550.371 52.3942 mo
556.371 58.3942 li
f
1 lw
0 lc
550.371 58.3942 mo
556.371 52.3942 li
550.371 52.3942 mo
556.371 58.3942 li
@
grestore
gsave
559.709 58.4702 mo
566.709 58.4702 li
566.709 51.4702 li
559.709 51.4702 li
559.709 58.4702 li
clp
560.209 57.9701 mo
566.209 51.9701 li
560.209 51.9701 mo
566.209 57.9701 li
f
1 lw
0 lc
560.209 57.9701 mo
566.209 51.9701 li
560.209 51.9701 mo
566.209 57.9701 li
@
grestore
gsave
569.547 58.5106 mo
576.547 58.5106 li
576.547 51.5104 li
569.547 51.5104 li
569.547 58.5106 li
clp
570.047 58.0105 mo
576.047 52.0105 li
570.047 52.0105 mo
576.047 58.0105 li
f
1 lw
0 lc
570.047 58.0105 mo
576.047 52.0105 li
570.047 52.0105 mo
576.047 58.0105 li
@
grestore
gsave
579.385 57.9248 mo
586.385 57.9248 li
586.385 50.9248 li
579.385 50.9248 li
579.385 57.9248 li
clp
579.885 57.4248 mo
585.885 51.4248 li
579.885 51.4248 mo
585.885 57.4248 li
f
1 lw
0 lc
579.885 57.4248 mo
585.885 51.4248 li
579.885 51.4248 mo
585.885 57.4248 li
@
grestore
gsave
589.223 57.1575 mo
596.223 57.1575 li
596.223 50.1572 li
589.223 50.1572 li
589.223 57.1575 li
clp
589.723 56.6573 mo
595.723 50.6573 li
589.723 50.6573 mo
595.723 56.6573 li
f
1 lw
0 lc
589.723 56.6573 mo
595.723 50.6573 li
589.723 50.6573 mo
595.723 56.6573 li
@
grestore
gsave
599.061 56.7332 mo
606.061 56.7332 li
606.061 49.7333 li
599.061 49.7333 li
599.061 56.7332 li
clp
599.561 56.2332 mo
605.561 50.2332 li
599.561 50.2332 mo
605.561 56.2332 li
f
1 lw
0 lc
599.561 56.2332 mo
605.561 50.2332 li
599.561 50.2332 mo
605.561 56.2332 li
@
grestore
gsave
608.899 55.9861 mo
615.899 55.9861 li
615.899 48.9861 li
608.899 48.9861 li
608.899 55.9861 li
clp
609.399 55.486 mo
615.399 49.486 li
609.399 49.486 mo
615.399 55.486 li
f
1 lw
0 lc
609.399 55.486 mo
615.399 49.486 li
609.399 49.486 mo
615.399 55.486 li
@
grestore
gsave
618.737 55.7435 mo
625.737 55.7435 li
625.737 48.7435 li
618.737 48.7435 li
618.737 55.7435 li
clp
619.237 55.2436 mo
625.237 49.2436 li
619.237 49.2436 mo
625.237 55.2436 li
f
1 lw
0 lc
619.237 55.2436 mo
625.237 49.2436 li
619.237 49.2436 mo
625.237 55.2436 li
@
grestore
gsave
628.575 54.9558 mo
635.575 54.9558 li
635.575 47.9559 li
628.575 47.9559 li
628.575 54.9558 li
clp
629.075 54.4559 mo
635.075 48.4559 li
629.075 48.4559 mo
635.075 54.4559 li
f
1 lw
0 lc
629.075 54.4559 mo
635.075 48.4559 li
629.075 48.4559 mo
635.075 54.4559 li
@
grestore
gsave
638.413 54.9558 mo
645.413 54.9558 li
645.413 47.9559 li
638.413 47.9559 li
638.413 54.9558 li
clp
638.913 54.4559 mo
644.913 48.4559 li
638.913 48.4559 mo
644.913 54.4559 li
f
1 lw
0 lc
638.913 54.4559 mo
644.913 48.4559 li
638.913 48.4559 mo
644.913 54.4559 li
@
grestore
gsave
648.251 54.4914 mo
655.251 54.4914 li
655.251 47.4915 li
648.251 47.4915 li
648.251 54.4914 li
clp
648.751 53.9914 mo
654.751 47.9914 li
648.751 47.9914 mo
654.751 53.9914 li
f
1 lw
0 lc
648.751 53.9914 mo
654.751 47.9914 li
648.751 47.9914 mo
654.751 53.9914 li
@
grestore
gsave
658.089 54.2893 mo
665.089 54.2893 li
665.089 47.2893 li
658.089 47.2893 li
658.089 54.2893 li
clp
658.589 53.7894 mo
664.589 47.7894 li
658.589 47.7894 mo
664.589 53.7894 li
f
1 lw
0 lc
658.589 53.7894 mo
664.589 47.7894 li
658.589 47.7894 mo
664.589 53.7894 li
@
grestore
gsave
667.927 54.128 mo
674.927 54.128 li
674.927 47.1277 li
667.927 47.1277 li
667.927 54.128 li
clp
668.427 53.6279 mo
674.427 47.6279 li
668.427 47.6279 mo
674.427 53.6279 li
f
1 lw
0 lc
668.427 53.6279 mo
674.427 47.6279 li
668.427 47.6279 mo
674.427 53.6279 li
@
grestore
gsave
677.765 53.6837 mo
684.765 53.6837 li
684.765 46.6834 li
677.765 46.6834 li
677.765 53.6837 li
clp
678.265 53.1835 mo
684.265 47.1835 li
678.265 47.1835 mo
684.265 53.1835 li
f
1 lw
0 lc
678.265 53.1835 mo
684.265 47.1835 li
678.265 47.1835 mo
684.265 53.1835 li
@
grestore
gsave
687.603 53.421 mo
694.603 53.421 li
694.603 46.4211 li
687.603 46.4211 li
687.603 53.421 li
clp
688.103 52.921 mo
694.103 46.921 li
688.103 46.921 mo
694.103 52.921 li
f
1 lw
0 lc
688.103 52.921 mo
694.103 46.921 li
688.103 46.921 mo
694.103 52.921 li
@
grestore
gsave
697.441 53.1988 mo
704.441 53.1988 li
704.441 46.1989 li
697.441 46.1989 li
697.441 53.1988 li
clp
697.941 52.6988 mo
703.941 46.6988 li
697.941 46.6988 mo
703.941 52.6988 li
f
1 lw
0 lc
697.941 52.6988 mo
703.941 46.6988 li
697.941 46.6988 mo
703.941 52.6988 li
@
grestore
gsave
707.279 53.421 mo
714.279 53.421 li
714.279 46.4211 li
707.279 46.4211 li
707.279 53.421 li
clp
707.779 52.921 mo
713.779 46.921 li
707.779 46.921 mo
713.779 52.921 li
f
1 lw
0 lc
707.779 52.921 mo
713.779 46.921 li
707.779 46.921 mo
713.779 52.921 li
@
grestore
gsave
717.117 53.2393 mo
724.117 53.2393 li
724.117 46.239 li
717.117 46.239 li
717.117 53.2393 li
clp
717.617 52.7392 mo
723.617 46.7392 li
717.617 46.7392 mo
723.617 52.7392 li
f
1 lw
0 lc
717.617 52.7392 mo
723.617 46.7392 li
717.617 46.7392 mo
723.617 52.7392 li
@
grestore
gsave
726.955 52.8555 mo
733.955 52.8555 li
733.955 45.8556 li
726.955 45.8556 li
726.955 52.8555 li
clp
727.455 52.3555 mo
733.455 46.3555 li
727.455 46.3555 mo
733.455 52.3555 li
f
1 lw
0 lc
727.455 52.3555 mo
733.455 46.3555 li
727.455 46.3555 mo
733.455 52.3555 li
@
grestore
gsave
736.793 53.2795 mo
743.793 53.2795 li
743.793 46.2795 li
736.793 46.2795 li
736.793 53.2795 li
clp
737.293 52.7796 mo
743.293 46.7796 li
737.293 46.7796 mo
743.293 52.7796 li
f
1 lw
0 lc
737.293 52.7796 mo
743.293 46.7796 li
737.293 46.7796 mo
743.293 52.7796 li
@
grestore
gsave
746.631 53.2594 mo
753.631 53.2594 li
753.631 46.2594 li
746.631 46.2594 li
746.631 53.2594 li
clp
747.131 52.7594 mo
753.131 46.7594 li
747.131 46.7594 mo
753.131 52.7594 li
f
1 lw
0 lc
747.131 52.7594 mo
753.131 46.7594 li
747.131 46.7594 mo
753.131 52.7594 li
@
grestore
gsave
756.469 53.32 mo
763.469 53.32 li
763.469 46.32 li
756.469 46.32 li
756.469 53.32 li
clp
756.969 52.82 mo
762.969 46.82 li
756.969 46.82 mo
762.969 52.82 li
f
1 lw
0 lc
756.969 52.82 mo
762.969 46.82 li
756.969 46.82 mo
762.969 52.82 li
@
grestore
gsave
766.307 52.6534 mo
773.307 52.6534 li
773.307 45.6535 li
766.307 45.6535 li
766.307 52.6534 li
clp
766.807 52.1535 mo
772.807 46.1535 li
766.807 46.1535 mo
772.807 52.1535 li
f
1 lw
0 lc
766.807 52.1535 mo
772.807 46.1535 li
766.807 46.1535 mo
772.807 52.1535 li
@
grestore
gsave
776.145 50.6743 mo
783.145 50.6743 li
783.145 43.6743 li
776.145 43.6743 li
776.145 50.6743 li
clp
776.645 50.1743 mo
782.645 44.1743 li
776.645 44.1743 mo
782.645 50.1743 li
f
1 lw
0 lc
776.645 50.1743 mo
782.645 44.1743 li
776.645 44.1743 mo
782.645 50.1743 li
@
grestore
gsave
785.983 50.6743 mo
792.983 50.6743 li
792.983 43.6743 li
785.983 43.6743 li
785.983 50.6743 li
clp
786.483 50.1743 mo
792.483 44.1743 li
786.483 44.1743 mo
792.483 50.1743 li
f
1 lw
0 lc
786.483 50.1743 mo
792.483 44.1743 li
786.483 44.1743 mo
792.483 50.1743 li
@
grestore
gsave
795.821 50.6137 mo
802.821 50.6137 li
802.821 43.6137 li
795.821 43.6137 li
795.821 50.6137 li
clp
796.321 50.1136 mo
802.321 44.1136 li
796.321 44.1136 mo
802.321 50.1136 li
f
1 lw
0 lc
796.321 50.1136 mo
802.321 44.1136 li
796.321 44.1136 mo
802.321 50.1136 li
@
grestore
gsave
805.659 50.5327 mo
812.659 50.5327 li
812.659 43.5328 li
805.659 43.5328 li
805.659 50.5327 li
clp
806.159 50.0328 mo
812.159 44.0328 li
806.159 44.0328 mo
812.159 50.0328 li
f
1 lw
0 lc
806.159 50.0328 mo
812.159 44.0328 li
806.159 44.0328 mo
812.159 50.0328 li
@
grestore
gsave
815.497 50.5126 mo
822.497 50.5126 li
822.497 43.5127 li
815.497 43.5127 li
815.497 50.5126 li
clp
815.997 50.0126 mo
821.997 44.0126 li
815.997 44.0126 mo
821.997 50.0126 li
f
1 lw
0 lc
815.997 50.0126 mo
821.997 44.0126 li
815.997 44.0126 mo
821.997 50.0126 li
@
grestore
gsave
825.335 50.4926 mo
832.335 50.4926 li
832.335 43.4923 li
825.335 43.4923 li
825.335 50.4926 li
clp
825.835 49.9924 mo
831.835 43.9924 li
825.835 43.9924 mo
831.835 49.9924 li
f
1 lw
0 lc
825.835 49.9924 mo
831.835 43.9924 li
825.835 43.9924 mo
831.835 49.9924 li
@
grestore
gsave
835.173 50.5126 mo
842.173 50.5126 li
842.173 43.5127 li
835.173 43.5127 li
835.173 50.5126 li
clp
835.673 50.0126 mo
841.673 44.0126 li
835.673 44.0126 mo
841.673 50.0126 li
f
1 lw
0 lc
835.673 50.0126 mo
841.673 44.0126 li
835.673 44.0126 mo
841.673 50.0126 li
@
grestore
gsave
845.011 50.5327 mo
852.011 50.5327 li
852.011 43.5328 li
845.011 43.5328 li
845.011 50.5327 li
clp
845.511 50.0328 mo
851.511 44.0328 li
845.511 44.0328 mo
851.511 50.0328 li
f
1 lw
0 lc
845.511 50.0328 mo
851.511 44.0328 li
845.511 44.0328 mo
851.511 50.0328 li
@
grestore
gsave
854.849 50.3915 mo
861.849 50.3915 li
861.849 43.3916 li
854.849 43.3916 li
854.849 50.3915 li
clp
855.349 49.8915 mo
861.349 43.8915 li
855.349 43.8915 mo
861.349 49.8915 li
f
1 lw
0 lc
855.349 49.8915 mo
861.349 43.8915 li
855.349 43.8915 mo
861.349 49.8915 li
@
grestore
gsave
864.687 50.3915 mo
871.687 50.3915 li
871.687 43.3916 li
864.687 43.3916 li
864.687 50.3915 li
clp
865.187 49.8915 mo
871.187 43.8915 li
865.187 43.8915 mo
871.187 49.8915 li
f
1 lw
0 lc
865.187 49.8915 mo
871.187 43.8915 li
865.187 43.8915 mo
871.187 49.8915 li
@
grestore
gsave
874.525 50.3915 mo
881.525 50.3915 li
881.525 43.3916 li
874.525 43.3916 li
874.525 50.3915 li
clp
875.025 49.8915 mo
881.025 43.8915 li
875.025 43.8915 mo
881.025 49.8915 li
f
1 lw
0 lc
875.025 49.8915 mo
881.025 43.8915 li
875.025 43.8915 mo
881.025 49.8915 li
@
grestore
gsave
884.363 50.3105 mo
891.363 50.3105 li
891.363 43.3106 li
884.363 43.3106 li
884.363 50.3105 li
clp
884.863 49.8107 mo
890.863 43.8107 li
884.863 43.8107 mo
890.863 49.8107 li
f
1 lw
0 lc
884.863 49.8107 mo
890.863 43.8107 li
884.863 43.8107 mo
890.863 49.8107 li
@
grestore
gsave
894.201 50.2905 mo
901.201 50.2905 li
901.201 43.2905 li
894.201 43.2905 li
894.201 50.2905 li
clp
894.701 49.7905 mo
900.701 43.7905 li
894.701 43.7905 mo
900.701 49.7905 li
f
1 lw
0 lc
894.701 49.7905 mo
900.701 43.7905 li
894.701 43.7905 mo
900.701 49.7905 li
@
grestore
gsave
904.039 50.2098 mo
911.039 50.2098 li
911.039 43.2095 li
904.039 43.2095 li
904.039 50.2098 li
clp
904.539 49.7097 mo
910.539 43.7097 li
904.539 43.7097 mo
910.539 49.7097 li
f
1 lw
0 lc
904.539 49.7097 mo
910.539 43.7097 li
904.539 43.7097 mo
910.539 49.7097 li
@
grestore
gsave
913.877 50.2299 mo
920.877 50.2299 li
920.877 43.23 li
913.877 43.23 li
913.877 50.2299 li
clp
914.377 49.7299 mo
920.377 43.7299 li
914.377 43.7299 mo
920.377 49.7299 li
f
1 lw
0 lc
914.377 49.7299 mo
920.377 43.7299 li
914.377 43.7299 mo
920.377 49.7299 li
@
grestore
gsave
923.715 50.2905 mo
930.715 50.2905 li
930.715 43.2905 li
923.715 43.2905 li
923.715 50.2905 li
clp
924.215 49.7905 mo
930.215 43.7905 li
924.215 43.7905 mo
930.215 49.7905 li
f
1 lw
0 lc
924.215 49.7905 mo
930.215 43.7905 li
924.215 43.7905 mo
930.215 49.7905 li
@
grestore
gsave
933.553 50.2905 mo
940.553 50.2905 li
940.553 43.2905 li
933.553 43.2905 li
933.553 50.2905 li
clp
934.053 49.7905 mo
940.053 43.7905 li
934.053 43.7905 mo
940.053 49.7905 li
f
1 lw
0 lc
934.053 49.7905 mo
940.053 43.7905 li
934.053 43.7905 mo
940.053 49.7905 li
@
grestore
gsave
943.391 50.2704 mo
950.391 50.2704 li
950.391 43.2701 li
943.391 43.2701 li
943.391 50.2704 li
clp
943.891 49.7703 mo
949.891 43.7703 li
943.891 43.7703 mo
949.891 49.7703 li
f
1 lw
0 lc
943.891 49.7703 mo
949.891 43.7703 li
943.891 43.7703 mo
949.891 49.7703 li
@
grestore
gsave
953.229 50.2098 mo
960.229 50.2098 li
960.229 43.2095 li
953.229 43.2095 li
953.229 50.2098 li
clp
953.729 49.7097 mo
959.729 43.7097 li
953.729 43.7097 mo
959.729 49.7097 li
f
1 lw
0 lc
953.729 49.7097 mo
959.729 43.7097 li
953.729 43.7097 mo
959.729 49.7097 li
@
grestore
gsave
963.067 50.1489 mo
970.068 50.1489 li
970.068 43.149 li
963.067 43.149 li
963.067 50.1489 li
clp
963.567 49.649 mo
969.567 43.649 li
963.567 43.649 mo
969.567 49.649 li
f
1 lw
0 lc
963.567 49.649 mo
969.567 43.649 li
963.567 43.649 mo
969.567 49.649 li
@
grestore
gsave
972.905 50.1489 mo
979.905 50.1489 li
979.905 43.149 li
972.905 43.149 li
972.905 50.1489 li
clp
973.405 49.649 mo
979.405 43.649 li
973.405 43.649 mo
979.405 49.649 li
f
1 lw
0 lc
973.405 49.649 mo
979.405 43.649 li
973.405 43.649 mo
979.405 49.649 li
@
grestore
gsave
982.743 50.0884 mo
989.743 50.0884 li
989.743 43.0884 li
982.743 43.0884 li
982.743 50.0884 li
clp
983.243 49.5884 mo
989.243 43.5884 li
983.243 43.5884 mo
989.243 49.5884 li
f
1 lw
0 lc
983.243 49.5884 mo
989.243 43.5884 li
983.243 43.5884 mo
989.243 49.5884 li
@
grestore
gsave
992.581 50.0683 mo
999.581 50.0683 li
999.581 43.0683 li
992.581 43.0683 li
992.581 50.0683 li
clp
993.081 49.5682 mo
999.081 43.5682 li
993.081 43.5682 mo
999.081 49.5682 li
f
1 lw
0 lc
993.081 49.5682 mo
999.081 43.5682 li
993.081 43.5682 mo
999.081 49.5682 li
@
grestore
gsave
1002.42 49.9672 mo
1009.42 49.9672 li
1009.42 42.9673 li
1002.42 42.9673 li
1002.42 49.9672 li
clp
1002.92 49.4673 mo
1008.92 43.4673 li
1002.92 43.4673 mo
1008.92 49.4673 li
f
1 lw
0 lc
1002.92 49.4673 mo
1008.92 43.4673 li
1002.92 43.4673 mo
1008.92 49.4673 li
@
grestore
gsave
1012.26 49.9876 mo
1019.26 49.9876 li
1019.26 42.9874 li
1012.26 42.9874 li
1012.26 49.9876 li
clp
1012.76 49.4875 mo
1018.76 43.4875 li
1012.76 43.4875 mo
1018.76 49.4875 li
f
1 lw
0 lc
1012.76 49.4875 mo
1018.76 43.4875 li
1012.76 43.4875 mo
1018.76 49.4875 li
@
grestore
gsave
1022.1 49.9876 mo
1029.1 49.9876 li
1029.1 42.9874 li
1022.1 42.9874 li
1022.1 49.9876 li
clp
1022.6 49.4875 mo
1028.6 43.4875 li
1022.6 43.4875 mo
1028.6 49.4875 li
f
1 lw
0 lc
1022.6 49.4875 mo
1028.6 43.4875 li
1022.6 43.4875 mo
1028.6 49.4875 li
@
grestore
gsave
1031.93 50.0077 mo
1038.93 50.0077 li
1038.93 43.0078 li
1031.93 43.0078 li
1031.93 50.0077 li
clp
1032.43 49.5077 mo
1038.43 43.5077 li
1032.43 43.5077 mo
1038.43 49.5077 li
f
1 lw
0 lc
1032.43 49.5077 mo
1038.43 43.5077 li
1032.43 43.5077 mo
1038.43 49.5077 li
@
grestore
gsave
1041.77 49.9876 mo
1048.77 49.9876 li
1048.77 42.9874 li
1041.77 42.9874 li
1041.77 49.9876 li
clp
1042.27 49.4875 mo
1048.27 43.4875 li
1042.27 43.4875 mo
1048.27 49.4875 li
f
1 lw
0 lc
1042.27 49.4875 mo
1048.27 43.4875 li
1042.27 43.4875 mo
1048.27 49.4875 li
@
grestore
gsave
1051.61 49.9672 mo
1058.61 49.9672 li
1058.61 42.9673 li
1051.61 42.9673 li
1051.61 49.9672 li
clp
1052.11 49.4673 mo
1058.11 43.4673 li
1052.11 43.4673 mo
1058.11 49.4673 li
f
1 lw
0 lc
1052.11 49.4673 mo
1058.11 43.4673 li
1052.11 43.4673 mo
1058.11 49.4673 li
@
grestore
gsave
1061.45 49.9472 mo
1068.45 49.9472 li
1068.45 42.9472 li
1061.45 42.9472 li
1061.45 49.9472 li
clp
1061.95 49.4471 mo
1067.95 43.4471 li
1061.95 43.4471 mo
1067.95 49.4471 li
f
1 lw
0 lc
1061.95 49.4471 mo
1067.95 43.4471 li
1061.95 43.4471 mo
1067.95 49.4471 li
@
grestore
gsave
1071.29 49.9067 mo
1078.29 49.9067 li
1078.29 42.9067 li
1071.29 42.9067 li
1071.29 49.9067 li
clp
1071.79 49.4067 mo
1077.79 43.4067 li
1071.79 43.4067 mo
1077.79 49.4067 li
f
1 lw
0 lc
1071.79 49.4067 mo
1077.79 43.4067 li
1071.79 43.4067 mo
1077.79 49.4067 li
@
grestore
gsave
1081.12 49.8866 mo
1088.12 49.8866 li
1088.12 42.8863 li
1081.12 42.8863 li
1081.12 49.8866 li
clp
1081.62 49.3865 mo
1087.62 43.3865 li
1081.62 43.3865 mo
1087.62 49.3865 li
f
1 lw
0 lc
1081.62 49.3865 mo
1087.62 43.3865 li
1081.62 43.3865 mo
1087.62 49.3865 li
@
grestore
gsave
1090.96 49.9067 mo
1097.96 49.9067 li
1097.96 42.9067 li
1090.96 42.9067 li
1090.96 49.9067 li
clp
1091.46 49.4067 mo
1097.46 43.4067 li
1091.46 43.4067 mo
1097.46 49.4067 li
f
1 lw
0 lc
1091.46 49.4067 mo
1097.46 43.4067 li
1091.46 43.4067 mo
1097.46 49.4067 li
@
grestore
120.498 518.215 mo
130.336 401.372 li
140.174 349.804 li
150.012 319.873 li
159.85 304.51 li
169.688 287.868 li
179.526 267.457 li
189.364 252.579 li
199.202 235.991 li
209.04 219.753 li
218.878 203.461 li
228.716 186.402 li
238.554 171.685 li
248.392 153.037 li
258.23 138.24 li
268.068 119.336 li
277.906 108.174 li
287.744 98.4127 li
297.582 90.0648 li
307.421 84.6791 li
317.259 80.384 li
327.097 75.0117 li
336.935 71.5918 li
346.773 68.7374 li
356.611 66.1253 li
366.449 63.796 li
376.287 62.7189 li
386.125 60.6454 li
395.963 57.4274 li
405.801 56.4849 li
415.639 54.2229 li
425.477 53.0515 li
435.315 51.7724 li
445.153 50.3856 li
454.991 48.8237 li
464.829 48.2178 li
474.667 48.2044 li
484.505 47.5985 li
494.343 45.6327 li
504.181 45.7135 li
514.019 45.4442 li
523.857 45.498 li
533.695 44.6633 li
543.533 44.0035 li
553.371 43.9631 li
563.209 44.4613 li
573.047 42.2263 li
582.885 42.4147 li
592.723 42.4955 li
602.561 42.3878 li
612.399 41.9435 li
622.237 42.1993 li
632.075 42.1724 li
641.913 41.7954 li
651.751 41.5665 li
661.589 42.0512 li
671.427 41.9301 li
681.265 42.5494 li
691.103 40.8529 li
700.941 41.2838 li
710.779 40.9741 li
720.617 41.176 li
730.455 41.6069 li
740.293 40.8932 li
750.131 40.8798 li
759.969 39.6815 li
769.807 39.6007 li
779.645 37.0425 li
789.483 36.9348 li
799.321 36.8809 li
809.159 36.7867 li
818.997 36.7732 li
828.835 36.7598 li
838.673 36.7463 li
848.511 36.7194 li
858.349 36.6655 li
868.187 36.6655 li
878.025 36.6655 li
887.863 36.6116 li
897.701 36.6116 li
907.539 36.5847 li
917.378 36.5309 li
927.216 36.5174 li
937.054 36.5174 li
946.892 36.5309 li
956.73 36.4366 li
966.568 36.4232 li
976.406 36.4097 li
986.244 36.3962 li
996.082 36.3693 li
1005.92 36.3423 li
1015.76 36.3289 li
1025.6 36.3019 li
1035.43 36.2885 li
1045.27 36.2616 li
1055.11 36.2616 li
1064.95 36.2346 li
1074.79 36.1943 li
1084.62 36.1808 li
1094.46 36.1404 li
1 /0 /CSD get_res sepcs
1 sep
@
120.498 524.516 mo
130.336 416.122 li
140.174 362.905 li
150.012 331.459 li
159.85 315.645 li
169.688 297.993 li
179.526 277.797 li
189.364 260.994 li
199.202 244.917 li
209.04 225.408 li
218.878 209.715 li
228.716 193.255 li
238.554 176.472 li
248.392 158.174 li
258.23 141.694 li
268.068 122.244 li
277.906 111.439 li
287.744 101.907 li
297.582 93.2222 li
307.421 86.9007 li
317.259 83.0028 li
327.097 78.1556 li
336.935 74.3385 li
346.773 71.6524 li
356.611 69.2288 li
366.449 67.8151 li
376.287 66.3812 li
386.125 64.0989 li
395.963 61.736 li
405.801 61.2714 li
415.639 58.6661 li
425.477 57.7977 li
435.315 56.7676 li
445.153 55.8386 li
454.991 54.4855 li
464.829 53.7584 li
474.667 53.8392 li
484.505 53.4958 li
494.343 51.4358 li
504.181 51.3954 li
514.019 51.456 li
523.857 51.658 li
533.695 50.7693 li
543.533 50.2442 li
553.371 50.022 li
563.209 50.8905 li
573.047 49.0122 li
582.885 48.9113 li
592.723 48.7093 li
602.561 48.9719 li
612.399 48.4871 li
622.237 48.8102 li
632.075 48.9517 li
641.913 48.8304 li
651.751 48.7093 li
661.589 49.1536 li
671.427 48.8911 li
681.265 49.3152 li
691.103 47.6187 li
700.941 48.164 li
710.779 47.6793 li
720.617 48.3256 li
730.455 48.6891 li
740.293 47.8408 li
750.131 47.8408 li
759.969 46.5483 li
769.807 46.5079 li
779.645 44.4882 li
789.483 44.6902 li
799.321 44.6296 li
809.159 44.5488 li
818.997 44.4479 li
828.835 44.4882 li
838.673 44.4075 li
848.511 44.3469 li
858.349 44.4277 li
868.187 44.3469 li
878.025 44.3469 li
887.863 44.3469 li
897.701 44.3065 li
907.539 44.2459 li
917.378 44.1853 li
927.216 44.1853 li
937.054 44.1247 li
946.892 44.1045 li
956.73 44.1045 li
966.568 44.1449 li
976.406 44.1651 li
986.244 44.2257 li
996.082 44.1853 li
1005.92 44.1449 li
1015.76 44.1449 li
1025.6 44.1449 li
1035.43 44.1449 li
1045.27 44.1449 li
1055.11 44.1449 li
1064.95 44.1651 li
1074.79 44.2257 li
1084.62 44.2459 li
1094.46 44.3065 li
@
gsave
116.998 528.016 mo
123.998 528.016 li
123.998 521.016 li
116.998 521.016 li
116.998 528.016 li
clp
117.498 527.516 mo
123.498 521.516 li
117.498 521.516 mo
123.498 527.516 li
f
1 lw
0 lc
117.498 527.516 mo
123.498 521.516 li
117.498 521.516 mo
123.498 527.516 li
@
grestore
gsave
126.836 419.622 mo
133.836 419.622 li
133.836 412.622 li
126.836 412.622 li
126.836 419.622 li
clp
127.336 419.122 mo
133.336 413.122 li
127.336 413.122 mo
133.336 419.122 li
f
1 lw
0 lc
127.336 419.122 mo
133.336 413.122 li
127.336 413.122 mo
133.336 419.122 li
@
grestore
gsave
136.674 366.405 mo
143.674 366.405 li
143.674 359.405 li
136.674 359.405 li
136.674 366.405 li
clp
137.174 365.905 mo
143.174 359.905 li
137.174 359.905 mo
143.174 365.905 li
f
1 lw
0 lc
137.174 365.905 mo
143.174 359.905 li
137.174 359.905 mo
143.174 365.905 li
@
grestore
gsave
146.512 334.959 mo
153.512 334.959 li
153.512 327.959 li
146.512 327.959 li
146.512 334.959 li
clp
147.012 334.459 mo
153.012 328.459 li
147.012 328.459 mo
153.012 334.459 li
f
1 lw
0 lc
147.012 334.459 mo
153.012 328.459 li
147.012 328.459 mo
153.012 334.459 li
@
grestore
gsave
156.35 319.145 mo
163.35 319.145 li
163.35 312.145 li
156.35 312.145 li
156.35 319.145 li
clp
156.85 318.645 mo
162.85 312.645 li
156.85 312.645 mo
162.85 318.645 li
f
1 lw
0 lc
156.85 318.645 mo
162.85 312.645 li
156.85 312.645 mo
162.85 318.645 li
@
grestore
gsave
166.188 301.494 mo
173.188 301.494 li
173.188 294.494 li
166.188 294.494 li
166.188 301.494 li
clp
166.688 300.994 mo
172.688 294.994 li
166.688 294.994 mo
172.688 300.994 li
f
1 lw
0 lc
166.688 300.994 mo
172.688 294.994 li
166.688 294.994 mo
172.688 300.994 li
@
grestore
gsave
176.026 281.297 mo
183.026 281.297 li
183.026 274.297 li
176.026 274.297 li
176.026 281.297 li
clp
176.526 280.797 mo
182.526 274.797 li
176.526 274.797 mo
182.526 280.797 li
f
1 lw
0 lc
176.526 280.797 mo
182.526 274.797 li
176.526 274.797 mo
182.526 280.797 li
@
grestore
gsave
185.864 264.494 mo
192.864 264.494 li
192.864 257.494 li
185.864 257.494 li
185.864 264.494 li
clp
186.364 263.994 mo
192.364 257.994 li
186.364 257.994 mo
192.364 263.994 li
f
1 lw
0 lc
186.364 263.994 mo
192.364 257.994 li
186.364 257.994 mo
192.364 263.994 li
@
grestore
gsave
195.702 248.417 mo
202.702 248.417 li
202.702 241.417 li
195.702 241.417 li
195.702 248.417 li
clp
196.202 247.917 mo
202.202 241.917 li
196.202 241.917 mo
202.202 247.917 li
f
1 lw
0 lc
196.202 247.917 mo
202.202 241.917 li
196.202 241.917 mo
202.202 247.917 li
@
grestore
gsave
205.54 228.908 mo
212.54 228.908 li
212.54 221.908 li
205.54 221.908 li
205.54 228.908 li
clp
206.04 228.408 mo
212.04 222.408 li
206.04 222.408 mo
212.04 228.408 li
f
1 lw
0 lc
206.04 228.408 mo
212.04 222.408 li
206.04 222.408 mo
212.04 228.408 li
@
grestore
gsave
215.378 213.215 mo
222.378 213.215 li
222.378 206.215 li
215.378 206.215 li
215.378 213.215 li
clp
215.878 212.715 mo
221.878 206.715 li
215.878 206.715 mo
221.878 212.715 li
f
1 lw
0 lc
215.878 212.715 mo
221.878 206.715 li
215.878 206.715 mo
221.878 212.715 li
@
grestore
gsave
225.216 196.755 mo
232.216 196.755 li
232.216 189.755 li
225.216 189.755 li
225.216 196.755 li
clp
225.716 196.255 mo
231.716 190.255 li
225.716 190.255 mo
231.716 196.255 li
f
1 lw
0 lc
225.716 196.255 mo
231.716 190.255 li
225.716 190.255 mo
231.716 196.255 li
@
grestore
gsave
235.055 179.972 mo
242.054 179.972 li
242.054 172.972 li
235.055 172.972 li
235.055 179.972 li
clp
235.554 179.472 mo
241.554 173.472 li
235.554 173.472 mo
241.554 179.472 li
f
1 lw
0 lc
235.554 179.472 mo
241.554 173.472 li
235.554 173.472 mo
241.554 179.472 li
@
grestore
gsave
244.892 161.674 mo
251.893 161.674 li
251.893 154.674 li
244.892 154.674 li
244.892 161.674 li
clp
245.392 161.174 mo
251.392 155.174 li
245.392 155.174 mo
251.392 161.174 li
f
1 lw
0 lc
245.392 161.174 mo
251.392 155.174 li
245.392 155.174 mo
251.392 161.174 li
@
grestore
gsave
254.73 145.193 mo
261.73 145.193 li
261.73 138.193 li
254.73 138.193 li
254.73 145.193 li
clp
255.23 144.694 mo
261.23 138.694 li
255.23 138.694 mo
261.23 144.694 li
f
1 lw
0 lc
255.23 144.694 mo
261.23 138.694 li
255.23 138.694 mo
261.23 144.694 li
@
grestore
gsave
264.568 125.744 mo
271.568 125.744 li
271.568 118.744 li
264.568 118.744 li
264.568 125.744 li
clp
265.068 125.244 mo
271.068 119.244 li
265.068 119.244 mo
271.068 125.244 li
f
1 lw
0 lc
265.068 125.244 mo
271.068 119.244 li
265.068 119.244 mo
271.068 125.244 li
@
grestore
gsave
274.406 114.939 mo
281.406 114.939 li
281.406 107.939 li
274.406 107.939 li
274.406 114.939 li
clp
274.906 114.439 mo
280.906 108.439 li
274.906 108.439 mo
280.906 114.439 li
f
1 lw
0 lc
274.906 114.439 mo
280.906 108.439 li
274.906 108.439 mo
280.906 114.439 li
@
grestore
gsave
284.244 105.407 mo
291.244 105.407 li
291.244 98.4066 li
284.244 98.4066 li
284.244 105.407 li
clp
284.744 104.907 mo
290.744 98.9067 li
284.744 98.9067 mo
290.744 104.907 li
f
1 lw
0 lc
284.744 104.907 mo
290.744 98.9067 li
284.744 98.9067 mo
290.744 104.907 li
@
grestore
gsave
294.083 96.7222 mo
301.082 96.7222 li
301.082 89.7223 li
294.083 89.7223 li
294.083 96.7222 li
clp
294.582 96.2222 mo
300.582 90.2222 li
294.582 90.2222 mo
300.582 96.2222 li
f
1 lw
0 lc
294.582 96.2222 mo
300.582 90.2222 li
294.582 90.2222 mo
300.582 96.2222 li
@
grestore
gsave
303.921 90.4006 mo
310.921 90.4006 li
310.921 83.4007 li
303.921 83.4007 li
303.921 90.4006 li
clp
304.42 89.9008 mo
310.42 83.9008 li
304.42 83.9008 mo
310.42 89.9008 li
f
1 lw
0 lc
304.42 89.9008 mo
310.42 83.9008 li
304.42 83.9008 mo
310.42 89.9008 li
@
grestore
gsave
313.758 86.5028 mo
320.759 86.5028 li
320.759 79.5029 li
313.758 79.5029 li
313.758 86.5028 li
clp
314.258 86.0029 mo
320.258 80.0029 li
314.258 80.0029 mo
320.258 86.0029 li
f
1 lw
0 lc
314.258 86.0029 mo
320.258 80.0029 li
314.258 80.0029 mo
320.258 86.0029 li
@
grestore
gsave
323.596 81.6558 mo
330.596 81.6558 li
330.596 74.6558 li
323.596 74.6558 li
323.596 81.6558 li
clp
324.096 81.1558 mo
330.096 75.1558 li
324.096 75.1558 mo
330.096 81.1558 li
f
1 lw
0 lc
324.096 81.1558 mo
330.096 75.1558 li
324.096 75.1558 mo
330.096 81.1558 li
@
grestore
gsave
333.434 77.8386 mo
340.434 77.8386 li
340.434 70.8387 li
333.434 70.8387 li
333.434 77.8386 li
clp
333.934 77.3386 mo
339.934 71.3386 li
333.934 71.3386 mo
339.934 77.3386 li
f
1 lw
0 lc
333.934 77.3386 mo
339.934 71.3386 li
333.934 71.3386 mo
339.934 77.3386 li
@
grestore
gsave
343.272 75.1524 mo
350.272 75.1524 li
350.272 68.1525 li
343.272 68.1525 li
343.272 75.1524 li
clp
343.772 74.6525 mo
349.772 68.6525 li
343.772 68.6525 mo
349.772 74.6525 li
f
1 lw
0 lc
343.772 74.6525 mo
349.772 68.6525 li
343.772 68.6525 mo
349.772 74.6525 li
@
grestore
gsave
353.111 72.7289 mo
360.111 72.7289 li
360.111 65.729 li
353.111 65.729 li
353.111 72.7289 li
clp
353.611 72.2289 mo
359.611 66.2289 li
353.611 66.2289 mo
359.611 72.2289 li
f
1 lw
0 lc
353.611 72.2289 mo
359.611 66.2289 li
353.611 66.2289 mo
359.611 72.2289 li
@
grestore
gsave
362.949 71.3152 mo
369.949 71.3152 li
369.949 64.3153 li
362.949 64.3153 li
362.949 71.3152 li
clp
363.449 70.8152 mo
369.449 64.8152 li
363.449 64.8152 mo
369.449 70.8152 li
f
1 lw
0 lc
363.449 70.8152 mo
369.449 64.8152 li
363.449 64.8152 mo
369.449 70.8152 li
@
grestore
gsave
372.787 69.8811 mo
379.787 69.8811 li
379.787 62.8812 li
372.787 62.8812 li
372.787 69.8811 li
clp
373.287 69.3812 mo
379.287 63.3812 li
373.287 63.3812 mo
379.287 69.3812 li
f
1 lw
0 lc
373.287 69.3812 mo
379.287 63.3812 li
373.287 63.3812 mo
379.287 69.3812 li
@
grestore
gsave
382.624 67.5991 mo
389.625 67.5991 li
389.625 60.5992 li
382.624 60.5992 li
382.624 67.5991 li
clp
383.125 67.0991 mo
389.125 61.0991 li
383.125 61.0991 mo
389.125 67.0991 li
f
1 lw
0 lc
383.125 67.0991 mo
389.125 61.0991 li
383.125 61.0991 mo
389.125 67.0991 li
@
grestore
gsave
392.462 65.2362 mo
399.462 65.2362 li
399.462 58.2362 li
392.462 58.2362 li
392.462 65.2362 li
clp
392.963 64.7361 mo
398.963 58.7361 li
392.963 58.7361 mo
398.963 64.7361 li
f
1 lw
0 lc
392.963 64.7361 mo
398.963 58.7361 li
392.963 58.7361 mo
398.963 64.7361 li
@
grestore
gsave
402.301 64.7714 mo
409.3 64.7714 li
409.3 57.7714 li
402.301 57.7714 li
402.301 64.7714 li
clp
402.801 64.2715 mo
408.801 58.2715 li
402.801 58.2715 mo
408.801 64.2715 li
f
1 lw
0 lc
402.801 64.2715 mo
408.801 58.2715 li
402.801 58.2715 mo
408.801 64.2715 li
@
grestore
gsave
412.139 62.1662 mo
419.138 62.1662 li
419.138 55.1662 li
412.139 55.1662 li
412.139 62.1662 li
clp
412.639 61.6662 mo
418.639 55.6662 li
412.639 55.6662 mo
418.639 61.6662 li
f
1 lw
0 lc
412.639 61.6662 mo
418.639 55.6662 li
412.639 55.6662 mo
418.639 61.6662 li
@
grestore
gsave
421.977 61.2979 mo
428.977 61.2979 li
428.977 54.2976 li
421.977 54.2976 li
421.977 61.2979 li
clp
422.477 60.7977 mo
428.477 54.7977 li
422.477 54.7977 mo
428.477 60.7977 li
f
1 lw
0 lc
422.477 60.7977 mo
428.477 54.7977 li
422.477 54.7977 mo
428.477 60.7977 li
@
grestore
gsave
431.815 60.2676 mo
438.815 60.2676 li
438.815 53.2677 li
431.815 53.2677 li
431.815 60.2676 li
clp
432.315 59.7677 mo
438.315 53.7677 li
432.315 53.7677 mo
438.315 59.7677 li
f
1 lw
0 lc
432.315 59.7677 mo
438.315 53.7677 li
432.315 53.7677 mo
438.315 59.7677 li
@
grestore
gsave
441.653 59.3388 mo
448.653 59.3388 li
448.653 52.3388 li
441.653 52.3388 li
441.653 59.3388 li
clp
442.153 58.8387 mo
448.153 52.8387 li
442.153 52.8387 mo
448.153 58.8387 li
f
1 lw
0 lc
442.153 58.8387 mo
448.153 52.8387 li
442.153 52.8387 mo
448.153 58.8387 li
@
grestore
gsave
451.491 57.9857 mo
458.491 57.9857 li
458.491 50.9854 li
451.491 50.9854 li
451.491 57.9857 li
clp
451.991 57.4855 mo
457.991 51.4855 li
451.991 51.4855 mo
457.991 57.4855 li
f
1 lw
0 lc
451.991 57.4855 mo
457.991 51.4855 li
451.991 51.4855 mo
457.991 57.4855 li
@
grestore
gsave
461.329 57.2586 mo
468.329 57.2586 li
468.329 50.2586 li
461.329 50.2586 li
461.329 57.2586 li
clp
461.829 56.7585 mo
467.829 50.7585 li
461.829 50.7585 mo
467.829 56.7585 li
f
1 lw
0 lc
461.829 56.7585 mo
467.829 50.7585 li
461.829 50.7585 mo
467.829 56.7585 li
@
grestore
gsave
471.167 57.3392 mo
478.167 57.3392 li
478.167 50.3393 li
471.167 50.3393 li
471.167 57.3392 li
clp
471.667 56.8393 mo
477.667 50.8393 li
471.667 50.8393 mo
477.667 56.8393 li
f
1 lw
0 lc
471.667 56.8393 mo
477.667 50.8393 li
471.667 50.8393 mo
477.667 56.8393 li
@
grestore
gsave
481.005 56.9959 mo
488.005 56.9959 li
488.005 49.996 li
481.005 49.996 li
481.005 56.9959 li
clp
481.505 56.496 mo
487.505 50.496 li
481.505 50.496 mo
487.505 56.496 li
f
1 lw
0 lc
481.505 56.496 mo
487.505 50.496 li
481.505 50.496 mo
487.505 56.496 li
@
grestore
gsave
490.843 54.9357 mo
497.843 54.9357 li
497.843 47.9358 li
490.843 47.9358 li
490.843 54.9357 li
clp
491.343 54.4359 mo
497.343 48.4359 li
491.343 48.4359 mo
497.343 54.4359 li
f
1 lw
0 lc
491.343 54.4359 mo
497.343 48.4359 li
491.343 48.4359 mo
497.343 54.4359 li
@
grestore
gsave
500.681 54.8956 mo
507.681 54.8956 li
507.681 47.8957 li
500.681 47.8957 li
500.681 54.8956 li
clp
501.181 54.3955 mo
507.181 48.3955 li
501.181 48.3955 mo
507.181 54.3955 li
f
1 lw
0 lc
501.181 54.3955 mo
507.181 48.3955 li
501.181 48.3955 mo
507.181 54.3955 li
@
grestore
gsave
510.519 54.9562 mo
517.519 54.9562 li
517.519 47.9562 li
510.519 47.9562 li
510.519 54.9562 li
clp
511.019 54.4561 mo
517.019 48.4561 li
511.019 48.4561 mo
517.019 54.4561 li
f
1 lw
0 lc
511.019 54.4561 mo
517.019 48.4561 li
511.019 48.4561 mo
517.019 54.4561 li
@
grestore
gsave
520.357 55.1579 mo
527.357 55.1579 li
527.357 48.158 li
520.357 48.158 li
520.357 55.1579 li
clp
520.857 54.6581 mo
526.857 48.6581 li
520.857 48.6581 mo
526.857 54.6581 li
f
1 lw
0 lc
520.857 54.6581 mo
526.857 48.6581 li
520.857 48.6581 mo
526.857 54.6581 li
@
grestore
gsave
530.195 54.2696 mo
537.195 54.2696 li
537.195 47.2693 li
530.195 47.2693 li
530.195 54.2696 li
clp
530.695 53.7694 mo
536.695 47.7694 li
530.695 47.7694 mo
536.695 53.7694 li
f
1 lw
0 lc
530.695 53.7694 mo
536.695 47.7694 li
530.695 47.7694 mo
536.695 53.7694 li
@
grestore
gsave
540.033 53.7442 mo
547.033 53.7442 li
547.033 46.7443 li
540.033 46.7443 li
540.033 53.7442 li
clp
540.533 53.2443 mo
546.533 47.2443 li
540.533 47.2443 mo
546.533 53.2443 li
f
1 lw
0 lc
540.533 53.2443 mo
546.533 47.2443 li
540.533 47.2443 mo
546.533 53.2443 li
@
grestore
gsave
549.871 53.5221 mo
556.871 53.5221 li
556.871 46.5221 li
549.871 46.5221 li
549.871 53.5221 li
clp
550.371 53.0222 mo
556.371 47.0222 li
550.371 47.0222 mo
556.371 53.0222 li
f
1 lw
0 lc
550.371 53.0222 mo
556.371 47.0222 li
550.371 47.0222 mo
556.371 53.0222 li
@
grestore
gsave
559.709 54.3907 mo
566.709 54.3907 li
566.709 47.3907 li
559.709 47.3907 li
559.709 54.3907 li
clp
560.209 53.8906 mo
566.209 47.8906 li
560.209 47.8906 mo
566.209 53.8906 li
f
1 lw
0 lc
560.209 53.8906 mo
566.209 47.8906 li
560.209 47.8906 mo
566.209 53.8906 li
@
grestore
gsave
569.547 52.5122 mo
576.547 52.5122 li
576.547 45.5123 li
569.547 45.5123 li
569.547 52.5122 li
clp
570.047 52.0123 mo
576.047 46.0123 li
570.047 46.0123 mo
576.047 52.0123 li
f
1 lw
0 lc
570.047 52.0123 mo
576.047 46.0123 li
570.047 46.0123 mo
576.047 52.0123 li
@
grestore
gsave
579.385 52.4115 mo
586.385 52.4115 li
586.385 45.4112 li
579.385 45.4112 li
579.385 52.4115 li
clp
579.885 51.9114 mo
585.885 45.9114 li
579.885 45.9114 mo
585.885 51.9114 li
f
1 lw
0 lc
579.885 51.9114 mo
585.885 45.9114 li
579.885 45.9114 mo
585.885 51.9114 li
@
grestore
gsave
589.223 52.2094 mo
596.223 52.2094 li
596.223 45.2095 li
589.223 45.2095 li
589.223 52.2094 li
clp
589.723 51.7094 mo
595.723 45.7094 li
589.723 45.7094 mo
595.723 51.7094 li
f
1 lw
0 lc
589.723 51.7094 mo
595.723 45.7094 li
589.723 45.7094 mo
595.723 51.7094 li
@
grestore
gsave
599.061 52.4721 mo
606.061 52.4721 li
606.061 45.4721 li
599.061 45.4721 li
599.061 52.4721 li
clp
599.561 51.972 mo
605.561 45.972 li
599.561 45.972 mo
605.561 51.972 li
f
1 lw
0 lc
599.561 51.972 mo
605.561 45.972 li
599.561 45.972 mo
605.561 51.972 li
@
grestore
gsave
608.899 51.9872 mo
615.899 51.9872 li
615.899 44.9873 li
608.899 44.9873 li
608.899 51.9872 li
clp
609.399 51.4872 mo
615.399 45.4872 li
609.399 45.4872 mo
615.399 51.4872 li
f
1 lw
0 lc
609.399 51.4872 mo
615.399 45.4872 li
609.399 45.4872 mo
615.399 51.4872 li
@
grestore
gsave
618.737 52.3105 mo
625.737 52.3105 li
625.737 45.3105 li
618.737 45.3105 li
618.737 52.3105 li
clp
619.237 51.8104 mo
625.237 45.8104 li
619.237 45.8104 mo
625.237 51.8104 li
f
1 lw
0 lc
619.237 51.8104 mo
625.237 45.8104 li
619.237 45.8104 mo
625.237 51.8104 li
@
grestore
gsave
628.575 52.4517 mo
635.575 52.4517 li
635.575 45.4517 li
628.575 45.4517 li
628.575 52.4517 li
clp
629.075 51.9517 mo
635.075 45.9517 li
629.075 45.9517 mo
635.075 51.9517 li
f
1 lw
0 lc
629.075 51.9517 mo
635.075 45.9517 li
629.075 45.9517 mo
635.075 51.9517 li
@
grestore
gsave
638.413 52.3305 mo
645.413 52.3305 li
645.413 45.3306 li
638.413 45.3306 li
638.413 52.3305 li
clp
638.913 51.8306 mo
644.913 45.8306 li
638.913 45.8306 mo
644.913 51.8306 li
f
1 lw
0 lc
638.913 51.8306 mo
644.913 45.8306 li
638.913 45.8306 mo
644.913 51.8306 li
@
grestore
gsave
648.251 52.2094 mo
655.251 52.2094 li
655.251 45.2095 li
648.251 45.2095 li
648.251 52.2094 li
clp
648.751 51.7094 mo
654.751 45.7094 li
648.751 45.7094 mo
654.751 51.7094 li
f
1 lw
0 lc
648.751 51.7094 mo
654.751 45.7094 li
648.751 45.7094 mo
654.751 51.7094 li
@
grestore
gsave
658.089 52.6538 mo
665.089 52.6538 li
665.089 45.6538 li
658.089 45.6538 li
658.089 52.6538 li
clp
658.589 52.1537 mo
664.589 46.1537 li
658.589 46.1537 mo
664.589 52.1537 li
f
1 lw
0 lc
658.589 52.1537 mo
664.589 46.1537 li
658.589 46.1537 mo
664.589 52.1537 li
@
grestore
gsave
667.927 52.3911 mo
674.927 52.3911 li
674.927 45.3912 li
667.927 45.3912 li
667.927 52.3911 li
clp
668.427 51.8912 mo
674.427 45.8912 li
668.427 45.8912 mo
674.427 51.8912 li
f
1 lw
0 lc
668.427 51.8912 mo
674.427 45.8912 li
668.427 45.8912 mo
674.427 51.8912 li
@
grestore
gsave
677.765 52.8154 mo
684.765 52.8154 li
684.765 45.8154 li
677.765 45.8154 li
677.765 52.8154 li
clp
678.265 52.3153 mo
684.265 46.3153 li
678.265 46.3153 mo
684.265 52.3153 li
f
1 lw
0 lc
678.265 52.3153 mo
684.265 46.3153 li
678.265 46.3153 mo
684.265 52.3153 li
@
grestore
gsave
687.603 51.1189 mo
694.603 51.1189 li
694.603 44.119 li
687.603 44.119 li
687.603 51.1189 li
clp
688.103 50.6188 mo
694.103 44.6188 li
688.103 44.6188 mo
694.103 50.6188 li
f
1 lw
0 lc
688.103 50.6188 mo
694.103 44.6188 li
688.103 44.6188 mo
694.103 50.6188 li
@
grestore
gsave
697.441 51.664 mo
704.441 51.664 li
704.441 44.6641 li
697.441 44.6641 li
697.441 51.664 li
clp
697.941 51.1641 mo
703.941 45.1641 li
697.941 45.1641 mo
703.941 51.1641 li
f
1 lw
0 lc
697.941 51.1641 mo
703.941 45.1641 li
697.941 45.1641 mo
703.941 51.1641 li
@
grestore
gsave
707.279 51.1795 mo
714.279 51.1795 li
714.279 44.1792 li
707.279 44.1792 li
707.279 51.1795 li
clp
707.779 50.6794 mo
713.779 44.6794 li
707.779 44.6794 mo
713.779 50.6794 li
f
1 lw
0 lc
707.779 50.6794 mo
713.779 44.6794 li
707.779 44.6794 mo
713.779 50.6794 li
@
grestore
gsave
717.117 51.8256 mo
724.117 51.8256 li
724.117 44.8257 li
717.117 44.8257 li
717.117 51.8256 li
clp
717.617 51.3257 mo
723.617 45.3257 li
717.617 45.3257 mo
723.617 51.3257 li
f
1 lw
0 lc
717.617 51.3257 mo
723.617 45.3257 li
717.617 45.3257 mo
723.617 51.3257 li
@
grestore
gsave
726.955 52.1893 mo
733.955 52.1893 li
733.955 45.1891 li
726.955 45.1891 li
726.955 52.1893 li
clp
727.455 51.6892 mo
733.455 45.6892 li
727.455 45.6892 mo
733.455 51.6892 li
f
1 lw
0 lc
727.455 51.6892 mo
733.455 45.6892 li
727.455 45.6892 mo
733.455 51.6892 li
@
grestore
gsave
736.793 51.3408 mo
743.793 51.3408 li
743.793 44.3408 li
736.793 44.3408 li
736.793 51.3408 li
clp
737.293 50.8409 mo
743.293 44.8409 li
737.293 44.8409 mo
743.293 50.8409 li
f
1 lw
0 lc
737.293 50.8409 mo
743.293 44.8409 li
737.293 44.8409 mo
743.293 50.8409 li
@
grestore
gsave
746.631 51.3408 mo
753.631 51.3408 li
753.631 44.3408 li
746.631 44.3408 li
746.631 51.3408 li
clp
747.131 50.8409 mo
753.131 44.8409 li
747.131 44.8409 mo
753.131 50.8409 li
f
1 lw
0 lc
747.131 50.8409 mo
753.131 44.8409 li
747.131 44.8409 mo
753.131 50.8409 li
@
grestore
gsave
756.469 50.0486 mo
763.469 50.0486 li
763.469 43.0483 li
756.469 43.0483 li
756.469 50.0486 li
clp
756.969 49.5484 mo
762.969 43.5484 li
756.969 43.5484 mo
762.969 49.5484 li
f
1 lw
0 lc
756.969 49.5484 mo
762.969 43.5484 li
756.969 43.5484 mo
762.969 49.5484 li
@
grestore
gsave
766.307 50.0081 mo
773.307 50.0081 li
773.307 43.0081 li
766.307 43.0081 li
766.307 50.0081 li
clp
766.807 49.508 mo
772.807 43.508 li
766.807 43.508 mo
772.807 49.508 li
f
1 lw
0 lc
766.807 49.508 mo
772.807 43.508 li
766.807 43.508 mo
772.807 49.508 li
@
grestore
gsave
776.145 47.9884 mo
783.145 47.9884 li
783.145 40.9885 li
776.145 40.9885 li
776.145 47.9884 li
clp
776.645 47.4883 mo
782.645 41.4883 li
776.645 41.4883 mo
782.645 47.4883 li
f
1 lw
0 lc
776.645 47.4883 mo
782.645 41.4883 li
776.645 41.4883 mo
782.645 47.4883 li
@
grestore
gsave
785.983 48.1902 mo
792.983 48.1902 li
792.983 41.1902 li
785.983 41.1902 li
785.983 48.1902 li
clp
786.483 47.6903 mo
792.483 41.6903 li
786.483 41.6903 mo
792.483 47.6903 li
f
1 lw
0 lc
786.483 47.6903 mo
792.483 41.6903 li
786.483 41.6903 mo
792.483 47.6903 li
@
grestore
gsave
795.821 48.1296 mo
802.821 48.1296 li
802.821 41.1297 li
795.821 41.1297 li
795.821 48.1296 li
clp
796.321 47.6297 mo
802.321 41.6297 li
796.321 41.6297 mo
802.321 47.6297 li
f
1 lw
0 lc
796.321 47.6297 mo
802.321 41.6297 li
796.321 41.6297 mo
802.321 47.6297 li
@
grestore
gsave
805.659 48.049 mo
812.659 48.049 li
812.659 41.049 li
805.659 41.049 li
805.659 48.049 li
clp
806.159 47.5489 mo
812.159 41.5489 li
806.159 41.5489 mo
812.159 47.5489 li
f
1 lw
0 lc
806.159 47.5489 mo
812.159 41.5489 li
806.159 41.5489 mo
812.159 47.5489 li
@
grestore
gsave
815.497 47.9479 mo
822.497 47.9479 li
822.497 40.948 li
815.497 40.948 li
815.497 47.9479 li
clp
815.997 47.4479 mo
821.997 41.4479 li
815.997 41.4479 mo
821.997 47.4479 li
f
1 lw
0 lc
815.997 47.4479 mo
821.997 41.4479 li
815.997 41.4479 mo
821.997 47.4479 li
@
grestore
gsave
825.335 47.9884 mo
832.335 47.9884 li
832.335 40.9885 li
825.335 40.9885 li
825.335 47.9884 li
clp
825.835 47.4883 mo
831.835 41.4883 li
825.835 41.4883 mo
831.835 47.4883 li
f
1 lw
0 lc
825.835 47.4883 mo
831.835 41.4883 li
825.835 41.4883 mo
831.835 47.4883 li
@
grestore
gsave
835.173 47.9074 mo
842.173 47.9074 li
842.173 40.9075 li
835.173 40.9075 li
835.173 47.9074 li
clp
835.673 47.4075 mo
841.673 41.4075 li
835.673 41.4075 mo
841.673 47.4075 li
f
1 lw
0 lc
835.673 47.4075 mo
841.673 41.4075 li
835.673 41.4075 mo
841.673 47.4075 li
@
grestore
gsave
845.011 47.8469 mo
852.011 47.8469 li
852.011 40.8469 li
845.011 40.8469 li
845.011 47.8469 li
clp
845.511 47.3469 mo
851.511 41.3469 li
845.511 41.3469 mo
851.511 47.3469 li
f
1 lw
0 lc
845.511 47.3469 mo
851.511 41.3469 li
845.511 41.3469 mo
851.511 47.3469 li
@
grestore
gsave
854.849 47.9278 mo
861.849 47.9278 li
861.849 40.9279 li
854.849 40.9279 li
854.849 47.9278 li
clp
855.349 47.4277 mo
861.349 41.4277 li
855.349 41.4277 mo
861.349 47.4277 li
f
1 lw
0 lc
855.349 47.4277 mo
861.349 41.4277 li
855.349 41.4277 mo
861.349 47.4277 li
@
grestore
gsave
864.687 47.8469 mo
871.687 47.8469 li
871.687 40.8469 li
864.687 40.8469 li
864.687 47.8469 li
clp
865.187 47.3469 mo
871.187 41.3469 li
865.187 41.3469 mo
871.187 47.3469 li
f
1 lw
0 lc
865.187 47.3469 mo
871.187 41.3469 li
865.187 41.3469 mo
871.187 47.3469 li
@
grestore
gsave
874.525 47.8469 mo
881.525 47.8469 li
881.525 40.8469 li
874.525 40.8469 li
874.525 47.8469 li
clp
875.025 47.3469 mo
881.025 41.3469 li
875.025 41.3469 mo
881.025 47.3469 li
f
1 lw
0 lc
875.025 47.3469 mo
881.025 41.3469 li
875.025 41.3469 mo
881.025 47.3469 li
@
grestore
gsave
884.363 47.8469 mo
891.363 47.8469 li
891.363 40.8469 li
884.363 40.8469 li
884.363 47.8469 li
clp
884.863 47.3469 mo
890.863 41.3469 li
884.863 41.3469 mo
890.863 47.3469 li
f
1 lw
0 lc
884.863 47.3469 mo
890.863 41.3469 li
884.863 41.3469 mo
890.863 47.3469 li
@
grestore
gsave
894.201 47.8064 mo
901.201 47.8064 li
901.201 40.8064 li
894.201 40.8064 li
894.201 47.8064 li
clp
894.701 47.3065 mo
900.701 41.3065 li
894.701 41.3065 mo
900.701 47.3065 li
f
1 lw
0 lc
894.701 47.3065 mo
900.701 41.3065 li
894.701 41.3065 mo
900.701 47.3065 li
@
grestore
gsave
904.039 47.7458 mo
911.039 47.7458 li
911.039 40.7459 li
904.039 40.7459 li
904.039 47.7458 li
clp
904.539 47.2459 mo
910.539 41.2459 li
904.539 41.2459 mo
910.539 47.2459 li
f
1 lw
0 lc
904.539 47.2459 mo
910.539 41.2459 li
904.539 41.2459 mo
910.539 47.2459 li
@
grestore
gsave
913.877 47.6852 mo
920.877 47.6852 li
920.877 40.6853 li
913.877 40.6853 li
913.877 47.6852 li
clp
914.377 47.1853 mo
920.377 41.1853 li
914.377 41.1853 mo
920.377 47.1853 li
f
1 lw
0 lc
914.377 47.1853 mo
920.377 41.1853 li
914.377 41.1853 mo
920.377 47.1853 li
@
grestore
gsave
923.715 47.6852 mo
930.715 47.6852 li
930.715 40.6853 li
923.715 40.6853 li
923.715 47.6852 li
clp
924.215 47.1853 mo
930.215 41.1853 li
924.215 41.1853 mo
930.215 47.1853 li
f
1 lw
0 lc
924.215 47.1853 mo
930.215 41.1853 li
924.215 41.1853 mo
930.215 47.1853 li
@
grestore
gsave
933.553 47.6247 mo
940.553 47.6247 li
940.553 40.6247 li
933.553 40.6247 li
933.553 47.6247 li
clp
934.053 47.1247 mo
940.053 41.1247 li
934.053 41.1247 mo
940.053 47.1247 li
f
1 lw
0 lc
934.053 47.1247 mo
940.053 41.1247 li
934.053 41.1247 mo
940.053 47.1247 li
@
grestore
gsave
943.391 47.6046 mo
950.391 47.6046 li
950.391 40.6043 li
943.391 40.6043 li
943.391 47.6046 li
clp
943.891 47.1045 mo
949.891 41.1045 li
943.891 41.1045 mo
949.891 47.1045 li
f
1 lw
0 lc
943.891 47.1045 mo
949.891 41.1045 li
943.891 41.1045 mo
949.891 47.1045 li
@
grestore
gsave
953.229 47.6046 mo
960.229 47.6046 li
960.229 40.6043 li
953.229 40.6043 li
953.229 47.6046 li
clp
953.729 47.1045 mo
959.729 41.1045 li
953.729 41.1045 mo
959.729 47.1045 li
f
1 lw
0 lc
953.729 47.1045 mo
959.729 41.1045 li
953.729 41.1045 mo
959.729 47.1045 li
@
grestore
gsave
963.067 47.6448 mo
970.068 47.6448 li
970.068 40.6448 li
963.067 40.6448 li
963.067 47.6448 li
clp
963.567 47.1449 mo
969.567 41.1449 li
963.567 41.1449 mo
969.567 47.1449 li
f
1 lw
0 lc
963.567 47.1449 mo
969.567 41.1449 li
963.567 41.1449 mo
969.567 47.1449 li
@
grestore
gsave
972.905 47.6652 mo
979.905 47.6652 li
979.905 40.6652 li
972.905 40.6652 li
972.905 47.6652 li
clp
973.405 47.1651 mo
979.405 41.1651 li
973.405 41.1651 mo
979.405 47.1651 li
f
1 lw
0 lc
973.405 47.1651 mo
979.405 41.1651 li
973.405 41.1651 mo
979.405 47.1651 li
@
grestore
gsave
982.743 47.7257 mo
989.743 47.7257 li
989.743 40.7258 li
982.743 40.7258 li
982.743 47.7257 li
clp
983.243 47.2257 mo
989.243 41.2257 li
983.243 41.2257 mo
989.243 47.2257 li
f
1 lw
0 lc
983.243 47.2257 mo
989.243 41.2257 li
983.243 41.2257 mo
989.243 47.2257 li
@
grestore
gsave
992.581 47.6852 mo
999.581 47.6852 li
999.581 40.6853 li
992.581 40.6853 li
992.581 47.6852 li
clp
993.081 47.1853 mo
999.081 41.1853 li
993.081 41.1853 mo
999.081 47.1853 li
f
1 lw
0 lc
993.081 47.1853 mo
999.081 41.1853 li
993.081 41.1853 mo
999.081 47.1853 li
@
grestore
gsave
1002.42 47.6448 mo
1009.42 47.6448 li
1009.42 40.6448 li
1002.42 40.6448 li
1002.42 47.6448 li
clp
1002.92 47.1449 mo
1008.92 41.1449 li
1002.92 41.1449 mo
1008.92 47.1449 li
f
1 lw
0 lc
1002.92 47.1449 mo
1008.92 41.1449 li
1002.92 41.1449 mo
1008.92 47.1449 li
@
grestore
gsave
1012.26 47.6448 mo
1019.26 47.6448 li
1019.26 40.6448 li
1012.26 40.6448 li
1012.26 47.6448 li
clp
1012.76 47.1449 mo
1018.76 41.1449 li
1012.76 41.1449 mo
1018.76 47.1449 li
f
1 lw
0 lc
1012.76 47.1449 mo
1018.76 41.1449 li
1012.76 41.1449 mo
1018.76 47.1449 li
@
grestore
gsave
1022.1 47.6448 mo
1029.1 47.6448 li
1029.1 40.6448 li
1022.1 40.6448 li
1022.1 47.6448 li
clp
1022.6 47.1449 mo
1028.6 41.1449 li
1022.6 41.1449 mo
1028.6 47.1449 li
f
1 lw
0 lc
1022.6 47.1449 mo
1028.6 41.1449 li
1022.6 41.1449 mo
1028.6 47.1449 li
@
grestore
gsave
1031.93 47.6448 mo
1038.93 47.6448 li
1038.93 40.6448 li
1031.93 40.6448 li
1031.93 47.6448 li
clp
1032.43 47.1449 mo
1038.43 41.1449 li
1032.43 41.1449 mo
1038.43 47.1449 li
f
1 lw
0 lc
1032.43 47.1449 mo
1038.43 41.1449 li
1032.43 41.1449 mo
1038.43 47.1449 li
@
grestore
gsave
1041.77 47.6448 mo
1048.77 47.6448 li
1048.77 40.6448 li
1041.77 40.6448 li
1041.77 47.6448 li
clp
1042.27 47.1449 mo
1048.27 41.1449 li
1042.27 41.1449 mo
1048.27 47.1449 li
f
1 lw
0 lc
1042.27 47.1449 mo
1048.27 41.1449 li
1042.27 41.1449 mo
1048.27 47.1449 li
@
grestore
gsave
1051.61 47.6448 mo
1058.61 47.6448 li
1058.61 40.6448 li
1051.61 40.6448 li
1051.61 47.6448 li
clp
1052.11 47.1449 mo
1058.11 41.1449 li
1052.11 41.1449 mo
1058.11 47.1449 li
f
1 lw
0 lc
1052.11 47.1449 mo
1058.11 41.1449 li
1052.11 41.1449 mo
1058.11 47.1449 li
@
grestore
gsave
1061.45 47.6652 mo
1068.45 47.6652 li
1068.45 40.6652 li
1061.45 40.6652 li
1061.45 47.6652 li
clp
1061.95 47.1651 mo
1067.95 41.1651 li
1061.95 41.1651 mo
1067.95 47.1651 li
f
1 lw
0 lc
1061.95 47.1651 mo
1067.95 41.1651 li
1061.95 41.1651 mo
1067.95 47.1651 li
@
grestore
gsave
1071.29 47.7257 mo
1078.29 47.7257 li
1078.29 40.7258 li
1071.29 40.7258 li
1071.29 47.7257 li
clp
1071.79 47.2257 mo
1077.79 41.2257 li
1071.79 41.2257 mo
1077.79 47.2257 li
f
1 lw
0 lc
1071.79 47.2257 mo
1077.79 41.2257 li
1071.79 41.2257 mo
1077.79 47.2257 li
@
grestore
gsave
1081.12 47.7458 mo
1088.12 47.7458 li
1088.12 40.7459 li
1081.12 40.7459 li
1081.12 47.7458 li
clp
1081.62 47.2459 mo
1087.62 41.2459 li
1081.62 41.2459 mo
1087.62 47.2459 li
f
1 lw
0 lc
1081.62 47.2459 mo
1087.62 41.2459 li
1081.62 41.2459 mo
1087.62 47.2459 li
@
grestore
gsave
1090.96 47.8064 mo
1097.96 47.8064 li
1097.96 40.8064 li
1090.96 40.8064 li
1090.96 47.8064 li
clp
1091.46 47.3065 mo
1097.46 41.3065 li
1091.46 41.3065 mo
1097.46 47.3065 li
f
1 lw
0 lc
1091.46 47.3065 mo
1097.46 41.3065 li
1091.46 41.3065 mo
1097.46 47.3065 li
@
grestore
.8 lw
0 lj
71.8 548.935 mo
71.8 11.7216 li
@
1143.16 548.935 mo
1143.16 11.7216 li
@
71.8 548.935 mo
1143.16 548.935 li
@
71.8 11.7216 mo
1143.16 11.7216 li
@
gsave
1136.16 543.435 mo
837.223 543.435 li
836.633 543.433 836.285 543.291 836.076 543.082 cv
835.867 542.872 835.724 542.525 835.722 541.935 cv
835.722 445.498 li
835.724 444.908 835.867 444.56 836.076 444.351 cv
836.285 444.142 836.633 443.999 837.223 443.998 cv
1136.16 443.998 li
1136.75 443.999 1137.1 444.142 1137.31 444.351 cv
1137.52 444.56 1137.66 444.908 1137.66 445.498 cv
1137.66 541.935 li
1137.66 542.525 1137.52 542.872 1137.31 543.082 cv
1137.1 543.291 1136.75 543.433 1136.16 543.435 cv
clp
835.722 443.998 mo
1137.66 443.998 li
1137.66 543.435 li
835.722 543.435 li
cp
0 0 0 0 cmyk
f
grestore
1136.17 544.435 mo
1136.17 544.435 1136.16 544.435 1136.16 544.435 cv
837.223 544.435 li
837.219 544.435 837.215 544.435 837.211 544.435 cv
836.472 544.435 835.824 544.244 835.369 543.789 cv
834.912 543.331 834.721 542.679 834.723 541.935 cv
834.723 445.498 li
834.721 444.754 834.912 444.102 835.369 443.644 cv
835.824 443.189 836.473 442.998 837.213 442.998 cv
837.216 442.998 837.219 442.998 837.223 442.998 cv
1136.16 442.998 li
1136.16 442.998 1136.17 442.998 1136.17 442.998 cv
1136.91 442.998 1137.56 443.189 1138.01 443.644 cv
1138.47 444.102 1138.66 444.754 1138.66 445.498 cv
1138.66 541.935 li
1138.66 542.679 1138.47 543.331 1138.01 543.789 cv
1137.56 544.244 1136.91 544.435 1136.17 544.435 cv
837.223 543.435 mo
1136.16 543.435 li
1136.75 543.433 1137.1 543.291 1137.31 543.082 cv
1137.52 542.872 1137.66 542.525 1137.66 541.935 cv
1137.66 445.498 li
1137.66 444.908 1137.52 444.56 1137.31 444.351 cv
1137.1 444.142 1136.75 443.999 1136.16 443.998 cv
837.223 443.998 li
836.633 443.999 836.285 444.142 836.076 444.351 cv
835.867 444.56 835.724 444.908 835.722 445.498 cv
835.722 541.935 li
835.724 542.525 835.867 542.872 836.076 543.082 cv
836.285 543.291 836.633 543.433 837.223 543.435 cv
837.223 543.435 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
839.222 459.201 mo
859.222 459.201 li
0 1 1 0 cmyk
@
871.162 449.741 mo
871.162 461.081 li
873.542 461.081 li
875.542 461.081 877.022 460.641 877.962 459.721 cv
878.882 458.801 879.362 457.361 879.362 455.401 cv
879.362 453.441 878.882 452.021 877.962 451.101 cv
877.022 450.201 875.542 449.741 873.542 449.741 cv
871.162 449.741 li
869.182 448.121 mo
873.242 448.121 li
876.063 448.121 878.142 448.721 879.462 449.881 cv
880.782 451.061 881.443 452.901 881.443 455.401 cv
881.443 457.921 880.762 459.761 879.443 460.941 cv
878.122 462.121 876.042 462.701 873.242 462.701 cv
869.182 462.701 li
869.182 448.121 li
1 /0 /CSD get_res sepcs
1 sep
f
886.563 455.741 mo
886.563 461.081 li
889.723 461.081 li
890.783 461.081 891.563 460.861 892.083 460.421 cv
892.583 459.981 892.843 459.321 892.843 458.401 cv
892.843 457.501 892.583 456.841 892.083 456.401 cv
891.563 455.961 890.783 455.741 889.723 455.741 cv
886.563 455.741 li
886.563 449.741 mo
886.563 454.141 li
889.483 454.141 li
890.443 454.141 891.143 453.961 891.623 453.601 cv
892.103 453.241 892.343 452.701 892.343 451.941 cv
892.343 451.221 892.103 450.661 891.623 450.301 cv
891.143 449.941 890.443 449.741 889.483 449.741 cv
886.563 449.741 li
884.583 448.121 mo
889.623 448.121 li
891.123 448.121 892.283 448.441 893.103 449.061 cv
893.903 449.701 894.323 450.581 894.323 451.721 cv
894.323 452.621 894.103 453.341 893.683 453.861 cv
893.263 454.381 892.663 454.721 891.863 454.841 cv
892.823 455.061 893.583 455.501 894.123 456.161 cv
894.643 456.821 894.923 457.641 894.923 458.621 cv
894.923 459.941 894.463 460.941 893.583 461.641 cv
892.703 462.361 891.443 462.701 889.823 462.701 cv
884.583 462.701 li
884.583 448.121 li
f
898.303 448.121 mo
900.963 448.121 li
907.423 460.321 li
907.423 448.121 li
909.343 448.121 li
909.343 462.701 li
906.683 462.701 li
900.223 450.501 li
900.223 462.701 li
898.303 462.701 li
898.303 448.121 li
f
923.863 447.521 mo
922.983 449.041 922.343 450.521 921.923 451.981 cv
921.483 453.441 921.283 454.921 921.283 456.421 cv
921.283 457.941 921.483 459.421 921.923 460.881 cv
922.343 462.361 922.983 463.821 923.863 465.321 cv
922.303 465.321 li
921.323 463.781 920.583 462.301 920.103 460.821 cv
919.623 459.341 919.383 457.881 919.383 456.421 cv
919.383 454.981 919.623 453.521 920.103 452.041 cv
920.583 450.561 921.303 449.061 922.303 447.521 cv
923.863 447.521 li
f
925.422 448.121 mo
937.743 448.121 li
937.743 449.781 li
932.563 449.781 li
932.563 462.701 li
930.583 462.701 li
930.583 449.781 li
925.422 449.781 li
925.422 448.121 li
f
945.902 453.441 mo
945.702 453.321 945.482 453.241 945.242 453.181 cv
945.002 453.141 944.742 453.101 944.462 453.101 cv
943.442 453.101 942.662 453.441 942.122 454.101 cv
941.562 454.761 941.302 455.701 941.302 456.941 cv
941.302 462.701 li
939.502 462.701 li
939.502 451.761 li
941.302 451.761 li
941.302 453.461 li
941.662 452.801 942.162 452.301 942.762 451.981 cv
943.362 451.661 944.102 451.501 944.982 451.501 cv
945.102 451.501 945.242 451.521 945.402 451.521 cv
945.542 451.541 945.702 451.561 945.902 451.601 cv
945.902 453.441 li
f
952.762 457.201 mo
951.302 457.201 950.302 457.381 949.742 457.701 cv
949.182 458.041 948.902 458.601 948.902 459.401 cv
948.902 460.041 949.102 460.561 949.522 460.921 cv
949.942 461.301 950.522 461.481 951.242 461.481 cv
952.242 461.481 953.042 461.141 953.642 460.421 cv
954.242 459.721 954.542 458.781 954.542 457.601 cv
954.542 457.201 li
952.762 457.201 li
956.342 456.461 mo
956.342 462.701 li
954.542 462.701 li
954.542 461.041 li
954.122 461.721 953.602 462.201 953.002 462.501 cv
952.402 462.801 951.642 462.961 950.762 462.961 cv
949.642 462.961 948.742 462.661 948.082 462.041 cv
947.422 461.421 947.102 460.581 947.102 459.521 cv
947.102 458.301 947.502 457.381 948.342 456.741 cv
949.162 456.121 950.382 455.801 952.022 455.801 cv
954.542 455.801 li
954.542 455.621 li
954.542 454.801 954.262 454.161 953.722 453.701 cv
953.182 453.261 952.422 453.021 951.442 453.021 cv
950.802 453.021 950.202 453.101 949.602 453.261 cv
949.002 453.421 948.442 453.641 947.902 453.921 cv
947.902 452.261 li
948.542 452.021 949.182 451.821 949.802 451.701 cv
950.422 451.581 951.022 451.501 951.622 451.501 cv
953.202 451.501 954.382 451.921 955.162 452.741 cv
955.942 453.561 956.342 454.801 956.342 456.461 cv
f
960.042 451.761 mo
961.842 451.761 li
961.842 462.701 li
960.042 462.701 li
960.042 451.761 li
960.042 447.501 mo
961.842 447.501 li
961.842 449.781 li
960.042 449.781 li
960.042 447.501 li
f
974.702 456.101 mo
974.702 462.701 li
972.902 462.701 li
972.902 456.161 li
972.902 455.121 972.682 454.361 972.282 453.841 cv
971.882 453.321 971.282 453.061 970.482 453.061 cv
969.502 453.061 968.742 453.381 968.182 454.001 cv
967.622 454.621 967.342 455.461 967.342 456.521 cv
967.342 462.701 li
965.542 462.701 li
965.542 451.761 li
967.342 451.761 li
967.342 453.461 li
967.762 452.821 968.262 452.321 968.862 452.001 cv
969.442 451.681 970.122 451.501 970.882 451.501 cv
972.122 451.501 973.082 451.901 973.722 452.681 cv
974.362 453.461 974.702 454.601 974.702 456.101 cv
f
978.282 451.761 mo
980.083 451.761 li
980.083 462.701 li
978.282 462.701 li
978.282 451.761 li
978.282 447.501 mo
980.083 447.501 li
980.083 449.781 li
978.282 449.781 li
978.282 447.501 li
f
992.942 456.101 mo
992.942 462.701 li
991.142 462.701 li
991.142 456.161 li
991.142 455.121 990.922 454.361 990.522 453.841 cv
990.122 453.321 989.522 453.061 988.722 453.061 cv
987.742 453.061 986.982 453.381 986.422 454.001 cv
985.862 454.621 985.582 455.461 985.582 456.521 cv
985.582 462.701 li
983.782 462.701 li
983.782 451.761 li
985.582 451.761 li
985.582 453.461 li
986.002 452.821 986.502 452.321 987.102 452.001 cv
987.682 451.681 988.362 451.501 989.122 451.501 cv
990.362 451.501 991.322 451.901 991.962 452.681 cv
992.602 453.461 992.942 454.601 992.942 456.101 cv
f
1003.72 457.101 mo
1003.72 455.821 1003.44 454.801 1002.92 454.081 cv
1002.38 453.361 1001.62 453.001 1000.66 453.001 cv
999.703 453.001 998.943 453.361 998.403 454.081 cv
997.863 454.801 997.603 455.821 997.603 457.101 cv
997.603 458.401 997.863 459.401 998.403 460.121 cv
998.943 460.841 999.703 461.201 1000.66 461.201 cv
1001.62 461.201 1002.38 460.841 1002.92 460.121 cv
1003.44 459.401 1003.72 458.401 1003.72 457.101 cv
1005.52 461.341 mo
1005.52 463.181 1005.1 464.561 1004.28 465.481 cv
1003.44 466.381 1002.18 466.841 1000.48 466.841 cv
999.843 466.841 999.263 466.781 998.703 466.701 cv
998.143 466.601 997.583 466.461 997.063 466.261 cv
997.063 464.521 li
997.583 464.801 998.103 465.001 998.623 465.141 cv
999.143 465.281 999.663 465.361 1000.2 465.361 cv
1001.36 465.361 1002.24 465.041 1002.84 464.441 cv
1003.42 463.821 1003.72 462.901 1003.72 461.661 cv
1003.72 460.781 li
1003.34 461.421 1002.86 461.901 1002.28 462.221 cv
1001.7 462.541 1001.02 462.701 1000.22 462.701 cv
998.863 462.701 997.783 462.201 996.963 461.181 cv
996.143 460.161 995.743 458.801 995.743 457.101 cv
995.743 455.421 996.143 454.061 996.963 453.041 cv
997.783 452.021 998.863 451.501 1000.22 451.501 cv
1001.02 451.501 1001.7 451.661 1002.28 451.981 cv
1002.86 452.301 1003.34 452.781 1003.72 453.421 cv
1003.72 451.761 li
1005.52 451.761 li
1005.52 461.341 li
f
1009.68 460.221 mo
1011.74 460.221 li
1011.74 461.901 li
1010.14 465.001 li
1008.88 465.001 li
1009.68 461.901 li
1009.68 460.221 li
f
1030.76 448.601 mo
1030.76 450.521 li
1030 450.161 1029.3 449.901 1028.64 449.721 cv
1027.96 449.561 1027.32 449.461 1026.72 449.461 cv
1025.64 449.461 1024.8 449.681 1024.22 450.081 cv
1023.64 450.501 1023.36 451.101 1023.36 451.861 cv
1023.36 452.501 1023.54 453.001 1023.94 453.321 cv
1024.32 453.661 1025.06 453.921 1026.14 454.121 cv
1027.34 454.361 li
1028.8 454.641 1029.88 455.141 1030.58 455.841 cv
1031.28 456.561 1031.64 457.501 1031.64 458.681 cv
1031.64 460.101 1031.16 461.161 1030.22 461.881 cv
1029.26 462.601 1027.88 462.961 1026.06 462.961 cv
1025.36 462.961 1024.62 462.881 1023.84 462.741 cv
1023.06 462.601 1022.26 462.381 1021.44 462.061 cv
1021.44 460.021 li
1022.24 460.481 1023.02 460.821 1023.78 461.041 cv
1024.54 461.281 1025.3 461.381 1026.06 461.381 cv
1027.18 461.381 1028.04 461.161 1028.66 460.721 cv
1029.26 460.281 1029.58 459.661 1029.58 458.821 cv
1029.58 458.101 1029.36 457.541 1028.92 457.141 cv
1028.48 456.741 1027.76 456.441 1026.76 456.241 cv
1025.56 456.001 li
1024.08 455.721 1023.02 455.261 1022.36 454.621 cv
1021.7 454.001 1021.38 453.141 1021.38 452.021 cv
1021.38 450.741 1021.82 449.721 1022.74 448.981 cv
1023.64 448.241 1024.9 447.861 1026.5 447.861 cv
1027.18 447.861 1027.86 447.921 1028.58 448.041 cv
1029.28 448.161 1030 448.361 1030.76 448.601 cv
f
1034.64 451.761 mo
1036.44 451.761 li
1036.44 462.701 li
1034.64 462.701 li
1034.64 451.761 li
1034.64 447.501 mo
1036.44 447.501 li
1036.44 449.781 li
1034.64 449.781 li
1034.64 447.501 li
f
1047.4 457.101 mo
1047.4 455.821 1047.12 454.801 1046.6 454.081 cv
1046.06 453.361 1045.3 453.001 1044.34 453.001 cv
1043.38 453.001 1042.62 453.361 1042.08 454.081 cv
1041.54 454.801 1041.28 455.821 1041.28 457.101 cv
1041.28 458.401 1041.54 459.401 1042.08 460.121 cv
1042.62 460.841 1043.38 461.201 1044.34 461.201 cv
1045.3 461.201 1046.06 460.841 1046.6 460.121 cv
1047.12 459.401 1047.4 458.401 1047.4 457.101 cv
1049.2 461.341 mo
1049.2 463.181 1048.78 464.561 1047.96 465.481 cv
1047.12 466.381 1045.86 466.841 1044.16 466.841 cv
1043.52 466.841 1042.94 466.781 1042.38 466.701 cv
1041.82 466.601 1041.26 466.461 1040.74 466.261 cv
1040.74 464.521 li
1041.26 464.801 1041.78 465.001 1042.3 465.141 cv
1042.82 465.281 1043.34 465.361 1043.88 465.361 cv
1045.04 465.361 1045.92 465.041 1046.52 464.441 cv
1047.1 463.821 1047.4 462.901 1047.4 461.661 cv
1047.4 460.781 li
1047.02 461.421 1046.54 461.901 1045.96 462.221 cv
1045.38 462.541 1044.7 462.701 1043.9 462.701 cv
1042.54 462.701 1041.46 462.201 1040.64 461.181 cv
1039.82 460.161 1039.42 458.801 1039.42 457.101 cv
1039.42 455.421 1039.82 454.061 1040.64 453.041 cv
1041.46 452.021 1042.54 451.501 1043.9 451.501 cv
1044.7 451.501 1045.38 451.661 1045.96 451.981 cv
1046.54 452.301 1047.02 452.781 1047.4 453.421 cv
1047.4 451.761 li
1049.2 451.761 li
1049.2 461.341 li
f
1061.42 453.861 mo
1061.86 453.061 1062.4 452.481 1063.02 452.081 cv
1063.64 451.701 1064.38 451.501 1065.24 451.501 cv
1066.36 451.501 1067.24 451.901 1067.86 452.701 cv
1068.48 453.501 1068.8 454.641 1068.8 456.101 cv
1068.8 462.701 li
1067 462.701 li
1067 456.161 li
1067 455.121 1066.8 454.341 1066.44 453.821 cv
1066.06 453.321 1065.5 453.061 1064.74 453.061 cv
1063.8 453.061 1063.06 453.381 1062.52 454.001 cv
1061.98 454.621 1061.72 455.461 1061.72 456.521 cv
1061.72 462.701 li
1059.92 462.701 li
1059.92 456.161 li
1059.92 455.121 1059.72 454.341 1059.36 453.821 cv
1058.98 453.321 1058.4 453.061 1057.64 453.061 cv
1056.72 453.061 1055.98 453.381 1055.44 454.001 cv
1054.9 454.621 1054.64 455.461 1054.64 456.521 cv
1054.64 462.701 li
1052.84 462.701 li
1052.84 451.761 li
1054.64 451.761 li
1054.64 453.461 li
1055.04 452.801 1055.54 452.301 1056.12 451.981 cv
1056.68 451.661 1057.36 451.501 1058.16 451.501 cv
1058.96 451.501 1059.62 451.701 1060.18 452.101 cv
1060.74 452.501 1061.14 453.101 1061.42 453.861 cv
f
1076.62 453.021 mo
1075.66 453.021 1074.9 453.401 1074.34 454.161 cv
1073.78 454.921 1073.5 455.941 1073.5 457.241 cv
1073.5 458.561 1073.76 459.581 1074.32 460.341 cv
1074.88 461.101 1075.64 461.461 1076.62 461.461 cv
1077.58 461.461 1078.34 461.101 1078.9 460.341 cv
1079.46 459.581 1079.74 458.561 1079.74 457.241 cv
1079.74 455.961 1079.46 454.921 1078.9 454.161 cv
1078.34 453.401 1077.58 453.021 1076.62 453.021 cv
1076.62 451.501 mo
1078.18 451.501 1079.4 452.021 1080.3 453.021 cv
1081.18 454.041 1081.64 455.441 1081.64 457.241 cv
1081.64 459.041 1081.18 460.441 1080.3 461.441 cv
1079.4 462.461 1078.18 462.961 1076.62 462.961 cv
1075.04 462.961 1073.8 462.461 1072.92 461.441 cv
1072.04 460.441 1071.6 459.041 1071.6 457.241 cv
1071.6 455.441 1072.04 454.041 1072.92 453.021 cv
1073.8 452.021 1075.04 451.501 1076.62 451.501 cv
f
1084.62 451.761 mo
1086.42 451.761 li
1086.42 462.701 li
1084.62 462.701 li
1084.62 451.761 li
1084.62 447.501 mo
1086.42 447.501 li
1086.42 449.781 li
1084.62 449.781 li
1084.62 447.501 li
f
1097.38 453.421 mo
1097.38 447.501 li
1099.18 447.501 li
1099.18 462.701 li
1097.38 462.701 li
1097.38 461.061 li
1097 461.721 1096.52 462.201 1095.94 462.501 cv
1095.36 462.801 1094.68 462.961 1093.88 462.961 cv
1092.56 462.961 1091.48 462.441 1090.64 461.401 cv
1089.8 460.361 1089.4 458.961 1089.4 457.241 cv
1089.4 455.521 1089.8 454.141 1090.64 453.081 cv
1091.48 452.041 1092.56 451.501 1093.88 451.501 cv
1094.68 451.501 1095.36 451.661 1095.94 451.981 cv
1096.52 452.301 1097 452.781 1097.38 453.421 cv
1091.26 457.241 mo
1091.26 458.561 1091.52 459.601 1092.06 460.361 cv
1092.6 461.121 1093.36 461.481 1094.32 461.481 cv
1095.26 461.481 1096 461.121 1096.56 460.361 cv
1097.1 459.601 1097.38 458.561 1097.38 457.241 cv
1097.38 455.921 1097.1 454.901 1096.56 454.141 cv
1096 453.381 1095.26 453.001 1094.32 453.001 cv
1093.36 453.001 1092.6 453.381 1092.06 454.141 cv
1091.52 454.901 1091.26 455.921 1091.26 457.241 cv
f
1102.6 447.521 mo
1104.16 447.521 li
1105.12 449.061 1105.86 450.561 1106.34 452.041 cv
1106.82 453.521 1107.08 454.981 1107.08 456.421 cv
1107.08 457.881 1106.82 459.341 1106.34 460.821 cv
1105.86 462.301 1105.12 463.781 1104.16 465.321 cv
1102.6 465.321 li
1103.46 463.821 1104.1 462.361 1104.54 460.881 cv
1104.96 459.421 1105.18 457.941 1105.18 456.421 cv
1105.18 454.921 1104.96 453.441 1104.54 451.981 cv
1104.1 450.521 1103.46 449.041 1102.6 447.521 cv
f
839.222 483.56 mo
859.222 483.56 li
0 1 1 0 cmyk
@
846.222 486.56 mo
852.222 480.56 li
846.222 480.56 mo
852.222 486.56 li
f
1 lw
0 lc
846.222 486.56 mo
852.222 480.56 li
846.222 480.56 mo
852.222 486.56 li
@
871.162 474.1 mo
871.162 485.44 li
873.542 485.44 li
875.542 485.44 877.022 485 877.962 484.08 cv
878.882 483.16 879.362 481.72 879.362 479.76 cv
879.362 477.8 878.882 476.38 877.962 475.46 cv
877.022 474.56 875.542 474.1 873.542 474.1 cv
871.162 474.1 li
869.182 472.48 mo
873.242 472.48 li
876.063 472.48 878.142 473.08 879.462 474.24 cv
880.782 475.42 881.443 477.26 881.443 479.76 cv
881.443 482.28 880.762 484.12 879.443 485.3 cv
878.122 486.48 876.042 487.06 873.242 487.06 cv
869.182 487.06 li
869.182 472.48 li
1 /0 /CSD get_res sepcs
1 sep
f
886.563 480.1 mo
886.563 485.44 li
889.723 485.44 li
890.783 485.44 891.563 485.22 892.083 484.78 cv
892.583 484.34 892.843 483.68 892.843 482.76 cv
892.843 481.86 892.583 481.2 892.083 480.76 cv
891.563 480.32 890.783 480.1 889.723 480.1 cv
886.563 480.1 li
886.563 474.1 mo
886.563 478.5 li
889.483 478.5 li
890.443 478.5 891.143 478.32 891.623 477.96 cv
892.103 477.6 892.343 477.06 892.343 476.3 cv
892.343 475.58 892.103 475.02 891.623 474.66 cv
891.143 474.3 890.443 474.1 889.483 474.1 cv
886.563 474.1 li
884.583 472.48 mo
889.623 472.48 li
891.123 472.48 892.283 472.8 893.103 473.42 cv
893.903 474.06 894.323 474.94 894.323 476.08 cv
894.323 476.98 894.103 477.7 893.683 478.22 cv
893.263 478.74 892.663 479.08 891.863 479.2 cv
892.823 479.42 893.583 479.86 894.123 480.52 cv
894.643 481.18 894.923 482 894.923 482.98 cv
894.923 484.3 894.463 485.3 893.583 486 cv
892.703 486.72 891.443 487.06 889.823 487.06 cv
884.583 487.06 li
884.583 472.48 li
f
898.303 472.48 mo
900.963 472.48 li
907.423 484.68 li
907.423 472.48 li
909.343 472.48 li
909.343 487.06 li
906.683 487.06 li
900.223 474.86 li
900.223 487.06 li
898.303 487.06 li
898.303 472.48 li
f
923.863 471.88 mo
922.983 473.4 922.343 474.88 921.923 476.34 cv
921.483 477.8 921.283 479.28 921.283 480.78 cv
921.283 482.3 921.483 483.78 921.923 485.24 cv
922.343 486.72 922.983 488.18 923.863 489.68 cv
922.303 489.68 li
921.323 488.14 920.583 486.66 920.103 485.18 cv
919.623 483.7 919.383 482.24 919.383 480.78 cv
919.383 479.34 919.623 477.88 920.103 476.4 cv
920.583 474.92 921.303 473.42 922.303 471.88 cv
923.863 471.88 li
f
925.422 472.48 mo
937.743 472.48 li
937.743 474.14 li
932.563 474.14 li
932.563 487.06 li
930.583 487.06 li
930.583 474.14 li
925.422 474.14 li
925.422 472.48 li
f
948.922 481.14 mo
948.922 482.02 li
940.662 482.02 li
940.742 483.26 941.102 484.22 941.782 484.86 cv
942.442 485.5 943.362 485.82 944.562 485.82 cv
945.242 485.82 945.922 485.74 946.562 485.58 cv
947.202 485.42 947.862 485.16 948.502 484.8 cv
948.502 486.5 li
947.862 486.78 947.202 487 946.522 487.12 cv
945.842 487.24 945.142 487.32 944.462 487.32 cv
942.702 487.32 941.322 486.82 940.302 485.82 cv
939.282 484.82 938.782 483.44 938.782 481.7 cv
938.782 479.92 939.262 478.5 940.222 477.44 cv
941.182 476.4 942.502 475.86 944.142 475.86 cv
945.622 475.86 946.782 476.34 947.642 477.28 cv
948.482 478.24 948.922 479.52 948.922 481.14 cv
947.122 480.62 mo
947.102 479.64 946.822 478.86 946.302 478.26 cv
945.762 477.68 945.042 477.38 944.162 477.38 cv
943.162 477.38 942.362 477.68 941.762 478.24 cv
941.162 478.8 940.802 479.6 940.722 480.62 cv
947.122 480.62 li
f
958.842 476.44 mo
958.842 478.14 li
958.322 477.9 957.802 477.7 957.262 477.56 cv
956.702 477.44 956.142 477.36 955.562 477.36 cv
954.662 477.36 953.982 477.5 953.542 477.78 cv
953.102 478.06 952.882 478.46 952.882 479 cv
952.882 479.42 953.042 479.74 953.362 479.98 cv
953.682 480.22 954.322 480.46 955.282 480.66 cv
955.902 480.8 li
957.182 481.08 958.082 481.48 958.622 481.96 cv
959.142 482.46 959.422 483.16 959.422 484.04 cv
959.422 485.06 959.022 485.86 958.222 486.44 cv
957.422 487.04 956.302 487.32 954.902 487.32 cv
954.302 487.32 953.702 487.26 953.062 487.16 cv
952.422 487.06 951.762 486.9 951.062 486.66 cv
951.062 484.8 li
951.722 485.16 952.382 485.42 953.022 485.58 cv
953.662 485.76 954.302 485.84 954.942 485.84 cv
955.782 485.84 956.442 485.7 956.902 485.42 cv
957.342 485.14 957.582 484.72 957.582 484.18 cv
957.582 483.7 957.402 483.32 957.082 483.06 cv
956.762 482.8 956.042 482.54 954.922 482.3 cv
954.302 482.16 li
953.182 481.92 952.362 481.56 951.882 481.08 cv
951.382 480.6 951.142 479.94 951.142 479.08 cv
951.142 478.06 951.502 477.26 952.222 476.7 cv
952.942 476.14 953.982 475.86 955.342 475.86 cv
956.002 475.86 956.622 475.92 957.222 476.02 cv
957.802 476.12 958.342 476.26 958.842 476.44 cv
f
964.062 473.02 mo
964.062 476.12 li
967.762 476.12 li
967.762 477.52 li
964.062 477.52 li
964.062 483.46 li
964.062 484.36 964.182 484.94 964.422 485.18 cv
964.662 485.44 965.162 485.56 965.922 485.56 cv
967.762 485.56 li
967.762 487.06 li
965.922 487.06 li
964.522 487.06 963.562 486.8 963.042 486.28 cv
962.522 485.76 962.262 484.82 962.262 483.46 cv
962.262 477.52 li
960.942 477.52 li
960.942 476.12 li
962.262 476.12 li
962.262 473.02 li
964.062 473.02 li
f
970.122 476.12 mo
971.922 476.12 li
971.922 487.06 li
970.122 487.06 li
970.122 476.12 li
970.122 471.86 mo
971.922 471.86 li
971.922 474.14 li
970.122 474.14 li
970.122 471.86 li
f
984.782 480.46 mo
984.782 487.06 li
982.982 487.06 li
982.982 480.52 li
982.982 479.48 982.762 478.72 982.362 478.2 cv
981.962 477.68 981.362 477.42 980.562 477.42 cv
979.582 477.42 978.822 477.74 978.262 478.36 cv
977.702 478.98 977.422 479.82 977.422 480.88 cv
977.422 487.06 li
975.622 487.06 li
975.622 476.12 li
977.422 476.12 li
977.422 477.82 li
977.842 477.18 978.342 476.68 978.942 476.36 cv
979.522 476.04 980.202 475.86 980.962 475.86 cv
982.202 475.86 983.162 476.26 983.802 477.04 cv
984.442 477.82 984.782 478.96 984.782 480.46 cv
f
995.562 481.46 mo
995.562 480.18 995.282 479.16 994.762 478.44 cv
994.222 477.72 993.462 477.36 992.502 477.36 cv
991.542 477.36 990.782 477.72 990.242 478.44 cv
989.702 479.16 989.442 480.18 989.442 481.46 cv
989.442 482.76 989.702 483.76 990.242 484.48 cv
990.782 485.2 991.542 485.56 992.502 485.56 cv
993.462 485.56 994.222 485.2 994.762 484.48 cv
995.282 483.76 995.562 482.76 995.562 481.46 cv
997.362 485.7 mo
997.362 487.54 996.942 488.92 996.122 489.84 cv
995.282 490.74 994.022 491.2 992.322 491.2 cv
991.682 491.2 991.102 491.14 990.542 491.06 cv
989.982 490.96 989.422 490.82 988.902 490.62 cv
988.902 488.88 li
989.422 489.16 989.942 489.36 990.462 489.5 cv
990.982 489.64 991.502 489.72 992.042 489.72 cv
993.202 489.72 994.082 489.4 994.682 488.8 cv
995.262 488.18 995.562 487.26 995.562 486.02 cv
995.562 485.14 li
995.182 485.78 994.702 486.26 994.122 486.58 cv
993.542 486.9 992.862 487.06 992.062 487.06 cv
990.702 487.06 989.622 486.56 988.802 485.54 cv
987.982 484.52 987.582 483.16 987.582 481.46 cv
987.582 479.78 987.982 478.42 988.802 477.4 cv
989.622 476.38 990.702 475.86 992.062 475.86 cv
992.862 475.86 993.542 476.02 994.122 476.34 cv
994.702 476.66 995.182 477.14 995.562 477.78 cv
995.562 476.12 li
997.362 476.12 li
997.362 485.7 li
f
1001.52 484.58 mo
1003.58 484.58 li
1003.58 486.26 li
1001.98 489.36 li
1000.72 489.36 li
1001.52 486.26 li
1001.52 484.58 li
f
1022.6 472.96 mo
1022.6 474.88 li
1021.84 474.52 1021.14 474.26 1020.48 474.08 cv
1019.8 473.92 1019.16 473.82 1018.56 473.82 cv
1017.48 473.82 1016.64 474.04 1016.06 474.44 cv
1015.48 474.86 1015.2 475.46 1015.2 476.22 cv
1015.2 476.86 1015.38 477.36 1015.78 477.68 cv
1016.16 478.02 1016.9 478.28 1017.98 478.48 cv
1019.18 478.72 li
1020.64 479 1021.72 479.5 1022.42 480.2 cv
1023.12 480.92 1023.48 481.86 1023.48 483.04 cv
1023.48 484.46 1023 485.52 1022.06 486.24 cv
1021.1 486.96 1019.72 487.32 1017.9 487.32 cv
1017.2 487.32 1016.46 487.24 1015.68 487.1 cv
1014.9 486.96 1014.1 486.74 1013.28 486.42 cv
1013.28 484.38 li
1014.08 484.84 1014.86 485.18 1015.62 485.4 cv
1016.38 485.64 1017.14 485.74 1017.9 485.74 cv
1019.02 485.74 1019.88 485.52 1020.5 485.08 cv
1021.1 484.64 1021.42 484.02 1021.42 483.18 cv
1021.42 482.46 1021.2 481.9 1020.76 481.5 cv
1020.32 481.1 1019.6 480.8 1018.6 480.6 cv
1017.4 480.36 li
1015.92 480.08 1014.86 479.62 1014.2 478.98 cv
1013.54 478.36 1013.22 477.5 1013.22 476.38 cv
1013.22 475.1 1013.66 474.08 1014.58 473.34 cv
1015.48 472.6 1016.74 472.22 1018.34 472.22 cv
1019.02 472.22 1019.7 472.28 1020.42 472.4 cv
1021.12 472.52 1021.84 472.72 1022.6 472.96 cv
f
1026.48 476.12 mo
1028.28 476.12 li
1028.28 487.06 li
1026.48 487.06 li
1026.48 476.12 li
1026.48 471.86 mo
1028.28 471.86 li
1028.28 474.14 li
1026.48 474.14 li
1026.48 471.86 li
f
1039.24 481.46 mo
1039.24 480.18 1038.96 479.16 1038.44 478.44 cv
1037.9 477.72 1037.14 477.36 1036.18 477.36 cv
1035.22 477.36 1034.46 477.72 1033.92 478.44 cv
1033.38 479.16 1033.12 480.18 1033.12 481.46 cv
1033.12 482.76 1033.38 483.76 1033.92 484.48 cv
1034.46 485.2 1035.22 485.56 1036.18 485.56 cv
1037.14 485.56 1037.9 485.2 1038.44 484.48 cv
1038.96 483.76 1039.24 482.76 1039.24 481.46 cv
1041.04 485.7 mo
1041.04 487.54 1040.62 488.92 1039.8 489.84 cv
1038.96 490.74 1037.7 491.2 1036 491.2 cv
1035.36 491.2 1034.78 491.14 1034.22 491.06 cv
1033.66 490.96 1033.1 490.82 1032.58 490.62 cv
1032.58 488.88 li
1033.1 489.16 1033.62 489.36 1034.14 489.5 cv
1034.66 489.64 1035.18 489.72 1035.72 489.72 cv
1036.88 489.72 1037.76 489.4 1038.36 488.8 cv
1038.94 488.18 1039.24 487.26 1039.24 486.02 cv
1039.24 485.14 li
1038.86 485.78 1038.38 486.26 1037.8 486.58 cv
1037.22 486.9 1036.54 487.06 1035.74 487.06 cv
1034.38 487.06 1033.3 486.56 1032.48 485.54 cv
1031.66 484.52 1031.26 483.16 1031.26 481.46 cv
1031.26 479.78 1031.66 478.42 1032.48 477.4 cv
1033.3 476.38 1034.38 475.86 1035.74 475.86 cv
1036.54 475.86 1037.22 476.02 1037.8 476.34 cv
1038.38 476.66 1038.86 477.14 1039.24 477.78 cv
1039.24 476.12 li
1041.04 476.12 li
1041.04 485.7 li
f
1053.26 478.22 mo
1053.7 477.42 1054.24 476.84 1054.86 476.44 cv
1055.48 476.06 1056.22 475.86 1057.08 475.86 cv
1058.2 475.86 1059.08 476.26 1059.7 477.06 cv
1060.32 477.86 1060.64 479 1060.64 480.46 cv
1060.64 487.06 li
1058.84 487.06 li
1058.84 480.52 li
1058.84 479.48 1058.64 478.7 1058.28 478.18 cv
1057.9 477.68 1057.34 477.42 1056.58 477.42 cv
1055.64 477.42 1054.9 477.74 1054.36 478.36 cv
1053.82 478.98 1053.56 479.82 1053.56 480.88 cv
1053.56 487.06 li
1051.76 487.06 li
1051.76 480.52 li
1051.76 479.48 1051.56 478.7 1051.2 478.18 cv
1050.82 477.68 1050.24 477.42 1049.48 477.42 cv
1048.56 477.42 1047.82 477.74 1047.28 478.36 cv
1046.74 478.98 1046.48 479.82 1046.48 480.88 cv
1046.48 487.06 li
1044.68 487.06 li
1044.68 476.12 li
1046.48 476.12 li
1046.48 477.82 li
1046.88 477.16 1047.38 476.66 1047.96 476.34 cv
1048.52 476.02 1049.2 475.86 1050 475.86 cv
1050.8 475.86 1051.46 476.06 1052.02 476.46 cv
1052.58 476.86 1052.98 477.46 1053.26 478.22 cv
f
1068.46 477.38 mo
1067.5 477.38 1066.74 477.76 1066.18 478.52 cv
1065.62 479.28 1065.34 480.3 1065.34 481.6 cv
1065.34 482.92 1065.6 483.94 1066.16 484.7 cv
1066.72 485.46 1067.48 485.82 1068.46 485.82 cv
1069.42 485.82 1070.18 485.46 1070.74 484.7 cv
1071.3 483.94 1071.58 482.92 1071.58 481.6 cv
1071.58 480.32 1071.3 479.28 1070.74 478.52 cv
1070.18 477.76 1069.42 477.38 1068.46 477.38 cv
1068.46 475.86 mo
1070.02 475.86 1071.24 476.38 1072.14 477.38 cv
1073.02 478.4 1073.48 479.8 1073.48 481.6 cv
1073.48 483.4 1073.02 484.8 1072.14 485.8 cv
1071.24 486.82 1070.02 487.32 1068.46 487.32 cv
1066.88 487.32 1065.64 486.82 1064.76 485.8 cv
1063.88 484.8 1063.44 483.4 1063.44 481.6 cv
1063.44 479.8 1063.88 478.4 1064.76 477.38 cv
1065.64 476.38 1066.88 475.86 1068.46 475.86 cv
f
1076.46 476.12 mo
1078.26 476.12 li
1078.26 487.06 li
1076.46 487.06 li
1076.46 476.12 li
1076.46 471.86 mo
1078.26 471.86 li
1078.26 474.14 li
1076.46 474.14 li
1076.46 471.86 li
f
1089.22 477.78 mo
1089.22 471.86 li
1091.02 471.86 li
1091.02 487.06 li
1089.22 487.06 li
1089.22 485.42 li
1088.84 486.08 1088.36 486.56 1087.78 486.86 cv
1087.2 487.16 1086.52 487.32 1085.72 487.32 cv
1084.4 487.32 1083.32 486.8 1082.48 485.76 cv
1081.64 484.72 1081.24 483.32 1081.24 481.6 cv
1081.24 479.88 1081.64 478.5 1082.48 477.44 cv
1083.32 476.4 1084.4 475.86 1085.72 475.86 cv
1086.52 475.86 1087.2 476.02 1087.78 476.34 cv
1088.36 476.66 1088.84 477.14 1089.22 477.78 cv
1083.1 481.6 mo
1083.1 482.92 1083.36 483.96 1083.9 484.72 cv
1084.44 485.48 1085.2 485.84 1086.16 485.84 cv
1087.1 485.84 1087.84 485.48 1088.4 484.72 cv
1088.94 483.96 1089.22 482.92 1089.22 481.6 cv
1089.22 480.28 1088.94 479.26 1088.4 478.5 cv
1087.84 477.74 1087.1 477.36 1086.16 477.36 cv
1085.2 477.36 1084.44 477.74 1083.9 478.5 cv
1083.36 479.26 1083.1 480.28 1083.1 481.6 cv
f
1094.44 471.88 mo
1096 471.88 li
1096.96 473.42 1097.7 474.92 1098.18 476.4 cv
1098.66 477.88 1098.92 479.34 1098.92 480.78 cv
1098.92 482.24 1098.66 483.7 1098.18 485.18 cv
1097.7 486.66 1096.96 488.14 1096 489.68 cv
1094.44 489.68 li
1095.3 488.18 1095.94 486.72 1096.38 485.24 cv
1096.8 483.78 1097.02 482.3 1097.02 480.78 cv
1097.02 479.28 1096.8 477.8 1096.38 476.34 cv
1095.94 474.88 1095.3 473.4 1094.44 471.88 cv
f
1.5 lw
2 lc
839.222 507.92 mo
859.222 507.92 li
@
877.922 497.32 mo
877.922 499.24 li
877.162 498.88 876.462 498.62 875.802 498.44 cv
875.122 498.28 874.482 498.18 873.882 498.18 cv
872.802 498.18 871.962 498.4 871.382 498.8 cv
870.802 499.22 870.522 499.82 870.522 500.58 cv
870.522 501.22 870.702 501.72 871.102 502.04 cv
871.482 502.38 872.222 502.64 873.302 502.84 cv
874.503 503.08 li
875.962 503.36 877.042 503.86 877.742 504.56 cv
878.443 505.28 878.802 506.22 878.802 507.4 cv
878.802 508.82 878.322 509.88 877.382 510.6 cv
876.422 511.32 875.042 511.68 873.222 511.68 cv
872.522 511.68 871.782 511.6 871.003 511.46 cv
870.222 511.32 869.422 511.1 868.602 510.78 cv
868.602 508.74 li
869.402 509.2 870.182 509.54 870.942 509.76 cv
871.702 510 872.462 510.1 873.222 510.1 cv
874.342 510.1 875.202 509.88 875.822 509.44 cv
876.422 509 876.742 508.38 876.742 507.54 cv
876.742 506.82 876.522 506.26 876.082 505.86 cv
875.642 505.46 874.922 505.16 873.922 504.96 cv
872.722 504.72 li
871.242 504.44 870.182 503.98 869.522 503.34 cv
868.862 502.72 868.542 501.86 868.542 500.74 cv
868.542 499.46 868.982 498.44 869.902 497.7 cv
870.802 496.96 872.063 496.58 873.662 496.58 cv
874.342 496.58 875.022 496.64 875.742 496.76 cv
876.442 496.88 877.162 497.08 877.922 497.32 cv
f
890.622 497.32 mo
890.622 499.24 li
889.862 498.88 889.162 498.62 888.502 498.44 cv
887.822 498.28 887.182 498.18 886.582 498.18 cv
885.502 498.18 884.662 498.4 884.082 498.8 cv
883.502 499.22 883.222 499.82 883.222 500.58 cv
883.222 501.22 883.402 501.72 883.802 502.04 cv
884.182 502.38 884.922 502.64 886.002 502.84 cv
887.202 503.08 li
888.662 503.36 889.742 503.86 890.442 504.56 cv
891.142 505.28 891.502 506.22 891.502 507.4 cv
891.502 508.82 891.022 509.88 890.082 510.6 cv
889.122 511.32 887.742 511.68 885.922 511.68 cv
885.222 511.68 884.482 511.6 883.702 511.46 cv
882.922 511.32 882.122 511.1 881.302 510.78 cv
881.302 508.74 li
882.102 509.2 882.882 509.54 883.642 509.76 cv
884.402 510 885.162 510.1 885.922 510.1 cv
887.042 510.1 887.902 509.88 888.522 509.44 cv
889.122 509 889.442 508.38 889.442 507.54 cv
889.442 506.82 889.222 506.26 888.782 505.86 cv
888.342 505.46 887.622 505.16 886.622 504.96 cv
885.422 504.72 li
883.942 504.44 882.882 503.98 882.222 503.34 cv
881.562 502.72 881.242 501.86 881.242 500.74 cv
881.242 499.46 881.682 498.44 882.602 497.7 cv
883.502 496.96 884.762 496.58 886.362 496.58 cv
887.042 496.58 887.722 496.64 888.442 496.76 cv
889.142 496.88 889.862 497.08 890.622 497.32 cv
f
896.562 498.46 mo
896.562 509.8 li
898.942 509.8 li
900.942 509.8 902.422 509.36 903.362 508.44 cv
904.282 507.52 904.762 506.08 904.762 504.12 cv
904.762 502.16 904.282 500.74 903.362 499.82 cv
902.422 498.92 900.942 498.46 898.942 498.46 cv
896.562 498.46 li
894.582 496.84 mo
898.642 496.84 li
901.462 496.84 903.542 497.44 904.862 498.6 cv
906.182 499.78 906.842 501.62 906.842 504.12 cv
906.842 506.64 906.162 508.48 904.842 509.66 cv
903.522 510.84 901.442 511.42 898.642 511.42 cv
894.582 511.42 li
894.582 496.84 li
f
911.962 504.46 mo
911.962 509.8 li
915.122 509.8 li
916.182 509.8 916.962 509.58 917.482 509.14 cv
917.982 508.7 918.242 508.04 918.242 507.12 cv
918.242 506.22 917.982 505.56 917.482 505.12 cv
916.962 504.68 916.182 504.46 915.122 504.46 cv
911.962 504.46 li
911.962 498.46 mo
911.962 502.86 li
914.882 502.86 li
915.842 502.86 916.542 502.68 917.022 502.32 cv
917.502 501.96 917.742 501.42 917.742 500.66 cv
917.742 499.94 917.502 499.38 917.022 499.02 cv
916.542 498.66 915.842 498.46 914.882 498.46 cv
911.962 498.46 li
909.982 496.84 mo
915.022 496.84 li
916.522 496.84 917.682 497.16 918.502 497.78 cv
919.302 498.42 919.722 499.3 919.722 500.44 cv
919.722 501.34 919.502 502.06 919.082 502.58 cv
918.662 503.1 918.062 503.44 917.262 503.56 cv
918.222 503.78 918.982 504.22 919.522 504.88 cv
920.042 505.54 920.322 506.36 920.322 507.34 cv
920.322 508.66 919.862 509.66 918.982 510.36 cv
918.102 511.08 916.842 511.42 915.222 511.42 cv
909.982 511.42 li
909.982 496.84 li
f
923.702 496.84 mo
926.362 496.84 li
932.822 509.04 li
932.822 496.84 li
934.742 496.84 li
934.742 511.42 li
932.082 511.42 li
925.622 499.22 li
925.622 511.42 li
923.702 511.42 li
923.702 496.84 li
f
949.262 496.24 mo
948.382 497.76 947.742 499.24 947.322 500.7 cv
946.882 502.16 946.682 503.64 946.682 505.14 cv
946.682 506.66 946.882 508.14 947.322 509.6 cv
947.742 511.08 948.382 512.54 949.262 514.04 cv
947.702 514.04 li
946.722 512.5 945.982 511.02 945.502 509.54 cv
945.022 508.06 944.782 506.6 944.782 505.14 cv
944.782 503.7 945.022 502.24 945.502 500.76 cv
945.982 499.28 946.702 497.78 947.702 496.24 cv
949.262 496.24 li
f
950.822 496.84 mo
963.142 496.84 li
963.142 498.5 li
957.962 498.5 li
957.962 511.42 li
955.982 511.42 li
955.982 498.5 li
950.822 498.5 li
950.822 496.84 li
f
971.302 502.16 mo
971.102 502.04 970.882 501.96 970.642 501.9 cv
970.402 501.86 970.142 501.82 969.862 501.82 cv
968.842 501.82 968.062 502.16 967.522 502.82 cv
966.962 503.48 966.702 504.42 966.702 505.66 cv
966.702 511.42 li
964.902 511.42 li
964.902 500.48 li
966.702 500.48 li
966.702 502.18 li
967.062 501.52 967.562 501.02 968.162 500.7 cv
968.762 500.38 969.502 500.22 970.382 500.22 cv
970.502 500.22 970.642 500.24 970.802 500.24 cv
970.942 500.26 971.102 500.28 971.302 500.32 cv
971.302 502.16 li
f
978.162 505.92 mo
976.702 505.92 975.702 506.1 975.142 506.42 cv
974.582 506.76 974.302 507.32 974.302 508.12 cv
974.302 508.76 974.502 509.28 974.922 509.64 cv
975.342 510.02 975.922 510.2 976.642 510.2 cv
977.642 510.2 978.442 509.86 979.042 509.14 cv
979.642 508.44 979.942 507.5 979.942 506.32 cv
979.942 505.92 li
978.162 505.92 li
981.742 505.18 mo
981.742 511.42 li
979.942 511.42 li
979.942 509.76 li
979.522 510.44 979.002 510.92 978.402 511.22 cv
977.802 511.52 977.042 511.68 976.162 511.68 cv
975.042 511.68 974.142 511.38 973.482 510.76 cv
972.822 510.14 972.502 509.3 972.502 508.24 cv
972.502 507.02 972.902 506.1 973.742 505.46 cv
974.562 504.84 975.782 504.52 977.422 504.52 cv
979.942 504.52 li
979.942 504.34 li
979.942 503.52 979.662 502.88 979.122 502.42 cv
978.582 501.98 977.822 501.74 976.842 501.74 cv
976.202 501.74 975.602 501.82 975.002 501.98 cv
974.402 502.14 973.842 502.36 973.302 502.64 cv
973.302 500.98 li
973.942 500.74 974.582 500.54 975.202 500.42 cv
975.822 500.3 976.422 500.22 977.022 500.22 cv
978.602 500.22 979.782 500.64 980.562 501.46 cv
981.342 502.28 981.742 503.52 981.742 505.18 cv
f
985.442 500.48 mo
987.242 500.48 li
987.242 511.42 li
985.442 511.42 li
985.442 500.48 li
985.442 496.22 mo
987.242 496.22 li
987.242 498.5 li
985.442 498.5 li
985.442 496.22 li
f
1000.1 504.82 mo
1000.1 511.42 li
998.302 511.42 li
998.302 504.88 li
998.302 503.84 998.082 503.08 997.682 502.56 cv
997.282 502.04 996.682 501.78 995.882 501.78 cv
994.902 501.78 994.142 502.1 993.582 502.72 cv
993.022 503.34 992.742 504.18 992.742 505.24 cv
992.742 511.42 li
990.942 511.42 li
990.942 500.48 li
992.742 500.48 li
992.742 502.18 li
993.162 501.54 993.662 501.04 994.262 500.72 cv
994.842 500.4 995.522 500.22 996.282 500.22 cv
997.522 500.22 998.482 500.62 999.122 501.4 cv
999.762 502.18 1000.1 503.32 1000.1 504.82 cv
f
1003.68 500.48 mo
1005.48 500.48 li
1005.48 511.42 li
1003.68 511.42 li
1003.68 500.48 li
1003.68 496.22 mo
1005.48 496.22 li
1005.48 498.5 li
1003.68 498.5 li
1003.68 496.22 li
f
1018.34 504.82 mo
1018.34 511.42 li
1016.54 511.42 li
1016.54 504.88 li
1016.54 503.84 1016.32 503.08 1015.92 502.56 cv
1015.52 502.04 1014.92 501.78 1014.12 501.78 cv
1013.14 501.78 1012.38 502.1 1011.82 502.72 cv
1011.26 503.34 1010.98 504.18 1010.98 505.24 cv
1010.98 511.42 li
1009.18 511.42 li
1009.18 500.48 li
1010.98 500.48 li
1010.98 502.18 li
1011.4 501.54 1011.9 501.04 1012.5 500.72 cv
1013.08 500.4 1013.76 500.22 1014.52 500.22 cv
1015.76 500.22 1016.72 500.62 1017.36 501.4 cv
1018 502.18 1018.34 503.32 1018.34 504.82 cv
f
1029.12 505.82 mo
1029.12 504.54 1028.84 503.52 1028.32 502.8 cv
1027.78 502.08 1027.02 501.72 1026.06 501.72 cv
1025.1 501.72 1024.34 502.08 1023.8 502.8 cv
1023.26 503.52 1023 504.54 1023 505.82 cv
1023 507.12 1023.26 508.12 1023.8 508.84 cv
1024.34 509.56 1025.1 509.92 1026.06 509.92 cv
1027.02 509.92 1027.78 509.56 1028.32 508.84 cv
1028.84 508.12 1029.12 507.12 1029.12 505.82 cv
1030.92 510.06 mo
1030.92 511.9 1030.5 513.28 1029.68 514.2 cv
1028.84 515.1 1027.58 515.56 1025.88 515.56 cv
1025.24 515.56 1024.66 515.5 1024.1 515.42 cv
1023.54 515.32 1022.98 515.18 1022.46 514.98 cv
1022.46 513.24 li
1022.98 513.52 1023.5 513.72 1024.02 513.86 cv
1024.54 514 1025.06 514.08 1025.6 514.08 cv
1026.76 514.08 1027.64 513.76 1028.24 513.16 cv
1028.82 512.54 1029.12 511.62 1029.12 510.38 cv
1029.12 509.5 li
1028.74 510.14 1028.26 510.62 1027.68 510.94 cv
1027.1 511.26 1026.42 511.42 1025.62 511.42 cv
1024.26 511.42 1023.18 510.92 1022.36 509.9 cv
1021.54 508.88 1021.14 507.52 1021.14 505.82 cv
1021.14 504.14 1021.54 502.78 1022.36 501.76 cv
1023.18 500.74 1024.26 500.22 1025.62 500.22 cv
1026.42 500.22 1027.1 500.38 1027.68 500.7 cv
1028.26 501.02 1028.74 501.5 1029.12 502.14 cv
1029.12 500.48 li
1030.92 500.48 li
1030.92 510.06 li
f
1035.08 508.94 mo
1037.14 508.94 li
1037.14 510.62 li
1035.54 513.72 li
1034.28 513.72 li
1035.08 510.62 li
1035.08 508.94 li
f
1056.16 497.32 mo
1056.16 499.24 li
1055.4 498.88 1054.7 498.62 1054.04 498.44 cv
1053.36 498.28 1052.72 498.18 1052.12 498.18 cv
1051.04 498.18 1050.2 498.4 1049.62 498.8 cv
1049.04 499.22 1048.76 499.82 1048.76 500.58 cv
1048.76 501.22 1048.94 501.72 1049.34 502.04 cv
1049.72 502.38 1050.46 502.64 1051.54 502.84 cv
1052.74 503.08 li
1054.2 503.36 1055.28 503.86 1055.98 504.56 cv
1056.68 505.28 1057.04 506.22 1057.04 507.4 cv
1057.04 508.82 1056.56 509.88 1055.62 510.6 cv
1054.66 511.32 1053.28 511.68 1051.46 511.68 cv
1050.76 511.68 1050.02 511.6 1049.24 511.46 cv
1048.46 511.32 1047.66 511.1 1046.84 510.78 cv
1046.84 508.74 li
1047.64 509.2 1048.42 509.54 1049.18 509.76 cv
1049.94 510 1050.7 510.1 1051.46 510.1 cv
1052.58 510.1 1053.44 509.88 1054.06 509.44 cv
1054.66 509 1054.98 508.38 1054.98 507.54 cv
1054.98 506.82 1054.76 506.26 1054.32 505.86 cv
1053.88 505.46 1053.16 505.16 1052.16 504.96 cv
1050.96 504.72 li
1049.48 504.44 1048.42 503.98 1047.76 503.34 cv
1047.1 502.72 1046.78 501.86 1046.78 500.74 cv
1046.78 499.46 1047.22 498.44 1048.14 497.7 cv
1049.04 496.96 1050.3 496.58 1051.9 496.58 cv
1052.58 496.58 1053.26 496.64 1053.98 496.76 cv
1054.68 496.88 1055.4 497.08 1056.16 497.32 cv
f
1060.04 500.48 mo
1061.84 500.48 li
1061.84 511.42 li
1060.04 511.42 li
1060.04 500.48 li
1060.04 496.22 mo
1061.84 496.22 li
1061.84 498.5 li
1060.04 498.5 li
1060.04 496.22 li
f
1072.8 505.82 mo
1072.8 504.54 1072.52 503.52 1072 502.8 cv
1071.46 502.08 1070.7 501.72 1069.74 501.72 cv
1068.78 501.72 1068.02 502.08 1067.48 502.8 cv
1066.94 503.52 1066.68 504.54 1066.68 505.82 cv
1066.68 507.12 1066.94 508.12 1067.48 508.84 cv
1068.02 509.56 1068.78 509.92 1069.74 509.92 cv
1070.7 509.92 1071.46 509.56 1072 508.84 cv
1072.52 508.12 1072.8 507.12 1072.8 505.82 cv
1074.6 510.06 mo
1074.6 511.9 1074.18 513.28 1073.36 514.2 cv
1072.52 515.1 1071.26 515.56 1069.56 515.56 cv
1068.92 515.56 1068.34 515.5 1067.78 515.42 cv
1067.22 515.32 1066.66 515.18 1066.14 514.98 cv
1066.14 513.24 li
1066.66 513.52 1067.18 513.72 1067.7 513.86 cv
1068.22 514 1068.74 514.08 1069.28 514.08 cv
1070.44 514.08 1071.32 513.76 1071.92 513.16 cv
1072.5 512.54 1072.8 511.62 1072.8 510.38 cv
1072.8 509.5 li
1072.42 510.14 1071.94 510.62 1071.36 510.94 cv
1070.78 511.26 1070.1 511.42 1069.3 511.42 cv
1067.94 511.42 1066.86 510.92 1066.04 509.9 cv
1065.22 508.88 1064.82 507.52 1064.82 505.82 cv
1064.82 504.14 1065.22 502.78 1066.04 501.76 cv
1066.86 500.74 1067.94 500.22 1069.3 500.22 cv
1070.1 500.22 1070.78 500.38 1071.36 500.7 cv
1071.94 501.02 1072.42 501.5 1072.8 502.14 cv
1072.8 500.48 li
1074.6 500.48 li
1074.6 510.06 li
f
1086.82 502.58 mo
1087.26 501.78 1087.8 501.2 1088.42 500.8 cv
1089.04 500.42 1089.78 500.22 1090.64 500.22 cv
1091.76 500.22 1092.64 500.62 1093.26 501.42 cv
1093.88 502.22 1094.2 503.36 1094.2 504.82 cv
1094.2 511.42 li
1092.4 511.42 li
1092.4 504.88 li
1092.4 503.84 1092.2 503.06 1091.84 502.54 cv
1091.46 502.04 1090.9 501.78 1090.14 501.78 cv
1089.2 501.78 1088.46 502.1 1087.92 502.72 cv
1087.38 503.34 1087.12 504.18 1087.12 505.24 cv
1087.12 511.42 li
1085.32 511.42 li
1085.32 504.88 li
1085.32 503.84 1085.12 503.06 1084.76 502.54 cv
1084.38 502.04 1083.8 501.78 1083.04 501.78 cv
1082.12 501.78 1081.38 502.1 1080.84 502.72 cv
1080.3 503.34 1080.04 504.18 1080.04 505.24 cv
1080.04 511.42 li
1078.24 511.42 li
1078.24 500.48 li
1080.04 500.48 li
1080.04 502.18 li
1080.44 501.52 1080.94 501.02 1081.52 500.7 cv
1082.08 500.38 1082.76 500.22 1083.56 500.22 cv
1084.36 500.22 1085.02 500.42 1085.58 500.82 cv
1086.14 501.22 1086.54 501.82 1086.82 502.58 cv
f
1102.02 501.74 mo
1101.06 501.74 1100.3 502.12 1099.74 502.88 cv
1099.18 503.64 1098.9 504.66 1098.9 505.96 cv
1098.9 507.28 1099.16 508.3 1099.72 509.06 cv
1100.28 509.82 1101.04 510.18 1102.02 510.18 cv
1102.98 510.18 1103.74 509.82 1104.3 509.06 cv
1104.86 508.3 1105.14 507.28 1105.14 505.96 cv
1105.14 504.68 1104.86 503.64 1104.3 502.88 cv
1103.74 502.12 1102.98 501.74 1102.02 501.74 cv
1102.02 500.22 mo
1103.58 500.22 1104.8 500.74 1105.7 501.74 cv
1106.58 502.76 1107.04 504.16 1107.04 505.96 cv
1107.04 507.76 1106.58 509.16 1105.7 510.16 cv
1104.8 511.18 1103.58 511.68 1102.02 511.68 cv
1100.44 511.68 1099.2 511.18 1098.32 510.16 cv
1097.44 509.16 1097 507.76 1097 505.96 cv
1097 504.16 1097.44 502.76 1098.32 501.74 cv
1099.2 500.74 1100.44 500.22 1102.02 500.22 cv
f
1110.02 500.48 mo
1111.82 500.48 li
1111.82 511.42 li
1110.02 511.42 li
1110.02 500.48 li
1110.02 496.22 mo
1111.82 496.22 li
1111.82 498.5 li
1110.02 498.5 li
1110.02 496.22 li
f
1122.78 502.14 mo
1122.78 496.22 li
1124.58 496.22 li
1124.58 511.42 li
1122.78 511.42 li
1122.78 509.78 li
1122.4 510.44 1121.92 510.92 1121.34 511.22 cv
1120.76 511.52 1120.08 511.68 1119.28 511.68 cv
1117.96 511.68 1116.88 511.16 1116.04 510.12 cv
1115.2 509.08 1114.8 507.68 1114.8 505.96 cv
1114.8 504.24 1115.2 502.86 1116.04 501.8 cv
1116.88 500.76 1117.96 500.22 1119.28 500.22 cv
1120.08 500.22 1120.76 500.38 1121.34 500.7 cv
1121.92 501.02 1122.4 501.5 1122.78 502.14 cv
1116.66 505.96 mo
1116.66 507.28 1116.92 508.32 1117.46 509.08 cv
1118 509.84 1118.76 510.2 1119.72 510.2 cv
1120.66 510.2 1121.4 509.84 1121.96 509.08 cv
1122.5 508.32 1122.78 507.28 1122.78 505.96 cv
1122.78 504.64 1122.5 503.62 1121.96 502.86 cv
1121.4 502.1 1120.66 501.72 1119.72 501.72 cv
1118.76 501.72 1118 502.1 1117.46 502.86 cv
1116.92 503.62 1116.66 504.64 1116.66 505.96 cv
f
1128 496.24 mo
1129.56 496.24 li
1130.52 497.78 1131.26 499.28 1131.74 500.76 cv
1132.22 502.24 1132.48 503.7 1132.48 505.14 cv
1132.48 506.6 1132.22 508.06 1131.74 509.54 cv
1131.26 511.02 1130.52 512.5 1129.56 514.04 cv
1128 514.04 li
1128.86 512.54 1129.5 511.08 1129.94 509.6 cv
1130.36 508.14 1130.58 506.66 1130.58 505.14 cv
1130.58 503.64 1130.36 502.16 1129.94 500.7 cv
1129.5 499.24 1128.86 497.76 1128 496.24 cv
f
839.222 532.279 mo
859.222 532.279 li
@
846.222 535.279 mo
852.222 529.279 li
846.222 529.279 mo
852.222 535.279 li
f
1 lw
0 lc
846.222 535.279 mo
852.222 529.279 li
846.222 529.279 mo
852.222 535.279 li
@
877.922 521.679 mo
877.922 523.599 li
877.162 523.239 876.462 522.979 875.802 522.799 cv
875.122 522.639 874.482 522.539 873.882 522.539 cv
872.802 522.539 871.962 522.759 871.382 523.159 cv
870.802 523.579 870.522 524.179 870.522 524.939 cv
870.522 525.579 870.702 526.079 871.102 526.399 cv
871.482 526.739 872.222 526.999 873.302 527.199 cv
874.503 527.439 li
875.962 527.719 877.042 528.219 877.742 528.919 cv
878.443 529.639 878.802 530.579 878.802 531.759 cv
878.802 533.179 878.322 534.239 877.382 534.959 cv
876.422 535.679 875.042 536.039 873.222 536.039 cv
872.522 536.039 871.782 535.959 871.003 535.819 cv
870.222 535.679 869.422 535.459 868.602 535.139 cv
868.602 533.099 li
869.402 533.559 870.182 533.899 870.942 534.119 cv
871.702 534.359 872.462 534.459 873.222 534.459 cv
874.342 534.459 875.202 534.239 875.822 533.799 cv
876.422 533.359 876.742 532.739 876.742 531.899 cv
876.742 531.179 876.522 530.619 876.082 530.219 cv
875.642 529.819 874.922 529.519 873.922 529.319 cv
872.722 529.079 li
871.242 528.799 870.182 528.339 869.522 527.699 cv
868.862 527.079 868.542 526.219 868.542 525.099 cv
868.542 523.819 868.982 522.799 869.902 522.059 cv
870.802 521.319 872.063 520.939 873.662 520.939 cv
874.342 520.939 875.022 520.999 875.742 521.119 cv
876.442 521.239 877.162 521.439 877.922 521.679 cv
f
890.622 521.679 mo
890.622 523.599 li
889.862 523.239 889.162 522.979 888.502 522.799 cv
887.822 522.639 887.182 522.539 886.582 522.539 cv
885.502 522.539 884.662 522.759 884.082 523.159 cv
883.502 523.579 883.222 524.179 883.222 524.939 cv
883.222 525.579 883.402 526.079 883.802 526.399 cv
884.182 526.739 884.922 526.999 886.002 527.199 cv
887.202 527.439 li
888.662 527.719 889.742 528.219 890.442 528.919 cv
891.142 529.639 891.502 530.579 891.502 531.759 cv
891.502 533.179 891.022 534.239 890.082 534.959 cv
889.122 535.679 887.742 536.039 885.922 536.039 cv
885.222 536.039 884.482 535.959 883.702 535.819 cv
882.922 535.679 882.122 535.459 881.302 535.139 cv
881.302 533.099 li
882.102 533.559 882.882 533.899 883.642 534.119 cv
884.402 534.359 885.162 534.459 885.922 534.459 cv
887.042 534.459 887.902 534.239 888.522 533.799 cv
889.122 533.359 889.442 532.739 889.442 531.899 cv
889.442 531.179 889.222 530.619 888.782 530.219 cv
888.342 529.819 887.622 529.519 886.622 529.319 cv
885.422 529.079 li
883.942 528.799 882.882 528.339 882.222 527.699 cv
881.562 527.079 881.242 526.219 881.242 525.099 cv
881.242 523.819 881.682 522.799 882.602 522.059 cv
883.502 521.319 884.762 520.939 886.362 520.939 cv
887.042 520.939 887.722 520.999 888.442 521.119 cv
889.142 521.239 889.862 521.439 890.622 521.679 cv
f
896.562 522.819 mo
896.562 534.159 li
898.942 534.159 li
900.942 534.159 902.422 533.719 903.362 532.799 cv
904.282 531.879 904.762 530.439 904.762 528.479 cv
904.762 526.519 904.282 525.099 903.362 524.179 cv
902.422 523.279 900.942 522.819 898.942 522.819 cv
896.562 522.819 li
894.582 521.199 mo
898.642 521.199 li
901.462 521.199 903.542 521.799 904.862 522.959 cv
906.182 524.139 906.842 525.979 906.842 528.479 cv
906.842 530.999 906.162 532.839 904.842 534.019 cv
903.522 535.199 901.442 535.779 898.642 535.779 cv
894.582 535.779 li
894.582 521.199 li
f
911.962 528.819 mo
911.962 534.159 li
915.122 534.159 li
916.182 534.159 916.962 533.939 917.482 533.499 cv
917.982 533.059 918.242 532.399 918.242 531.479 cv
918.242 530.579 917.982 529.919 917.482 529.479 cv
916.962 529.039 916.182 528.819 915.122 528.819 cv
911.962 528.819 li
911.962 522.819 mo
911.962 527.219 li
914.882 527.219 li
915.842 527.219 916.542 527.039 917.022 526.679 cv
917.502 526.319 917.742 525.779 917.742 525.019 cv
917.742 524.299 917.502 523.739 917.022 523.379 cv
916.542 523.019 915.842 522.819 914.882 522.819 cv
911.962 522.819 li
909.982 521.199 mo
915.022 521.199 li
916.522 521.199 917.682 521.519 918.502 522.139 cv
919.302 522.779 919.722 523.659 919.722 524.799 cv
919.722 525.699 919.502 526.419 919.082 526.939 cv
918.662 527.459 918.062 527.799 917.262 527.919 cv
918.222 528.139 918.982 528.579 919.522 529.239 cv
920.042 529.899 920.322 530.719 920.322 531.699 cv
920.322 533.019 919.862 534.019 918.982 534.719 cv
918.102 535.439 916.842 535.779 915.222 535.779 cv
909.982 535.779 li
909.982 521.199 li
f
923.702 521.199 mo
926.362 521.199 li
932.822 533.399 li
932.822 521.199 li
934.742 521.199 li
934.742 535.779 li
932.082 535.779 li
925.622 523.579 li
925.622 535.779 li
923.702 535.779 li
923.702 521.199 li
f
949.262 520.599 mo
948.382 522.119 947.742 523.599 947.322 525.059 cv
946.882 526.519 946.682 527.999 946.682 529.499 cv
946.682 531.019 946.882 532.499 947.322 533.959 cv
947.742 535.439 948.382 536.899 949.262 538.399 cv
947.702 538.399 li
946.722 536.859 945.982 535.379 945.502 533.899 cv
945.022 532.419 944.782 530.959 944.782 529.499 cv
944.782 528.059 945.022 526.599 945.502 525.119 cv
945.982 523.639 946.702 522.139 947.702 520.599 cv
949.262 520.599 li
f
950.822 521.199 mo
963.142 521.199 li
963.142 522.859 li
957.962 522.859 li
957.962 535.779 li
955.982 535.779 li
955.982 522.859 li
950.822 522.859 li
950.822 521.199 li
f
974.322 529.859 mo
974.322 530.739 li
966.062 530.739 li
966.142 531.979 966.502 532.939 967.182 533.579 cv
967.842 534.219 968.762 534.539 969.962 534.539 cv
970.642 534.539 971.322 534.459 971.962 534.299 cv
972.602 534.139 973.262 533.879 973.902 533.519 cv
973.902 535.219 li
973.262 535.499 972.602 535.719 971.922 535.839 cv
971.242 535.959 970.542 536.039 969.862 536.039 cv
968.102 536.039 966.722 535.539 965.702 534.539 cv
964.682 533.539 964.182 532.159 964.182 530.419 cv
964.182 528.639 964.662 527.219 965.622 526.159 cv
966.582 525.119 967.902 524.579 969.542 524.579 cv
971.022 524.579 972.182 525.059 973.042 525.999 cv
973.882 526.959 974.322 528.239 974.322 529.859 cv
972.522 529.339 mo
972.502 528.359 972.222 527.579 971.702 526.979 cv
971.162 526.399 970.442 526.099 969.562 526.099 cv
968.562 526.099 967.762 526.399 967.162 526.959 cv
966.562 527.519 966.202 528.319 966.122 529.339 cv
972.522 529.339 li
f
984.242 525.159 mo
984.242 526.859 li
983.722 526.619 983.202 526.419 982.662 526.279 cv
982.102 526.159 981.542 526.079 980.962 526.079 cv
980.062 526.079 979.382 526.219 978.942 526.499 cv
978.502 526.779 978.282 527.179 978.282 527.719 cv
978.282 528.139 978.442 528.459 978.762 528.699 cv
979.082 528.939 979.722 529.179 980.682 529.379 cv
981.302 529.519 li
982.582 529.799 983.482 530.199 984.022 530.679 cv
984.542 531.179 984.822 531.879 984.822 532.759 cv
984.822 533.779 984.422 534.579 983.622 535.159 cv
982.822 535.759 981.702 536.039 980.302 536.039 cv
979.702 536.039 979.102 535.979 978.462 535.879 cv
977.822 535.779 977.162 535.619 976.462 535.379 cv
976.462 533.519 li
977.122 533.879 977.782 534.139 978.422 534.299 cv
979.062 534.479 979.702 534.559 980.342 534.559 cv
981.182 534.559 981.842 534.419 982.302 534.139 cv
982.742 533.859 982.982 533.439 982.982 532.899 cv
982.982 532.419 982.802 532.039 982.482 531.779 cv
982.162 531.519 981.442 531.259 980.322 531.019 cv
979.702 530.879 li
978.582 530.639 977.762 530.279 977.282 529.799 cv
976.782 529.319 976.542 528.659 976.542 527.799 cv
976.542 526.779 976.902 525.979 977.622 525.419 cv
978.342 524.859 979.382 524.579 980.742 524.579 cv
981.402 524.579 982.022 524.639 982.622 524.739 cv
983.202 524.839 983.742 524.979 984.242 525.159 cv
f
989.462 521.739 mo
989.462 524.839 li
993.162 524.839 li
993.162 526.239 li
989.462 526.239 li
989.462 532.179 li
989.462 533.079 989.582 533.659 989.822 533.899 cv
990.062 534.159 990.562 534.279 991.322 534.279 cv
993.162 534.279 li
993.162 535.779 li
991.322 535.779 li
989.922 535.779 988.962 535.519 988.442 534.999 cv
987.922 534.479 987.662 533.539 987.662 532.179 cv
987.662 526.239 li
986.342 526.239 li
986.342 524.839 li
987.662 524.839 li
987.662 521.739 li
989.462 521.739 li
f
995.522 524.839 mo
997.322 524.839 li
997.322 535.779 li
995.522 535.779 li
995.522 524.839 li
995.522 520.579 mo
997.322 520.579 li
997.322 522.859 li
995.522 522.859 li
995.522 520.579 li
f
1010.18 529.179 mo
1010.18 535.779 li
1008.38 535.779 li
1008.38 529.239 li
1008.38 528.199 1008.16 527.439 1007.76 526.919 cv
1007.36 526.399 1006.76 526.139 1005.96 526.139 cv
1004.98 526.139 1004.22 526.459 1003.66 527.079 cv
1003.1 527.699 1002.82 528.539 1002.82 529.599 cv
1002.82 535.779 li
1001.02 535.779 li
1001.02 524.839 li
1002.82 524.839 li
1002.82 526.539 li
1003.24 525.899 1003.74 525.399 1004.34 525.079 cv
1004.92 524.759 1005.6 524.579 1006.36 524.579 cv
1007.6 524.579 1008.56 524.979 1009.2 525.759 cv
1009.84 526.539 1010.18 527.679 1010.18 529.179 cv
f
1020.96 530.179 mo
1020.96 528.899 1020.68 527.879 1020.16 527.159 cv
1019.62 526.439 1018.86 526.079 1017.9 526.079 cv
1016.94 526.079 1016.18 526.439 1015.64 527.159 cv
1015.1 527.879 1014.84 528.899 1014.84 530.179 cv
1014.84 531.479 1015.1 532.479 1015.64 533.199 cv
1016.18 533.919 1016.94 534.279 1017.9 534.279 cv
1018.86 534.279 1019.62 533.919 1020.16 533.199 cv
1020.68 532.479 1020.96 531.479 1020.96 530.179 cv
1022.76 534.419 mo
1022.76 536.259 1022.34 537.639 1021.52 538.559 cv
1020.68 539.459 1019.42 539.919 1017.72 539.919 cv
1017.08 539.919 1016.5 539.859 1015.94 539.779 cv
1015.38 539.679 1014.82 539.539 1014.3 539.339 cv
1014.3 537.599 li
1014.82 537.879 1015.34 538.079 1015.86 538.219 cv
1016.38 538.359 1016.9 538.439 1017.44 538.439 cv
1018.6 538.439 1019.48 538.119 1020.08 537.519 cv
1020.66 536.899 1020.96 535.979 1020.96 534.739 cv
1020.96 533.859 li
1020.58 534.499 1020.1 534.979 1019.52 535.299 cv
1018.94 535.619 1018.26 535.779 1017.46 535.779 cv
1016.1 535.779 1015.02 535.279 1014.2 534.259 cv
1013.38 533.239 1012.98 531.879 1012.98 530.179 cv
1012.98 528.499 1013.38 527.139 1014.2 526.119 cv
1015.02 525.099 1016.1 524.579 1017.46 524.579 cv
1018.26 524.579 1018.94 524.739 1019.52 525.059 cv
1020.1 525.379 1020.58 525.859 1020.96 526.499 cv
1020.96 524.839 li
1022.76 524.839 li
1022.76 534.419 li
f
1026.92 533.299 mo
1028.98 533.299 li
1028.98 534.979 li
1027.38 538.079 li
1026.12 538.079 li
1026.92 534.979 li
1026.92 533.299 li
f
1048 521.679 mo
1048 523.599 li
1047.24 523.239 1046.54 522.979 1045.88 522.799 cv
1045.2 522.639 1044.56 522.539 1043.96 522.539 cv
1042.88 522.539 1042.04 522.759 1041.46 523.159 cv
1040.88 523.579 1040.6 524.179 1040.6 524.939 cv
1040.6 525.579 1040.78 526.079 1041.18 526.399 cv
1041.56 526.739 1042.3 526.999 1043.38 527.199 cv
1044.58 527.439 li
1046.04 527.719 1047.12 528.219 1047.82 528.919 cv
1048.52 529.639 1048.88 530.579 1048.88 531.759 cv
1048.88 533.179 1048.4 534.239 1047.46 534.959 cv
1046.5 535.679 1045.12 536.039 1043.3 536.039 cv
1042.6 536.039 1041.86 535.959 1041.08 535.819 cv
1040.3 535.679 1039.5 535.459 1038.68 535.139 cv
1038.68 533.099 li
1039.48 533.559 1040.26 533.899 1041.02 534.119 cv
1041.78 534.359 1042.54 534.459 1043.3 534.459 cv
1044.42 534.459 1045.28 534.239 1045.9 533.799 cv
1046.5 533.359 1046.82 532.739 1046.82 531.899 cv
1046.82 531.179 1046.6 530.619 1046.16 530.219 cv
1045.72 529.819 1045 529.519 1044 529.319 cv
1042.8 529.079 li
1041.32 528.799 1040.26 528.339 1039.6 527.699 cv
1038.94 527.079 1038.62 526.219 1038.62 525.099 cv
1038.62 523.819 1039.06 522.799 1039.98 522.059 cv
1040.88 521.319 1042.14 520.939 1043.74 520.939 cv
1044.42 520.939 1045.1 520.999 1045.82 521.119 cv
1046.52 521.239 1047.24 521.439 1048 521.679 cv
f
1051.88 524.839 mo
1053.68 524.839 li
1053.68 535.779 li
1051.88 535.779 li
1051.88 524.839 li
1051.88 520.579 mo
1053.68 520.579 li
1053.68 522.859 li
1051.88 522.859 li
1051.88 520.579 li
f
1064.64 530.179 mo
1064.64 528.899 1064.36 527.879 1063.84 527.159 cv
1063.3 526.439 1062.54 526.079 1061.58 526.079 cv
1060.62 526.079 1059.86 526.439 1059.32 527.159 cv
1058.78 527.879 1058.52 528.899 1058.52 530.179 cv
1058.52 531.479 1058.78 532.479 1059.32 533.199 cv
1059.86 533.919 1060.62 534.279 1061.58 534.279 cv
1062.54 534.279 1063.3 533.919 1063.84 533.199 cv
1064.36 532.479 1064.64 531.479 1064.64 530.179 cv
1066.44 534.419 mo
1066.44 536.259 1066.02 537.639 1065.2 538.559 cv
1064.36 539.459 1063.1 539.919 1061.4 539.919 cv
1060.76 539.919 1060.18 539.859 1059.62 539.779 cv
1059.06 539.679 1058.5 539.539 1057.98 539.339 cv
1057.98 537.599 li
1058.5 537.879 1059.02 538.079 1059.54 538.219 cv
1060.06 538.359 1060.58 538.439 1061.12 538.439 cv
1062.28 538.439 1063.16 538.119 1063.76 537.519 cv
1064.34 536.899 1064.64 535.979 1064.64 534.739 cv
1064.64 533.859 li
1064.26 534.499 1063.78 534.979 1063.2 535.299 cv
1062.62 535.619 1061.94 535.779 1061.14 535.779 cv
1059.78 535.779 1058.7 535.279 1057.88 534.259 cv
1057.06 533.239 1056.66 531.879 1056.66 530.179 cv
1056.66 528.499 1057.06 527.139 1057.88 526.119 cv
1058.7 525.099 1059.78 524.579 1061.14 524.579 cv
1061.94 524.579 1062.62 524.739 1063.2 525.059 cv
1063.78 525.379 1064.26 525.859 1064.64 526.499 cv
1064.64 524.839 li
1066.44 524.839 li
1066.44 534.419 li
f
1078.66 526.939 mo
1079.1 526.139 1079.64 525.559 1080.26 525.159 cv
1080.88 524.779 1081.62 524.579 1082.48 524.579 cv
1083.6 524.579 1084.48 524.979 1085.1 525.779 cv
1085.72 526.579 1086.04 527.719 1086.04 529.179 cv
1086.04 535.779 li
1084.24 535.779 li
1084.24 529.239 li
1084.24 528.199 1084.04 527.419 1083.68 526.899 cv
1083.3 526.399 1082.74 526.139 1081.98 526.139 cv
1081.04 526.139 1080.3 526.459 1079.76 527.079 cv
1079.22 527.699 1078.96 528.539 1078.96 529.599 cv
1078.96 535.779 li
1077.16 535.779 li
1077.16 529.239 li
1077.16 528.199 1076.96 527.419 1076.6 526.899 cv
1076.22 526.399 1075.64 526.139 1074.88 526.139 cv
1073.96 526.139 1073.22 526.459 1072.68 527.079 cv
1072.14 527.699 1071.88 528.539 1071.88 529.599 cv
1071.88 535.779 li
1070.08 535.779 li
1070.08 524.839 li
1071.88 524.839 li
1071.88 526.539 li
1072.28 525.879 1072.78 525.379 1073.36 525.059 cv
1073.92 524.739 1074.6 524.579 1075.4 524.579 cv
1076.2 524.579 1076.86 524.779 1077.42 525.179 cv
1077.98 525.579 1078.38 526.179 1078.66 526.939 cv
f
1093.86 526.099 mo
1092.9 526.099 1092.14 526.479 1091.58 527.239 cv
1091.02 527.999 1090.74 529.019 1090.74 530.319 cv
1090.74 531.639 1091 532.659 1091.56 533.419 cv
1092.12 534.179 1092.88 534.539 1093.86 534.539 cv
1094.82 534.539 1095.58 534.179 1096.14 533.419 cv
1096.7 532.659 1096.98 531.639 1096.98 530.319 cv
1096.98 529.039 1096.7 527.999 1096.14 527.239 cv
1095.58 526.479 1094.82 526.099 1093.86 526.099 cv
1093.86 524.579 mo
1095.42 524.579 1096.64 525.099 1097.54 526.099 cv
1098.42 527.119 1098.88 528.519 1098.88 530.319 cv
1098.88 532.119 1098.42 533.519 1097.54 534.519 cv
1096.64 535.539 1095.42 536.039 1093.86 536.039 cv
1092.28 536.039 1091.04 535.539 1090.16 534.519 cv
1089.28 533.519 1088.84 532.119 1088.84 530.319 cv
1088.84 528.519 1089.28 527.119 1090.16 526.099 cv
1091.04 525.099 1092.28 524.579 1093.86 524.579 cv
f
1101.86 524.839 mo
1103.66 524.839 li
1103.66 535.779 li
1101.86 535.779 li
1101.86 524.839 li
1101.86 520.579 mo
1103.66 520.579 li
1103.66 522.859 li
1101.86 522.859 li
1101.86 520.579 li
f
1114.62 526.499 mo
1114.62 520.579 li
1116.42 520.579 li
1116.42 535.779 li
1114.62 535.779 li
1114.62 534.139 li
1114.24 534.799 1113.76 535.279 1113.18 535.579 cv
1112.6 535.879 1111.92 536.039 1111.12 536.039 cv
1109.8 536.039 1108.72 535.519 1107.88 534.479 cv
1107.04 533.439 1106.64 532.039 1106.64 530.319 cv
1106.64 528.599 1107.04 527.219 1107.88 526.159 cv
1108.72 525.119 1109.8 524.579 1111.12 524.579 cv
1111.92 524.579 1112.6 524.739 1113.18 525.059 cv
1113.76 525.379 1114.24 525.859 1114.62 526.499 cv
1108.5 530.319 mo
1108.5 531.639 1108.76 532.679 1109.3 533.439 cv
1109.84 534.199 1110.6 534.559 1111.56 534.559 cv
1112.5 534.559 1113.24 534.199 1113.8 533.439 cv
1114.34 532.679 1114.62 531.639 1114.62 530.319 cv
1114.62 528.999 1114.34 527.979 1113.8 527.219 cv
1113.24 526.459 1112.5 526.079 1111.56 526.079 cv
1110.6 526.079 1109.84 526.459 1109.3 527.219 cv
1108.76 527.979 1108.5 528.999 1108.5 530.319 cv
f
1119.84 520.599 mo
1121.4 520.599 li
1122.36 522.139 1123.1 523.639 1123.58 525.119 cv
1124.06 526.599 1124.32 528.059 1124.32 529.499 cv
1124.32 530.959 1124.06 532.419 1123.58 533.899 cv
1123.1 535.379 1122.36 536.859 1121.4 538.399 cv
1119.84 538.399 li
1120.7 536.899 1121.34 535.439 1121.78 533.959 cv
1122.2 532.499 1122.42 531.019 1122.42 529.499 cv
1122.42 527.999 1122.2 526.519 1121.78 525.059 cv
1121.34 523.599 1120.7 522.119 1119.84 520.599 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
