%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SSDBN-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/10, 15:35:31
%%BoundingBox: 0 0 1153 601
%%HiResBoundingBox: 0 0 1152.6200 600.7651
%%CropBox: 0 0 1152.6200 600.7651
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-10T15:34:47+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-10T15:35:24+08:00"
   xmp:MetadataDate="2019-06-10T15:35:24+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:e109f2e3-58fe-465e-9bec-c61690a84abc"
   xmpMM:InstanceID="uuid:d7417217-3f7b-4733-ba35-1835d5cf6a2e"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -600.765 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
4.57764e-5 0 mo
4.57764e-5 600.765 li
1152.62 600.765 li
1152.62 0 li
cp
clp
gsave
-.434418 601.008 mo
1153.57 601.008 li
1153.57 -.992527 li
-.434418 -.992527 li
-.434418 601.008 li
clp
-102.435 622.008 mo
1279.97 622.008 li
1279.97 -75.6726 li
-102.435 -75.6726 li
-102.435 622.008 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
70.3655 545.263 mo
1141.73 545.263 li
1141.73 8.04923 li
70.3655 8.04923 li
70.3655 545.263 li
f
119.064 545.263 mo
119.064 548.763 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
119.064 545.263 mo
119.064 548.763 li
@
119.064 554.186 mo
118.044 554.186 117.284 554.686 116.764 555.686 cv
116.244 556.686 116.004 558.186 116.004 560.186 cv
116.004 562.186 116.244 563.686 116.764 564.686 cv
117.284 565.686 118.044 566.186 119.064 566.186 cv
120.084 566.186 120.844 565.686 121.364 564.686 cv
121.864 563.686 122.124 562.186 122.124 560.186 cv
122.124 558.186 121.864 556.686 121.364 555.686 cv
120.844 554.686 120.084 554.186 119.064 554.186 cv
119.064 552.626 mo
120.684 552.626 121.924 553.286 122.804 554.566 cv
123.664 555.866 124.104 557.746 124.104 560.186 cv
124.104 562.646 123.664 564.526 122.804 565.806 cv
121.924 567.086 120.684 567.726 119.064 567.726 cv
117.424 567.726 116.164 567.086 115.304 565.806 cv
114.444 564.526 114.024 562.646 114.024 560.186 cv
114.024 557.746 114.444 555.866 115.304 554.566 cv
116.164 553.286 117.424 552.626 119.064 552.626 cv
f
315.824 545.263 mo
315.824 548.763 li
f
315.824 545.263 mo
315.824 548.763 li
@
300.586 565.806 mo
307.466 565.806 li
307.466 567.466 li
298.206 567.466 li
298.206 565.806 li
298.946 565.046 299.966 564.006 301.266 562.686 cv
302.546 561.386 303.366 560.546 303.706 560.166 cv
304.346 559.466 304.786 558.866 305.026 558.366 cv
305.266 557.886 305.406 557.386 305.406 556.906 cv
305.406 556.146 305.126 555.506 304.586 555.026 cv
304.046 554.546 303.346 554.286 302.466 554.286 cv
301.846 554.286 301.186 554.406 300.506 554.606 cv
299.826 554.826 299.086 555.146 298.306 555.586 cv
298.306 553.586 li
299.106 553.266 299.846 553.026 300.526 552.866 cv
301.206 552.706 301.846 552.626 302.426 552.626 cv
303.926 552.626 305.126 553.006 306.026 553.766 cv
306.926 554.526 307.386 555.526 307.386 556.786 cv
307.386 557.386 307.266 557.966 307.046 558.486 cv
306.826 559.026 306.426 559.666 305.826 560.386 cv
305.666 560.586 305.146 561.126 304.266 562.026 cv
303.386 562.926 302.166 564.186 300.586 565.806 cv
f
315.826 554.186 mo
314.806 554.186 314.046 554.686 313.526 555.686 cv
313.006 556.686 312.766 558.186 312.766 560.186 cv
312.766 562.186 313.006 563.686 313.526 564.686 cv
314.046 565.686 314.806 566.186 315.826 566.186 cv
316.846 566.186 317.606 565.686 318.126 564.686 cv
318.626 563.686 318.886 562.186 318.886 560.186 cv
318.886 558.186 318.626 556.686 318.126 555.686 cv
317.606 554.686 316.846 554.186 315.826 554.186 cv
315.826 552.626 mo
317.446 552.626 318.686 553.286 319.566 554.566 cv
320.426 555.866 320.866 557.746 320.866 560.186 cv
320.866 562.646 320.426 564.526 319.566 565.806 cv
318.686 567.086 317.446 567.726 315.826 567.726 cv
314.186 567.726 312.926 567.086 312.066 565.806 cv
311.206 564.526 310.786 562.646 310.786 560.186 cv
310.786 557.746 311.206 555.866 312.066 554.566 cv
312.926 553.286 314.186 552.626 315.826 552.626 cv
f
328.546 554.186 mo
327.526 554.186 326.766 554.686 326.246 555.686 cv
325.726 556.686 325.486 558.186 325.486 560.186 cv
325.486 562.186 325.726 563.686 326.246 564.686 cv
326.766 565.686 327.526 566.186 328.546 566.186 cv
329.566 566.186 330.326 565.686 330.846 564.686 cv
331.346 563.686 331.606 562.186 331.606 560.186 cv
331.606 558.186 331.346 556.686 330.846 555.686 cv
330.326 554.686 329.566 554.186 328.546 554.186 cv
328.546 552.626 mo
330.166 552.626 331.406 553.286 332.286 554.566 cv
333.146 555.866 333.586 557.746 333.586 560.186 cv
333.586 562.646 333.146 564.526 332.286 565.806 cv
331.406 567.086 330.166 567.726 328.546 567.726 cv
326.906 567.726 325.646 567.086 324.786 565.806 cv
323.926 564.526 323.506 562.646 323.506 560.186 cv
323.506 557.746 323.926 555.866 324.786 554.566 cv
325.646 553.286 326.906 552.626 328.546 552.626 cv
f
512.584 545.263 mo
512.584 548.763 li
f
512.584 545.263 mo
512.584 548.763 li
@
501.066 554.606 mo
496.086 562.386 li
501.066 562.386 li
501.066 554.606 li
500.546 552.886 mo
503.026 552.886 li
503.026 562.386 li
505.106 562.386 li
505.106 564.026 li
503.026 564.026 li
503.026 567.466 li
501.066 567.466 li
501.066 564.026 li
494.486 564.026 li
494.486 562.126 li
500.546 552.886 li
f
512.586 554.186 mo
511.566 554.186 510.806 554.686 510.286 555.686 cv
509.766 556.686 509.526 558.186 509.526 560.186 cv
509.526 562.186 509.766 563.686 510.286 564.686 cv
510.806 565.686 511.566 566.186 512.586 566.186 cv
513.606 566.186 514.366 565.686 514.886 564.686 cv
515.386 563.686 515.646 562.186 515.646 560.186 cv
515.646 558.186 515.386 556.686 514.886 555.686 cv
514.366 554.686 513.606 554.186 512.586 554.186 cv
512.586 552.626 mo
514.206 552.626 515.446 553.286 516.326 554.566 cv
517.186 555.866 517.626 557.746 517.626 560.186 cv
517.626 562.646 517.186 564.526 516.326 565.806 cv
515.446 567.086 514.206 567.726 512.586 567.726 cv
510.946 567.726 509.686 567.086 508.826 565.806 cv
507.966 564.526 507.546 562.646 507.546 560.186 cv
507.546 557.746 507.966 555.866 508.826 554.566 cv
509.686 553.286 510.946 552.626 512.586 552.626 cv
f
525.306 554.186 mo
524.286 554.186 523.526 554.686 523.006 555.686 cv
522.486 556.686 522.246 558.186 522.246 560.186 cv
522.246 562.186 522.486 563.686 523.006 564.686 cv
523.526 565.686 524.286 566.186 525.306 566.186 cv
526.326 566.186 527.086 565.686 527.606 564.686 cv
528.106 563.686 528.366 562.186 528.366 560.186 cv
528.366 558.186 528.106 556.686 527.606 555.686 cv
527.086 554.686 526.326 554.186 525.306 554.186 cv
525.306 552.626 mo
526.926 552.626 528.166 553.286 529.046 554.566 cv
529.906 555.866 530.346 557.746 530.346 560.186 cv
530.346 562.646 529.906 564.526 529.046 565.806 cv
528.166 567.086 526.926 567.726 525.306 567.726 cv
523.666 567.726 522.406 567.086 521.546 565.806 cv
520.686 564.526 520.266 562.646 520.266 560.186 cv
520.266 557.746 520.686 555.866 521.546 554.566 cv
522.406 553.286 523.666 552.626 525.306 552.626 cv
f
709.345 545.263 mo
709.345 548.763 li
f
709.345 545.263 mo
709.345 548.763 li
@
696.866 559.386 mo
695.986 559.386 695.286 559.706 694.766 560.306 cv
694.246 560.906 693.986 561.746 693.986 562.786 cv
693.986 563.846 694.246 564.686 694.766 565.286 cv
695.286 565.886 695.986 566.186 696.866 566.186 cv
697.746 566.186 698.446 565.886 698.966 565.286 cv
699.486 564.686 699.746 563.846 699.746 562.786 cv
699.746 561.746 699.486 560.906 698.966 560.306 cv
698.446 559.706 697.746 559.386 696.866 559.386 cv
700.786 553.206 mo
700.786 555.006 li
700.286 554.766 699.786 554.586 699.286 554.466 cv
698.766 554.346 698.266 554.286 697.786 554.286 cv
696.466 554.286 695.466 554.726 694.786 555.606 cv
694.107 556.486 693.706 557.826 693.626 559.586 cv
694.006 559.026 694.486 558.586 695.066 558.286 cv
695.646 557.986 696.286 557.826 696.986 557.826 cv
698.446 557.826 699.607 558.286 700.446 559.166 cv
701.286 560.046 701.727 561.266 701.727 562.786 cv
701.727 564.286 701.266 565.486 700.386 566.386 cv
699.506 567.286 698.326 567.726 696.866 567.726 cv
695.186 567.726 693.886 567.086 693.006 565.806 cv
692.107 564.526 691.667 562.646 691.667 560.186 cv
691.667 557.886 692.206 556.046 693.306 554.686 cv
694.386 553.326 695.866 552.626 697.706 552.626 cv
698.186 552.626 698.686 552.686 699.206 552.766 cv
699.706 552.866 700.227 553.006 700.786 553.206 cv
f
709.346 554.186 mo
708.327 554.186 707.567 554.686 707.047 555.686 cv
706.526 556.686 706.286 558.186 706.286 560.186 cv
706.286 562.186 706.526 563.686 707.047 564.686 cv
707.567 565.686 708.327 566.186 709.346 566.186 cv
710.367 566.186 711.127 565.686 711.646 564.686 cv
712.146 563.686 712.406 562.186 712.406 560.186 cv
712.406 558.186 712.146 556.686 711.646 555.686 cv
711.127 554.686 710.367 554.186 709.346 554.186 cv
709.346 552.626 mo
710.966 552.626 712.206 553.286 713.086 554.566 cv
713.947 555.866 714.387 557.746 714.387 560.186 cv
714.387 562.646 713.947 564.526 713.086 565.806 cv
712.206 567.086 710.966 567.726 709.346 567.726 cv
707.706 567.726 706.447 567.086 705.586 565.806 cv
704.727 564.526 704.307 562.646 704.307 560.186 cv
704.307 557.746 704.727 555.866 705.586 554.566 cv
706.447 553.286 707.706 552.626 709.346 552.626 cv
f
722.067 554.186 mo
721.047 554.186 720.287 554.686 719.767 555.686 cv
719.247 556.686 719.007 558.186 719.007 560.186 cv
719.007 562.186 719.247 563.686 719.767 564.686 cv
720.287 565.686 721.047 566.186 722.067 566.186 cv
723.087 566.186 723.847 565.686 724.367 564.686 cv
724.867 563.686 725.127 562.186 725.127 560.186 cv
725.127 558.186 724.867 556.686 724.367 555.686 cv
723.847 554.686 723.087 554.186 722.067 554.186 cv
722.067 552.626 mo
723.687 552.626 724.927 553.286 725.807 554.566 cv
726.667 555.866 727.107 557.746 727.107 560.186 cv
727.107 562.646 726.667 564.526 725.807 565.806 cv
724.927 567.086 723.687 567.726 722.067 567.726 cv
720.427 567.726 719.167 567.086 718.307 565.806 cv
717.447 564.526 717.027 562.646 717.027 560.186 cv
717.027 557.746 717.447 555.866 718.307 554.566 cv
719.167 553.286 720.427 552.626 722.067 552.626 cv
f
906.105 545.263 mo
906.105 548.763 li
f
906.105 545.263 mo
906.105 548.763 li
@
893.387 560.546 mo
892.447 560.546 891.707 560.806 891.167 561.306 cv
890.627 561.806 890.367 562.486 890.367 563.366 cv
890.367 564.246 890.627 564.946 891.167 565.446 cv
891.707 565.946 892.447 566.186 893.387 566.186 cv
894.307 566.186 895.047 565.946 895.587 565.426 cv
896.127 564.926 896.407 564.246 896.407 563.366 cv
896.407 562.486 896.127 561.806 895.607 561.306 cv
895.067 560.806 894.327 560.546 893.387 560.546 cv
891.407 559.706 mo
890.567 559.506 889.907 559.106 889.427 558.526 cv
888.947 557.946 888.727 557.246 888.727 556.406 cv
888.727 555.246 889.127 554.326 889.967 553.646 cv
890.787 552.966 891.927 552.626 893.387 552.626 cv
894.827 552.626 895.967 552.966 896.807 553.646 cv
897.627 554.326 898.047 555.246 898.047 556.406 cv
898.047 557.246 897.807 557.946 897.327 558.526 cv
896.847 559.106 896.207 559.506 895.367 559.706 cv
896.307 559.926 897.047 560.366 897.587 561.006 cv
898.107 561.646 898.387 562.446 898.387 563.366 cv
898.387 564.786 897.947 565.866 897.087 566.606 cv
896.207 567.366 894.987 567.726 893.387 567.726 cv
891.767 567.726 890.527 567.366 889.667 566.606 cv
888.807 565.866 888.387 564.786 888.387 563.366 cv
888.387 562.446 888.647 561.646 889.187 561.006 cv
889.707 560.366 890.447 559.926 891.407 559.706 cv
890.687 556.586 mo
890.687 557.346 890.907 557.946 891.387 558.366 cv
891.867 558.786 892.527 558.986 893.387 558.986 cv
894.227 558.986 894.887 558.786 895.367 558.366 cv
895.847 557.946 896.087 557.346 896.087 556.586 cv
896.087 555.826 895.847 555.246 895.367 554.826 cv
894.887 554.406 894.227 554.186 893.387 554.186 cv
892.527 554.186 891.867 554.406 891.387 554.826 cv
890.907 555.246 890.687 555.826 890.687 556.586 cv
f
906.107 554.186 mo
905.087 554.186 904.327 554.686 903.807 555.686 cv
903.287 556.686 903.047 558.186 903.047 560.186 cv
903.047 562.186 903.287 563.686 903.807 564.686 cv
904.327 565.686 905.087 566.186 906.107 566.186 cv
907.127 566.186 907.887 565.686 908.407 564.686 cv
908.907 563.686 909.167 562.186 909.167 560.186 cv
909.167 558.186 908.907 556.686 908.407 555.686 cv
907.887 554.686 907.127 554.186 906.107 554.186 cv
906.107 552.626 mo
907.727 552.626 908.967 553.286 909.847 554.566 cv
910.707 555.866 911.147 557.746 911.147 560.186 cv
911.147 562.646 910.707 564.526 909.847 565.806 cv
908.967 567.086 907.727 567.726 906.107 567.726 cv
904.467 567.726 903.207 567.086 902.347 565.806 cv
901.487 564.526 901.067 562.646 901.067 560.186 cv
901.067 557.746 901.487 555.866 902.347 554.566 cv
903.207 553.286 904.467 552.626 906.107 552.626 cv
f
918.827 554.186 mo
917.807 554.186 917.047 554.686 916.527 555.686 cv
916.007 556.686 915.767 558.186 915.767 560.186 cv
915.767 562.186 916.007 563.686 916.527 564.686 cv
917.047 565.686 917.807 566.186 918.827 566.186 cv
919.847 566.186 920.607 565.686 921.127 564.686 cv
921.627 563.686 921.887 562.186 921.887 560.186 cv
921.887 558.186 921.627 556.686 921.127 555.686 cv
920.607 554.686 919.847 554.186 918.827 554.186 cv
918.827 552.626 mo
920.447 552.626 921.687 553.286 922.567 554.566 cv
923.427 555.866 923.867 557.746 923.867 560.186 cv
923.867 562.646 923.427 564.526 922.567 565.806 cv
921.687 567.086 920.447 567.726 918.827 567.726 cv
917.187 567.726 915.927 567.086 915.067 565.806 cv
914.207 564.526 913.787 562.646 913.787 560.186 cv
913.787 557.746 914.207 555.866 915.067 554.566 cv
915.927 553.286 917.187 552.626 918.827 552.626 cv
f
1102.87 545.263 mo
1102.87 548.763 li
f
1102.87 545.263 mo
1102.87 548.763 li
@
1079.91 565.806 mo
1083.13 565.806 li
1083.13 554.686 li
1079.63 555.386 li
1079.63 553.586 li
1083.11 552.886 li
1085.09 552.886 li
1085.09 565.806 li
1088.31 565.806 li
1088.31 567.466 li
1079.91 567.466 li
1079.91 565.806 li
f
1096.51 554.186 mo
1095.49 554.186 1094.73 554.686 1094.21 555.686 cv
1093.69 556.686 1093.45 558.186 1093.45 560.186 cv
1093.45 562.186 1093.69 563.686 1094.21 564.686 cv
1094.73 565.686 1095.49 566.186 1096.51 566.186 cv
1097.53 566.186 1098.29 565.686 1098.81 564.686 cv
1099.31 563.686 1099.57 562.186 1099.57 560.186 cv
1099.57 558.186 1099.31 556.686 1098.81 555.686 cv
1098.29 554.686 1097.53 554.186 1096.51 554.186 cv
1096.51 552.626 mo
1098.13 552.626 1099.37 553.286 1100.25 554.566 cv
1101.11 555.866 1101.55 557.746 1101.55 560.186 cv
1101.55 562.646 1101.11 564.526 1100.25 565.806 cv
1099.37 567.086 1098.13 567.726 1096.51 567.726 cv
1094.87 567.726 1093.61 567.086 1092.75 565.806 cv
1091.89 564.526 1091.47 562.646 1091.47 560.186 cv
1091.47 557.746 1091.89 555.866 1092.75 554.566 cv
1093.61 553.286 1094.87 552.626 1096.51 552.626 cv
f
1109.23 554.186 mo
1108.21 554.186 1107.45 554.686 1106.93 555.686 cv
1106.41 556.686 1106.17 558.186 1106.17 560.186 cv
1106.17 562.186 1106.41 563.686 1106.93 564.686 cv
1107.45 565.686 1108.21 566.186 1109.23 566.186 cv
1110.25 566.186 1111.01 565.686 1111.53 564.686 cv
1112.03 563.686 1112.29 562.186 1112.29 560.186 cv
1112.29 558.186 1112.03 556.686 1111.53 555.686 cv
1111.01 554.686 1110.25 554.186 1109.23 554.186 cv
1109.23 552.626 mo
1110.85 552.626 1112.09 553.286 1112.97 554.566 cv
1113.83 555.866 1114.27 557.746 1114.27 560.186 cv
1114.27 562.646 1113.83 564.526 1112.97 565.806 cv
1112.09 567.086 1110.85 567.726 1109.23 567.726 cv
1107.59 567.726 1106.33 567.086 1105.47 565.806 cv
1104.61 564.526 1104.19 562.646 1104.19 560.186 cv
1104.19 557.746 1104.61 555.866 1105.47 554.566 cv
1106.33 553.286 1107.59 552.626 1109.23 552.626 cv
f
1121.95 554.186 mo
1120.93 554.186 1120.17 554.686 1119.65 555.686 cv
1119.13 556.686 1118.89 558.186 1118.89 560.186 cv
1118.89 562.186 1119.13 563.686 1119.65 564.686 cv
1120.17 565.686 1120.93 566.186 1121.95 566.186 cv
1122.97 566.186 1123.73 565.686 1124.25 564.686 cv
1124.75 563.686 1125.01 562.186 1125.01 560.186 cv
1125.01 558.186 1124.75 556.686 1124.25 555.686 cv
1123.73 554.686 1122.97 554.186 1121.95 554.186 cv
1121.95 552.626 mo
1123.57 552.626 1124.81 553.286 1125.69 554.566 cv
1126.55 555.866 1126.99 557.746 1126.99 560.186 cv
1126.99 562.646 1126.55 564.526 1125.69 565.806 cv
1124.81 567.086 1123.57 567.726 1121.95 567.726 cv
1120.31 567.726 1119.05 567.086 1118.19 565.806 cv
1117.33 564.526 1116.91 562.646 1116.91 560.186 cv
1116.91 557.746 1117.33 555.866 1118.19 554.566 cv
1119.05 553.286 1120.31 552.626 1121.95 552.626 cv
f
577.38 576.245 mo
586.6 576.245 li
586.6 577.905 li
579.36 577.905 li
579.36 582.225 li
586.3 582.225 li
586.3 583.885 li
579.36 583.885 li
579.36 589.165 li
586.78 589.165 li
586.78 590.825 li
577.38 590.825 li
577.38 576.245 li
f
591.68 589.185 mo
591.68 594.965 li
589.88 594.965 li
589.88 579.885 li
591.68 579.885 li
591.68 581.545 li
592.04 580.905 592.521 580.425 593.1 580.105 cv
593.68 579.785 594.38 579.625 595.18 579.625 cv
596.5 579.625 597.581 580.165 598.42 581.205 cv
599.24 582.265 599.66 583.645 599.66 585.365 cv
599.66 587.085 599.24 588.485 598.42 589.525 cv
597.581 590.565 596.5 591.085 595.18 591.085 cv
594.38 591.085 593.68 590.925 593.1 590.625 cv
592.521 590.325 592.04 589.845 591.68 589.185 cv
597.8 585.365 mo
597.8 584.045 597.521 583.025 596.98 582.265 cv
596.42 581.505 595.68 581.125 594.74 581.125 cv
593.78 581.125 593.04 581.505 592.5 582.265 cv
591.94 583.025 591.68 584.045 591.68 585.365 cv
591.68 586.685 591.94 587.725 592.5 588.485 cv
593.04 589.245 593.78 589.605 594.74 589.605 cv
595.68 589.605 596.42 589.245 596.98 588.485 cv
597.521 587.725 597.8 586.685 597.8 585.365 cv
f
606.88 581.145 mo
605.92 581.145 605.16 581.525 604.6 582.285 cv
604.04 583.045 603.76 584.065 603.76 585.365 cv
603.76 586.685 604.02 587.705 604.58 588.465 cv
605.14 589.225 605.9 589.585 606.88 589.585 cv
607.84 589.585 608.6 589.225 609.16 588.465 cv
609.72 587.705 610 586.685 610 585.365 cv
610 584.085 609.72 583.045 609.16 582.285 cv
608.6 581.525 607.84 581.145 606.88 581.145 cv
606.88 579.625 mo
608.44 579.625 609.66 580.145 610.56 581.145 cv
611.44 582.165 611.9 583.565 611.9 585.365 cv
611.9 587.165 611.44 588.565 610.56 589.565 cv
609.66 590.585 608.44 591.085 606.88 591.085 cv
605.3 591.085 604.06 590.585 603.18 589.565 cv
602.3 588.565 601.86 587.165 601.86 585.365 cv
601.86 583.565 602.3 582.165 603.18 581.145 cv
604.06 580.145 605.3 579.625 606.88 579.625 cv
f
622.76 580.305 mo
622.76 581.985 li
622.24 581.705 621.74 581.505 621.22 581.365 cv
620.7 581.225 620.2 581.145 619.68 581.145 cv
618.52 581.145 617.6 581.525 616.96 582.265 cv
616.32 583.005 616 584.045 616 585.365 cv
616 586.705 616.32 587.745 616.96 588.485 cv
617.6 589.225 618.52 589.585 619.68 589.585 cv
620.2 589.585 620.7 589.525 621.22 589.385 cv
621.74 589.245 622.24 589.025 622.76 588.745 cv
622.76 590.405 li
622.24 590.645 621.72 590.825 621.2 590.925 cv
620.66 591.025 620.08 591.085 619.48 591.085 cv
617.84 591.085 616.52 590.585 615.56 589.545 cv
614.58 588.525 614.1 587.125 614.1 585.365 cv
614.1 583.585 614.58 582.185 615.56 581.165 cv
616.54 580.145 617.88 579.625 619.6 579.625 cv
620.16 579.625 620.7 579.685 621.22 579.805 cv
621.74 579.925 622.26 580.085 622.76 580.305 cv
f
634.98 584.225 mo
634.98 590.825 li
633.18 590.825 li
633.18 584.285 li
633.18 583.245 632.96 582.485 632.56 581.965 cv
632.16 581.445 631.56 581.185 630.76 581.185 cv
629.78 581.185 629.02 581.505 628.46 582.125 cv
627.9 582.745 627.62 583.585 627.62 584.645 cv
627.62 590.825 li
625.82 590.825 li
625.82 575.625 li
627.62 575.625 li
627.62 581.585 li
628.04 580.945 628.54 580.445 629.14 580.125 cv
629.72 579.805 630.4 579.625 631.16 579.625 cv
632.4 579.625 633.36 580.025 634 580.805 cv
634.64 581.585 634.98 582.725 634.98 584.225 cv
f
70.3654 489.25 mo
66.8654 489.25 li
f
70.3654 489.25 mo
66.8654 489.25 li
@
37.9286 483.572 mo
36.9086 483.572 36.1486 484.072 35.6286 485.072 cv
35.1086 486.072 34.8686 487.572 34.8686 489.572 cv
34.8686 491.572 35.1086 493.072 35.6286 494.072 cv
36.1486 495.072 36.9086 495.572 37.9286 495.572 cv
38.9486 495.572 39.7086 495.072 40.2286 494.072 cv
40.7286 493.072 40.9886 491.572 40.9886 489.572 cv
40.9886 487.572 40.7286 486.072 40.2286 485.072 cv
39.7086 484.072 38.9486 483.572 37.9286 483.572 cv
37.9286 482.012 mo
39.5486 482.012 40.7886 482.672 41.6686 483.952 cv
42.5286 485.252 42.9686 487.132 42.9686 489.572 cv
42.9686 492.032 42.5286 493.912 41.6686 495.192 cv
40.7886 496.472 39.5486 497.112 37.9286 497.112 cv
36.2886 497.112 35.0286 496.472 34.1686 495.192 cv
33.3086 493.912 32.8886 492.032 32.8886 489.572 cv
32.8886 487.132 33.3086 485.252 34.1686 483.952 cv
35.0286 482.672 36.2886 482.012 37.9286 482.012 cv
f
46.4286 494.372 mo
48.4886 494.372 li
48.4886 496.852 li
46.4286 496.852 li
46.4286 494.372 li
f
54.4884 495.192 mo
61.3685 495.192 li
61.3685 496.852 li
52.1085 496.852 li
52.1085 495.192 li
52.8484 494.432 53.8685 493.392 55.1685 492.072 cv
56.4485 490.772 57.2684 489.932 57.6085 489.552 cv
58.2485 488.852 58.6884 488.252 58.9285 487.752 cv
59.1685 487.272 59.3085 486.772 59.3085 486.292 cv
59.3085 485.532 59.0285 484.892 58.4884 484.412 cv
57.9485 483.932 57.2485 483.672 56.3685 483.672 cv
55.7485 483.672 55.0885 483.792 54.4084 483.992 cv
53.7285 484.212 52.9884 484.532 52.2085 484.972 cv
52.2085 482.972 li
53.0085 482.652 53.7485 482.412 54.4285 482.252 cv
55.1085 482.092 55.7485 482.012 56.3285 482.012 cv
57.8285 482.012 59.0285 482.392 59.9285 483.152 cv
60.8285 483.912 61.2885 484.912 61.2885 486.172 cv
61.2885 486.772 61.1685 487.352 60.9485 487.872 cv
60.7285 488.412 60.3285 489.052 59.7285 489.772 cv
59.5685 489.972 59.0484 490.512 58.1685 491.412 cv
57.2885 492.312 56.0685 493.572 54.4884 495.192 cv
f
70.3654 372.476 mo
66.8654 372.476 li
f
70.3654 372.476 mo
66.8654 372.476 li
@
37.9286 366.797 mo
36.9086 366.797 36.1486 367.297 35.6286 368.297 cv
35.1086 369.297 34.8686 370.797 34.8686 372.797 cv
34.8686 374.797 35.1086 376.297 35.6286 377.297 cv
36.1486 378.297 36.9086 378.797 37.9286 378.797 cv
38.9486 378.797 39.7086 378.297 40.2286 377.297 cv
40.7286 376.297 40.9886 374.797 40.9886 372.797 cv
40.9886 370.797 40.7286 369.297 40.2286 368.297 cv
39.7086 367.297 38.9486 366.797 37.9286 366.797 cv
37.9286 365.237 mo
39.5486 365.237 40.7886 365.897 41.6686 367.177 cv
42.5286 368.477 42.9686 370.357 42.9686 372.797 cv
42.9686 375.257 42.5286 377.137 41.6686 378.417 cv
40.7886 379.697 39.5486 380.337 37.9286 380.337 cv
36.2886 380.337 35.0286 379.697 34.1686 378.417 cv
33.3086 377.137 32.8886 375.257 32.8886 372.797 cv
32.8886 370.357 33.3086 368.477 34.1686 367.177 cv
35.0286 365.897 36.2886 365.237 37.9286 365.237 cv
f
46.4286 377.597 mo
48.4886 377.597 li
48.4886 380.077 li
46.4286 380.077 li
46.4286 377.597 li
f
58.2085 367.217 mo
53.2285 374.997 li
58.2085 374.997 li
58.2085 367.217 li
57.6884 365.497 mo
60.1685 365.497 li
60.1685 374.997 li
62.2485 374.997 li
62.2485 376.637 li
60.1685 376.637 li
60.1685 380.077 li
58.2085 380.077 li
58.2085 376.637 li
51.6284 376.637 li
51.6284 374.737 li
57.6884 365.497 li
f
70.3654 255.701 mo
66.8654 255.701 li
f
70.3654 255.701 mo
66.8654 255.701 li
@
37.9286 250.023 mo
36.9086 250.023 36.1486 250.523 35.6286 251.523 cv
35.1086 252.523 34.8686 254.023 34.8686 256.023 cv
34.8686 258.023 35.1086 259.523 35.6286 260.523 cv
36.1486 261.523 36.9086 262.023 37.9286 262.023 cv
38.9486 262.023 39.7086 261.523 40.2286 260.523 cv
40.7286 259.523 40.9886 258.023 40.9886 256.023 cv
40.9886 254.023 40.7286 252.523 40.2286 251.523 cv
39.7086 250.523 38.9486 250.023 37.9286 250.023 cv
37.9286 248.463 mo
39.5486 248.463 40.7886 249.123 41.6686 250.403 cv
42.5286 251.703 42.9686 253.583 42.9686 256.023 cv
42.9686 258.483 42.5286 260.363 41.6686 261.643 cv
40.7886 262.923 39.5486 263.563 37.9286 263.563 cv
36.2886 263.563 35.0286 262.923 34.1686 261.643 cv
33.3086 260.363 32.8886 258.483 32.8886 256.023 cv
32.8886 253.583 33.3086 251.703 34.1686 250.403 cv
35.0286 249.123 36.2886 248.463 37.9286 248.463 cv
f
46.4286 260.823 mo
48.4886 260.823 li
48.4886 263.303 li
46.4286 263.303 li
46.4286 260.823 li
f
57.2485 255.223 mo
56.3685 255.223 55.6685 255.543 55.1485 256.143 cv
54.6284 256.743 54.3685 257.583 54.3685 258.623 cv
54.3685 259.683 54.6284 260.523 55.1485 261.123 cv
55.6685 261.723 56.3685 262.023 57.2485 262.023 cv
58.1284 262.023 58.8285 261.723 59.3484 261.123 cv
59.8685 260.523 60.1284 259.683 60.1284 258.623 cv
60.1284 257.583 59.8685 256.743 59.3484 256.143 cv
58.8285 255.543 58.1284 255.223 57.2485 255.223 cv
61.1685 249.043 mo
61.1685 250.843 li
60.6685 250.603 60.1685 250.423 59.6685 250.303 cv
59.1485 250.183 58.6485 250.123 58.1685 250.123 cv
56.8484 250.123 55.8484 250.563 55.1685 251.443 cv
54.4884 252.323 54.0885 253.663 54.0085 255.423 cv
54.3885 254.863 54.8685 254.423 55.4485 254.123 cv
56.0285 253.823 56.6685 253.663 57.3685 253.663 cv
58.8285 253.663 59.9884 254.123 60.8285 255.003 cv
61.6685 255.883 62.1085 257.103 62.1085 258.623 cv
62.1085 260.123 61.6485 261.323 60.7684 262.223 cv
59.8885 263.123 58.7085 263.563 57.2485 263.563 cv
55.5685 263.563 54.2684 262.923 53.3885 261.643 cv
52.4884 260.363 52.0484 258.483 52.0484 256.023 cv
52.0484 253.723 52.5885 251.883 53.6884 250.523 cv
54.7684 249.163 56.2485 248.463 58.0885 248.463 cv
58.5685 248.463 59.0685 248.523 59.5885 248.603 cv
60.0885 248.703 60.6085 248.843 61.1685 249.043 cv
f
70.3654 138.927 mo
66.8654 138.927 li
f
70.3654 138.927 mo
66.8654 138.927 li
@
37.9286 133.249 mo
36.9086 133.249 36.1486 133.749 35.6286 134.749 cv
35.1086 135.749 34.8686 137.249 34.8686 139.249 cv
34.8686 141.249 35.1086 142.749 35.6286 143.749 cv
36.1486 144.749 36.9086 145.249 37.9286 145.249 cv
38.9486 145.249 39.7086 144.749 40.2286 143.749 cv
40.7286 142.749 40.9886 141.249 40.9886 139.249 cv
40.9886 137.249 40.7286 135.749 40.2286 134.749 cv
39.7086 133.749 38.9486 133.249 37.9286 133.249 cv
37.9286 131.689 mo
39.5486 131.689 40.7886 132.349 41.6686 133.629 cv
42.5286 134.929 42.9686 136.809 42.9686 139.249 cv
42.9686 141.709 42.5286 143.589 41.6686 144.869 cv
40.7886 146.149 39.5486 146.789 37.9286 146.789 cv
36.2886 146.789 35.0286 146.149 34.1686 144.869 cv
33.3086 143.589 32.8886 141.709 32.8886 139.249 cv
32.8886 136.809 33.3086 134.929 34.1686 133.629 cv
35.0286 132.349 36.2886 131.689 37.9286 131.689 cv
f
46.4286 144.049 mo
48.4886 144.049 li
48.4886 146.529 li
46.4286 146.529 li
46.4286 144.049 li
f
57.0085 139.609 mo
56.0685 139.609 55.3285 139.869 54.7885 140.369 cv
54.2485 140.869 53.9884 141.549 53.9884 142.429 cv
53.9884 143.309 54.2485 144.009 54.7885 144.509 cv
55.3285 145.009 56.0685 145.249 57.0085 145.249 cv
57.9285 145.249 58.6685 145.009 59.2085 144.489 cv
59.7485 143.989 60.0285 143.309 60.0285 142.429 cv
60.0285 141.549 59.7485 140.869 59.2285 140.369 cv
58.6884 139.869 57.9485 139.609 57.0085 139.609 cv
55.0285 138.769 mo
54.1884 138.569 53.5285 138.169 53.0484 137.589 cv
52.5685 137.009 52.3484 136.309 52.3484 135.469 cv
52.3484 134.309 52.7485 133.389 53.5885 132.709 cv
54.4084 132.029 55.5484 131.689 57.0085 131.689 cv
58.4485 131.689 59.5885 132.029 60.4285 132.709 cv
61.2485 133.389 61.6685 134.309 61.6685 135.469 cv
61.6685 136.309 61.4285 137.009 60.9485 137.589 cv
60.4685 138.169 59.8285 138.569 58.9884 138.769 cv
59.9285 138.989 60.6685 139.429 61.2085 140.069 cv
61.7285 140.709 62.0085 141.509 62.0085 142.429 cv
62.0085 143.849 61.5685 144.929 60.7085 145.669 cv
59.8285 146.429 58.6085 146.789 57.0085 146.789 cv
55.3885 146.789 54.1485 146.429 53.2885 145.669 cv
52.4285 144.929 52.0085 143.849 52.0085 142.429 cv
52.0085 141.509 52.2684 140.709 52.8085 140.069 cv
53.3285 139.429 54.0685 138.989 55.0285 138.769 cv
54.3085 135.649 mo
54.3085 136.409 54.5285 137.009 55.0085 137.429 cv
55.4884 137.849 56.1485 138.049 57.0085 138.049 cv
57.8484 138.049 58.5085 137.849 58.9884 137.429 cv
59.4685 137.009 59.7085 136.409 59.7085 135.649 cv
59.7085 134.889 59.4685 134.309 58.9884 133.889 cv
58.5085 133.469 57.8484 133.249 57.0085 133.249 cv
56.1485 133.249 55.4884 133.469 55.0085 133.889 cv
54.5285 134.309 54.3085 134.889 54.3085 135.649 cv
f
70.3654 22.1529 mo
66.8654 22.1529 li
f
70.3654 22.1529 mo
66.8654 22.1529 li
@
34.0486 28.0945 mo
37.2686 28.0945 li
37.2686 16.9745 li
33.7686 17.6745 li
33.7686 15.8745 li
37.2486 15.1745 li
39.2286 15.1745 li
39.2286 28.0945 li
42.4486 28.0945 li
42.4486 29.7545 li
34.0486 29.7545 li
34.0486 28.0945 li
f
46.4286 27.2745 mo
48.4886 27.2745 li
48.4886 29.7545 li
46.4286 29.7545 li
46.4286 27.2745 li
f
57.0085 16.4745 mo
55.9884 16.4745 55.2285 16.9745 54.7085 17.9745 cv
54.1884 18.9745 53.9485 20.4745 53.9485 22.4745 cv
53.9485 24.4745 54.1884 25.9745 54.7085 26.9745 cv
55.2285 27.9745 55.9884 28.4745 57.0085 28.4745 cv
58.0285 28.4745 58.7885 27.9745 59.3085 26.9745 cv
59.8085 25.9745 60.0685 24.4745 60.0685 22.4745 cv
60.0685 20.4745 59.8085 18.9745 59.3085 17.9745 cv
58.7885 16.9745 58.0285 16.4745 57.0085 16.4745 cv
57.0085 14.9145 mo
58.6284 14.9145 59.8685 15.5745 60.7485 16.8545 cv
61.6085 18.1545 62.0484 20.0345 62.0484 22.4745 cv
62.0484 24.9345 61.6085 26.8145 60.7485 28.0945 cv
59.8685 29.3745 58.6284 30.0145 57.0085 30.0145 cv
55.3685 30.0145 54.1085 29.3745 53.2485 28.0945 cv
52.3885 26.8145 51.9685 24.9345 51.9685 22.4745 cv
51.9685 20.0345 52.3885 18.1545 53.2485 16.8545 cv
54.1085 15.5745 55.3685 14.9145 57.0085 14.9145 cv
f
10.7723 341.98 mo
18.0323 344.66 li
18.0323 339.3 li
10.7723 341.98 li
8.83231 343.1 mo
8.83231 340.86 li
23.4123 335.3 li
23.4123 337.36 li
19.6723 338.68 li
19.6723 345.26 li
23.4123 346.58 li
23.4123 348.66 li
8.83231 343.1 li
f
12.8923 325.38 mo
14.5723 325.38 li
14.2923 325.9 14.0923 326.4 13.9523 326.92 cv
13.8123 327.44 13.7323 327.94 13.7323 328.46 cv
13.7323 329.62 14.1123 330.54 14.8523 331.18 cv
15.5923 331.82 16.6323 332.14 17.9523 332.14 cv
19.2923 332.14 20.3323 331.82 21.0723 331.18 cv
21.8123 330.54 22.1723 329.62 22.1723 328.46 cv
22.1723 327.94 22.1123 327.44 21.9723 326.92 cv
21.8323 326.4 21.6123 325.9 21.3323 325.38 cv
22.9923 325.38 li
23.2323 325.9 23.4123 326.42 23.5123 326.94 cv
23.6123 327.48 23.6723 328.06 23.6723 328.66 cv
23.6723 330.3 23.1723 331.62 22.1323 332.58 cv
21.1123 333.56 19.7123 334.04 17.9523 334.04 cv
16.1723 334.04 14.7723 333.56 13.7523 332.58 cv
12.7323 331.6 12.2123 330.26 12.2123 328.54 cv
12.2123 327.98 12.2723 327.44 12.3923 326.92 cv
12.5123 326.4 12.6723 325.88 12.8923 325.38 cv
f
12.8923 314.38 mo
14.5723 314.38 li
14.2923 314.9 14.0923 315.4 13.9523 315.92 cv
13.8123 316.44 13.7323 316.94 13.7323 317.46 cv
13.7323 318.62 14.1123 319.54 14.8523 320.18 cv
15.5923 320.82 16.6323 321.14 17.9523 321.14 cv
19.2923 321.14 20.3323 320.82 21.0723 320.18 cv
21.8123 319.54 22.1723 318.62 22.1723 317.46 cv
22.1723 316.94 22.1123 316.44 21.9723 315.92 cv
21.8323 315.4 21.6123 314.9 21.3323 314.38 cv
22.9923 314.38 li
23.2323 314.9 23.4123 315.42 23.5123 315.94 cv
23.6123 316.48 23.6723 317.06 23.6723 317.66 cv
23.6723 319.3 23.1723 320.62 22.1323 321.58 cv
21.1123 322.56 19.7123 323.04 17.9523 323.04 cv
16.1723 323.04 14.7723 322.56 13.7523 321.58 cv
12.7323 320.6 12.2123 319.26 12.2123 317.54 cv
12.2123 316.98 12.2723 316.44 12.3923 315.92 cv
12.5123 315.4 12.6723 314.88 12.8923 314.38 cv
f
19.0923 311.44 mo
12.4723 311.44 li
12.4723 309.64 li
19.0323 309.64 li
20.0723 309.64 20.8323 309.44 21.3523 309.04 cv
21.8723 308.64 22.1323 308.04 22.1323 307.22 cv
22.1323 306.26 21.8323 305.48 21.2123 304.92 cv
20.5923 304.36 19.7523 304.08 18.6723 304.08 cv
12.4723 304.08 li
12.4723 302.28 li
23.4123 302.28 li
23.4123 304.08 li
21.7323 304.08 li
22.4123 304.52 22.8923 305.04 23.2123 305.6 cv
23.5123 306.18 23.6723 306.84 23.6723 307.6 cv
23.6723 308.86 23.2923 309.82 22.5123 310.46 cv
21.7523 311.12 20.6123 311.44 19.0923 311.44 cv
12.2123 306.92 mo
12.2123 306.92 li
f
14.1523 292.24 mo
14.0323 292.44 13.9523 292.66 13.8923 292.9 cv
13.8523 293.14 13.8123 293.4 13.8123 293.68 cv
13.8123 294.7 14.1523 295.48 14.8123 296.02 cv
15.4723 296.58 16.4123 296.84 17.6523 296.84 cv
23.4123 296.84 li
23.4123 298.64 li
12.4723 298.64 li
12.4723 296.84 li
14.1723 296.84 li
13.5123 296.48 13.0123 295.98 12.6923 295.38 cv
12.3723 294.78 12.2123 294.04 12.2123 293.16 cv
12.2123 293.04 12.2323 292.9 12.2323 292.74 cv
12.2523 292.6 12.2723 292.44 12.3123 292.24 cv
14.1523 292.24 li
f
17.9123 285.38 mo
17.9123 286.84 18.0923 287.84 18.4123 288.4 cv
18.7523 288.96 19.3123 289.24 20.1123 289.24 cv
20.7523 289.24 21.2723 289.04 21.6323 288.62 cv
22.0123 288.2 22.1923 287.62 22.1923 286.9 cv
22.1923 285.9 21.8523 285.1 21.1323 284.5 cv
20.4323 283.9 19.4923 283.6 18.3123 283.6 cv
17.9123 283.6 li
17.9123 285.38 li
17.1723 281.8 mo
23.4123 281.8 li
23.4123 283.6 li
21.7523 283.6 li
22.4323 284.02 22.9123 284.54 23.2123 285.14 cv
23.5123 285.74 23.6723 286.5 23.6723 287.38 cv
23.6723 288.5 23.3723 289.4 22.7523 290.06 cv
22.1323 290.72 21.2923 291.04 20.2323 291.04 cv
19.0123 291.04 18.0923 290.64 17.4523 289.8 cv
16.8323 288.98 16.5123 287.76 16.5123 286.12 cv
16.5123 283.6 li
16.3323 283.6 li
15.5123 283.6 14.8723 283.88 14.4123 284.42 cv
13.9723 284.96 13.7323 285.72 13.7323 286.7 cv
13.7323 287.34 13.8123 287.94 13.9723 288.54 cv
14.1323 289.14 14.3523 289.7 14.6323 290.24 cv
12.9723 290.24 li
12.7323 289.6 12.5323 288.96 12.4123 288.34 cv
12.2923 287.72 12.2123 287.12 12.2123 286.52 cv
12.2123 284.94 12.6323 283.76 13.4523 282.98 cv
14.2723 282.2 15.5123 281.8 17.1723 281.8 cv
f
12.8923 270.22 mo
14.5723 270.22 li
14.2923 270.74 14.0923 271.24 13.9523 271.76 cv
13.8123 272.28 13.7323 272.78 13.7323 273.3 cv
13.7323 274.46 14.1123 275.38 14.8523 276.02 cv
15.5923 276.66 16.6323 276.98 17.9523 276.98 cv
19.2923 276.98 20.3323 276.66 21.0723 276.02 cv
21.8123 275.38 22.1723 274.46 22.1723 273.3 cv
22.1723 272.78 22.1123 272.28 21.9723 271.76 cv
21.8323 271.24 21.6123 270.74 21.3323 270.22 cv
22.9923 270.22 li
23.2323 270.74 23.4123 271.26 23.5123 271.78 cv
23.6123 272.32 23.6723 272.9 23.6723 273.5 cv
23.6723 275.14 23.1723 276.46 22.1323 277.42 cv
21.1123 278.4 19.7123 278.88 17.9523 278.88 cv
16.1723 278.88 14.7723 278.4 13.7523 277.42 cv
12.7323 276.44 12.2123 275.1 12.2123 273.38 cv
12.2123 272.82 12.2723 272.28 12.3923 271.76 cv
12.5123 271.24 12.6723 270.72 12.8923 270.22 cv
f
24.4123 262.54 mo
25.6923 263.06 26.5523 263.56 26.9523 264.04 cv
27.3523 264.52 27.5523 265.16 27.5523 265.96 cv
27.5523 267.4 li
26.0523 267.4 li
26.0523 266.34 li
26.0523 265.86 25.9323 265.48 25.6923 265.2 cv
25.4523 264.92 24.9123 264.62 24.0323 264.28 cv
23.2323 263.96 li
12.4723 268.38 li
12.4723 266.48 li
21.0323 263.06 li
12.4723 259.64 li
12.4723 257.74 li
24.4123 262.54 li
f
16.5723 241.9 mo
16.7323 241.48 17.0323 241.06 17.4923 240.66 cv
17.9723 240.26 18.6123 239.86 19.4323 239.46 cv
23.4123 237.46 li
23.4123 239.58 li
19.6723 241.44 li
18.7123 241.92 18.0523 242.4 17.7323 242.84 cv
17.4123 243.3 17.2523 243.92 17.2523 244.7 cv
17.2523 246.84 li
23.4123 246.84 li
23.4123 248.82 li
8.83231 248.82 li
8.83231 244.36 li
8.83231 242.7 9.19231 241.46 9.87231 240.64 cv
10.5723 239.82 11.6323 239.4 13.0323 239.4 cv
13.9523 239.4 14.7323 239.62 15.3323 240.04 cv
15.9323 240.48 16.3523 241.1 16.5723 241.9 cv
10.4523 246.84 mo
15.6323 246.84 li
15.6323 244.36 li
15.6323 243.42 15.4123 242.7 14.9723 242.22 cv
14.5323 241.74 13.8923 241.48 13.0323 241.48 cv
12.1923 241.48 11.5523 241.74 11.1123 242.22 cv
10.6723 242.7 10.4523 243.42 10.4523 244.36 cv
10.4523 246.84 li
f
17.9123 230.02 mo
17.9123 231.48 18.0923 232.48 18.4123 233.04 cv
18.7523 233.6 19.3123 233.88 20.1123 233.88 cv
20.7523 233.88 21.2723 233.68 21.6323 233.26 cv
22.0123 232.84 22.1923 232.26 22.1923 231.54 cv
22.1923 230.54 21.8523 229.74 21.1323 229.14 cv
20.4323 228.54 19.4923 228.24 18.3123 228.24 cv
17.9123 228.24 li
17.9123 230.02 li
17.1723 226.44 mo
23.4123 226.44 li
23.4123 228.24 li
21.7523 228.24 li
22.4323 228.66 22.9123 229.18 23.2123 229.78 cv
23.5123 230.38 23.6723 231.14 23.6723 232.02 cv
23.6723 233.14 23.3723 234.04 22.7523 234.7 cv
22.1323 235.36 21.2923 235.68 20.2323 235.68 cv
19.0123 235.68 18.0923 235.28 17.4523 234.44 cv
16.8323 233.62 16.5123 232.4 16.5123 230.76 cv
16.5123 228.24 li
16.3323 228.24 li
15.5123 228.24 14.8723 228.52 14.4123 229.06 cv
13.9723 229.6 13.7323 230.36 13.7323 231.34 cv
13.7323 231.98 13.8123 232.58 13.9723 233.18 cv
14.1323 233.78 14.3523 234.34 14.6323 234.88 cv
12.9723 234.88 li
12.7323 234.24 12.5323 233.6 12.4123 232.98 cv
12.2923 232.36 12.2123 231.76 12.2123 231.16 cv
12.2123 229.58 12.6323 228.4 13.4523 227.62 cv
14.2723 226.84 15.5123 226.44 17.1723 226.44 cv
f
9.37231 220.96 mo
12.4723 220.96 li
12.4723 217.26 li
13.8723 217.26 li
13.8723 220.96 li
19.8123 220.96 li
20.7123 220.96 21.2923 220.84 21.5323 220.6 cv
21.7923 220.36 21.9123 219.86 21.9123 219.1 cv
21.9123 217.26 li
23.4123 217.26 li
23.4123 219.1 li
23.4123 220.5 23.1523 221.46 22.6323 221.98 cv
22.1123 222.5 21.1723 222.76 19.8123 222.76 cv
13.8723 222.76 li
13.8723 224.08 li
12.4723 224.08 li
12.4723 222.76 li
9.37231 222.76 li
9.37231 220.96 li
f
17.4923 205.54 mo
18.3723 205.54 li
18.3723 213.8 li
19.6123 213.72 20.5723 213.36 21.2123 212.68 cv
21.8523 212.02 22.1723 211.1 22.1723 209.9 cv
22.1723 209.22 22.0923 208.54 21.9323 207.9 cv
21.7723 207.26 21.5123 206.6 21.1523 205.96 cv
22.8523 205.96 li
23.1323 206.6 23.3523 207.26 23.4723 207.94 cv
23.5923 208.62 23.6723 209.32 23.6723 210 cv
23.6723 211.76 23.1723 213.14 22.1723 214.16 cv
21.1723 215.18 19.7923 215.68 18.0523 215.68 cv
16.2723 215.68 14.8523 215.2 13.7923 214.24 cv
12.7523 213.28 12.2123 211.96 12.2123 210.32 cv
12.2123 208.84 12.6923 207.68 13.6323 206.82 cv
14.5923 205.98 15.8723 205.54 17.4923 205.54 cv
16.9723 207.34 mo
15.9923 207.36 15.2123 207.64 14.6123 208.16 cv
14.0323 208.7 13.7323 209.42 13.7323 210.3 cv
13.7323 211.3 14.0323 212.1 14.5923 212.7 cv
15.1523 213.3 15.9523 213.66 16.9723 213.74 cv
16.9723 207.34 li
f
1.5 lw
2 lc
119.064 498.008 mo
128.902 381.623 li
138.74 333.356 li
148.578 295.534 li
158.416 264.135 li
168.254 256.999 li
178.092 242.727 li
187.93 213.014 li
197.768 182.263 li
207.606 155.276 li
217.444 130.429 li
227.282 117 li
237.12 110.577 li
246.958 105.971 li
256.796 101.43 li
266.634 95.9153 li
276.472 92.6716 li
286.31 87.287 li
296.148 84.3677 li
305.986 79.6318 li
315.824 77.5558 li
325.662 75.6744 li
335.5 72.9497 li
345.338 71.3279 li
355.176 65.6189 li
365.014 63.1536 li
374.852 61.0128 li
384.69 59.9099 li
394.528 58.6773 li
404.366 57.5745 li
414.204 55.3038 li
424.042 52.8386 li
433.88 51.6708 li
443.718 49.9193 li
453.556 48.492 li
463.394 48.0379 li
473.232 47.454 li
483.07 46.9999 li
492.908 46.935 li
502.746 46.6755 li
512.584 46.4809 li
522.422 45.8322 li
532.26 45.5078 li
542.098 45.6375 li
551.936 45.8322 li
561.774 44.9888 li
571.612 44.5995 li
581.45 43.9507 li
591.288 44.0156 li
601.126 44.7292 li
610.964 43.1074 li
620.802 41.4207 li
630.64 40.7719 li
640.479 39.9285 li
650.317 39.8636 li
660.155 40.2529 li
669.993 40.188 li
679.831 40.3178 li
689.669 39.6691 li
699.507 40.1232 li
709.345 38.7608 li
719.183 38.5662 li
729.021 38.5013 li
738.859 39.0203 li
748.697 38.6959 li
758.535 39.5393 li
768.373 40.5124 li
778.211 36.8146 li
788.049 37.1389 li
797.887 37.1389 li
807.725 37.2038 li
817.563 36.8146 li
827.401 37.0092 li
837.239 37.0092 li
847.077 36.9443 li
856.915 36.8795 li
866.753 36.8795 li
876.591 36.8795 li
886.429 36.8795 li
896.267 36.9443 li
906.105 36.8795 li
915.943 36.7497 li
925.781 36.6848 li
935.619 36.7497 li
945.457 36.7497 li
955.295 36.7497 li
965.133 36.8146 li
974.971 36.7497 li
984.809 36.6848 li
994.647 36.6199 li
1004.49 36.6199 li
1014.32 36.6199 li
1024.16 36.5551 li
1034 36.5551 li
1043.84 36.4902 li
1053.68 36.5551 li
1063.51 36.5551 li
1073.35 36.5551 li
1083.19 36.4902 li
1093.03 36.3605 li
/1 
[/DeviceCMYK] /CSA add_res
0 .9617 .904814 0 cmyk
@
119.064 490.612 mo
128.902 362.453 li
138.74 313.407 li
148.578 272.147 li
158.416 244.024 li
168.254 237.31 li
178.092 225.437 li
187.93 199.261 li
197.768 166.272 li
207.606 142.82 li
217.444 116.74 li
227.282 105.257 li
237.12 98.7374 li
246.958 95.7207 li
256.796 89.882 li
266.634 83.6541 li
276.472 79.9562 li
286.31 74.3121 li
296.148 72.1712 li
305.986 69.5438 li
315.824 67.7922 li
325.662 67.0137 li
335.5 65.9432 li
345.338 63.997 li
355.176 57.0879 li
365.014 55.0443 li
374.852 54.0712 li
384.69 53.1954 li
394.528 52.9034 li
404.366 50.3734 li
414.204 48.7191 li
424.042 46.8701 li
433.88 46.6755 li
443.718 45.6051 li
453.556 44.632 li
463.394 44.8266 li
473.232 44.9239 li
483.07 44.2427 li
492.908 43.9507 li
502.746 43.7562 li
512.584 43.6588 li
522.422 43.2696 li
532.26 43.075 li
542.098 42.3938 li
551.936 42.783 li
561.774 42.5884 li
571.612 42.2964 li
581.45 42.4911 li
591.288 42.4911 li
601.126 43.075 li
610.964 41.226 li
620.802 40.1556 li
630.64 39.7664 li
640.479 39.6691 li
650.317 39.0852 li
660.155 39.1825 li
669.993 38.8906 li
679.831 38.8906 li
689.669 38.5013 li
699.507 38.5986 li
709.345 37.3336 li
719.183 36.0685 li
729.021 36.3605 li
738.859 36.6524 li
748.697 36.847 li
758.535 38.2094 li
768.373 38.1121 li
778.211 40.1556 li
788.049 40.6422 li
797.887 40.8368 li
807.725 41.0314 li
817.563 41.0314 li
827.401 41.0314 li
837.239 41.1287 li
847.077 41.1287 li
856.915 41.1287 li
866.753 41.1287 li
876.591 41.1287 li
886.429 41.226 li
896.267 41.226 li
906.105 41.3234 li
915.943 41.4207 li
925.781 41.4207 li
935.619 41.4207 li
945.457 41.518 li
955.295 41.6153 li
965.133 41.7126 li
974.971 41.7126 li
984.809 41.8099 li
994.647 41.7126 li
1004.49 41.7126 li
1014.32 41.8099 li
1024.16 41.8099 li
1034 41.8099 li
1043.84 41.8099 li
1053.68 41.8099 li
1063.51 41.8099 li
1073.35 41.8099 li
1083.19 41.8099 li
1093.03 41.8099 li
@
gsave
115.564 494.112 mo
122.563 494.112 li
122.563 487.112 li
115.564 487.112 li
115.564 494.112 li
clp
116.064 493.612 mo
122.064 487.612 li
116.064 487.612 mo
122.064 493.612 li
f
1 lw
0 lc
116.064 493.612 mo
122.064 487.612 li
116.064 487.612 mo
122.064 493.612 li
@
grestore
gsave
125.402 365.952 mo
132.402 365.952 li
132.402 358.953 li
125.402 358.953 li
125.402 365.952 li
clp
125.902 365.453 mo
131.902 359.453 li
125.902 359.453 mo
131.902 365.453 li
f
1 lw
0 lc
125.902 365.453 mo
131.902 359.453 li
125.902 359.453 mo
131.902 365.453 li
@
grestore
gsave
135.24 316.908 mo
142.24 316.908 li
142.24 309.908 li
135.24 309.908 li
135.24 316.908 li
clp
135.74 316.407 mo
141.74 310.407 li
135.74 310.407 mo
141.74 316.407 li
f
1 lw
0 lc
135.74 316.407 mo
141.74 310.407 li
135.74 310.407 mo
141.74 316.407 li
@
grestore
gsave
145.078 275.647 mo
152.078 275.647 li
152.078 268.647 li
145.078 268.647 li
145.078 275.647 li
clp
145.578 275.147 mo
151.578 269.147 li
145.578 269.147 mo
151.578 275.147 li
f
1 lw
0 lc
145.578 275.147 mo
151.578 269.147 li
145.578 269.147 mo
151.578 275.147 li
@
grestore
gsave
154.916 247.524 mo
161.916 247.524 li
161.916 240.524 li
154.916 240.524 li
154.916 247.524 li
clp
155.416 247.024 mo
161.416 241.024 li
155.416 241.024 mo
161.416 247.024 li
f
1 lw
0 lc
155.416 247.024 mo
161.416 241.024 li
155.416 241.024 mo
161.416 247.024 li
@
grestore
gsave
164.754 240.81 mo
171.754 240.81 li
171.754 233.81 li
164.754 233.81 li
164.754 240.81 li
clp
165.254 240.31 mo
171.254 234.31 li
165.254 234.31 mo
171.254 240.31 li
f
1 lw
0 lc
165.254 240.31 mo
171.254 234.31 li
165.254 234.31 mo
171.254 240.31 li
@
grestore
gsave
174.592 228.937 mo
181.592 228.937 li
181.592 221.937 li
174.592 221.937 li
174.592 228.937 li
clp
175.092 228.438 mo
181.092 222.438 li
175.092 222.438 mo
181.092 228.438 li
f
1 lw
0 lc
175.092 228.438 mo
181.092 222.438 li
175.092 222.438 mo
181.092 228.438 li
@
grestore
gsave
184.43 202.761 mo
191.43 202.761 li
191.43 195.761 li
184.43 195.761 li
184.43 202.761 li
clp
184.93 202.261 mo
190.93 196.261 li
184.93 196.261 mo
190.93 202.261 li
f
1 lw
0 lc
184.93 202.261 mo
190.93 196.261 li
184.93 196.261 mo
190.93 202.261 li
@
grestore
gsave
194.268 169.772 mo
201.268 169.772 li
201.268 162.772 li
194.268 162.772 li
194.268 169.772 li
clp
194.768 169.272 mo
200.768 163.272 li
194.768 163.272 mo
200.768 169.272 li
f
1 lw
0 lc
194.768 169.272 mo
200.768 163.272 li
194.768 163.272 mo
200.768 169.272 li
@
grestore
gsave
204.106 146.32 mo
211.106 146.32 li
211.106 139.32 li
204.106 139.32 li
204.106 146.32 li
clp
204.606 145.82 mo
210.606 139.82 li
204.606 139.82 mo
210.606 145.82 li
f
1 lw
0 lc
204.606 145.82 mo
210.606 139.82 li
204.606 139.82 mo
210.606 145.82 li
@
grestore
gsave
213.944 120.24 mo
220.944 120.24 li
220.944 113.24 li
213.944 113.24 li
213.944 120.24 li
clp
214.444 119.74 mo
220.444 113.74 li
214.444 113.74 mo
220.444 119.74 li
f
1 lw
0 lc
214.444 119.74 mo
220.444 113.74 li
214.444 113.74 mo
220.444 119.74 li
@
grestore
gsave
223.782 108.757 mo
230.782 108.757 li
230.782 101.757 li
223.782 101.757 li
223.782 108.757 li
clp
224.282 108.257 mo
230.282 102.257 li
224.282 102.257 mo
230.282 108.257 li
f
1 lw
0 lc
224.282 108.257 mo
230.282 102.257 li
224.282 102.257 mo
230.282 108.257 li
@
grestore
gsave
233.62 102.237 mo
240.62 102.237 li
240.62 95.2373 li
233.62 95.2373 li
233.62 102.237 li
clp
234.12 101.737 mo
240.12 95.7374 li
234.12 95.7374 mo
240.12 101.737 li
f
1 lw
0 lc
234.12 101.737 mo
240.12 95.7374 li
234.12 95.7374 mo
240.12 101.737 li
@
grestore
gsave
243.458 99.2209 mo
250.458 99.2209 li
250.458 92.2206 li
243.458 92.2206 li
243.458 99.2209 li
clp
243.958 98.7207 mo
249.958 92.7207 li
243.958 92.7207 mo
249.958 98.7207 li
f
1 lw
0 lc
243.958 98.7207 mo
249.958 92.7207 li
243.958 92.7207 mo
249.958 98.7207 li
@
grestore
gsave
253.296 93.382 mo
260.296 93.382 li
260.296 86.382 li
253.296 86.382 li
253.296 93.382 li
clp
253.796 92.882 mo
259.796 86.882 li
253.796 86.882 mo
259.796 92.882 li
f
1 lw
0 lc
253.796 92.882 mo
259.796 86.882 li
253.796 86.882 mo
259.796 92.882 li
@
grestore
gsave
263.134 87.1541 mo
270.134 87.1541 li
270.134 80.1542 li
263.134 80.1542 li
263.134 87.1541 li
clp
263.634 86.6541 mo
269.634 80.6541 li
263.634 80.6541 mo
269.634 86.6541 li
f
1 lw
0 lc
263.634 86.6541 mo
269.634 80.6541 li
263.634 80.6541 mo
269.634 86.6541 li
@
grestore
gsave
272.972 83.456 mo
279.972 83.456 li
279.972 76.4561 li
272.972 76.4561 li
272.972 83.456 li
clp
273.472 82.9562 mo
279.472 76.9562 li
273.472 76.9562 mo
279.472 82.9562 li
f
1 lw
0 lc
273.472 82.9562 mo
279.472 76.9562 li
273.472 76.9562 mo
279.472 82.9562 li
@
grestore
gsave
282.81 77.812 mo
289.81 77.812 li
289.81 70.812 li
282.81 70.812 li
282.81 77.812 li
clp
283.31 77.3121 mo
289.31 71.3121 li
283.31 71.3121 mo
289.31 77.3121 li
f
1 lw
0 lc
283.31 77.3121 mo
289.31 71.3121 li
283.31 71.3121 mo
289.31 77.3121 li
@
grestore
gsave
292.648 75.6712 mo
299.648 75.6712 li
299.648 68.6712 li
292.648 68.6712 li
292.648 75.6712 li
clp
293.148 75.1712 mo
299.148 69.1712 li
293.148 69.1712 mo
299.148 75.1712 li
f
1 lw
0 lc
293.148 75.1712 mo
299.148 69.1712 li
293.148 69.1712 mo
299.148 75.1712 li
@
grestore
gsave
302.486 73.0438 mo
309.486 73.0438 li
309.486 66.0439 li
302.486 66.0439 li
302.486 73.0438 li
clp
302.986 72.5438 mo
308.986 66.5438 li
302.986 66.5438 mo
308.986 72.5438 li
f
1 lw
0 lc
302.986 72.5438 mo
308.986 66.5438 li
302.986 66.5438 mo
308.986 72.5438 li
@
grestore
gsave
312.324 71.292 mo
319.324 71.292 li
319.324 64.2921 li
312.324 64.2921 li
312.324 71.292 li
clp
312.824 70.7922 mo
318.824 64.7922 li
312.824 64.7922 mo
318.824 70.7922 li
f
1 lw
0 lc
312.824 70.7922 mo
318.824 64.7922 li
312.824 64.7922 mo
318.824 70.7922 li
@
grestore
gsave
322.162 70.5137 mo
329.162 70.5137 li
329.162 63.5138 li
322.162 63.5138 li
322.162 70.5137 li
clp
322.662 70.0137 mo
328.662 64.0137 li
322.662 64.0137 mo
328.662 70.0137 li
f
1 lw
0 lc
322.662 70.0137 mo
328.662 64.0137 li
322.662 64.0137 mo
328.662 70.0137 li
@
grestore
gsave
332 69.4433 mo
339 69.4433 li
339 62.4434 li
332 62.4434 li
332 69.4433 li
clp
332.5 68.9432 mo
338.5 62.9432 li
332.5 62.9432 mo
338.5 68.9432 li
f
1 lw
0 lc
332.5 68.9432 mo
338.5 62.9432 li
332.5 62.9432 mo
338.5 68.9432 li
@
grestore
gsave
341.838 67.497 mo
348.838 67.497 li
348.838 60.4971 li
341.838 60.4971 li
341.838 67.497 li
clp
342.338 66.997 mo
348.338 60.997 li
342.338 60.997 mo
348.338 66.997 li
f
1 lw
0 lc
342.338 66.997 mo
348.338 60.997 li
342.338 60.997 mo
348.338 66.997 li
@
grestore
gsave
351.676 60.5878 mo
358.676 60.5878 li
358.676 53.5878 li
351.676 53.5878 li
351.676 60.5878 li
clp
352.176 60.0879 mo
358.176 54.0879 li
352.176 54.0879 mo
358.176 60.0879 li
f
1 lw
0 lc
352.176 60.0879 mo
358.176 54.0879 li
352.176 54.0879 mo
358.176 60.0879 li
@
grestore
gsave
361.514 58.5442 mo
368.514 58.5442 li
368.514 51.5443 li
361.514 51.5443 li
361.514 58.5442 li
clp
362.014 58.0443 mo
368.014 52.0443 li
362.014 52.0443 mo
368.014 58.0443 li
f
1 lw
0 lc
362.014 58.0443 mo
368.014 52.0443 li
362.014 52.0443 mo
368.014 58.0443 li
@
grestore
gsave
371.352 57.5711 mo
378.352 57.5711 li
378.352 50.5711 li
371.352 50.5711 li
371.352 57.5711 li
clp
371.852 57.0712 mo
377.852 51.0712 li
371.852 51.0712 mo
377.852 57.0712 li
f
1 lw
0 lc
371.852 57.0712 mo
377.852 51.0712 li
371.852 51.0712 mo
377.852 57.0712 li
@
grestore
gsave
381.19 56.6955 mo
388.19 56.6955 li
388.19 49.6952 li
381.19 49.6952 li
381.19 56.6955 li
clp
381.69 56.1954 mo
387.69 50.1954 li
381.69 50.1954 mo
387.69 56.1954 li
f
1 lw
0 lc
381.69 56.1954 mo
387.69 50.1954 li
381.69 50.1954 mo
387.69 56.1954 li
@
grestore
gsave
391.028 56.4034 mo
398.028 56.4034 li
398.028 49.4035 li
391.028 49.4035 li
391.028 56.4034 li
clp
391.528 55.9034 mo
397.528 49.9034 li
391.528 49.9034 mo
397.528 55.9034 li
f
1 lw
0 lc
391.528 55.9034 mo
397.528 49.9034 li
391.528 49.9034 mo
397.528 55.9034 li
@
grestore
gsave
400.866 53.8733 mo
407.866 53.8733 li
407.866 46.8734 li
400.866 46.8734 li
400.866 53.8733 li
clp
401.366 53.3734 mo
407.366 47.3734 li
401.366 47.3734 mo
407.366 53.3734 li
f
1 lw
0 lc
401.366 53.3734 mo
407.366 47.3734 li
401.366 47.3734 mo
407.366 53.3734 li
@
grestore
gsave
410.704 52.2191 mo
417.704 52.2191 li
417.704 45.2192 li
410.704 45.2192 li
410.704 52.2191 li
clp
411.204 51.7191 mo
417.204 45.7191 li
411.204 45.7191 mo
417.204 51.7191 li
f
1 lw
0 lc
411.204 51.7191 mo
417.204 45.7191 li
411.204 45.7191 mo
417.204 51.7191 li
@
grestore
gsave
420.542 50.3701 mo
427.542 50.3701 li
427.542 43.3701 li
420.542 43.3701 li
420.542 50.3701 li
clp
421.042 49.8701 mo
427.042 43.8701 li
421.042 43.8701 mo
427.042 49.8701 li
f
1 lw
0 lc
421.042 49.8701 mo
427.042 43.8701 li
421.042 43.8701 mo
427.042 49.8701 li
@
grestore
gsave
430.38 50.1756 mo
437.38 50.1756 li
437.38 43.1756 li
430.38 43.1756 li
430.38 50.1756 li
clp
430.88 49.6755 mo
436.88 43.6755 li
430.88 43.6755 mo
436.88 49.6755 li
f
1 lw
0 lc
430.88 49.6755 mo
436.88 43.6755 li
430.88 43.6755 mo
436.88 49.6755 li
@
grestore
gsave
440.218 49.1052 mo
447.218 49.1052 li
447.218 42.1049 li
440.218 42.1049 li
440.218 49.1052 li
clp
440.718 48.605 mo
446.718 42.605 li
440.718 42.605 mo
446.718 48.605 li
f
1 lw
0 lc
440.718 48.605 mo
446.718 42.605 li
440.718 42.605 mo
446.718 48.605 li
@
grestore
gsave
450.056 48.132 mo
457.056 48.132 li
457.056 41.1317 li
450.056 41.1317 li
450.056 48.132 li
clp
450.556 47.6319 mo
456.556 41.6319 li
450.556 41.6319 mo
456.556 47.6319 li
f
1 lw
0 lc
450.556 47.6319 mo
456.556 41.6319 li
450.556 41.6319 mo
456.556 47.6319 li
@
grestore
gsave
459.894 48.3265 mo
466.894 48.3265 li
466.894 41.3266 li
459.894 41.3266 li
459.894 48.3265 li
clp
460.394 47.8265 mo
466.394 41.8265 li
460.394 41.8265 mo
466.394 47.8265 li
f
1 lw
0 lc
460.394 47.8265 mo
466.394 41.8265 li
460.394 41.8265 mo
466.394 47.8265 li
@
grestore
gsave
469.732 48.4238 mo
476.732 48.4238 li
476.732 41.4238 li
469.732 41.4238 li
469.732 48.4238 li
clp
470.232 47.9238 mo
476.232 41.9238 li
470.232 41.9238 mo
476.232 47.9238 li
f
1 lw
0 lc
470.232 47.9238 mo
476.232 41.9238 li
470.232 41.9238 mo
476.232 47.9238 li
@
grestore
gsave
479.57 47.7427 mo
486.57 47.7427 li
486.57 40.7428 li
479.57 40.7428 li
479.57 47.7427 li
clp
480.07 47.2426 mo
486.07 41.2426 li
480.07 41.2426 mo
486.07 47.2426 li
f
1 lw
0 lc
480.07 47.2426 mo
486.07 41.2426 li
480.07 41.2426 mo
486.07 47.2426 li
@
grestore
gsave
489.408 47.4506 mo
496.408 47.4506 li
496.408 40.4507 li
489.408 40.4507 li
489.408 47.4506 li
clp
489.908 46.9507 mo
495.908 40.9507 li
489.908 40.9507 mo
495.908 46.9507 li
f
1 lw
0 lc
489.908 46.9507 mo
495.908 40.9507 li
489.908 40.9507 mo
495.908 46.9507 li
@
grestore
gsave
499.246 47.2561 mo
506.246 47.2561 li
506.246 40.2562 li
499.246 40.2562 li
499.246 47.2561 li
clp
499.746 46.756 mo
505.746 40.756 li
499.746 40.756 mo
505.746 46.756 li
f
1 lw
0 lc
499.746 46.756 mo
505.746 40.756 li
499.746 40.756 mo
505.746 46.756 li
@
grestore
gsave
509.084 47.1589 mo
516.084 47.1589 li
516.084 40.1586 li
509.084 40.1586 li
509.084 47.1589 li
clp
509.584 46.6588 mo
515.584 40.6588 li
509.584 40.6588 mo
515.584 46.6588 li
f
1 lw
0 lc
509.584 46.6588 mo
515.584 40.6588 li
509.584 40.6588 mo
515.584 46.6588 li
@
grestore
gsave
518.922 46.7696 mo
525.922 46.7696 li
525.922 39.7696 li
518.922 39.7696 li
518.922 46.7696 li
clp
519.422 46.2695 mo
525.422 40.2695 li
519.422 40.2695 mo
525.422 46.2695 li
f
1 lw
0 lc
519.422 46.2695 mo
525.422 40.2695 li
519.422 40.2695 mo
525.422 46.2695 li
@
grestore
gsave
528.76 46.5751 mo
535.76 46.5751 li
535.76 39.5748 li
528.76 39.5748 li
528.76 46.5751 li
clp
529.26 46.0749 mo
535.26 40.0749 li
529.26 40.0749 mo
535.26 46.0749 li
f
1 lw
0 lc
529.26 46.0749 mo
535.26 40.0749 li
529.26 40.0749 mo
535.26 46.0749 li
@
grestore
gsave
538.598 45.8937 mo
545.598 45.8937 li
545.598 38.8937 li
538.598 38.8937 li
538.598 45.8937 li
clp
539.098 45.3937 mo
545.098 39.3937 li
539.098 39.3937 mo
545.098 45.3937 li
f
1 lw
0 lc
539.098 45.3937 mo
545.098 39.3937 li
539.098 39.3937 mo
545.098 45.3937 li
@
grestore
gsave
548.436 46.283 mo
555.436 46.283 li
555.436 39.283 li
548.436 39.283 li
548.436 46.283 li
clp
548.936 45.7829 mo
554.936 39.7829 li
548.936 39.7829 mo
554.936 45.7829 li
f
1 lw
0 lc
548.936 45.7829 mo
554.936 39.7829 li
548.936 39.7829 mo
554.936 45.7829 li
@
grestore
gsave
558.274 46.0881 mo
565.274 46.0881 li
565.274 39.0882 li
558.274 39.0882 li
558.274 46.0881 li
clp
558.774 45.5883 mo
564.774 39.5883 li
558.774 39.5883 mo
564.774 45.5883 li
f
1 lw
0 lc
558.774 45.5883 mo
564.774 39.5883 li
558.774 39.5883 mo
564.774 45.5883 li
@
grestore
gsave
568.112 45.7964 mo
575.112 45.7964 li
575.112 38.7965 li
568.112 38.7965 li
568.112 45.7964 li
clp
568.612 45.2963 mo
574.612 39.2963 li
568.612 39.2963 mo
574.612 45.2963 li
f
1 lw
0 lc
568.612 45.2963 mo
574.612 39.2963 li
568.612 39.2963 mo
574.612 45.2963 li
@
grestore
gsave
577.95 45.9909 mo
584.95 45.9909 li
584.95 38.9909 li
577.95 38.9909 li
577.95 45.9909 li
clp
578.45 45.491 mo
584.45 39.491 li
578.45 39.491 mo
584.45 45.491 li
f
1 lw
0 lc
578.45 45.491 mo
584.45 39.491 li
578.45 39.491 mo
584.45 45.491 li
@
grestore
gsave
587.788 45.9909 mo
594.788 45.9909 li
594.788 38.9909 li
587.788 38.9909 li
587.788 45.9909 li
clp
588.288 45.491 mo
594.288 39.491 li
588.288 39.491 mo
594.288 45.491 li
f
1 lw
0 lc
588.288 45.491 mo
594.288 39.491 li
588.288 39.491 mo
594.288 45.491 li
@
grestore
gsave
597.626 46.5747 mo
604.626 46.5747 li
604.626 39.5748 li
597.626 39.5748 li
597.626 46.5747 li
clp
598.126 46.0748 mo
604.126 40.0748 li
598.126 40.0748 mo
604.126 46.0748 li
f
1 lw
0 lc
598.126 46.0748 mo
604.126 40.0748 li
598.126 40.0748 mo
604.126 46.0748 li
@
grestore
gsave
607.464 44.726 mo
614.464 44.726 li
614.464 37.7257 li
607.464 37.7257 li
607.464 44.726 li
clp
607.964 44.2259 mo
613.964 38.2259 li
607.964 38.2259 mo
613.964 44.2259 li
f
1 lw
0 lc
607.964 44.2259 mo
613.964 38.2259 li
607.964 38.2259 mo
613.964 44.2259 li
@
grestore
gsave
617.302 43.6556 mo
624.302 43.6556 li
624.302 36.6553 li
617.302 36.6553 li
617.302 43.6556 li
clp
617.802 43.1555 mo
623.802 37.1555 li
617.802 37.1555 mo
623.802 43.1555 li
f
1 lw
0 lc
617.802 43.1555 mo
623.802 37.1555 li
617.802 37.1555 mo
623.802 43.1555 li
@
grestore
gsave
627.14 43.2663 mo
634.14 43.2663 li
634.14 36.2663 li
627.14 36.2663 li
627.14 43.2663 li
clp
627.64 42.7662 mo
633.64 36.7662 li
627.64 36.7662 mo
633.64 42.7662 li
f
1 lw
0 lc
627.64 42.7662 mo
633.64 36.7662 li
627.64 36.7662 mo
633.64 42.7662 li
@
grestore
gsave
636.978 43.169 mo
643.978 43.169 li
643.978 36.1691 li
636.978 36.1691 li
636.978 43.169 li
clp
637.478 42.6689 mo
643.478 36.6689 li
637.478 36.6689 mo
643.478 42.6689 li
f
1 lw
0 lc
637.478 42.6689 mo
643.478 36.6689 li
637.478 36.6689 mo
643.478 42.6689 li
@
grestore
gsave
646.816 42.5852 mo
653.816 42.5852 li
653.816 35.5849 li
646.816 35.5849 li
646.816 42.5852 li
clp
647.316 42.0851 mo
653.316 36.0851 li
647.316 36.0851 mo
653.316 42.0851 li
f
1 lw
0 lc
647.316 42.0851 mo
653.316 36.0851 li
647.316 36.0851 mo
653.316 42.0851 li
@
grestore
gsave
656.654 42.6825 mo
663.654 42.6825 li
663.654 35.6825 li
656.654 35.6825 li
656.654 42.6825 li
clp
657.154 42.1824 mo
663.154 36.1824 li
657.154 36.1824 mo
663.154 42.1824 li
f
1 lw
0 lc
657.154 42.1824 mo
663.154 36.1824 li
657.154 36.1824 mo
663.154 42.1824 li
@
grestore
gsave
666.492 42.3904 mo
673.492 42.3904 li
673.492 35.3904 li
666.492 35.3904 li
666.492 42.3904 li
clp
666.992 41.8904 mo
672.992 35.8904 li
666.992 35.8904 mo
672.992 41.8904 li
f
1 lw
0 lc
666.992 41.8904 mo
672.992 35.8904 li
666.992 35.8904 mo
672.992 41.8904 li
@
grestore
gsave
676.33 42.3904 mo
683.33 42.3904 li
683.33 35.3904 li
676.33 35.3904 li
676.33 42.3904 li
clp
676.83 41.8904 mo
682.83 35.8904 li
676.83 35.8904 mo
682.83 41.8904 li
f
1 lw
0 lc
676.83 41.8904 mo
682.83 35.8904 li
676.83 35.8904 mo
682.83 41.8904 li
@
grestore
gsave
686.168 42.0011 mo
693.168 42.0011 li
693.168 35.0011 li
686.168 35.0011 li
686.168 42.0011 li
clp
686.668 41.5012 mo
692.668 35.5012 li
686.668 35.5012 mo
692.668 41.5012 li
f
1 lw
0 lc
686.668 41.5012 mo
692.668 35.5012 li
686.668 35.5012 mo
692.668 41.5012 li
@
grestore
gsave
696.006 42.0987 mo
703.006 42.0987 li
703.006 35.0984 li
696.006 35.0984 li
696.006 42.0987 li
clp
696.506 41.5985 mo
702.506 35.5985 li
696.506 35.5985 mo
702.506 41.5985 li
f
1 lw
0 lc
696.506 41.5985 mo
702.506 35.5985 li
696.506 35.5985 mo
702.506 41.5985 li
@
grestore
gsave
705.844 40.8334 mo
712.844 40.8334 li
712.844 33.8335 li
705.844 33.8335 li
705.844 40.8334 li
clp
706.344 40.3334 mo
712.344 34.3334 li
706.344 34.3334 mo
712.344 40.3334 li
f
1 lw
0 lc
706.344 40.3334 mo
712.344 34.3334 li
706.344 34.3334 mo
712.344 40.3334 li
@
grestore
gsave
715.682 39.5682 mo
722.682 39.5682 li
722.682 32.5682 li
715.682 32.5682 li
715.682 39.5682 li
clp
716.182 39.0684 mo
722.182 33.0684 li
716.182 33.0684 mo
722.182 39.0684 li
f
1 lw
0 lc
716.182 39.0684 mo
722.182 33.0684 li
716.182 33.0684 mo
722.182 39.0684 li
@
grestore
gsave
725.521 39.8603 mo
732.521 39.8603 li
732.521 32.8603 li
725.521 32.8603 li
725.521 39.8603 li
clp
726.02 39.3603 mo
732.02 33.3603 li
726.02 33.3603 mo
732.02 39.3603 li
f
1 lw
0 lc
726.02 39.3603 mo
732.02 33.3603 li
726.02 33.3603 mo
732.02 39.3603 li
@
grestore
gsave
735.359 40.1524 mo
742.359 40.1524 li
742.359 33.1521 li
735.359 33.1521 li
735.359 40.1524 li
clp
735.858 39.6522 mo
741.858 33.6522 li
735.858 33.6522 mo
741.858 39.6522 li
f
1 lw
0 lc
735.858 39.6522 mo
741.858 33.6522 li
735.858 33.6522 mo
741.858 39.6522 li
@
grestore
gsave
745.196 40.3468 mo
752.197 40.3468 li
752.197 33.3469 li
745.196 33.3469 li
745.196 40.3468 li
clp
745.696 39.8469 mo
751.696 33.8469 li
745.696 33.8469 mo
751.696 39.8469 li
f
1 lw
0 lc
745.696 39.8469 mo
751.696 33.8469 li
745.696 33.8469 mo
751.696 39.8469 li
@
grestore
gsave
755.034 41.7093 mo
762.034 41.7093 li
762.034 34.7094 li
755.034 34.7094 li
755.034 41.7093 li
clp
755.534 41.2092 mo
761.534 35.2092 li
755.534 35.2092 mo
761.534 41.2092 li
f
1 lw
0 lc
755.534 41.2092 mo
761.534 35.2092 li
755.534 35.2092 mo
761.534 41.2092 li
@
grestore
gsave
764.872 41.6121 mo
771.872 41.6121 li
771.872 34.6118 li
764.872 34.6118 li
764.872 41.6121 li
clp
765.372 41.1119 mo
771.372 35.1119 li
765.372 35.1119 mo
771.372 41.1119 li
f
1 lw
0 lc
765.372 41.1119 mo
771.372 35.1119 li
765.372 35.1119 mo
771.372 41.1119 li
@
grestore
gsave
774.711 43.6556 mo
781.71 43.6556 li
781.71 36.6557 li
774.711 36.6557 li
774.711 43.6556 li
clp
775.211 43.1555 mo
781.211 37.1555 li
775.211 37.1555 mo
781.211 43.1555 li
f
1 lw
0 lc
775.211 43.1555 mo
781.211 37.1555 li
775.211 37.1555 mo
781.211 43.1555 li
@
grestore
gsave
784.549 44.1422 mo
791.549 44.1422 li
791.549 37.1422 li
784.549 37.1422 li
784.549 44.1422 li
clp
785.049 43.6421 mo
791.049 37.6421 li
785.049 37.6421 mo
791.049 43.6421 li
f
1 lw
0 lc
785.049 43.6421 mo
791.049 37.6421 li
785.049 37.6421 mo
791.049 43.6421 li
@
grestore
gsave
794.387 44.3367 mo
801.387 44.3367 li
801.387 37.3367 li
794.387 37.3367 li
794.387 44.3367 li
clp
794.887 43.8367 mo
800.887 37.8367 li
794.887 37.8367 mo
800.887 43.8367 li
f
1 lw
0 lc
794.887 43.8367 mo
800.887 37.8367 li
794.887 37.8367 mo
800.887 43.8367 li
@
grestore
gsave
804.225 44.5315 mo
811.225 44.5315 li
811.225 37.5312 li
804.225 37.5312 li
804.225 44.5315 li
clp
804.725 44.0314 mo
810.725 38.0314 li
804.725 38.0314 mo
810.725 44.0314 li
f
1 lw
0 lc
804.725 44.0314 mo
810.725 38.0314 li
804.725 38.0314 mo
810.725 44.0314 li
@
grestore
gsave
814.062 44.5315 mo
821.063 44.5315 li
821.063 37.5312 li
814.062 37.5312 li
814.062 44.5315 li
clp
814.563 44.0314 mo
820.563 38.0314 li
814.563 38.0314 mo
820.563 44.0314 li
f
1 lw
0 lc
814.563 44.0314 mo
820.563 38.0314 li
814.563 38.0314 mo
820.563 44.0314 li
@
grestore
gsave
823.901 44.5315 mo
830.9 44.5315 li
830.9 37.5312 li
823.901 37.5312 li
823.901 44.5315 li
clp
824.401 44.0314 mo
830.401 38.0314 li
824.401 38.0314 mo
830.401 44.0314 li
f
1 lw
0 lc
824.401 44.0314 mo
830.401 38.0314 li
824.401 38.0314 mo
830.401 44.0314 li
@
grestore
gsave
833.739 44.6288 mo
840.739 44.6288 li
840.739 37.6288 li
833.739 37.6288 li
833.739 44.6288 li
clp
834.239 44.1287 mo
840.239 38.1287 li
834.239 38.1287 mo
840.239 44.1287 li
f
1 lw
0 lc
834.239 44.1287 mo
840.239 38.1287 li
834.239 38.1287 mo
840.239 44.1287 li
@
grestore
gsave
843.577 44.6288 mo
850.577 44.6288 li
850.577 37.6288 li
843.577 37.6288 li
843.577 44.6288 li
clp
844.077 44.1287 mo
850.077 38.1287 li
844.077 38.1287 mo
850.077 44.1287 li
f
1 lw
0 lc
844.077 44.1287 mo
850.077 38.1287 li
844.077 38.1287 mo
850.077 44.1287 li
@
grestore
gsave
853.415 44.6288 mo
860.415 44.6288 li
860.415 37.6288 li
853.415 37.6288 li
853.415 44.6288 li
clp
853.915 44.1287 mo
859.915 38.1287 li
853.915 38.1287 mo
859.915 44.1287 li
f
1 lw
0 lc
853.915 44.1287 mo
859.915 38.1287 li
853.915 38.1287 mo
859.915 44.1287 li
@
grestore
gsave
863.253 44.6288 mo
870.253 44.6288 li
870.253 37.6288 li
863.253 37.6288 li
863.253 44.6288 li
clp
863.753 44.1287 mo
869.753 38.1287 li
863.753 38.1287 mo
869.753 44.1287 li
f
1 lw
0 lc
863.753 44.1287 mo
869.753 38.1287 li
863.753 38.1287 mo
869.753 44.1287 li
@
grestore
gsave
873.091 44.6288 mo
880.091 44.6288 li
880.091 37.6288 li
873.091 37.6288 li
873.091 44.6288 li
clp
873.591 44.1287 mo
879.591 38.1287 li
873.591 38.1287 mo
879.591 44.1287 li
f
1 lw
0 lc
873.591 44.1287 mo
879.591 38.1287 li
873.591 38.1287 mo
879.591 44.1287 li
@
grestore
gsave
882.929 44.726 mo
889.929 44.726 li
889.929 37.7261 li
882.929 37.7261 li
882.929 44.726 li
clp
883.429 44.226 mo
889.429 38.226 li
883.429 38.226 mo
889.429 44.226 li
f
1 lw
0 lc
883.429 44.226 mo
889.429 38.226 li
883.429 38.226 mo
889.429 44.226 li
@
grestore
gsave
892.767 44.726 mo
899.767 44.726 li
899.767 37.7261 li
892.767 37.7261 li
892.767 44.726 li
clp
893.267 44.226 mo
899.267 38.226 li
893.267 38.226 mo
899.267 44.226 li
f
1 lw
0 lc
893.267 44.226 mo
899.267 38.226 li
893.267 38.226 mo
899.267 44.226 li
@
grestore
gsave
902.605 44.8233 mo
909.605 44.8233 li
909.605 37.8233 li
902.605 37.8233 li
902.605 44.8233 li
clp
903.105 44.3232 mo
909.105 38.3232 li
903.105 38.3232 mo
909.105 44.3232 li
f
1 lw
0 lc
903.105 44.3232 mo
909.105 38.3232 li
903.105 38.3232 mo
909.105 44.3232 li
@
grestore
gsave
912.443 44.9205 mo
919.443 44.9205 li
919.443 37.9206 li
912.443 37.9206 li
912.443 44.9205 li
clp
912.943 44.4205 mo
918.943 38.4205 li
912.943 38.4205 mo
918.943 44.4205 li
f
1 lw
0 lc
912.943 44.4205 mo
918.943 38.4205 li
912.943 38.4205 mo
918.943 44.4205 li
@
grestore
gsave
922.281 44.9205 mo
929.281 44.9205 li
929.281 37.9206 li
922.281 37.9206 li
922.281 44.9205 li
clp
922.781 44.4205 mo
928.781 38.4205 li
922.781 38.4205 mo
928.781 44.4205 li
f
1 lw
0 lc
922.781 44.4205 mo
928.781 38.4205 li
922.781 38.4205 mo
928.781 44.4205 li
@
grestore
gsave
932.119 44.9205 mo
939.119 44.9205 li
939.119 37.9206 li
932.119 37.9206 li
932.119 44.9205 li
clp
932.619 44.4205 mo
938.619 38.4205 li
932.619 38.4205 mo
938.619 44.4205 li
f
1 lw
0 lc
932.619 44.4205 mo
938.619 38.4205 li
932.619 38.4205 mo
938.619 44.4205 li
@
grestore
gsave
941.957 45.0177 mo
948.957 45.0177 li
948.957 38.0178 li
941.957 38.0178 li
941.957 45.0177 li
clp
942.457 44.5178 mo
948.457 38.5178 li
942.457 38.5178 mo
948.457 44.5178 li
f
1 lw
0 lc
942.457 44.5178 mo
948.457 38.5178 li
942.457 38.5178 mo
948.457 44.5178 li
@
grestore
gsave
951.795 45.115 mo
958.795 45.115 li
958.795 38.115 li
951.795 38.115 li
951.795 45.115 li
clp
952.295 44.6151 mo
958.295 38.6151 li
952.295 38.6151 mo
958.295 44.6151 li
f
1 lw
0 lc
952.295 44.6151 mo
958.295 38.6151 li
952.295 38.6151 mo
958.295 44.6151 li
@
grestore
gsave
961.633 45.2122 mo
968.633 45.2122 li
968.633 38.2123 li
961.633 38.2123 li
961.633 45.2122 li
clp
962.133 44.7124 mo
968.133 38.7124 li
962.133 38.7124 mo
968.133 44.7124 li
f
1 lw
0 lc
962.133 44.7124 mo
968.133 38.7124 li
962.133 38.7124 mo
968.133 44.7124 li
@
grestore
gsave
971.471 45.2122 mo
978.471 45.2122 li
978.471 38.2123 li
971.471 38.2123 li
971.471 45.2122 li
clp
971.971 44.7124 mo
977.971 38.7124 li
971.971 38.7124 mo
977.971 44.7124 li
f
1 lw
0 lc
971.971 44.7124 mo
977.971 38.7124 li
971.971 38.7124 mo
977.971 44.7124 li
@
grestore
gsave
981.309 45.3098 mo
988.309 45.3098 li
988.309 38.3095 li
981.309 38.3095 li
981.309 45.3098 li
clp
981.809 44.8097 mo
987.809 38.8097 li
981.809 38.8097 mo
987.809 44.8097 li
f
1 lw
0 lc
981.809 44.8097 mo
987.809 38.8097 li
981.809 38.8097 mo
987.809 44.8097 li
@
grestore
gsave
991.147 45.2122 mo
998.147 45.2122 li
998.147 38.2123 li
991.147 38.2123 li
991.147 45.2122 li
clp
991.647 44.7124 mo
997.647 38.7124 li
991.647 38.7124 mo
997.647 44.7124 li
f
1 lw
0 lc
991.647 44.7124 mo
997.647 38.7124 li
991.647 38.7124 mo
997.647 44.7124 li
@
grestore
gsave
1000.98 45.2122 mo
1007.98 45.2122 li
1007.98 38.2123 li
1000.98 38.2123 li
1000.98 45.2122 li
clp
1001.48 44.7124 mo
1007.48 38.7124 li
1001.48 38.7124 mo
1007.48 44.7124 li
f
1 lw
0 lc
1001.48 44.7124 mo
1007.48 38.7124 li
1001.48 38.7124 mo
1007.48 44.7124 li
@
grestore
gsave
1010.82 45.3098 mo
1017.82 45.3098 li
1017.82 38.3095 li
1010.82 38.3095 li
1010.82 45.3098 li
clp
1011.32 44.8097 mo
1017.32 38.8097 li
1011.32 38.8097 mo
1017.32 44.8097 li
f
1 lw
0 lc
1011.32 44.8097 mo
1017.32 38.8097 li
1011.32 38.8097 mo
1017.32 44.8097 li
@
grestore
gsave
1020.66 45.3098 mo
1027.66 45.3098 li
1027.66 38.3095 li
1020.66 38.3095 li
1020.66 45.3098 li
clp
1021.16 44.8097 mo
1027.16 38.8097 li
1021.16 38.8097 mo
1027.16 44.8097 li
f
1 lw
0 lc
1021.16 44.8097 mo
1027.16 38.8097 li
1021.16 38.8097 mo
1027.16 44.8097 li
@
grestore
gsave
1030.5 45.3098 mo
1037.5 45.3098 li
1037.5 38.3095 li
1030.5 38.3095 li
1030.5 45.3098 li
clp
1031 44.8097 mo
1037 38.8097 li
1031 38.8097 mo
1037 44.8097 li
f
1 lw
0 lc
1031 44.8097 mo
1037 38.8097 li
1031 38.8097 mo
1037 44.8097 li
@
grestore
gsave
1040.34 45.3098 mo
1047.34 45.3098 li
1047.34 38.3095 li
1040.34 38.3095 li
1040.34 45.3098 li
clp
1040.84 44.8097 mo
1046.84 38.8097 li
1040.84 38.8097 mo
1046.84 44.8097 li
f
1 lw
0 lc
1040.84 44.8097 mo
1046.84 38.8097 li
1040.84 38.8097 mo
1046.84 44.8097 li
@
grestore
gsave
1050.17 45.3098 mo
1057.17 45.3098 li
1057.17 38.3095 li
1050.17 38.3095 li
1050.17 45.3098 li
clp
1050.67 44.8097 mo
1056.67 38.8097 li
1050.67 38.8097 mo
1056.67 44.8097 li
f
1 lw
0 lc
1050.67 44.8097 mo
1056.67 38.8097 li
1050.67 38.8097 mo
1056.67 44.8097 li
@
grestore
gsave
1060.01 45.3098 mo
1067.01 45.3098 li
1067.01 38.3095 li
1060.01 38.3095 li
1060.01 45.3098 li
clp
1060.51 44.8097 mo
1066.51 38.8097 li
1060.51 38.8097 mo
1066.51 44.8097 li
f
1 lw
0 lc
1060.51 44.8097 mo
1066.51 38.8097 li
1060.51 38.8097 mo
1066.51 44.8097 li
@
grestore
gsave
1069.85 45.3098 mo
1076.85 45.3098 li
1076.85 38.3095 li
1069.85 38.3095 li
1069.85 45.3098 li
clp
1070.35 44.8097 mo
1076.35 38.8097 li
1070.35 38.8097 mo
1076.35 44.8097 li
f
1 lw
0 lc
1070.35 44.8097 mo
1076.35 38.8097 li
1070.35 38.8097 mo
1076.35 44.8097 li
@
grestore
gsave
1079.69 45.3098 mo
1086.69 45.3098 li
1086.69 38.3095 li
1079.69 38.3095 li
1079.69 45.3098 li
clp
1080.19 44.8097 mo
1086.19 38.8097 li
1080.19 38.8097 mo
1086.19 44.8097 li
f
1 lw
0 lc
1080.19 44.8097 mo
1086.19 38.8097 li
1080.19 38.8097 mo
1086.19 44.8097 li
@
grestore
gsave
1089.53 45.3098 mo
1096.53 45.3098 li
1096.53 38.3095 li
1089.53 38.3095 li
1089.53 45.3098 li
clp
1090.03 44.8097 mo
1096.03 38.8097 li
1090.03 38.8097 mo
1096.03 44.8097 li
f
1 lw
0 lc
1090.03 44.8097 mo
1096.03 38.8097 li
1090.03 38.8097 mo
1096.03 44.8097 li
@
grestore
119.064 520.844 mo
128.902 414.514 li
138.74 392.781 li
148.578 342.309 li
158.416 324.339 li
168.254 312.986 li
178.092 308.185 li
187.93 280.938 li
197.768 273.542 li
207.606 244.478 li
217.444 238.639 li
227.282 230.854 li
237.12 215.933 li
246.958 201.92 li
256.796 194.914 li
266.634 180.642 li
276.472 163.45 li
286.31 148.464 li
296.148 136.462 li
305.986 127.38 li
315.824 117.259 li
325.662 103.052 li
335.5 95.3315 li
345.338 89.0386 li
355.176 83.5243 li
365.014 78.8533 li
374.852 70.8737 li
384.69 65.4243 li
394.528 61.6616 li
404.366 59.7802 li
414.204 58.1583 li
424.042 55.7579 li
433.88 53.4225 li
443.718 50.4382 li
453.556 46.0267 li
463.394 44.859 li
473.232 44.7292 li
483.07 42.783 li
492.908 41.9396 li
502.746 42.1343 li
512.584 42.3289 li
522.422 42.3289 li
532.26 41.8748 li
542.098 42.8479 li
551.936 41.226 li
561.774 42.1343 li
571.612 41.5504 li
581.45 40.707 li
591.288 40.4476 li
601.126 39.4095 li
610.964 38.3067 li
620.802 38.4364 li
630.64 37.9823 li
640.479 38.7608 li
650.317 38.0472 li
660.155 39.0852 li
669.993 37.7877 li
679.831 37.7877 li
689.669 38.3716 li
699.507 38.0472 li
709.345 37.3984 li
719.183 37.9174 li
729.021 36.8146 li
738.859 38.1121 li
748.697 35.4522 li
758.535 35.3224 li
768.373 35.3224 li
778.211 33.506 li
788.049 33.3113 li
797.887 33.3113 li
807.725 33.1816 li
817.563 33.1167 li
827.401 32.9869 li
837.239 32.9869 li
847.077 32.9221 li
856.915 32.6626 li
866.753 32.468 li
876.591 32.468 li
886.429 32.468 li
896.267 32.468 li
906.105 32.5977 li
915.943 32.5977 li
925.781 32.7924 li
935.619 32.7924 li
945.457 32.7275 li
955.295 32.8572 li
965.133 32.8572 li
974.971 32.8572 li
984.809 33.1167 li
994.647 33.0518 li
1004.49 33.0518 li
1014.32 32.9869 li
1024.16 32.9869 li
1034 32.9221 li
1043.84 32.9221 li
1053.68 32.9221 li
1063.51 32.7924 li
1073.35 32.5977 li
1083.19 32.5977 li
1093.03 32.5328 li
1 /0 /CSD get_res sepcs
1 sep
@
119.064 520.001 mo
128.902 393.301 li
138.74 369.459 li
148.578 315.256 li
158.416 298.519 li
168.254 282.073 li
178.092 278.764 li
187.93 255.604 li
197.768 243.732 li
207.606 221.545 li
217.444 218.528 li
227.282 214.928 li
237.12 203.153 li
246.958 190.989 li
256.796 184.956 li
266.634 171.819 li
276.472 155.762 li
286.31 139.511 li
296.148 127.25 li
305.986 118.686 li
315.824 109.831 li
325.662 95.9153 li
335.5 87.6438 li
345.338 82.9728 li
355.176 77.718 li
365.014 74.3121 li
374.852 69.1545 li
384.69 62.0508 li
394.528 58.3529 li
404.366 56.2121 li
414.204 54.3632 li
424.042 53.2927 li
433.88 50.4706 li
443.718 48.5244 li
453.556 45.1185 li
463.394 45.4105 li
473.232 45.0212 li
483.07 43.8535 li
492.908 44.1454 li
502.746 43.5615 li
512.584 43.9507 li
522.422 44.7292 li
532.26 43.7562 li
542.098 45.9943 li
551.936 44.2427 li
561.774 44.2427 li
571.612 44.1454 li
581.45 42.1992 li
591.288 41.8099 li
601.126 40.4476 li
610.964 39.0852 li
620.802 40.1556 li
630.64 39.1825 li
640.479 40.5449 li
650.317 40.0583 li
660.155 41.0314 li
669.993 38.8906 li
679.831 39.3771 li
689.669 39.8636 li
699.507 39.6691 li
709.345 38.5013 li
719.183 38.404 li
729.021 38.3067 li
738.859 40.5449 li
748.697 37.0416 li
758.535 37.4308 li
768.373 36.6524 li
778.211 37.9174 li
788.049 38.0148 li
797.887 38.2094 li
807.725 37.9174 li
817.563 37.8201 li
827.401 38.3067 li
837.239 38.0148 li
847.077 38.3067 li
856.915 38.404 li
866.753 38.404 li
876.591 38.5013 li
886.429 38.8906 li
896.267 38.8906 li
906.105 38.8906 li
915.943 38.7932 li
925.781 38.8906 li
935.619 38.8906 li
945.457 39.0852 li
955.295 38.9879 li
965.133 38.8906 li
974.971 38.8906 li
984.809 38.7932 li
994.647 38.9879 li
1004.49 39.0852 li
1014.32 38.9879 li
1024.16 39.0852 li
1034 39.0852 li
1043.84 39.0852 li
1053.68 38.7932 li
1063.51 38.5986 li
1073.35 38.5986 li
1083.19 38.5986 li
1093.03 38.5986 li
@
gsave
115.564 523.501 mo
122.563 523.501 li
122.563 516.501 li
115.564 516.501 li
115.564 523.501 li
clp
116.064 523.001 mo
122.064 517.001 li
116.064 517.001 mo
122.064 523.001 li
f
1 lw
0 lc
116.064 523.001 mo
122.064 517.001 li
116.064 517.001 mo
122.064 523.001 li
@
grestore
gsave
125.402 396.8 mo
132.402 396.8 li
132.402 389.8 li
125.402 389.8 li
125.402 396.8 li
clp
125.902 396.301 mo
131.902 390.301 li
125.902 390.301 mo
131.902 396.301 li
f
1 lw
0 lc
125.902 396.301 mo
131.902 390.301 li
125.902 390.301 mo
131.902 396.301 li
@
grestore
gsave
135.24 372.959 mo
142.24 372.959 li
142.24 365.959 li
135.24 365.959 li
135.24 372.959 li
clp
135.74 372.459 mo
141.74 366.459 li
135.74 366.459 mo
141.74 372.459 li
f
1 lw
0 lc
135.74 372.459 mo
141.74 366.459 li
135.74 366.459 mo
141.74 372.459 li
@
grestore
gsave
145.078 318.756 mo
152.078 318.756 li
152.078 311.756 li
145.078 311.756 li
145.078 318.756 li
clp
145.578 318.256 mo
151.578 312.256 li
145.578 312.256 mo
151.578 318.256 li
f
1 lw
0 lc
145.578 318.256 mo
151.578 312.256 li
145.578 312.256 mo
151.578 318.256 li
@
grestore
gsave
154.916 302.019 mo
161.916 302.019 li
161.916 295.019 li
154.916 295.019 li
154.916 302.019 li
clp
155.416 301.519 mo
161.416 295.519 li
155.416 295.519 mo
161.416 301.519 li
f
1 lw
0 lc
155.416 301.519 mo
161.416 295.519 li
155.416 295.519 mo
161.416 301.519 li
@
grestore
gsave
164.754 285.573 mo
171.754 285.573 li
171.754 278.573 li
164.754 278.573 li
164.754 285.573 li
clp
165.254 285.073 mo
171.254 279.073 li
165.254 279.073 mo
171.254 285.073 li
f
1 lw
0 lc
165.254 285.073 mo
171.254 279.073 li
165.254 279.073 mo
171.254 285.073 li
@
grestore
gsave
174.592 282.264 mo
181.592 282.264 li
181.592 275.264 li
174.592 275.264 li
174.592 282.264 li
clp
175.092 281.764 mo
181.092 275.764 li
175.092 275.764 mo
181.092 281.764 li
f
1 lw
0 lc
175.092 281.764 mo
181.092 275.764 li
175.092 275.764 mo
181.092 281.764 li
@
grestore
gsave
184.43 259.104 mo
191.43 259.104 li
191.43 252.104 li
184.43 252.104 li
184.43 259.104 li
clp
184.93 258.604 mo
190.93 252.604 li
184.93 252.604 mo
190.93 258.604 li
f
1 lw
0 lc
184.93 258.604 mo
190.93 252.604 li
184.93 252.604 mo
190.93 258.604 li
@
grestore
gsave
194.268 247.232 mo
201.268 247.232 li
201.268 240.232 li
194.268 240.232 li
194.268 247.232 li
clp
194.768 246.732 mo
200.768 240.732 li
194.768 240.732 mo
200.768 246.732 li
f
1 lw
0 lc
194.768 246.732 mo
200.768 240.732 li
194.768 240.732 mo
200.768 246.732 li
@
grestore
gsave
204.106 225.045 mo
211.106 225.045 li
211.106 218.045 li
204.106 218.045 li
204.106 225.045 li
clp
204.606 224.545 mo
210.606 218.545 li
204.606 218.545 mo
210.606 224.545 li
f
1 lw
0 lc
204.606 224.545 mo
210.606 218.545 li
204.606 218.545 mo
210.606 224.545 li
@
grestore
gsave
213.944 222.028 mo
220.944 222.028 li
220.944 215.029 li
213.944 215.029 li
213.944 222.028 li
clp
214.444 221.528 mo
220.444 215.528 li
214.444 215.528 mo
220.444 221.528 li
f
1 lw
0 lc
214.444 221.528 mo
220.444 215.528 li
214.444 215.528 mo
220.444 221.528 li
@
grestore
gsave
223.782 218.428 mo
230.782 218.428 li
230.782 211.428 li
223.782 211.428 li
223.782 218.428 li
clp
224.282 217.928 mo
230.282 211.928 li
224.282 211.928 mo
230.282 217.928 li
f
1 lw
0 lc
224.282 217.928 mo
230.282 211.928 li
224.282 211.928 mo
230.282 217.928 li
@
grestore
gsave
233.62 206.653 mo
240.62 206.653 li
240.62 199.653 li
233.62 199.653 li
233.62 206.653 li
clp
234.12 206.153 mo
240.12 200.153 li
234.12 200.153 mo
240.12 206.153 li
f
1 lw
0 lc
234.12 206.153 mo
240.12 200.153 li
234.12 200.153 mo
240.12 206.153 li
@
grestore
gsave
243.458 194.489 mo
250.458 194.489 li
250.458 187.489 li
243.458 187.489 li
243.458 194.489 li
clp
243.958 193.989 mo
249.958 187.989 li
243.958 187.989 mo
249.958 193.989 li
f
1 lw
0 lc
243.958 193.989 mo
249.958 187.989 li
243.958 187.989 mo
249.958 193.989 li
@
grestore
gsave
253.296 188.456 mo
260.296 188.456 li
260.296 181.456 li
253.296 181.456 li
253.296 188.456 li
clp
253.796 187.956 mo
259.796 181.956 li
253.796 181.956 mo
259.796 187.956 li
f
1 lw
0 lc
253.796 187.956 mo
259.796 181.956 li
253.796 181.956 mo
259.796 187.956 li
@
grestore
gsave
263.134 175.319 mo
270.134 175.319 li
270.134 168.318 li
263.134 168.318 li
263.134 175.319 li
clp
263.634 174.819 mo
269.634 168.819 li
263.634 168.819 mo
269.634 174.819 li
f
1 lw
0 lc
263.634 174.819 mo
269.634 168.819 li
263.634 168.819 mo
269.634 174.819 li
@
grestore
gsave
272.972 159.262 mo
279.972 159.262 li
279.972 152.262 li
272.972 152.262 li
272.972 159.262 li
clp
273.472 158.762 mo
279.472 152.762 li
273.472 152.762 mo
279.472 158.762 li
f
1 lw
0 lc
273.472 158.762 mo
279.472 152.762 li
273.472 152.762 mo
279.472 158.762 li
@
grestore
gsave
282.81 143.011 mo
289.81 143.011 li
289.81 136.011 li
282.81 136.011 li
282.81 143.011 li
clp
283.31 142.511 mo
289.31 136.511 li
283.31 136.511 mo
289.31 142.511 li
f
1 lw
0 lc
283.31 142.511 mo
289.31 136.511 li
283.31 136.511 mo
289.31 142.511 li
@
grestore
gsave
292.648 130.75 mo
299.648 130.75 li
299.648 123.75 li
292.648 123.75 li
292.648 130.75 li
clp
293.148 130.25 mo
299.148 124.25 li
293.148 124.25 mo
299.148 130.25 li
f
1 lw
0 lc
293.148 130.25 mo
299.148 124.25 li
293.148 124.25 mo
299.148 130.25 li
@
grestore
gsave
302.486 122.186 mo
309.486 122.186 li
309.486 115.186 li
302.486 115.186 li
302.486 122.186 li
clp
302.986 121.686 mo
308.986 115.686 li
302.986 115.686 mo
308.986 121.686 li
f
1 lw
0 lc
302.986 121.686 mo
308.986 115.686 li
302.986 115.686 mo
308.986 121.686 li
@
grestore
gsave
312.324 113.331 mo
319.324 113.331 li
319.324 106.331 li
312.324 106.331 li
312.324 113.331 li
clp
312.824 112.831 mo
318.824 106.831 li
312.824 106.831 mo
318.824 112.831 li
f
1 lw
0 lc
312.824 112.831 mo
318.824 106.831 li
312.824 106.831 mo
318.824 112.831 li
@
grestore
gsave
322.162 99.4154 mo
329.162 99.4154 li
329.162 92.4154 li
322.162 92.4154 li
322.162 99.4154 li
clp
322.662 98.9153 mo
328.662 92.9153 li
322.662 92.9153 mo
328.662 98.9153 li
f
1 lw
0 lc
322.662 98.9153 mo
328.662 92.9153 li
322.662 92.9153 mo
328.662 98.9153 li
@
grestore
gsave
332 91.144 mo
339 91.144 li
339 84.144 li
332 84.144 li
332 91.144 li
clp
332.5 90.6439 mo
338.5 84.6439 li
332.5 84.6439 mo
338.5 90.6439 li
f
1 lw
0 lc
332.5 90.6439 mo
338.5 84.6439 li
332.5 84.6439 mo
338.5 90.6439 li
@
grestore
gsave
341.838 86.4731 mo
348.838 86.4731 li
348.838 79.4728 li
341.838 79.4728 li
341.838 86.4731 li
clp
342.338 85.9729 mo
348.338 79.9729 li
342.338 79.9729 mo
348.338 85.9729 li
f
1 lw
0 lc
342.338 85.9729 mo
348.338 79.9729 li
342.338 79.9729 mo
348.338 85.9729 li
@
grestore
gsave
351.676 81.218 mo
358.676 81.218 li
358.676 74.218 li
351.676 74.218 li
351.676 81.218 li
clp
352.176 80.7181 mo
358.176 74.7181 li
352.176 74.7181 mo
358.176 80.7181 li
f
1 lw
0 lc
352.176 80.7181 mo
358.176 74.7181 li
352.176 74.7181 mo
358.176 80.7181 li
@
grestore
gsave
361.514 77.812 mo
368.514 77.812 li
368.514 70.812 li
361.514 70.812 li
361.514 77.812 li
clp
362.014 77.3121 mo
368.014 71.3121 li
362.014 71.3121 mo
368.014 77.3121 li
f
1 lw
0 lc
362.014 77.3121 mo
368.014 71.3121 li
362.014 71.3121 mo
368.014 77.3121 li
@
grestore
gsave
371.352 72.6545 mo
378.352 72.6545 li
378.352 65.6546 li
371.352 65.6546 li
371.352 72.6545 li
clp
371.852 72.1546 mo
377.852 66.1546 li
371.852 66.1546 mo
377.852 72.1546 li
f
1 lw
0 lc
371.852 72.1546 mo
377.852 66.1546 li
371.852 66.1546 mo
377.852 72.1546 li
@
grestore
gsave
381.19 65.5507 mo
388.19 65.5507 li
388.19 58.5508 li
381.19 58.5508 li
381.19 65.5507 li
clp
381.69 65.0508 mo
387.69 59.0508 li
381.69 59.0508 mo
387.69 65.0508 li
f
1 lw
0 lc
381.69 65.0508 mo
387.69 59.0508 li
381.69 59.0508 mo
387.69 65.0508 li
@
grestore
gsave
391.028 61.853 mo
398.028 61.853 li
398.028 54.853 li
391.028 54.853 li
391.028 61.853 li
clp
391.528 61.353 mo
397.528 55.353 li
391.528 55.353 mo
397.528 61.353 li
f
1 lw
0 lc
391.528 61.353 mo
397.528 55.353 li
391.528 55.353 mo
397.528 61.353 li
@
grestore
gsave
400.866 59.7122 mo
407.866 59.7122 li
407.866 52.7123 li
400.866 52.7123 li
400.866 59.7122 li
clp
401.366 59.2121 mo
407.366 53.2121 li
401.366 53.2121 mo
407.366 59.2121 li
f
1 lw
0 lc
401.366 59.2121 mo
407.366 53.2121 li
401.366 53.2121 mo
407.366 59.2121 li
@
grestore
gsave
410.704 57.8632 mo
417.704 57.8632 li
417.704 50.8632 li
410.704 50.8632 li
410.704 57.8632 li
clp
411.204 57.3632 mo
417.204 51.3632 li
411.204 51.3632 mo
417.204 57.3632 li
f
1 lw
0 lc
411.204 57.3632 mo
417.204 51.3632 li
411.204 51.3632 mo
417.204 57.3632 li
@
grestore
gsave
420.542 56.7928 mo
427.542 56.7928 li
427.542 49.7928 li
420.542 49.7928 li
420.542 56.7928 li
clp
421.042 56.2927 mo
427.042 50.2927 li
421.042 50.2927 mo
427.042 56.2927 li
f
1 lw
0 lc
421.042 56.2927 mo
427.042 50.2927 li
421.042 50.2927 mo
427.042 56.2927 li
@
grestore
gsave
430.38 53.9706 mo
437.38 53.9706 li
437.38 46.9706 li
430.38 46.9706 li
430.38 53.9706 li
clp
430.88 53.4707 mo
436.88 47.4707 li
430.88 47.4707 mo
436.88 53.4707 li
f
1 lw
0 lc
430.88 53.4707 mo
436.88 47.4707 li
430.88 47.4707 mo
436.88 53.4707 li
@
grestore
gsave
440.218 52.0246 mo
447.218 52.0246 li
447.218 45.0243 li
440.218 45.0243 li
440.218 52.0246 li
clp
440.718 51.5245 mo
446.718 45.5245 li
440.718 45.5245 mo
446.718 51.5245 li
f
1 lw
0 lc
440.718 51.5245 mo
446.718 45.5245 li
440.718 45.5245 mo
446.718 51.5245 li
@
grestore
gsave
450.056 48.6186 mo
457.056 48.6186 li
457.056 41.6187 li
450.056 41.6187 li
450.056 48.6186 li
clp
450.556 48.1185 mo
456.556 42.1185 li
450.556 42.1185 mo
456.556 48.1185 li
f
1 lw
0 lc
450.556 48.1185 mo
456.556 42.1185 li
450.556 42.1185 mo
456.556 48.1185 li
@
grestore
gsave
459.894 48.9103 mo
466.894 48.9103 li
466.894 41.9104 li
459.894 41.9104 li
459.894 48.9103 li
clp
460.394 48.4105 mo
466.394 42.4105 li
460.394 42.4105 mo
466.394 48.4105 li
f
1 lw
0 lc
460.394 48.4105 mo
466.394 42.4105 li
460.394 42.4105 mo
466.394 48.4105 li
@
grestore
gsave
469.732 48.5214 mo
476.732 48.5214 li
476.732 41.5214 li
469.732 41.5214 li
469.732 48.5214 li
clp
470.232 48.0212 mo
476.232 42.0212 li
470.232 42.0212 mo
476.232 48.0212 li
f
1 lw
0 lc
470.232 48.0212 mo
476.232 42.0212 li
470.232 42.0212 mo
476.232 48.0212 li
@
grestore
gsave
479.57 47.3534 mo
486.57 47.3534 li
486.57 40.3534 li
479.57 40.3534 li
479.57 47.3534 li
clp
480.07 46.8535 mo
486.07 40.8535 li
480.07 40.8535 mo
486.07 46.8535 li
f
1 lw
0 lc
480.07 46.8535 mo
486.07 40.8535 li
480.07 40.8535 mo
486.07 46.8535 li
@
grestore
gsave
489.408 47.6455 mo
496.408 47.6455 li
496.408 40.6455 li
489.408 40.6455 li
489.408 47.6455 li
clp
489.908 47.1454 mo
495.908 41.1454 li
489.908 41.1454 mo
495.908 47.1454 li
f
1 lw
0 lc
489.908 47.1454 mo
495.908 41.1454 li
489.908 41.1454 mo
495.908 47.1454 li
@
grestore
gsave
499.246 47.0616 mo
506.246 47.0616 li
506.246 40.0617 li
499.246 40.0617 li
499.246 47.0616 li
clp
499.746 46.5616 mo
505.746 40.5616 li
499.746 40.5616 mo
505.746 46.5616 li
f
1 lw
0 lc
499.746 46.5616 mo
505.746 40.5616 li
499.746 40.5616 mo
505.746 46.5616 li
@
grestore
gsave
509.084 47.451 mo
516.084 47.451 li
516.084 40.4507 li
509.084 40.4507 li
509.084 47.451 li
clp
509.584 46.9508 mo
515.584 40.9508 li
509.584 40.9508 mo
515.584 46.9508 li
f
1 lw
0 lc
509.584 46.9508 mo
515.584 40.9508 li
509.584 40.9508 mo
515.584 46.9508 li
@
grestore
gsave
518.922 48.2293 mo
525.922 48.2293 li
525.922 41.2293 li
518.922 41.2293 li
518.922 48.2293 li
clp
519.422 47.7293 mo
525.422 41.7293 li
519.422 41.7293 mo
525.422 47.7293 li
f
1 lw
0 lc
519.422 47.7293 mo
525.422 41.7293 li
519.422 41.7293 mo
525.422 47.7293 li
@
grestore
gsave
528.76 47.2561 mo
535.76 47.2561 li
535.76 40.2562 li
528.76 40.2562 li
528.76 47.2561 li
clp
529.26 46.7562 mo
535.26 40.7562 li
529.26 40.7562 mo
535.26 46.7562 li
f
1 lw
0 lc
529.26 46.7562 mo
535.26 40.7562 li
529.26 40.7562 mo
535.26 46.7562 li
@
grestore
gsave
538.598 49.4942 mo
545.598 49.4942 li
545.598 42.4942 li
538.598 42.4942 li
538.598 49.4942 li
clp
539.098 48.9943 mo
545.098 42.9943 li
539.098 42.9943 mo
545.098 48.9943 li
f
1 lw
0 lc
539.098 48.9943 mo
545.098 42.9943 li
539.098 42.9943 mo
545.098 48.9943 li
@
grestore
gsave
548.436 47.7427 mo
555.436 47.7427 li
555.436 40.7428 li
548.436 40.7428 li
548.436 47.7427 li
clp
548.936 47.2427 mo
554.936 41.2427 li
548.936 41.2427 mo
554.936 47.2427 li
f
1 lw
0 lc
548.936 47.2427 mo
554.936 41.2427 li
548.936 41.2427 mo
554.936 47.2427 li
@
grestore
gsave
558.274 47.7427 mo
565.274 47.7427 li
565.274 40.7428 li
558.274 40.7428 li
558.274 47.7427 li
clp
558.774 47.2427 mo
564.774 41.2427 li
558.774 41.2427 mo
564.774 47.2427 li
f
1 lw
0 lc
558.774 47.2427 mo
564.774 41.2427 li
558.774 41.2427 mo
564.774 47.2427 li
@
grestore
gsave
568.112 47.6455 mo
575.112 47.6455 li
575.112 40.6455 li
568.112 40.6455 li
568.112 47.6455 li
clp
568.612 47.1454 mo
574.612 41.1454 li
568.612 41.1454 mo
574.612 47.1454 li
f
1 lw
0 lc
568.612 47.1454 mo
574.612 41.1454 li
568.612 41.1454 mo
574.612 47.1454 li
@
grestore
gsave
577.95 45.6992 mo
584.95 45.6992 li
584.95 38.6992 li
577.95 38.6992 li
577.95 45.6992 li
clp
578.45 45.1992 mo
584.45 39.1992 li
578.45 39.1992 mo
584.45 45.1992 li
f
1 lw
0 lc
578.45 45.1992 mo
584.45 39.1992 li
578.45 39.1992 mo
584.45 45.1992 li
@
grestore
gsave
587.788 45.3098 mo
594.788 45.3098 li
594.788 38.3099 li
587.788 38.3099 li
587.788 45.3098 li
clp
588.288 44.81 mo
594.288 38.81 li
588.288 38.81 mo
594.288 44.81 li
f
1 lw
0 lc
588.288 44.81 mo
594.288 38.81 li
588.288 38.81 mo
594.288 44.81 li
@
grestore
gsave
597.626 43.9477 mo
604.626 43.9477 li
604.626 36.9478 li
597.626 36.9478 li
597.626 43.9477 li
clp
598.126 43.4476 mo
604.126 37.4476 li
598.126 37.4476 mo
604.126 43.4476 li
f
1 lw
0 lc
598.126 43.4476 mo
604.126 37.4476 li
598.126 37.4476 mo
604.126 43.4476 li
@
grestore
gsave
607.464 42.5852 mo
614.464 42.5852 li
614.464 35.5853 li
607.464 35.5853 li
607.464 42.5852 li
clp
607.964 42.0853 mo
613.964 36.0853 li
607.964 36.0853 mo
613.964 42.0853 li
f
1 lw
0 lc
607.964 42.0853 mo
613.964 36.0853 li
607.964 36.0853 mo
613.964 42.0853 li
@
grestore
gsave
617.302 43.6556 mo
624.302 43.6556 li
624.302 36.6557 li
617.302 36.6557 li
617.302 43.6556 li
clp
617.802 43.1557 mo
623.802 37.1557 li
617.802 37.1557 mo
623.802 43.1557 li
f
1 lw
0 lc
617.802 43.1557 mo
623.802 37.1557 li
617.802 37.1557 mo
623.802 43.1557 li
@
grestore
gsave
627.14 42.6825 mo
634.14 42.6825 li
634.14 35.6825 li
627.14 35.6825 li
627.14 42.6825 li
clp
627.64 42.1826 mo
633.64 36.1826 li
627.64 36.1826 mo
633.64 42.1826 li
f
1 lw
0 lc
627.64 42.1826 mo
633.64 36.1826 li
627.64 36.1826 mo
633.64 42.1826 li
@
grestore
gsave
636.978 44.0449 mo
643.978 44.0449 li
643.978 37.045 li
636.978 37.045 li
636.978 44.0449 li
clp
637.478 43.5449 mo
643.478 37.5449 li
637.478 37.5449 mo
643.478 43.5449 li
f
1 lw
0 lc
637.478 43.5449 mo
643.478 37.5449 li
637.478 37.5449 mo
643.478 43.5449 li
@
grestore
gsave
646.816 43.5584 mo
653.816 43.5584 li
653.816 36.5584 li
646.816 36.5584 li
646.816 43.5584 li
clp
647.316 43.0583 mo
653.316 37.0583 li
647.316 37.0583 mo
653.316 43.0583 li
f
1 lw
0 lc
647.316 43.0583 mo
653.316 37.0583 li
647.316 37.0583 mo
653.316 43.0583 li
@
grestore
gsave
656.654 44.5315 mo
663.654 44.5315 li
663.654 37.5316 li
656.654 37.5316 li
656.654 44.5315 li
clp
657.154 44.0315 mo
663.154 38.0315 li
657.154 38.0315 mo
663.154 44.0315 li
f
1 lw
0 lc
657.154 44.0315 mo
663.154 38.0315 li
657.154 38.0315 mo
663.154 44.0315 li
@
grestore
gsave
666.492 42.3907 mo
673.492 42.3907 li
673.492 35.3908 li
666.492 35.3908 li
666.492 42.3907 li
clp
666.992 41.8906 mo
672.992 35.8906 li
666.992 35.8906 mo
672.992 41.8906 li
f
1 lw
0 lc
666.992 41.8906 mo
672.992 35.8906 li
666.992 35.8906 mo
672.992 41.8906 li
@
grestore
gsave
676.33 42.8773 mo
683.33 42.8773 li
683.33 35.8774 li
676.33 35.8774 li
676.33 42.8773 li
clp
676.83 42.3772 mo
682.83 36.3772 li
676.83 36.3772 mo
682.83 42.3772 li
f
1 lw
0 lc
676.83 42.3772 mo
682.83 36.3772 li
676.83 36.3772 mo
682.83 42.3772 li
@
grestore
gsave
686.168 43.3639 mo
693.168 43.3639 li
693.168 36.3639 li
686.168 36.3639 li
686.168 43.3639 li
clp
686.668 42.8638 mo
692.668 36.8638 li
686.668 36.8638 mo
692.668 42.8638 li
f
1 lw
0 lc
686.668 42.8638 mo
692.668 36.8638 li
686.668 36.8638 mo
692.668 42.8638 li
@
grestore
gsave
696.006 43.169 mo
703.006 43.169 li
703.006 36.1691 li
696.006 36.1691 li
696.006 43.169 li
clp
696.506 42.6691 mo
702.506 36.6691 li
696.506 36.6691 mo
702.506 42.6691 li
f
1 lw
0 lc
696.506 42.6691 mo
702.506 36.6691 li
696.506 36.6691 mo
702.506 42.6691 li
@
grestore
gsave
705.844 42.0014 mo
712.844 42.0014 li
712.844 35.0015 li
705.844 35.0015 li
705.844 42.0014 li
clp
706.344 41.5014 mo
712.344 35.5014 li
706.344 35.5014 mo
712.344 41.5014 li
f
1 lw
0 lc
706.344 41.5014 mo
712.344 35.5014 li
706.344 35.5014 mo
712.344 41.5014 li
@
grestore
gsave
715.682 41.9042 mo
722.682 41.9042 li
722.682 34.9042 li
715.682 34.9042 li
715.682 41.9042 li
clp
716.182 41.4041 mo
722.182 35.4041 li
716.182 35.4041 mo
722.182 41.4041 li
f
1 lw
0 lc
716.182 41.4041 mo
722.182 35.4041 li
716.182 35.4041 mo
722.182 41.4041 li
@
grestore
gsave
725.521 41.8069 mo
732.521 41.8069 li
732.521 34.807 li
725.521 34.807 li
725.521 41.8069 li
clp
726.02 41.3068 mo
732.02 35.3068 li
726.02 35.3068 mo
732.02 41.3068 li
f
1 lw
0 lc
726.02 41.3068 mo
732.02 35.3068 li
726.02 35.3068 mo
732.02 41.3068 li
@
grestore
gsave
735.359 44.0449 mo
742.359 44.0449 li
742.359 37.045 li
735.359 37.045 li
735.359 44.0449 li
clp
735.858 43.545 mo
741.858 37.545 li
735.858 37.545 mo
741.858 43.545 li
f
1 lw
0 lc
735.858 43.545 mo
741.858 37.545 li
735.858 37.545 mo
741.858 43.545 li
@
grestore
gsave
745.196 40.5417 mo
752.197 40.5417 li
752.197 33.5417 li
745.196 33.5417 li
745.196 40.5417 li
clp
745.696 40.0417 mo
751.696 34.0417 li
745.696 34.0417 mo
751.696 40.0417 li
f
1 lw
0 lc
745.696 40.0417 mo
751.696 34.0417 li
745.696 34.0417 mo
751.696 40.0417 li
@
grestore
gsave
755.034 40.931 mo
762.034 40.931 li
762.034 33.9311 li
755.034 33.9311 li
755.034 40.931 li
clp
755.534 40.431 mo
761.534 34.431 li
755.534 34.431 mo
761.534 40.431 li
f
1 lw
0 lc
755.534 40.431 mo
761.534 34.431 li
755.534 34.431 mo
761.534 40.431 li
@
grestore
gsave
764.872 40.1524 mo
771.872 40.1524 li
771.872 33.1524 li
764.872 33.1524 li
764.872 40.1524 li
clp
765.372 39.6525 mo
771.372 33.6525 li
765.372 33.6525 mo
771.372 39.6525 li
f
1 lw
0 lc
765.372 39.6525 mo
771.372 33.6525 li
765.372 33.6525 mo
771.372 39.6525 li
@
grestore
gsave
774.711 41.4176 mo
781.71 41.4176 li
781.71 34.4176 li
774.711 34.4176 li
774.711 41.4176 li
clp
775.211 40.9175 mo
781.211 34.9175 li
775.211 34.9175 mo
781.211 40.9175 li
f
1 lw
0 lc
775.211 40.9175 mo
781.211 34.9175 li
775.211 34.9175 mo
781.211 40.9175 li
@
grestore
gsave
784.549 41.5148 mo
791.549 41.5148 li
791.549 34.5149 li
784.549 34.5149 li
784.549 41.5148 li
clp
785.049 41.0148 mo
791.049 35.0148 li
785.049 35.0148 mo
791.049 41.0148 li
f
1 lw
0 lc
785.049 41.0148 mo
791.049 35.0148 li
785.049 35.0148 mo
791.049 41.0148 li
@
grestore
gsave
794.387 41.7093 mo
801.387 41.7093 li
801.387 34.7094 li
794.387 34.7094 li
794.387 41.7093 li
clp
794.887 41.2095 mo
800.887 35.2095 li
794.887 35.2095 mo
800.887 41.2095 li
f
1 lw
0 lc
794.887 41.2095 mo
800.887 35.2095 li
794.887 35.2095 mo
800.887 41.2095 li
@
grestore
gsave
804.225 41.4176 mo
811.225 41.4176 li
811.225 34.4176 li
804.225 34.4176 li
804.225 41.4176 li
clp
804.725 40.9175 mo
810.725 34.9175 li
804.725 34.9175 mo
810.725 40.9175 li
f
1 lw
0 lc
804.725 40.9175 mo
810.725 34.9175 li
804.725 34.9175 mo
810.725 40.9175 li
@
grestore
gsave
814.062 41.3203 mo
821.063 41.3203 li
821.063 34.3204 li
814.062 34.3204 li
814.062 41.3203 li
clp
814.563 40.8203 mo
820.563 34.8203 li
814.563 34.8203 mo
820.563 40.8203 li
f
1 lw
0 lc
814.563 40.8203 mo
820.563 34.8203 li
814.563 34.8203 mo
820.563 40.8203 li
@
grestore
gsave
823.901 41.8069 mo
830.9 41.8069 li
830.9 34.807 li
823.901 34.807 li
823.901 41.8069 li
clp
824.401 41.3068 mo
830.401 35.3068 li
824.401 35.3068 mo
830.401 41.3068 li
f
1 lw
0 lc
824.401 41.3068 mo
830.401 35.3068 li
824.401 35.3068 mo
830.401 41.3068 li
@
grestore
gsave
833.739 41.5148 mo
840.739 41.5148 li
840.739 34.5149 li
833.739 34.5149 li
833.739 41.5148 li
clp
834.239 41.0149 mo
840.239 35.0149 li
834.239 35.0149 mo
840.239 41.0149 li
f
1 lw
0 lc
834.239 41.0149 mo
840.239 35.0149 li
834.239 35.0149 mo
840.239 41.0149 li
@
grestore
gsave
843.577 41.8069 mo
850.577 41.8069 li
850.577 34.807 li
843.577 34.807 li
843.577 41.8069 li
clp
844.077 41.3068 mo
850.077 35.3068 li
844.077 35.3068 mo
850.077 41.3068 li
f
1 lw
0 lc
844.077 41.3068 mo
850.077 35.3068 li
844.077 35.3068 mo
850.077 41.3068 li
@
grestore
gsave
853.415 41.9042 mo
860.415 41.9042 li
860.415 34.9042 li
853.415 34.9042 li
853.415 41.9042 li
clp
853.915 41.4041 mo
859.915 35.4041 li
853.915 35.4041 mo
859.915 41.4041 li
f
1 lw
0 lc
853.915 41.4041 mo
859.915 35.4041 li
853.915 35.4041 mo
859.915 41.4041 li
@
grestore
gsave
863.253 41.9042 mo
870.253 41.9042 li
870.253 34.9042 li
863.253 34.9042 li
863.253 41.9042 li
clp
863.753 41.4041 mo
869.753 35.4041 li
863.753 35.4041 mo
869.753 41.4041 li
f
1 lw
0 lc
863.753 41.4041 mo
869.753 35.4041 li
863.753 35.4041 mo
869.753 41.4041 li
@
grestore
gsave
873.091 42.0014 mo
880.091 42.0014 li
880.091 35.0015 li
873.091 35.0015 li
873.091 42.0014 li
clp
873.591 41.5014 mo
879.591 35.5014 li
873.591 35.5014 mo
879.591 41.5014 li
f
1 lw
0 lc
873.591 41.5014 mo
879.591 35.5014 li
873.591 35.5014 mo
879.591 41.5014 li
@
grestore
gsave
882.929 42.3907 mo
889.929 42.3907 li
889.929 35.3908 li
882.929 35.3908 li
882.929 42.3907 li
clp
883.429 41.8906 mo
889.429 35.8906 li
883.429 35.8906 mo
889.429 41.8906 li
f
1 lw
0 lc
883.429 41.8906 mo
889.429 35.8906 li
883.429 35.8906 mo
889.429 41.8906 li
@
grestore
gsave
892.767 42.3907 mo
899.767 42.3907 li
899.767 35.3908 li
892.767 35.3908 li
892.767 42.3907 li
clp
893.267 41.8906 mo
899.267 35.8906 li
893.267 35.8906 mo
899.267 41.8906 li
f
1 lw
0 lc
893.267 41.8906 mo
899.267 35.8906 li
893.267 35.8906 mo
899.267 41.8906 li
@
grestore
gsave
902.605 42.3907 mo
909.605 42.3907 li
909.605 35.3908 li
902.605 35.3908 li
902.605 42.3907 li
clp
903.105 41.8906 mo
909.105 35.8906 li
903.105 35.8906 mo
909.105 41.8906 li
f
1 lw
0 lc
903.105 41.8906 mo
909.105 35.8906 li
903.105 35.8906 mo
909.105 41.8906 li
@
grestore
gsave
912.443 42.2935 mo
919.443 42.2935 li
919.443 35.2932 li
912.443 35.2932 li
912.443 42.2935 li
clp
912.943 41.7933 mo
918.943 35.7933 li
912.943 35.7933 mo
918.943 41.7933 li
f
1 lw
0 lc
912.943 41.7933 mo
918.943 35.7933 li
912.943 35.7933 mo
918.943 41.7933 li
@
grestore
gsave
922.281 42.3907 mo
929.281 42.3907 li
929.281 35.3908 li
922.281 35.3908 li
922.281 42.3907 li
clp
922.781 41.8906 mo
928.781 35.8906 li
922.781 35.8906 mo
928.781 41.8906 li
f
1 lw
0 lc
922.781 41.8906 mo
928.781 35.8906 li
922.781 35.8906 mo
928.781 41.8906 li
@
grestore
gsave
932.119 42.3907 mo
939.119 42.3907 li
939.119 35.3908 li
932.119 35.3908 li
932.119 42.3907 li
clp
932.619 41.8906 mo
938.619 35.8906 li
932.619 35.8906 mo
938.619 41.8906 li
f
1 lw
0 lc
932.619 41.8906 mo
938.619 35.8906 li
932.619 35.8906 mo
938.619 41.8906 li
@
grestore
gsave
941.957 42.5852 mo
948.957 42.5852 li
948.957 35.5853 li
941.957 35.5853 li
941.957 42.5852 li
clp
942.457 42.0853 mo
948.457 36.0853 li
942.457 36.0853 mo
948.457 42.0853 li
f
1 lw
0 lc
942.457 42.0853 mo
948.457 36.0853 li
942.457 36.0853 mo
948.457 42.0853 li
@
grestore
gsave
951.795 42.488 mo
958.795 42.488 li
958.795 35.488 li
951.795 35.488 li
951.795 42.488 li
clp
952.295 41.988 mo
958.295 35.988 li
952.295 35.988 mo
958.295 41.988 li
f
1 lw
0 lc
952.295 41.988 mo
958.295 35.988 li
952.295 35.988 mo
958.295 41.988 li
@
grestore
gsave
961.633 42.3907 mo
968.633 42.3907 li
968.633 35.3908 li
961.633 35.3908 li
961.633 42.3907 li
clp
962.133 41.8907 mo
968.133 35.8907 li
962.133 35.8907 mo
968.133 41.8907 li
f
1 lw
0 lc
962.133 41.8907 mo
968.133 35.8907 li
962.133 35.8907 mo
968.133 41.8907 li
@
grestore
gsave
971.471 42.3907 mo
978.471 42.3907 li
978.471 35.3908 li
971.471 35.3908 li
971.471 42.3907 li
clp
971.971 41.8907 mo
977.971 35.8907 li
971.971 35.8907 mo
977.971 41.8907 li
f
1 lw
0 lc
971.971 41.8907 mo
977.971 35.8907 li
971.971 35.8907 mo
977.971 41.8907 li
@
grestore
gsave
981.309 42.2935 mo
988.309 42.2935 li
988.309 35.2935 li
981.309 35.2935 li
981.309 42.2935 li
clp
981.809 41.7934 mo
987.809 35.7934 li
981.809 35.7934 mo
987.809 41.7934 li
f
1 lw
0 lc
981.809 41.7934 mo
987.809 35.7934 li
981.809 35.7934 mo
987.809 41.7934 li
@
grestore
gsave
991.147 42.488 mo
998.147 42.488 li
998.147 35.488 li
991.147 35.488 li
991.147 42.488 li
clp
991.647 41.988 mo
997.647 35.988 li
991.647 35.988 mo
997.647 41.988 li
f
1 lw
0 lc
991.647 41.988 mo
997.647 35.988 li
991.647 35.988 mo
997.647 41.988 li
@
grestore
gsave
1000.98 42.5852 mo
1007.98 42.5852 li
1007.98 35.5853 li
1000.98 35.5853 li
1000.98 42.5852 li
clp
1001.48 42.0853 mo
1007.48 36.0853 li
1001.48 36.0853 mo
1007.48 42.0853 li
f
1 lw
0 lc
1001.48 42.0853 mo
1007.48 36.0853 li
1001.48 36.0853 mo
1007.48 42.0853 li
@
grestore
gsave
1010.82 42.488 mo
1017.82 42.488 li
1017.82 35.488 li
1010.82 35.488 li
1010.82 42.488 li
clp
1011.32 41.988 mo
1017.32 35.988 li
1011.32 35.988 mo
1017.32 41.988 li
f
1 lw
0 lc
1011.32 41.988 mo
1017.32 35.988 li
1011.32 35.988 mo
1017.32 41.988 li
@
grestore
gsave
1020.66 42.5852 mo
1027.66 42.5852 li
1027.66 35.5853 li
1020.66 35.5853 li
1020.66 42.5852 li
clp
1021.16 42.0853 mo
1027.16 36.0853 li
1021.16 36.0853 mo
1027.16 42.0853 li
f
1 lw
0 lc
1021.16 42.0853 mo
1027.16 36.0853 li
1021.16 36.0853 mo
1027.16 42.0853 li
@
grestore
gsave
1030.5 42.5852 mo
1037.5 42.5852 li
1037.5 35.5853 li
1030.5 35.5853 li
1030.5 42.5852 li
clp
1031 42.0853 mo
1037 36.0853 li
1031 36.0853 mo
1037 42.0853 li
f
1 lw
0 lc
1031 42.0853 mo
1037 36.0853 li
1031 36.0853 mo
1037 42.0853 li
@
grestore
gsave
1040.34 42.5852 mo
1047.34 42.5852 li
1047.34 35.5853 li
1040.34 35.5853 li
1040.34 42.5852 li
clp
1040.84 42.0853 mo
1046.84 36.0853 li
1040.84 36.0853 mo
1046.84 42.0853 li
f
1 lw
0 lc
1040.84 42.0853 mo
1046.84 36.0853 li
1040.84 36.0853 mo
1046.84 42.0853 li
@
grestore
gsave
1050.17 42.2935 mo
1057.17 42.2935 li
1057.17 35.2935 li
1050.17 35.2935 li
1050.17 42.2935 li
clp
1050.67 41.7934 mo
1056.67 35.7934 li
1050.67 35.7934 mo
1056.67 41.7934 li
f
1 lw
0 lc
1050.67 41.7934 mo
1056.67 35.7934 li
1050.67 35.7934 mo
1056.67 41.7934 li
@
grestore
gsave
1060.01 42.0987 mo
1067.01 42.0987 li
1067.01 35.0987 li
1060.01 35.0987 li
1060.01 42.0987 li
clp
1060.51 41.5988 mo
1066.51 35.5988 li
1060.51 35.5988 mo
1066.51 41.5988 li
f
1 lw
0 lc
1060.51 41.5988 mo
1066.51 35.5988 li
1060.51 35.5988 mo
1066.51 41.5988 li
@
grestore
gsave
1069.85 42.0987 mo
1076.85 42.0987 li
1076.85 35.0987 li
1069.85 35.0987 li
1069.85 42.0987 li
clp
1070.35 41.5988 mo
1076.35 35.5988 li
1070.35 35.5988 mo
1076.35 41.5988 li
f
1 lw
0 lc
1070.35 41.5988 mo
1076.35 35.5988 li
1070.35 35.5988 mo
1076.35 41.5988 li
@
grestore
gsave
1079.69 42.0987 mo
1086.69 42.0987 li
1086.69 35.0987 li
1079.69 35.0987 li
1079.69 42.0987 li
clp
1080.19 41.5988 mo
1086.19 35.5988 li
1080.19 35.5988 mo
1086.19 41.5988 li
f
1 lw
0 lc
1080.19 41.5988 mo
1086.19 35.5988 li
1080.19 35.5988 mo
1086.19 41.5988 li
@
grestore
gsave
1089.53 42.0987 mo
1096.53 42.0987 li
1096.53 35.0987 li
1089.53 35.0987 li
1089.53 42.0987 li
clp
1090.03 41.5988 mo
1096.03 35.5988 li
1090.03 35.5988 mo
1096.03 41.5988 li
f
1 lw
0 lc
1090.03 41.5988 mo
1096.03 35.5988 li
1090.03 35.5988 mo
1096.03 41.5988 li
@
grestore
.8 lw
0 lj
70.3654 545.263 mo
70.3654 8.04919 li
@
1141.73 545.263 mo
1141.73 8.04919 li
@
70.3654 545.263 mo
1141.73 545.263 li
@
70.3654 8.04919 mo
1141.73 8.04919 li
@
1134.73 539.763 mo
835.788 539.763 li
835.198 539.761 834.85 539.619 834.641 539.409 cv
834.432 539.2 834.29 538.853 834.288 538.263 cv
834.288 441.825 li
834.29 441.235 834.432 440.888 834.641 440.679 cv
834.85 440.469 835.198 440.327 835.788 440.325 cv
1134.73 440.325 li
1135.32 440.327 1135.66 440.469 1135.87 440.679 cv
1136.08 440.888 1136.22 441.235 1136.23 441.825 cv
1136.23 538.263 li
1136.22 538.853 1136.08 539.2 1135.87 539.409 cv
1135.66 539.619 1135.32 539.761 1134.73 539.763 cv
0 0 0 0 cmyk
f
1134.74 540.763 mo
1134.73 540.763 1134.73 540.763 1134.73 540.763 cv
835.788 540.763 li
835.785 540.763 835.781 540.763 835.778 540.763 cv
835.038 540.763 834.39 540.572 833.934 540.116 cv
833.477 539.659 833.286 539.006 833.288 538.263 cv
833.288 441.825 li
833.286 441.082 833.477 440.429 833.934 439.972 cv
834.389 439.517 835.037 439.325 835.776 439.325 cv
835.78 439.325 835.784 439.325 835.788 439.325 cv
1134.73 439.325 li
1134.73 439.325 1134.73 439.325 1134.74 439.325 cv
1135.48 439.325 1136.12 439.517 1136.58 439.972 cv
1137.04 440.429 1137.23 441.082 1137.23 441.825 cv
1137.23 538.263 li
1137.23 539.006 1137.04 539.659 1136.58 540.116 cv
1136.12 540.571 1135.47 540.763 1134.74 540.763 cv
835.788 539.763 mo
1134.73 539.763 li
1135.32 539.761 1135.66 539.619 1135.87 539.409 cv
1136.08 539.2 1136.22 538.853 1136.23 538.263 cv
1136.23 441.825 li
1136.22 441.235 1136.08 440.888 1135.87 440.679 cv
1135.66 440.469 1135.32 440.327 1134.73 440.325 cv
835.788 440.325 li
835.198 440.327 834.85 440.469 834.641 440.679 cv
834.432 440.888 834.29 441.235 834.288 441.825 cv
834.288 538.263 li
834.29 538.853 834.432 539.2 834.641 539.409 cv
834.85 539.619 835.198 539.761 835.788 539.763 cv
835.788 539.763 li
.194827 .146395 .141878 0 cmyk
f
1.5 lw
1 lj
837.788 455.528 mo
857.788 455.528 li
0 .9617 .904814 0 cmyk
@
869.728 446.068 mo
869.728 457.408 li
872.108 457.408 li
874.108 457.408 875.588 456.968 876.528 456.048 cv
877.448 455.128 877.928 453.688 877.928 451.728 cv
877.928 449.768 877.448 448.348 876.528 447.428 cv
875.588 446.528 874.108 446.068 872.108 446.068 cv
869.728 446.068 li
867.748 444.448 mo
871.808 444.448 li
874.628 444.448 876.708 445.048 878.028 446.208 cv
879.348 447.388 880.008 449.228 880.008 451.728 cv
880.008 454.248 879.328 456.088 878.008 457.268 cv
876.688 458.448 874.608 459.028 871.808 459.028 cv
867.748 459.028 li
867.748 444.448 li
1 /0 /CSD get_res sepcs
1 sep
f
885.128 452.068 mo
885.128 457.408 li
888.288 457.408 li
889.348 457.408 890.128 457.188 890.648 456.748 cv
891.148 456.308 891.408 455.648 891.408 454.728 cv
891.408 453.828 891.148 453.168 890.648 452.728 cv
890.128 452.288 889.348 452.068 888.288 452.068 cv
885.128 452.068 li
885.128 446.068 mo
885.128 450.468 li
888.048 450.468 li
889.008 450.468 889.708 450.288 890.188 449.928 cv
890.668 449.568 890.908 449.028 890.908 448.268 cv
890.908 447.548 890.668 446.988 890.188 446.628 cv
889.708 446.268 889.008 446.068 888.048 446.068 cv
885.128 446.068 li
883.148 444.448 mo
888.188 444.448 li
889.688 444.448 890.848 444.768 891.668 445.388 cv
892.468 446.028 892.888 446.908 892.888 448.048 cv
892.888 448.948 892.668 449.668 892.248 450.188 cv
891.828 450.708 891.228 451.048 890.428 451.168 cv
891.388 451.388 892.148 451.828 892.688 452.488 cv
893.208 453.148 893.488 453.968 893.488 454.948 cv
893.488 456.268 893.028 457.268 892.148 457.968 cv
891.268 458.688 890.008 459.028 888.388 459.028 cv
883.148 459.028 li
883.148 444.448 li
f
896.868 444.448 mo
899.528 444.448 li
905.988 456.648 li
905.988 444.448 li
907.908 444.448 li
907.908 459.028 li
905.248 459.028 li
898.788 446.828 li
898.788 459.028 li
896.868 459.028 li
896.868 444.448 li
f
922.428 443.848 mo
921.548 445.368 920.908 446.848 920.488 448.308 cv
920.048 449.768 919.848 451.248 919.848 452.748 cv
919.848 454.268 920.048 455.748 920.488 457.208 cv
920.908 458.688 921.548 460.148 922.428 461.648 cv
920.868 461.648 li
919.888 460.108 919.148 458.628 918.668 457.148 cv
918.188 455.668 917.948 454.208 917.948 452.748 cv
917.948 451.308 918.188 449.848 918.668 448.368 cv
919.148 446.888 919.868 445.388 920.868 443.848 cv
922.428 443.848 li
f
923.988 444.448 mo
936.308 444.448 li
936.308 446.108 li
931.128 446.108 li
931.128 459.028 li
929.148 459.028 li
929.148 446.108 li
923.988 446.108 li
923.988 444.448 li
f
944.468 449.768 mo
944.268 449.648 944.048 449.568 943.808 449.508 cv
943.568 449.468 943.308 449.428 943.028 449.428 cv
942.008 449.428 941.228 449.768 940.688 450.428 cv
940.128 451.088 939.868 452.028 939.868 453.268 cv
939.868 459.028 li
938.068 459.028 li
938.068 448.088 li
939.868 448.088 li
939.868 449.788 li
940.228 449.128 940.728 448.628 941.328 448.308 cv
941.928 447.988 942.668 447.828 943.548 447.828 cv
943.668 447.828 943.808 447.848 943.968 447.848 cv
944.108 447.868 944.268 447.888 944.468 447.928 cv
944.468 449.768 li
f
951.328 453.528 mo
949.868 453.528 948.868 453.708 948.308 454.028 cv
947.748 454.368 947.468 454.928 947.468 455.728 cv
947.468 456.368 947.668 456.888 948.088 457.248 cv
948.508 457.628 949.088 457.808 949.808 457.808 cv
950.808 457.808 951.608 457.468 952.208 456.748 cv
952.808 456.048 953.108 455.108 953.108 453.928 cv
953.108 453.528 li
951.328 453.528 li
954.908 452.788 mo
954.908 459.028 li
953.108 459.028 li
953.108 457.368 li
952.688 458.048 952.168 458.528 951.568 458.828 cv
950.968 459.128 950.208 459.288 949.328 459.288 cv
948.208 459.288 947.308 458.988 946.648 458.368 cv
945.988 457.748 945.668 456.908 945.668 455.848 cv
945.668 454.628 946.068 453.708 946.908 453.068 cv
947.728 452.448 948.948 452.128 950.588 452.128 cv
953.108 452.128 li
953.108 451.948 li
953.108 451.128 952.828 450.488 952.288 450.028 cv
951.748 449.588 950.988 449.348 950.008 449.348 cv
949.368 449.348 948.768 449.428 948.168 449.588 cv
947.568 449.748 947.008 449.968 946.468 450.248 cv
946.468 448.588 li
947.108 448.348 947.748 448.148 948.368 448.028 cv
948.988 447.908 949.588 447.828 950.188 447.828 cv
951.768 447.828 952.948 448.248 953.728 449.068 cv
954.508 449.888 954.908 451.128 954.908 452.788 cv
f
958.608 448.088 mo
960.408 448.088 li
960.408 459.028 li
958.608 459.028 li
958.608 448.088 li
958.608 443.828 mo
960.408 443.828 li
960.408 446.108 li
958.608 446.108 li
958.608 443.828 li
f
973.268 452.428 mo
973.268 459.028 li
971.468 459.028 li
971.468 452.488 li
971.468 451.448 971.248 450.688 970.848 450.168 cv
970.448 449.648 969.848 449.388 969.048 449.388 cv
968.068 449.388 967.308 449.708 966.748 450.328 cv
966.188 450.948 965.908 451.788 965.908 452.848 cv
965.908 459.028 li
964.108 459.028 li
964.108 448.088 li
965.908 448.088 li
965.908 449.788 li
966.328 449.148 966.828 448.648 967.428 448.328 cv
968.008 448.008 968.688 447.828 969.448 447.828 cv
970.688 447.828 971.648 448.228 972.288 449.008 cv
972.928 449.788 973.268 450.928 973.268 452.428 cv
f
976.848 448.088 mo
978.648 448.088 li
978.648 459.028 li
976.848 459.028 li
976.848 448.088 li
976.848 443.828 mo
978.648 443.828 li
978.648 446.108 li
976.848 446.108 li
976.848 443.828 li
f
991.508 452.428 mo
991.508 459.028 li
989.708 459.028 li
989.708 452.488 li
989.708 451.448 989.488 450.688 989.088 450.168 cv
988.688 449.648 988.088 449.388 987.288 449.388 cv
986.308 449.388 985.548 449.708 984.988 450.328 cv
984.428 450.948 984.148 451.788 984.148 452.848 cv
984.148 459.028 li
982.348 459.028 li
982.348 448.088 li
984.148 448.088 li
984.148 449.788 li
984.568 449.148 985.068 448.648 985.668 448.328 cv
986.248 448.008 986.928 447.828 987.688 447.828 cv
988.928 447.828 989.888 448.228 990.528 449.008 cv
991.168 449.788 991.508 450.928 991.508 452.428 cv
f
1002.29 453.428 mo
1002.29 452.148 1002.01 451.128 1001.49 450.408 cv
1000.95 449.688 1000.19 449.328 999.228 449.328 cv
998.268 449.328 997.508 449.688 996.968 450.408 cv
996.428 451.128 996.168 452.148 996.168 453.428 cv
996.168 454.728 996.428 455.728 996.968 456.448 cv
997.508 457.168 998.268 457.528 999.228 457.528 cv
1000.19 457.528 1000.95 457.168 1001.49 456.448 cv
1002.01 455.728 1002.29 454.728 1002.29 453.428 cv
1004.09 457.668 mo
1004.09 459.508 1003.67 460.888 1002.85 461.808 cv
1002.01 462.708 1000.75 463.168 999.048 463.168 cv
998.408 463.168 997.828 463.108 997.268 463.028 cv
996.708 462.928 996.148 462.788 995.628 462.588 cv
995.628 460.848 li
996.148 461.128 996.668 461.328 997.188 461.468 cv
997.708 461.608 998.228 461.688 998.768 461.688 cv
999.928 461.688 1000.81 461.368 1001.41 460.768 cv
1001.99 460.148 1002.29 459.228 1002.29 457.988 cv
1002.29 457.108 li
1001.91 457.748 1001.43 458.228 1000.85 458.548 cv
1000.27 458.868 999.588 459.028 998.788 459.028 cv
997.428 459.028 996.348 458.528 995.528 457.508 cv
994.708 456.488 994.308 455.128 994.308 453.428 cv
994.308 451.748 994.708 450.388 995.528 449.368 cv
996.348 448.348 997.428 447.828 998.788 447.828 cv
999.588 447.828 1000.27 447.988 1000.85 448.308 cv
1001.43 448.628 1001.91 449.108 1002.29 449.748 cv
1002.29 448.088 li
1004.09 448.088 li
1004.09 457.668 li
f
1008.25 456.548 mo
1010.31 456.548 li
1010.31 458.228 li
1008.71 461.328 li
1007.45 461.328 li
1008.25 458.228 li
1008.25 456.548 li
f
1029.33 444.928 mo
1029.33 446.848 li
1028.57 446.488 1027.87 446.228 1027.21 446.048 cv
1026.53 445.888 1025.89 445.788 1025.29 445.788 cv
1024.21 445.788 1023.37 446.008 1022.79 446.408 cv
1022.21 446.828 1021.93 447.428 1021.93 448.188 cv
1021.93 448.828 1022.11 449.328 1022.51 449.648 cv
1022.89 449.988 1023.63 450.248 1024.71 450.448 cv
1025.91 450.688 li
1027.37 450.968 1028.45 451.468 1029.15 452.168 cv
1029.85 452.888 1030.21 453.828 1030.21 455.008 cv
1030.21 456.428 1029.73 457.488 1028.79 458.208 cv
1027.83 458.928 1026.45 459.288 1024.63 459.288 cv
1023.93 459.288 1023.19 459.208 1022.41 459.068 cv
1021.63 458.928 1020.83 458.708 1020.01 458.388 cv
1020.01 456.348 li
1020.81 456.808 1021.59 457.148 1022.35 457.368 cv
1023.11 457.608 1023.87 457.708 1024.63 457.708 cv
1025.75 457.708 1026.61 457.488 1027.23 457.048 cv
1027.83 456.608 1028.15 455.988 1028.15 455.148 cv
1028.15 454.428 1027.93 453.868 1027.49 453.468 cv
1027.05 453.068 1026.33 452.768 1025.33 452.568 cv
1024.13 452.328 li
1022.65 452.048 1021.59 451.588 1020.93 450.948 cv
1020.27 450.328 1019.95 449.468 1019.95 448.348 cv
1019.95 447.068 1020.39 446.048 1021.31 445.308 cv
1022.21 444.568 1023.47 444.188 1025.07 444.188 cv
1025.75 444.188 1026.43 444.248 1027.15 444.368 cv
1027.85 444.488 1028.57 444.688 1029.33 444.928 cv
f
1033.21 448.088 mo
1035.01 448.088 li
1035.01 459.028 li
1033.21 459.028 li
1033.21 448.088 li
1033.21 443.828 mo
1035.01 443.828 li
1035.01 446.108 li
1033.21 446.108 li
1033.21 443.828 li
f
1045.97 453.428 mo
1045.97 452.148 1045.69 451.128 1045.17 450.408 cv
1044.63 449.688 1043.87 449.328 1042.91 449.328 cv
1041.95 449.328 1041.19 449.688 1040.65 450.408 cv
1040.11 451.128 1039.85 452.148 1039.85 453.428 cv
1039.85 454.728 1040.11 455.728 1040.65 456.448 cv
1041.19 457.168 1041.95 457.528 1042.91 457.528 cv
1043.87 457.528 1044.63 457.168 1045.17 456.448 cv
1045.69 455.728 1045.97 454.728 1045.97 453.428 cv
1047.77 457.668 mo
1047.77 459.508 1047.35 460.888 1046.53 461.808 cv
1045.69 462.708 1044.43 463.168 1042.73 463.168 cv
1042.09 463.168 1041.51 463.108 1040.95 463.028 cv
1040.39 462.928 1039.83 462.788 1039.31 462.588 cv
1039.31 460.848 li
1039.83 461.128 1040.35 461.328 1040.87 461.468 cv
1041.39 461.608 1041.91 461.688 1042.45 461.688 cv
1043.61 461.688 1044.49 461.368 1045.09 460.768 cv
1045.67 460.148 1045.97 459.228 1045.97 457.988 cv
1045.97 457.108 li
1045.59 457.748 1045.11 458.228 1044.53 458.548 cv
1043.95 458.868 1043.27 459.028 1042.47 459.028 cv
1041.11 459.028 1040.03 458.528 1039.21 457.508 cv
1038.39 456.488 1037.99 455.128 1037.99 453.428 cv
1037.99 451.748 1038.39 450.388 1039.21 449.368 cv
1040.03 448.348 1041.11 447.828 1042.47 447.828 cv
1043.27 447.828 1043.95 447.988 1044.53 448.308 cv
1045.11 448.628 1045.59 449.108 1045.97 449.748 cv
1045.97 448.088 li
1047.77 448.088 li
1047.77 457.668 li
f
1059.99 450.188 mo
1060.43 449.388 1060.97 448.808 1061.59 448.408 cv
1062.21 448.028 1062.95 447.828 1063.81 447.828 cv
1064.93 447.828 1065.81 448.228 1066.43 449.028 cv
1067.05 449.828 1067.37 450.968 1067.37 452.428 cv
1067.37 459.028 li
1065.57 459.028 li
1065.57 452.488 li
1065.57 451.448 1065.37 450.668 1065.01 450.148 cv
1064.63 449.648 1064.07 449.388 1063.31 449.388 cv
1062.37 449.388 1061.63 449.708 1061.09 450.328 cv
1060.55 450.948 1060.29 451.788 1060.29 452.848 cv
1060.29 459.028 li
1058.49 459.028 li
1058.49 452.488 li
1058.49 451.448 1058.29 450.668 1057.93 450.148 cv
1057.55 449.648 1056.97 449.388 1056.21 449.388 cv
1055.29 449.388 1054.55 449.708 1054.01 450.328 cv
1053.47 450.948 1053.21 451.788 1053.21 452.848 cv
1053.21 459.028 li
1051.41 459.028 li
1051.41 448.088 li
1053.21 448.088 li
1053.21 449.788 li
1053.61 449.128 1054.11 448.628 1054.69 448.308 cv
1055.25 447.988 1055.93 447.828 1056.73 447.828 cv
1057.53 447.828 1058.19 448.028 1058.75 448.428 cv
1059.31 448.828 1059.71 449.428 1059.99 450.188 cv
f
1075.19 449.348 mo
1074.23 449.348 1073.47 449.728 1072.91 450.488 cv
1072.35 451.248 1072.07 452.268 1072.07 453.568 cv
1072.07 454.888 1072.33 455.908 1072.89 456.668 cv
1073.45 457.428 1074.21 457.788 1075.19 457.788 cv
1076.15 457.788 1076.91 457.428 1077.47 456.668 cv
1078.03 455.908 1078.31 454.888 1078.31 453.568 cv
1078.31 452.288 1078.03 451.248 1077.47 450.488 cv
1076.91 449.728 1076.15 449.348 1075.19 449.348 cv
1075.19 447.828 mo
1076.75 447.828 1077.97 448.348 1078.87 449.348 cv
1079.75 450.368 1080.21 451.768 1080.21 453.568 cv
1080.21 455.368 1079.75 456.768 1078.87 457.768 cv
1077.97 458.788 1076.75 459.288 1075.19 459.288 cv
1073.61 459.288 1072.37 458.788 1071.49 457.768 cv
1070.61 456.768 1070.17 455.368 1070.17 453.568 cv
1070.17 451.768 1070.61 450.368 1071.49 449.348 cv
1072.37 448.348 1073.61 447.828 1075.19 447.828 cv
f
1083.19 448.088 mo
1084.99 448.088 li
1084.99 459.028 li
1083.19 459.028 li
1083.19 448.088 li
1083.19 443.828 mo
1084.99 443.828 li
1084.99 446.108 li
1083.19 446.108 li
1083.19 443.828 li
f
1095.95 449.748 mo
1095.95 443.828 li
1097.75 443.828 li
1097.75 459.028 li
1095.95 459.028 li
1095.95 457.388 li
1095.57 458.048 1095.09 458.528 1094.51 458.828 cv
1093.93 459.128 1093.25 459.288 1092.45 459.288 cv
1091.13 459.288 1090.05 458.768 1089.21 457.728 cv
1088.37 456.688 1087.97 455.288 1087.97 453.568 cv
1087.97 451.848 1088.37 450.468 1089.21 449.408 cv
1090.05 448.368 1091.13 447.828 1092.45 447.828 cv
1093.25 447.828 1093.93 447.988 1094.51 448.308 cv
1095.09 448.628 1095.57 449.108 1095.95 449.748 cv
1089.83 453.568 mo
1089.83 454.888 1090.09 455.928 1090.63 456.688 cv
1091.17 457.448 1091.93 457.808 1092.89 457.808 cv
1093.83 457.808 1094.57 457.448 1095.13 456.688 cv
1095.67 455.928 1095.95 454.888 1095.95 453.568 cv
1095.95 452.248 1095.67 451.228 1095.13 450.468 cv
1094.57 449.708 1093.83 449.328 1092.89 449.328 cv
1091.93 449.328 1091.17 449.708 1090.63 450.468 cv
1090.09 451.228 1089.83 452.248 1089.83 453.568 cv
f
1101.17 443.848 mo
1102.73 443.848 li
1103.69 445.388 1104.43 446.888 1104.91 448.368 cv
1105.39 449.848 1105.65 451.308 1105.65 452.748 cv
1105.65 454.208 1105.39 455.668 1104.91 457.148 cv
1104.43 458.628 1103.69 460.108 1102.73 461.648 cv
1101.17 461.648 li
1102.03 460.148 1102.67 458.688 1103.11 457.208 cv
1103.53 455.748 1103.75 454.268 1103.75 452.748 cv
1103.75 451.248 1103.53 449.768 1103.11 448.308 cv
1102.67 446.848 1102.03 445.368 1101.17 443.848 cv
f
837.788 479.888 mo
857.788 479.888 li
0 .9617 .904814 0 cmyk
@
844.788 482.888 mo
850.788 476.888 li
844.788 476.888 mo
850.788 482.888 li
f
1 lw
0 lc
844.788 482.888 mo
850.788 476.888 li
844.788 476.888 mo
850.788 482.888 li
@
869.728 470.428 mo
869.728 481.768 li
872.108 481.768 li
874.108 481.768 875.588 481.328 876.528 480.408 cv
877.448 479.488 877.928 478.048 877.928 476.088 cv
877.928 474.128 877.448 472.708 876.528 471.788 cv
875.588 470.888 874.108 470.428 872.108 470.428 cv
869.728 470.428 li
867.748 468.808 mo
871.808 468.808 li
874.628 468.808 876.708 469.408 878.028 470.568 cv
879.348 471.748 880.008 473.588 880.008 476.088 cv
880.008 478.608 879.328 480.448 878.008 481.628 cv
876.688 482.808 874.608 483.388 871.808 483.388 cv
867.748 483.388 li
867.748 468.808 li
1 /0 /CSD get_res sepcs
1 sep
f
885.128 476.428 mo
885.128 481.768 li
888.288 481.768 li
889.348 481.768 890.128 481.548 890.648 481.108 cv
891.148 480.668 891.408 480.008 891.408 479.088 cv
891.408 478.188 891.148 477.528 890.648 477.088 cv
890.128 476.648 889.348 476.428 888.288 476.428 cv
885.128 476.428 li
885.128 470.428 mo
885.128 474.828 li
888.048 474.828 li
889.008 474.828 889.708 474.648 890.188 474.288 cv
890.668 473.928 890.908 473.388 890.908 472.628 cv
890.908 471.908 890.668 471.348 890.188 470.988 cv
889.708 470.628 889.008 470.428 888.048 470.428 cv
885.128 470.428 li
883.148 468.808 mo
888.188 468.808 li
889.688 468.808 890.848 469.128 891.668 469.748 cv
892.468 470.388 892.888 471.268 892.888 472.408 cv
892.888 473.308 892.668 474.028 892.248 474.548 cv
891.828 475.068 891.228 475.408 890.428 475.528 cv
891.388 475.748 892.148 476.188 892.688 476.848 cv
893.208 477.508 893.488 478.328 893.488 479.308 cv
893.488 480.628 893.028 481.628 892.148 482.328 cv
891.268 483.048 890.008 483.388 888.388 483.388 cv
883.148 483.388 li
883.148 468.808 li
f
896.868 468.808 mo
899.528 468.808 li
905.988 481.008 li
905.988 468.808 li
907.908 468.808 li
907.908 483.388 li
905.248 483.388 li
898.788 471.188 li
898.788 483.388 li
896.868 483.388 li
896.868 468.808 li
f
922.428 468.208 mo
921.548 469.728 920.908 471.208 920.488 472.668 cv
920.048 474.128 919.848 475.608 919.848 477.108 cv
919.848 478.628 920.048 480.108 920.488 481.568 cv
920.908 483.048 921.548 484.508 922.428 486.008 cv
920.868 486.008 li
919.888 484.468 919.148 482.988 918.668 481.508 cv
918.188 480.028 917.948 478.568 917.948 477.108 cv
917.948 475.668 918.188 474.208 918.668 472.728 cv
919.148 471.248 919.868 469.748 920.868 468.208 cv
922.428 468.208 li
f
923.988 468.808 mo
936.308 468.808 li
936.308 470.468 li
931.128 470.468 li
931.128 483.388 li
929.148 483.388 li
929.148 470.468 li
923.988 470.468 li
923.988 468.808 li
f
947.488 477.468 mo
947.488 478.348 li
939.228 478.348 li
939.308 479.588 939.668 480.548 940.348 481.188 cv
941.008 481.828 941.928 482.148 943.128 482.148 cv
943.808 482.148 944.488 482.068 945.128 481.908 cv
945.768 481.748 946.428 481.488 947.068 481.128 cv
947.068 482.828 li
946.428 483.108 945.768 483.328 945.088 483.448 cv
944.408 483.568 943.708 483.648 943.028 483.648 cv
941.268 483.648 939.888 483.148 938.868 482.148 cv
937.848 481.148 937.348 479.768 937.348 478.028 cv
937.348 476.248 937.828 474.828 938.788 473.768 cv
939.748 472.728 941.068 472.188 942.708 472.188 cv
944.188 472.188 945.348 472.668 946.208 473.608 cv
947.048 474.568 947.488 475.848 947.488 477.468 cv
945.688 476.948 mo
945.668 475.968 945.388 475.188 944.868 474.588 cv
944.328 474.008 943.608 473.708 942.728 473.708 cv
941.728 473.708 940.928 474.008 940.328 474.568 cv
939.728 475.128 939.368 475.928 939.288 476.948 cv
945.688 476.948 li
f
957.408 472.768 mo
957.408 474.468 li
956.888 474.228 956.368 474.028 955.828 473.888 cv
955.268 473.768 954.708 473.688 954.128 473.688 cv
953.228 473.688 952.548 473.828 952.108 474.108 cv
951.668 474.388 951.448 474.788 951.448 475.328 cv
951.448 475.748 951.608 476.068 951.928 476.308 cv
952.248 476.548 952.888 476.788 953.848 476.988 cv
954.468 477.128 li
955.748 477.408 956.648 477.808 957.188 478.288 cv
957.708 478.788 957.988 479.488 957.988 480.368 cv
957.988 481.388 957.588 482.188 956.788 482.768 cv
955.988 483.368 954.868 483.648 953.468 483.648 cv
952.868 483.648 952.268 483.588 951.628 483.488 cv
950.988 483.388 950.328 483.228 949.628 482.988 cv
949.628 481.128 li
950.288 481.488 950.948 481.748 951.588 481.908 cv
952.228 482.088 952.868 482.168 953.508 482.168 cv
954.348 482.168 955.008 482.028 955.468 481.748 cv
955.908 481.468 956.148 481.048 956.148 480.508 cv
956.148 480.028 955.968 479.648 955.648 479.388 cv
955.328 479.128 954.608 478.868 953.488 478.628 cv
952.868 478.488 li
951.748 478.248 950.928 477.888 950.448 477.408 cv
949.948 476.928 949.708 476.268 949.708 475.408 cv
949.708 474.388 950.068 473.588 950.788 473.028 cv
951.508 472.468 952.548 472.188 953.908 472.188 cv
954.568 472.188 955.188 472.248 955.788 472.348 cv
956.368 472.448 956.908 472.588 957.408 472.768 cv
f
962.628 469.348 mo
962.628 472.448 li
966.328 472.448 li
966.328 473.848 li
962.628 473.848 li
962.628 479.788 li
962.628 480.688 962.748 481.268 962.988 481.508 cv
963.228 481.768 963.728 481.888 964.488 481.888 cv
966.328 481.888 li
966.328 483.388 li
964.488 483.388 li
963.088 483.388 962.128 483.128 961.608 482.608 cv
961.088 482.088 960.828 481.148 960.828 479.788 cv
960.828 473.848 li
959.508 473.848 li
959.508 472.448 li
960.828 472.448 li
960.828 469.348 li
962.628 469.348 li
f
968.688 472.448 mo
970.488 472.448 li
970.488 483.388 li
968.688 483.388 li
968.688 472.448 li
968.688 468.188 mo
970.488 468.188 li
970.488 470.468 li
968.688 470.468 li
968.688 468.188 li
f
983.348 476.788 mo
983.348 483.388 li
981.548 483.388 li
981.548 476.848 li
981.548 475.808 981.328 475.048 980.928 474.528 cv
980.528 474.008 979.928 473.748 979.128 473.748 cv
978.148 473.748 977.388 474.068 976.828 474.688 cv
976.268 475.308 975.988 476.148 975.988 477.208 cv
975.988 483.388 li
974.188 483.388 li
974.188 472.448 li
975.988 472.448 li
975.988 474.148 li
976.408 473.508 976.908 473.008 977.508 472.688 cv
978.088 472.368 978.768 472.188 979.528 472.188 cv
980.768 472.188 981.728 472.588 982.368 473.368 cv
983.008 474.148 983.348 475.288 983.348 476.788 cv
f
994.128 477.788 mo
994.128 476.508 993.848 475.488 993.328 474.768 cv
992.788 474.048 992.028 473.688 991.068 473.688 cv
990.108 473.688 989.348 474.048 988.808 474.768 cv
988.268 475.488 988.008 476.508 988.008 477.788 cv
988.008 479.088 988.268 480.088 988.808 480.808 cv
989.348 481.528 990.108 481.888 991.068 481.888 cv
992.028 481.888 992.788 481.528 993.328 480.808 cv
993.848 480.088 994.128 479.088 994.128 477.788 cv
995.928 482.028 mo
995.928 483.868 995.508 485.248 994.688 486.168 cv
993.848 487.068 992.588 487.528 990.888 487.528 cv
990.248 487.528 989.668 487.468 989.108 487.388 cv
988.548 487.288 987.988 487.148 987.468 486.948 cv
987.468 485.208 li
987.988 485.488 988.508 485.688 989.028 485.828 cv
989.548 485.968 990.068 486.048 990.608 486.048 cv
991.768 486.048 992.648 485.728 993.248 485.128 cv
993.828 484.508 994.128 483.588 994.128 482.348 cv
994.128 481.468 li
993.748 482.108 993.268 482.588 992.688 482.908 cv
992.108 483.228 991.428 483.388 990.628 483.388 cv
989.268 483.388 988.188 482.888 987.368 481.868 cv
986.548 480.848 986.148 479.488 986.148 477.788 cv
986.148 476.108 986.548 474.748 987.368 473.728 cv
988.188 472.708 989.268 472.188 990.628 472.188 cv
991.428 472.188 992.108 472.348 992.688 472.668 cv
993.268 472.988 993.748 473.468 994.128 474.108 cv
994.128 472.448 li
995.928 472.448 li
995.928 482.028 li
f
1000.09 480.908 mo
1002.15 480.908 li
1002.15 482.588 li
1000.55 485.688 li
999.288 485.688 li
1000.09 482.588 li
1000.09 480.908 li
f
1021.17 469.288 mo
1021.17 471.208 li
1020.41 470.848 1019.71 470.588 1019.05 470.408 cv
1018.37 470.248 1017.73 470.148 1017.13 470.148 cv
1016.05 470.148 1015.21 470.368 1014.63 470.768 cv
1014.05 471.188 1013.77 471.788 1013.77 472.548 cv
1013.77 473.188 1013.95 473.688 1014.35 474.008 cv
1014.73 474.348 1015.47 474.608 1016.55 474.808 cv
1017.75 475.048 li
1019.21 475.328 1020.29 475.828 1020.99 476.528 cv
1021.69 477.248 1022.05 478.188 1022.05 479.368 cv
1022.05 480.788 1021.57 481.848 1020.63 482.568 cv
1019.67 483.288 1018.29 483.648 1016.47 483.648 cv
1015.77 483.648 1015.03 483.568 1014.25 483.428 cv
1013.47 483.288 1012.67 483.068 1011.85 482.748 cv
1011.85 480.708 li
1012.65 481.168 1013.43 481.508 1014.19 481.728 cv
1014.95 481.968 1015.71 482.068 1016.47 482.068 cv
1017.59 482.068 1018.45 481.848 1019.07 481.408 cv
1019.67 480.968 1019.99 480.348 1019.99 479.508 cv
1019.99 478.788 1019.77 478.228 1019.33 477.828 cv
1018.89 477.428 1018.17 477.128 1017.17 476.928 cv
1015.97 476.688 li
1014.49 476.408 1013.43 475.948 1012.77 475.308 cv
1012.11 474.688 1011.79 473.828 1011.79 472.708 cv
1011.79 471.428 1012.23 470.408 1013.15 469.668 cv
1014.05 468.928 1015.31 468.548 1016.91 468.548 cv
1017.59 468.548 1018.27 468.608 1018.99 468.728 cv
1019.69 468.848 1020.41 469.048 1021.17 469.288 cv
f
1025.05 472.448 mo
1026.85 472.448 li
1026.85 483.388 li
1025.05 483.388 li
1025.05 472.448 li
1025.05 468.188 mo
1026.85 468.188 li
1026.85 470.468 li
1025.05 470.468 li
1025.05 468.188 li
f
1037.81 477.788 mo
1037.81 476.508 1037.53 475.488 1037.01 474.768 cv
1036.47 474.048 1035.71 473.688 1034.75 473.688 cv
1033.79 473.688 1033.03 474.048 1032.49 474.768 cv
1031.95 475.488 1031.69 476.508 1031.69 477.788 cv
1031.69 479.088 1031.95 480.088 1032.49 480.808 cv
1033.03 481.528 1033.79 481.888 1034.75 481.888 cv
1035.71 481.888 1036.47 481.528 1037.01 480.808 cv
1037.53 480.088 1037.81 479.088 1037.81 477.788 cv
1039.61 482.028 mo
1039.61 483.868 1039.19 485.248 1038.37 486.168 cv
1037.53 487.068 1036.27 487.528 1034.57 487.528 cv
1033.93 487.528 1033.35 487.468 1032.79 487.388 cv
1032.23 487.288 1031.67 487.148 1031.15 486.948 cv
1031.15 485.208 li
1031.67 485.488 1032.19 485.688 1032.71 485.828 cv
1033.23 485.968 1033.75 486.048 1034.29 486.048 cv
1035.45 486.048 1036.33 485.728 1036.93 485.128 cv
1037.51 484.508 1037.81 483.588 1037.81 482.348 cv
1037.81 481.468 li
1037.43 482.108 1036.95 482.588 1036.37 482.908 cv
1035.79 483.228 1035.11 483.388 1034.31 483.388 cv
1032.95 483.388 1031.87 482.888 1031.05 481.868 cv
1030.23 480.848 1029.83 479.488 1029.83 477.788 cv
1029.83 476.108 1030.23 474.748 1031.05 473.728 cv
1031.87 472.708 1032.95 472.188 1034.31 472.188 cv
1035.11 472.188 1035.79 472.348 1036.37 472.668 cv
1036.95 472.988 1037.43 473.468 1037.81 474.108 cv
1037.81 472.448 li
1039.61 472.448 li
1039.61 482.028 li
f
1051.83 474.548 mo
1052.27 473.748 1052.81 473.168 1053.43 472.768 cv
1054.05 472.388 1054.79 472.188 1055.65 472.188 cv
1056.77 472.188 1057.65 472.588 1058.27 473.388 cv
1058.89 474.188 1059.21 475.328 1059.21 476.788 cv
1059.21 483.388 li
1057.41 483.388 li
1057.41 476.848 li
1057.41 475.808 1057.21 475.028 1056.85 474.508 cv
1056.47 474.008 1055.91 473.748 1055.15 473.748 cv
1054.21 473.748 1053.47 474.068 1052.93 474.688 cv
1052.39 475.308 1052.13 476.148 1052.13 477.208 cv
1052.13 483.388 li
1050.33 483.388 li
1050.33 476.848 li
1050.33 475.808 1050.13 475.028 1049.77 474.508 cv
1049.39 474.008 1048.81 473.748 1048.05 473.748 cv
1047.13 473.748 1046.39 474.068 1045.85 474.688 cv
1045.31 475.308 1045.05 476.148 1045.05 477.208 cv
1045.05 483.388 li
1043.25 483.388 li
1043.25 472.448 li
1045.05 472.448 li
1045.05 474.148 li
1045.45 473.488 1045.95 472.988 1046.53 472.668 cv
1047.09 472.348 1047.77 472.188 1048.57 472.188 cv
1049.37 472.188 1050.03 472.388 1050.59 472.788 cv
1051.15 473.188 1051.55 473.788 1051.83 474.548 cv
f
1067.03 473.708 mo
1066.07 473.708 1065.31 474.088 1064.75 474.848 cv
1064.19 475.608 1063.91 476.628 1063.91 477.928 cv
1063.91 479.248 1064.17 480.268 1064.73 481.028 cv
1065.29 481.788 1066.05 482.148 1067.03 482.148 cv
1067.99 482.148 1068.75 481.788 1069.31 481.028 cv
1069.87 480.268 1070.15 479.248 1070.15 477.928 cv
1070.15 476.648 1069.87 475.608 1069.31 474.848 cv
1068.75 474.088 1067.99 473.708 1067.03 473.708 cv
1067.03 472.188 mo
1068.59 472.188 1069.81 472.708 1070.71 473.708 cv
1071.59 474.728 1072.05 476.128 1072.05 477.928 cv
1072.05 479.728 1071.59 481.128 1070.71 482.128 cv
1069.81 483.148 1068.59 483.648 1067.03 483.648 cv
1065.45 483.648 1064.21 483.148 1063.33 482.128 cv
1062.45 481.128 1062.01 479.728 1062.01 477.928 cv
1062.01 476.128 1062.45 474.728 1063.33 473.708 cv
1064.21 472.708 1065.45 472.188 1067.03 472.188 cv
f
1075.03 472.448 mo
1076.83 472.448 li
1076.83 483.388 li
1075.03 483.388 li
1075.03 472.448 li
1075.03 468.188 mo
1076.83 468.188 li
1076.83 470.468 li
1075.03 470.468 li
1075.03 468.188 li
f
1087.79 474.108 mo
1087.79 468.188 li
1089.59 468.188 li
1089.59 483.388 li
1087.79 483.388 li
1087.79 481.748 li
1087.41 482.408 1086.93 482.888 1086.35 483.188 cv
1085.77 483.488 1085.09 483.648 1084.29 483.648 cv
1082.97 483.648 1081.89 483.128 1081.05 482.088 cv
1080.21 481.048 1079.81 479.648 1079.81 477.928 cv
1079.81 476.208 1080.21 474.828 1081.05 473.768 cv
1081.89 472.728 1082.97 472.188 1084.29 472.188 cv
1085.09 472.188 1085.77 472.348 1086.35 472.668 cv
1086.93 472.988 1087.41 473.468 1087.79 474.108 cv
1081.67 477.928 mo
1081.67 479.248 1081.93 480.288 1082.47 481.048 cv
1083.01 481.808 1083.77 482.168 1084.73 482.168 cv
1085.67 482.168 1086.41 481.808 1086.97 481.048 cv
1087.51 480.288 1087.79 479.248 1087.79 477.928 cv
1087.79 476.608 1087.51 475.588 1086.97 474.828 cv
1086.41 474.068 1085.67 473.688 1084.73 473.688 cv
1083.77 473.688 1083.01 474.068 1082.47 474.828 cv
1081.93 475.588 1081.67 476.608 1081.67 477.928 cv
f
1093.01 468.208 mo
1094.57 468.208 li
1095.53 469.748 1096.27 471.248 1096.75 472.728 cv
1097.23 474.208 1097.49 475.668 1097.49 477.108 cv
1097.49 478.568 1097.23 480.028 1096.75 481.508 cv
1096.27 482.988 1095.53 484.468 1094.57 486.008 cv
1093.01 486.008 li
1093.87 484.508 1094.51 483.048 1094.95 481.568 cv
1095.37 480.108 1095.59 478.628 1095.59 477.108 cv
1095.59 475.608 1095.37 474.128 1094.95 472.668 cv
1094.51 471.208 1093.87 469.728 1093.01 468.208 cv
f
1.5 lw
2 lc
837.788 504.247 mo
857.788 504.247 li
@
876.488 493.647 mo
876.488 495.567 li
875.728 495.207 875.028 494.947 874.368 494.767 cv
873.688 494.607 873.048 494.507 872.448 494.507 cv
871.368 494.507 870.528 494.727 869.948 495.127 cv
869.368 495.547 869.088 496.147 869.088 496.907 cv
869.088 497.547 869.268 498.047 869.668 498.367 cv
870.048 498.707 870.788 498.967 871.868 499.167 cv
873.068 499.407 li
874.528 499.687 875.608 500.187 876.308 500.887 cv
877.008 501.607 877.368 502.547 877.368 503.727 cv
877.368 505.147 876.888 506.207 875.948 506.927 cv
874.988 507.647 873.608 508.007 871.788 508.007 cv
871.088 508.007 870.348 507.927 869.568 507.787 cv
868.788 507.647 867.988 507.427 867.168 507.107 cv
867.168 505.067 li
867.968 505.527 868.748 505.867 869.508 506.087 cv
870.268 506.327 871.028 506.427 871.788 506.427 cv
872.908 506.427 873.768 506.207 874.388 505.767 cv
874.988 505.327 875.308 504.707 875.308 503.867 cv
875.308 503.147 875.088 502.587 874.648 502.187 cv
874.208 501.787 873.488 501.487 872.488 501.287 cv
871.288 501.047 li
869.808 500.767 868.748 500.307 868.088 499.667 cv
867.428 499.047 867.108 498.187 867.108 497.067 cv
867.108 495.787 867.548 494.767 868.468 494.027 cv
869.368 493.287 870.628 492.907 872.228 492.907 cv
872.908 492.907 873.588 492.967 874.308 493.087 cv
875.008 493.207 875.728 493.407 876.488 493.647 cv
f
889.188 493.647 mo
889.188 495.567 li
888.428 495.207 887.728 494.947 887.068 494.767 cv
886.388 494.607 885.748 494.507 885.148 494.507 cv
884.068 494.507 883.228 494.727 882.648 495.127 cv
882.068 495.547 881.788 496.147 881.788 496.907 cv
881.788 497.547 881.968 498.047 882.368 498.367 cv
882.748 498.707 883.488 498.967 884.568 499.167 cv
885.768 499.407 li
887.228 499.687 888.308 500.187 889.008 500.887 cv
889.708 501.607 890.068 502.547 890.068 503.727 cv
890.068 505.147 889.588 506.207 888.648 506.927 cv
887.688 507.647 886.308 508.007 884.488 508.007 cv
883.788 508.007 883.048 507.927 882.268 507.787 cv
881.488 507.647 880.688 507.427 879.868 507.107 cv
879.868 505.067 li
880.668 505.527 881.448 505.867 882.208 506.087 cv
882.968 506.327 883.728 506.427 884.488 506.427 cv
885.608 506.427 886.468 506.207 887.088 505.767 cv
887.688 505.327 888.008 504.707 888.008 503.867 cv
888.008 503.147 887.788 502.587 887.348 502.187 cv
886.908 501.787 886.188 501.487 885.188 501.287 cv
883.988 501.047 li
882.508 500.767 881.448 500.307 880.788 499.667 cv
880.128 499.047 879.808 498.187 879.808 497.067 cv
879.808 495.787 880.248 494.767 881.168 494.027 cv
882.068 493.287 883.328 492.907 884.928 492.907 cv
885.608 492.907 886.288 492.967 887.008 493.087 cv
887.708 493.207 888.428 493.407 889.188 493.647 cv
f
895.128 494.787 mo
895.128 506.127 li
897.508 506.127 li
899.508 506.127 900.988 505.687 901.928 504.767 cv
902.848 503.847 903.328 502.407 903.328 500.447 cv
903.328 498.487 902.848 497.067 901.928 496.147 cv
900.988 495.247 899.508 494.787 897.508 494.787 cv
895.128 494.787 li
893.148 493.167 mo
897.208 493.167 li
900.028 493.167 902.108 493.767 903.428 494.927 cv
904.748 496.107 905.408 497.947 905.408 500.447 cv
905.408 502.967 904.728 504.807 903.408 505.987 cv
902.088 507.167 900.008 507.747 897.208 507.747 cv
893.148 507.747 li
893.148 493.167 li
f
910.528 500.787 mo
910.528 506.127 li
913.688 506.127 li
914.748 506.127 915.528 505.907 916.048 505.467 cv
916.548 505.027 916.808 504.367 916.808 503.447 cv
916.808 502.547 916.548 501.887 916.048 501.447 cv
915.528 501.007 914.748 500.787 913.688 500.787 cv
910.528 500.787 li
910.528 494.787 mo
910.528 499.187 li
913.448 499.187 li
914.408 499.187 915.108 499.007 915.588 498.647 cv
916.068 498.287 916.308 497.747 916.308 496.987 cv
916.308 496.267 916.068 495.707 915.588 495.347 cv
915.108 494.987 914.408 494.787 913.448 494.787 cv
910.528 494.787 li
908.548 493.167 mo
913.588 493.167 li
915.088 493.167 916.248 493.487 917.068 494.107 cv
917.868 494.747 918.288 495.627 918.288 496.767 cv
918.288 497.667 918.068 498.387 917.648 498.907 cv
917.228 499.427 916.628 499.767 915.828 499.887 cv
916.788 500.107 917.548 500.547 918.088 501.207 cv
918.608 501.867 918.888 502.687 918.888 503.667 cv
918.888 504.987 918.428 505.987 917.548 506.687 cv
916.668 507.407 915.408 507.747 913.788 507.747 cv
908.548 507.747 li
908.548 493.167 li
f
922.268 493.167 mo
924.928 493.167 li
931.388 505.367 li
931.388 493.167 li
933.308 493.167 li
933.308 507.747 li
930.648 507.747 li
924.188 495.547 li
924.188 507.747 li
922.268 507.747 li
922.268 493.167 li
f
947.828 492.567 mo
946.948 494.087 946.308 495.567 945.888 497.027 cv
945.448 498.487 945.248 499.967 945.248 501.467 cv
945.248 502.987 945.448 504.467 945.888 505.927 cv
946.308 507.407 946.948 508.867 947.828 510.367 cv
946.268 510.367 li
945.288 508.827 944.548 507.347 944.068 505.867 cv
943.588 504.387 943.348 502.927 943.348 501.467 cv
943.348 500.027 943.588 498.567 944.068 497.087 cv
944.548 495.607 945.268 494.107 946.268 492.567 cv
947.828 492.567 li
f
949.388 493.167 mo
961.708 493.167 li
961.708 494.827 li
956.528 494.827 li
956.528 507.747 li
954.548 507.747 li
954.548 494.827 li
949.388 494.827 li
949.388 493.167 li
f
969.868 498.487 mo
969.668 498.367 969.448 498.287 969.208 498.227 cv
968.968 498.187 968.708 498.147 968.428 498.147 cv
967.408 498.147 966.628 498.487 966.088 499.147 cv
965.528 499.807 965.268 500.747 965.268 501.987 cv
965.268 507.747 li
963.468 507.747 li
963.468 496.807 li
965.268 496.807 li
965.268 498.507 li
965.628 497.847 966.128 497.347 966.728 497.027 cv
967.328 496.707 968.068 496.547 968.948 496.547 cv
969.068 496.547 969.208 496.567 969.368 496.567 cv
969.508 496.587 969.668 496.607 969.868 496.647 cv
969.868 498.487 li
f
976.727 502.247 mo
975.267 502.247 974.267 502.427 973.707 502.747 cv
973.147 503.087 972.867 503.647 972.867 504.447 cv
972.867 505.087 973.067 505.607 973.487 505.967 cv
973.907 506.347 974.487 506.527 975.207 506.527 cv
976.207 506.527 977.007 506.187 977.607 505.467 cv
978.207 504.767 978.507 503.827 978.507 502.647 cv
978.507 502.247 li
976.727 502.247 li
980.307 501.507 mo
980.307 507.747 li
978.507 507.747 li
978.507 506.087 li
978.087 506.767 977.567 507.247 976.967 507.547 cv
976.367 507.847 975.607 508.007 974.727 508.007 cv
973.607 508.007 972.707 507.707 972.047 507.087 cv
971.387 506.467 971.067 505.627 971.067 504.567 cv
971.067 503.347 971.467 502.427 972.307 501.787 cv
973.127 501.167 974.347 500.847 975.987 500.847 cv
978.507 500.847 li
978.507 500.667 li
978.507 499.847 978.227 499.207 977.687 498.747 cv
977.147 498.307 976.387 498.067 975.407 498.067 cv
974.767 498.067 974.167 498.147 973.567 498.307 cv
972.967 498.467 972.407 498.687 971.867 498.967 cv
971.867 497.307 li
972.507 497.067 973.147 496.867 973.767 496.747 cv
974.387 496.627 974.987 496.547 975.587 496.547 cv
977.167 496.547 978.347 496.967 979.127 497.787 cv
979.907 498.607 980.307 499.847 980.307 501.507 cv
f
984.008 496.807 mo
985.808 496.807 li
985.808 507.747 li
984.008 507.747 li
984.008 496.807 li
984.008 492.547 mo
985.808 492.547 li
985.808 494.827 li
984.008 494.827 li
984.008 492.547 li
f
998.668 501.147 mo
998.668 507.747 li
996.868 507.747 li
996.868 501.207 li
996.868 500.167 996.648 499.407 996.248 498.887 cv
995.848 498.367 995.248 498.107 994.448 498.107 cv
993.468 498.107 992.708 498.427 992.148 499.047 cv
991.588 499.667 991.308 500.507 991.308 501.567 cv
991.308 507.747 li
989.508 507.747 li
989.508 496.807 li
991.308 496.807 li
991.308 498.507 li
991.728 497.867 992.228 497.367 992.828 497.047 cv
993.408 496.727 994.088 496.547 994.848 496.547 cv
996.088 496.547 997.048 496.947 997.688 497.727 cv
998.328 498.507 998.668 499.647 998.668 501.147 cv
f
1002.25 496.807 mo
1004.05 496.807 li
1004.05 507.747 li
1002.25 507.747 li
1002.25 496.807 li
1002.25 492.547 mo
1004.05 492.547 li
1004.05 494.827 li
1002.25 494.827 li
1002.25 492.547 li
f
1016.91 501.147 mo
1016.91 507.747 li
1015.11 507.747 li
1015.11 501.207 li
1015.11 500.167 1014.89 499.407 1014.49 498.887 cv
1014.09 498.367 1013.49 498.107 1012.69 498.107 cv
1011.71 498.107 1010.95 498.427 1010.39 499.047 cv
1009.83 499.667 1009.55 500.507 1009.55 501.567 cv
1009.55 507.747 li
1007.75 507.747 li
1007.75 496.807 li
1009.55 496.807 li
1009.55 498.507 li
1009.97 497.867 1010.47 497.367 1011.07 497.047 cv
1011.65 496.727 1012.33 496.547 1013.09 496.547 cv
1014.33 496.547 1015.29 496.947 1015.93 497.727 cv
1016.57 498.507 1016.91 499.647 1016.91 501.147 cv
f
1027.69 502.147 mo
1027.69 500.867 1027.41 499.847 1026.89 499.127 cv
1026.35 498.407 1025.59 498.047 1024.63 498.047 cv
1023.67 498.047 1022.91 498.407 1022.37 499.127 cv
1021.83 499.847 1021.57 500.867 1021.57 502.147 cv
1021.57 503.447 1021.83 504.447 1022.37 505.167 cv
1022.91 505.887 1023.67 506.247 1024.63 506.247 cv
1025.59 506.247 1026.35 505.887 1026.89 505.167 cv
1027.41 504.447 1027.69 503.447 1027.69 502.147 cv
1029.49 506.387 mo
1029.49 508.227 1029.07 509.607 1028.25 510.527 cv
1027.41 511.427 1026.15 511.887 1024.45 511.887 cv
1023.81 511.887 1023.23 511.827 1022.67 511.747 cv
1022.11 511.647 1021.55 511.507 1021.03 511.307 cv
1021.03 509.567 li
1021.55 509.847 1022.07 510.047 1022.59 510.187 cv
1023.11 510.327 1023.63 510.407 1024.17 510.407 cv
1025.33 510.407 1026.21 510.087 1026.81 509.487 cv
1027.39 508.867 1027.69 507.947 1027.69 506.707 cv
1027.69 505.827 li
1027.31 506.467 1026.83 506.947 1026.25 507.267 cv
1025.67 507.587 1024.99 507.747 1024.19 507.747 cv
1022.83 507.747 1021.75 507.247 1020.93 506.227 cv
1020.11 505.207 1019.71 503.847 1019.71 502.147 cv
1019.71 500.467 1020.11 499.107 1020.93 498.087 cv
1021.75 497.067 1022.83 496.547 1024.19 496.547 cv
1024.99 496.547 1025.67 496.707 1026.25 497.027 cv
1026.83 497.347 1027.31 497.827 1027.69 498.467 cv
1027.69 496.807 li
1029.49 496.807 li
1029.49 506.387 li
f
1033.65 505.267 mo
1035.71 505.267 li
1035.71 506.947 li
1034.11 510.047 li
1032.85 510.047 li
1033.65 506.947 li
1033.65 505.267 li
f
1054.73 493.647 mo
1054.73 495.567 li
1053.97 495.207 1053.27 494.947 1052.61 494.767 cv
1051.93 494.607 1051.29 494.507 1050.69 494.507 cv
1049.61 494.507 1048.77 494.727 1048.19 495.127 cv
1047.61 495.547 1047.33 496.147 1047.33 496.907 cv
1047.33 497.547 1047.51 498.047 1047.91 498.367 cv
1048.29 498.707 1049.03 498.967 1050.11 499.167 cv
1051.31 499.407 li
1052.77 499.687 1053.85 500.187 1054.55 500.887 cv
1055.25 501.607 1055.61 502.547 1055.61 503.727 cv
1055.61 505.147 1055.13 506.207 1054.19 506.927 cv
1053.23 507.647 1051.85 508.007 1050.03 508.007 cv
1049.33 508.007 1048.59 507.927 1047.81 507.787 cv
1047.03 507.647 1046.23 507.427 1045.41 507.107 cv
1045.41 505.067 li
1046.21 505.527 1046.99 505.867 1047.75 506.087 cv
1048.51 506.327 1049.27 506.427 1050.03 506.427 cv
1051.15 506.427 1052.01 506.207 1052.63 505.767 cv
1053.23 505.327 1053.55 504.707 1053.55 503.867 cv
1053.55 503.147 1053.33 502.587 1052.89 502.187 cv
1052.45 501.787 1051.73 501.487 1050.73 501.287 cv
1049.53 501.047 li
1048.05 500.767 1046.99 500.307 1046.33 499.667 cv
1045.67 499.047 1045.35 498.187 1045.35 497.067 cv
1045.35 495.787 1045.79 494.767 1046.71 494.027 cv
1047.61 493.287 1048.87 492.907 1050.47 492.907 cv
1051.15 492.907 1051.83 492.967 1052.55 493.087 cv
1053.25 493.207 1053.97 493.407 1054.73 493.647 cv
f
1058.61 496.807 mo
1060.41 496.807 li
1060.41 507.747 li
1058.61 507.747 li
1058.61 496.807 li
1058.61 492.547 mo
1060.41 492.547 li
1060.41 494.827 li
1058.61 494.827 li
1058.61 492.547 li
f
1071.37 502.147 mo
1071.37 500.867 1071.09 499.847 1070.57 499.127 cv
1070.03 498.407 1069.27 498.047 1068.31 498.047 cv
1067.35 498.047 1066.59 498.407 1066.05 499.127 cv
1065.51 499.847 1065.25 500.867 1065.25 502.147 cv
1065.25 503.447 1065.51 504.447 1066.05 505.167 cv
1066.59 505.887 1067.35 506.247 1068.31 506.247 cv
1069.27 506.247 1070.03 505.887 1070.57 505.167 cv
1071.09 504.447 1071.37 503.447 1071.37 502.147 cv
1073.17 506.387 mo
1073.17 508.227 1072.75 509.607 1071.93 510.527 cv
1071.09 511.427 1069.83 511.887 1068.13 511.887 cv
1067.49 511.887 1066.91 511.827 1066.35 511.747 cv
1065.79 511.647 1065.23 511.507 1064.71 511.307 cv
1064.71 509.567 li
1065.23 509.847 1065.75 510.047 1066.27 510.187 cv
1066.79 510.327 1067.31 510.407 1067.85 510.407 cv
1069.01 510.407 1069.89 510.087 1070.49 509.487 cv
1071.07 508.867 1071.37 507.947 1071.37 506.707 cv
1071.37 505.827 li
1070.99 506.467 1070.51 506.947 1069.93 507.267 cv
1069.35 507.587 1068.67 507.747 1067.87 507.747 cv
1066.51 507.747 1065.43 507.247 1064.61 506.227 cv
1063.79 505.207 1063.39 503.847 1063.39 502.147 cv
1063.39 500.467 1063.79 499.107 1064.61 498.087 cv
1065.43 497.067 1066.51 496.547 1067.87 496.547 cv
1068.67 496.547 1069.35 496.707 1069.93 497.027 cv
1070.51 497.347 1070.99 497.827 1071.37 498.467 cv
1071.37 496.807 li
1073.17 496.807 li
1073.17 506.387 li
f
1085.39 498.907 mo
1085.83 498.107 1086.37 497.527 1086.99 497.127 cv
1087.61 496.747 1088.35 496.547 1089.21 496.547 cv
1090.33 496.547 1091.21 496.947 1091.83 497.747 cv
1092.45 498.547 1092.77 499.687 1092.77 501.147 cv
1092.77 507.747 li
1090.97 507.747 li
1090.97 501.207 li
1090.97 500.167 1090.77 499.387 1090.41 498.867 cv
1090.03 498.367 1089.47 498.107 1088.71 498.107 cv
1087.77 498.107 1087.03 498.427 1086.49 499.047 cv
1085.95 499.667 1085.69 500.507 1085.69 501.567 cv
1085.69 507.747 li
1083.89 507.747 li
1083.89 501.207 li
1083.89 500.167 1083.69 499.387 1083.33 498.867 cv
1082.95 498.367 1082.37 498.107 1081.61 498.107 cv
1080.69 498.107 1079.95 498.427 1079.41 499.047 cv
1078.87 499.667 1078.61 500.507 1078.61 501.567 cv
1078.61 507.747 li
1076.81 507.747 li
1076.81 496.807 li
1078.61 496.807 li
1078.61 498.507 li
1079.01 497.847 1079.51 497.347 1080.09 497.027 cv
1080.65 496.707 1081.33 496.547 1082.13 496.547 cv
1082.93 496.547 1083.59 496.747 1084.15 497.147 cv
1084.71 497.547 1085.11 498.147 1085.39 498.907 cv
f
1100.59 498.067 mo
1099.63 498.067 1098.87 498.447 1098.31 499.207 cv
1097.75 499.967 1097.47 500.987 1097.47 502.287 cv
1097.47 503.607 1097.73 504.627 1098.29 505.387 cv
1098.85 506.147 1099.61 506.507 1100.59 506.507 cv
1101.55 506.507 1102.31 506.147 1102.87 505.387 cv
1103.43 504.627 1103.71 503.607 1103.71 502.287 cv
1103.71 501.007 1103.43 499.967 1102.87 499.207 cv
1102.31 498.447 1101.55 498.067 1100.59 498.067 cv
1100.59 496.547 mo
1102.15 496.547 1103.37 497.067 1104.27 498.067 cv
1105.15 499.087 1105.61 500.487 1105.61 502.287 cv
1105.61 504.087 1105.15 505.487 1104.27 506.487 cv
1103.37 507.507 1102.15 508.007 1100.59 508.007 cv
1099.01 508.007 1097.77 507.507 1096.89 506.487 cv
1096.01 505.487 1095.57 504.087 1095.57 502.287 cv
1095.57 500.487 1096.01 499.087 1096.89 498.067 cv
1097.77 497.067 1099.01 496.547 1100.59 496.547 cv
f
1108.59 496.807 mo
1110.39 496.807 li
1110.39 507.747 li
1108.59 507.747 li
1108.59 496.807 li
1108.59 492.547 mo
1110.39 492.547 li
1110.39 494.827 li
1108.59 494.827 li
1108.59 492.547 li
f
1121.35 498.467 mo
1121.35 492.547 li
1123.15 492.547 li
1123.15 507.747 li
1121.35 507.747 li
1121.35 506.107 li
1120.97 506.767 1120.49 507.247 1119.91 507.547 cv
1119.33 507.847 1118.65 508.007 1117.85 508.007 cv
1116.53 508.007 1115.45 507.487 1114.61 506.447 cv
1113.77 505.407 1113.37 504.007 1113.37 502.287 cv
1113.37 500.567 1113.77 499.187 1114.61 498.127 cv
1115.45 497.087 1116.53 496.547 1117.85 496.547 cv
1118.65 496.547 1119.33 496.707 1119.91 497.027 cv
1120.49 497.347 1120.97 497.827 1121.35 498.467 cv
1115.23 502.287 mo
1115.23 503.607 1115.49 504.647 1116.03 505.407 cv
1116.57 506.167 1117.33 506.527 1118.29 506.527 cv
1119.23 506.527 1119.97 506.167 1120.53 505.407 cv
1121.07 504.647 1121.35 503.607 1121.35 502.287 cv
1121.35 500.967 1121.07 499.947 1120.53 499.187 cv
1119.97 498.427 1119.23 498.047 1118.29 498.047 cv
1117.33 498.047 1116.57 498.427 1116.03 499.187 cv
1115.49 499.947 1115.23 500.967 1115.23 502.287 cv
f
1126.57 492.567 mo
1128.13 492.567 li
1129.09 494.107 1129.83 495.607 1130.31 497.087 cv
1130.79 498.567 1131.05 500.027 1131.05 501.467 cv
1131.05 502.927 1130.79 504.387 1130.31 505.867 cv
1129.83 507.347 1129.09 508.827 1128.13 510.367 cv
1126.57 510.367 li
1127.43 508.867 1128.07 507.407 1128.51 505.927 cv
1128.93 504.467 1129.15 502.987 1129.15 501.467 cv
1129.15 499.967 1128.93 498.487 1128.51 497.027 cv
1128.07 495.567 1127.43 494.087 1126.57 492.567 cv
f
837.788 528.607 mo
857.788 528.607 li
@
844.788 531.607 mo
850.788 525.607 li
844.788 525.607 mo
850.788 531.607 li
f
1 lw
0 lc
844.788 531.607 mo
850.788 525.607 li
844.788 525.607 mo
850.788 531.607 li
@
876.488 518.007 mo
876.488 519.927 li
875.728 519.567 875.028 519.307 874.368 519.127 cv
873.688 518.966 873.048 518.867 872.448 518.867 cv
871.368 518.867 870.528 519.086 869.948 519.487 cv
869.368 519.906 869.088 520.507 869.088 521.266 cv
869.088 521.906 869.268 522.406 869.668 522.727 cv
870.048 523.067 870.788 523.326 871.868 523.526 cv
873.068 523.766 li
874.528 524.047 875.608 524.547 876.308 525.247 cv
877.008 525.966 877.368 526.906 877.368 528.086 cv
877.368 529.507 876.888 530.567 875.948 531.286 cv
874.988 532.007 873.608 532.367 871.788 532.367 cv
871.088 532.367 870.348 532.286 869.568 532.146 cv
868.788 532.007 867.988 531.786 867.168 531.466 cv
867.168 529.427 li
867.968 529.887 868.748 530.227 869.508 530.447 cv
870.268 530.687 871.028 530.786 871.788 530.786 cv
872.908 530.786 873.768 530.567 874.388 530.127 cv
874.988 529.687 875.308 529.067 875.308 528.227 cv
875.308 527.507 875.088 526.947 874.648 526.547 cv
874.208 526.146 873.488 525.846 872.488 525.646 cv
871.288 525.406 li
869.808 525.127 868.748 524.667 868.088 524.026 cv
867.428 523.406 867.108 522.547 867.108 521.427 cv
867.108 520.146 867.548 519.127 868.468 518.386 cv
869.368 517.646 870.628 517.266 872.228 517.266 cv
872.908 517.266 873.588 517.326 874.308 517.447 cv
875.008 517.567 875.728 517.766 876.488 518.007 cv
f
889.188 518.007 mo
889.188 519.927 li
888.428 519.567 887.728 519.307 887.068 519.127 cv
886.388 518.966 885.748 518.867 885.148 518.867 cv
884.068 518.867 883.228 519.086 882.648 519.487 cv
882.068 519.906 881.788 520.507 881.788 521.266 cv
881.788 521.906 881.968 522.406 882.368 522.727 cv
882.748 523.067 883.488 523.326 884.568 523.526 cv
885.768 523.766 li
887.228 524.047 888.308 524.547 889.008 525.247 cv
889.708 525.966 890.068 526.906 890.068 528.086 cv
890.068 529.507 889.588 530.567 888.648 531.286 cv
887.688 532.007 886.308 532.367 884.488 532.367 cv
883.788 532.367 883.048 532.286 882.268 532.146 cv
881.488 532.007 880.688 531.786 879.868 531.466 cv
879.868 529.427 li
880.668 529.887 881.448 530.227 882.208 530.447 cv
882.968 530.687 883.728 530.786 884.488 530.786 cv
885.608 530.786 886.468 530.567 887.088 530.127 cv
887.688 529.687 888.008 529.067 888.008 528.227 cv
888.008 527.507 887.788 526.947 887.348 526.547 cv
886.908 526.146 886.188 525.846 885.188 525.646 cv
883.988 525.406 li
882.508 525.127 881.448 524.667 880.788 524.026 cv
880.128 523.406 879.808 522.547 879.808 521.427 cv
879.808 520.146 880.248 519.127 881.168 518.386 cv
882.068 517.646 883.328 517.266 884.928 517.266 cv
885.608 517.266 886.288 517.326 887.008 517.447 cv
887.708 517.567 888.428 517.766 889.188 518.007 cv
f
895.128 519.146 mo
895.128 530.487 li
897.508 530.487 li
899.508 530.487 900.988 530.047 901.928 529.127 cv
902.848 528.206 903.328 526.766 903.328 524.807 cv
903.328 522.846 902.848 521.427 901.928 520.507 cv
900.988 519.607 899.508 519.146 897.508 519.146 cv
895.128 519.146 li
893.148 517.526 mo
897.208 517.526 li
900.028 517.526 902.108 518.127 903.428 519.286 cv
904.748 520.466 905.408 522.307 905.408 524.807 cv
905.408 527.326 904.728 529.167 903.408 530.346 cv
902.088 531.526 900.008 532.107 897.208 532.107 cv
893.148 532.107 li
893.148 517.526 li
f
910.528 525.146 mo
910.528 530.487 li
913.688 530.487 li
914.748 530.487 915.528 530.266 916.048 529.826 cv
916.548 529.387 916.808 528.727 916.808 527.807 cv
916.808 526.906 916.548 526.247 916.048 525.807 cv
915.528 525.367 914.748 525.146 913.688 525.146 cv
910.528 525.146 li
910.528 519.146 mo
910.528 523.547 li
913.448 523.547 li
914.408 523.547 915.108 523.367 915.588 523.007 cv
916.068 522.646 916.308 522.107 916.308 521.346 cv
916.308 520.627 916.068 520.067 915.588 519.706 cv
915.108 519.346 914.408 519.146 913.448 519.146 cv
910.528 519.146 li
908.548 517.526 mo
913.588 517.526 li
915.088 517.526 916.248 517.846 917.068 518.466 cv
917.868 519.107 918.288 519.987 918.288 521.127 cv
918.288 522.026 918.068 522.747 917.648 523.266 cv
917.228 523.786 916.628 524.127 915.828 524.247 cv
916.788 524.466 917.548 524.906 918.088 525.567 cv
918.608 526.227 918.888 527.047 918.888 528.026 cv
918.888 529.346 918.428 530.346 917.548 531.047 cv
916.668 531.766 915.408 532.107 913.788 532.107 cv
908.548 532.107 li
908.548 517.526 li
f
922.268 517.526 mo
924.928 517.526 li
931.388 529.727 li
931.388 517.526 li
933.308 517.526 li
933.308 532.107 li
930.648 532.107 li
924.188 519.906 li
924.188 532.107 li
922.268 532.107 li
922.268 517.526 li
f
947.828 516.927 mo
946.948 518.447 946.308 519.927 945.888 521.386 cv
945.448 522.846 945.248 524.326 945.248 525.826 cv
945.248 527.346 945.448 528.826 945.888 530.286 cv
946.308 531.766 946.948 533.227 947.828 534.727 cv
946.268 534.727 li
945.288 533.187 944.548 531.706 944.068 530.227 cv
943.588 528.747 943.348 527.286 943.348 525.826 cv
943.348 524.387 943.588 522.927 944.068 521.447 cv
944.548 519.966 945.268 518.466 946.268 516.927 cv
947.828 516.927 li
f
949.388 517.526 mo
961.708 517.526 li
961.708 519.187 li
956.528 519.187 li
956.528 532.107 li
954.548 532.107 li
954.548 519.187 li
949.388 519.187 li
949.388 517.526 li
f
972.888 526.187 mo
972.888 527.067 li
964.628 527.067 li
964.708 528.307 965.068 529.266 965.748 529.906 cv
966.408 530.547 967.328 530.867 968.528 530.867 cv
969.208 530.867 969.888 530.786 970.528 530.627 cv
971.168 530.466 971.828 530.206 972.468 529.846 cv
972.468 531.547 li
971.828 531.826 971.168 532.047 970.488 532.167 cv
969.808 532.286 969.108 532.367 968.428 532.367 cv
966.668 532.367 965.288 531.867 964.268 530.867 cv
963.248 529.867 962.748 528.487 962.748 526.747 cv
962.748 524.966 963.228 523.547 964.188 522.487 cv
965.148 521.447 966.468 520.906 968.108 520.906 cv
969.588 520.906 970.748 521.386 971.608 522.326 cv
972.448 523.286 972.888 524.567 972.888 526.187 cv
971.088 525.667 mo
971.068 524.687 970.788 523.906 970.268 523.307 cv
969.728 522.727 969.008 522.427 968.128 522.427 cv
967.128 522.427 966.328 522.727 965.728 523.286 cv
965.128 523.846 964.768 524.646 964.688 525.667 cv
971.088 525.667 li
f
982.808 521.487 mo
982.808 523.187 li
982.288 522.947 981.768 522.747 981.228 522.607 cv
980.668 522.487 980.108 522.406 979.528 522.406 cv
978.628 522.406 977.948 522.547 977.508 522.826 cv
977.068 523.107 976.848 523.507 976.848 524.047 cv
976.848 524.466 977.008 524.786 977.328 525.026 cv
977.648 525.266 978.288 525.507 979.248 525.706 cv
979.868 525.846 li
981.148 526.127 982.048 526.526 982.588 527.007 cv
983.108 527.507 983.388 528.206 983.388 529.086 cv
983.388 530.107 982.988 530.906 982.188 531.487 cv
981.388 532.086 980.268 532.367 978.868 532.367 cv
978.268 532.367 977.668 532.307 977.028 532.206 cv
976.388 532.107 975.728 531.947 975.028 531.706 cv
975.028 529.846 li
975.688 530.206 976.348 530.466 976.988 530.627 cv
977.628 530.807 978.268 530.887 978.908 530.887 cv
979.748 530.887 980.408 530.747 980.868 530.466 cv
981.308 530.187 981.548 529.766 981.548 529.227 cv
981.548 528.747 981.368 528.367 981.048 528.107 cv
980.728 527.846 980.008 527.586 978.888 527.346 cv
978.268 527.206 li
977.148 526.966 976.328 526.607 975.848 526.127 cv
975.348 525.646 975.108 524.987 975.108 524.127 cv
975.108 523.107 975.468 522.307 976.188 521.747 cv
976.908 521.187 977.948 520.906 979.308 520.906 cv
979.968 520.906 980.588 520.966 981.188 521.067 cv
981.768 521.167 982.308 521.307 982.808 521.487 cv
f
988.028 518.067 mo
988.028 521.167 li
991.728 521.167 li
991.728 522.567 li
988.028 522.567 li
988.028 528.507 li
988.028 529.406 988.148 529.987 988.388 530.227 cv
988.628 530.487 989.128 530.607 989.888 530.607 cv
991.728 530.607 li
991.728 532.107 li
989.888 532.107 li
988.488 532.107 987.528 531.846 987.008 531.326 cv
986.488 530.807 986.228 529.867 986.228 528.507 cv
986.228 522.567 li
984.908 522.567 li
984.908 521.167 li
986.228 521.167 li
986.228 518.067 li
988.028 518.067 li
f
994.088 521.167 mo
995.888 521.167 li
995.888 532.107 li
994.088 532.107 li
994.088 521.167 li
994.088 516.906 mo
995.888 516.906 li
995.888 519.187 li
994.088 519.187 li
994.088 516.906 li
f
1008.75 525.507 mo
1008.75 532.107 li
1006.95 532.107 li
1006.95 525.567 li
1006.95 524.526 1006.73 523.766 1006.33 523.247 cv
1005.93 522.727 1005.33 522.466 1004.53 522.466 cv
1003.55 522.466 1002.79 522.786 1002.23 523.406 cv
1001.67 524.026 1001.39 524.867 1001.39 525.927 cv
1001.39 532.107 li
999.588 532.107 li
999.588 521.167 li
1001.39 521.167 li
1001.39 522.867 li
1001.81 522.227 1002.31 521.727 1002.91 521.406 cv
1003.49 521.086 1004.17 520.906 1004.93 520.906 cv
1006.17 520.906 1007.13 521.307 1007.77 522.086 cv
1008.41 522.867 1008.75 524.007 1008.75 525.507 cv
f
1019.53 526.507 mo
1019.53 525.227 1019.25 524.206 1018.73 523.487 cv
1018.19 522.766 1017.43 522.406 1016.47 522.406 cv
1015.51 522.406 1014.75 522.766 1014.21 523.487 cv
1013.67 524.206 1013.41 525.227 1013.41 526.507 cv
1013.41 527.807 1013.67 528.807 1014.21 529.526 cv
1014.75 530.247 1015.51 530.607 1016.47 530.607 cv
1017.43 530.607 1018.19 530.247 1018.73 529.526 cv
1019.25 528.807 1019.53 527.807 1019.53 526.507 cv
1021.33 530.747 mo
1021.33 532.586 1020.91 533.966 1020.09 534.887 cv
1019.25 535.786 1017.99 536.247 1016.29 536.247 cv
1015.65 536.247 1015.07 536.187 1014.51 536.107 cv
1013.95 536.007 1013.39 535.867 1012.87 535.667 cv
1012.87 533.927 li
1013.39 534.206 1013.91 534.406 1014.43 534.547 cv
1014.95 534.687 1015.47 534.766 1016.01 534.766 cv
1017.17 534.766 1018.05 534.447 1018.65 533.846 cv
1019.23 533.227 1019.53 532.307 1019.53 531.067 cv
1019.53 530.187 li
1019.15 530.826 1018.67 531.307 1018.09 531.627 cv
1017.51 531.947 1016.83 532.107 1016.03 532.107 cv
1014.67 532.107 1013.59 531.607 1012.77 530.586 cv
1011.95 529.567 1011.55 528.206 1011.55 526.507 cv
1011.55 524.826 1011.95 523.466 1012.77 522.447 cv
1013.59 521.427 1014.67 520.906 1016.03 520.906 cv
1016.83 520.906 1017.51 521.067 1018.09 521.386 cv
1018.67 521.706 1019.15 522.187 1019.53 522.826 cv
1019.53 521.167 li
1021.33 521.167 li
1021.33 530.747 li
f
1025.49 529.627 mo
1027.55 529.627 li
1027.55 531.307 li
1025.95 534.406 li
1024.69 534.406 li
1025.49 531.307 li
1025.49 529.627 li
f
1046.57 518.007 mo
1046.57 519.927 li
1045.81 519.567 1045.11 519.307 1044.45 519.127 cv
1043.77 518.966 1043.13 518.867 1042.53 518.867 cv
1041.45 518.867 1040.61 519.086 1040.03 519.487 cv
1039.45 519.906 1039.17 520.507 1039.17 521.266 cv
1039.17 521.906 1039.35 522.406 1039.75 522.727 cv
1040.13 523.067 1040.87 523.326 1041.95 523.526 cv
1043.15 523.766 li
1044.61 524.047 1045.69 524.547 1046.39 525.247 cv
1047.09 525.966 1047.45 526.906 1047.45 528.086 cv
1047.45 529.507 1046.97 530.567 1046.03 531.286 cv
1045.07 532.007 1043.69 532.367 1041.87 532.367 cv
1041.17 532.367 1040.43 532.286 1039.65 532.146 cv
1038.87 532.007 1038.07 531.786 1037.25 531.466 cv
1037.25 529.427 li
1038.05 529.887 1038.83 530.227 1039.59 530.447 cv
1040.35 530.687 1041.11 530.786 1041.87 530.786 cv
1042.99 530.786 1043.85 530.567 1044.47 530.127 cv
1045.07 529.687 1045.39 529.067 1045.39 528.227 cv
1045.39 527.507 1045.17 526.947 1044.73 526.547 cv
1044.29 526.146 1043.57 525.846 1042.57 525.646 cv
1041.37 525.406 li
1039.89 525.127 1038.83 524.667 1038.17 524.026 cv
1037.51 523.406 1037.19 522.547 1037.19 521.427 cv
1037.19 520.146 1037.63 519.127 1038.55 518.386 cv
1039.45 517.646 1040.71 517.266 1042.31 517.266 cv
1042.99 517.266 1043.67 517.326 1044.39 517.447 cv
1045.09 517.567 1045.81 517.766 1046.57 518.007 cv
f
1050.45 521.167 mo
1052.25 521.167 li
1052.25 532.107 li
1050.45 532.107 li
1050.45 521.167 li
1050.45 516.906 mo
1052.25 516.906 li
1052.25 519.187 li
1050.45 519.187 li
1050.45 516.906 li
f
1063.21 526.507 mo
1063.21 525.227 1062.93 524.206 1062.41 523.487 cv
1061.87 522.766 1061.11 522.406 1060.15 522.406 cv
1059.19 522.406 1058.43 522.766 1057.89 523.487 cv
1057.35 524.206 1057.09 525.227 1057.09 526.507 cv
1057.09 527.807 1057.35 528.807 1057.89 529.526 cv
1058.43 530.247 1059.19 530.607 1060.15 530.607 cv
1061.11 530.607 1061.87 530.247 1062.41 529.526 cv
1062.93 528.807 1063.21 527.807 1063.21 526.507 cv
1065.01 530.747 mo
1065.01 532.586 1064.59 533.966 1063.77 534.887 cv
1062.93 535.786 1061.67 536.247 1059.97 536.247 cv
1059.33 536.247 1058.75 536.187 1058.19 536.107 cv
1057.63 536.007 1057.07 535.867 1056.55 535.667 cv
1056.55 533.927 li
1057.07 534.206 1057.59 534.406 1058.11 534.547 cv
1058.63 534.687 1059.15 534.766 1059.69 534.766 cv
1060.85 534.766 1061.73 534.447 1062.33 533.846 cv
1062.91 533.227 1063.21 532.307 1063.21 531.067 cv
1063.21 530.187 li
1062.83 530.826 1062.35 531.307 1061.77 531.627 cv
1061.19 531.947 1060.51 532.107 1059.71 532.107 cv
1058.35 532.107 1057.27 531.607 1056.45 530.586 cv
1055.63 529.567 1055.23 528.206 1055.23 526.507 cv
1055.23 524.826 1055.63 523.466 1056.45 522.447 cv
1057.27 521.427 1058.35 520.906 1059.71 520.906 cv
1060.51 520.906 1061.19 521.067 1061.77 521.386 cv
1062.35 521.706 1062.83 522.187 1063.21 522.826 cv
1063.21 521.167 li
1065.01 521.167 li
1065.01 530.747 li
f
1077.23 523.266 mo
1077.67 522.466 1078.21 521.887 1078.83 521.487 cv
1079.45 521.107 1080.19 520.906 1081.05 520.906 cv
1082.17 520.906 1083.05 521.307 1083.67 522.107 cv
1084.29 522.906 1084.61 524.047 1084.61 525.507 cv
1084.61 532.107 li
1082.81 532.107 li
1082.81 525.567 li
1082.81 524.526 1082.61 523.747 1082.25 523.227 cv
1081.87 522.727 1081.31 522.466 1080.55 522.466 cv
1079.61 522.466 1078.87 522.786 1078.33 523.406 cv
1077.79 524.026 1077.53 524.867 1077.53 525.927 cv
1077.53 532.107 li
1075.73 532.107 li
1075.73 525.567 li
1075.73 524.526 1075.53 523.747 1075.17 523.227 cv
1074.79 522.727 1074.21 522.466 1073.45 522.466 cv
1072.53 522.466 1071.79 522.786 1071.25 523.406 cv
1070.71 524.026 1070.45 524.867 1070.45 525.927 cv
1070.45 532.107 li
1068.65 532.107 li
1068.65 521.167 li
1070.45 521.167 li
1070.45 522.867 li
1070.85 522.206 1071.35 521.706 1071.93 521.386 cv
1072.49 521.067 1073.17 520.906 1073.97 520.906 cv
1074.77 520.906 1075.43 521.107 1075.99 521.507 cv
1076.55 521.906 1076.95 522.507 1077.23 523.266 cv
f
1092.43 522.427 mo
1091.47 522.427 1090.71 522.807 1090.15 523.567 cv
1089.59 524.326 1089.31 525.346 1089.31 526.646 cv
1089.31 527.966 1089.57 528.987 1090.13 529.747 cv
1090.69 530.507 1091.45 530.867 1092.43 530.867 cv
1093.39 530.867 1094.15 530.507 1094.71 529.747 cv
1095.27 528.987 1095.55 527.966 1095.55 526.646 cv
1095.55 525.367 1095.27 524.326 1094.71 523.567 cv
1094.15 522.807 1093.39 522.427 1092.43 522.427 cv
1092.43 520.906 mo
1093.99 520.906 1095.21 521.427 1096.11 522.427 cv
1096.99 523.447 1097.45 524.846 1097.45 526.646 cv
1097.45 528.447 1096.99 529.846 1096.11 530.846 cv
1095.21 531.867 1093.99 532.367 1092.43 532.367 cv
1090.85 532.367 1089.61 531.867 1088.73 530.846 cv
1087.85 529.846 1087.41 528.447 1087.41 526.646 cv
1087.41 524.846 1087.85 523.447 1088.73 522.427 cv
1089.61 521.427 1090.85 520.906 1092.43 520.906 cv
f
1100.43 521.167 mo
1102.23 521.167 li
1102.23 532.107 li
1100.43 532.107 li
1100.43 521.167 li
1100.43 516.906 mo
1102.23 516.906 li
1102.23 519.187 li
1100.43 519.187 li
1100.43 516.906 li
f
1113.19 522.826 mo
1113.19 516.906 li
1114.99 516.906 li
1114.99 532.107 li
1113.19 532.107 li
1113.19 530.466 li
1112.81 531.127 1112.33 531.607 1111.75 531.906 cv
1111.17 532.206 1110.49 532.367 1109.69 532.367 cv
1108.37 532.367 1107.29 531.846 1106.45 530.807 cv
1105.61 529.766 1105.21 528.367 1105.21 526.646 cv
1105.21 524.927 1105.61 523.547 1106.45 522.487 cv
1107.29 521.447 1108.37 520.906 1109.69 520.906 cv
1110.49 520.906 1111.17 521.067 1111.75 521.386 cv
1112.33 521.706 1112.81 522.187 1113.19 522.826 cv
1107.07 526.646 mo
1107.07 527.966 1107.33 529.007 1107.87 529.766 cv
1108.41 530.526 1109.17 530.887 1110.13 530.887 cv
1111.07 530.887 1111.81 530.526 1112.37 529.766 cv
1112.91 529.007 1113.19 527.966 1113.19 526.646 cv
1113.19 525.326 1112.91 524.307 1112.37 523.547 cv
1111.81 522.786 1111.07 522.406 1110.13 522.406 cv
1109.17 522.406 1108.41 522.786 1107.87 523.547 cv
1107.33 524.307 1107.07 525.326 1107.07 526.646 cv
f
1118.41 516.927 mo
1119.97 516.927 li
1120.93 518.466 1121.67 519.966 1122.15 521.447 cv
1122.63 522.927 1122.89 524.387 1122.89 525.826 cv
1122.89 527.286 1122.63 528.747 1122.15 530.227 cv
1121.67 531.706 1120.93 533.187 1119.97 534.727 cv
1118.41 534.727 li
1119.27 533.227 1119.91 531.766 1120.35 530.286 cv
1120.77 528.826 1120.99 527.346 1120.99 525.826 cv
1120.99 524.326 1120.77 522.846 1120.35 521.386 cv
1119.91 519.927 1119.27 518.447 1118.41 516.927 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
