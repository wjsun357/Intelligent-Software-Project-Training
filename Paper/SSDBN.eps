%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SSDBN-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/11, 10:24:16
%%BoundingBox: 0 0 1153 603
%%HiResBoundingBox: 0 0 1152.6202 602.6108
%%CropBox: 0 0 1152.6202 602.6108
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-11T10:22:26+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-11T10:24:08+08:00"
   xmp:MetadataDate="2019-06-11T10:24:08+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:3611f4fa-4850-4e55-b1b0-f1ae9cd94f97"
   xmpMM:InstanceID="uuid:4bb83ec6-2c19-4bb2-b2ee-15366686e772"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -602.611 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
6.10352e-5 0 mo
6.10352e-5 602.611 li
1152.62 602.611 li
1152.62 0 li
cp
clp
gsave
-.511711 602.853 mo
1153.49 602.853 li
1153.49 -.146733 li
-.511711 -.146733 li
-.511711 602.853 li
clp
-101.512 623.853 mo
1280.89 623.853 li
1280.89 -73.8266 li
-101.512 -73.8266 li
-101.512 623.853 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
71.2883 547.108 mo
1142.65 547.108 li
1142.65 9.89482 li
71.2883 9.89482 li
71.2883 547.108 li
f
119.986 547.108 mo
119.986 550.608 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
119.986 547.108 mo
119.986 550.608 li
@
119.987 556.032 mo
118.967 556.032 118.207 556.532 117.687 557.532 cv
117.167 558.532 116.927 560.032 116.927 562.032 cv
116.927 564.032 117.167 565.532 117.687 566.532 cv
118.207 567.532 118.967 568.032 119.987 568.032 cv
121.007 568.032 121.767 567.532 122.287 566.532 cv
122.787 565.532 123.047 564.032 123.047 562.032 cv
123.047 560.032 122.787 558.532 122.287 557.532 cv
121.767 556.532 121.007 556.032 119.987 556.032 cv
119.987 554.472 mo
121.607 554.472 122.847 555.132 123.727 556.412 cv
124.587 557.712 125.027 559.592 125.027 562.032 cv
125.027 564.492 124.587 566.372 123.727 567.652 cv
122.847 568.932 121.607 569.572 119.987 569.572 cv
118.347 569.572 117.087 568.932 116.227 567.652 cv
115.367 566.372 114.947 564.492 114.947 562.032 cv
114.947 559.592 115.367 557.712 116.227 556.412 cv
117.087 555.132 118.347 554.472 119.987 554.472 cv
f
316.747 547.108 mo
316.747 550.608 li
f
316.747 547.108 mo
316.747 550.608 li
@
301.509 567.652 mo
308.389 567.652 li
308.389 569.312 li
299.129 569.312 li
299.129 567.652 li
299.869 566.892 300.889 565.852 302.189 564.532 cv
303.469 563.232 304.289 562.392 304.629 562.012 cv
305.269 561.312 305.709 560.712 305.949 560.212 cv
306.189 559.732 306.329 559.232 306.329 558.752 cv
306.329 557.992 306.049 557.352 305.509 556.872 cv
304.969 556.392 304.269 556.132 303.389 556.132 cv
302.769 556.132 302.109 556.252 301.429 556.452 cv
300.749 556.672 300.009 556.992 299.229 557.432 cv
299.229 555.432 li
300.029 555.112 300.769 554.872 301.449 554.712 cv
302.129 554.552 302.769 554.472 303.349 554.472 cv
304.849 554.472 306.049 554.852 306.949 555.612 cv
307.849 556.372 308.309 557.372 308.309 558.632 cv
308.309 559.232 308.189 559.812 307.969 560.332 cv
307.749 560.872 307.349 561.512 306.749 562.232 cv
306.589 562.432 306.069 562.972 305.189 563.872 cv
304.309 564.772 303.089 566.032 301.509 567.652 cv
f
316.749 556.032 mo
315.729 556.032 314.969 556.532 314.449 557.532 cv
313.929 558.532 313.689 560.032 313.689 562.032 cv
313.689 564.032 313.929 565.532 314.449 566.532 cv
314.969 567.532 315.729 568.032 316.749 568.032 cv
317.769 568.032 318.529 567.532 319.049 566.532 cv
319.549 565.532 319.809 564.032 319.809 562.032 cv
319.809 560.032 319.549 558.532 319.049 557.532 cv
318.529 556.532 317.769 556.032 316.749 556.032 cv
316.749 554.472 mo
318.369 554.472 319.609 555.132 320.489 556.412 cv
321.349 557.712 321.789 559.592 321.789 562.032 cv
321.789 564.492 321.349 566.372 320.489 567.652 cv
319.609 568.932 318.369 569.572 316.749 569.572 cv
315.109 569.572 313.849 568.932 312.989 567.652 cv
312.129 566.372 311.709 564.492 311.709 562.032 cv
311.709 559.592 312.129 557.712 312.989 556.412 cv
313.849 555.132 315.109 554.472 316.749 554.472 cv
f
329.469 556.032 mo
328.449 556.032 327.689 556.532 327.169 557.532 cv
326.649 558.532 326.409 560.032 326.409 562.032 cv
326.409 564.032 326.649 565.532 327.169 566.532 cv
327.689 567.532 328.449 568.032 329.469 568.032 cv
330.489 568.032 331.249 567.532 331.769 566.532 cv
332.269 565.532 332.529 564.032 332.529 562.032 cv
332.529 560.032 332.269 558.532 331.769 557.532 cv
331.249 556.532 330.489 556.032 329.469 556.032 cv
329.469 554.472 mo
331.089 554.472 332.329 555.132 333.209 556.412 cv
334.069 557.712 334.509 559.592 334.509 562.032 cv
334.509 564.492 334.069 566.372 333.209 567.652 cv
332.329 568.932 331.089 569.572 329.469 569.572 cv
327.829 569.572 326.569 568.932 325.709 567.652 cv
324.849 566.372 324.429 564.492 324.429 562.032 cv
324.429 559.592 324.849 557.712 325.709 556.412 cv
326.569 555.132 327.829 554.472 329.469 554.472 cv
f
513.507 547.108 mo
513.507 550.608 li
f
513.507 547.108 mo
513.507 550.608 li
@
501.989 556.452 mo
497.009 564.232 li
501.989 564.232 li
501.989 556.452 li
501.469 554.732 mo
503.949 554.732 li
503.949 564.232 li
506.029 564.232 li
506.029 565.872 li
503.949 565.872 li
503.949 569.312 li
501.989 569.312 li
501.989 565.872 li
495.409 565.872 li
495.409 563.972 li
501.469 554.732 li
f
513.509 556.032 mo
512.489 556.032 511.729 556.532 511.209 557.532 cv
510.689 558.532 510.449 560.032 510.449 562.032 cv
510.449 564.032 510.689 565.532 511.209 566.532 cv
511.729 567.532 512.489 568.032 513.509 568.032 cv
514.529 568.032 515.289 567.532 515.809 566.532 cv
516.309 565.532 516.569 564.032 516.569 562.032 cv
516.569 560.032 516.309 558.532 515.809 557.532 cv
515.289 556.532 514.529 556.032 513.509 556.032 cv
513.509 554.472 mo
515.129 554.472 516.369 555.132 517.249 556.412 cv
518.109 557.712 518.549 559.592 518.549 562.032 cv
518.549 564.492 518.109 566.372 517.249 567.652 cv
516.369 568.932 515.129 569.572 513.509 569.572 cv
511.869 569.572 510.609 568.932 509.749 567.652 cv
508.889 566.372 508.469 564.492 508.469 562.032 cv
508.469 559.592 508.889 557.712 509.749 556.412 cv
510.609 555.132 511.869 554.472 513.509 554.472 cv
f
526.229 556.032 mo
525.209 556.032 524.449 556.532 523.929 557.532 cv
523.409 558.532 523.169 560.032 523.169 562.032 cv
523.169 564.032 523.409 565.532 523.929 566.532 cv
524.449 567.532 525.209 568.032 526.229 568.032 cv
527.249 568.032 528.009 567.532 528.529 566.532 cv
529.029 565.532 529.289 564.032 529.289 562.032 cv
529.289 560.032 529.029 558.532 528.529 557.532 cv
528.009 556.532 527.249 556.032 526.229 556.032 cv
526.229 554.472 mo
527.849 554.472 529.089 555.132 529.969 556.412 cv
530.829 557.712 531.269 559.592 531.269 562.032 cv
531.269 564.492 530.829 566.372 529.969 567.652 cv
529.089 568.932 527.849 569.572 526.229 569.572 cv
524.589 569.572 523.329 568.932 522.469 567.652 cv
521.609 566.372 521.189 564.492 521.189 562.032 cv
521.189 559.592 521.609 557.712 522.469 556.412 cv
523.329 555.132 524.589 554.472 526.229 554.472 cv
f
710.267 547.108 mo
710.267 550.608 li
f
710.267 547.108 mo
710.267 550.608 li
@
697.789 561.232 mo
696.909 561.232 696.209 561.552 695.689 562.152 cv
695.169 562.752 694.909 563.592 694.909 564.632 cv
694.909 565.692 695.169 566.532 695.689 567.132 cv
696.209 567.732 696.909 568.032 697.789 568.032 cv
698.669 568.032 699.369 567.732 699.889 567.132 cv
700.409 566.532 700.669 565.692 700.669 564.632 cv
700.669 563.592 700.409 562.752 699.889 562.152 cv
699.369 561.552 698.669 561.232 697.789 561.232 cv
701.709 555.052 mo
701.709 556.852 li
701.209 556.612 700.709 556.432 700.209 556.312 cv
699.689 556.192 699.189 556.132 698.709 556.132 cv
697.389 556.132 696.389 556.572 695.709 557.452 cv
695.029 558.332 694.629 559.672 694.549 561.432 cv
694.929 560.872 695.409 560.432 695.989 560.132 cv
696.569 559.832 697.209 559.672 697.909 559.672 cv
699.369 559.672 700.529 560.132 701.369 561.012 cv
702.209 561.892 702.649 563.112 702.649 564.632 cv
702.649 566.132 702.189 567.332 701.309 568.232 cv
700.429 569.132 699.249 569.572 697.789 569.572 cv
696.109 569.572 694.809 568.932 693.929 567.652 cv
693.029 566.372 692.589 564.492 692.589 562.032 cv
692.589 559.732 693.129 557.892 694.229 556.532 cv
695.309 555.172 696.789 554.472 698.629 554.472 cv
699.109 554.472 699.609 554.532 700.129 554.612 cv
700.629 554.712 701.149 554.852 701.709 555.052 cv
f
710.269 556.032 mo
709.249 556.032 708.489 556.532 707.969 557.532 cv
707.449 558.532 707.209 560.032 707.209 562.032 cv
707.209 564.032 707.449 565.532 707.969 566.532 cv
708.489 567.532 709.249 568.032 710.269 568.032 cv
711.289 568.032 712.049 567.532 712.569 566.532 cv
713.069 565.532 713.329 564.032 713.329 562.032 cv
713.329 560.032 713.069 558.532 712.569 557.532 cv
712.049 556.532 711.289 556.032 710.269 556.032 cv
710.269 554.472 mo
711.889 554.472 713.129 555.132 714.009 556.412 cv
714.869 557.712 715.309 559.592 715.309 562.032 cv
715.309 564.492 714.869 566.372 714.009 567.652 cv
713.129 568.932 711.889 569.572 710.269 569.572 cv
708.629 569.572 707.369 568.932 706.509 567.652 cv
705.649 566.372 705.229 564.492 705.229 562.032 cv
705.229 559.592 705.649 557.712 706.509 556.412 cv
707.369 555.132 708.629 554.472 710.269 554.472 cv
f
722.989 556.032 mo
721.969 556.032 721.209 556.532 720.689 557.532 cv
720.169 558.532 719.929 560.032 719.929 562.032 cv
719.929 564.032 720.169 565.532 720.689 566.532 cv
721.209 567.532 721.969 568.032 722.989 568.032 cv
724.009 568.032 724.769 567.532 725.289 566.532 cv
725.789 565.532 726.049 564.032 726.049 562.032 cv
726.049 560.032 725.789 558.532 725.289 557.532 cv
724.769 556.532 724.009 556.032 722.989 556.032 cv
722.989 554.472 mo
724.609 554.472 725.849 555.132 726.729 556.412 cv
727.589 557.712 728.029 559.592 728.029 562.032 cv
728.029 564.492 727.589 566.372 726.729 567.652 cv
725.849 568.932 724.609 569.572 722.989 569.572 cv
721.349 569.572 720.089 568.932 719.229 567.652 cv
718.369 566.372 717.949 564.492 717.949 562.032 cv
717.949 559.592 718.369 557.712 719.229 556.412 cv
720.089 555.132 721.349 554.472 722.989 554.472 cv
f
907.028 547.108 mo
907.028 550.608 li
f
907.028 547.108 mo
907.028 550.608 li
@
894.31 562.392 mo
893.37 562.392 892.63 562.652 892.09 563.152 cv
891.55 563.652 891.29 564.332 891.29 565.212 cv
891.29 566.092 891.55 566.792 892.09 567.292 cv
892.63 567.792 893.37 568.032 894.31 568.032 cv
895.23 568.032 895.97 567.792 896.51 567.272 cv
897.05 566.772 897.33 566.092 897.33 565.212 cv
897.33 564.332 897.05 563.652 896.53 563.152 cv
895.99 562.652 895.25 562.392 894.31 562.392 cv
892.33 561.552 mo
891.49 561.352 890.83 560.952 890.35 560.372 cv
889.87 559.792 889.65 559.092 889.65 558.252 cv
889.65 557.092 890.05 556.172 890.89 555.492 cv
891.71 554.812 892.85 554.472 894.31 554.472 cv
895.75 554.472 896.89 554.812 897.73 555.492 cv
898.55 556.172 898.97 557.092 898.97 558.252 cv
898.97 559.092 898.73 559.792 898.25 560.372 cv
897.77 560.952 897.13 561.352 896.29 561.552 cv
897.23 561.772 897.97 562.212 898.51 562.852 cv
899.03 563.492 899.31 564.292 899.31 565.212 cv
899.31 566.632 898.87 567.712 898.01 568.452 cv
897.13 569.212 895.91 569.572 894.31 569.572 cv
892.69 569.572 891.45 569.212 890.59 568.452 cv
889.73 567.712 889.31 566.632 889.31 565.212 cv
889.31 564.292 889.57 563.492 890.11 562.852 cv
890.63 562.212 891.37 561.772 892.33 561.552 cv
891.61 558.432 mo
891.61 559.192 891.83 559.792 892.31 560.212 cv
892.79 560.632 893.45 560.832 894.31 560.832 cv
895.15 560.832 895.81 560.632 896.29 560.212 cv
896.77 559.792 897.01 559.192 897.01 558.432 cv
897.01 557.672 896.77 557.092 896.29 556.672 cv
895.81 556.252 895.15 556.032 894.31 556.032 cv
893.45 556.032 892.79 556.252 892.31 556.672 cv
891.83 557.092 891.61 557.672 891.61 558.432 cv
f
907.03 556.032 mo
906.01 556.032 905.25 556.532 904.73 557.532 cv
904.21 558.532 903.97 560.032 903.97 562.032 cv
903.97 564.032 904.21 565.532 904.73 566.532 cv
905.25 567.532 906.01 568.032 907.03 568.032 cv
908.05 568.032 908.81 567.532 909.33 566.532 cv
909.83 565.532 910.09 564.032 910.09 562.032 cv
910.09 560.032 909.83 558.532 909.33 557.532 cv
908.81 556.532 908.05 556.032 907.03 556.032 cv
907.03 554.472 mo
908.65 554.472 909.89 555.132 910.77 556.412 cv
911.63 557.712 912.07 559.592 912.07 562.032 cv
912.07 564.492 911.63 566.372 910.77 567.652 cv
909.89 568.932 908.65 569.572 907.03 569.572 cv
905.39 569.572 904.13 568.932 903.27 567.652 cv
902.41 566.372 901.99 564.492 901.99 562.032 cv
901.99 559.592 902.41 557.712 903.27 556.412 cv
904.13 555.132 905.39 554.472 907.03 554.472 cv
f
919.75 556.032 mo
918.73 556.032 917.97 556.532 917.45 557.532 cv
916.93 558.532 916.69 560.032 916.69 562.032 cv
916.69 564.032 916.93 565.532 917.45 566.532 cv
917.97 567.532 918.73 568.032 919.75 568.032 cv
920.77 568.032 921.53 567.532 922.05 566.532 cv
922.55 565.532 922.81 564.032 922.81 562.032 cv
922.81 560.032 922.55 558.532 922.05 557.532 cv
921.53 556.532 920.77 556.032 919.75 556.032 cv
919.75 554.472 mo
921.37 554.472 922.61 555.132 923.49 556.412 cv
924.35 557.712 924.79 559.592 924.79 562.032 cv
924.79 564.492 924.35 566.372 923.49 567.652 cv
922.61 568.932 921.37 569.572 919.75 569.572 cv
918.11 569.572 916.85 568.932 915.99 567.652 cv
915.13 566.372 914.71 564.492 914.71 562.032 cv
914.71 559.592 915.13 557.712 915.99 556.412 cv
916.85 555.132 918.11 554.472 919.75 554.472 cv
f
1103.79 547.108 mo
1103.79 550.608 li
f
1103.79 547.108 mo
1103.79 550.608 li
@
1080.83 567.652 mo
1084.05 567.652 li
1084.05 556.532 li
1080.55 557.232 li
1080.55 555.432 li
1084.03 554.732 li
1086.01 554.732 li
1086.01 567.652 li
1089.23 567.652 li
1089.23 569.312 li
1080.83 569.312 li
1080.83 567.652 li
f
1097.43 556.032 mo
1096.41 556.032 1095.65 556.532 1095.13 557.532 cv
1094.61 558.532 1094.37 560.032 1094.37 562.032 cv
1094.37 564.032 1094.61 565.532 1095.13 566.532 cv
1095.65 567.532 1096.41 568.032 1097.43 568.032 cv
1098.45 568.032 1099.21 567.532 1099.73 566.532 cv
1100.23 565.532 1100.49 564.032 1100.49 562.032 cv
1100.49 560.032 1100.23 558.532 1099.73 557.532 cv
1099.21 556.532 1098.45 556.032 1097.43 556.032 cv
1097.43 554.472 mo
1099.05 554.472 1100.29 555.132 1101.17 556.412 cv
1102.03 557.712 1102.47 559.592 1102.47 562.032 cv
1102.47 564.492 1102.03 566.372 1101.17 567.652 cv
1100.29 568.932 1099.05 569.572 1097.43 569.572 cv
1095.79 569.572 1094.53 568.932 1093.67 567.652 cv
1092.81 566.372 1092.39 564.492 1092.39 562.032 cv
1092.39 559.592 1092.81 557.712 1093.67 556.412 cv
1094.53 555.132 1095.79 554.472 1097.43 554.472 cv
f
1110.15 556.032 mo
1109.13 556.032 1108.37 556.532 1107.85 557.532 cv
1107.33 558.532 1107.09 560.032 1107.09 562.032 cv
1107.09 564.032 1107.33 565.532 1107.85 566.532 cv
1108.37 567.532 1109.13 568.032 1110.15 568.032 cv
1111.17 568.032 1111.93 567.532 1112.45 566.532 cv
1112.95 565.532 1113.21 564.032 1113.21 562.032 cv
1113.21 560.032 1112.95 558.532 1112.45 557.532 cv
1111.93 556.532 1111.17 556.032 1110.15 556.032 cv
1110.15 554.472 mo
1111.77 554.472 1113.01 555.132 1113.89 556.412 cv
1114.75 557.712 1115.19 559.592 1115.19 562.032 cv
1115.19 564.492 1114.75 566.372 1113.89 567.652 cv
1113.01 568.932 1111.77 569.572 1110.15 569.572 cv
1108.51 569.572 1107.25 568.932 1106.39 567.652 cv
1105.53 566.372 1105.11 564.492 1105.11 562.032 cv
1105.11 559.592 1105.53 557.712 1106.39 556.412 cv
1107.25 555.132 1108.51 554.472 1110.15 554.472 cv
f
1122.87 556.032 mo
1121.85 556.032 1121.09 556.532 1120.57 557.532 cv
1120.05 558.532 1119.81 560.032 1119.81 562.032 cv
1119.81 564.032 1120.05 565.532 1120.57 566.532 cv
1121.09 567.532 1121.85 568.032 1122.87 568.032 cv
1123.89 568.032 1124.65 567.532 1125.17 566.532 cv
1125.67 565.532 1125.93 564.032 1125.93 562.032 cv
1125.93 560.032 1125.67 558.532 1125.17 557.532 cv
1124.65 556.532 1123.89 556.032 1122.87 556.032 cv
1122.87 554.472 mo
1124.49 554.472 1125.73 555.132 1126.61 556.412 cv
1127.47 557.712 1127.91 559.592 1127.91 562.032 cv
1127.91 564.492 1127.47 566.372 1126.61 567.652 cv
1125.73 568.932 1124.49 569.572 1122.87 569.572 cv
1121.23 569.572 1119.97 568.932 1119.11 567.652 cv
1118.25 566.372 1117.83 564.492 1117.83 562.032 cv
1117.83 559.592 1118.25 557.712 1119.11 556.412 cv
1119.97 555.132 1121.23 554.472 1122.87 554.472 cv
f
578.303 578.091 mo
587.523 578.091 li
587.523 579.751 li
580.283 579.751 li
580.283 584.071 li
587.223 584.071 li
587.223 585.731 li
580.283 585.731 li
580.283 591.011 li
587.703 591.011 li
587.703 592.671 li
578.303 592.671 li
578.303 578.091 li
f
592.603 591.031 mo
592.603 596.811 li
590.803 596.811 li
590.803 581.731 li
592.603 581.731 li
592.603 583.391 li
592.963 582.751 593.443 582.271 594.023 581.951 cv
594.603 581.631 595.303 581.471 596.103 581.471 cv
597.423 581.471 598.503 582.011 599.343 583.051 cv
600.163 584.111 600.583 585.491 600.583 587.211 cv
600.583 588.931 600.163 590.331 599.343 591.371 cv
598.503 592.411 597.423 592.931 596.103 592.931 cv
595.303 592.931 594.603 592.771 594.023 592.471 cv
593.443 592.171 592.963 591.691 592.603 591.031 cv
598.723 587.211 mo
598.723 585.891 598.443 584.871 597.903 584.111 cv
597.343 583.351 596.603 582.971 595.663 582.971 cv
594.703 582.971 593.963 583.351 593.423 584.111 cv
592.863 584.871 592.603 585.891 592.603 587.211 cv
592.603 588.531 592.863 589.571 593.423 590.331 cv
593.963 591.091 594.703 591.451 595.663 591.451 cv
596.603 591.451 597.343 591.091 597.903 590.331 cv
598.443 589.571 598.723 588.531 598.723 587.211 cv
f
607.803 582.991 mo
606.843 582.991 606.083 583.371 605.523 584.131 cv
604.963 584.891 604.683 585.911 604.683 587.211 cv
604.683 588.531 604.943 589.551 605.503 590.311 cv
606.063 591.071 606.823 591.431 607.803 591.431 cv
608.763 591.431 609.523 591.071 610.083 590.311 cv
610.643 589.551 610.923 588.531 610.923 587.211 cv
610.923 585.931 610.643 584.891 610.083 584.131 cv
609.523 583.371 608.763 582.991 607.803 582.991 cv
607.803 581.471 mo
609.363 581.471 610.583 581.991 611.483 582.991 cv
612.363 584.011 612.823 585.411 612.823 587.211 cv
612.823 589.011 612.363 590.411 611.483 591.411 cv
610.583 592.431 609.363 592.931 607.803 592.931 cv
606.223 592.931 604.983 592.431 604.103 591.411 cv
603.223 590.411 602.783 589.011 602.783 587.211 cv
602.783 585.411 603.223 584.011 604.103 582.991 cv
604.983 581.991 606.223 581.471 607.803 581.471 cv
f
623.683 582.151 mo
623.683 583.831 li
623.163 583.551 622.663 583.351 622.143 583.211 cv
621.623 583.071 621.123 582.991 620.603 582.991 cv
619.443 582.991 618.523 583.371 617.883 584.111 cv
617.243 584.851 616.923 585.891 616.923 587.211 cv
616.923 588.551 617.243 589.591 617.883 590.331 cv
618.523 591.071 619.443 591.431 620.603 591.431 cv
621.123 591.431 621.623 591.371 622.143 591.231 cv
622.663 591.091 623.163 590.871 623.683 590.591 cv
623.683 592.251 li
623.163 592.491 622.643 592.671 622.123 592.771 cv
621.583 592.871 621.003 592.931 620.403 592.931 cv
618.763 592.931 617.443 592.431 616.483 591.391 cv
615.503 590.371 615.023 588.971 615.023 587.211 cv
615.023 585.431 615.503 584.031 616.483 583.011 cv
617.463 581.991 618.803 581.471 620.523 581.471 cv
621.083 581.471 621.623 581.531 622.143 581.651 cv
622.663 581.771 623.183 581.931 623.683 582.151 cv
f
635.903 586.071 mo
635.903 592.671 li
634.103 592.671 li
634.103 586.131 li
634.103 585.091 633.883 584.331 633.483 583.811 cv
633.083 583.291 632.483 583.031 631.683 583.031 cv
630.703 583.031 629.943 583.351 629.383 583.971 cv
628.823 584.591 628.543 585.431 628.543 586.491 cv
628.543 592.671 li
626.743 592.671 li
626.743 577.471 li
628.543 577.471 li
628.543 583.431 li
628.963 582.791 629.463 582.291 630.063 581.971 cv
630.643 581.651 631.323 581.471 632.083 581.471 cv
633.323 581.471 634.283 581.871 634.923 582.651 cv
635.563 583.431 635.903 584.571 635.903 586.071 cv
f
71.2883 494.047 mo
67.7883 494.047 li
f
71.2883 494.047 mo
67.7883 494.047 li
@
38.8514 488.369 mo
37.8314 488.369 37.0714 488.869 36.5514 489.869 cv
36.0314 490.869 35.7914 492.369 35.7914 494.369 cv
35.7914 496.369 36.0314 497.869 36.5514 498.869 cv
37.0714 499.869 37.8314 500.369 38.8514 500.369 cv
39.8714 500.369 40.6314 499.869 41.1514 498.869 cv
41.6514 497.869 41.9114 496.369 41.9114 494.369 cv
41.9114 492.369 41.6514 490.869 41.1514 489.869 cv
40.6314 488.869 39.8714 488.369 38.8514 488.369 cv
38.8514 486.809 mo
40.4714 486.809 41.7114 487.469 42.5914 488.749 cv
43.4514 490.049 43.8914 491.929 43.8914 494.369 cv
43.8914 496.829 43.4514 498.709 42.5914 499.989 cv
41.7114 501.269 40.4714 501.909 38.8514 501.909 cv
37.2114 501.909 35.9514 501.269 35.0914 499.989 cv
34.2314 498.709 33.8114 496.829 33.8114 494.369 cv
33.8114 491.929 34.2314 490.049 35.0914 488.749 cv
35.9514 487.469 37.2114 486.809 38.8514 486.809 cv
f
47.3514 499.169 mo
49.4114 499.169 li
49.4114 501.649 li
47.3514 501.649 li
47.3514 499.169 li
f
55.4113 499.989 mo
62.2913 499.989 li
62.2913 501.649 li
53.0313 501.649 li
53.0313 499.989 li
53.7713 499.229 54.7913 498.189 56.0913 496.869 cv
57.3713 495.569 58.1913 494.729 58.5313 494.349 cv
59.1713 493.649 59.6113 493.049 59.8513 492.549 cv
60.0913 492.069 60.2313 491.569 60.2313 491.089 cv
60.2313 490.329 59.9513 489.689 59.4113 489.209 cv
58.8713 488.729 58.1713 488.469 57.2913 488.469 cv
56.6713 488.469 56.0113 488.589 55.3313 488.789 cv
54.6513 489.009 53.9113 489.329 53.1313 489.769 cv
53.1313 487.769 li
53.9313 487.449 54.6713 487.209 55.3513 487.049 cv
56.0313 486.889 56.6713 486.809 57.2513 486.809 cv
58.7513 486.809 59.9513 487.189 60.8513 487.949 cv
61.7513 488.709 62.2113 489.709 62.2113 490.969 cv
62.2113 491.569 62.0913 492.149 61.8713 492.669 cv
61.6513 493.209 61.2513 493.849 60.6513 494.569 cv
60.4913 494.769 59.9713 495.309 59.0913 496.209 cv
58.2113 497.109 56.9913 498.369 55.4113 499.989 cv
f
71.2883 376.418 mo
67.7883 376.418 li
f
71.2883 376.418 mo
67.7883 376.418 li
@
38.8514 370.74 mo
37.8314 370.74 37.0714 371.24 36.5514 372.24 cv
36.0314 373.24 35.7914 374.74 35.7914 376.74 cv
35.7914 378.74 36.0314 380.24 36.5514 381.24 cv
37.0714 382.24 37.8314 382.74 38.8514 382.74 cv
39.8714 382.74 40.6314 382.24 41.1514 381.24 cv
41.6514 380.24 41.9114 378.74 41.9114 376.74 cv
41.9114 374.74 41.6514 373.24 41.1514 372.24 cv
40.6314 371.24 39.8714 370.74 38.8514 370.74 cv
38.8514 369.18 mo
40.4714 369.18 41.7114 369.84 42.5914 371.12 cv
43.4514 372.42 43.8914 374.3 43.8914 376.74 cv
43.8914 379.2 43.4514 381.08 42.5914 382.36 cv
41.7114 383.64 40.4714 384.28 38.8514 384.28 cv
37.2114 384.28 35.9514 383.64 35.0914 382.36 cv
34.2314 381.08 33.8114 379.2 33.8114 376.74 cv
33.8114 374.3 34.2314 372.42 35.0914 371.12 cv
35.9514 369.84 37.2114 369.18 38.8514 369.18 cv
f
47.3514 381.54 mo
49.4114 381.54 li
49.4114 384.02 li
47.3514 384.02 li
47.3514 381.54 li
f
59.1313 371.16 mo
54.1513 378.94 li
59.1313 378.94 li
59.1313 371.16 li
58.6113 369.44 mo
61.0913 369.44 li
61.0913 378.94 li
63.1713 378.94 li
63.1713 380.58 li
61.0913 380.58 li
61.0913 384.02 li
59.1313 384.02 li
59.1313 380.58 li
52.5513 380.58 li
52.5513 378.68 li
58.6113 369.44 li
f
71.2883 258.789 mo
67.7883 258.789 li
f
71.2883 258.789 mo
67.7883 258.789 li
@
38.8514 253.111 mo
37.8314 253.111 37.0714 253.611 36.5514 254.611 cv
36.0314 255.611 35.7914 257.111 35.7914 259.111 cv
35.7914 261.111 36.0314 262.611 36.5514 263.611 cv
37.0714 264.611 37.8314 265.111 38.8514 265.111 cv
39.8714 265.111 40.6314 264.611 41.1514 263.611 cv
41.6514 262.611 41.9114 261.111 41.9114 259.111 cv
41.9114 257.111 41.6514 255.611 41.1514 254.611 cv
40.6314 253.611 39.8714 253.111 38.8514 253.111 cv
38.8514 251.551 mo
40.4714 251.551 41.7114 252.211 42.5914 253.491 cv
43.4514 254.791 43.8914 256.671 43.8914 259.111 cv
43.8914 261.571 43.4514 263.451 42.5914 264.731 cv
41.7114 266.011 40.4714 266.651 38.8514 266.651 cv
37.2114 266.651 35.9514 266.011 35.0914 264.731 cv
34.2314 263.451 33.8114 261.571 33.8114 259.111 cv
33.8114 256.671 34.2314 254.791 35.0914 253.491 cv
35.9514 252.211 37.2114 251.551 38.8514 251.551 cv
f
47.3514 263.911 mo
49.4114 263.911 li
49.4114 266.391 li
47.3514 266.391 li
47.3514 263.911 li
f
58.1713 258.311 mo
57.2913 258.311 56.5913 258.631 56.0713 259.231 cv
55.5513 259.831 55.2913 260.671 55.2913 261.711 cv
55.2913 262.771 55.5513 263.611 56.0713 264.211 cv
56.5913 264.811 57.2913 265.111 58.1713 265.111 cv
59.0513 265.111 59.7513 264.811 60.2713 264.211 cv
60.7913 263.611 61.0513 262.771 61.0513 261.711 cv
61.0513 260.671 60.7913 259.831 60.2713 259.231 cv
59.7513 258.631 59.0513 258.311 58.1713 258.311 cv
62.0913 252.131 mo
62.0913 253.931 li
61.5913 253.691 61.0913 253.511 60.5913 253.391 cv
60.0713 253.271 59.5713 253.211 59.0913 253.211 cv
57.7713 253.211 56.7713 253.651 56.0913 254.531 cv
55.4113 255.411 55.0113 256.751 54.9313 258.511 cv
55.3113 257.951 55.7913 257.511 56.3713 257.211 cv
56.9513 256.911 57.5913 256.751 58.2913 256.751 cv
59.7513 256.751 60.9113 257.211 61.7513 258.091 cv
62.5913 258.971 63.0313 260.191 63.0313 261.711 cv
63.0313 263.211 62.5713 264.411 61.6913 265.311 cv
60.8113 266.211 59.6313 266.651 58.1713 266.651 cv
56.4913 266.651 55.1913 266.011 54.3113 264.731 cv
53.4113 263.451 52.9713 261.571 52.9713 259.111 cv
52.9713 256.811 53.5113 254.971 54.6113 253.611 cv
55.6913 252.251 57.1713 251.551 59.0113 251.551 cv
59.4913 251.551 59.9913 251.611 60.5113 251.691 cv
61.0113 251.791 61.5313 251.931 62.0913 252.131 cv
f
71.2883 141.16 mo
67.7883 141.16 li
f
71.2883 141.16 mo
67.7883 141.16 li
@
38.8514 135.482 mo
37.8314 135.482 37.0714 135.982 36.5514 136.982 cv
36.0314 137.982 35.7914 139.482 35.7914 141.482 cv
35.7914 143.482 36.0314 144.982 36.5514 145.982 cv
37.0714 146.982 37.8314 147.482 38.8514 147.482 cv
39.8714 147.482 40.6314 146.982 41.1514 145.982 cv
41.6514 144.982 41.9114 143.482 41.9114 141.482 cv
41.9114 139.482 41.6514 137.982 41.1514 136.982 cv
40.6314 135.982 39.8714 135.482 38.8514 135.482 cv
38.8514 133.922 mo
40.4714 133.922 41.7114 134.582 42.5914 135.862 cv
43.4514 137.162 43.8914 139.042 43.8914 141.482 cv
43.8914 143.942 43.4514 145.822 42.5914 147.102 cv
41.7114 148.382 40.4714 149.022 38.8514 149.022 cv
37.2114 149.022 35.9514 148.382 35.0914 147.102 cv
34.2314 145.822 33.8114 143.942 33.8114 141.482 cv
33.8114 139.042 34.2314 137.162 35.0914 135.862 cv
35.9514 134.582 37.2114 133.922 38.8514 133.922 cv
f
47.3514 146.282 mo
49.4114 146.282 li
49.4114 148.762 li
47.3514 148.762 li
47.3514 146.282 li
f
57.9313 141.842 mo
56.9913 141.842 56.2513 142.102 55.7113 142.602 cv
55.1713 143.102 54.9113 143.782 54.9113 144.662 cv
54.9113 145.542 55.1713 146.242 55.7113 146.742 cv
56.2513 147.242 56.9913 147.482 57.9313 147.482 cv
58.8513 147.482 59.5913 147.242 60.1313 146.722 cv
60.6713 146.222 60.9513 145.542 60.9513 144.662 cv
60.9513 143.782 60.6713 143.102 60.1513 142.602 cv
59.6113 142.102 58.8713 141.842 57.9313 141.842 cv
55.9513 141.002 mo
55.1113 140.802 54.4513 140.402 53.9713 139.822 cv
53.4913 139.242 53.2713 138.542 53.2713 137.702 cv
53.2713 136.542 53.6713 135.622 54.5113 134.942 cv
55.3313 134.262 56.4713 133.922 57.9313 133.922 cv
59.3713 133.922 60.5113 134.262 61.3513 134.942 cv
62.1713 135.622 62.5913 136.542 62.5913 137.702 cv
62.5913 138.542 62.3513 139.242 61.8713 139.822 cv
61.3913 140.402 60.7513 140.802 59.9113 141.002 cv
60.8513 141.222 61.5913 141.662 62.1313 142.302 cv
62.6513 142.942 62.9313 143.742 62.9313 144.662 cv
62.9313 146.082 62.4913 147.162 61.6313 147.902 cv
60.7513 148.662 59.5313 149.022 57.9313 149.022 cv
56.3113 149.022 55.0713 148.662 54.2113 147.902 cv
53.3513 147.162 52.9313 146.082 52.9313 144.662 cv
52.9313 143.742 53.1913 142.942 53.7313 142.302 cv
54.2513 141.662 54.9913 141.222 55.9513 141.002 cv
55.2313 137.882 mo
55.2313 138.642 55.4513 139.242 55.9313 139.662 cv
56.4113 140.082 57.0713 140.282 57.9313 140.282 cv
58.7713 140.282 59.4313 140.082 59.9113 139.662 cv
60.3913 139.242 60.6313 138.642 60.6313 137.882 cv
60.6313 137.122 60.3913 136.542 59.9113 136.122 cv
59.4313 135.702 58.7713 135.482 57.9313 135.482 cv
57.0713 135.482 56.4113 135.702 55.9313 136.122 cv
55.4513 136.542 55.2313 137.122 55.2313 137.882 cv
f
71.2883 23.531 mo
67.7883 23.531 li
f
71.2883 23.531 mo
67.7883 23.531 li
@
34.9714 29.4726 mo
38.1914 29.4726 li
38.1914 18.3526 li
34.6914 19.0526 li
34.6914 17.2526 li
38.1714 16.5526 li
40.1514 16.5526 li
40.1514 29.4726 li
43.3714 29.4726 li
43.3714 31.1326 li
34.9714 31.1326 li
34.9714 29.4726 li
f
47.3514 28.6526 mo
49.4114 28.6526 li
49.4114 31.1326 li
47.3514 31.1326 li
47.3514 28.6526 li
f
57.9313 17.8526 mo
56.9113 17.8526 56.1513 18.3526 55.6313 19.3526 cv
55.1113 20.3526 54.8713 21.8526 54.8713 23.8526 cv
54.8713 25.8526 55.1113 27.3526 55.6313 28.3526 cv
56.1513 29.3526 56.9113 29.8526 57.9313 29.8526 cv
58.9513 29.8526 59.7113 29.3526 60.2313 28.3526 cv
60.7313 27.3526 60.9913 25.8526 60.9913 23.8526 cv
60.9913 21.8526 60.7313 20.3526 60.2313 19.3526 cv
59.7113 18.3526 58.9513 17.8526 57.9313 17.8526 cv
57.9313 16.2926 mo
59.5513 16.2926 60.7913 16.9526 61.6713 18.2326 cv
62.5313 19.5326 62.9713 21.4126 62.9713 23.8526 cv
62.9713 26.3126 62.5313 28.1926 61.6713 29.4726 cv
60.7913 30.7526 59.5513 31.3926 57.9313 31.3926 cv
56.2913 31.3926 55.0313 30.7526 54.1713 29.4726 cv
53.3113 28.1926 52.8913 26.3126 52.8913 23.8526 cv
52.8913 21.4126 53.3113 19.5326 54.1713 18.2326 cv
55.0313 16.9526 56.2913 16.2926 57.9313 16.2926 cv
f
11.6952 343.826 mo
18.9552 346.506 li
18.9552 341.146 li
11.6952 343.826 li
9.75516 344.946 mo
9.75516 342.706 li
24.3352 337.146 li
24.3352 339.206 li
20.5952 340.526 li
20.5952 347.106 li
24.3352 348.426 li
24.3352 350.506 li
9.75516 344.946 li
f
13.8152 327.226 mo
15.4952 327.226 li
15.2152 327.746 15.0152 328.246 14.8752 328.766 cv
14.7352 329.286 14.6552 329.786 14.6552 330.306 cv
14.6552 331.466 15.0352 332.386 15.7752 333.026 cv
16.5152 333.666 17.5552 333.986 18.8752 333.986 cv
20.2152 333.986 21.2552 333.666 21.9952 333.026 cv
22.7352 332.386 23.0952 331.466 23.0952 330.306 cv
23.0952 329.786 23.0352 329.286 22.8952 328.766 cv
22.7552 328.246 22.5352 327.746 22.2552 327.226 cv
23.9152 327.226 li
24.1552 327.746 24.3352 328.266 24.4352 328.786 cv
24.5352 329.326 24.5952 329.906 24.5952 330.506 cv
24.5952 332.146 24.0952 333.466 23.0552 334.426 cv
22.0352 335.406 20.6352 335.886 18.8752 335.886 cv
17.0952 335.886 15.6952 335.406 14.6752 334.426 cv
13.6552 333.446 13.1352 332.106 13.1352 330.386 cv
13.1352 329.826 13.1952 329.286 13.3152 328.766 cv
13.4352 328.246 13.5952 327.726 13.8152 327.226 cv
f
13.8152 316.226 mo
15.4952 316.226 li
15.2152 316.746 15.0152 317.246 14.8752 317.766 cv
14.7352 318.286 14.6552 318.786 14.6552 319.306 cv
14.6552 320.466 15.0352 321.386 15.7752 322.026 cv
16.5152 322.666 17.5552 322.986 18.8752 322.986 cv
20.2152 322.986 21.2552 322.666 21.9952 322.026 cv
22.7352 321.386 23.0952 320.466 23.0952 319.306 cv
23.0952 318.786 23.0352 318.286 22.8952 317.766 cv
22.7552 317.246 22.5352 316.746 22.2552 316.226 cv
23.9152 316.226 li
24.1552 316.746 24.3352 317.266 24.4352 317.786 cv
24.5352 318.326 24.5952 318.906 24.5952 319.506 cv
24.5952 321.146 24.0952 322.466 23.0552 323.426 cv
22.0352 324.406 20.6352 324.886 18.8752 324.886 cv
17.0952 324.886 15.6952 324.406 14.6752 323.426 cv
13.6552 322.446 13.1352 321.106 13.1352 319.386 cv
13.1352 318.826 13.1952 318.286 13.3152 317.766 cv
13.4352 317.246 13.5952 316.726 13.8152 316.226 cv
f
20.0152 313.285 mo
13.3952 313.285 li
13.3952 311.486 li
19.9552 311.486 li
20.9952 311.486 21.7552 311.285 22.2752 310.885 cv
22.7952 310.486 23.0552 309.885 23.0552 309.065 cv
23.0552 308.105 22.7552 307.326 22.1352 306.766 cv
21.5152 306.206 20.6752 305.926 19.5952 305.926 cv
13.3952 305.926 li
13.3952 304.125 li
24.3352 304.125 li
24.3352 305.926 li
22.6552 305.926 li
23.3352 306.366 23.8152 306.885 24.1352 307.445 cv
24.4352 308.026 24.5952 308.686 24.5952 309.445 cv
24.5952 310.706 24.2152 311.665 23.4352 312.306 cv
22.6752 312.966 21.5352 313.285 20.0152 313.285 cv
13.1352 308.766 mo
13.1352 308.766 li
f
15.0752 294.085 mo
14.9552 294.285 14.8752 294.505 14.8152 294.745 cv
14.7752 294.985 14.7352 295.245 14.7352 295.525 cv
14.7352 296.545 15.0752 297.325 15.7352 297.865 cv
16.3952 298.425 17.3352 298.685 18.5752 298.685 cv
24.3352 298.685 li
24.3352 300.485 li
13.3952 300.485 li
13.3952 298.685 li
15.0952 298.685 li
14.4352 298.325 13.9352 297.825 13.6152 297.225 cv
13.2952 296.625 13.1352 295.885 13.1352 295.005 cv
13.1352 294.885 13.1552 294.745 13.1552 294.585 cv
13.1752 294.445 13.1952 294.285 13.2352 294.085 cv
15.0752 294.085 li
f
18.8352 287.226 mo
18.8352 288.686 19.0152 289.686 19.3352 290.246 cv
19.6752 290.806 20.2352 291.086 21.0352 291.086 cv
21.6752 291.086 22.1952 290.886 22.5552 290.466 cv
22.9352 290.046 23.1152 289.466 23.1152 288.746 cv
23.1152 287.746 22.7752 286.946 22.0552 286.346 cv
21.3552 285.746 20.4152 285.446 19.2352 285.446 cv
18.8352 285.446 li
18.8352 287.226 li
18.0952 283.646 mo
24.3352 283.646 li
24.3352 285.446 li
22.6752 285.446 li
23.3552 285.866 23.8352 286.386 24.1352 286.986 cv
24.4352 287.586 24.5952 288.346 24.5952 289.226 cv
24.5952 290.346 24.2952 291.246 23.6752 291.906 cv
23.0552 292.566 22.2152 292.886 21.1552 292.886 cv
19.9352 292.886 19.0152 292.486 18.3752 291.646 cv
17.7552 290.826 17.4352 289.606 17.4352 287.966 cv
17.4352 285.446 li
17.2552 285.446 li
16.4352 285.446 15.7952 285.726 15.3352 286.266 cv
14.8952 286.806 14.6552 287.566 14.6552 288.546 cv
14.6552 289.186 14.7352 289.786 14.8952 290.386 cv
15.0552 290.986 15.2752 291.546 15.5552 292.086 cv
13.8952 292.086 li
13.6552 291.446 13.4552 290.806 13.3352 290.186 cv
13.2152 289.566 13.1352 288.966 13.1352 288.366 cv
13.1352 286.786 13.5552 285.606 14.3752 284.826 cv
15.1952 284.046 16.4352 283.646 18.0952 283.646 cv
f
13.8152 272.065 mo
15.4952 272.065 li
15.2152 272.585 15.0152 273.085 14.8752 273.605 cv
14.7352 274.125 14.6552 274.625 14.6552 275.145 cv
14.6552 276.305 15.0352 277.225 15.7752 277.865 cv
16.5152 278.505 17.5552 278.825 18.8752 278.825 cv
20.2152 278.825 21.2552 278.505 21.9952 277.865 cv
22.7352 277.225 23.0952 276.305 23.0952 275.145 cv
23.0952 274.625 23.0352 274.125 22.8952 273.605 cv
22.7552 273.085 22.5352 272.585 22.2552 272.065 cv
23.9152 272.065 li
24.1552 272.585 24.3352 273.105 24.4352 273.625 cv
24.5352 274.165 24.5952 274.745 24.5952 275.345 cv
24.5952 276.985 24.0952 278.305 23.0552 279.265 cv
22.0352 280.245 20.6352 280.725 18.8752 280.725 cv
17.0952 280.725 15.6952 280.245 14.6752 279.265 cv
13.6552 278.285 13.1352 276.945 13.1352 275.225 cv
13.1352 274.665 13.1952 274.125 13.3152 273.605 cv
13.4352 273.085 13.5952 272.565 13.8152 272.065 cv
f
25.3352 264.385 mo
26.6152 264.905 27.4752 265.405 27.8752 265.885 cv
28.2752 266.365 28.4752 267.005 28.4752 267.805 cv
28.4752 269.245 li
26.9752 269.245 li
26.9752 268.185 li
26.9752 267.705 26.8552 267.325 26.6152 267.045 cv
26.3752 266.765 25.8352 266.465 24.9552 266.125 cv
24.1552 265.805 li
13.3952 270.225 li
13.3952 268.325 li
21.9552 264.905 li
13.3952 261.485 li
13.3952 259.585 li
25.3352 264.385 li
f
17.4952 243.746 mo
17.6552 243.326 17.9552 242.906 18.4152 242.506 cv
18.8952 242.106 19.5352 241.706 20.3552 241.306 cv
24.3352 239.306 li
24.3352 241.426 li
20.5952 243.286 li
19.6352 243.766 18.9752 244.246 18.6552 244.686 cv
18.3352 245.146 18.1752 245.766 18.1752 246.546 cv
18.1752 248.686 li
24.3352 248.686 li
24.3352 250.666 li
9.75516 250.666 li
9.75516 246.206 li
9.75516 244.546 10.1152 243.306 10.7952 242.486 cv
11.4952 241.666 12.5552 241.246 13.9552 241.246 cv
14.8752 241.246 15.6552 241.466 16.2552 241.886 cv
16.8552 242.326 17.2752 242.946 17.4952 243.746 cv
11.3752 248.686 mo
16.5552 248.686 li
16.5552 246.206 li
16.5552 245.266 16.3352 244.546 15.8952 244.066 cv
15.4552 243.586 14.8152 243.326 13.9552 243.326 cv
13.1152 243.326 12.4752 243.586 12.0352 244.066 cv
11.5952 244.546 11.3752 245.266 11.3752 246.206 cv
11.3752 248.686 li
f
18.8352 231.865 mo
18.8352 233.325 19.0152 234.325 19.3352 234.885 cv
19.6752 235.445 20.2352 235.725 21.0352 235.725 cv
21.6752 235.725 22.1952 235.525 22.5552 235.105 cv
22.9352 234.685 23.1152 234.105 23.1152 233.385 cv
23.1152 232.385 22.7752 231.585 22.0552 230.985 cv
21.3552 230.385 20.4152 230.085 19.2352 230.085 cv
18.8352 230.085 li
18.8352 231.865 li
18.0952 228.285 mo
24.3352 228.285 li
24.3352 230.085 li
22.6752 230.085 li
23.3552 230.505 23.8352 231.025 24.1352 231.625 cv
24.4352 232.225 24.5952 232.985 24.5952 233.865 cv
24.5952 234.985 24.2952 235.885 23.6752 236.545 cv
23.0552 237.205 22.2152 237.525 21.1552 237.525 cv
19.9352 237.525 19.0152 237.125 18.3752 236.285 cv
17.7552 235.465 17.4352 234.245 17.4352 232.605 cv
17.4352 230.085 li
17.2552 230.085 li
16.4352 230.085 15.7952 230.365 15.3352 230.905 cv
14.8952 231.445 14.6552 232.205 14.6552 233.185 cv
14.6552 233.825 14.7352 234.425 14.8952 235.025 cv
15.0552 235.625 15.2752 236.185 15.5552 236.725 cv
13.8952 236.725 li
13.6552 236.085 13.4552 235.445 13.3352 234.825 cv
13.2152 234.205 13.1352 233.605 13.1352 233.005 cv
13.1352 231.425 13.5552 230.245 14.3752 229.465 cv
15.1952 228.685 16.4352 228.285 18.0952 228.285 cv
f
10.2952 222.805 mo
13.3952 222.805 li
13.3952 219.105 li
14.7952 219.105 li
14.7952 222.805 li
20.7352 222.805 li
21.6352 222.805 22.2152 222.685 22.4552 222.445 cv
22.7152 222.205 22.8352 221.705 22.8352 220.945 cv
22.8352 219.105 li
24.3352 219.105 li
24.3352 220.945 li
24.3352 222.345 24.0752 223.305 23.5552 223.825 cv
23.0352 224.345 22.0952 224.605 20.7352 224.605 cv
14.7952 224.605 li
14.7952 225.925 li
13.3952 225.925 li
13.3952 224.605 li
10.2952 224.605 li
10.2952 222.805 li
f
18.4152 207.385 mo
19.2952 207.385 li
19.2952 215.645 li
20.5352 215.565 21.4952 215.205 22.1352 214.525 cv
22.7752 213.865 23.0952 212.945 23.0952 211.745 cv
23.0952 211.065 23.0152 210.385 22.8552 209.745 cv
22.6952 209.105 22.4352 208.445 22.0752 207.805 cv
23.7752 207.805 li
24.0552 208.445 24.2752 209.105 24.3952 209.785 cv
24.5152 210.465 24.5952 211.165 24.5952 211.845 cv
24.5952 213.605 24.0952 214.985 23.0952 216.005 cv
22.0952 217.025 20.7152 217.525 18.9752 217.525 cv
17.1952 217.525 15.7752 217.045 14.7152 216.085 cv
13.6752 215.125 13.1352 213.805 13.1352 212.165 cv
13.1352 210.685 13.6152 209.525 14.5552 208.665 cv
15.5152 207.825 16.7952 207.385 18.4152 207.385 cv
17.8952 209.185 mo
16.9152 209.205 16.1352 209.485 15.5352 210.005 cv
14.9552 210.545 14.6552 211.265 14.6552 212.145 cv
14.6552 213.145 14.9552 213.945 15.5152 214.545 cv
16.0752 215.145 16.8752 215.505 17.8952 215.585 cv
17.8952 209.185 li
f
1.5 lw
2 lc
119.986 492.988 mo
129.824 366.55 li
139.662 312.493 li
149.501 280.276 li
159.339 255.26 li
169.177 246.477 li
179.015 235.551 li
188.853 219.253 li
198.691 201.046 li
208.529 178.135 li
218.367 158.112 li
228.205 144.114 li
238.043 132.05 li
247.881 121.333 li
257.719 110.08 li
267.557 102.186 li
277.395 96.461 li
287.233 88.2923 li
297.071 82.8552 li
306.909 79.1434 li
316.747 77.941 li
326.585 75.2485 li
336.423 72.0334 li
346.261 68.5568 li
356.099 65.5899 li
365.937 63.5902 li
375.775 61.6036 li
385.613 59.7607 li
395.451 58.7413 li
405.289 56.9376 li
415.127 55.7744 li
424.965 54.5458 li
434.803 53.3042 li
444.641 52.6376 li
454.479 51.8665 li
464.317 50.8602 li
474.155 50.0498 li
483.993 49.8276 li
493.831 49.9191 li
503.669 50.0367 li
513.507 49.0042 li
523.345 48.4684 li
533.183 48.8212 li
543.021 47.5535 li
552.859 46.717 li
562.697 46.155 li
572.535 46.0897 li
582.373 45.6976 li
592.211 44.5474 li
602.049 43.7371 li
611.887 42.9398 li
621.725 43.0313 li
631.563 42.0641 li
641.401 41.7635 li
651.239 41.5152 li
661.077 41.2015 li
670.915 41.0054 li
680.753 40.8878 li
690.591 40.5219 li
700.429 40.548 li
710.267 40.6918 li
720.105 40.7963 li
729.943 40.2213 li
739.781 40.4957 li
749.62 40.4957 li
759.458 40.4957 li
769.296 39.5808 li
779.134 37.0322 li
788.972 37.006 li
798.81 36.9146 li
808.648 36.8492 li
818.486 36.8362 li
828.324 36.7839 li
838.162 36.7839 li
848 36.7316 li
857.838 36.6663 li
867.676 36.6401 li
877.514 36.614 li
887.352 36.5486 li
897.19 36.5355 li
907.028 36.5094 li
916.866 36.4833 li
926.704 36.4833 li
936.542 36.431 li
946.38 36.3657 li
956.218 36.3395 li
966.056 36.3395 li
975.894 36.3526 li
985.732 36.2872 li
995.57 36.3003 li
1005.41 36.2872 li
1015.25 36.2742 li
1025.08 36.248 li
1034.92 36.2088 li
1044.76 36.1827 li
1054.6 36.1696 li
1064.44 36.1434 li
1074.27 36.1173 li
1084.11 36.1304 li
1093.95 36.0912 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
119.986 500.595 mo
129.824 384.672 li
139.662 326.386 li
149.501 291.921 li
159.339 265.219 li
169.177 257.005 li
179.015 245.693 li
188.853 228.892 li
198.691 209.659 li
208.529 186.898 li
218.367 164.627 li
228.205 151.119 li
238.043 138.141 li
247.881 127.437 li
257.719 116.948 li
267.557 108.44 li
277.395 102.362 li
287.233 93.6575 li
297.071 86.5997 li
306.909 83.365 li
316.747 82.3259 li
326.585 80.0322 li
336.423 77.1699 li
346.261 73.6998 li
356.099 70.9159 li
365.937 68.975 li
375.775 67.1518 li
385.613 65.603 li
395.451 64.5443 li
405.289 62.4074 li
415.127 61.1331 li
424.965 59.5059 li
434.803 58.31 li
444.641 57.0749 li
454.479 56.5063 li
464.317 55.5261 li
474.155 54.6047 li
483.993 54.5655 li
493.831 55.3889 li
503.669 55.3104 li
513.507 54.7223 li
523.345 53.9969 li
533.183 54.5067 li
543.021 52.5266 li
552.859 51.8796 li
562.697 51.4679 li
572.535 51.5071 li
582.373 50.9386 li
592.211 50.1936 li
602.049 49.7819 li
611.887 49.0565 li
621.725 48.8212 li
631.563 48.0566 li
641.401 48.0566 li
651.239 47.6058 li
661.077 47.4097 li
670.915 47.2529 li
680.753 46.8215 li
690.591 46.5667 li
700.429 46.351 li
710.267 46.5667 li
720.105 46.3903 li
729.943 46.0178 li
739.781 46.4294 li
749.62 46.4099 li
759.458 46.4687 li
769.296 45.8217 li
779.134 43.9005 li
788.972 43.9005 li
798.81 43.8416 li
808.648 43.7632 li
818.486 43.7436 li
828.324 43.724 li
838.162 43.7436 li
848 43.7632 li
857.838 43.626 li
867.676 43.626 li
877.514 43.626 li
887.352 43.5475 li
897.19 43.528 li
907.028 43.4495 li
916.866 43.4691 li
926.704 43.528 li
936.542 43.528 li
946.38 43.5084 li
956.218 43.4495 li
966.056 43.3907 li
975.894 43.3907 li
985.732 43.3319 li
995.57 43.3123 li
1005.41 43.2143 li
1015.25 43.2339 li
1025.08 43.2339 li
1034.92 43.2535 li
1044.76 43.2339 li
1054.6 43.2143 li
1064.44 43.1946 li
1074.27 43.1555 li
1084.11 43.1359 li
1093.95 43.1555 li
@
gsave
116.486 504.095 mo
123.486 504.095 li
123.486 497.095 li
116.486 497.095 li
116.486 504.095 li
clp
116.986 503.595 mo
122.986 497.595 li
116.986 497.595 mo
122.986 503.595 li
f
1 lw
0 lc
116.986 503.595 mo
122.986 497.595 li
116.986 497.595 mo
122.986 503.595 li
@
grestore
gsave
126.324 388.172 mo
133.324 388.172 li
133.324 381.172 li
126.324 381.172 li
126.324 388.172 li
clp
126.824 387.672 mo
132.824 381.672 li
126.824 381.672 mo
132.824 387.672 li
f
1 lw
0 lc
126.824 387.672 mo
132.824 381.672 li
126.824 381.672 mo
132.824 387.672 li
@
grestore
gsave
136.163 329.887 mo
143.162 329.887 li
143.162 322.887 li
136.163 322.887 li
136.163 329.887 li
clp
136.662 329.386 mo
142.662 323.386 li
136.662 323.386 mo
142.662 329.386 li
f
1 lw
0 lc
136.662 329.386 mo
142.662 323.386 li
136.662 323.386 mo
142.662 329.386 li
@
grestore
gsave
146.001 295.421 mo
153.001 295.421 li
153.001 288.421 li
146.001 288.421 li
146.001 295.421 li
clp
146.501 294.921 mo
152.501 288.921 li
146.501 288.921 mo
152.501 294.921 li
f
1 lw
0 lc
146.501 294.921 mo
152.501 288.921 li
146.501 288.921 mo
152.501 294.921 li
@
grestore
gsave
155.839 268.719 mo
162.839 268.719 li
162.839 261.719 li
155.839 261.719 li
155.839 268.719 li
clp
156.339 268.219 mo
162.339 262.219 li
156.339 262.219 mo
162.339 268.219 li
f
1 lw
0 lc
156.339 268.219 mo
162.339 262.219 li
156.339 262.219 mo
162.339 268.219 li
@
grestore
gsave
165.677 260.505 mo
172.677 260.505 li
172.677 253.505 li
165.677 253.505 li
165.677 260.505 li
clp
166.177 260.005 mo
172.177 254.005 li
166.177 254.005 mo
172.177 260.005 li
f
1 lw
0 lc
166.177 260.005 mo
172.177 254.005 li
166.177 254.005 mo
172.177 260.005 li
@
grestore
gsave
175.514 249.193 mo
182.515 249.193 li
182.515 242.193 li
175.514 242.193 li
175.514 249.193 li
clp
176.015 248.693 mo
182.015 242.693 li
176.015 242.693 mo
182.015 248.693 li
f
1 lw
0 lc
176.015 248.693 mo
182.015 242.693 li
176.015 242.693 mo
182.015 248.693 li
@
grestore
gsave
185.352 232.391 mo
192.352 232.391 li
192.352 225.392 li
185.352 225.392 li
185.352 232.391 li
clp
185.853 231.892 mo
191.853 225.892 li
185.853 225.892 mo
191.853 231.892 li
f
1 lw
0 lc
185.853 231.892 mo
191.853 225.892 li
185.853 225.892 mo
191.853 231.892 li
@
grestore
gsave
195.191 213.159 mo
202.19 213.159 li
202.19 206.159 li
195.191 206.159 li
195.191 213.159 li
clp
195.691 212.659 mo
201.691 206.659 li
195.691 206.659 mo
201.691 212.659 li
f
1 lw
0 lc
195.691 212.659 mo
201.691 206.659 li
195.691 206.659 mo
201.691 212.659 li
@
grestore
gsave
205.029 190.398 mo
212.029 190.398 li
212.029 183.398 li
205.029 183.398 li
205.029 190.398 li
clp
205.529 189.898 mo
211.529 183.898 li
205.529 183.898 mo
211.529 189.898 li
f
1 lw
0 lc
205.529 189.898 mo
211.529 183.898 li
205.529 183.898 mo
211.529 189.898 li
@
grestore
gsave
214.867 168.127 mo
221.867 168.127 li
221.867 161.127 li
214.867 161.127 li
214.867 168.127 li
clp
215.367 167.627 mo
221.367 161.627 li
215.367 161.627 mo
221.367 167.627 li
f
1 lw
0 lc
215.367 167.627 mo
221.367 161.627 li
215.367 161.627 mo
221.367 167.627 li
@
grestore
gsave
224.705 154.619 mo
231.705 154.619 li
231.705 147.619 li
224.705 147.619 li
224.705 154.619 li
clp
225.205 154.119 mo
231.205 148.119 li
225.205 148.119 mo
231.205 154.119 li
f
1 lw
0 lc
225.205 154.119 mo
231.205 148.119 li
225.205 148.119 mo
231.205 154.119 li
@
grestore
gsave
234.543 141.641 mo
241.543 141.641 li
241.543 134.641 li
234.543 134.641 li
234.543 141.641 li
clp
235.043 141.141 mo
241.043 135.141 li
235.043 135.141 mo
241.043 141.141 li
f
1 lw
0 lc
235.043 141.141 mo
241.043 135.141 li
235.043 135.141 mo
241.043 141.141 li
@
grestore
gsave
244.38 130.937 mo
251.381 130.937 li
251.381 123.937 li
244.38 123.937 li
244.38 130.937 li
clp
244.881 130.437 mo
250.881 124.437 li
244.881 124.437 mo
250.881 130.437 li
f
1 lw
0 lc
244.881 130.437 mo
250.881 124.437 li
244.881 124.437 mo
250.881 130.437 li
@
grestore
gsave
254.219 120.448 mo
261.219 120.448 li
261.219 113.448 li
254.219 113.448 li
254.219 120.448 li
clp
254.719 119.948 mo
260.719 113.948 li
254.719 113.948 mo
260.719 119.948 li
f
1 lw
0 lc
254.719 119.948 mo
260.719 113.948 li
254.719 113.948 mo
260.719 119.948 li
@
grestore
gsave
264.057 111.94 mo
271.057 111.94 li
271.057 104.94 li
264.057 104.94 li
264.057 111.94 li
clp
264.557 111.44 mo
270.557 105.44 li
264.557 105.44 mo
270.557 111.44 li
f
1 lw
0 lc
264.557 111.44 mo
270.557 105.44 li
264.557 105.44 mo
270.557 111.44 li
@
grestore
gsave
273.895 105.862 mo
280.895 105.862 li
280.895 98.862 li
273.895 98.862 li
273.895 105.862 li
clp
274.395 105.362 mo
280.395 99.3621 li
274.395 99.3621 mo
280.395 105.362 li
f
1 lw
0 lc
274.395 105.362 mo
280.395 99.3621 li
274.395 99.3621 mo
280.395 105.362 li
@
grestore
gsave
283.733 97.1576 mo
290.733 97.1576 li
290.733 90.1577 li
283.733 90.1577 li
283.733 97.1576 li
clp
284.233 96.6576 mo
290.233 90.6576 li
284.233 90.6576 mo
290.233 96.6576 li
f
1 lw
0 lc
284.233 96.6576 mo
290.233 90.6576 li
284.233 90.6576 mo
290.233 96.6576 li
@
grestore
gsave
293.571 90.0999 mo
300.571 90.0999 li
300.571 83.0999 li
293.571 83.0999 li
293.571 90.0999 li
clp
294.071 89.5999 mo
300.071 83.5999 li
294.071 83.5999 mo
300.071 89.5999 li
f
1 lw
0 lc
294.071 89.5999 mo
300.071 83.5999 li
294.071 83.5999 mo
300.071 89.5999 li
@
grestore
gsave
303.409 86.8652 mo
310.409 86.8652 li
310.409 79.8652 li
303.409 79.8652 li
303.409 86.8652 li
clp
303.909 86.3651 mo
309.909 80.3651 li
303.909 80.3651 mo
309.909 86.3651 li
f
1 lw
0 lc
303.909 86.3651 mo
309.909 80.3651 li
303.909 80.3651 mo
309.909 86.3651 li
@
grestore
gsave
313.247 85.8259 mo
320.247 85.8259 li
320.247 78.826 li
313.247 78.826 li
313.247 85.8259 li
clp
313.747 85.326 mo
319.747 79.326 li
313.747 79.326 mo
319.747 85.326 li
f
1 lw
0 lc
313.747 85.326 mo
319.747 79.326 li
313.747 79.326 mo
319.747 85.326 li
@
grestore
gsave
323.085 83.5322 mo
330.085 83.5322 li
330.085 76.5322 li
323.085 76.5322 li
323.085 83.5322 li
clp
323.585 83.0322 mo
329.585 77.0322 li
323.585 77.0322 mo
329.585 83.0322 li
f
1 lw
0 lc
323.585 83.0322 mo
329.585 77.0322 li
323.585 77.0322 mo
329.585 83.0322 li
@
grestore
gsave
332.923 80.6698 mo
339.923 80.6698 li
339.923 73.6699 li
332.923 73.6699 li
332.923 80.6698 li
clp
333.423 80.1699 mo
339.423 74.1699 li
333.423 74.1699 mo
339.423 80.1699 li
f
1 lw
0 lc
333.423 80.1699 mo
339.423 74.1699 li
333.423 74.1699 mo
339.423 80.1699 li
@
grestore
gsave
342.761 77.1998 mo
349.761 77.1998 li
349.761 70.1998 li
342.761 70.1998 li
342.761 77.1998 li
clp
343.261 76.6999 mo
349.261 70.6999 li
343.261 70.6999 mo
349.261 76.6999 li
f
1 lw
0 lc
343.261 76.6999 mo
349.261 70.6999 li
343.261 70.6999 mo
349.261 76.6999 li
@
grestore
gsave
352.599 74.416 mo
359.599 74.416 li
359.599 67.4161 li
352.599 67.4161 li
352.599 74.416 li
clp
353.099 73.916 mo
359.099 67.916 li
353.099 67.916 mo
359.099 73.916 li
f
1 lw
0 lc
353.099 73.916 mo
359.099 67.916 li
353.099 67.916 mo
359.099 73.916 li
@
grestore
gsave
362.437 72.4752 mo
369.437 72.4752 li
369.437 65.4753 li
362.437 65.4753 li
362.437 72.4752 li
clp
362.937 71.9752 mo
368.937 65.9752 li
362.937 65.9752 mo
368.937 71.9752 li
f
1 lw
0 lc
362.937 71.9752 mo
368.937 65.9752 li
362.937 65.9752 mo
368.937 71.9752 li
@
grestore
gsave
372.275 70.6518 mo
379.275 70.6518 li
379.275 63.6519 li
372.275 63.6519 li
372.275 70.6518 li
clp
372.775 70.1519 mo
378.775 64.1519 li
372.775 64.1519 mo
378.775 70.1519 li
f
1 lw
0 lc
372.775 70.1519 mo
378.775 64.1519 li
372.775 64.1519 mo
378.775 70.1519 li
@
grestore
gsave
382.113 69.1031 mo
389.113 69.1031 li
389.113 62.1032 li
382.113 62.1032 li
382.113 69.1031 li
clp
382.613 68.6031 mo
388.613 62.6031 li
382.613 62.6031 mo
388.613 68.6031 li
f
1 lw
0 lc
382.613 68.6031 mo
388.613 62.6031 li
382.613 62.6031 mo
388.613 68.6031 li
@
grestore
gsave
391.951 68.0445 mo
398.951 68.0445 li
398.951 61.0446 li
391.951 61.0446 li
391.951 68.0445 li
clp
392.451 67.5445 mo
398.451 61.5445 li
392.451 61.5445 mo
398.451 67.5445 li
f
1 lw
0 lc
392.451 67.5445 mo
398.451 61.5445 li
392.451 61.5445 mo
398.451 67.5445 li
@
grestore
gsave
401.789 65.9075 mo
408.789 65.9075 li
408.789 58.9076 li
401.789 58.9076 li
401.789 65.9075 li
clp
402.289 65.4076 mo
408.289 59.4076 li
402.289 59.4076 mo
408.289 65.4076 li
f
1 lw
0 lc
402.289 65.4076 mo
408.289 59.4076 li
402.289 59.4076 mo
408.289 65.4076 li
@
grestore
gsave
411.627 64.6333 mo
418.627 64.6333 li
418.627 57.6334 li
411.627 57.6334 li
411.627 64.6333 li
clp
412.127 64.1333 mo
418.127 58.1333 li
412.127 58.1333 mo
418.127 64.1333 li
f
1 lw
0 lc
412.127 64.1333 mo
418.127 58.1333 li
412.127 58.1333 mo
418.127 64.1333 li
@
grestore
gsave
421.465 63.0061 mo
428.465 63.0061 li
428.465 56.0061 li
421.465 56.0061 li
421.465 63.0061 li
clp
421.965 62.5061 mo
427.965 56.5061 li
421.965 56.5061 mo
427.965 62.5061 li
f
1 lw
0 lc
421.965 62.5061 mo
427.965 56.5061 li
421.965 56.5061 mo
427.965 62.5061 li
@
grestore
gsave
431.303 61.8101 mo
438.303 61.8101 li
438.303 54.8101 li
431.303 54.8101 li
431.303 61.8101 li
clp
431.803 61.3102 mo
437.803 55.3102 li
431.803 55.3102 mo
437.803 61.3102 li
f
1 lw
0 lc
431.803 61.3102 mo
437.803 55.3102 li
431.803 55.3102 mo
437.803 61.3102 li
@
grestore
gsave
441.141 60.575 mo
448.141 60.575 li
448.141 53.575 li
441.141 53.575 li
441.141 60.575 li
clp
441.641 60.0751 mo
447.641 54.0751 li
441.641 54.0751 mo
447.641 60.0751 li
f
1 lw
0 lc
441.641 60.0751 mo
447.641 54.0751 li
441.641 54.0751 mo
447.641 60.0751 li
@
grestore
gsave
450.979 60.0064 mo
457.979 60.0064 li
457.979 53.0064 li
450.979 53.0064 li
450.979 60.0064 li
clp
451.479 59.5065 mo
457.479 53.5065 li
451.479 53.5065 mo
457.479 59.5065 li
f
1 lw
0 lc
451.479 59.5065 mo
457.479 53.5065 li
451.479 53.5065 mo
457.479 59.5065 li
@
grestore
gsave
460.817 59.0263 mo
467.817 59.0263 li
467.817 52.0263 li
460.817 52.0263 li
460.817 59.0263 li
clp
461.317 58.5263 mo
467.317 52.5263 li
461.317 52.5263 mo
467.317 58.5263 li
f
1 lw
0 lc
461.317 58.5263 mo
467.317 52.5263 li
461.317 52.5263 mo
467.317 58.5263 li
@
grestore
gsave
470.655 58.1047 mo
477.655 58.1047 li
477.655 51.1048 li
470.655 51.1048 li
470.655 58.1047 li
clp
471.155 57.6049 mo
477.155 51.6049 li
471.155 51.6049 mo
477.155 57.6049 li
f
1 lw
0 lc
471.155 57.6049 mo
477.155 51.6049 li
471.155 51.6049 mo
477.155 57.6049 li
@
grestore
gsave
480.493 58.0656 mo
487.493 58.0656 li
487.493 51.0657 li
480.493 51.0657 li
480.493 58.0656 li
clp
480.993 57.5657 mo
486.993 51.5657 li
480.993 51.5657 mo
486.993 57.5657 li
f
1 lw
0 lc
480.993 57.5657 mo
486.993 51.5657 li
480.993 51.5657 mo
486.993 57.5657 li
@
grestore
gsave
490.331 58.8892 mo
497.331 58.8892 li
497.331 51.889 li
490.331 51.889 li
490.331 58.8892 li
clp
490.831 58.3891 mo
496.831 52.3891 li
490.831 52.3891 mo
496.831 58.3891 li
f
1 lw
0 lc
490.831 58.3891 mo
496.831 52.3891 li
490.831 52.3891 mo
496.831 58.3891 li
@
grestore
gsave
500.169 58.8107 mo
507.169 58.8107 li
507.169 51.8107 li
500.169 51.8107 li
500.169 58.8107 li
clp
500.669 58.3107 mo
506.669 52.3107 li
500.669 52.3107 mo
506.669 58.3107 li
f
1 lw
0 lc
500.669 58.3107 mo
506.669 52.3107 li
500.669 52.3107 mo
506.669 58.3107 li
@
grestore
gsave
510.007 58.2224 mo
517.007 58.2224 li
517.007 51.2224 li
510.007 51.2224 li
510.007 58.2224 li
clp
510.507 57.7225 mo
516.507 51.7225 li
510.507 51.7225 mo
516.507 57.7225 li
f
1 lw
0 lc
510.507 57.7225 mo
516.507 51.7225 li
510.507 51.7225 mo
516.507 57.7225 li
@
grestore
gsave
519.845 57.497 mo
526.845 57.497 li
526.845 50.4971 li
519.845 50.4971 li
519.845 57.497 li
clp
520.345 56.9971 mo
526.345 50.9971 li
520.345 50.9971 mo
526.345 56.9971 li
f
1 lw
0 lc
520.345 56.9971 mo
526.345 50.9971 li
520.345 50.9971 mo
526.345 56.9971 li
@
grestore
gsave
529.683 58.0068 mo
536.683 58.0068 li
536.683 51.0068 li
529.683 51.0068 li
529.683 58.0068 li
clp
530.183 57.5068 mo
536.183 51.5068 li
530.183 51.5068 mo
536.183 57.5068 li
f
1 lw
0 lc
530.183 57.5068 mo
536.183 51.5068 li
530.183 51.5068 mo
536.183 57.5068 li
@
grestore
gsave
539.521 56.0266 mo
546.521 56.0266 li
546.521 49.0266 li
539.521 49.0266 li
539.521 56.0266 li
clp
540.021 55.5267 mo
546.021 49.5267 li
540.021 49.5267 mo
546.021 55.5267 li
f
1 lw
0 lc
540.021 55.5267 mo
546.021 49.5267 li
540.021 49.5267 mo
546.021 55.5267 li
@
grestore
gsave
549.359 55.3798 mo
556.359 55.3798 li
556.359 48.3798 li
549.359 48.3798 li
549.359 55.3798 li
clp
549.859 54.8798 mo
555.859 48.8798 li
549.859 48.8798 mo
555.859 54.8798 li
f
1 lw
0 lc
549.859 54.8798 mo
555.859 48.8798 li
549.859 48.8798 mo
555.859 54.8798 li
@
grestore
gsave
559.197 54.9679 mo
566.197 54.9679 li
566.197 47.968 li
559.197 47.968 li
559.197 54.9679 li
clp
559.697 54.4681 mo
565.697 48.4681 li
559.697 48.4681 mo
565.697 54.4681 li
f
1 lw
0 lc
559.697 54.4681 mo
565.697 48.4681 li
559.697 48.4681 mo
565.697 54.4681 li
@
grestore
gsave
569.035 55.0074 mo
576.035 55.0074 li
576.035 48.0071 li
569.035 48.0071 li
569.035 55.0074 li
clp
569.535 54.5073 mo
575.535 48.5073 li
569.535 48.5073 mo
575.535 54.5073 li
f
1 lw
0 lc
569.535 54.5073 mo
575.535 48.5073 li
569.535 48.5073 mo
575.535 54.5073 li
@
grestore
gsave
578.873 54.4388 mo
585.873 54.4388 li
585.873 47.4388 li
578.873 47.4388 li
578.873 54.4388 li
clp
579.373 53.9387 mo
585.373 47.9387 li
579.373 47.9387 mo
585.373 53.9387 li
f
1 lw
0 lc
579.373 53.9387 mo
585.373 47.9387 li
579.373 47.9387 mo
585.373 53.9387 li
@
grestore
gsave
588.711 53.6937 mo
595.711 53.6937 li
595.711 46.6938 li
588.711 46.6938 li
588.711 53.6937 li
clp
589.211 53.1937 mo
595.211 47.1937 li
589.211 47.1937 mo
595.211 53.1937 li
f
1 lw
0 lc
589.211 53.1937 mo
595.211 47.1937 li
589.211 47.1937 mo
595.211 53.1937 li
@
grestore
gsave
598.549 53.2819 mo
605.549 53.2819 li
605.549 46.2819 li
598.549 46.2819 li
598.549 53.2819 li
clp
599.049 52.782 mo
605.049 46.782 li
599.049 46.782 mo
605.049 52.782 li
f
1 lw
0 lc
599.049 52.782 mo
605.049 46.782 li
599.049 46.782 mo
605.049 52.782 li
@
grestore
gsave
608.387 52.5565 mo
615.387 52.5565 li
615.387 45.5566 li
608.387 45.5566 li
608.387 52.5565 li
clp
608.887 52.0566 mo
614.887 46.0566 li
608.887 46.0566 mo
614.887 52.0566 li
f
1 lw
0 lc
608.887 52.0566 mo
614.887 46.0566 li
608.887 46.0566 mo
614.887 52.0566 li
@
grestore
gsave
618.225 52.3215 mo
625.225 52.3215 li
625.225 45.3213 li
618.225 45.3213 li
618.225 52.3215 li
clp
618.725 51.8214 mo
624.725 45.8214 li
618.725 45.8214 mo
624.725 51.8214 li
f
1 lw
0 lc
618.725 51.8214 mo
624.725 45.8214 li
618.725 45.8214 mo
624.725 51.8214 li
@
grestore
gsave
628.063 51.5567 mo
635.063 51.5567 li
635.063 44.5568 li
628.063 44.5568 li
628.063 51.5567 li
clp
628.563 51.0568 mo
634.563 45.0568 li
628.563 45.0568 mo
634.563 51.0568 li
f
1 lw
0 lc
628.563 51.0568 mo
634.563 45.0568 li
628.563 45.0568 mo
634.563 51.0568 li
@
grestore
gsave
637.901 51.5567 mo
644.901 51.5567 li
644.901 44.5568 li
637.901 44.5568 li
637.901 51.5567 li
clp
638.401 51.0568 mo
644.401 45.0568 li
638.401 45.0568 mo
644.401 51.0568 li
f
1 lw
0 lc
638.401 51.0568 mo
644.401 45.0568 li
638.401 45.0568 mo
644.401 51.0568 li
@
grestore
gsave
647.739 51.1058 mo
654.739 51.1058 li
654.739 44.1059 li
647.739 44.1059 li
647.739 51.1058 li
clp
648.239 50.6059 mo
654.239 44.6059 li
648.239 44.6059 mo
654.239 50.6059 li
f
1 lw
0 lc
648.239 50.6059 mo
654.239 44.6059 li
648.239 44.6059 mo
654.239 50.6059 li
@
grestore
gsave
657.577 50.9099 mo
664.577 50.9099 li
664.577 43.91 li
657.577 43.91 li
657.577 50.9099 li
clp
658.077 50.4099 mo
664.077 44.4099 li
658.077 44.4099 mo
664.077 50.4099 li
f
1 lw
0 lc
658.077 50.4099 mo
664.077 44.4099 li
658.077 44.4099 mo
664.077 50.4099 li
@
grestore
gsave
667.415 50.7532 mo
674.415 50.7532 li
674.415 43.7529 li
667.415 43.7529 li
667.415 50.7532 li
clp
667.915 50.253 mo
673.915 44.253 li
667.915 44.253 mo
673.915 50.253 li
f
1 lw
0 lc
667.915 50.253 mo
673.915 44.253 li
667.915 44.253 mo
673.915 50.253 li
@
grestore
gsave
677.253 50.3216 mo
684.253 50.3216 li
684.253 43.3217 li
677.253 43.3217 li
677.253 50.3216 li
clp
677.753 49.8217 mo
683.753 43.8217 li
677.753 43.8217 mo
683.753 49.8217 li
f
1 lw
0 lc
677.753 49.8217 mo
683.753 43.8217 li
677.753 43.8217 mo
683.753 49.8217 li
@
grestore
gsave
687.091 50.0669 mo
694.091 50.0669 li
694.091 43.0666 li
687.091 43.0666 li
687.091 50.0669 li
clp
687.591 49.5668 mo
693.591 43.5668 li
687.591 43.5668 mo
693.591 49.5668 li
f
1 lw
0 lc
687.591 49.5668 mo
693.591 43.5668 li
687.591 43.5668 mo
693.591 49.5668 li
@
grestore
gsave
696.929 49.8513 mo
703.929 49.8513 li
703.929 42.851 li
696.929 42.851 li
696.929 49.8513 li
clp
697.429 49.3511 mo
703.429 43.3511 li
697.429 43.3511 mo
703.429 49.3511 li
f
1 lw
0 lc
697.429 49.3511 mo
703.429 43.3511 li
697.429 43.3511 mo
703.429 49.3511 li
@
grestore
gsave
706.767 50.0669 mo
713.767 50.0669 li
713.767 43.0666 li
706.767 43.0666 li
706.767 50.0669 li
clp
707.267 49.5668 mo
713.267 43.5668 li
707.267 43.5668 mo
713.267 49.5668 li
f
1 lw
0 lc
707.267 49.5668 mo
713.267 43.5668 li
707.267 43.5668 mo
713.267 49.5668 li
@
grestore
gsave
716.605 49.8904 mo
723.605 49.8904 li
723.605 42.8905 li
716.605 42.8905 li
716.605 49.8904 li
clp
717.105 49.3903 mo
723.105 43.3903 li
717.105 43.3903 mo
723.105 49.3903 li
f
1 lw
0 lc
717.105 49.3903 mo
723.105 43.3903 li
717.105 43.3903 mo
723.105 49.3903 li
@
grestore
gsave
726.443 49.5177 mo
733.443 49.5177 li
733.443 42.5177 li
726.443 42.5177 li
726.443 49.5177 li
clp
726.943 49.0178 mo
732.943 43.0178 li
726.943 43.0178 mo
732.943 49.0178 li
f
1 lw
0 lc
726.943 49.0178 mo
732.943 43.0178 li
726.943 43.0178 mo
732.943 49.0178 li
@
grestore
gsave
736.281 49.9295 mo
743.281 49.9295 li
743.281 42.9296 li
736.281 42.9296 li
736.281 49.9295 li
clp
736.781 49.4295 mo
742.781 43.4295 li
736.781 43.4295 mo
742.781 49.4295 li
f
1 lw
0 lc
736.781 49.4295 mo
742.781 43.4295 li
736.781 43.4295 mo
742.781 49.4295 li
@
grestore
gsave
746.119 49.9098 mo
753.12 49.9098 li
753.12 42.9098 li
746.119 42.9098 li
746.119 49.9098 li
clp
746.619 49.4099 mo
752.619 43.4099 li
746.619 43.4099 mo
752.619 49.4099 li
f
1 lw
0 lc
746.619 49.4099 mo
752.619 43.4099 li
746.619 43.4099 mo
752.619 49.4099 li
@
grestore
gsave
755.957 49.9686 mo
762.957 49.9686 li
762.957 42.9687 li
755.957 42.9687 li
755.957 49.9686 li
clp
756.457 49.4688 mo
762.457 43.4688 li
756.457 43.4688 mo
762.457 49.4688 li
f
1 lw
0 lc
756.457 49.4688 mo
762.457 43.4688 li
756.457 43.4688 mo
762.457 49.4688 li
@
grestore
gsave
765.795 49.3218 mo
772.795 49.3218 li
772.795 42.3219 li
765.795 42.3219 li
765.795 49.3218 li
clp
766.295 48.8218 mo
772.295 42.8218 li
766.295 42.8218 mo
772.295 48.8218 li
f
1 lw
0 lc
766.295 48.8218 mo
772.295 42.8218 li
766.295 42.8218 mo
772.295 48.8218 li
@
grestore
gsave
775.633 47.4004 mo
782.633 47.4004 li
782.633 40.4005 li
775.633 40.4005 li
775.633 47.4004 li
clp
776.133 46.9005 mo
782.133 40.9005 li
776.133 40.9005 mo
782.133 46.9005 li
f
1 lw
0 lc
776.133 46.9005 mo
782.133 40.9005 li
776.133 40.9005 mo
782.133 46.9005 li
@
grestore
gsave
785.471 47.4004 mo
792.471 47.4004 li
792.471 40.4005 li
785.471 40.4005 li
785.471 47.4004 li
clp
785.971 46.9005 mo
791.971 40.9005 li
785.971 40.9005 mo
791.971 46.9005 li
f
1 lw
0 lc
785.971 46.9005 mo
791.971 40.9005 li
785.971 40.9005 mo
791.971 46.9005 li
@
grestore
gsave
795.31 47.3416 mo
802.309 47.3416 li
802.309 40.3417 li
795.31 40.3417 li
795.31 47.3416 li
clp
795.809 46.8417 mo
801.809 40.8417 li
795.809 40.8417 mo
801.809 46.8417 li
f
1 lw
0 lc
795.809 46.8417 mo
801.809 40.8417 li
795.809 40.8417 mo
801.809 46.8417 li
@
grestore
gsave
805.148 47.2634 mo
812.148 47.2634 li
812.148 40.2631 li
805.148 40.2631 li
805.148 47.2634 li
clp
805.647 46.7632 mo
811.647 40.7632 li
805.647 40.7632 mo
811.647 46.7632 li
f
1 lw
0 lc
805.647 46.7632 mo
811.647 40.7632 li
805.647 40.7632 mo
811.647 46.7632 li
@
grestore
gsave
814.985 47.2437 mo
821.986 47.2437 li
821.986 40.2437 li
814.985 40.2437 li
814.985 47.2437 li
clp
815.485 46.7437 mo
821.485 40.7437 li
815.485 40.7437 mo
821.485 46.7437 li
f
1 lw
0 lc
815.485 46.7437 mo
821.485 40.7437 li
815.485 40.7437 mo
821.485 46.7437 li
@
grestore
gsave
824.823 47.2239 mo
831.823 47.2239 li
831.823 40.224 li
824.823 40.224 li
824.823 47.2239 li
clp
825.323 46.7241 mo
831.323 40.7241 li
825.323 40.7241 mo
831.323 46.7241 li
f
1 lw
0 lc
825.323 46.7241 mo
831.323 40.7241 li
825.323 40.7241 mo
831.323 46.7241 li
@
grestore
gsave
834.661 47.2437 mo
841.661 47.2437 li
841.661 40.2437 li
834.661 40.2437 li
834.661 47.2437 li
clp
835.161 46.7437 mo
841.161 40.7437 li
835.161 40.7437 mo
841.161 46.7437 li
f
1 lw
0 lc
835.161 46.7437 mo
841.161 40.7437 li
835.161 40.7437 mo
841.161 46.7437 li
@
grestore
gsave
844.499 47.2634 mo
851.499 47.2634 li
851.499 40.2631 li
844.499 40.2631 li
844.499 47.2634 li
clp
844.999 46.7632 mo
850.999 40.7632 li
844.999 40.7632 mo
850.999 46.7632 li
f
1 lw
0 lc
844.999 46.7632 mo
850.999 40.7632 li
844.999 40.7632 mo
850.999 46.7632 li
@
grestore
gsave
854.338 47.126 mo
861.337 47.126 li
861.337 40.1261 li
854.338 40.1261 li
854.338 47.126 li
clp
854.837 46.626 mo
860.837 40.626 li
854.837 40.626 mo
860.837 46.626 li
f
1 lw
0 lc
854.837 46.626 mo
860.837 40.626 li
854.837 40.626 mo
860.837 46.626 li
@
grestore
gsave
864.176 47.126 mo
871.176 47.126 li
871.176 40.1261 li
864.176 40.1261 li
864.176 47.126 li
clp
864.675 46.626 mo
870.675 40.626 li
864.675 40.626 mo
870.675 46.626 li
f
1 lw
0 lc
864.675 46.626 mo
870.675 40.626 li
864.675 40.626 mo
870.675 46.626 li
@
grestore
gsave
874.014 47.126 mo
881.014 47.126 li
881.014 40.1261 li
874.014 40.1261 li
874.014 47.126 li
clp
874.513 46.626 mo
880.513 40.626 li
874.513 40.626 mo
880.513 46.626 li
f
1 lw
0 lc
874.513 46.626 mo
880.513 40.626 li
874.513 40.626 mo
880.513 46.626 li
@
grestore
gsave
883.851 47.0474 mo
890.852 47.0474 li
890.852 40.0475 li
883.851 40.0475 li
883.851 47.0474 li
clp
884.352 46.5476 mo
890.352 40.5476 li
884.352 40.5476 mo
890.352 46.5476 li
f
1 lw
0 lc
884.352 46.5476 mo
890.352 40.5476 li
884.352 40.5476 mo
890.352 46.5476 li
@
grestore
gsave
893.689 47.0281 mo
900.689 47.0281 li
900.689 40.0281 li
893.689 40.0281 li
893.689 47.0281 li
clp
894.19 46.528 mo
900.19 40.528 li
894.19 40.528 mo
900.19 46.528 li
f
1 lw
0 lc
894.19 46.528 mo
900.19 40.528 li
894.19 40.528 mo
900.19 46.528 li
@
grestore
gsave
903.527 46.9495 mo
910.527 46.9495 li
910.527 39.9496 li
903.527 39.9496 li
903.527 46.9495 li
clp
904.028 46.4496 mo
910.028 40.4496 li
904.028 40.4496 mo
910.028 46.4496 li
f
1 lw
0 lc
904.028 46.4496 mo
910.028 40.4496 li
904.028 40.4496 mo
910.028 46.4496 li
@
grestore
gsave
913.366 46.9692 mo
920.365 46.9692 li
920.365 39.9693 li
913.366 39.9693 li
913.366 46.9692 li
clp
913.866 46.4692 mo
919.866 40.4692 li
913.866 40.4692 mo
919.866 46.4692 li
f
1 lw
0 lc
913.866 46.4692 mo
919.866 40.4692 li
913.866 40.4692 mo
919.866 46.4692 li
@
grestore
gsave
923.204 47.0281 mo
930.204 47.0281 li
930.204 40.0281 li
923.204 40.0281 li
923.204 47.0281 li
clp
923.704 46.528 mo
929.704 40.528 li
923.704 40.528 mo
929.704 46.528 li
f
1 lw
0 lc
923.704 46.528 mo
929.704 40.528 li
923.704 40.528 mo
929.704 46.528 li
@
grestore
gsave
933.042 47.0281 mo
940.042 47.0281 li
940.042 40.0281 li
933.042 40.0281 li
933.042 47.0281 li
clp
933.542 46.528 mo
939.542 40.528 li
933.542 40.528 mo
939.542 46.528 li
f
1 lw
0 lc
933.542 46.528 mo
939.542 40.528 li
933.542 40.528 mo
939.542 46.528 li
@
grestore
gsave
942.88 47.0083 mo
949.88 47.0083 li
949.88 40.0084 li
942.88 40.0084 li
942.88 47.0083 li
clp
943.38 46.5084 mo
949.38 40.5084 li
943.38 40.5084 mo
949.38 46.5084 li
f
1 lw
0 lc
943.38 46.5084 mo
949.38 40.5084 li
943.38 40.5084 mo
949.38 46.5084 li
@
grestore
gsave
952.718 46.9495 mo
959.718 46.9495 li
959.718 39.9496 li
952.718 39.9496 li
952.718 46.9495 li
clp
953.218 46.4496 mo
959.218 40.4496 li
953.218 40.4496 mo
959.218 46.4496 li
f
1 lw
0 lc
953.218 46.4496 mo
959.218 40.4496 li
953.218 40.4496 mo
959.218 46.4496 li
@
grestore
gsave
962.556 46.8907 mo
969.556 46.8907 li
969.556 39.8907 li
962.556 39.8907 li
962.556 46.8907 li
clp
963.056 46.3907 mo
969.056 40.3907 li
963.056 40.3907 mo
969.056 46.3907 li
f
1 lw
0 lc
963.056 46.3907 mo
969.056 40.3907 li
963.056 40.3907 mo
969.056 46.3907 li
@
grestore
gsave
972.394 46.8907 mo
979.394 46.8907 li
979.394 39.8907 li
972.394 39.8907 li
972.394 46.8907 li
clp
972.894 46.3907 mo
978.894 40.3907 li
972.894 40.3907 mo
978.894 46.3907 li
f
1 lw
0 lc
972.894 46.3907 mo
978.894 40.3907 li
972.894 40.3907 mo
978.894 46.3907 li
@
grestore
gsave
982.232 46.8318 mo
989.232 46.8318 li
989.232 39.8319 li
982.232 39.8319 li
982.232 46.8318 li
clp
982.732 46.3319 mo
988.732 40.3319 li
982.732 40.3319 mo
988.732 46.3319 li
f
1 lw
0 lc
982.732 46.3319 mo
988.732 40.3319 li
982.732 40.3319 mo
988.732 46.3319 li
@
grestore
gsave
992.07 46.8125 mo
999.07 46.8125 li
999.07 39.8122 li
992.07 39.8122 li
992.07 46.8125 li
clp
992.57 46.3123 mo
998.57 40.3123 li
992.57 40.3123 mo
998.57 46.3123 li
f
1 lw
0 lc
992.57 46.3123 mo
998.57 40.3123 li
992.57 40.3123 mo
998.57 46.3123 li
@
grestore
gsave
1001.91 46.7142 mo
1008.91 46.7142 li
1008.91 39.7142 li
1001.91 39.7142 li
1001.91 46.7142 li
clp
1002.41 46.2143 mo
1008.41 40.2143 li
1002.41 40.2143 mo
1008.41 46.2143 li
f
1 lw
0 lc
1002.41 46.2143 mo
1008.41 40.2143 li
1002.41 40.2143 mo
1008.41 46.2143 li
@
grestore
gsave
1011.75 46.7339 mo
1018.75 46.7339 li
1018.75 39.734 li
1011.75 39.734 li
1011.75 46.7339 li
clp
1012.25 46.2339 mo
1018.25 40.2339 li
1012.25 40.2339 mo
1018.25 46.2339 li
f
1 lw
0 lc
1012.25 46.2339 mo
1018.25 40.2339 li
1012.25 40.2339 mo
1018.25 46.2339 li
@
grestore
gsave
1021.58 46.7339 mo
1028.58 46.7339 li
1028.58 39.734 li
1021.58 39.734 li
1021.58 46.7339 li
clp
1022.08 46.2339 mo
1028.08 40.2339 li
1022.08 40.2339 mo
1028.08 46.2339 li
f
1 lw
0 lc
1022.08 46.2339 mo
1028.08 40.2339 li
1022.08 40.2339 mo
1028.08 46.2339 li
@
grestore
gsave
1031.42 46.7536 mo
1038.42 46.7536 li
1038.42 39.7533 li
1031.42 39.7533 li
1031.42 46.7536 li
clp
1031.92 46.2535 mo
1037.92 40.2535 li
1031.92 40.2535 mo
1037.92 46.2535 li
f
1 lw
0 lc
1031.92 46.2535 mo
1037.92 40.2535 li
1031.92 40.2535 mo
1037.92 46.2535 li
@
grestore
gsave
1041.26 46.7339 mo
1048.26 46.7339 li
1048.26 39.734 li
1041.26 39.734 li
1041.26 46.7339 li
clp
1041.76 46.2339 mo
1047.76 40.2339 li
1041.76 40.2339 mo
1047.76 46.2339 li
f
1 lw
0 lc
1041.76 46.2339 mo
1047.76 40.2339 li
1041.76 40.2339 mo
1047.76 46.2339 li
@
grestore
gsave
1051.1 46.7142 mo
1058.1 46.7142 li
1058.1 39.7142 li
1051.1 39.7142 li
1051.1 46.7142 li
clp
1051.6 46.2143 mo
1057.6 40.2143 li
1051.6 40.2143 mo
1057.6 46.2143 li
f
1 lw
0 lc
1051.6 46.2143 mo
1057.6 40.2143 li
1051.6 40.2143 mo
1057.6 46.2143 li
@
grestore
gsave
1060.94 46.6948 mo
1067.94 46.6948 li
1067.94 39.6949 li
1060.94 39.6949 li
1060.94 46.6948 li
clp
1061.44 46.1947 mo
1067.44 40.1947 li
1061.44 40.1947 mo
1067.44 46.1947 li
f
1 lw
0 lc
1061.44 46.1947 mo
1067.44 40.1947 li
1061.44 40.1947 mo
1067.44 46.1947 li
@
grestore
gsave
1070.77 46.6553 mo
1077.77 46.6553 li
1077.77 39.6554 li
1070.77 39.6554 li
1070.77 46.6553 li
clp
1071.27 46.1555 mo
1077.27 40.1555 li
1071.27 40.1555 mo
1077.27 46.1555 li
f
1 lw
0 lc
1071.27 46.1555 mo
1077.27 40.1555 li
1071.27 40.1555 mo
1077.27 46.1555 li
@
grestore
gsave
1080.61 46.636 mo
1087.61 46.636 li
1087.61 39.636 li
1080.61 39.636 li
1080.61 46.636 li
clp
1081.11 46.1359 mo
1087.11 40.1359 li
1081.11 40.1359 mo
1087.11 46.1359 li
f
1 lw
0 lc
1081.11 46.1359 mo
1087.11 40.1359 li
1081.11 40.1359 mo
1087.11 46.1359 li
@
grestore
gsave
1090.45 46.6553 mo
1097.45 46.6553 li
1097.45 39.6554 li
1090.45 39.6554 li
1090.45 46.6553 li
clp
1090.95 46.1555 mo
1096.95 40.1555 li
1090.95 40.1555 mo
1096.95 46.1555 li
f
1 lw
0 lc
1090.95 46.1555 mo
1096.95 40.1555 li
1090.95 40.1555 mo
1096.95 46.1555 li
@
grestore
119.986 518.501 mo
129.824 419.431 li
139.662 375.32 li
149.501 341.195 li
159.339 322.596 li
169.177 305.344 li
179.015 288.549 li
188.853 269.336 li
198.691 251.731 li
208.529 235.695 li
218.367 225.984 li
228.205 208.588 li
238.043 197.727 li
247.881 184.996 li
257.719 173.103 li
267.557 161.732 li
277.395 147.538 li
287.233 137.788 li
297.071 125.738 li
306.909 116.314 li
316.747 107.91 li
326.585 100.251 li
336.423 95.0887 li
346.261 89.1027 li
356.099 85.1033 li
365.937 80.6595 li
375.775 76.3856 li
385.613 72.7261 li
395.451 69.8246 li
405.289 67.2106 li
415.127 64.5182 li
424.965 61.1331 li
434.803 58.31 li
444.641 55.3693 li
454.479 53.3826 li
464.317 51.7489 li
474.155 50.9124 li
483.993 49.8799 li
493.831 48.4553 li
503.669 47.0699 li
513.507 46.6778 li
523.345 45.9851 li
533.183 45.3054 li
543.021 43.8547 li
552.859 43.4495 li
562.697 43.5933 li
572.535 42.9136 li
582.373 42.7438 li
592.211 41.6198 li
602.049 42.4301 li
611.887 41.855 li
621.725 40.6656 li
631.563 41.5283 li
641.401 40.8617 li
651.239 40.0513 li
661.077 39.7246 li
670.915 39.3848 li
680.753 40.0383 li
690.591 39.5677 li
700.429 40.6133 li
710.267 39.4893 li
720.105 39.1757 li
729.943 38.9535 li
739.781 38.0386 li
749.62 38.5875 li
759.458 38.4045 li
769.296 39.3064 li
779.134 35.2939 li
788.972 35.1632 li
798.81 35.0848 li
808.648 35.0456 li
818.486 35.0195 li
828.324 34.9933 li
838.162 34.9802 li
848 34.9541 li
857.838 34.941 li
867.676 34.8495 li
877.514 34.8103 li
887.352 34.7711 li
897.19 34.7711 li
907.028 34.7057 li
916.866 34.6666 li
926.704 34.5881 li
936.542 34.5881 li
946.38 34.5359 li
956.218 34.5228 li
966.056 34.5097 li
975.894 34.4966 li
985.732 34.5097 li
995.57 34.4575 li
1005.41 34.4705 li
1015.25 34.4836 li
1025.08 34.4705 li
1034.92 34.4705 li
1044.76 34.4444 li
1054.6 34.379 li
1064.44 34.366 li
1074.27 34.3267 li
1084.11 34.3137 li
1093.95 34.3267 li
1 /0 /CSD get_res sepcs
1 sep
@
119.986 522.69 mo
129.824 434.272 li
139.662 389.573 li
149.501 353.794 li
159.339 335.875 li
169.177 318.368 li
179.015 301.9 li
188.853 280.256 li
198.691 260.436 li
208.529 243.576 li
218.367 233.303 li
228.205 215.854 li
238.043 205.307 li
247.881 192.897 li
257.719 180.174 li
267.557 169.391 li
277.395 154.354 li
287.233 142.983 li
297.071 130.593 li
306.909 122.241 li
316.747 113.321 li
326.585 105.244 li
336.423 99.931 li
346.261 94.6769 li
356.099 90.6188 li
365.937 85.7371 li
375.775 82.2083 li
385.613 77.9344 li
395.451 74.4448 li
405.289 71.5629 li
415.127 68.6221 li
424.965 64.9952 li
434.803 62.4466 li
444.641 59.7607 li
454.479 57.8395 li
464.317 56.5652 li
474.155 56.075 li
483.993 54.8399 li
493.831 53.3304 li
503.669 51.8796 li
513.507 51.5071 li
523.345 51.4483 li
533.183 50.9974 li
543.021 49.3506 li
552.859 48.8997 li
562.697 49.1153 li
572.535 48.8801 li
582.373 48.5272 li
592.211 47.3509 li
602.049 47.9979 li
611.887 47.0764 li
621.725 46.0766 li
631.563 46.9 li
641.401 46.0178 li
651.239 45.6844 li
661.077 44.7631 li
670.915 45.3512 li
680.753 45.7237 li
690.591 45.2532 li
700.429 46.155 li
710.267 45.7041 li
720.105 45.4492 li
729.943 45.7825 li
739.781 44.9983 li
749.62 45.8609 li
759.458 45.5276 li
769.296 46.0962 li
779.134 42.8026 li
788.972 42.8418 li
798.81 42.6849 li
808.648 42.6065 li
818.486 42.6261 li
828.324 42.6458 li
838.162 42.6065 li
848 42.5869 li
857.838 42.6065 li
867.676 42.5477 li
877.514 42.5673 li
887.352 42.5673 li
897.19 42.4889 li
907.028 42.4301 li
916.866 42.4105 li
926.704 42.3713 li
936.542 42.3713 li
946.38 42.332 li
956.218 42.2733 li
966.056 42.332 li
975.894 42.2928 li
985.732 42.3124 li
995.57 42.2733 li
1005.41 42.234 li
1015.25 42.2536 li
1025.08 42.234 li
1034.92 42.1948 li
1044.76 42.1752 li
1054.6 42.1948 li
1064.44 42.2536 li
1074.27 42.2536 li
1084.11 42.2144 li
1093.95 42.136 li
@
gsave
116.486 526.19 mo
123.486 526.19 li
123.486 519.19 li
116.486 519.19 li
116.486 526.19 li
clp
116.986 525.69 mo
122.986 519.69 li
116.986 519.69 mo
122.986 525.69 li
f
1 lw
0 lc
116.986 525.69 mo
122.986 519.69 li
116.986 519.69 mo
122.986 525.69 li
@
grestore
gsave
126.324 437.772 mo
133.324 437.772 li
133.324 430.772 li
126.324 430.772 li
126.324 437.772 li
clp
126.824 437.272 mo
132.824 431.272 li
126.824 431.272 mo
132.824 437.272 li
f
1 lw
0 lc
126.824 437.272 mo
132.824 431.272 li
126.824 431.272 mo
132.824 437.272 li
@
grestore
gsave
136.163 393.073 mo
143.162 393.073 li
143.162 386.073 li
136.163 386.073 li
136.163 393.073 li
clp
136.662 392.573 mo
142.662 386.573 li
136.662 386.573 mo
142.662 392.573 li
f
1 lw
0 lc
136.662 392.573 mo
142.662 386.573 li
136.662 386.573 mo
142.662 392.573 li
@
grestore
gsave
146.001 357.294 mo
153.001 357.294 li
153.001 350.294 li
146.001 350.294 li
146.001 357.294 li
clp
146.501 356.794 mo
152.501 350.794 li
146.501 350.794 mo
152.501 356.794 li
f
1 lw
0 lc
146.501 356.794 mo
152.501 350.794 li
146.501 350.794 mo
152.501 356.794 li
@
grestore
gsave
155.839 339.375 mo
162.839 339.375 li
162.839 332.375 li
155.839 332.375 li
155.839 339.375 li
clp
156.339 338.875 mo
162.339 332.875 li
156.339 332.875 mo
162.339 338.875 li
f
1 lw
0 lc
156.339 338.875 mo
162.339 332.875 li
156.339 332.875 mo
162.339 338.875 li
@
grestore
gsave
165.677 321.868 mo
172.677 321.868 li
172.677 314.868 li
165.677 314.868 li
165.677 321.868 li
clp
166.177 321.368 mo
172.177 315.368 li
166.177 315.368 mo
172.177 321.368 li
f
1 lw
0 lc
166.177 321.368 mo
172.177 315.368 li
166.177 315.368 mo
172.177 321.368 li
@
grestore
gsave
175.514 305.4 mo
182.515 305.4 li
182.515 298.4 li
175.514 298.4 li
175.514 305.4 li
clp
176.015 304.9 mo
182.015 298.9 li
176.015 298.9 mo
182.015 304.9 li
f
1 lw
0 lc
176.015 304.9 mo
182.015 298.9 li
176.015 298.9 mo
182.015 304.9 li
@
grestore
gsave
185.352 283.756 mo
192.352 283.756 li
192.352 276.756 li
185.352 276.756 li
185.352 283.756 li
clp
185.853 283.256 mo
191.853 277.256 li
185.853 277.256 mo
191.853 283.256 li
f
1 lw
0 lc
185.853 283.256 mo
191.853 277.256 li
185.853 277.256 mo
191.853 283.256 li
@
grestore
gsave
195.191 263.936 mo
202.19 263.936 li
202.19 256.936 li
195.191 256.936 li
195.191 263.936 li
clp
195.691 263.436 mo
201.691 257.436 li
195.691 257.436 mo
201.691 263.436 li
f
1 lw
0 lc
195.691 263.436 mo
201.691 257.436 li
195.691 257.436 mo
201.691 263.436 li
@
grestore
gsave
205.029 247.076 mo
212.029 247.076 li
212.029 240.076 li
205.029 240.076 li
205.029 247.076 li
clp
205.529 246.576 mo
211.529 240.576 li
205.529 240.576 mo
211.529 246.576 li
f
1 lw
0 lc
205.529 246.576 mo
211.529 240.576 li
205.529 240.576 mo
211.529 246.576 li
@
grestore
gsave
214.867 236.803 mo
221.867 236.803 li
221.867 229.803 li
214.867 229.803 li
214.867 236.803 li
clp
215.367 236.303 mo
221.367 230.303 li
215.367 230.303 mo
221.367 236.303 li
f
1 lw
0 lc
215.367 236.303 mo
221.367 230.303 li
215.367 230.303 mo
221.367 236.303 li
@
grestore
gsave
224.705 219.354 mo
231.705 219.354 li
231.705 212.354 li
224.705 212.354 li
224.705 219.354 li
clp
225.205 218.854 mo
231.205 212.854 li
225.205 212.854 mo
231.205 218.854 li
f
1 lw
0 lc
225.205 218.854 mo
231.205 212.854 li
225.205 212.854 mo
231.205 218.854 li
@
grestore
gsave
234.543 208.807 mo
241.543 208.807 li
241.543 201.807 li
234.543 201.807 li
234.543 208.807 li
clp
235.043 208.307 mo
241.043 202.307 li
235.043 202.307 mo
241.043 208.307 li
f
1 lw
0 lc
235.043 208.307 mo
241.043 202.307 li
235.043 202.307 mo
241.043 208.307 li
@
grestore
gsave
244.38 196.397 mo
251.381 196.397 li
251.381 189.397 li
244.38 189.397 li
244.38 196.397 li
clp
244.881 195.897 mo
250.881 189.897 li
244.881 189.897 mo
250.881 195.897 li
f
1 lw
0 lc
244.881 195.897 mo
250.881 189.897 li
244.881 189.897 mo
250.881 195.897 li
@
grestore
gsave
254.219 183.674 mo
261.219 183.674 li
261.219 176.674 li
254.219 176.674 li
254.219 183.674 li
clp
254.719 183.174 mo
260.719 177.174 li
254.719 177.174 mo
260.719 183.174 li
f
1 lw
0 lc
254.719 183.174 mo
260.719 177.174 li
254.719 177.174 mo
260.719 183.174 li
@
grestore
gsave
264.057 172.891 mo
271.057 172.891 li
271.057 165.891 li
264.057 165.891 li
264.057 172.891 li
clp
264.557 172.391 mo
270.557 166.391 li
264.557 166.391 mo
270.557 172.391 li
f
1 lw
0 lc
264.557 172.391 mo
270.557 166.391 li
264.557 166.391 mo
270.557 172.391 li
@
grestore
gsave
273.895 157.854 mo
280.895 157.854 li
280.895 150.854 li
273.895 150.854 li
273.895 157.854 li
clp
274.395 157.354 mo
280.395 151.354 li
274.395 151.354 mo
280.395 157.354 li
f
1 lw
0 lc
274.395 157.354 mo
280.395 151.354 li
274.395 151.354 mo
280.395 157.354 li
@
grestore
gsave
283.733 146.483 mo
290.733 146.483 li
290.733 139.483 li
283.733 139.483 li
283.733 146.483 li
clp
284.233 145.983 mo
290.233 139.983 li
284.233 139.983 mo
290.233 145.983 li
f
1 lw
0 lc
284.233 145.983 mo
290.233 139.983 li
284.233 139.983 mo
290.233 145.983 li
@
grestore
gsave
293.571 134.093 mo
300.571 134.093 li
300.571 127.093 li
293.571 127.093 li
293.571 134.093 li
clp
294.071 133.593 mo
300.071 127.593 li
294.071 127.593 mo
300.071 133.593 li
f
1 lw
0 lc
294.071 133.593 mo
300.071 127.593 li
294.071 127.593 mo
300.071 133.593 li
@
grestore
gsave
303.409 125.742 mo
310.409 125.742 li
310.409 118.741 li
303.409 118.741 li
303.409 125.742 li
clp
303.909 125.241 mo
309.909 119.241 li
303.909 119.241 mo
309.909 125.241 li
f
1 lw
0 lc
303.909 125.241 mo
309.909 119.241 li
303.909 119.241 mo
309.909 125.241 li
@
grestore
gsave
313.247 116.821 mo
320.247 116.821 li
320.247 109.821 li
313.247 109.821 li
313.247 116.821 li
clp
313.747 116.321 mo
319.747 110.321 li
313.747 110.321 mo
319.747 116.321 li
f
1 lw
0 lc
313.747 116.321 mo
319.747 110.321 li
313.747 110.321 mo
319.747 116.321 li
@
grestore
gsave
323.085 108.744 mo
330.085 108.744 li
330.085 101.744 li
323.085 101.744 li
323.085 108.744 li
clp
323.585 108.244 mo
329.585 102.244 li
323.585 102.244 mo
329.585 108.244 li
f
1 lw
0 lc
323.585 108.244 mo
329.585 102.244 li
323.585 102.244 mo
329.585 108.244 li
@
grestore
gsave
332.923 103.431 mo
339.923 103.431 li
339.923 96.4312 li
332.923 96.4312 li
332.923 103.431 li
clp
333.423 102.931 mo
339.423 96.9311 li
333.423 96.9311 mo
339.423 102.931 li
f
1 lw
0 lc
333.423 102.931 mo
339.423 96.9311 li
333.423 96.9311 mo
339.423 102.931 li
@
grestore
gsave
342.761 98.1771 mo
349.761 98.1771 li
349.761 91.1768 li
342.761 91.1768 li
342.761 98.1771 li
clp
343.261 97.677 mo
349.261 91.677 li
343.261 91.677 mo
349.261 97.677 li
f
1 lw
0 lc
343.261 97.677 mo
349.261 91.677 li
343.261 91.677 mo
349.261 97.677 li
@
grestore
gsave
352.599 94.1188 mo
359.599 94.1188 li
359.599 87.1188 li
352.599 87.1188 li
352.599 94.1188 li
clp
353.099 93.6188 mo
359.099 87.6188 li
353.099 87.6188 mo
359.099 93.6188 li
f
1 lw
0 lc
353.099 93.6188 mo
359.099 87.6188 li
353.099 87.6188 mo
359.099 93.6188 li
@
grestore
gsave
362.437 89.2371 mo
369.437 89.2371 li
369.437 82.2372 li
362.437 82.2372 li
362.437 89.2371 li
clp
362.937 88.7372 mo
368.937 82.7372 li
362.937 82.7372 mo
368.937 88.7372 li
f
1 lw
0 lc
362.937 88.7372 mo
368.937 82.7372 li
362.937 82.7372 mo
368.937 88.7372 li
@
grestore
gsave
372.275 85.7082 mo
379.275 85.7082 li
379.275 78.7083 li
372.275 78.7083 li
372.275 85.7082 li
clp
372.775 85.2083 mo
378.775 79.2083 li
372.775 79.2083 mo
378.775 85.2083 li
f
1 lw
0 lc
372.775 85.2083 mo
378.775 79.2083 li
372.775 79.2083 mo
378.775 85.2083 li
@
grestore
gsave
382.113 81.4343 mo
389.113 81.4343 li
389.113 74.4343 li
382.113 74.4343 li
382.113 81.4343 li
clp
382.613 80.9344 mo
388.613 74.9344 li
382.613 74.9344 mo
388.613 80.9344 li
f
1 lw
0 lc
382.613 80.9344 mo
388.613 74.9344 li
382.613 74.9344 mo
388.613 80.9344 li
@
grestore
gsave
391.951 77.9449 mo
398.951 77.9449 li
398.951 70.9449 li
391.951 70.9449 li
391.951 77.9449 li
clp
392.451 77.4448 mo
398.451 71.4448 li
392.451 71.4448 mo
398.451 77.4448 li
f
1 lw
0 lc
392.451 77.4448 mo
398.451 71.4448 li
392.451 71.4448 mo
398.451 77.4448 li
@
grestore
gsave
401.789 75.0628 mo
408.789 75.0628 li
408.789 68.0629 li
401.789 68.0629 li
401.789 75.0628 li
clp
402.289 74.5629 mo
408.289 68.5629 li
402.289 68.5629 mo
408.289 74.5629 li
f
1 lw
0 lc
402.289 74.5629 mo
408.289 68.5629 li
402.289 68.5629 mo
408.289 74.5629 li
@
grestore
gsave
411.627 72.1222 mo
418.627 72.1222 li
418.627 65.1223 li
411.627 65.1223 li
411.627 72.1222 li
clp
412.127 71.6221 mo
418.127 65.6221 li
412.127 65.6221 mo
418.127 71.6221 li
f
1 lw
0 lc
412.127 71.6221 mo
418.127 65.6221 li
412.127 65.6221 mo
418.127 71.6221 li
@
grestore
gsave
421.465 68.4951 mo
428.465 68.4951 li
428.465 61.4952 li
421.465 61.4952 li
421.465 68.4951 li
clp
421.965 67.9952 mo
427.965 61.9952 li
421.965 61.9952 mo
427.965 67.9952 li
f
1 lw
0 lc
421.965 67.9952 mo
427.965 61.9952 li
421.965 61.9952 mo
427.965 67.9952 li
@
grestore
gsave
431.303 65.9466 mo
438.303 65.9466 li
438.303 58.9467 li
431.303 58.9467 li
431.303 65.9466 li
clp
431.803 65.4466 mo
437.803 59.4466 li
431.803 59.4466 mo
437.803 65.4466 li
f
1 lw
0 lc
431.803 65.4466 mo
437.803 59.4466 li
431.803 59.4466 mo
437.803 65.4466 li
@
grestore
gsave
441.141 63.2608 mo
448.141 63.2608 li
448.141 56.2608 li
441.141 56.2608 li
441.141 63.2608 li
clp
441.641 62.7607 mo
447.641 56.7607 li
441.641 56.7607 mo
447.641 62.7607 li
f
1 lw
0 lc
441.641 62.7607 mo
447.641 56.7607 li
441.641 56.7607 mo
447.641 62.7607 li
@
grestore
gsave
450.979 61.3394 mo
457.979 61.3394 li
457.979 54.3395 li
450.979 54.3395 li
450.979 61.3394 li
clp
451.479 60.8395 mo
457.479 54.8395 li
451.479 54.8395 mo
457.479 60.8395 li
f
1 lw
0 lc
451.479 60.8395 mo
457.479 54.8395 li
451.479 54.8395 mo
457.479 60.8395 li
@
grestore
gsave
460.817 60.0652 mo
467.817 60.0652 li
467.817 53.0652 li
460.817 53.0652 li
460.817 60.0652 li
clp
461.317 59.5652 mo
467.317 53.5652 li
461.317 53.5652 mo
467.317 59.5652 li
f
1 lw
0 lc
461.317 59.5652 mo
467.317 53.5652 li
461.317 53.5652 mo
467.317 59.5652 li
@
grestore
gsave
470.655 59.5752 mo
477.655 59.5752 li
477.655 52.5752 li
470.655 52.5752 li
470.655 59.5752 li
clp
471.155 59.0751 mo
477.155 53.0751 li
471.155 53.0751 mo
477.155 59.0751 li
f
1 lw
0 lc
471.155 59.0751 mo
477.155 53.0751 li
471.155 53.0751 mo
477.155 59.0751 li
@
grestore
gsave
480.493 58.34 mo
487.493 58.34 li
487.493 51.3401 li
480.493 51.3401 li
480.493 58.34 li
clp
480.993 57.84 mo
486.993 51.84 li
480.993 51.84 mo
486.993 57.84 li
f
1 lw
0 lc
480.993 57.84 mo
486.993 51.84 li
480.993 51.84 mo
486.993 57.84 li
@
grestore
gsave
490.331 56.8305 mo
497.331 56.8305 li
497.331 49.8305 li
490.331 49.8305 li
490.331 56.8305 li
clp
490.831 56.3304 mo
496.831 50.3304 li
490.831 50.3304 mo
496.831 56.3304 li
f
1 lw
0 lc
490.831 56.3304 mo
496.831 50.3304 li
490.831 50.3304 mo
496.831 56.3304 li
@
grestore
gsave
500.169 55.3798 mo
507.169 55.3798 li
507.169 48.3798 li
500.169 48.3798 li
500.169 55.3798 li
clp
500.669 54.8796 mo
506.669 48.8796 li
500.669 48.8796 mo
506.669 54.8796 li
f
1 lw
0 lc
500.669 54.8796 mo
506.669 48.8796 li
500.669 48.8796 mo
506.669 54.8796 li
@
grestore
gsave
510.007 55.007 mo
517.007 55.007 li
517.007 48.0071 li
510.007 48.0071 li
510.007 55.007 li
clp
510.507 54.5071 mo
516.507 48.5071 li
510.507 48.5071 mo
516.507 54.5071 li
f
1 lw
0 lc
510.507 54.5071 mo
516.507 48.5071 li
510.507 48.5071 mo
516.507 54.5071 li
@
grestore
gsave
519.845 54.9482 mo
526.845 54.9482 li
526.845 47.9483 li
519.845 47.9483 li
519.845 54.9482 li
clp
520.345 54.4483 mo
526.345 48.4483 li
520.345 48.4483 mo
526.345 54.4483 li
f
1 lw
0 lc
520.345 54.4483 mo
526.345 48.4483 li
520.345 48.4483 mo
526.345 54.4483 li
@
grestore
gsave
529.683 54.4973 mo
536.683 54.4973 li
536.683 47.4973 li
529.683 47.4973 li
529.683 54.4973 li
clp
530.183 53.9974 mo
536.183 47.9974 li
530.183 47.9974 mo
536.183 53.9974 li
f
1 lw
0 lc
530.183 53.9974 mo
536.183 47.9974 li
530.183 47.9974 mo
536.183 53.9974 li
@
grestore
gsave
539.521 52.8507 mo
546.521 52.8507 li
546.521 45.8507 li
539.521 45.8507 li
539.521 52.8507 li
clp
540.021 52.3506 mo
546.021 46.3506 li
540.021 46.3506 mo
546.021 52.3506 li
f
1 lw
0 lc
540.021 52.3506 mo
546.021 46.3506 li
540.021 46.3506 mo
546.021 52.3506 li
@
grestore
gsave
549.359 52.3998 mo
556.359 52.3998 li
556.359 45.3998 li
549.359 45.3998 li
549.359 52.3998 li
clp
549.859 51.8997 mo
555.859 45.8997 li
549.859 45.8997 mo
555.859 51.8997 li
f
1 lw
0 lc
549.859 51.8997 mo
555.859 45.8997 li
549.859 45.8997 mo
555.859 51.8997 li
@
grestore
gsave
559.197 52.6154 mo
566.197 52.6154 li
566.197 45.6154 li
559.197 45.6154 li
559.197 52.6154 li
clp
559.697 52.1153 mo
565.697 46.1153 li
559.697 46.1153 mo
565.697 52.1153 li
f
1 lw
0 lc
559.697 52.1153 mo
565.697 46.1153 li
559.697 46.1153 mo
565.697 52.1153 li
@
grestore
gsave
569.035 52.38 mo
576.035 52.38 li
576.035 45.3801 li
569.035 45.3801 li
569.035 52.38 li
clp
569.535 51.8801 mo
575.535 45.8801 li
569.535 45.8801 mo
575.535 51.8801 li
f
1 lw
0 lc
569.535 51.8801 mo
575.535 45.8801 li
569.535 45.8801 mo
575.535 51.8801 li
@
grestore
gsave
578.873 52.027 mo
585.873 52.027 li
585.873 45.0271 li
578.873 45.0271 li
578.873 52.027 li
clp
579.373 51.5272 mo
585.373 45.5272 li
579.373 45.5272 mo
585.373 51.5272 li
f
1 lw
0 lc
579.373 51.5272 mo
585.373 45.5272 li
579.373 45.5272 mo
585.373 51.5272 li
@
grestore
gsave
588.711 50.8507 mo
595.711 50.8507 li
595.711 43.8508 li
588.711 43.8508 li
588.711 50.8507 li
clp
589.211 50.3509 mo
595.211 44.3509 li
589.211 44.3509 mo
595.211 50.3509 li
f
1 lw
0 lc
589.211 50.3509 mo
595.211 44.3509 li
589.211 44.3509 mo
595.211 50.3509 li
@
grestore
gsave
598.549 51.4979 mo
605.549 51.4979 li
605.549 44.498 li
598.549 44.498 li
598.549 51.4979 li
clp
599.049 50.9979 mo
605.049 44.9979 li
599.049 44.9979 mo
605.049 50.9979 li
f
1 lw
0 lc
599.049 50.9979 mo
605.049 44.9979 li
599.049 44.9979 mo
605.049 50.9979 li
@
grestore
gsave
608.387 50.5763 mo
615.387 50.5763 li
615.387 43.5764 li
608.387 43.5764 li
608.387 50.5763 li
clp
608.887 50.0764 mo
614.887 44.0764 li
608.887 44.0764 mo
614.887 50.0764 li
f
1 lw
0 lc
608.887 50.0764 mo
614.887 44.0764 li
608.887 44.0764 mo
614.887 50.0764 li
@
grestore
gsave
618.225 49.5765 mo
625.225 49.5765 li
625.225 42.5766 li
618.225 42.5766 li
618.225 49.5765 li
clp
618.725 49.0766 mo
624.725 43.0766 li
618.725 43.0766 mo
624.725 49.0766 li
f
1 lw
0 lc
618.725 49.0766 mo
624.725 43.0766 li
618.725 43.0766 mo
624.725 49.0766 li
@
grestore
gsave
628.063 50.4002 mo
635.063 50.4002 li
635.063 43.3999 li
628.063 43.3999 li
628.063 50.4002 li
clp
628.563 49.9 mo
634.563 43.9 li
628.563 43.9 mo
634.563 49.9 li
f
1 lw
0 lc
628.563 49.9 mo
634.563 43.9 li
628.563 43.9 mo
634.563 49.9 li
@
grestore
gsave
637.901 49.5177 mo
644.901 49.5177 li
644.901 42.5177 li
637.901 42.5177 li
637.901 49.5177 li
clp
638.401 49.0178 mo
644.401 43.0178 li
638.401 43.0178 mo
644.401 49.0178 li
f
1 lw
0 lc
638.401 49.0178 mo
644.401 43.0178 li
638.401 43.0178 mo
644.401 49.0178 li
@
grestore
gsave
647.739 49.1844 mo
654.739 49.1844 li
654.739 42.1845 li
647.739 42.1845 li
647.739 49.1844 li
clp
648.239 48.6846 mo
654.239 42.6846 li
648.239 42.6846 mo
654.239 48.6846 li
f
1 lw
0 lc
648.239 48.6846 mo
654.239 42.6846 li
648.239 42.6846 mo
654.239 48.6846 li
@
grestore
gsave
657.577 48.2632 mo
664.577 48.2632 li
664.577 41.2632 li
657.577 41.2632 li
657.577 48.2632 li
clp
658.077 47.7631 mo
664.077 41.7631 li
658.077 41.7631 mo
664.077 47.7631 li
f
1 lw
0 lc
658.077 47.7631 mo
664.077 41.7631 li
658.077 41.7631 mo
664.077 47.7631 li
@
grestore
gsave
667.415 48.8512 mo
674.415 48.8512 li
674.415 41.8512 li
667.415 41.8512 li
667.415 48.8512 li
clp
667.915 48.3513 mo
673.915 42.3513 li
667.915 42.3513 mo
673.915 48.3513 li
f
1 lw
0 lc
667.915 48.3513 mo
673.915 42.3513 li
667.915 42.3513 mo
673.915 48.3513 li
@
grestore
gsave
677.253 49.2239 mo
684.253 49.2239 li
684.253 42.2236 li
677.253 42.2236 li
677.253 49.2239 li
clp
677.753 48.7238 mo
683.753 42.7238 li
677.753 42.7238 mo
683.753 48.7238 li
f
1 lw
0 lc
677.753 48.7238 mo
683.753 42.7238 li
677.753 42.7238 mo
683.753 48.7238 li
@
grestore
gsave
687.091 48.7532 mo
694.091 48.7532 li
694.091 41.7533 li
687.091 41.7533 li
687.091 48.7532 li
clp
687.591 48.2532 mo
693.591 42.2532 li
687.591 42.2532 mo
693.591 48.2532 li
f
1 lw
0 lc
687.591 48.2532 mo
693.591 42.2532 li
687.591 42.2532 mo
693.591 48.2532 li
@
grestore
gsave
696.929 49.6551 mo
703.929 49.6551 li
703.929 42.6551 li
696.929 42.6551 li
696.929 49.6551 li
clp
697.429 49.155 mo
703.429 43.155 li
697.429 43.155 mo
703.429 49.155 li
f
1 lw
0 lc
697.429 49.155 mo
703.429 43.155 li
697.429 43.155 mo
703.429 49.155 li
@
grestore
gsave
706.767 49.2041 mo
713.767 49.2041 li
713.767 42.2042 li
706.767 42.2042 li
706.767 49.2041 li
clp
707.267 48.7041 mo
713.267 42.7041 li
707.267 42.7041 mo
713.267 48.7041 li
f
1 lw
0 lc
707.267 48.7041 mo
713.267 42.7041 li
707.267 42.7041 mo
713.267 48.7041 li
@
grestore
gsave
716.605 48.9491 mo
723.605 48.9491 li
723.605 41.9492 li
716.605 41.9492 li
716.605 48.9491 li
clp
717.105 48.4492 mo
723.105 42.4492 li
717.105 42.4492 mo
723.105 48.4492 li
f
1 lw
0 lc
717.105 48.4492 mo
723.105 42.4492 li
717.105 42.4492 mo
723.105 48.4492 li
@
grestore
gsave
726.443 49.2824 mo
733.443 49.2824 li
733.443 42.2824 li
726.443 42.2824 li
726.443 49.2824 li
clp
726.943 48.7825 mo
732.943 42.7825 li
726.943 42.7825 mo
732.943 48.7825 li
f
1 lw
0 lc
726.943 48.7825 mo
732.943 42.7825 li
726.943 42.7825 mo
732.943 48.7825 li
@
grestore
gsave
736.281 48.4982 mo
743.281 48.4982 li
743.281 41.4982 li
736.281 41.4982 li
736.281 48.4982 li
clp
736.781 47.9983 mo
742.781 41.9983 li
736.781 41.9983 mo
742.781 47.9983 li
f
1 lw
0 lc
736.781 47.9983 mo
742.781 41.9983 li
736.781 41.9983 mo
742.781 47.9983 li
@
grestore
gsave
746.119 49.3609 mo
753.12 49.3609 li
753.12 42.361 li
746.119 42.361 li
746.119 49.3609 li
clp
746.619 48.8609 mo
752.619 42.8609 li
746.619 42.8609 mo
752.619 48.8609 li
f
1 lw
0 lc
746.619 48.8609 mo
752.619 42.8609 li
746.619 42.8609 mo
752.619 48.8609 li
@
grestore
gsave
755.957 49.0277 mo
762.957 49.0277 li
762.957 42.0277 li
755.957 42.0277 li
755.957 49.0277 li
clp
756.457 48.5276 mo
762.457 42.5276 li
756.457 42.5276 mo
762.457 48.5276 li
f
1 lw
0 lc
756.457 48.5276 mo
762.457 42.5276 li
756.457 42.5276 mo
762.457 48.5276 li
@
grestore
gsave
765.795 49.5962 mo
772.795 49.5962 li
772.795 42.5963 li
765.795 42.5963 li
765.795 49.5962 li
clp
766.295 49.0962 mo
772.295 43.0962 li
766.295 43.0962 mo
772.295 49.0962 li
f
1 lw
0 lc
766.295 49.0962 mo
772.295 43.0962 li
766.295 43.0962 mo
772.295 49.0962 li
@
grestore
gsave
775.633 46.3027 mo
782.633 46.3027 li
782.633 39.3024 li
775.633 39.3024 li
775.633 46.3027 li
clp
776.133 45.8026 mo
782.133 39.8026 li
776.133 39.8026 mo
782.133 45.8026 li
f
1 lw
0 lc
776.133 45.8026 mo
782.133 39.8026 li
776.133 39.8026 mo
782.133 45.8026 li
@
grestore
gsave
785.471 46.3418 mo
792.471 46.3418 li
792.471 39.3419 li
785.471 39.3419 li
785.471 46.3418 li
clp
785.971 45.8417 mo
791.971 39.8417 li
785.971 39.8417 mo
791.971 45.8417 li
f
1 lw
0 lc
785.971 45.8417 mo
791.971 39.8417 li
785.971 39.8417 mo
791.971 45.8417 li
@
grestore
gsave
795.31 46.185 mo
802.309 46.185 li
802.309 39.1847 li
795.31 39.1847 li
795.31 46.185 li
clp
795.809 45.6849 mo
801.809 39.6849 li
795.809 39.6849 mo
801.809 45.6849 li
f
1 lw
0 lc
795.809 45.6849 mo
801.809 39.6849 li
795.809 39.6849 mo
801.809 45.6849 li
@
grestore
gsave
805.148 46.1065 mo
812.148 46.1065 li
812.148 39.1065 li
805.148 39.1065 li
805.148 46.1065 li
clp
805.647 45.6064 mo
811.647 39.6064 li
805.647 39.6064 mo
811.647 45.6064 li
f
1 lw
0 lc
805.647 45.6064 mo
811.647 39.6064 li
805.647 39.6064 mo
811.647 45.6064 li
@
grestore
gsave
814.985 46.1262 mo
821.986 46.1262 li
821.986 39.1259 li
814.985 39.1259 li
814.985 46.1262 li
clp
815.485 45.626 mo
821.485 39.626 li
815.485 39.626 mo
821.485 45.626 li
f
1 lw
0 lc
815.485 45.626 mo
821.485 39.626 li
815.485 39.626 mo
821.485 45.626 li
@
grestore
gsave
824.823 46.1456 mo
831.823 46.1456 li
831.823 39.1456 li
824.823 39.1456 li
824.823 46.1456 li
clp
825.323 45.6456 mo
831.323 39.6456 li
825.323 39.6456 mo
831.323 45.6456 li
f
1 lw
0 lc
825.323 45.6456 mo
831.323 39.6456 li
825.323 39.6456 mo
831.323 45.6456 li
@
grestore
gsave
834.661 46.1065 mo
841.661 46.1065 li
841.661 39.1065 li
834.661 39.1065 li
834.661 46.1065 li
clp
835.161 45.6064 mo
841.161 39.6064 li
835.161 39.6064 mo
841.161 45.6064 li
f
1 lw
0 lc
835.161 45.6064 mo
841.161 39.6064 li
835.161 39.6064 mo
841.161 45.6064 li
@
grestore
gsave
844.499 46.0868 mo
851.499 46.0868 li
851.499 39.0868 li
844.499 39.0868 li
844.499 46.0868 li
clp
844.999 45.5869 mo
850.999 39.5869 li
844.999 39.5869 mo
850.999 45.5869 li
f
1 lw
0 lc
844.999 45.5869 mo
850.999 39.5869 li
844.999 39.5869 mo
850.999 45.5869 li
@
grestore
gsave
854.338 46.1065 mo
861.337 46.1065 li
861.337 39.1065 li
854.338 39.1065 li
854.338 46.1065 li
clp
854.837 45.6064 mo
860.837 39.6064 li
854.837 39.6064 mo
860.837 45.6064 li
f
1 lw
0 lc
854.837 45.6064 mo
860.837 39.6064 li
854.837 39.6064 mo
860.837 45.6064 li
@
grestore
gsave
864.176 46.0476 mo
871.176 46.0476 li
871.176 39.0477 li
864.176 39.0477 li
864.176 46.0476 li
clp
864.675 45.5476 mo
870.675 39.5476 li
864.675 39.5476 mo
870.675 45.5476 li
f
1 lw
0 lc
864.675 45.5476 mo
870.675 39.5476 li
864.675 39.5476 mo
870.675 45.5476 li
@
grestore
gsave
874.014 46.067 mo
881.014 46.067 li
881.014 39.0671 li
874.014 39.0671 li
874.014 46.067 li
clp
874.513 45.5672 mo
880.513 39.5672 li
874.513 39.5672 mo
880.513 45.5672 li
f
1 lw
0 lc
874.513 45.5672 mo
880.513 39.5672 li
874.513 39.5672 mo
880.513 45.5672 li
@
grestore
gsave
883.851 46.067 mo
890.852 46.067 li
890.852 39.0671 li
883.851 39.0671 li
883.851 46.067 li
clp
884.352 45.5672 mo
890.352 39.5672 li
884.352 39.5672 mo
890.352 45.5672 li
f
1 lw
0 lc
884.352 45.5672 mo
890.352 39.5672 li
884.352 39.5672 mo
890.352 45.5672 li
@
grestore
gsave
893.689 45.9888 mo
900.689 45.9888 li
900.689 38.9889 li
893.689 38.9889 li
893.689 45.9888 li
clp
894.19 45.4888 mo
900.19 39.4888 li
894.19 39.4888 mo
900.19 45.4888 li
f
1 lw
0 lc
894.19 45.4888 mo
900.19 39.4888 li
894.19 39.4888 mo
900.19 45.4888 li
@
grestore
gsave
903.527 45.93 mo
910.527 45.93 li
910.527 38.93 li
903.527 38.93 li
903.527 45.93 li
clp
904.028 45.4299 mo
910.028 39.4299 li
904.028 39.4299 mo
910.028 45.4299 li
f
1 lw
0 lc
904.028 45.4299 mo
910.028 39.4299 li
904.028 39.4299 mo
910.028 45.4299 li
@
grestore
gsave
913.366 45.9103 mo
920.365 45.9103 li
920.365 38.9103 li
913.366 38.9103 li
913.366 45.9103 li
clp
913.866 45.4103 mo
919.866 39.4103 li
913.866 39.4103 mo
919.866 45.4103 li
f
1 lw
0 lc
913.866 45.4103 mo
919.866 39.4103 li
913.866 39.4103 mo
919.866 45.4103 li
@
grestore
gsave
923.204 45.8712 mo
930.204 45.8712 li
930.204 38.8712 li
923.204 38.8712 li
923.204 45.8712 li
clp
923.704 45.3712 mo
929.704 39.3712 li
923.704 39.3712 mo
929.704 45.3712 li
f
1 lw
0 lc
923.704 45.3712 mo
929.704 39.3712 li
923.704 39.3712 mo
929.704 45.3712 li
@
grestore
gsave
933.042 45.8712 mo
940.042 45.8712 li
940.042 38.8712 li
933.042 38.8712 li
933.042 45.8712 li
clp
933.542 45.3712 mo
939.542 39.3712 li
933.542 39.3712 mo
939.542 45.3712 li
f
1 lw
0 lc
933.542 45.3712 mo
939.542 39.3712 li
933.542 39.3712 mo
939.542 45.3712 li
@
grestore
gsave
942.88 45.832 mo
949.88 45.832 li
949.88 38.8321 li
942.88 38.8321 li
942.88 45.832 li
clp
943.38 45.332 mo
949.38 39.332 li
943.38 39.332 mo
949.38 45.332 li
f
1 lw
0 lc
943.38 45.332 mo
949.38 39.332 li
943.38 39.332 mo
949.38 45.332 li
@
grestore
gsave
952.718 45.7732 mo
959.718 45.7732 li
959.718 38.7733 li
952.718 38.7733 li
952.718 45.7732 li
clp
953.218 45.2731 mo
959.218 39.2731 li
953.218 39.2731 mo
959.218 45.2731 li
f
1 lw
0 lc
953.218 45.2731 mo
959.218 39.2731 li
953.218 39.2731 mo
959.218 45.2731 li
@
grestore
gsave
962.556 45.832 mo
969.556 45.832 li
969.556 38.8321 li
962.556 38.8321 li
962.556 45.832 li
clp
963.056 45.332 mo
969.056 39.332 li
963.056 39.332 mo
969.056 45.332 li
f
1 lw
0 lc
963.056 45.332 mo
969.056 39.332 li
963.056 39.332 mo
969.056 45.332 li
@
grestore
gsave
972.394 45.7929 mo
979.394 45.7929 li
979.394 38.7927 li
972.394 38.7927 li
972.394 45.7929 li
clp
972.894 45.2928 mo
978.894 39.2928 li
972.894 39.2928 mo
978.894 45.2928 li
f
1 lw
0 lc
972.894 45.2928 mo
978.894 39.2928 li
972.894 39.2928 mo
978.894 45.2928 li
@
grestore
gsave
982.232 45.8123 mo
989.232 45.8123 li
989.232 38.8124 li
982.232 38.8124 li
982.232 45.8123 li
clp
982.732 45.3124 mo
988.732 39.3124 li
982.732 39.3124 mo
988.732 45.3124 li
f
1 lw
0 lc
982.732 45.3124 mo
988.732 39.3124 li
982.732 39.3124 mo
988.732 45.3124 li
@
grestore
gsave
992.07 45.7732 mo
999.07 45.7732 li
999.07 38.7733 li
992.07 38.7733 li
992.07 45.7732 li
clp
992.57 45.2732 mo
998.57 39.2732 li
992.57 39.2732 mo
998.57 45.2732 li
f
1 lw
0 lc
992.57 45.2732 mo
998.57 39.2732 li
992.57 39.2732 mo
998.57 45.2732 li
@
grestore
gsave
1001.91 45.7341 mo
1008.91 45.7341 li
1008.91 38.7342 li
1001.91 38.7342 li
1001.91 45.7341 li
clp
1002.41 45.234 mo
1008.41 39.234 li
1002.41 39.234 mo
1008.41 45.234 li
f
1 lw
0 lc
1002.41 45.234 mo
1008.41 39.234 li
1002.41 39.234 mo
1008.41 45.234 li
@
grestore
gsave
1011.75 45.7535 mo
1018.75 45.7535 li
1018.75 38.7535 li
1011.75 38.7535 li
1011.75 45.7535 li
clp
1012.25 45.2536 mo
1018.25 39.2536 li
1012.25 39.2536 mo
1018.25 45.2536 li
f
1 lw
0 lc
1012.25 45.2536 mo
1018.25 39.2536 li
1012.25 39.2536 mo
1018.25 45.2536 li
@
grestore
gsave
1021.58 45.7341 mo
1028.58 45.7341 li
1028.58 38.7342 li
1021.58 38.7342 li
1021.58 45.7341 li
clp
1022.08 45.234 mo
1028.08 39.234 li
1022.08 39.234 mo
1028.08 45.234 li
f
1 lw
0 lc
1022.08 45.234 mo
1028.08 39.234 li
1022.08 39.234 mo
1028.08 45.234 li
@
grestore
gsave
1031.42 45.6947 mo
1038.42 45.6947 li
1038.42 38.6947 li
1031.42 38.6947 li
1031.42 45.6947 li
clp
1031.92 45.1948 mo
1037.92 39.1948 li
1031.92 39.1948 mo
1037.92 45.1948 li
f
1 lw
0 lc
1031.92 45.1948 mo
1037.92 39.1948 li
1031.92 39.1948 mo
1037.92 45.1948 li
@
grestore
gsave
1041.26 45.6753 mo
1048.26 45.6753 li
1048.26 38.6753 li
1041.26 38.6753 li
1041.26 45.6753 li
clp
1041.76 45.1752 mo
1047.76 39.1752 li
1041.76 39.1752 mo
1047.76 45.1752 li
f
1 lw
0 lc
1041.76 45.1752 mo
1047.76 39.1752 li
1041.76 39.1752 mo
1047.76 45.1752 li
@
grestore
gsave
1051.1 45.6947 mo
1058.1 45.6947 li
1058.1 38.6947 li
1051.1 38.6947 li
1051.1 45.6947 li
clp
1051.6 45.1948 mo
1057.6 39.1948 li
1051.6 39.1948 mo
1057.6 45.1948 li
f
1 lw
0 lc
1051.6 45.1948 mo
1057.6 39.1948 li
1051.6 39.1948 mo
1057.6 45.1948 li
@
grestore
gsave
1060.94 45.7535 mo
1067.94 45.7535 li
1067.94 38.7535 li
1060.94 38.7535 li
1060.94 45.7535 li
clp
1061.44 45.2537 mo
1067.44 39.2537 li
1061.44 39.2537 mo
1067.44 45.2537 li
f
1 lw
0 lc
1061.44 45.2537 mo
1067.44 39.2537 li
1061.44 39.2537 mo
1067.44 45.2537 li
@
grestore
gsave
1070.77 45.7535 mo
1077.77 45.7535 li
1077.77 38.7535 li
1070.77 38.7535 li
1070.77 45.7535 li
clp
1071.27 45.2537 mo
1077.27 39.2537 li
1071.27 39.2537 mo
1077.27 45.2537 li
f
1 lw
0 lc
1071.27 45.2537 mo
1077.27 39.2537 li
1071.27 39.2537 mo
1077.27 45.2537 li
@
grestore
gsave
1080.61 45.7144 mo
1087.61 45.7144 li
1087.61 38.7144 li
1080.61 38.7144 li
1080.61 45.7144 li
clp
1081.11 45.2145 mo
1087.11 39.2145 li
1081.11 39.2145 mo
1087.11 45.2145 li
f
1 lw
0 lc
1081.11 45.2145 mo
1087.11 39.2145 li
1081.11 39.2145 mo
1087.11 45.2145 li
@
grestore
gsave
1090.45 45.6362 mo
1097.45 45.6362 li
1097.45 38.6359 li
1090.45 38.6359 li
1090.45 45.6362 li
clp
1090.95 45.136 mo
1096.95 39.136 li
1090.95 39.136 mo
1096.95 45.136 li
f
1 lw
0 lc
1090.95 45.136 mo
1096.95 39.136 li
1090.95 39.136 mo
1096.95 45.136 li
@
grestore
.8 lw
0 lj
71.2883 547.108 mo
71.2883 9.8949 li
@
1142.65 547.108 mo
1142.65 9.8949 li
@
71.2883 547.108 mo
1142.65 547.108 li
@
71.2883 9.8949 mo
1142.65 9.8949 li
@
1135.65 541.608 mo
836.711 541.608 li
836.121 541.607 835.773 541.464 835.564 541.255 cv
835.355 541.046 835.213 540.698 835.211 540.108 cv
835.211 443.671 li
835.213 443.081 835.355 442.734 835.564 442.524 cv
835.773 442.315 836.121 442.173 836.711 442.171 cv
1135.65 442.171 li
1136.24 442.173 1136.59 442.315 1136.79 442.524 cv
1137 442.734 1137.15 443.081 1137.15 443.671 cv
1137.15 540.108 li
1137.15 540.698 1137 541.046 1136.79 541.255 cv
1136.59 541.464 1136.24 541.607 1135.65 541.608 cv
0 0 0 0 cmyk
f
1135.66 542.608 mo
1135.66 542.608 1135.65 542.608 1135.65 542.608 cv
836.711 542.608 li
836.708 542.608 836.704 542.608 836.701 542.608 cv
835.961 542.608 835.313 542.417 834.857 541.962 cv
834.4 541.505 834.209 540.852 834.211 540.108 cv
834.211 443.671 li
834.209 442.928 834.4 442.275 834.857 441.817 cv
835.313 441.362 835.961 441.171 836.701 441.171 cv
836.704 441.171 836.707 441.171 836.711 441.171 cv
1135.65 441.171 li
1135.65 441.171 1135.66 441.171 1135.66 441.171 cv
1136.4 441.171 1137.05 441.362 1137.5 441.817 cv
1137.96 442.275 1138.15 442.928 1138.15 443.671 cv
1138.15 540.108 li
1138.15 540.852 1137.96 541.505 1137.5 541.962 cv
1137.05 542.417 1136.4 542.608 1135.66 542.608 cv
836.711 541.608 mo
1135.65 541.608 li
1136.24 541.607 1136.59 541.464 1136.79 541.255 cv
1137 541.046 1137.15 540.698 1137.15 540.108 cv
1137.15 443.671 li
1137.15 443.081 1137 442.734 1136.79 442.524 cv
1136.59 442.315 1136.24 442.173 1135.65 442.171 cv
836.711 442.171 li
836.121 442.173 835.773 442.315 835.564 442.524 cv
835.355 442.734 835.213 443.081 835.211 443.671 cv
835.211 540.108 li
835.213 540.698 835.355 541.046 835.564 541.255 cv
835.773 541.464 836.121 541.607 836.711 541.608 cv
836.711 541.608 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
838.711 457.374 mo
858.711 457.374 li
0 1 1 0 cmyk
@
870.651 447.914 mo
870.651 459.254 li
873.031 459.254 li
875.031 459.254 876.511 458.814 877.451 457.894 cv
878.371 456.974 878.851 455.534 878.851 453.574 cv
878.851 451.614 878.371 450.194 877.451 449.274 cv
876.511 448.374 875.031 447.914 873.031 447.914 cv
870.651 447.914 li
868.671 446.294 mo
872.731 446.294 li
875.551 446.294 877.631 446.894 878.951 448.054 cv
880.271 449.234 880.931 451.074 880.931 453.574 cv
880.931 456.094 880.251 457.934 878.931 459.114 cv
877.611 460.294 875.531 460.874 872.731 460.874 cv
868.671 460.874 li
868.671 446.294 li
1 /0 /CSD get_res sepcs
1 sep
f
886.051 453.914 mo
886.051 459.254 li
889.211 459.254 li
890.271 459.254 891.051 459.034 891.571 458.594 cv
892.071 458.154 892.331 457.494 892.331 456.574 cv
892.331 455.674 892.071 455.014 891.571 454.574 cv
891.051 454.134 890.271 453.914 889.211 453.914 cv
886.051 453.914 li
886.051 447.914 mo
886.051 452.314 li
888.971 452.314 li
889.931 452.314 890.631 452.134 891.111 451.774 cv
891.591 451.414 891.831 450.874 891.831 450.114 cv
891.831 449.394 891.591 448.834 891.111 448.474 cv
890.631 448.114 889.931 447.914 888.971 447.914 cv
886.051 447.914 li
884.071 446.294 mo
889.111 446.294 li
890.611 446.294 891.771 446.614 892.591 447.234 cv
893.391 447.874 893.811 448.754 893.811 449.894 cv
893.811 450.794 893.591 451.514 893.171 452.034 cv
892.751 452.554 892.151 452.894 891.351 453.014 cv
892.311 453.234 893.071 453.674 893.611 454.334 cv
894.131 454.994 894.411 455.814 894.411 456.794 cv
894.411 458.114 893.951 459.114 893.071 459.814 cv
892.191 460.534 890.931 460.874 889.311 460.874 cv
884.071 460.874 li
884.071 446.294 li
f
897.791 446.294 mo
900.451 446.294 li
906.911 458.494 li
906.911 446.294 li
908.831 446.294 li
908.831 460.874 li
906.171 460.874 li
899.711 448.674 li
899.711 460.874 li
897.791 460.874 li
897.791 446.294 li
f
923.351 445.694 mo
922.471 447.214 921.831 448.694 921.411 450.154 cv
920.971 451.614 920.771 453.094 920.771 454.594 cv
920.771 456.114 920.971 457.594 921.411 459.054 cv
921.831 460.534 922.471 461.994 923.351 463.494 cv
921.791 463.494 li
920.811 461.954 920.071 460.474 919.591 458.994 cv
919.111 457.514 918.871 456.054 918.871 454.594 cv
918.871 453.154 919.111 451.694 919.591 450.214 cv
920.071 448.734 920.791 447.234 921.791 445.694 cv
923.351 445.694 li
f
924.911 446.294 mo
937.231 446.294 li
937.231 447.954 li
932.051 447.954 li
932.051 460.874 li
930.071 460.874 li
930.071 447.954 li
924.911 447.954 li
924.911 446.294 li
f
945.391 451.614 mo
945.191 451.494 944.971 451.414 944.731 451.354 cv
944.491 451.314 944.231 451.274 943.951 451.274 cv
942.931 451.274 942.151 451.614 941.611 452.274 cv
941.051 452.934 940.791 453.874 940.791 455.114 cv
940.791 460.874 li
938.991 460.874 li
938.991 449.934 li
940.791 449.934 li
940.791 451.634 li
941.151 450.974 941.651 450.474 942.251 450.154 cv
942.851 449.834 943.591 449.674 944.471 449.674 cv
944.591 449.674 944.731 449.694 944.891 449.694 cv
945.031 449.714 945.191 449.734 945.391 449.774 cv
945.391 451.614 li
f
952.251 455.374 mo
950.791 455.374 949.791 455.554 949.231 455.874 cv
948.671 456.214 948.391 456.774 948.391 457.574 cv
948.391 458.214 948.591 458.734 949.011 459.094 cv
949.431 459.474 950.011 459.654 950.731 459.654 cv
951.731 459.654 952.531 459.314 953.131 458.594 cv
953.731 457.894 954.031 456.954 954.031 455.774 cv
954.031 455.374 li
952.251 455.374 li
955.831 454.634 mo
955.831 460.874 li
954.031 460.874 li
954.031 459.214 li
953.611 459.894 953.091 460.374 952.491 460.674 cv
951.891 460.974 951.131 461.134 950.251 461.134 cv
949.131 461.134 948.231 460.834 947.571 460.214 cv
946.911 459.594 946.591 458.754 946.591 457.694 cv
946.591 456.474 946.991 455.554 947.831 454.914 cv
948.651 454.294 949.871 453.974 951.511 453.974 cv
954.031 453.974 li
954.031 453.794 li
954.031 452.974 953.751 452.334 953.211 451.874 cv
952.671 451.434 951.911 451.194 950.931 451.194 cv
950.291 451.194 949.691 451.274 949.091 451.434 cv
948.491 451.594 947.931 451.814 947.391 452.094 cv
947.391 450.434 li
948.031 450.194 948.671 449.994 949.291 449.874 cv
949.911 449.754 950.511 449.674 951.111 449.674 cv
952.691 449.674 953.871 450.094 954.651 450.914 cv
955.431 451.734 955.831 452.974 955.831 454.634 cv
f
959.531 449.934 mo
961.331 449.934 li
961.331 460.874 li
959.531 460.874 li
959.531 449.934 li
959.531 445.674 mo
961.331 445.674 li
961.331 447.954 li
959.531 447.954 li
959.531 445.674 li
f
974.191 454.274 mo
974.191 460.874 li
972.391 460.874 li
972.391 454.334 li
972.391 453.294 972.171 452.534 971.771 452.014 cv
971.371 451.494 970.771 451.234 969.971 451.234 cv
968.991 451.234 968.231 451.554 967.671 452.174 cv
967.111 452.794 966.831 453.634 966.831 454.694 cv
966.831 460.874 li
965.031 460.874 li
965.031 449.934 li
966.831 449.934 li
966.831 451.634 li
967.251 450.994 967.751 450.494 968.351 450.174 cv
968.931 449.854 969.611 449.674 970.371 449.674 cv
971.611 449.674 972.571 450.074 973.211 450.854 cv
973.851 451.634 974.191 452.774 974.191 454.274 cv
f
977.771 449.934 mo
979.571 449.934 li
979.571 460.874 li
977.771 460.874 li
977.771 449.934 li
977.771 445.674 mo
979.571 445.674 li
979.571 447.954 li
977.771 447.954 li
977.771 445.674 li
f
992.431 454.274 mo
992.431 460.874 li
990.631 460.874 li
990.631 454.334 li
990.631 453.294 990.411 452.534 990.011 452.014 cv
989.611 451.494 989.011 451.234 988.211 451.234 cv
987.231 451.234 986.471 451.554 985.911 452.174 cv
985.351 452.794 985.071 453.634 985.071 454.694 cv
985.071 460.874 li
983.271 460.874 li
983.271 449.934 li
985.071 449.934 li
985.071 451.634 li
985.491 450.994 985.991 450.494 986.591 450.174 cv
987.171 449.854 987.851 449.674 988.611 449.674 cv
989.851 449.674 990.811 450.074 991.451 450.854 cv
992.091 451.634 992.431 452.774 992.431 454.274 cv
f
1003.21 455.274 mo
1003.21 453.994 1002.93 452.974 1002.41 452.254 cv
1001.87 451.534 1001.11 451.174 1000.15 451.174 cv
999.191 451.174 998.431 451.534 997.891 452.254 cv
997.351 452.974 997.091 453.994 997.091 455.274 cv
997.091 456.574 997.351 457.574 997.891 458.294 cv
998.431 459.014 999.191 459.374 1000.15 459.374 cv
1001.11 459.374 1001.87 459.014 1002.41 458.294 cv
1002.93 457.574 1003.21 456.574 1003.21 455.274 cv
1005.01 459.514 mo
1005.01 461.354 1004.59 462.734 1003.77 463.654 cv
1002.93 464.554 1001.67 465.014 999.971 465.014 cv
999.331 465.014 998.751 464.954 998.191 464.874 cv
997.631 464.774 997.071 464.634 996.551 464.434 cv
996.551 462.694 li
997.071 462.974 997.591 463.174 998.111 463.314 cv
998.631 463.454 999.151 463.534 999.691 463.534 cv
1000.85 463.534 1001.73 463.214 1002.33 462.614 cv
1002.91 461.994 1003.21 461.074 1003.21 459.834 cv
1003.21 458.954 li
1002.83 459.594 1002.35 460.074 1001.77 460.394 cv
1001.19 460.714 1000.51 460.874 999.711 460.874 cv
998.351 460.874 997.271 460.374 996.451 459.354 cv
995.631 458.334 995.231 456.974 995.231 455.274 cv
995.231 453.594 995.631 452.234 996.451 451.214 cv
997.271 450.194 998.351 449.674 999.711 449.674 cv
1000.51 449.674 1001.19 449.834 1001.77 450.154 cv
1002.35 450.474 1002.83 450.954 1003.21 451.594 cv
1003.21 449.934 li
1005.01 449.934 li
1005.01 459.514 li
f
1009.17 458.394 mo
1011.23 458.394 li
1011.23 460.074 li
1009.63 463.174 li
1008.37 463.174 li
1009.17 460.074 li
1009.17 458.394 li
f
1030.25 446.774 mo
1030.25 448.694 li
1029.49 448.334 1028.79 448.074 1028.13 447.894 cv
1027.45 447.734 1026.81 447.634 1026.21 447.634 cv
1025.13 447.634 1024.29 447.854 1023.71 448.254 cv
1023.13 448.674 1022.85 449.274 1022.85 450.034 cv
1022.85 450.674 1023.03 451.174 1023.43 451.494 cv
1023.81 451.834 1024.55 452.094 1025.63 452.294 cv
1026.83 452.534 li
1028.29 452.814 1029.37 453.314 1030.07 454.014 cv
1030.77 454.734 1031.13 455.674 1031.13 456.854 cv
1031.13 458.274 1030.65 459.334 1029.71 460.054 cv
1028.75 460.774 1027.37 461.134 1025.55 461.134 cv
1024.85 461.134 1024.11 461.054 1023.33 460.914 cv
1022.55 460.774 1021.75 460.554 1020.93 460.234 cv
1020.93 458.194 li
1021.73 458.654 1022.51 458.994 1023.27 459.214 cv
1024.03 459.454 1024.79 459.554 1025.55 459.554 cv
1026.67 459.554 1027.53 459.334 1028.15 458.894 cv
1028.75 458.454 1029.07 457.834 1029.07 456.994 cv
1029.07 456.274 1028.85 455.714 1028.41 455.314 cv
1027.97 454.914 1027.25 454.614 1026.25 454.414 cv
1025.05 454.174 li
1023.57 453.894 1022.51 453.434 1021.85 452.794 cv
1021.19 452.174 1020.87 451.314 1020.87 450.194 cv
1020.87 448.914 1021.31 447.894 1022.23 447.154 cv
1023.13 446.414 1024.39 446.034 1025.99 446.034 cv
1026.67 446.034 1027.35 446.094 1028.07 446.214 cv
1028.77 446.334 1029.49 446.534 1030.25 446.774 cv
f
1034.13 449.934 mo
1035.93 449.934 li
1035.93 460.874 li
1034.13 460.874 li
1034.13 449.934 li
1034.13 445.674 mo
1035.93 445.674 li
1035.93 447.954 li
1034.13 447.954 li
1034.13 445.674 li
f
1046.89 455.274 mo
1046.89 453.994 1046.61 452.974 1046.09 452.254 cv
1045.55 451.534 1044.79 451.174 1043.83 451.174 cv
1042.87 451.174 1042.11 451.534 1041.57 452.254 cv
1041.03 452.974 1040.77 453.994 1040.77 455.274 cv
1040.77 456.574 1041.03 457.574 1041.57 458.294 cv
1042.11 459.014 1042.87 459.374 1043.83 459.374 cv
1044.79 459.374 1045.55 459.014 1046.09 458.294 cv
1046.61 457.574 1046.89 456.574 1046.89 455.274 cv
1048.69 459.514 mo
1048.69 461.354 1048.27 462.734 1047.45 463.654 cv
1046.61 464.554 1045.35 465.014 1043.65 465.014 cv
1043.01 465.014 1042.43 464.954 1041.87 464.874 cv
1041.31 464.774 1040.75 464.634 1040.23 464.434 cv
1040.23 462.694 li
1040.75 462.974 1041.27 463.174 1041.79 463.314 cv
1042.31 463.454 1042.83 463.534 1043.37 463.534 cv
1044.53 463.534 1045.41 463.214 1046.01 462.614 cv
1046.59 461.994 1046.89 461.074 1046.89 459.834 cv
1046.89 458.954 li
1046.51 459.594 1046.03 460.074 1045.45 460.394 cv
1044.87 460.714 1044.19 460.874 1043.39 460.874 cv
1042.03 460.874 1040.95 460.374 1040.13 459.354 cv
1039.31 458.334 1038.91 456.974 1038.91 455.274 cv
1038.91 453.594 1039.31 452.234 1040.13 451.214 cv
1040.95 450.194 1042.03 449.674 1043.39 449.674 cv
1044.19 449.674 1044.87 449.834 1045.45 450.154 cv
1046.03 450.474 1046.51 450.954 1046.89 451.594 cv
1046.89 449.934 li
1048.69 449.934 li
1048.69 459.514 li
f
1060.91 452.034 mo
1061.35 451.234 1061.89 450.654 1062.51 450.254 cv
1063.13 449.874 1063.87 449.674 1064.73 449.674 cv
1065.85 449.674 1066.73 450.074 1067.35 450.874 cv
1067.97 451.674 1068.29 452.814 1068.29 454.274 cv
1068.29 460.874 li
1066.49 460.874 li
1066.49 454.334 li
1066.49 453.294 1066.29 452.514 1065.93 451.994 cv
1065.55 451.494 1064.99 451.234 1064.23 451.234 cv
1063.29 451.234 1062.55 451.554 1062.01 452.174 cv
1061.47 452.794 1061.21 453.634 1061.21 454.694 cv
1061.21 460.874 li
1059.41 460.874 li
1059.41 454.334 li
1059.41 453.294 1059.21 452.514 1058.85 451.994 cv
1058.47 451.494 1057.89 451.234 1057.13 451.234 cv
1056.21 451.234 1055.47 451.554 1054.93 452.174 cv
1054.39 452.794 1054.13 453.634 1054.13 454.694 cv
1054.13 460.874 li
1052.33 460.874 li
1052.33 449.934 li
1054.13 449.934 li
1054.13 451.634 li
1054.53 450.974 1055.03 450.474 1055.61 450.154 cv
1056.17 449.834 1056.85 449.674 1057.65 449.674 cv
1058.45 449.674 1059.11 449.874 1059.67 450.274 cv
1060.23 450.674 1060.63 451.274 1060.91 452.034 cv
f
1076.11 451.194 mo
1075.15 451.194 1074.39 451.574 1073.83 452.334 cv
1073.27 453.094 1072.99 454.114 1072.99 455.414 cv
1072.99 456.734 1073.25 457.754 1073.81 458.514 cv
1074.37 459.274 1075.13 459.634 1076.11 459.634 cv
1077.07 459.634 1077.83 459.274 1078.39 458.514 cv
1078.95 457.754 1079.23 456.734 1079.23 455.414 cv
1079.23 454.134 1078.95 453.094 1078.39 452.334 cv
1077.83 451.574 1077.07 451.194 1076.11 451.194 cv
1076.11 449.674 mo
1077.67 449.674 1078.89 450.194 1079.79 451.194 cv
1080.67 452.214 1081.13 453.614 1081.13 455.414 cv
1081.13 457.214 1080.67 458.614 1079.79 459.614 cv
1078.89 460.634 1077.67 461.134 1076.11 461.134 cv
1074.53 461.134 1073.29 460.634 1072.41 459.614 cv
1071.53 458.614 1071.09 457.214 1071.09 455.414 cv
1071.09 453.614 1071.53 452.214 1072.41 451.194 cv
1073.29 450.194 1074.53 449.674 1076.11 449.674 cv
f
1084.11 449.934 mo
1085.91 449.934 li
1085.91 460.874 li
1084.11 460.874 li
1084.11 449.934 li
1084.11 445.674 mo
1085.91 445.674 li
1085.91 447.954 li
1084.11 447.954 li
1084.11 445.674 li
f
1096.87 451.594 mo
1096.87 445.674 li
1098.67 445.674 li
1098.67 460.874 li
1096.87 460.874 li
1096.87 459.234 li
1096.49 459.894 1096.01 460.374 1095.43 460.674 cv
1094.85 460.974 1094.17 461.134 1093.37 461.134 cv
1092.05 461.134 1090.97 460.614 1090.13 459.574 cv
1089.29 458.534 1088.89 457.134 1088.89 455.414 cv
1088.89 453.694 1089.29 452.314 1090.13 451.254 cv
1090.97 450.214 1092.05 449.674 1093.37 449.674 cv
1094.17 449.674 1094.85 449.834 1095.43 450.154 cv
1096.01 450.474 1096.49 450.954 1096.87 451.594 cv
1090.75 455.414 mo
1090.75 456.734 1091.01 457.774 1091.55 458.534 cv
1092.09 459.294 1092.85 459.654 1093.81 459.654 cv
1094.75 459.654 1095.49 459.294 1096.05 458.534 cv
1096.59 457.774 1096.87 456.734 1096.87 455.414 cv
1096.87 454.094 1096.59 453.074 1096.05 452.314 cv
1095.49 451.554 1094.75 451.174 1093.81 451.174 cv
1092.85 451.174 1092.09 451.554 1091.55 452.314 cv
1091.01 453.074 1090.75 454.094 1090.75 455.414 cv
f
1102.09 445.694 mo
1103.65 445.694 li
1104.61 447.234 1105.35 448.734 1105.83 450.214 cv
1106.31 451.694 1106.57 453.154 1106.57 454.594 cv
1106.57 456.054 1106.31 457.514 1105.83 458.994 cv
1105.35 460.474 1104.61 461.954 1103.65 463.494 cv
1102.09 463.494 li
1102.95 461.994 1103.59 460.534 1104.03 459.054 cv
1104.45 457.594 1104.67 456.114 1104.67 454.594 cv
1104.67 453.094 1104.45 451.614 1104.03 450.154 cv
1103.59 448.694 1102.95 447.214 1102.09 445.694 cv
f
838.711 481.733 mo
858.711 481.733 li
0 1 1 0 cmyk
@
845.711 484.733 mo
851.711 478.733 li
845.711 478.733 mo
851.711 484.733 li
f
1 lw
0 lc
845.711 484.733 mo
851.711 478.733 li
845.711 478.733 mo
851.711 484.733 li
@
870.651 472.273 mo
870.651 483.613 li
873.031 483.613 li
875.031 483.613 876.511 483.173 877.451 482.253 cv
878.371 481.333 878.851 479.893 878.851 477.933 cv
878.851 475.973 878.371 474.553 877.451 473.633 cv
876.511 472.733 875.031 472.273 873.031 472.273 cv
870.651 472.273 li
868.671 470.653 mo
872.731 470.653 li
875.551 470.653 877.631 471.253 878.951 472.413 cv
880.271 473.593 880.931 475.433 880.931 477.933 cv
880.931 480.453 880.251 482.293 878.931 483.473 cv
877.611 484.653 875.531 485.233 872.731 485.233 cv
868.671 485.233 li
868.671 470.653 li
1 /0 /CSD get_res sepcs
1 sep
f
886.051 478.273 mo
886.051 483.613 li
889.211 483.613 li
890.271 483.613 891.051 483.393 891.571 482.953 cv
892.071 482.513 892.331 481.853 892.331 480.933 cv
892.331 480.033 892.071 479.373 891.571 478.933 cv
891.051 478.493 890.271 478.273 889.211 478.273 cv
886.051 478.273 li
886.051 472.273 mo
886.051 476.673 li
888.971 476.673 li
889.931 476.673 890.631 476.493 891.111 476.133 cv
891.591 475.773 891.831 475.233 891.831 474.473 cv
891.831 473.753 891.591 473.193 891.111 472.833 cv
890.631 472.473 889.931 472.273 888.971 472.273 cv
886.051 472.273 li
884.071 470.653 mo
889.111 470.653 li
890.611 470.653 891.771 470.973 892.591 471.593 cv
893.391 472.233 893.811 473.113 893.811 474.253 cv
893.811 475.153 893.591 475.873 893.171 476.393 cv
892.751 476.913 892.151 477.253 891.351 477.373 cv
892.311 477.593 893.071 478.033 893.611 478.693 cv
894.131 479.353 894.411 480.173 894.411 481.153 cv
894.411 482.473 893.951 483.473 893.071 484.173 cv
892.191 484.893 890.931 485.233 889.311 485.233 cv
884.071 485.233 li
884.071 470.653 li
f
897.791 470.653 mo
900.451 470.653 li
906.911 482.853 li
906.911 470.653 li
908.831 470.653 li
908.831 485.233 li
906.171 485.233 li
899.711 473.033 li
899.711 485.233 li
897.791 485.233 li
897.791 470.653 li
f
923.351 470.053 mo
922.471 471.573 921.831 473.053 921.411 474.513 cv
920.971 475.973 920.771 477.453 920.771 478.953 cv
920.771 480.473 920.971 481.953 921.411 483.413 cv
921.831 484.893 922.471 486.353 923.351 487.853 cv
921.791 487.853 li
920.811 486.313 920.071 484.833 919.591 483.353 cv
919.111 481.873 918.871 480.413 918.871 478.953 cv
918.871 477.513 919.111 476.053 919.591 474.573 cv
920.071 473.093 920.791 471.593 921.791 470.053 cv
923.351 470.053 li
f
924.911 470.653 mo
937.231 470.653 li
937.231 472.313 li
932.051 472.313 li
932.051 485.233 li
930.071 485.233 li
930.071 472.313 li
924.911 472.313 li
924.911 470.653 li
f
948.411 479.313 mo
948.411 480.193 li
940.151 480.193 li
940.231 481.433 940.591 482.393 941.271 483.033 cv
941.931 483.673 942.851 483.993 944.051 483.993 cv
944.731 483.993 945.411 483.913 946.051 483.753 cv
946.691 483.593 947.351 483.333 947.991 482.973 cv
947.991 484.673 li
947.351 484.953 946.691 485.173 946.011 485.293 cv
945.331 485.413 944.631 485.493 943.951 485.493 cv
942.191 485.493 940.811 484.993 939.791 483.993 cv
938.771 482.993 938.271 481.613 938.271 479.873 cv
938.271 478.093 938.751 476.673 939.711 475.613 cv
940.671 474.573 941.991 474.033 943.631 474.033 cv
945.111 474.033 946.271 474.513 947.131 475.453 cv
947.971 476.413 948.411 477.693 948.411 479.313 cv
946.611 478.793 mo
946.591 477.813 946.311 477.033 945.791 476.433 cv
945.251 475.853 944.531 475.553 943.651 475.553 cv
942.651 475.553 941.851 475.853 941.251 476.413 cv
940.651 476.973 940.291 477.773 940.211 478.793 cv
946.611 478.793 li
f
958.331 474.613 mo
958.331 476.313 li
957.811 476.073 957.291 475.873 956.751 475.733 cv
956.191 475.613 955.631 475.533 955.051 475.533 cv
954.151 475.533 953.471 475.673 953.031 475.953 cv
952.591 476.233 952.371 476.633 952.371 477.173 cv
952.371 477.593 952.531 477.913 952.851 478.153 cv
953.171 478.393 953.811 478.633 954.771 478.833 cv
955.391 478.973 li
956.671 479.253 957.571 479.653 958.111 480.133 cv
958.631 480.633 958.911 481.333 958.911 482.213 cv
958.911 483.233 958.511 484.033 957.711 484.613 cv
956.911 485.213 955.791 485.493 954.391 485.493 cv
953.791 485.493 953.191 485.433 952.551 485.333 cv
951.911 485.233 951.251 485.073 950.551 484.833 cv
950.551 482.973 li
951.211 483.333 951.871 483.593 952.511 483.753 cv
953.151 483.933 953.791 484.013 954.431 484.013 cv
955.271 484.013 955.931 483.873 956.391 483.593 cv
956.831 483.313 957.071 482.893 957.071 482.353 cv
957.071 481.873 956.891 481.493 956.571 481.233 cv
956.251 480.973 955.531 480.713 954.411 480.473 cv
953.791 480.333 li
952.671 480.093 951.851 479.733 951.371 479.253 cv
950.871 478.773 950.631 478.113 950.631 477.253 cv
950.631 476.233 950.991 475.433 951.711 474.873 cv
952.431 474.313 953.471 474.033 954.831 474.033 cv
955.491 474.033 956.111 474.093 956.711 474.193 cv
957.291 474.293 957.831 474.433 958.331 474.613 cv
f
963.551 471.193 mo
963.551 474.293 li
967.251 474.293 li
967.251 475.693 li
963.551 475.693 li
963.551 481.633 li
963.551 482.533 963.671 483.113 963.911 483.353 cv
964.151 483.613 964.651 483.733 965.411 483.733 cv
967.251 483.733 li
967.251 485.233 li
965.411 485.233 li
964.011 485.233 963.051 484.973 962.531 484.453 cv
962.011 483.933 961.751 482.993 961.751 481.633 cv
961.751 475.693 li
960.431 475.693 li
960.431 474.293 li
961.751 474.293 li
961.751 471.193 li
963.551 471.193 li
f
969.611 474.293 mo
971.411 474.293 li
971.411 485.233 li
969.611 485.233 li
969.611 474.293 li
969.611 470.033 mo
971.411 470.033 li
971.411 472.313 li
969.611 472.313 li
969.611 470.033 li
f
984.271 478.633 mo
984.271 485.233 li
982.471 485.233 li
982.471 478.693 li
982.471 477.653 982.251 476.893 981.851 476.373 cv
981.451 475.853 980.851 475.593 980.051 475.593 cv
979.071 475.593 978.311 475.913 977.751 476.533 cv
977.191 477.153 976.911 477.993 976.911 479.053 cv
976.911 485.233 li
975.111 485.233 li
975.111 474.293 li
976.911 474.293 li
976.911 475.993 li
977.331 475.353 977.831 474.853 978.431 474.533 cv
979.011 474.213 979.691 474.033 980.451 474.033 cv
981.691 474.033 982.651 474.433 983.291 475.213 cv
983.931 475.993 984.271 477.133 984.271 478.633 cv
f
995.051 479.633 mo
995.051 478.353 994.771 477.333 994.251 476.613 cv
993.711 475.893 992.951 475.533 991.991 475.533 cv
991.031 475.533 990.271 475.893 989.731 476.613 cv
989.191 477.333 988.931 478.353 988.931 479.633 cv
988.931 480.933 989.191 481.933 989.731 482.653 cv
990.271 483.373 991.031 483.733 991.991 483.733 cv
992.951 483.733 993.711 483.373 994.251 482.653 cv
994.771 481.933 995.051 480.933 995.051 479.633 cv
996.851 483.873 mo
996.851 485.713 996.431 487.093 995.611 488.013 cv
994.771 488.913 993.511 489.373 991.811 489.373 cv
991.171 489.373 990.591 489.313 990.031 489.233 cv
989.471 489.133 988.911 488.993 988.391 488.793 cv
988.391 487.053 li
988.911 487.333 989.431 487.533 989.951 487.673 cv
990.471 487.813 990.991 487.893 991.531 487.893 cv
992.691 487.893 993.571 487.573 994.171 486.973 cv
994.751 486.353 995.051 485.433 995.051 484.193 cv
995.051 483.313 li
994.671 483.953 994.191 484.433 993.611 484.753 cv
993.031 485.073 992.351 485.233 991.551 485.233 cv
990.191 485.233 989.111 484.733 988.291 483.713 cv
987.471 482.693 987.071 481.333 987.071 479.633 cv
987.071 477.953 987.471 476.593 988.291 475.573 cv
989.111 474.553 990.191 474.033 991.551 474.033 cv
992.351 474.033 993.031 474.193 993.611 474.513 cv
994.191 474.833 994.671 475.313 995.051 475.953 cv
995.051 474.293 li
996.851 474.293 li
996.851 483.873 li
f
1001.01 482.753 mo
1003.07 482.753 li
1003.07 484.433 li
1001.47 487.533 li
1000.21 487.533 li
1001.01 484.433 li
1001.01 482.753 li
f
1022.09 471.133 mo
1022.09 473.053 li
1021.33 472.693 1020.63 472.433 1019.97 472.253 cv
1019.29 472.093 1018.65 471.993 1018.05 471.993 cv
1016.97 471.993 1016.13 472.213 1015.55 472.613 cv
1014.97 473.033 1014.69 473.633 1014.69 474.393 cv
1014.69 475.033 1014.87 475.533 1015.27 475.853 cv
1015.65 476.193 1016.39 476.453 1017.47 476.653 cv
1018.67 476.893 li
1020.13 477.173 1021.21 477.673 1021.91 478.373 cv
1022.61 479.093 1022.97 480.033 1022.97 481.213 cv
1022.97 482.633 1022.49 483.693 1021.55 484.413 cv
1020.59 485.133 1019.21 485.493 1017.39 485.493 cv
1016.69 485.493 1015.95 485.413 1015.17 485.273 cv
1014.39 485.133 1013.59 484.913 1012.77 484.593 cv
1012.77 482.553 li
1013.57 483.013 1014.35 483.353 1015.11 483.573 cv
1015.87 483.813 1016.63 483.913 1017.39 483.913 cv
1018.51 483.913 1019.37 483.693 1019.99 483.253 cv
1020.59 482.813 1020.91 482.193 1020.91 481.353 cv
1020.91 480.633 1020.69 480.073 1020.25 479.673 cv
1019.81 479.273 1019.09 478.973 1018.09 478.773 cv
1016.89 478.533 li
1015.41 478.253 1014.35 477.793 1013.69 477.153 cv
1013.03 476.533 1012.71 475.673 1012.71 474.553 cv
1012.71 473.273 1013.15 472.253 1014.07 471.513 cv
1014.97 470.773 1016.23 470.393 1017.83 470.393 cv
1018.51 470.393 1019.19 470.453 1019.91 470.573 cv
1020.61 470.693 1021.33 470.893 1022.09 471.133 cv
f
1025.97 474.293 mo
1027.77 474.293 li
1027.77 485.233 li
1025.97 485.233 li
1025.97 474.293 li
1025.97 470.033 mo
1027.77 470.033 li
1027.77 472.313 li
1025.97 472.313 li
1025.97 470.033 li
f
1038.73 479.633 mo
1038.73 478.353 1038.45 477.333 1037.93 476.613 cv
1037.39 475.893 1036.63 475.533 1035.67 475.533 cv
1034.71 475.533 1033.95 475.893 1033.41 476.613 cv
1032.87 477.333 1032.61 478.353 1032.61 479.633 cv
1032.61 480.933 1032.87 481.933 1033.41 482.653 cv
1033.95 483.373 1034.71 483.733 1035.67 483.733 cv
1036.63 483.733 1037.39 483.373 1037.93 482.653 cv
1038.45 481.933 1038.73 480.933 1038.73 479.633 cv
1040.53 483.873 mo
1040.53 485.713 1040.11 487.093 1039.29 488.013 cv
1038.45 488.913 1037.19 489.373 1035.49 489.373 cv
1034.85 489.373 1034.27 489.313 1033.71 489.233 cv
1033.15 489.133 1032.59 488.993 1032.07 488.793 cv
1032.07 487.053 li
1032.59 487.333 1033.11 487.533 1033.63 487.673 cv
1034.15 487.813 1034.67 487.893 1035.21 487.893 cv
1036.37 487.893 1037.25 487.573 1037.85 486.973 cv
1038.43 486.353 1038.73 485.433 1038.73 484.193 cv
1038.73 483.313 li
1038.35 483.953 1037.87 484.433 1037.29 484.753 cv
1036.71 485.073 1036.03 485.233 1035.23 485.233 cv
1033.87 485.233 1032.79 484.733 1031.97 483.713 cv
1031.15 482.693 1030.75 481.333 1030.75 479.633 cv
1030.75 477.953 1031.15 476.593 1031.97 475.573 cv
1032.79 474.553 1033.87 474.033 1035.23 474.033 cv
1036.03 474.033 1036.71 474.193 1037.29 474.513 cv
1037.87 474.833 1038.35 475.313 1038.73 475.953 cv
1038.73 474.293 li
1040.53 474.293 li
1040.53 483.873 li
f
1052.75 476.393 mo
1053.19 475.593 1053.73 475.013 1054.35 474.613 cv
1054.97 474.233 1055.71 474.033 1056.57 474.033 cv
1057.69 474.033 1058.57 474.433 1059.19 475.233 cv
1059.81 476.033 1060.13 477.173 1060.13 478.633 cv
1060.13 485.233 li
1058.33 485.233 li
1058.33 478.693 li
1058.33 477.653 1058.13 476.873 1057.77 476.353 cv
1057.39 475.853 1056.83 475.593 1056.07 475.593 cv
1055.13 475.593 1054.39 475.913 1053.85 476.533 cv
1053.31 477.153 1053.05 477.993 1053.05 479.053 cv
1053.05 485.233 li
1051.25 485.233 li
1051.25 478.693 li
1051.25 477.653 1051.05 476.873 1050.69 476.353 cv
1050.31 475.853 1049.73 475.593 1048.97 475.593 cv
1048.05 475.593 1047.31 475.913 1046.77 476.533 cv
1046.23 477.153 1045.97 477.993 1045.97 479.053 cv
1045.97 485.233 li
1044.17 485.233 li
1044.17 474.293 li
1045.97 474.293 li
1045.97 475.993 li
1046.37 475.333 1046.87 474.833 1047.45 474.513 cv
1048.01 474.193 1048.69 474.033 1049.49 474.033 cv
1050.29 474.033 1050.95 474.233 1051.51 474.633 cv
1052.07 475.033 1052.47 475.633 1052.75 476.393 cv
f
1067.95 475.553 mo
1066.99 475.553 1066.23 475.933 1065.67 476.693 cv
1065.11 477.453 1064.83 478.473 1064.83 479.773 cv
1064.83 481.093 1065.09 482.113 1065.65 482.873 cv
1066.21 483.633 1066.97 483.993 1067.95 483.993 cv
1068.91 483.993 1069.67 483.633 1070.23 482.873 cv
1070.79 482.113 1071.07 481.093 1071.07 479.773 cv
1071.07 478.493 1070.79 477.453 1070.23 476.693 cv
1069.67 475.933 1068.91 475.553 1067.95 475.553 cv
1067.95 474.033 mo
1069.51 474.033 1070.73 474.553 1071.63 475.553 cv
1072.51 476.573 1072.97 477.973 1072.97 479.773 cv
1072.97 481.573 1072.51 482.973 1071.63 483.973 cv
1070.73 484.993 1069.51 485.493 1067.95 485.493 cv
1066.37 485.493 1065.13 484.993 1064.25 483.973 cv
1063.37 482.973 1062.93 481.573 1062.93 479.773 cv
1062.93 477.973 1063.37 476.573 1064.25 475.553 cv
1065.13 474.553 1066.37 474.033 1067.95 474.033 cv
f
1075.95 474.293 mo
1077.75 474.293 li
1077.75 485.233 li
1075.95 485.233 li
1075.95 474.293 li
1075.95 470.033 mo
1077.75 470.033 li
1077.75 472.313 li
1075.95 472.313 li
1075.95 470.033 li
f
1088.71 475.953 mo
1088.71 470.033 li
1090.51 470.033 li
1090.51 485.233 li
1088.71 485.233 li
1088.71 483.593 li
1088.33 484.253 1087.85 484.733 1087.27 485.033 cv
1086.69 485.333 1086.01 485.493 1085.21 485.493 cv
1083.89 485.493 1082.81 484.973 1081.97 483.933 cv
1081.13 482.893 1080.73 481.493 1080.73 479.773 cv
1080.73 478.053 1081.13 476.673 1081.97 475.613 cv
1082.81 474.573 1083.89 474.033 1085.21 474.033 cv
1086.01 474.033 1086.69 474.193 1087.27 474.513 cv
1087.85 474.833 1088.33 475.313 1088.71 475.953 cv
1082.59 479.773 mo
1082.59 481.093 1082.85 482.133 1083.39 482.893 cv
1083.93 483.653 1084.69 484.013 1085.65 484.013 cv
1086.59 484.013 1087.33 483.653 1087.89 482.893 cv
1088.43 482.133 1088.71 481.093 1088.71 479.773 cv
1088.71 478.453 1088.43 477.433 1087.89 476.673 cv
1087.33 475.913 1086.59 475.533 1085.65 475.533 cv
1084.69 475.533 1083.93 475.913 1083.39 476.673 cv
1082.85 477.433 1082.59 478.453 1082.59 479.773 cv
f
1093.93 470.053 mo
1095.49 470.053 li
1096.45 471.593 1097.19 473.093 1097.67 474.573 cv
1098.15 476.053 1098.41 477.513 1098.41 478.953 cv
1098.41 480.413 1098.15 481.873 1097.67 483.353 cv
1097.19 484.833 1096.45 486.313 1095.49 487.853 cv
1093.93 487.853 li
1094.79 486.353 1095.43 484.893 1095.87 483.413 cv
1096.29 481.953 1096.51 480.473 1096.51 478.953 cv
1096.51 477.453 1096.29 475.973 1095.87 474.513 cv
1095.43 473.053 1094.79 471.573 1093.93 470.053 cv
f
1.5 lw
2 lc
838.711 506.093 mo
858.711 506.093 li
@
877.411 495.493 mo
877.411 497.413 li
876.651 497.053 875.951 496.793 875.291 496.613 cv
874.611 496.453 873.971 496.353 873.371 496.353 cv
872.291 496.353 871.451 496.573 870.871 496.973 cv
870.291 497.393 870.011 497.993 870.011 498.753 cv
870.011 499.393 870.191 499.893 870.591 500.213 cv
870.971 500.553 871.711 500.813 872.791 501.013 cv
873.991 501.253 li
875.451 501.533 876.531 502.033 877.231 502.733 cv
877.931 503.453 878.291 504.393 878.291 505.573 cv
878.291 506.993 877.811 508.053 876.871 508.773 cv
875.911 509.493 874.531 509.853 872.711 509.853 cv
872.011 509.853 871.271 509.773 870.491 509.633 cv
869.711 509.493 868.911 509.273 868.091 508.953 cv
868.091 506.913 li
868.891 507.373 869.671 507.713 870.431 507.933 cv
871.191 508.173 871.951 508.273 872.711 508.273 cv
873.831 508.273 874.691 508.053 875.311 507.613 cv
875.911 507.173 876.231 506.553 876.231 505.713 cv
876.231 504.993 876.011 504.433 875.571 504.033 cv
875.131 503.633 874.411 503.333 873.411 503.133 cv
872.211 502.893 li
870.731 502.613 869.671 502.153 869.011 501.513 cv
868.351 500.893 868.031 500.033 868.031 498.913 cv
868.031 497.633 868.471 496.613 869.391 495.873 cv
870.291 495.133 871.551 494.753 873.151 494.753 cv
873.831 494.753 874.511 494.813 875.231 494.933 cv
875.931 495.053 876.651 495.253 877.411 495.493 cv
f
890.111 495.493 mo
890.111 497.413 li
889.351 497.053 888.651 496.793 887.991 496.613 cv
887.311 496.453 886.671 496.353 886.071 496.353 cv
884.991 496.353 884.151 496.573 883.571 496.973 cv
882.991 497.393 882.711 497.993 882.711 498.753 cv
882.711 499.393 882.891 499.893 883.291 500.213 cv
883.671 500.553 884.411 500.813 885.491 501.013 cv
886.691 501.253 li
888.151 501.533 889.231 502.033 889.931 502.733 cv
890.631 503.453 890.991 504.393 890.991 505.573 cv
890.991 506.993 890.511 508.053 889.571 508.773 cv
888.611 509.493 887.231 509.853 885.411 509.853 cv
884.711 509.853 883.971 509.773 883.191 509.633 cv
882.411 509.493 881.611 509.273 880.791 508.953 cv
880.791 506.913 li
881.591 507.373 882.371 507.713 883.131 507.933 cv
883.891 508.173 884.651 508.273 885.411 508.273 cv
886.531 508.273 887.391 508.053 888.011 507.613 cv
888.611 507.173 888.931 506.553 888.931 505.713 cv
888.931 504.993 888.711 504.433 888.271 504.033 cv
887.831 503.633 887.111 503.333 886.111 503.133 cv
884.911 502.893 li
883.431 502.613 882.371 502.153 881.711 501.513 cv
881.051 500.893 880.731 500.033 880.731 498.913 cv
880.731 497.633 881.171 496.613 882.091 495.873 cv
882.991 495.133 884.251 494.753 885.851 494.753 cv
886.531 494.753 887.211 494.813 887.931 494.933 cv
888.631 495.053 889.351 495.253 890.111 495.493 cv
f
896.051 496.633 mo
896.051 507.973 li
898.431 507.973 li
900.431 507.973 901.911 507.533 902.851 506.613 cv
903.771 505.693 904.251 504.253 904.251 502.293 cv
904.251 500.333 903.771 498.913 902.851 497.993 cv
901.911 497.093 900.431 496.633 898.431 496.633 cv
896.051 496.633 li
894.071 495.013 mo
898.131 495.013 li
900.951 495.013 903.031 495.613 904.351 496.773 cv
905.671 497.953 906.331 499.793 906.331 502.293 cv
906.331 504.813 905.651 506.653 904.331 507.833 cv
903.011 509.013 900.931 509.593 898.131 509.593 cv
894.071 509.593 li
894.071 495.013 li
f
911.451 502.633 mo
911.451 507.973 li
914.611 507.973 li
915.671 507.973 916.451 507.753 916.971 507.313 cv
917.471 506.873 917.731 506.213 917.731 505.293 cv
917.731 504.393 917.471 503.733 916.971 503.293 cv
916.451 502.853 915.671 502.633 914.611 502.633 cv
911.451 502.633 li
911.451 496.633 mo
911.451 501.033 li
914.371 501.033 li
915.331 501.033 916.031 500.853 916.511 500.493 cv
916.991 500.133 917.231 499.593 917.231 498.833 cv
917.231 498.113 916.991 497.553 916.511 497.193 cv
916.031 496.833 915.331 496.633 914.371 496.633 cv
911.451 496.633 li
909.471 495.013 mo
914.511 495.013 li
916.011 495.013 917.171 495.333 917.991 495.953 cv
918.791 496.593 919.211 497.473 919.211 498.613 cv
919.211 499.513 918.991 500.233 918.571 500.753 cv
918.151 501.273 917.551 501.613 916.751 501.733 cv
917.711 501.953 918.471 502.393 919.011 503.053 cv
919.531 503.713 919.811 504.533 919.811 505.513 cv
919.811 506.833 919.351 507.833 918.471 508.533 cv
917.591 509.253 916.331 509.593 914.711 509.593 cv
909.471 509.593 li
909.471 495.013 li
f
923.191 495.013 mo
925.851 495.013 li
932.311 507.213 li
932.311 495.013 li
934.231 495.013 li
934.231 509.593 li
931.571 509.593 li
925.111 497.393 li
925.111 509.593 li
923.191 509.593 li
923.191 495.013 li
f
948.75 494.413 mo
947.87 495.933 947.231 497.413 946.811 498.873 cv
946.37 500.333 946.171 501.813 946.171 503.313 cv
946.171 504.833 946.37 506.313 946.811 507.773 cv
947.231 509.253 947.87 510.713 948.75 512.213 cv
947.191 512.213 li
946.211 510.673 945.471 509.193 944.99 507.713 cv
944.51 506.233 944.271 504.773 944.271 503.313 cv
944.271 501.873 944.51 500.413 944.99 498.933 cv
945.471 497.453 946.191 495.953 947.191 494.413 cv
948.75 494.413 li
f
950.311 495.013 mo
962.631 495.013 li
962.631 496.673 li
957.451 496.673 li
957.451 509.593 li
955.471 509.593 li
955.471 496.673 li
950.311 496.673 li
950.311 495.013 li
f
970.79 500.333 mo
970.59 500.213 970.37 500.133 970.13 500.073 cv
969.89 500.033 969.63 499.993 969.35 499.993 cv
968.33 499.993 967.55 500.333 967.01 500.993 cv
966.45 501.653 966.19 502.593 966.19 503.833 cv
966.19 509.593 li
964.39 509.593 li
964.39 498.653 li
966.19 498.653 li
966.19 500.353 li
966.55 499.693 967.05 499.193 967.65 498.873 cv
968.25 498.553 968.99 498.393 969.87 498.393 cv
969.99 498.393 970.13 498.413 970.29 498.413 cv
970.43 498.433 970.59 498.453 970.79 498.493 cv
970.79 500.333 li
f
977.65 504.093 mo
976.19 504.093 975.19 504.273 974.63 504.593 cv
974.07 504.933 973.79 505.493 973.79 506.293 cv
973.79 506.933 973.99 507.453 974.41 507.813 cv
974.83 508.193 975.41 508.373 976.13 508.373 cv
977.13 508.373 977.93 508.033 978.53 507.313 cv
979.13 506.613 979.43 505.673 979.43 504.493 cv
979.43 504.093 li
977.65 504.093 li
981.23 503.353 mo
981.23 509.593 li
979.43 509.593 li
979.43 507.933 li
979.01 508.613 978.49 509.093 977.89 509.393 cv
977.29 509.693 976.53 509.853 975.65 509.853 cv
974.53 509.853 973.63 509.553 972.97 508.933 cv
972.31 508.313 971.99 507.473 971.99 506.413 cv
971.99 505.193 972.39 504.273 973.23 503.633 cv
974.05 503.013 975.27 502.693 976.91 502.693 cv
979.43 502.693 li
979.43 502.513 li
979.43 501.693 979.15 501.053 978.61 500.593 cv
978.07 500.153 977.31 499.913 976.33 499.913 cv
975.69 499.913 975.09 499.993 974.49 500.153 cv
973.89 500.313 973.33 500.533 972.79 500.813 cv
972.79 499.153 li
973.43 498.913 974.07 498.713 974.69 498.593 cv
975.31 498.473 975.91 498.393 976.51 498.393 cv
978.09 498.393 979.27 498.813 980.05 499.633 cv
980.83 500.453 981.23 501.693 981.23 503.353 cv
f
984.931 498.653 mo
986.731 498.653 li
986.731 509.593 li
984.931 509.593 li
984.931 498.653 li
984.931 494.393 mo
986.731 494.393 li
986.731 496.673 li
984.931 496.673 li
984.931 494.393 li
f
999.59 502.993 mo
999.59 509.593 li
997.791 509.593 li
997.791 503.053 li
997.791 502.013 997.57 501.253 997.171 500.733 cv
996.771 500.213 996.171 499.953 995.37 499.953 cv
994.391 499.953 993.63 500.273 993.07 500.893 cv
992.51 501.513 992.23 502.353 992.23 503.413 cv
992.23 509.593 li
990.43 509.593 li
990.43 498.653 li
992.23 498.653 li
992.23 500.353 li
992.651 499.713 993.151 499.213 993.75 498.893 cv
994.33 498.573 995.01 498.393 995.771 498.393 cv
997.01 498.393 997.97 498.793 998.61 499.573 cv
999.25 500.353 999.59 501.493 999.59 502.993 cv
f
1003.17 498.653 mo
1004.97 498.653 li
1004.97 509.593 li
1003.17 509.593 li
1003.17 498.653 li
1003.17 494.393 mo
1004.97 494.393 li
1004.97 496.673 li
1003.17 496.673 li
1003.17 494.393 li
f
1017.83 502.993 mo
1017.83 509.593 li
1016.03 509.593 li
1016.03 503.053 li
1016.03 502.013 1015.81 501.253 1015.41 500.733 cv
1015.01 500.213 1014.41 499.953 1013.61 499.953 cv
1012.63 499.953 1011.87 500.273 1011.31 500.893 cv
1010.75 501.513 1010.47 502.353 1010.47 503.413 cv
1010.47 509.593 li
1008.67 509.593 li
1008.67 498.653 li
1010.47 498.653 li
1010.47 500.353 li
1010.89 499.713 1011.39 499.213 1011.99 498.893 cv
1012.57 498.573 1013.25 498.393 1014.01 498.393 cv
1015.25 498.393 1016.21 498.793 1016.85 499.573 cv
1017.49 500.353 1017.83 501.493 1017.83 502.993 cv
f
1028.61 503.993 mo
1028.61 502.713 1028.33 501.693 1027.81 500.973 cv
1027.27 500.253 1026.51 499.893 1025.55 499.893 cv
1024.59 499.893 1023.83 500.253 1023.29 500.973 cv
1022.75 501.693 1022.49 502.713 1022.49 503.993 cv
1022.49 505.293 1022.75 506.293 1023.29 507.013 cv
1023.83 507.733 1024.59 508.093 1025.55 508.093 cv
1026.51 508.093 1027.27 507.733 1027.81 507.013 cv
1028.33 506.293 1028.61 505.293 1028.61 503.993 cv
1030.41 508.233 mo
1030.41 510.073 1029.99 511.453 1029.17 512.373 cv
1028.33 513.273 1027.07 513.733 1025.37 513.733 cv
1024.73 513.733 1024.15 513.673 1023.59 513.593 cv
1023.03 513.493 1022.47 513.353 1021.95 513.153 cv
1021.95 511.413 li
1022.47 511.693 1022.99 511.893 1023.51 512.033 cv
1024.03 512.173 1024.55 512.253 1025.09 512.253 cv
1026.25 512.253 1027.13 511.933 1027.73 511.333 cv
1028.31 510.713 1028.61 509.793 1028.61 508.553 cv
1028.61 507.673 li
1028.23 508.313 1027.75 508.793 1027.17 509.113 cv
1026.59 509.433 1025.91 509.593 1025.11 509.593 cv
1023.75 509.593 1022.67 509.093 1021.85 508.073 cv
1021.03 507.053 1020.63 505.693 1020.63 503.993 cv
1020.63 502.313 1021.03 500.953 1021.85 499.933 cv
1022.67 498.913 1023.75 498.393 1025.11 498.393 cv
1025.91 498.393 1026.59 498.553 1027.17 498.873 cv
1027.75 499.193 1028.23 499.673 1028.61 500.313 cv
1028.61 498.653 li
1030.41 498.653 li
1030.41 508.233 li
f
1034.57 507.113 mo
1036.63 507.113 li
1036.63 508.793 li
1035.03 511.893 li
1033.77 511.893 li
1034.57 508.793 li
1034.57 507.113 li
f
1055.65 495.493 mo
1055.65 497.413 li
1054.89 497.053 1054.19 496.793 1053.53 496.613 cv
1052.85 496.453 1052.21 496.353 1051.61 496.353 cv
1050.53 496.353 1049.69 496.573 1049.11 496.973 cv
1048.53 497.393 1048.25 497.993 1048.25 498.753 cv
1048.25 499.393 1048.43 499.893 1048.83 500.213 cv
1049.21 500.553 1049.95 500.813 1051.03 501.013 cv
1052.23 501.253 li
1053.69 501.533 1054.77 502.033 1055.47 502.733 cv
1056.17 503.453 1056.53 504.393 1056.53 505.573 cv
1056.53 506.993 1056.05 508.053 1055.11 508.773 cv
1054.15 509.493 1052.77 509.853 1050.95 509.853 cv
1050.25 509.853 1049.51 509.773 1048.73 509.633 cv
1047.95 509.493 1047.15 509.273 1046.33 508.953 cv
1046.33 506.913 li
1047.13 507.373 1047.91 507.713 1048.67 507.933 cv
1049.43 508.173 1050.19 508.273 1050.95 508.273 cv
1052.07 508.273 1052.93 508.053 1053.55 507.613 cv
1054.15 507.173 1054.47 506.553 1054.47 505.713 cv
1054.47 504.993 1054.25 504.433 1053.81 504.033 cv
1053.37 503.633 1052.65 503.333 1051.65 503.133 cv
1050.45 502.893 li
1048.97 502.613 1047.91 502.153 1047.25 501.513 cv
1046.59 500.893 1046.27 500.033 1046.27 498.913 cv
1046.27 497.633 1046.71 496.613 1047.63 495.873 cv
1048.53 495.133 1049.79 494.753 1051.39 494.753 cv
1052.07 494.753 1052.75 494.813 1053.47 494.933 cv
1054.17 495.053 1054.89 495.253 1055.65 495.493 cv
f
1059.53 498.653 mo
1061.33 498.653 li
1061.33 509.593 li
1059.53 509.593 li
1059.53 498.653 li
1059.53 494.393 mo
1061.33 494.393 li
1061.33 496.673 li
1059.53 496.673 li
1059.53 494.393 li
f
1072.29 503.993 mo
1072.29 502.713 1072.01 501.693 1071.49 500.973 cv
1070.95 500.253 1070.19 499.893 1069.23 499.893 cv
1068.27 499.893 1067.51 500.253 1066.97 500.973 cv
1066.43 501.693 1066.17 502.713 1066.17 503.993 cv
1066.17 505.293 1066.43 506.293 1066.97 507.013 cv
1067.51 507.733 1068.27 508.093 1069.23 508.093 cv
1070.19 508.093 1070.95 507.733 1071.49 507.013 cv
1072.01 506.293 1072.29 505.293 1072.29 503.993 cv
1074.09 508.233 mo
1074.09 510.073 1073.67 511.453 1072.85 512.373 cv
1072.01 513.273 1070.75 513.733 1069.05 513.733 cv
1068.41 513.733 1067.83 513.673 1067.27 513.593 cv
1066.71 513.493 1066.15 513.353 1065.63 513.153 cv
1065.63 511.413 li
1066.15 511.693 1066.67 511.893 1067.19 512.033 cv
1067.71 512.173 1068.23 512.253 1068.77 512.253 cv
1069.93 512.253 1070.81 511.933 1071.41 511.333 cv
1071.99 510.713 1072.29 509.793 1072.29 508.553 cv
1072.29 507.673 li
1071.91 508.313 1071.43 508.793 1070.85 509.113 cv
1070.27 509.433 1069.59 509.593 1068.79 509.593 cv
1067.43 509.593 1066.35 509.093 1065.53 508.073 cv
1064.71 507.053 1064.31 505.693 1064.31 503.993 cv
1064.31 502.313 1064.71 500.953 1065.53 499.933 cv
1066.35 498.913 1067.43 498.393 1068.79 498.393 cv
1069.59 498.393 1070.27 498.553 1070.85 498.873 cv
1071.43 499.193 1071.91 499.673 1072.29 500.313 cv
1072.29 498.653 li
1074.09 498.653 li
1074.09 508.233 li
f
1086.31 500.753 mo
1086.75 499.953 1087.29 499.373 1087.91 498.973 cv
1088.53 498.593 1089.27 498.393 1090.13 498.393 cv
1091.25 498.393 1092.13 498.793 1092.75 499.593 cv
1093.37 500.393 1093.69 501.533 1093.69 502.993 cv
1093.69 509.593 li
1091.89 509.593 li
1091.89 503.053 li
1091.89 502.013 1091.69 501.233 1091.33 500.713 cv
1090.95 500.213 1090.39 499.953 1089.63 499.953 cv
1088.69 499.953 1087.95 500.273 1087.41 500.893 cv
1086.87 501.513 1086.61 502.353 1086.61 503.413 cv
1086.61 509.593 li
1084.81 509.593 li
1084.81 503.053 li
1084.81 502.013 1084.61 501.233 1084.25 500.713 cv
1083.87 500.213 1083.29 499.953 1082.53 499.953 cv
1081.61 499.953 1080.87 500.273 1080.33 500.893 cv
1079.79 501.513 1079.53 502.353 1079.53 503.413 cv
1079.53 509.593 li
1077.73 509.593 li
1077.73 498.653 li
1079.53 498.653 li
1079.53 500.353 li
1079.93 499.693 1080.43 499.193 1081.01 498.873 cv
1081.57 498.553 1082.25 498.393 1083.05 498.393 cv
1083.85 498.393 1084.51 498.593 1085.07 498.993 cv
1085.63 499.393 1086.03 499.993 1086.31 500.753 cv
f
1101.51 499.913 mo
1100.55 499.913 1099.79 500.293 1099.23 501.053 cv
1098.67 501.813 1098.39 502.833 1098.39 504.133 cv
1098.39 505.453 1098.65 506.473 1099.21 507.233 cv
1099.77 507.993 1100.53 508.353 1101.51 508.353 cv
1102.47 508.353 1103.23 507.993 1103.79 507.233 cv
1104.35 506.473 1104.63 505.453 1104.63 504.133 cv
1104.63 502.853 1104.35 501.813 1103.79 501.053 cv
1103.23 500.293 1102.47 499.913 1101.51 499.913 cv
1101.51 498.393 mo
1103.07 498.393 1104.29 498.913 1105.19 499.913 cv
1106.07 500.933 1106.53 502.333 1106.53 504.133 cv
1106.53 505.933 1106.07 507.333 1105.19 508.333 cv
1104.29 509.353 1103.07 509.853 1101.51 509.853 cv
1099.93 509.853 1098.69 509.353 1097.81 508.333 cv
1096.93 507.333 1096.49 505.933 1096.49 504.133 cv
1096.49 502.333 1096.93 500.933 1097.81 499.913 cv
1098.69 498.913 1099.93 498.393 1101.51 498.393 cv
f
1109.51 498.653 mo
1111.31 498.653 li
1111.31 509.593 li
1109.51 509.593 li
1109.51 498.653 li
1109.51 494.393 mo
1111.31 494.393 li
1111.31 496.673 li
1109.51 496.673 li
1109.51 494.393 li
f
1122.27 500.313 mo
1122.27 494.393 li
1124.07 494.393 li
1124.07 509.593 li
1122.27 509.593 li
1122.27 507.953 li
1121.89 508.613 1121.41 509.093 1120.83 509.393 cv
1120.25 509.693 1119.57 509.853 1118.77 509.853 cv
1117.45 509.853 1116.37 509.333 1115.53 508.293 cv
1114.69 507.253 1114.29 505.853 1114.29 504.133 cv
1114.29 502.413 1114.69 501.033 1115.53 499.973 cv
1116.37 498.933 1117.45 498.393 1118.77 498.393 cv
1119.57 498.393 1120.25 498.553 1120.83 498.873 cv
1121.41 499.193 1121.89 499.673 1122.27 500.313 cv
1116.15 504.133 mo
1116.15 505.453 1116.41 506.493 1116.95 507.253 cv
1117.49 508.013 1118.25 508.373 1119.21 508.373 cv
1120.15 508.373 1120.89 508.013 1121.45 507.253 cv
1121.99 506.493 1122.27 505.453 1122.27 504.133 cv
1122.27 502.813 1121.99 501.793 1121.45 501.033 cv
1120.89 500.273 1120.15 499.893 1119.21 499.893 cv
1118.25 499.893 1117.49 500.273 1116.95 501.033 cv
1116.41 501.793 1116.15 502.813 1116.15 504.133 cv
f
1127.49 494.413 mo
1129.05 494.413 li
1130.01 495.953 1130.75 497.453 1131.23 498.933 cv
1131.71 500.413 1131.97 501.873 1131.97 503.313 cv
1131.97 504.773 1131.71 506.233 1131.23 507.713 cv
1130.75 509.193 1130.01 510.673 1129.05 512.213 cv
1127.49 512.213 li
1128.35 510.713 1128.99 509.253 1129.43 507.773 cv
1129.85 506.313 1130.07 504.833 1130.07 503.313 cv
1130.07 501.813 1129.85 500.333 1129.43 498.873 cv
1128.99 497.413 1128.35 495.933 1127.49 494.413 cv
f
838.711 530.452 mo
858.711 530.452 li
@
845.711 533.452 mo
851.711 527.452 li
845.711 527.452 mo
851.711 533.452 li
f
1 lw
0 lc
845.711 533.452 mo
851.711 527.452 li
845.711 527.452 mo
851.711 533.452 li
@
877.411 519.852 mo
877.411 521.772 li
876.651 521.412 875.951 521.152 875.291 520.972 cv
874.611 520.812 873.971 520.712 873.371 520.712 cv
872.291 520.712 871.451 520.932 870.871 521.332 cv
870.291 521.752 870.011 522.352 870.011 523.112 cv
870.011 523.752 870.191 524.252 870.591 524.572 cv
870.971 524.912 871.711 525.172 872.791 525.372 cv
873.991 525.612 li
875.451 525.892 876.531 526.392 877.231 527.092 cv
877.931 527.812 878.291 528.752 878.291 529.932 cv
878.291 531.352 877.811 532.412 876.871 533.132 cv
875.911 533.852 874.531 534.212 872.711 534.212 cv
872.011 534.212 871.271 534.132 870.491 533.992 cv
869.711 533.852 868.911 533.632 868.091 533.312 cv
868.091 531.272 li
868.891 531.732 869.671 532.072 870.431 532.292 cv
871.191 532.532 871.951 532.632 872.711 532.632 cv
873.831 532.632 874.691 532.412 875.311 531.972 cv
875.911 531.532 876.231 530.912 876.231 530.072 cv
876.231 529.352 876.011 528.792 875.571 528.392 cv
875.131 527.992 874.411 527.692 873.411 527.492 cv
872.211 527.252 li
870.731 526.972 869.671 526.512 869.011 525.872 cv
868.351 525.252 868.031 524.392 868.031 523.272 cv
868.031 521.992 868.471 520.972 869.391 520.232 cv
870.291 519.492 871.551 519.112 873.151 519.112 cv
873.831 519.112 874.511 519.172 875.231 519.292 cv
875.931 519.412 876.651 519.612 877.411 519.852 cv
f
890.111 519.852 mo
890.111 521.772 li
889.351 521.412 888.651 521.152 887.991 520.972 cv
887.311 520.812 886.671 520.712 886.071 520.712 cv
884.991 520.712 884.151 520.932 883.571 521.332 cv
882.991 521.752 882.711 522.352 882.711 523.112 cv
882.711 523.752 882.891 524.252 883.291 524.572 cv
883.671 524.912 884.411 525.172 885.491 525.372 cv
886.691 525.612 li
888.151 525.892 889.231 526.392 889.931 527.092 cv
890.631 527.812 890.991 528.752 890.991 529.932 cv
890.991 531.352 890.511 532.412 889.571 533.132 cv
888.611 533.852 887.231 534.212 885.411 534.212 cv
884.711 534.212 883.971 534.132 883.191 533.992 cv
882.411 533.852 881.611 533.632 880.791 533.312 cv
880.791 531.272 li
881.591 531.732 882.371 532.072 883.131 532.292 cv
883.891 532.532 884.651 532.632 885.411 532.632 cv
886.531 532.632 887.391 532.412 888.011 531.972 cv
888.611 531.532 888.931 530.912 888.931 530.072 cv
888.931 529.352 888.711 528.792 888.271 528.392 cv
887.831 527.992 887.111 527.692 886.111 527.492 cv
884.911 527.252 li
883.431 526.972 882.371 526.512 881.711 525.872 cv
881.051 525.252 880.731 524.392 880.731 523.272 cv
880.731 521.992 881.171 520.972 882.091 520.232 cv
882.991 519.492 884.251 519.112 885.851 519.112 cv
886.531 519.112 887.211 519.172 887.931 519.292 cv
888.631 519.412 889.351 519.612 890.111 519.852 cv
f
896.051 520.992 mo
896.051 532.332 li
898.431 532.332 li
900.431 532.332 901.911 531.892 902.851 530.972 cv
903.771 530.052 904.251 528.612 904.251 526.652 cv
904.251 524.692 903.771 523.272 902.851 522.352 cv
901.911 521.452 900.431 520.992 898.431 520.992 cv
896.051 520.992 li
894.071 519.372 mo
898.131 519.372 li
900.951 519.372 903.031 519.972 904.351 521.132 cv
905.671 522.312 906.331 524.152 906.331 526.652 cv
906.331 529.172 905.651 531.012 904.331 532.192 cv
903.011 533.372 900.931 533.952 898.131 533.952 cv
894.071 533.952 li
894.071 519.372 li
f
911.451 526.992 mo
911.451 532.332 li
914.611 532.332 li
915.671 532.332 916.451 532.112 916.971 531.672 cv
917.471 531.232 917.731 530.572 917.731 529.652 cv
917.731 528.752 917.471 528.092 916.971 527.652 cv
916.451 527.212 915.671 526.992 914.611 526.992 cv
911.451 526.992 li
911.451 520.992 mo
911.451 525.392 li
914.371 525.392 li
915.331 525.392 916.031 525.212 916.511 524.852 cv
916.991 524.492 917.231 523.952 917.231 523.192 cv
917.231 522.472 916.991 521.912 916.511 521.552 cv
916.031 521.192 915.331 520.992 914.371 520.992 cv
911.451 520.992 li
909.471 519.372 mo
914.511 519.372 li
916.011 519.372 917.171 519.692 917.991 520.312 cv
918.791 520.952 919.211 521.832 919.211 522.972 cv
919.211 523.872 918.991 524.592 918.571 525.112 cv
918.151 525.632 917.551 525.972 916.751 526.092 cv
917.711 526.312 918.471 526.752 919.011 527.412 cv
919.531 528.072 919.811 528.892 919.811 529.872 cv
919.811 531.192 919.351 532.192 918.471 532.892 cv
917.591 533.612 916.331 533.952 914.711 533.952 cv
909.471 533.952 li
909.471 519.372 li
f
923.191 519.372 mo
925.851 519.372 li
932.311 531.572 li
932.311 519.372 li
934.231 519.372 li
934.231 533.952 li
931.571 533.952 li
925.111 521.752 li
925.111 533.952 li
923.191 533.952 li
923.191 519.372 li
f
948.75 518.772 mo
947.87 520.292 947.231 521.772 946.811 523.232 cv
946.37 524.692 946.171 526.172 946.171 527.672 cv
946.171 529.192 946.37 530.672 946.811 532.132 cv
947.231 533.612 947.87 535.072 948.75 536.572 cv
947.191 536.572 li
946.211 535.032 945.471 533.552 944.99 532.072 cv
944.51 530.592 944.271 529.132 944.271 527.672 cv
944.271 526.232 944.51 524.772 944.99 523.292 cv
945.471 521.812 946.191 520.312 947.191 518.772 cv
948.75 518.772 li
f
950.311 519.372 mo
962.631 519.372 li
962.631 521.032 li
957.451 521.032 li
957.451 533.952 li
955.471 533.952 li
955.471 521.032 li
950.311 521.032 li
950.311 519.372 li
f
973.81 528.032 mo
973.81 528.912 li
965.55 528.912 li
965.63 530.152 965.99 531.112 966.67 531.752 cv
967.33 532.392 968.25 532.712 969.45 532.712 cv
970.13 532.712 970.81 532.632 971.45 532.472 cv
972.09 532.312 972.75 532.052 973.39 531.692 cv
973.39 533.392 li
972.75 533.672 972.09 533.892 971.41 534.012 cv
970.73 534.132 970.03 534.212 969.35 534.212 cv
967.59 534.212 966.21 533.712 965.19 532.712 cv
964.17 531.712 963.67 530.332 963.67 528.592 cv
963.67 526.812 964.15 525.392 965.11 524.332 cv
966.07 523.292 967.39 522.752 969.03 522.752 cv
970.51 522.752 971.67 523.232 972.53 524.172 cv
973.37 525.132 973.81 526.412 973.81 528.032 cv
972.01 527.512 mo
971.99 526.532 971.71 525.752 971.19 525.152 cv
970.65 524.572 969.93 524.272 969.05 524.272 cv
968.05 524.272 967.25 524.572 966.65 525.132 cv
966.05 525.692 965.69 526.492 965.61 527.512 cv
972.01 527.512 li
f
983.731 523.332 mo
983.731 525.032 li
983.211 524.792 982.691 524.592 982.151 524.452 cv
981.591 524.332 981.031 524.252 980.451 524.252 cv
979.551 524.252 978.871 524.392 978.431 524.672 cv
977.991 524.952 977.771 525.352 977.771 525.892 cv
977.771 526.312 977.931 526.632 978.251 526.872 cv
978.571 527.112 979.211 527.352 980.171 527.552 cv
980.791 527.692 li
982.071 527.972 982.971 528.372 983.511 528.852 cv
984.031 529.352 984.311 530.052 984.311 530.932 cv
984.311 531.952 983.911 532.752 983.111 533.332 cv
982.311 533.932 981.191 534.212 979.791 534.212 cv
979.191 534.212 978.591 534.152 977.951 534.052 cv
977.311 533.952 976.651 533.792 975.951 533.552 cv
975.951 531.692 li
976.611 532.052 977.271 532.312 977.911 532.472 cv
978.551 532.652 979.191 532.732 979.831 532.732 cv
980.671 532.732 981.331 532.592 981.791 532.312 cv
982.231 532.032 982.471 531.612 982.471 531.072 cv
982.471 530.592 982.291 530.212 981.971 529.952 cv
981.651 529.692 980.931 529.432 979.811 529.192 cv
979.191 529.052 li
978.071 528.812 977.251 528.452 976.771 527.972 cv
976.271 527.492 976.031 526.832 976.031 525.972 cv
976.031 524.952 976.391 524.152 977.111 523.592 cv
977.831 523.032 978.871 522.752 980.231 522.752 cv
980.891 522.752 981.511 522.812 982.111 522.912 cv
982.691 523.012 983.231 523.152 983.731 523.332 cv
f
988.951 519.912 mo
988.951 523.012 li
992.651 523.012 li
992.651 524.412 li
988.951 524.412 li
988.951 530.352 li
988.951 531.252 989.071 531.832 989.311 532.072 cv
989.551 532.332 990.051 532.452 990.811 532.452 cv
992.651 532.452 li
992.651 533.952 li
990.811 533.952 li
989.411 533.952 988.451 533.692 987.931 533.172 cv
987.411 532.652 987.151 531.712 987.151 530.352 cv
987.151 524.412 li
985.831 524.412 li
985.831 523.012 li
987.151 523.012 li
987.151 519.912 li
988.951 519.912 li
f
995.01 523.012 mo
996.81 523.012 li
996.81 533.952 li
995.01 533.952 li
995.01 523.012 li
995.01 518.752 mo
996.81 518.752 li
996.81 521.032 li
995.01 521.032 li
995.01 518.752 li
f
1009.67 527.352 mo
1009.67 533.952 li
1007.87 533.952 li
1007.87 527.412 li
1007.87 526.372 1007.65 525.612 1007.25 525.092 cv
1006.85 524.572 1006.25 524.312 1005.45 524.312 cv
1004.47 524.312 1003.71 524.632 1003.15 525.252 cv
1002.59 525.872 1002.31 526.712 1002.31 527.772 cv
1002.31 533.952 li
1000.51 533.952 li
1000.51 523.012 li
1002.31 523.012 li
1002.31 524.712 li
1002.73 524.072 1003.23 523.572 1003.83 523.252 cv
1004.41 522.932 1005.09 522.752 1005.85 522.752 cv
1007.09 522.752 1008.05 523.152 1008.69 523.932 cv
1009.33 524.712 1009.67 525.852 1009.67 527.352 cv
f
1020.45 528.352 mo
1020.45 527.072 1020.17 526.052 1019.65 525.332 cv
1019.11 524.612 1018.35 524.252 1017.39 524.252 cv
1016.43 524.252 1015.67 524.612 1015.13 525.332 cv
1014.59 526.052 1014.33 527.072 1014.33 528.352 cv
1014.33 529.652 1014.59 530.652 1015.13 531.372 cv
1015.67 532.092 1016.43 532.452 1017.39 532.452 cv
1018.35 532.452 1019.11 532.092 1019.65 531.372 cv
1020.17 530.652 1020.45 529.652 1020.45 528.352 cv
1022.25 532.592 mo
1022.25 534.432 1021.83 535.812 1021.01 536.732 cv
1020.17 537.632 1018.91 538.092 1017.21 538.092 cv
1016.57 538.092 1015.99 538.032 1015.43 537.952 cv
1014.87 537.852 1014.31 537.712 1013.79 537.512 cv
1013.79 535.772 li
1014.31 536.052 1014.83 536.252 1015.35 536.392 cv
1015.87 536.532 1016.39 536.612 1016.93 536.612 cv
1018.09 536.612 1018.97 536.292 1019.57 535.692 cv
1020.15 535.072 1020.45 534.152 1020.45 532.912 cv
1020.45 532.032 li
1020.07 532.672 1019.59 533.152 1019.01 533.472 cv
1018.43 533.792 1017.75 533.952 1016.95 533.952 cv
1015.59 533.952 1014.51 533.452 1013.69 532.432 cv
1012.87 531.412 1012.47 530.052 1012.47 528.352 cv
1012.47 526.672 1012.87 525.312 1013.69 524.292 cv
1014.51 523.272 1015.59 522.752 1016.95 522.752 cv
1017.75 522.752 1018.43 522.912 1019.01 523.232 cv
1019.59 523.552 1020.07 524.032 1020.45 524.672 cv
1020.45 523.012 li
1022.25 523.012 li
1022.25 532.592 li
f
1026.41 531.472 mo
1028.47 531.472 li
1028.47 533.152 li
1026.87 536.252 li
1025.61 536.252 li
1026.41 533.152 li
1026.41 531.472 li
f
1047.49 519.852 mo
1047.49 521.772 li
1046.73 521.412 1046.03 521.152 1045.37 520.972 cv
1044.69 520.812 1044.05 520.712 1043.45 520.712 cv
1042.37 520.712 1041.53 520.932 1040.95 521.332 cv
1040.37 521.752 1040.09 522.352 1040.09 523.112 cv
1040.09 523.752 1040.27 524.252 1040.67 524.572 cv
1041.05 524.912 1041.79 525.172 1042.87 525.372 cv
1044.07 525.612 li
1045.53 525.892 1046.61 526.392 1047.31 527.092 cv
1048.01 527.812 1048.37 528.752 1048.37 529.932 cv
1048.37 531.352 1047.89 532.412 1046.95 533.132 cv
1045.99 533.852 1044.61 534.212 1042.79 534.212 cv
1042.09 534.212 1041.35 534.132 1040.57 533.992 cv
1039.79 533.852 1038.99 533.632 1038.17 533.312 cv
1038.17 531.272 li
1038.97 531.732 1039.75 532.072 1040.51 532.292 cv
1041.27 532.532 1042.03 532.632 1042.79 532.632 cv
1043.91 532.632 1044.77 532.412 1045.39 531.972 cv
1045.99 531.532 1046.31 530.912 1046.31 530.072 cv
1046.31 529.352 1046.09 528.792 1045.65 528.392 cv
1045.21 527.992 1044.49 527.692 1043.49 527.492 cv
1042.29 527.252 li
1040.81 526.972 1039.75 526.512 1039.09 525.872 cv
1038.43 525.252 1038.11 524.392 1038.11 523.272 cv
1038.11 521.992 1038.55 520.972 1039.47 520.232 cv
1040.37 519.492 1041.63 519.112 1043.23 519.112 cv
1043.91 519.112 1044.59 519.172 1045.31 519.292 cv
1046.01 519.412 1046.73 519.612 1047.49 519.852 cv
f
1051.37 523.012 mo
1053.17 523.012 li
1053.17 533.952 li
1051.37 533.952 li
1051.37 523.012 li
1051.37 518.752 mo
1053.17 518.752 li
1053.17 521.032 li
1051.37 521.032 li
1051.37 518.752 li
f
1064.13 528.352 mo
1064.13 527.072 1063.85 526.052 1063.33 525.332 cv
1062.79 524.612 1062.03 524.252 1061.07 524.252 cv
1060.11 524.252 1059.35 524.612 1058.81 525.332 cv
1058.27 526.052 1058.01 527.072 1058.01 528.352 cv
1058.01 529.652 1058.27 530.652 1058.81 531.372 cv
1059.35 532.092 1060.11 532.452 1061.07 532.452 cv
1062.03 532.452 1062.79 532.092 1063.33 531.372 cv
1063.85 530.652 1064.13 529.652 1064.13 528.352 cv
1065.93 532.592 mo
1065.93 534.432 1065.51 535.812 1064.69 536.732 cv
1063.85 537.632 1062.59 538.092 1060.89 538.092 cv
1060.25 538.092 1059.67 538.032 1059.11 537.952 cv
1058.55 537.852 1057.99 537.712 1057.47 537.512 cv
1057.47 535.772 li
1057.99 536.052 1058.51 536.252 1059.03 536.392 cv
1059.55 536.532 1060.07 536.612 1060.61 536.612 cv
1061.77 536.612 1062.65 536.292 1063.25 535.692 cv
1063.83 535.072 1064.13 534.152 1064.13 532.912 cv
1064.13 532.032 li
1063.75 532.672 1063.27 533.152 1062.69 533.472 cv
1062.11 533.792 1061.43 533.952 1060.63 533.952 cv
1059.27 533.952 1058.19 533.452 1057.37 532.432 cv
1056.55 531.412 1056.15 530.052 1056.15 528.352 cv
1056.15 526.672 1056.55 525.312 1057.37 524.292 cv
1058.19 523.272 1059.27 522.752 1060.63 522.752 cv
1061.43 522.752 1062.11 522.912 1062.69 523.232 cv
1063.27 523.552 1063.75 524.032 1064.13 524.672 cv
1064.13 523.012 li
1065.93 523.012 li
1065.93 532.592 li
f
1078.15 525.112 mo
1078.59 524.312 1079.13 523.732 1079.75 523.332 cv
1080.37 522.952 1081.11 522.752 1081.97 522.752 cv
1083.09 522.752 1083.97 523.152 1084.59 523.952 cv
1085.21 524.752 1085.53 525.892 1085.53 527.352 cv
1085.53 533.952 li
1083.73 533.952 li
1083.73 527.412 li
1083.73 526.372 1083.53 525.592 1083.17 525.072 cv
1082.79 524.572 1082.23 524.312 1081.47 524.312 cv
1080.53 524.312 1079.79 524.632 1079.25 525.252 cv
1078.71 525.872 1078.45 526.712 1078.45 527.772 cv
1078.45 533.952 li
1076.65 533.952 li
1076.65 527.412 li
1076.65 526.372 1076.45 525.592 1076.09 525.072 cv
1075.71 524.572 1075.13 524.312 1074.37 524.312 cv
1073.45 524.312 1072.71 524.632 1072.17 525.252 cv
1071.63 525.872 1071.37 526.712 1071.37 527.772 cv
1071.37 533.952 li
1069.57 533.952 li
1069.57 523.012 li
1071.37 523.012 li
1071.37 524.712 li
1071.77 524.052 1072.27 523.552 1072.85 523.232 cv
1073.41 522.912 1074.09 522.752 1074.89 522.752 cv
1075.69 522.752 1076.35 522.952 1076.91 523.352 cv
1077.47 523.752 1077.87 524.352 1078.15 525.112 cv
f
1093.35 524.272 mo
1092.39 524.272 1091.63 524.652 1091.07 525.412 cv
1090.51 526.172 1090.23 527.192 1090.23 528.492 cv
1090.23 529.812 1090.49 530.832 1091.05 531.592 cv
1091.61 532.352 1092.37 532.712 1093.35 532.712 cv
1094.31 532.712 1095.07 532.352 1095.63 531.592 cv
1096.19 530.832 1096.47 529.812 1096.47 528.492 cv
1096.47 527.212 1096.19 526.172 1095.63 525.412 cv
1095.07 524.652 1094.31 524.272 1093.35 524.272 cv
1093.35 522.752 mo
1094.91 522.752 1096.13 523.272 1097.03 524.272 cv
1097.91 525.292 1098.37 526.692 1098.37 528.492 cv
1098.37 530.292 1097.91 531.692 1097.03 532.692 cv
1096.13 533.712 1094.91 534.212 1093.35 534.212 cv
1091.77 534.212 1090.53 533.712 1089.65 532.692 cv
1088.77 531.692 1088.33 530.292 1088.33 528.492 cv
1088.33 526.692 1088.77 525.292 1089.65 524.272 cv
1090.53 523.272 1091.77 522.752 1093.35 522.752 cv
f
1101.35 523.012 mo
1103.15 523.012 li
1103.15 533.952 li
1101.35 533.952 li
1101.35 523.012 li
1101.35 518.752 mo
1103.15 518.752 li
1103.15 521.032 li
1101.35 521.032 li
1101.35 518.752 li
f
1114.11 524.672 mo
1114.11 518.752 li
1115.91 518.752 li
1115.91 533.952 li
1114.11 533.952 li
1114.11 532.312 li
1113.73 532.972 1113.25 533.452 1112.67 533.752 cv
1112.09 534.052 1111.41 534.212 1110.61 534.212 cv
1109.29 534.212 1108.21 533.692 1107.37 532.652 cv
1106.53 531.612 1106.13 530.212 1106.13 528.492 cv
1106.13 526.772 1106.53 525.392 1107.37 524.332 cv
1108.21 523.292 1109.29 522.752 1110.61 522.752 cv
1111.41 522.752 1112.09 522.912 1112.67 523.232 cv
1113.25 523.552 1113.73 524.032 1114.11 524.672 cv
1107.99 528.492 mo
1107.99 529.812 1108.25 530.852 1108.79 531.612 cv
1109.33 532.372 1110.09 532.732 1111.05 532.732 cv
1111.99 532.732 1112.73 532.372 1113.29 531.612 cv
1113.83 530.852 1114.11 529.812 1114.11 528.492 cv
1114.11 527.172 1113.83 526.152 1113.29 525.392 cv
1112.73 524.632 1111.99 524.252 1111.05 524.252 cv
1110.09 524.252 1109.33 524.632 1108.79 525.392 cv
1108.25 526.152 1107.99 527.172 1107.99 528.492 cv
f
1119.33 518.772 mo
1120.89 518.772 li
1121.85 520.312 1122.59 521.812 1123.07 523.292 cv
1123.55 524.772 1123.81 526.232 1123.81 527.672 cv
1123.81 529.132 1123.55 530.592 1123.07 532.072 cv
1122.59 533.552 1121.85 535.032 1120.89 536.572 cv
1119.33 536.572 li
1120.19 535.072 1120.83 533.612 1121.27 532.132 cv
1121.69 530.672 1121.91 529.192 1121.91 527.672 cv
1121.91 526.172 1121.69 524.692 1121.27 523.232 cv
1120.83 521.772 1120.19 520.292 1119.33 518.772 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
