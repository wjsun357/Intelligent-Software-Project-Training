%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: dbnVSbp-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/10, 11:13:24
%%BoundingBox: 0 0 1165 611
%%HiResBoundingBox: 0 0 1164.6167 610.9163
%%CropBox: 0 0 1164.6167 610.9163
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-10T11:12:29+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-10T11:13:16+08:00"
   xmp:MetadataDate="2019-06-10T11:13:16+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:416deeda-ac7a-43e1-ad64-5cf75a20d223"
   xmpMM:InstanceID="uuid:8e2d00a2-429c-428c-891f-fa77a422a1ae"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -610.916 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
6.10352e-5 0 mo
6.10352e-5 610.916 li
1164.62 610.916 li
1164.62 0 li
cp
clp
gsave
-.592125 611.085 mo
1165.41 611.085 li
1165.41 -.915354 li
-.592125 -.915354 li
-.592125 611.085 li
clp
-88.592 621.085 mo
1293.81 621.085 li
1293.81 -76.5952 li
-88.592 -76.5952 li
-88.592 621.085 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
84.208 544.34 mo
1155.57 544.34 li
1155.57 7.12626 li
84.208 7.12626 li
84.208 544.34 li
f
132.906 544.34 mo
132.906 547.84 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
132.906 544.34 mo
132.906 547.84 li
@
132.9 553.537 mo
131.727 553.537 130.853 554.112 130.255 555.262 cv
129.657 556.412 129.381 558.137 129.381 560.437 cv
129.381 562.737 129.657 564.462 130.255 565.612 cv
130.853 566.762 131.727 567.337 132.9 567.337 cv
134.073 567.337 134.947 566.762 135.545 565.612 cv
136.12 564.462 136.419 562.737 136.419 560.437 cv
136.419 558.137 136.12 556.412 135.545 555.262 cv
134.947 554.112 134.073 553.537 132.9 553.537 cv
132.9 551.743 mo
134.763 551.743 136.189 552.502 137.201 553.974 cv
138.19 555.469 138.696 557.631 138.696 560.437 cv
138.696 563.266 138.19 565.428 137.201 566.9 cv
136.189 568.372 134.763 569.108 132.9 569.108 cv
131.014 569.108 129.565 568.372 128.576 566.9 cv
127.587 565.428 127.104 563.266 127.104 560.437 cv
127.104 557.631 127.587 555.469 128.576 553.974 cv
129.565 552.502 131.014 551.743 132.9 551.743 cv
f
264.523 544.34 mo
264.523 547.84 li
f
264.523 544.34 mo
264.523 547.84 li
@
246.978 566.9 mo
254.89 566.9 li
254.89 568.809 li
244.241 568.809 li
244.241 566.9 li
245.092 566.026 246.265 564.83 247.76 563.312 cv
249.232 561.817 250.175 560.851 250.566 560.414 cv
251.302 559.609 251.808 558.919 252.084 558.344 cv
252.36 557.792 252.521 557.217 252.521 556.665 cv
252.521 555.791 252.199 555.055 251.578 554.503 cv
250.957 553.951 250.152 553.652 249.14 553.652 cv
248.427 553.652 247.668 553.79 246.886 554.02 cv
246.104 554.273 245.253 554.641 244.356 555.147 cv
244.356 552.847 li
245.276 552.479 246.127 552.203 246.909 552.019 cv
247.691 551.835 248.427 551.743 249.094 551.743 cv
250.819 551.743 252.199 552.18 253.234 553.054 cv
254.269 553.928 254.798 555.078 254.798 556.527 cv
254.798 557.217 254.66 557.884 254.407 558.482 cv
254.154 559.103 253.694 559.839 253.004 560.667 cv
252.82 560.897 252.222 561.518 251.21 562.553 cv
250.198 563.588 248.795 565.037 246.978 566.9 cv
f
264.504 553.537 mo
263.331 553.537 262.457 554.112 261.859 555.262 cv
261.261 556.412 260.985 558.137 260.985 560.437 cv
260.985 562.737 261.261 564.462 261.859 565.612 cv
262.457 566.762 263.331 567.337 264.504 567.337 cv
265.677 567.337 266.551 566.762 267.149 565.612 cv
267.724 564.462 268.023 562.737 268.023 560.437 cv
268.023 558.137 267.724 556.412 267.149 555.262 cv
266.551 554.112 265.677 553.537 264.504 553.537 cv
264.504 551.743 mo
266.367 551.743 267.793 552.502 268.805 553.974 cv
269.794 555.469 270.3 557.631 270.3 560.437 cv
270.3 563.266 269.794 565.428 268.805 566.9 cv
267.793 568.372 266.367 569.108 264.504 569.108 cv
262.618 569.108 261.169 568.372 260.18 566.9 cv
259.191 565.428 258.708 563.266 258.708 560.437 cv
258.708 557.631 259.191 555.469 260.18 553.974 cv
261.169 552.502 262.618 551.743 264.504 551.743 cv
f
279.132 553.537 mo
277.959 553.537 277.085 554.112 276.487 555.262 cv
275.889 556.412 275.613 558.137 275.613 560.437 cv
275.613 562.737 275.889 564.462 276.487 565.612 cv
277.085 566.762 277.959 567.337 279.132 567.337 cv
280.305 567.337 281.179 566.762 281.777 565.612 cv
282.352 564.462 282.651 562.737 282.651 560.437 cv
282.651 558.137 282.352 556.412 281.777 555.262 cv
281.179 554.112 280.305 553.537 279.132 553.537 cv
279.132 551.743 mo
280.995 551.743 282.421 552.502 283.433 553.974 cv
284.422 555.469 284.928 557.631 284.928 560.437 cv
284.928 563.266 284.422 565.428 283.433 566.9 cv
282.421 568.372 280.995 569.108 279.132 569.108 cv
277.246 569.108 275.797 568.372 274.808 566.9 cv
273.819 565.428 273.336 563.266 273.336 560.437 cv
273.336 557.631 273.819 555.469 274.808 553.974 cv
275.797 552.502 277.246 551.743 279.132 551.743 cv
f
396.14 544.34 mo
396.14 547.84 li
f
396.14 544.34 mo
396.14 547.84 li
@
382.873 554.02 mo
377.146 562.967 li
382.873 562.967 li
382.873 554.02 li
382.275 552.042 mo
385.127 552.042 li
385.127 562.967 li
387.519 562.967 li
387.519 564.853 li
385.127 564.853 li
385.127 568.809 li
382.873 568.809 li
382.873 564.853 li
375.306 564.853 li
375.306 562.668 li
382.275 552.042 li
f
396.121 553.537 mo
394.948 553.537 394.074 554.112 393.476 555.262 cv
392.878 556.412 392.602 558.137 392.602 560.437 cv
392.602 562.737 392.878 564.462 393.476 565.612 cv
394.074 566.762 394.948 567.337 396.121 567.337 cv
397.294 567.337 398.168 566.762 398.766 565.612 cv
399.341 564.462 399.64 562.737 399.64 560.437 cv
399.64 558.137 399.341 556.412 398.766 555.262 cv
398.168 554.112 397.294 553.537 396.121 553.537 cv
396.121 551.743 mo
397.984 551.743 399.41 552.502 400.422 553.974 cv
401.411 555.469 401.917 557.631 401.917 560.437 cv
401.917 563.266 401.411 565.428 400.422 566.9 cv
399.41 568.372 397.984 569.108 396.121 569.108 cv
394.235 569.108 392.786 568.372 391.797 566.9 cv
390.808 565.428 390.325 563.266 390.325 560.437 cv
390.325 557.631 390.808 555.469 391.797 553.974 cv
392.786 552.502 394.235 551.743 396.121 551.743 cv
f
410.749 553.537 mo
409.576 553.537 408.702 554.112 408.104 555.262 cv
407.506 556.412 407.23 558.137 407.23 560.437 cv
407.23 562.737 407.506 564.462 408.104 565.612 cv
408.702 566.762 409.576 567.337 410.749 567.337 cv
411.922 567.337 412.796 566.762 413.394 565.612 cv
413.969 564.462 414.268 562.737 414.268 560.437 cv
414.268 558.137 413.969 556.412 413.394 555.262 cv
412.796 554.112 411.922 553.537 410.749 553.537 cv
410.749 551.743 mo
412.612 551.743 414.038 552.502 415.05 553.974 cv
416.039 555.469 416.545 557.631 416.545 560.437 cv
416.545 563.266 416.039 565.428 415.05 566.9 cv
414.038 568.372 412.612 569.108 410.749 569.108 cv
408.863 569.108 407.414 568.372 406.425 566.9 cv
405.436 565.428 404.953 563.266 404.953 560.437 cv
404.953 557.631 405.436 555.469 406.425 553.974 cv
407.414 552.502 408.863 551.743 410.749 551.743 cv
f
527.756 544.34 mo
527.756 547.84 li
f
527.756 544.34 mo
527.756 547.84 li
@
513.385 559.517 mo
512.373 559.517 511.568 559.885 510.97 560.575 cv
510.372 561.265 510.073 562.231 510.073 563.427 cv
510.073 564.646 510.372 565.612 510.97 566.302 cv
511.568 566.992 512.373 567.337 513.385 567.337 cv
514.397 567.337 515.202 566.992 515.8 566.302 cv
516.398 565.612 516.697 564.646 516.697 563.427 cv
516.697 562.231 516.398 561.265 515.8 560.575 cv
515.202 559.885 514.397 559.517 513.385 559.517 cv
517.893 552.41 mo
517.893 554.48 li
517.318 554.204 516.743 553.997 516.168 553.859 cv
515.57 553.721 514.995 553.652 514.443 553.652 cv
512.925 553.652 511.775 554.158 510.993 555.17 cv
510.211 556.182 509.751 557.723 509.659 559.747 cv
510.096 559.103 510.648 558.597 511.315 558.252 cv
511.982 557.907 512.718 557.723 513.523 557.723 cv
515.202 557.723 516.536 558.252 517.502 559.264 cv
518.468 560.276 518.974 561.679 518.974 563.427 cv
518.974 565.152 518.445 566.532 517.433 567.567 cv
516.421 568.602 515.064 569.108 513.385 569.108 cv
511.453 569.108 509.958 568.372 508.946 566.9 cv
507.911 565.428 507.405 563.266 507.405 560.437 cv
507.405 557.792 508.026 555.676 509.291 554.112 cv
510.533 552.548 512.235 551.743 514.351 551.743 cv
514.903 551.743 515.478 551.812 516.076 551.904 cv
516.651 552.019 517.249 552.18 517.893 552.41 cv
f
527.737 553.537 mo
526.564 553.537 525.69 554.112 525.092 555.262 cv
524.494 556.412 524.218 558.137 524.218 560.437 cv
524.218 562.737 524.494 564.462 525.092 565.612 cv
525.69 566.762 526.564 567.337 527.737 567.337 cv
528.91 567.337 529.784 566.762 530.382 565.612 cv
530.957 564.462 531.256 562.737 531.256 560.437 cv
531.256 558.137 530.957 556.412 530.382 555.262 cv
529.784 554.112 528.91 553.537 527.737 553.537 cv
527.737 551.743 mo
529.6 551.743 531.026 552.502 532.038 553.974 cv
533.027 555.469 533.533 557.631 533.533 560.437 cv
533.533 563.266 533.027 565.428 532.038 566.9 cv
531.026 568.372 529.6 569.108 527.737 569.108 cv
525.851 569.108 524.402 568.372 523.413 566.9 cv
522.424 565.428 521.941 563.266 521.941 560.437 cv
521.941 557.631 522.424 555.469 523.413 553.974 cv
524.402 552.502 525.851 551.743 527.737 551.743 cv
f
542.365 553.537 mo
541.192 553.537 540.318 554.112 539.72 555.262 cv
539.122 556.412 538.846 558.137 538.846 560.437 cv
538.846 562.737 539.122 564.462 539.72 565.612 cv
540.318 566.762 541.192 567.337 542.365 567.337 cv
543.538 567.337 544.412 566.762 545.01 565.612 cv
545.585 564.462 545.884 562.737 545.884 560.437 cv
545.884 558.137 545.585 556.412 545.01 555.262 cv
544.412 554.112 543.538 553.537 542.365 553.537 cv
542.365 551.743 mo
544.228 551.743 545.654 552.502 546.666 553.974 cv
547.655 555.469 548.161 557.631 548.161 560.437 cv
548.161 563.266 547.655 565.428 546.666 566.9 cv
545.654 568.372 544.228 569.108 542.365 569.108 cv
540.479 569.108 539.03 568.372 538.041 566.9 cv
537.052 565.428 536.569 563.266 536.569 560.437 cv
536.569 557.631 537.052 555.469 538.041 553.974 cv
539.03 552.502 540.479 551.743 542.365 551.743 cv
f
659.373 544.34 mo
659.373 547.84 li
f
659.373 544.34 mo
659.373 547.84 li
@
644.726 560.851 mo
643.645 560.851 642.794 561.15 642.173 561.725 cv
641.552 562.3 641.253 563.082 641.253 564.094 cv
641.253 565.106 641.552 565.911 642.173 566.486 cv
642.794 567.061 643.645 567.337 644.726 567.337 cv
645.784 567.337 646.635 567.061 647.256 566.463 cv
647.877 565.888 648.199 565.106 648.199 564.094 cv
648.199 563.082 647.877 562.3 647.279 561.725 cv
646.658 561.15 645.807 560.851 644.726 560.851 cv
642.449 559.885 mo
641.483 559.655 640.724 559.195 640.172 558.528 cv
639.62 557.861 639.367 557.056 639.367 556.09 cv
639.367 554.756 639.827 553.698 640.793 552.916 cv
641.736 552.134 643.047 551.743 644.726 551.743 cv
646.382 551.743 647.693 552.134 648.659 552.916 cv
649.602 553.698 650.085 554.756 650.085 556.09 cv
650.085 557.056 649.809 557.861 649.257 558.528 cv
648.705 559.195 647.969 559.655 647.003 559.885 cv
648.084 560.138 648.935 560.644 649.556 561.38 cv
650.154 562.116 650.476 563.036 650.476 564.094 cv
650.476 565.727 649.97 566.969 648.981 567.82 cv
647.969 568.694 646.566 569.108 644.726 569.108 cv
642.863 569.108 641.437 568.694 640.448 567.82 cv
639.459 566.969 638.976 565.727 638.976 564.094 cv
638.976 563.036 639.275 562.116 639.896 561.38 cv
640.494 560.644 641.345 560.138 642.449 559.885 cv
641.621 556.297 mo
641.621 557.171 641.874 557.861 642.426 558.344 cv
642.978 558.827 643.737 559.057 644.726 559.057 cv
645.692 559.057 646.451 558.827 647.003 558.344 cv
647.555 557.861 647.831 557.171 647.831 556.297 cv
647.831 555.423 647.555 554.756 647.003 554.273 cv
646.451 553.79 645.692 553.537 644.726 553.537 cv
643.737 553.537 642.978 553.79 642.426 554.273 cv
641.874 554.756 641.621 555.423 641.621 556.297 cv
f
659.354 553.537 mo
658.181 553.537 657.307 554.112 656.709 555.262 cv
656.111 556.412 655.835 558.137 655.835 560.437 cv
655.835 562.737 656.111 564.462 656.709 565.612 cv
657.307 566.762 658.181 567.337 659.354 567.337 cv
660.527 567.337 661.401 566.762 661.999 565.612 cv
662.574 564.462 662.873 562.737 662.873 560.437 cv
662.873 558.137 662.574 556.412 661.999 555.262 cv
661.401 554.112 660.527 553.537 659.354 553.537 cv
659.354 551.743 mo
661.217 551.743 662.643 552.502 663.655 553.974 cv
664.644 555.469 665.15 557.631 665.15 560.437 cv
665.15 563.266 664.644 565.428 663.655 566.9 cv
662.643 568.372 661.217 569.108 659.354 569.108 cv
657.468 569.108 656.019 568.372 655.03 566.9 cv
654.041 565.428 653.558 563.266 653.558 560.437 cv
653.558 557.631 654.041 555.469 655.03 553.974 cv
656.019 552.502 657.468 551.743 659.354 551.743 cv
f
673.982 553.537 mo
672.809 553.537 671.935 554.112 671.337 555.262 cv
670.739 556.412 670.463 558.137 670.463 560.437 cv
670.463 562.737 670.739 564.462 671.337 565.612 cv
671.935 566.762 672.809 567.337 673.982 567.337 cv
675.155 567.337 676.029 566.762 676.627 565.612 cv
677.202 564.462 677.501 562.737 677.501 560.437 cv
677.501 558.137 677.202 556.412 676.627 555.262 cv
676.029 554.112 675.155 553.537 673.982 553.537 cv
673.982 551.743 mo
675.845 551.743 677.271 552.502 678.283 553.974 cv
679.272 555.469 679.778 557.631 679.778 560.437 cv
679.778 563.266 679.272 565.428 678.283 566.9 cv
677.271 568.372 675.845 569.108 673.982 569.108 cv
672.096 569.108 670.647 568.372 669.658 566.9 cv
668.669 565.428 668.186 563.266 668.186 560.437 cv
668.186 557.631 668.669 555.469 669.658 553.974 cv
670.647 552.502 672.096 551.743 673.982 551.743 cv
f
790.99 544.34 mo
790.99 547.84 li
f
790.99 544.34 mo
790.99 547.84 li
@
764.56 566.9 mo
768.263 566.9 li
768.263 554.112 li
764.238 554.917 li
764.238 552.847 li
768.24 552.042 li
770.517 552.042 li
770.517 566.9 li
774.22 566.9 li
774.22 568.809 li
764.56 568.809 li
764.56 566.9 li
f
783.651 553.537 mo
782.477 553.537 781.604 554.112 781.005 555.262 cv
780.407 556.412 780.131 558.137 780.131 560.437 cv
780.131 562.737 780.407 564.462 781.005 565.612 cv
781.604 566.762 782.477 567.337 783.651 567.337 cv
784.823 567.337 785.698 566.762 786.295 565.612 cv
786.87 564.462 787.169 562.737 787.169 560.437 cv
787.169 558.137 786.87 556.412 786.295 555.262 cv
785.698 554.112 784.823 553.537 783.651 553.537 cv
783.651 551.743 mo
785.513 551.743 786.94 552.502 787.951 553.974 cv
788.94 555.469 789.446 557.631 789.446 560.437 cv
789.446 563.266 788.94 565.428 787.951 566.9 cv
786.94 568.372 785.513 569.108 783.651 569.108 cv
781.764 569.108 780.315 568.372 779.326 566.9 cv
778.337 565.428 777.854 563.266 777.854 560.437 cv
777.854 557.631 778.337 555.469 779.326 553.974 cv
780.315 552.502 781.764 551.743 783.651 551.743 cv
f
798.279 553.537 mo
797.105 553.537 796.232 554.112 795.633 555.262 cv
795.035 556.412 794.759 558.137 794.759 560.437 cv
794.759 562.737 795.035 564.462 795.633 565.612 cv
796.232 566.762 797.105 567.337 798.279 567.337 cv
799.451 567.337 800.326 566.762 800.923 565.612 cv
801.498 564.462 801.797 562.737 801.797 560.437 cv
801.797 558.137 801.498 556.412 800.923 555.262 cv
800.326 554.112 799.451 553.537 798.279 553.537 cv
798.279 551.743 mo
800.141 551.743 801.568 552.502 802.579 553.974 cv
803.568 555.469 804.074 557.631 804.074 560.437 cv
804.074 563.266 803.568 565.428 802.579 566.9 cv
801.568 568.372 800.141 569.108 798.279 569.108 cv
796.392 569.108 794.943 568.372 793.954 566.9 cv
792.965 565.428 792.482 563.266 792.482 560.437 cv
792.482 557.631 792.965 555.469 793.954 553.974 cv
794.943 552.502 796.392 551.743 798.279 551.743 cv
f
812.907 553.537 mo
811.734 553.537 810.86 554.112 810.262 555.262 cv
809.664 556.412 809.388 558.137 809.388 560.437 cv
809.388 562.737 809.664 564.462 810.262 565.612 cv
810.86 566.762 811.734 567.337 812.907 567.337 cv
814.08 567.337 814.954 566.762 815.552 565.612 cv
816.127 564.462 816.426 562.737 816.426 560.437 cv
816.426 558.137 816.127 556.412 815.552 555.262 cv
814.954 554.112 814.08 553.537 812.907 553.537 cv
812.907 551.743 mo
814.77 551.743 816.196 552.502 817.208 553.974 cv
818.197 555.469 818.703 557.631 818.703 560.437 cv
818.703 563.266 818.197 565.428 817.208 566.9 cv
816.196 568.372 814.77 569.108 812.907 569.108 cv
811.021 569.108 809.572 568.372 808.583 566.9 cv
807.594 565.428 807.111 563.266 807.111 560.437 cv
807.111 557.631 807.594 555.469 808.583 553.974 cv
809.572 552.502 811.021 551.743 812.907 551.743 cv
f
922.606 544.34 mo
922.606 547.84 li
f
922.606 544.34 mo
922.606 547.84 li
@
896.177 566.9 mo
899.88 566.9 li
899.88 554.112 li
895.855 554.917 li
895.855 552.847 li
899.857 552.042 li
902.134 552.042 li
902.134 566.9 li
905.837 566.9 li
905.837 568.809 li
896.177 568.809 li
896.177 566.9 li
f
912.369 566.9 mo
920.281 566.9 li
920.281 568.809 li
909.632 568.809 li
909.632 566.9 li
910.483 566.026 911.656 564.83 913.151 563.312 cv
914.623 561.817 915.566 560.851 915.957 560.414 cv
916.693 559.609 917.199 558.919 917.475 558.344 cv
917.751 557.792 917.912 557.217 917.912 556.665 cv
917.912 555.791 917.59 555.055 916.969 554.503 cv
916.348 553.951 915.543 553.652 914.531 553.652 cv
913.818 553.652 913.059 553.79 912.277 554.02 cv
911.495 554.273 910.644 554.641 909.747 555.147 cv
909.747 552.847 li
910.667 552.479 911.518 552.203 912.3 552.019 cv
913.082 551.835 913.818 551.743 914.485 551.743 cv
916.21 551.743 917.59 552.18 918.625 553.054 cv
919.66 553.928 920.189 555.078 920.189 556.527 cv
920.189 557.217 920.051 557.884 919.798 558.482 cv
919.545 559.103 919.085 559.839 918.395 560.667 cv
918.211 560.897 917.613 561.518 916.601 562.553 cv
915.589 563.588 914.186 565.037 912.369 566.9 cv
f
929.895 553.537 mo
928.722 553.537 927.848 554.112 927.25 555.262 cv
926.652 556.412 926.376 558.137 926.376 560.437 cv
926.376 562.737 926.652 564.462 927.25 565.612 cv
927.848 566.762 928.722 567.337 929.895 567.337 cv
931.068 567.337 931.942 566.762 932.54 565.612 cv
933.115 564.462 933.414 562.737 933.414 560.437 cv
933.414 558.137 933.115 556.412 932.54 555.262 cv
931.942 554.112 931.068 553.537 929.895 553.537 cv
929.895 551.743 mo
931.758 551.743 933.184 552.502 934.196 553.974 cv
935.185 555.469 935.691 557.631 935.691 560.437 cv
935.691 563.266 935.185 565.428 934.196 566.9 cv
933.184 568.372 931.758 569.108 929.895 569.108 cv
928.009 569.108 926.56 568.372 925.571 566.9 cv
924.582 565.428 924.099 563.266 924.099 560.437 cv
924.099 557.631 924.582 555.469 925.571 553.974 cv
926.56 552.502 928.009 551.743 929.895 551.743 cv
f
944.523 553.537 mo
943.35 553.537 942.476 554.112 941.878 555.262 cv
941.28 556.412 941.004 558.137 941.004 560.437 cv
941.004 562.737 941.28 564.462 941.878 565.612 cv
942.476 566.762 943.35 567.337 944.523 567.337 cv
945.696 567.337 946.57 566.762 947.168 565.612 cv
947.743 564.462 948.042 562.737 948.042 560.437 cv
948.042 558.137 947.743 556.412 947.168 555.262 cv
946.57 554.112 945.696 553.537 944.523 553.537 cv
944.523 551.743 mo
946.386 551.743 947.812 552.502 948.824 553.974 cv
949.813 555.469 950.319 557.631 950.319 560.437 cv
950.319 563.266 949.813 565.428 948.824 566.9 cv
947.812 568.372 946.386 569.108 944.523 569.108 cv
942.637 569.108 941.188 568.372 940.199 566.9 cv
939.21 565.428 938.727 563.266 938.727 560.437 cv
938.727 557.631 939.21 555.469 940.199 553.974 cv
941.188 552.502 942.637 551.743 944.523 551.743 cv
f
1054.22 544.34 mo
1054.22 547.84 li
f
1054.22 544.34 mo
1054.22 547.84 li
@
1027.79 566.9 mo
1031.5 566.9 li
1031.5 554.112 li
1027.47 554.917 li
1027.47 552.847 li
1031.47 552.042 li
1033.75 552.042 li
1033.75 566.9 li
1037.45 566.9 li
1037.45 568.809 li
1027.79 568.809 li
1027.79 566.9 li
f
1048.26 554.02 mo
1042.54 562.967 li
1048.26 562.967 li
1048.26 554.02 li
1047.67 552.042 mo
1050.52 552.042 li
1050.52 562.967 li
1052.91 562.967 li
1052.91 564.853 li
1050.52 564.853 li
1050.52 568.809 li
1048.26 568.809 li
1048.26 564.853 li
1040.7 564.853 li
1040.7 562.668 li
1047.67 552.042 li
f
1061.51 553.537 mo
1060.34 553.537 1059.46 554.112 1058.87 555.262 cv
1058.27 556.412 1057.99 558.137 1057.99 560.437 cv
1057.99 562.737 1058.27 564.462 1058.87 565.612 cv
1059.46 566.762 1060.34 567.337 1061.51 567.337 cv
1062.69 567.337 1063.56 566.762 1064.16 565.612 cv
1064.73 564.462 1065.03 562.737 1065.03 560.437 cv
1065.03 558.137 1064.73 556.412 1064.16 555.262 cv
1063.56 554.112 1062.69 553.537 1061.51 553.537 cv
1061.51 551.743 mo
1063.38 551.743 1064.8 552.502 1065.81 553.974 cv
1066.8 555.469 1067.31 557.631 1067.31 560.437 cv
1067.31 563.266 1066.8 565.428 1065.81 566.9 cv
1064.8 568.372 1063.38 569.108 1061.51 569.108 cv
1059.63 569.108 1058.18 568.372 1057.19 566.9 cv
1056.2 565.428 1055.72 563.266 1055.72 560.437 cv
1055.72 557.631 1056.2 555.469 1057.19 553.974 cv
1058.18 552.502 1059.63 551.743 1061.51 551.743 cv
f
1076.14 553.537 mo
1074.97 553.537 1074.09 554.112 1073.49 555.262 cv
1072.9 556.412 1072.62 558.137 1072.62 560.437 cv
1072.62 562.737 1072.9 564.462 1073.49 565.612 cv
1074.09 566.762 1074.97 567.337 1076.14 567.337 cv
1077.31 567.337 1078.19 566.762 1078.79 565.612 cv
1079.36 564.462 1079.66 562.737 1079.66 560.437 cv
1079.66 558.137 1079.36 556.412 1078.79 555.262 cv
1078.19 554.112 1077.31 553.537 1076.14 553.537 cv
1076.14 551.743 mo
1078 551.743 1079.43 552.502 1080.44 553.974 cv
1081.43 555.469 1081.94 557.631 1081.94 560.437 cv
1081.94 563.266 1081.43 565.428 1080.44 566.9 cv
1079.43 568.372 1078 569.108 1076.14 569.108 cv
1074.25 569.108 1072.81 568.372 1071.82 566.9 cv
1070.83 565.428 1070.34 563.266 1070.34 560.437 cv
1070.34 557.631 1070.83 555.469 1071.82 553.974 cv
1072.81 552.502 1074.25 551.743 1076.14 551.743 cv
f
576.89 578.517 mo
590.72 578.517 li
590.72 581.007 li
579.86 581.007 li
579.86 587.487 li
590.27 587.487 li
590.27 589.977 li
579.86 589.977 li
579.86 597.897 li
590.99 597.897 li
590.99 600.387 li
576.89 600.387 li
576.89 578.517 li
f
598.341 597.927 mo
598.341 606.597 li
595.641 606.597 li
595.641 583.977 li
598.341 583.977 li
598.341 586.467 li
598.88 585.507 599.601 584.787 600.471 584.307 cv
601.341 583.827 602.391 583.587 603.591 583.587 cv
605.57 583.587 607.191 584.397 608.451 585.957 cv
609.681 587.547 610.311 589.617 610.311 592.197 cv
610.311 594.777 609.681 596.877 608.451 598.437 cv
607.191 599.997 605.57 600.777 603.591 600.777 cv
602.391 600.777 601.341 600.537 600.471 600.087 cv
599.601 599.637 598.88 598.917 598.341 597.927 cv
607.521 592.197 mo
607.521 590.217 607.101 588.687 606.291 587.547 cv
605.451 586.407 604.341 585.837 602.931 585.837 cv
601.491 585.837 600.38 586.407 599.57 587.547 cv
598.731 588.687 598.341 590.217 598.341 592.197 cv
598.341 594.177 598.731 595.737 599.57 596.877 cv
600.38 598.017 601.491 598.557 602.931 598.557 cv
604.341 598.557 605.451 598.017 606.291 596.877 cv
607.101 595.737 607.521 594.177 607.521 592.197 cv
f
621.14 585.867 mo
619.7 585.867 618.56 586.437 617.72 587.577 cv
616.88 588.717 616.46 590.247 616.46 592.197 cv
616.46 594.177 616.85 595.707 617.69 596.847 cv
618.53 597.987 619.67 598.527 621.14 598.527 cv
622.58 598.527 623.72 597.987 624.56 596.847 cv
625.4 595.707 625.82 594.177 625.82 592.197 cv
625.82 590.277 625.4 588.717 624.56 587.577 cv
623.72 586.437 622.58 585.867 621.14 585.867 cv
621.14 583.587 mo
623.48 583.587 625.31 584.367 626.66 585.867 cv
627.98 587.397 628.67 589.497 628.67 592.197 cv
628.67 594.897 627.98 596.997 626.66 598.497 cv
625.31 600.027 623.48 600.777 621.14 600.777 cv
618.77 600.777 616.91 600.027 615.59 598.497 cv
614.27 596.997 613.61 594.897 613.61 592.197 cv
613.61 589.497 614.27 587.397 615.59 585.867 cv
616.91 584.367 618.77 583.587 621.14 583.587 cv
f
644.96 584.607 mo
644.96 587.127 li
644.18 586.707 643.43 586.407 642.65 586.197 cv
641.87 585.987 641.12 585.867 640.34 585.867 cv
638.6 585.867 637.22 586.437 636.26 587.547 cv
635.3 588.657 634.82 590.217 634.82 592.197 cv
634.82 594.207 635.3 595.767 636.26 596.877 cv
637.22 597.987 638.6 598.527 640.34 598.527 cv
641.12 598.527 641.87 598.437 642.65 598.227 cv
643.43 598.017 644.18 597.687 644.96 597.267 cv
644.96 599.757 li
644.18 600.117 643.4 600.387 642.62 600.537 cv
641.81 600.687 640.94 600.777 640.04 600.777 cv
637.58 600.777 635.6 600.027 634.16 598.467 cv
632.69 596.937 631.97 594.837 631.97 592.197 cv
631.97 589.527 632.69 587.427 634.16 585.897 cv
635.63 584.367 637.64 583.587 640.22 583.587 cv
641.06 583.587 641.87 583.677 642.65 583.857 cv
643.43 584.037 644.21 584.277 644.96 584.607 cv
f
663.29 590.487 mo
663.29 600.387 li
660.59 600.387 li
660.59 590.577 li
660.59 589.017 660.26 587.877 659.66 587.097 cv
659.06 586.317 658.16 585.927 656.96 585.927 cv
655.49 585.927 654.35 586.407 653.51 587.337 cv
652.67 588.267 652.25 589.527 652.25 591.117 cv
652.25 600.387 li
649.55 600.387 li
649.55 577.587 li
652.25 577.587 li
652.25 586.527 li
652.88 585.567 653.63 584.817 654.53 584.337 cv
655.4 583.857 656.42 583.587 657.56 583.587 cv
659.42 583.587 660.86 584.187 661.82 585.357 cv
662.78 586.527 663.29 588.237 663.29 590.487 cv
f
84.208 450.02 mo
80.708 450.02 li
f
84.208 450.02 mo
80.708 450.02 li
@
47.9282 443.482 mo
46.7552 443.482 45.8812 444.057 45.2832 445.207 cv
44.6852 446.357 44.4092 448.082 44.4092 450.382 cv
44.4092 452.682 44.6852 454.407 45.2832 455.557 cv
45.8812 456.707 46.7552 457.282 47.9282 457.282 cv
49.1012 457.282 49.9752 456.707 50.5732 455.557 cv
51.1482 454.407 51.4472 452.682 51.4472 450.382 cv
51.4472 448.082 51.1482 446.357 50.5732 445.207 cv
49.9752 444.057 49.1012 443.482 47.9282 443.482 cv
47.9282 441.688 mo
49.7912 441.688 51.2172 442.447 52.2292 443.919 cv
53.2182 445.414 53.7242 447.576 53.7242 450.382 cv
53.7242 453.211 53.2182 455.373 52.2292 456.845 cv
51.2172 458.317 49.7912 459.053 47.9282 459.053 cv
46.0422 459.053 44.5932 458.317 43.6042 456.845 cv
42.6152 455.373 42.1322 453.211 42.1322 450.382 cv
42.1322 447.576 42.6152 445.414 43.6042 443.919 cv
44.5932 442.447 46.0422 441.688 47.9282 441.688 cv
f
57.7032 455.902 mo
60.0723 455.902 li
60.0723 458.754 li
57.7032 458.754 li
57.7032 455.902 li
f
66.9721 456.845 mo
74.8841 456.845 li
74.8841 458.754 li
64.2351 458.754 li
64.2351 456.845 li
65.0861 455.971 66.2591 454.775 67.7541 453.257 cv
69.2261 451.762 70.1691 450.796 70.5601 450.359 cv
71.2961 449.554 71.8021 448.864 72.0781 448.289 cv
72.3541 447.737 72.5151 447.162 72.5151 446.61 cv
72.5151 445.736 72.1931 445 71.5721 444.448 cv
70.9511 443.896 70.1461 443.597 69.1341 443.597 cv
68.4211 443.597 67.6621 443.735 66.8801 443.965 cv
66.0981 444.218 65.2471 444.586 64.3501 445.092 cv
64.3501 442.792 li
65.2701 442.424 66.1211 442.148 66.9031 441.964 cv
67.6851 441.78 68.4211 441.688 69.0881 441.688 cv
70.8131 441.688 72.1931 442.125 73.2281 442.999 cv
74.2631 443.873 74.7921 445.023 74.7921 446.472 cv
74.7921 447.162 74.6541 447.829 74.4011 448.427 cv
74.1481 449.048 73.6881 449.784 72.9981 450.612 cv
72.8141 450.842 72.2161 451.463 71.2041 452.498 cv
70.1921 453.533 68.7891 454.982 66.9721 456.845 cv
f
84.208 338.178 mo
80.708 338.178 li
f
84.208 338.178 mo
80.708 338.178 li
@
47.9282 331.641 mo
46.7552 331.641 45.8812 332.216 45.2832 333.366 cv
44.6852 334.516 44.4092 336.241 44.4092 338.54 cv
44.4092 340.841 44.6852 342.565 45.2832 343.716 cv
45.8812 344.866 46.7552 345.44 47.9282 345.44 cv
49.1012 345.44 49.9752 344.866 50.5732 343.716 cv
51.1482 342.565 51.4472 340.841 51.4472 338.54 cv
51.4472 336.241 51.1482 334.516 50.5732 333.366 cv
49.9752 332.216 49.1012 331.641 47.9282 331.641 cv
47.9282 329.846 mo
49.7912 329.846 51.2172 330.605 52.2292 332.078 cv
53.2182 333.573 53.7242 335.734 53.7242 338.54 cv
53.7242 341.37 53.2182 343.531 52.2292 345.004 cv
51.2172 346.475 49.7912 347.212 47.9282 347.212 cv
46.0422 347.212 44.5932 346.475 43.6042 345.004 cv
42.6152 343.531 42.1322 341.37 42.1322 338.54 cv
42.1322 335.734 42.6152 333.573 43.6042 332.078 cv
44.5932 330.605 46.0422 329.846 47.9282 329.846 cv
f
57.7032 344.061 mo
60.0723 344.061 li
60.0723 346.913 li
57.7032 346.913 li
57.7032 344.061 li
f
71.2501 332.124 mo
65.5231 341.07 li
71.2501 341.07 li
71.2501 332.124 li
70.6521 330.146 mo
73.5041 330.146 li
73.5041 341.07 li
75.8961 341.07 li
75.8961 342.957 li
73.5041 342.957 li
73.5041 346.913 li
71.2501 346.913 li
71.2501 342.957 li
63.6831 342.957 li
63.6831 340.772 li
70.6521 330.146 li
f
84.208 226.336 mo
80.708 226.336 li
f
84.208 226.336 mo
80.708 226.336 li
@
47.9282 219.799 mo
46.7552 219.799 45.8812 220.374 45.2832 221.524 cv
44.6852 222.674 44.4092 224.399 44.4092 226.699 cv
44.4092 228.999 44.6852 230.724 45.2832 231.874 cv
45.8812 233.024 46.7552 233.599 47.9282 233.599 cv
49.1012 233.599 49.9752 233.024 50.5732 231.874 cv
51.1482 230.724 51.4472 228.999 51.4472 226.699 cv
51.4472 224.399 51.1482 222.674 50.5732 221.524 cv
49.9752 220.374 49.1012 219.799 47.9282 219.799 cv
47.9282 218.005 mo
49.7912 218.005 51.2172 218.764 52.2292 220.236 cv
53.2182 221.731 53.7242 223.893 53.7242 226.699 cv
53.7242 229.528 53.2182 231.69 52.2292 233.162 cv
51.2172 234.634 49.7912 235.37 47.9282 235.37 cv
46.0422 235.37 44.5932 234.634 43.6042 233.162 cv
42.6152 231.69 42.1322 229.528 42.1322 226.699 cv
42.1322 223.893 42.6152 221.731 43.6042 220.236 cv
44.5932 218.764 46.0422 218.005 47.9282 218.005 cv
f
57.7032 232.219 mo
60.0723 232.219 li
60.0723 235.071 li
57.7032 235.071 li
57.7032 232.219 li
f
70.1461 225.779 mo
69.1341 225.779 68.3291 226.147 67.7311 226.837 cv
67.1331 227.527 66.8341 228.493 66.8341 229.689 cv
66.8341 230.908 67.1331 231.874 67.7311 232.564 cv
68.3291 233.254 69.1341 233.599 70.1461 233.599 cv
71.1581 233.599 71.9631 233.254 72.5611 232.564 cv
73.1591 231.874 73.4581 230.908 73.4581 229.689 cv
73.4581 228.493 73.1591 227.527 72.5611 226.837 cv
71.9631 226.147 71.1581 225.779 70.1461 225.779 cv
74.6541 218.672 mo
74.6541 220.742 li
74.0791 220.466 73.5041 220.259 72.9291 220.121 cv
72.3311 219.983 71.7561 219.914 71.2041 219.914 cv
69.6861 219.914 68.5361 220.42 67.7541 221.432 cv
66.9721 222.444 66.5121 223.985 66.4201 226.009 cv
66.8571 225.365 67.4091 224.859 68.0761 224.514 cv
68.7431 224.169 69.4791 223.985 70.2841 223.985 cv
71.9631 223.985 73.2971 224.514 74.2631 225.526 cv
75.2291 226.538 75.7351 227.941 75.7351 229.689 cv
75.7351 231.414 75.2061 232.794 74.1941 233.829 cv
73.1821 234.864 71.8251 235.37 70.1461 235.37 cv
68.2141 235.37 66.7191 234.634 65.7071 233.162 cv
64.6721 231.69 64.1661 229.528 64.1661 226.699 cv
64.1661 224.054 64.7871 221.938 66.0521 220.374 cv
67.2941 218.81 68.9961 218.005 71.1121 218.005 cv
71.6641 218.005 72.2391 218.074 72.8371 218.166 cv
73.4121 218.281 74.0101 218.442 74.6541 218.672 cv
f
84.208 114.494 mo
80.708 114.494 li
f
84.208 114.494 mo
80.708 114.494 li
@
47.9282 107.957 mo
46.7552 107.957 45.8812 108.532 45.2832 109.682 cv
44.6852 110.832 44.4092 112.557 44.4092 114.857 cv
44.4092 117.157 44.6852 118.882 45.2832 120.032 cv
45.8812 121.182 46.7552 121.757 47.9282 121.757 cv
49.1012 121.757 49.9752 121.182 50.5732 120.032 cv
51.1482 118.882 51.4472 117.157 51.4472 114.857 cv
51.4472 112.557 51.1482 110.832 50.5732 109.682 cv
49.9752 108.532 49.1012 107.957 47.9282 107.957 cv
47.9282 106.163 mo
49.7912 106.163 51.2172 106.922 52.2292 108.394 cv
53.2182 109.889 53.7242 112.051 53.7242 114.857 cv
53.7242 117.686 53.2182 119.848 52.2292 121.32 cv
51.2172 122.792 49.7912 123.528 47.9282 123.528 cv
46.0422 123.528 44.5932 122.792 43.6042 121.32 cv
42.6152 119.848 42.1322 117.686 42.1322 114.857 cv
42.1322 112.051 42.6152 109.889 43.6042 108.394 cv
44.5932 106.922 46.0422 106.163 47.9282 106.163 cv
f
57.7032 120.377 mo
60.0723 120.377 li
60.0723 123.229 li
57.7032 123.229 li
57.7032 120.377 li
f
69.8701 115.271 mo
68.7891 115.271 67.9381 115.57 67.3171 116.145 cv
66.6961 116.72 66.3971 117.502 66.3971 118.514 cv
66.3971 119.526 66.6961 120.331 67.3171 120.906 cv
67.9381 121.481 68.7891 121.757 69.8701 121.757 cv
70.9281 121.757 71.7791 121.481 72.4001 120.883 cv
73.0211 120.308 73.3431 119.526 73.3431 118.514 cv
73.3431 117.502 73.0211 116.72 72.4231 116.145 cv
71.8021 115.57 70.9511 115.271 69.8701 115.271 cv
67.5931 114.305 mo
66.6271 114.075 65.8681 113.615 65.3161 112.948 cv
64.7641 112.281 64.5111 111.476 64.5111 110.51 cv
64.5111 109.176 64.9711 108.118 65.9371 107.336 cv
66.8801 106.554 68.1911 106.163 69.8701 106.163 cv
71.5261 106.163 72.8371 106.554 73.8031 107.336 cv
74.7461 108.118 75.2291 109.176 75.2291 110.51 cv
75.2291 111.476 74.9531 112.281 74.4011 112.948 cv
73.8491 113.615 73.1131 114.075 72.1471 114.305 cv
73.2281 114.558 74.0791 115.064 74.7001 115.8 cv
75.2981 116.536 75.6201 117.456 75.6201 118.514 cv
75.6201 120.147 75.1141 121.389 74.1251 122.24 cv
73.1131 123.114 71.7101 123.528 69.8701 123.528 cv
68.0071 123.528 66.5811 123.114 65.5921 122.24 cv
64.6031 121.389 64.1201 120.147 64.1201 118.514 cv
64.1201 117.456 64.4191 116.536 65.0401 115.8 cv
65.6381 115.064 66.4891 114.558 67.5931 114.305 cv
66.7651 110.717 mo
66.7651 111.591 67.0181 112.281 67.5701 112.764 cv
68.1221 113.247 68.8811 113.477 69.8701 113.477 cv
70.8361 113.477 71.5951 113.247 72.1471 112.764 cv
72.6991 112.281 72.9751 111.591 72.9751 110.717 cv
72.9751 109.843 72.6991 109.176 72.1471 108.693 cv
71.5951 108.21 70.8361 107.957 69.8701 107.957 cv
68.8811 107.957 68.1221 108.21 67.5701 108.693 cv
67.0181 109.176 66.7651 109.843 66.7651 110.717 cv
f
11.4198 373.723 mo
22.3098 377.743 li
22.3098 369.703 li
11.4198 373.723 li
8.50983 375.403 mo
8.50983 372.043 li
30.3798 363.703 li
30.3798 366.793 li
24.7698 368.773 li
24.7698 378.643 li
30.3798 380.623 li
30.3798 383.743 li
8.50983 375.403 li
f
14.5998 348.823 mo
17.1198 348.823 li
16.6998 349.603 16.3998 350.353 16.1898 351.133 cv
15.9798 351.913 15.8598 352.663 15.8598 353.443 cv
15.8598 355.183 16.4298 356.563 17.5398 357.523 cv
18.6498 358.483 20.2098 358.963 22.1898 358.963 cv
24.1998 358.963 25.7598 358.483 26.8698 357.523 cv
27.9798 356.563 28.5198 355.183 28.5198 353.443 cv
28.5198 352.663 28.4298 351.913 28.2198 351.133 cv
28.0098 350.353 27.6798 349.603 27.2598 348.823 cv
29.7498 348.823 li
30.1098 349.603 30.3798 350.383 30.5298 351.163 cv
30.6798 351.973 30.7698 352.843 30.7698 353.743 cv
30.7698 356.203 30.0198 358.183 28.4598 359.623 cv
26.9298 361.093 24.8298 361.813 22.1898 361.813 cv
19.5198 361.813 17.4198 361.093 15.8898 359.623 cv
14.3598 358.153 13.5798 356.143 13.5798 353.563 cv
13.5798 352.723 13.6698 351.913 13.8498 351.133 cv
14.0298 350.353 14.2698 349.573 14.5998 348.823 cv
f
14.5998 332.323 mo
17.1198 332.323 li
16.6998 333.103 16.3998 333.853 16.1898 334.633 cv
15.9798 335.413 15.8598 336.163 15.8598 336.943 cv
15.8598 338.683 16.4298 340.063 17.5398 341.023 cv
18.6498 341.983 20.2098 342.463 22.1898 342.463 cv
24.1998 342.463 25.7598 341.983 26.8698 341.023 cv
27.9798 340.063 28.5198 338.683 28.5198 336.943 cv
28.5198 336.163 28.4298 335.413 28.2198 334.633 cv
28.0098 333.853 27.6798 333.103 27.2598 332.323 cv
29.7498 332.323 li
30.1098 333.103 30.3798 333.883 30.5298 334.663 cv
30.6798 335.473 30.7698 336.343 30.7698 337.243 cv
30.7698 339.703 30.0198 341.683 28.4598 343.123 cv
26.9298 344.593 24.8298 345.313 22.1898 345.313 cv
19.5198 345.313 17.4198 344.593 15.8898 343.123 cv
14.3598 341.653 13.5798 339.643 13.5798 337.063 cv
13.5798 336.223 13.6698 335.413 13.8498 334.633 cv
14.0298 333.853 14.2698 333.073 14.5998 332.323 cv
f
23.8998 327.913 mo
13.9698 327.913 li
13.9698 325.213 li
23.8098 325.213 li
25.3698 325.213 26.5098 324.913 27.2898 324.313 cv
28.0698 323.713 28.4598 322.813 28.4598 321.583 cv
28.4598 320.143 28.0098 318.973 27.0798 318.133 cv
26.1498 317.293 24.8898 316.873 23.2698 316.873 cv
13.9698 316.873 li
13.9698 314.173 li
30.3798 314.173 li
30.3798 316.873 li
27.8598 316.873 li
28.8798 317.533 29.5998 318.313 30.0798 319.153 cv
30.5298 320.023 30.7698 321.013 30.7698 322.153 cv
30.7698 324.043 30.1998 325.483 29.0298 326.443 cv
27.8898 327.433 26.1798 327.913 23.8998 327.913 cv
13.5798 321.133 mo
13.5798 321.133 li
f
16.4898 299.113 mo
16.3098 299.413 16.1898 299.743 16.0998 300.103 cv
16.0398 300.463 15.9798 300.853 15.9798 301.273 cv
15.9798 302.803 16.4898 303.973 17.4798 304.783 cv
18.4698 305.623 19.8798 306.013 21.7398 306.013 cv
30.3798 306.013 li
30.3798 308.713 li
13.9698 308.713 li
13.9698 306.013 li
16.5198 306.013 li
15.5298 305.473 14.7798 304.723 14.2998 303.823 cv
13.8198 302.923 13.5798 301.813 13.5798 300.493 cv
13.5798 300.313 13.6098 300.103 13.6098 299.863 cv
13.6398 299.653 13.6698 299.413 13.7298 299.113 cv
16.4898 299.113 li
f
22.1298 288.823 mo
22.1298 291.013 22.3998 292.513 22.8798 293.353 cv
23.3898 294.193 24.2298 294.613 25.4298 294.613 cv
26.3898 294.613 27.1698 294.313 27.7098 293.683 cv
28.2798 293.053 28.5498 292.183 28.5498 291.103 cv
28.5498 289.603 28.0398 288.403 26.9598 287.503 cv
25.9098 286.603 24.4998 286.153 22.7298 286.153 cv
22.1298 286.153 li
22.1298 288.823 li
21.0198 283.453 mo
30.3798 283.453 li
30.3798 286.153 li
27.8898 286.153 li
28.9098 286.783 29.6298 287.563 30.0798 288.463 cv
30.5298 289.363 30.7698 290.503 30.7698 291.823 cv
30.7698 293.503 30.3198 294.853 29.3898 295.843 cv
28.4598 296.833 27.1998 297.313 25.6098 297.313 cv
23.7798 297.313 22.3998 296.713 21.4398 295.453 cv
20.5098 294.223 20.0298 292.393 20.0298 289.933 cv
20.0298 286.153 li
19.7598 286.153 li
18.5298 286.153 17.5698 286.573 16.8798 287.383 cv
16.2198 288.193 15.8598 289.333 15.8598 290.803 cv
15.8598 291.763 15.9798 292.663 16.2198 293.563 cv
16.4598 294.463 16.7898 295.303 17.2098 296.113 cv
14.7198 296.113 li
14.3598 295.153 14.0598 294.193 13.8798 293.263 cv
13.6998 292.333 13.5798 291.433 13.5798 290.533 cv
13.5798 288.163 14.2098 286.393 15.4398 285.223 cv
16.6698 284.053 18.5298 283.453 21.0198 283.453 cv
f
14.5998 266.083 mo
17.1198 266.083 li
16.6998 266.863 16.3998 267.613 16.1898 268.393 cv
15.9798 269.173 15.8598 269.923 15.8598 270.703 cv
15.8598 272.443 16.4298 273.823 17.5398 274.783 cv
18.6498 275.743 20.2098 276.223 22.1898 276.223 cv
24.1998 276.223 25.7598 275.743 26.8698 274.783 cv
27.9798 273.823 28.5198 272.443 28.5198 270.703 cv
28.5198 269.923 28.4298 269.173 28.2198 268.393 cv
28.0098 267.613 27.6798 266.863 27.2598 266.083 cv
29.7498 266.083 li
30.1098 266.863 30.3798 267.643 30.5298 268.423 cv
30.6798 269.233 30.7698 270.103 30.7698 271.003 cv
30.7698 273.463 30.0198 275.443 28.4598 276.883 cv
26.9298 278.353 24.8298 279.073 22.1898 279.073 cv
19.5198 279.073 17.4198 278.353 15.8898 276.883 cv
14.3598 275.413 13.5798 273.403 13.5798 270.823 cv
13.5798 269.983 13.6698 269.173 13.8498 268.393 cv
14.0298 267.613 14.2698 266.833 14.5998 266.083 cv
f
31.8798 254.563 mo
33.7998 255.343 35.0898 256.093 35.6898 256.813 cv
36.2898 257.533 36.5898 258.493 36.5898 259.693 cv
36.5898 261.853 li
34.3398 261.853 li
34.3398 260.263 li
34.3398 259.543 34.1598 258.973 33.7998 258.553 cv
33.4398 258.133 32.6298 257.683 31.3098 257.173 cv
30.1098 256.693 li
13.9698 263.323 li
13.9698 260.473 li
26.8098 255.343 li
13.9698 250.213 li
13.9698 247.363 li
31.8798 254.563 li
f
20.1198 223.603 mo
20.3598 222.973 20.8098 222.343 21.4998 221.743 cv
22.2198 221.143 23.1798 220.543 24.4098 219.943 cv
30.3798 216.943 li
30.3798 220.123 li
24.7698 222.913 li
23.3298 223.633 22.3398 224.353 21.8598 225.013 cv
21.3798 225.703 21.1398 226.633 21.1398 227.803 cv
21.1398 231.013 li
30.3798 231.013 li
30.3798 233.983 li
8.50983 233.983 li
8.50983 227.293 li
8.50983 224.803 9.04984 222.943 10.0698 221.713 cv
11.1198 220.483 12.7098 219.853 14.8098 219.853 cv
16.1898 219.853 17.3598 220.183 18.2598 220.813 cv
19.1598 221.473 19.7898 222.403 20.1198 223.603 cv
10.9398 231.013 mo
18.7098 231.013 li
18.7098 227.293 li
18.7098 225.883 18.3798 224.803 17.7198 224.083 cv
17.0598 223.363 16.0998 222.973 14.8098 222.973 cv
13.5498 222.973 12.5898 223.363 11.9298 224.083 cv
11.2698 224.803 10.9398 225.883 10.9398 227.293 cv
10.9398 231.013 li
f
22.1298 205.783 mo
22.1298 207.973 22.3998 209.473 22.8798 210.313 cv
23.3898 211.153 24.2298 211.573 25.4298 211.573 cv
26.3898 211.573 27.1698 211.273 27.7098 210.643 cv
28.2798 210.013 28.5498 209.143 28.5498 208.063 cv
28.5498 206.563 28.0398 205.363 26.9598 204.463 cv
25.9098 203.563 24.4998 203.113 22.7298 203.113 cv
22.1298 203.113 li
22.1298 205.783 li
21.0198 200.413 mo
30.3798 200.413 li
30.3798 203.113 li
27.8898 203.113 li
28.9098 203.743 29.6298 204.523 30.0798 205.423 cv
30.5298 206.323 30.7698 207.463 30.7698 208.783 cv
30.7698 210.463 30.3198 211.813 29.3898 212.803 cv
28.4598 213.793 27.1998 214.273 25.6098 214.273 cv
23.7798 214.273 22.3998 213.673 21.4398 212.413 cv
20.5098 211.183 20.0298 209.353 20.0298 206.893 cv
20.0298 203.113 li
19.7598 203.113 li
18.5298 203.113 17.5698 203.533 16.8798 204.343 cv
16.2198 205.153 15.8598 206.293 15.8598 207.763 cv
15.8598 208.723 15.9798 209.623 16.2198 210.523 cv
16.4598 211.423 16.7898 212.263 17.2098 213.073 cv
14.7198 213.073 li
14.3598 212.113 14.0598 211.153 13.8798 210.223 cv
13.6998 209.293 13.5798 208.393 13.5798 207.493 cv
13.5798 205.123 14.2098 203.353 15.4398 202.183 cv
16.6698 201.013 18.5298 200.413 21.0198 200.413 cv
f
9.31984 192.192 mo
13.9698 192.192 li
13.9698 186.642 li
16.0698 186.642 li
16.0698 192.192 li
24.9798 192.192 li
26.3298 192.192 27.1998 192.012 27.5598 191.652 cv
27.9498 191.292 28.1298 190.542 28.1298 189.402 cv
28.1298 186.642 li
30.3798 186.642 li
30.3798 189.402 li
30.3798 191.502 29.9898 192.942 29.2098 193.722 cv
28.4298 194.502 27.0198 194.892 24.9798 194.892 cv
16.0698 194.892 li
16.0698 196.872 li
13.9698 196.872 li
13.9698 194.892 li
9.31984 194.892 li
9.31984 192.192 li
f
21.4998 169.063 mo
22.8198 169.063 li
22.8198 181.453 li
24.6798 181.333 26.1198 180.793 27.0798 179.773 cv
28.0398 178.783 28.5198 177.403 28.5198 175.603 cv
28.5198 174.583 28.3998 173.563 28.1598 172.603 cv
27.9198 171.643 27.5298 170.653 26.9898 169.693 cv
29.5398 169.693 li
29.9598 170.653 30.2898 171.643 30.4698 172.663 cv
30.6498 173.683 30.7698 174.733 30.7698 175.753 cv
30.7698 178.393 30.0198 180.463 28.5198 181.993 cv
27.0198 183.523 24.9498 184.273 22.3398 184.273 cv
19.6698 184.273 17.5398 183.553 15.9498 182.113 cv
14.3898 180.673 13.5798 178.693 13.5798 176.233 cv
13.5798 174.013 14.2998 172.273 15.7098 170.983 cv
17.1498 169.723 19.0698 169.063 21.4998 169.063 cv
20.7198 171.763 mo
19.2498 171.793 18.0798 172.213 17.1798 172.993 cv
16.3098 173.803 15.8598 174.883 15.8598 176.203 cv
15.8598 177.703 16.3098 178.903 17.1498 179.803 cv
17.9898 180.703 19.1898 181.243 20.7198 181.363 cv
20.7198 171.763 li
f
1.5 lw
2 lc
132.906 501.84 mo
146.068 496.621 li
159.229 496.621 li
172.391 496.621 li
185.553 496.621 li
198.715 496.621 li
211.876 496.621 li
225.038 496.621 li
238.199 496.621 li
251.361 496.621 li
264.523 493.265 li
277.685 489.165 li
290.846 478.726 li
304.008 457.662 li
317.17 435.853 li
330.331 395.963 li
343.493 365.02 li
356.655 348.617 li
369.816 320.283 li
382.978 278.529 li
396.14 250.941 li
409.301 227.268 li
422.463 206.205 li
435.625 186.446 li
448.786 160.722 li
461.948 151.402 li
475.11 139.845 li
488.271 127.543 li
501.433 121.764 li
514.595 118.409 li
527.756 111.698 li
540.918 108.902 li
554.08 93.2445 li
567.241 89.3301 li
580.403 87.8389 li
593.565 80.5691 li
606.726 74.4178 li
619.888 72.7402 li
633.05 68.4529 li
646.211 63.7928 li
659.373 64.3521 li
672.535 63.6064 li
685.696 63.0472 li
698.858 59.1328 li
712.02 57.0823 li
725.181 57.0823 li
738.343 54.2863 li
751.505 52.0494 li
764.666 51.3038 li
777.828 52.0494 li
790.99 50.5582 li
804.151 44.2205 li
817.313 43.4749 li
830.475 43.4749 li
843.636 43.6613 li
856.798 43.2885 li
869.96 42.9157 li
883.121 42.5429 li
896.283 42.3565 li
909.445 42.3565 li
922.606 42.1701 li
935.768 41.9837 li
948.93 41.7973 li
962.091 41.6109 li
975.253 41.2381 li
988.415 41.2381 li
1001.58 41.2381 li
1014.74 41.2381 li
1027.9 41.2381 li
1041.06 41.4245 li
1054.22 41.2381 li
1067.38 40.6789 li
1080.55 39.7468 li
1093.71 39.374 li
1106.87 39.7468 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
132.906 512.092 mo
146.068 519.921 li
159.229 519.921 li
172.391 519.921 li
185.553 519.921 li
198.715 519.921 li
211.876 519.921 li
225.038 519.921 li
238.199 519.921 li
251.361 519.921 li
264.523 517.684 li
277.685 511.253 li
290.846 500.908 li
304.008 475.464 li
317.17 451.977 li
330.331 413.112 li
343.493 375.925 li
356.655 355.793 li
369.816 320.563 li
382.978 282.816 li
396.14 256.813 li
409.301 221.583 li
422.463 205.925 li
435.625 181.879 li
448.786 157.833 li
461.948 151.682 li
475.11 140.498 li
488.271 128.195 li
501.433 127.077 li
514.595 121.764 li
527.756 115.054 li
540.918 111.698 li
554.08 99.6754 li
567.241 93.5241 li
580.403 89.3301 li
593.565 83.1788 li
606.726 82.34 li
619.888 81.5012 li
633.05 77.0275 li
646.211 70.8762 li
659.373 73.113 li
672.535 73.113 li
685.696 70.5966 li
698.858 71.1558 li
712.02 65.8433 li
725.181 68.9189 li
738.343 66.4025 li
751.505 59.1328 li
764.666 60.5308 li
777.828 60.5308 li
790.99 56.8959 li
804.151 58.2939 li
817.313 58.0143 li
830.475 58.2939 li
843.636 57.7347 li
856.798 57.7347 li
869.96 57.7347 li
883.121 57.7347 li
896.283 56.8959 li
909.445 56.3367 li
922.606 55.7775 li
935.768 56.0571 li
948.93 56.0571 li
962.091 56.0571 li
975.253 56.3367 li
988.415 56.6163 li
1001.58 56.8959 li
1014.74 56.6163 li
1027.9 56.3367 li
1041.06 56.0571 li
1054.22 55.7775 li
1067.38 55.2183 li
1080.55 54.0999 li
1093.71 53.5406 li
1106.87 54.3795 li
@
gsave
129.406 515.592 mo
136.406 515.592 li
136.406 508.592 li
129.406 508.592 li
129.406 515.592 li
clp
129.906 515.092 mo
135.906 509.092 li
129.906 509.092 mo
135.906 515.092 li
f
1 lw
0 lc
129.906 515.092 mo
135.906 509.092 li
129.906 509.092 mo
135.906 515.092 li
@
grestore
gsave
142.568 523.421 mo
149.568 523.421 li
149.568 516.421 li
142.568 516.421 li
142.568 523.421 li
clp
143.068 522.921 mo
149.068 516.921 li
143.068 516.921 mo
149.068 522.921 li
f
1 lw
0 lc
143.068 522.921 mo
149.068 516.921 li
143.068 516.921 mo
149.068 522.921 li
@
grestore
gsave
155.73 523.421 mo
162.729 523.421 li
162.729 516.421 li
155.73 516.421 li
155.73 523.421 li
clp
156.229 522.921 mo
162.229 516.921 li
156.229 516.921 mo
162.229 522.921 li
f
1 lw
0 lc
156.229 522.921 mo
162.229 516.921 li
156.229 516.921 mo
162.229 522.921 li
@
grestore
gsave
168.891 523.421 mo
175.891 523.421 li
175.891 516.421 li
168.891 516.421 li
168.891 523.421 li
clp
169.391 522.921 mo
175.391 516.921 li
169.391 516.921 mo
175.391 522.921 li
f
1 lw
0 lc
169.391 522.921 mo
175.391 516.921 li
169.391 516.921 mo
175.391 522.921 li
@
grestore
gsave
182.053 523.421 mo
189.053 523.421 li
189.053 516.421 li
182.053 516.421 li
182.053 523.421 li
clp
182.553 522.921 mo
188.553 516.921 li
182.553 516.921 mo
188.553 522.921 li
f
1 lw
0 lc
182.553 522.921 mo
188.553 516.921 li
182.553 516.921 mo
188.553 522.921 li
@
grestore
gsave
195.215 523.421 mo
202.215 523.421 li
202.215 516.421 li
195.215 516.421 li
195.215 523.421 li
clp
195.715 522.921 mo
201.715 516.921 li
195.715 516.921 mo
201.715 522.921 li
f
1 lw
0 lc
195.715 522.921 mo
201.715 516.921 li
195.715 516.921 mo
201.715 522.921 li
@
grestore
gsave
208.376 523.421 mo
215.376 523.421 li
215.376 516.421 li
208.376 516.421 li
208.376 523.421 li
clp
208.876 522.921 mo
214.876 516.921 li
208.876 516.921 mo
214.876 522.921 li
f
1 lw
0 lc
208.876 522.921 mo
214.876 516.921 li
208.876 516.921 mo
214.876 522.921 li
@
grestore
gsave
221.538 523.421 mo
228.538 523.421 li
228.538 516.421 li
221.538 516.421 li
221.538 523.421 li
clp
222.038 522.921 mo
228.038 516.921 li
222.038 516.921 mo
228.038 522.921 li
f
1 lw
0 lc
222.038 522.921 mo
228.038 516.921 li
222.038 516.921 mo
228.038 522.921 li
@
grestore
gsave
234.699 523.421 mo
241.7 523.421 li
241.7 516.421 li
234.699 516.421 li
234.699 523.421 li
clp
235.2 522.921 mo
241.2 516.921 li
235.2 516.921 mo
241.2 522.921 li
f
1 lw
0 lc
235.2 522.921 mo
241.2 516.921 li
235.2 516.921 mo
241.2 522.921 li
@
grestore
gsave
247.861 523.421 mo
254.861 523.421 li
254.861 516.421 li
247.861 516.421 li
247.861 523.421 li
clp
248.361 522.921 mo
254.361 516.921 li
248.361 516.921 mo
254.361 522.921 li
f
1 lw
0 lc
248.361 522.921 mo
254.361 516.921 li
248.361 516.921 mo
254.361 522.921 li
@
grestore
gsave
261.023 521.184 mo
268.023 521.184 li
268.023 514.184 li
261.023 514.184 li
261.023 521.184 li
clp
261.523 520.684 mo
267.523 514.684 li
261.523 514.684 mo
267.523 520.684 li
f
1 lw
0 lc
261.523 520.684 mo
267.523 514.684 li
261.523 514.684 mo
267.523 520.684 li
@
grestore
gsave
274.185 514.753 mo
281.185 514.753 li
281.185 507.753 li
274.185 507.753 li
274.185 514.753 li
clp
274.685 514.253 mo
280.685 508.253 li
274.685 508.253 mo
280.685 514.253 li
f
1 lw
0 lc
274.685 514.253 mo
280.685 508.253 li
274.685 508.253 mo
280.685 514.253 li
@
grestore
gsave
287.346 504.408 mo
294.346 504.408 li
294.346 497.408 li
287.346 497.408 li
287.346 504.408 li
clp
287.846 503.908 mo
293.846 497.908 li
287.846 497.908 mo
293.846 503.908 li
f
1 lw
0 lc
287.846 503.908 mo
293.846 497.908 li
287.846 497.908 mo
293.846 503.908 li
@
grestore
gsave
300.508 478.964 mo
307.508 478.964 li
307.508 471.964 li
300.508 471.964 li
300.508 478.964 li
clp
301.008 478.464 mo
307.008 472.464 li
301.008 472.464 mo
307.008 478.464 li
f
1 lw
0 lc
301.008 478.464 mo
307.008 472.464 li
301.008 472.464 mo
307.008 478.464 li
@
grestore
gsave
313.67 455.477 mo
320.67 455.477 li
320.67 448.477 li
313.67 448.477 li
313.67 455.477 li
clp
314.17 454.977 mo
320.17 448.977 li
314.17 448.977 mo
320.17 454.977 li
f
1 lw
0 lc
314.17 454.977 mo
320.17 448.977 li
314.17 448.977 mo
320.17 454.977 li
@
grestore
gsave
326.831 416.612 mo
333.831 416.612 li
333.831 409.612 li
326.831 409.612 li
326.831 416.612 li
clp
327.331 416.112 mo
333.331 410.112 li
327.331 410.112 mo
333.331 416.112 li
f
1 lw
0 lc
327.331 416.112 mo
333.331 410.112 li
327.331 410.112 mo
333.331 416.112 li
@
grestore
gsave
339.993 379.425 mo
346.993 379.425 li
346.993 372.425 li
339.993 372.425 li
339.993 379.425 li
clp
340.493 378.925 mo
346.493 372.925 li
340.493 372.925 mo
346.493 378.925 li
f
1 lw
0 lc
340.493 378.925 mo
346.493 372.925 li
340.493 372.925 mo
346.493 378.925 li
@
grestore
gsave
353.155 359.293 mo
360.155 359.293 li
360.155 352.293 li
353.155 352.293 li
353.155 359.293 li
clp
353.655 358.793 mo
359.655 352.793 li
353.655 352.793 mo
359.655 358.793 li
f
1 lw
0 lc
353.655 358.793 mo
359.655 352.793 li
353.655 352.793 mo
359.655 358.793 li
@
grestore
gsave
366.317 324.063 mo
373.316 324.063 li
373.316 317.063 li
366.317 317.063 li
366.317 324.063 li
clp
366.816 323.563 mo
372.816 317.563 li
366.816 317.563 mo
372.816 323.563 li
f
1 lw
0 lc
366.816 323.563 mo
372.816 317.563 li
366.816 317.563 mo
372.816 323.563 li
@
grestore
gsave
379.478 286.316 mo
386.478 286.316 li
386.478 279.316 li
379.478 279.316 li
379.478 286.316 li
clp
379.978 285.816 mo
385.978 279.816 li
379.978 279.816 mo
385.978 285.816 li
f
1 lw
0 lc
379.978 285.816 mo
385.978 279.816 li
379.978 279.816 mo
385.978 285.816 li
@
grestore
gsave
392.64 260.313 mo
399.64 260.313 li
399.64 253.313 li
392.64 253.313 li
392.64 260.313 li
clp
393.14 259.813 mo
399.14 253.813 li
393.14 253.813 mo
399.14 259.813 li
f
1 lw
0 lc
393.14 259.813 mo
399.14 253.813 li
393.14 253.813 mo
399.14 259.813 li
@
grestore
gsave
405.801 225.083 mo
412.801 225.083 li
412.801 218.083 li
405.801 218.083 li
405.801 225.083 li
clp
406.301 224.583 mo
412.301 218.583 li
406.301 218.583 mo
412.301 224.583 li
f
1 lw
0 lc
406.301 224.583 mo
412.301 218.583 li
406.301 218.583 mo
412.301 224.583 li
@
grestore
gsave
418.963 209.425 mo
425.963 209.425 li
425.963 202.425 li
418.963 202.425 li
418.963 209.425 li
clp
419.463 208.925 mo
425.463 202.925 li
419.463 202.925 mo
425.463 208.925 li
f
1 lw
0 lc
419.463 208.925 mo
425.463 202.925 li
419.463 202.925 mo
425.463 208.925 li
@
grestore
gsave
432.125 185.379 mo
439.125 185.379 li
439.125 178.379 li
432.125 178.379 li
432.125 185.379 li
clp
432.625 184.879 mo
438.625 178.879 li
432.625 178.879 mo
438.625 184.879 li
f
1 lw
0 lc
432.625 184.879 mo
438.625 178.879 li
432.625 178.879 mo
438.625 184.879 li
@
grestore
gsave
445.286 161.333 mo
452.286 161.333 li
452.286 154.333 li
445.286 154.333 li
445.286 161.333 li
clp
445.786 160.833 mo
451.786 154.833 li
445.786 154.833 mo
451.786 160.833 li
f
1 lw
0 lc
445.786 160.833 mo
451.786 154.833 li
445.786 154.833 mo
451.786 160.833 li
@
grestore
gsave
458.448 155.182 mo
465.448 155.182 li
465.448 148.182 li
458.448 148.182 li
458.448 155.182 li
clp
458.948 154.682 mo
464.948 148.682 li
458.948 148.682 mo
464.948 154.682 li
f
1 lw
0 lc
458.948 154.682 mo
464.948 148.682 li
458.948 148.682 mo
464.948 154.682 li
@
grestore
gsave
471.61 143.998 mo
478.61 143.998 li
478.61 136.998 li
471.61 136.998 li
471.61 143.998 li
clp
472.11 143.498 mo
478.11 137.498 li
472.11 137.498 mo
478.11 143.498 li
f
1 lw
0 lc
472.11 143.498 mo
478.11 137.498 li
472.11 137.498 mo
478.11 143.498 li
@
grestore
gsave
484.772 131.695 mo
491.772 131.695 li
491.772 124.695 li
484.772 124.695 li
484.772 131.695 li
clp
485.271 131.195 mo
491.271 125.195 li
485.271 125.195 mo
491.271 131.195 li
f
1 lw
0 lc
485.271 131.195 mo
491.271 125.195 li
485.271 125.195 mo
491.271 131.195 li
@
grestore
gsave
497.933 130.577 mo
504.933 130.577 li
504.933 123.577 li
497.933 123.577 li
497.933 130.577 li
clp
498.433 130.077 mo
504.433 124.077 li
498.433 124.077 mo
504.433 130.077 li
f
1 lw
0 lc
498.433 130.077 mo
504.433 124.077 li
498.433 124.077 mo
504.433 130.077 li
@
grestore
gsave
511.095 125.264 mo
518.095 125.264 li
518.095 118.264 li
511.095 118.264 li
511.095 125.264 li
clp
511.595 124.764 mo
517.595 118.764 li
511.595 118.764 mo
517.595 124.764 li
f
1 lw
0 lc
511.595 124.764 mo
517.595 118.764 li
511.595 118.764 mo
517.595 124.764 li
@
grestore
gsave
524.256 118.554 mo
531.257 118.554 li
531.257 111.554 li
524.256 111.554 li
524.256 118.554 li
clp
524.757 118.054 mo
530.757 112.054 li
524.757 112.054 mo
530.757 118.054 li
f
1 lw
0 lc
524.757 118.054 mo
530.757 112.054 li
524.757 112.054 mo
530.757 118.054 li
@
grestore
gsave
537.418 115.199 mo
544.418 115.199 li
544.418 108.198 li
537.418 108.198 li
537.418 115.199 li
clp
537.918 114.698 mo
543.918 108.698 li
537.918 108.698 mo
543.918 114.698 li
f
1 lw
0 lc
537.918 114.698 mo
543.918 108.698 li
537.918 108.698 mo
543.918 114.698 li
@
grestore
gsave
550.58 103.175 mo
557.58 103.175 li
557.58 96.1755 li
550.58 96.1755 li
550.58 103.175 li
clp
551.08 102.675 mo
557.08 96.6754 li
551.08 96.6754 mo
557.08 102.675 li
f
1 lw
0 lc
551.08 102.675 mo
557.08 96.6754 li
551.08 96.6754 mo
557.08 102.675 li
@
grestore
gsave
563.742 97.024 mo
570.741 97.024 li
570.741 90.0241 li
563.742 90.0241 li
563.742 97.024 li
clp
564.242 96.5241 mo
570.242 90.5241 li
564.242 90.5241 mo
570.242 96.5241 li
f
1 lw
0 lc
564.242 96.5241 mo
570.242 90.5241 li
564.242 90.5241 mo
570.242 96.5241 li
@
grestore
gsave
576.903 92.83 mo
583.903 92.83 li
583.903 85.8301 li
576.903 85.8301 li
576.903 92.83 li
clp
577.403 92.33 mo
583.403 86.33 li
577.403 86.33 mo
583.403 92.33 li
f
1 lw
0 lc
577.403 92.33 mo
583.403 86.33 li
577.403 86.33 mo
583.403 92.33 li
@
grestore
gsave
590.065 86.6786 mo
597.065 86.6786 li
597.065 79.6787 li
590.065 79.6787 li
590.065 86.6786 li
clp
590.565 86.1787 mo
596.565 80.1787 li
590.565 80.1787 mo
596.565 86.1787 li
f
1 lw
0 lc
590.565 86.1787 mo
596.565 80.1787 li
590.565 80.1787 mo
596.565 86.1787 li
@
grestore
gsave
603.227 85.8397 mo
610.227 85.8397 li
610.227 78.8398 li
603.227 78.8398 li
603.227 85.8397 li
clp
603.727 85.3399 mo
609.727 79.3399 li
603.727 79.3399 mo
609.727 85.3399 li
f
1 lw
0 lc
603.727 85.3399 mo
609.727 79.3399 li
603.727 79.3399 mo
609.727 85.3399 li
@
grestore
gsave
616.388 85.0012 mo
623.388 85.0012 li
623.388 78.0009 li
616.388 78.0009 li
616.388 85.0012 li
clp
616.888 84.5011 mo
622.888 78.5011 li
616.888 78.5011 mo
622.888 84.5011 li
f
1 lw
0 lc
616.888 84.5011 mo
622.888 78.5011 li
616.888 78.5011 mo
622.888 84.5011 li
@
grestore
gsave
629.55 80.5272 mo
636.55 80.5272 li
636.55 73.5273 li
629.55 73.5273 li
629.55 80.5272 li
clp
630.05 80.0274 mo
636.05 74.0274 li
630.05 74.0274 mo
636.05 80.0274 li
f
1 lw
0 lc
630.05 80.0274 mo
636.05 74.0274 li
630.05 74.0274 mo
636.05 80.0274 li
@
grestore
gsave
642.712 74.3762 mo
649.712 74.3762 li
649.712 67.3763 li
642.712 67.3763 li
642.712 74.3762 li
clp
643.212 73.8761 mo
649.212 67.8761 li
643.212 67.8761 mo
649.212 73.8761 li
f
1 lw
0 lc
643.212 73.8761 mo
649.212 67.8761 li
643.212 67.8761 mo
649.212 73.8761 li
@
grestore
gsave
655.874 76.6128 mo
662.873 76.6128 li
662.873 69.6129 li
655.874 69.6129 li
655.874 76.6128 li
clp
656.373 76.1129 mo
662.373 70.1129 li
656.373 70.1129 mo
662.373 76.1129 li
f
1 lw
0 lc
656.373 76.1129 mo
662.373 70.1129 li
656.373 70.1129 mo
662.373 76.1129 li
@
grestore
gsave
669.035 76.6128 mo
676.035 76.6128 li
676.035 69.6129 li
669.035 69.6129 li
669.035 76.6128 li
clp
669.535 76.1129 mo
675.535 70.1129 li
669.535 70.1129 mo
675.535 76.1129 li
f
1 lw
0 lc
669.535 76.1129 mo
675.535 70.1129 li
669.535 70.1129 mo
675.535 76.1129 li
@
grestore
gsave
682.197 74.0966 mo
689.197 74.0966 li
689.197 67.0966 li
682.197 67.0966 li
682.197 74.0966 li
clp
682.697 73.5965 mo
688.697 67.5965 li
682.697 67.5965 mo
688.697 73.5965 li
f
1 lw
0 lc
682.697 73.5965 mo
688.697 67.5965 li
682.697 67.5965 mo
688.697 73.5965 li
@
grestore
gsave
695.358 74.6558 mo
702.358 74.6558 li
702.358 67.6555 li
695.358 67.6555 li
695.358 74.6558 li
clp
695.858 74.1557 mo
701.858 68.1557 li
695.858 68.1557 mo
701.858 74.1557 li
f
1 lw
0 lc
695.858 74.1557 mo
701.858 68.1557 li
695.858 68.1557 mo
701.858 74.1557 li
@
grestore
gsave
708.52 69.3433 mo
715.52 69.3433 li
715.52 62.3434 li
708.52 62.3434 li
708.52 69.3433 li
clp
709.02 68.8432 mo
715.02 62.8432 li
709.02 62.8432 mo
715.02 68.8432 li
f
1 lw
0 lc
709.02 68.8432 mo
715.02 62.8432 li
709.02 62.8432 mo
715.02 68.8432 li
@
grestore
gsave
721.682 72.4188 mo
728.682 72.4188 li
728.682 65.4189 li
721.682 65.4189 li
721.682 72.4188 li
clp
722.182 71.9188 mo
728.182 65.9188 li
722.182 65.9188 mo
728.182 71.9188 li
f
1 lw
0 lc
722.182 71.9188 mo
728.182 65.9188 li
722.182 65.9188 mo
728.182 71.9188 li
@
grestore
gsave
734.843 69.9026 mo
741.843 69.9026 li
741.843 62.9023 li
734.843 62.9023 li
734.843 69.9026 li
clp
735.343 69.4024 mo
741.343 63.4024 li
735.343 63.4024 mo
741.343 69.4024 li
f
1 lw
0 lc
735.343 69.4024 mo
741.343 63.4024 li
735.343 63.4024 mo
741.343 69.4024 li
@
grestore
gsave
748.005 62.6327 mo
755.005 62.6327 li
755.005 55.6327 li
748.005 55.6327 li
748.005 62.6327 li
clp
748.505 62.1327 mo
754.505 56.1327 li
748.505 56.1327 mo
754.505 62.1327 li
f
1 lw
0 lc
748.505 62.1327 mo
754.505 56.1327 li
748.505 56.1327 mo
754.505 62.1327 li
@
grestore
gsave
761.167 64.0308 mo
768.167 64.0308 li
768.167 57.0309 li
761.167 57.0309 li
761.167 64.0308 li
clp
761.667 63.5307 mo
767.667 57.5307 li
761.667 57.5307 mo
767.667 63.5307 li
f
1 lw
0 lc
761.667 63.5307 mo
767.667 57.5307 li
761.667 57.5307 mo
767.667 63.5307 li
@
grestore
gsave
774.329 64.0308 mo
781.328 64.0308 li
781.328 57.0309 li
774.329 57.0309 li
774.329 64.0308 li
clp
774.828 63.5307 mo
780.828 57.5307 li
774.828 57.5307 mo
780.828 63.5307 li
f
1 lw
0 lc
774.828 63.5307 mo
780.828 57.5307 li
774.828 57.5307 mo
780.828 63.5307 li
@
grestore
gsave
787.49 60.3957 mo
794.49 60.3957 li
794.49 53.3957 li
787.49 53.3957 li
787.49 60.3957 li
clp
787.99 59.8958 mo
793.99 53.8958 li
787.99 53.8958 mo
793.99 59.8958 li
f
1 lw
0 lc
787.99 59.8958 mo
793.99 53.8958 li
787.99 53.8958 mo
793.99 59.8958 li
@
grestore
gsave
800.652 61.7938 mo
807.652 61.7938 li
807.652 54.7939 li
800.652 54.7939 li
800.652 61.7938 li
clp
801.152 61.2938 mo
807.152 55.2938 li
801.152 55.2938 mo
807.152 61.2938 li
f
1 lw
0 lc
801.152 61.2938 mo
807.152 55.2938 li
801.152 55.2938 mo
807.152 61.2938 li
@
grestore
gsave
813.814 61.5142 mo
820.814 61.5142 li
820.814 54.5142 li
813.814 54.5142 li
813.814 61.5142 li
clp
814.314 61.0142 mo
820.314 55.0142 li
814.314 55.0142 mo
820.314 61.0142 li
f
1 lw
0 lc
814.314 61.0142 mo
820.314 55.0142 li
814.314 55.0142 mo
820.314 61.0142 li
@
grestore
gsave
826.975 61.7938 mo
833.975 61.7938 li
833.975 54.7939 li
826.975 54.7939 li
826.975 61.7938 li
clp
827.475 61.2938 mo
833.475 55.2938 li
827.475 55.2938 mo
833.475 61.2938 li
f
1 lw
0 lc
827.475 61.2938 mo
833.475 55.2938 li
827.475 55.2938 mo
833.475 61.2938 li
@
grestore
gsave
840.137 61.2346 mo
847.137 61.2346 li
847.137 54.2346 li
840.137 54.2346 li
840.137 61.2346 li
clp
840.637 60.7346 mo
846.637 54.7346 li
840.637 54.7346 mo
846.637 60.7346 li
f
1 lw
0 lc
840.637 60.7346 mo
846.637 54.7346 li
840.637 54.7346 mo
846.637 60.7346 li
@
grestore
gsave
853.299 61.2346 mo
860.298 61.2346 li
860.298 54.2346 li
853.299 54.2346 li
853.299 61.2346 li
clp
853.799 60.7346 mo
859.799 54.7346 li
853.799 54.7346 mo
859.799 60.7346 li
f
1 lw
0 lc
853.799 60.7346 mo
859.799 54.7346 li
853.799 54.7346 mo
859.799 60.7346 li
@
grestore
gsave
866.46 61.2346 mo
873.46 61.2346 li
873.46 54.2346 li
866.46 54.2346 li
866.46 61.2346 li
clp
866.96 60.7346 mo
872.96 54.7346 li
866.96 54.7346 mo
872.96 60.7346 li
f
1 lw
0 lc
866.96 60.7346 mo
872.96 54.7346 li
866.96 54.7346 mo
872.96 60.7346 li
@
grestore
gsave
879.622 61.2346 mo
886.622 61.2346 li
886.622 54.2346 li
879.622 54.2346 li
879.622 61.2346 li
clp
880.122 60.7346 mo
886.122 54.7346 li
880.122 54.7346 mo
886.122 60.7346 li
f
1 lw
0 lc
880.122 60.7346 mo
886.122 54.7346 li
880.122 54.7346 mo
886.122 60.7346 li
@
grestore
gsave
892.784 60.3957 mo
899.784 60.3957 li
899.784 53.3957 li
892.784 53.3957 li
892.784 60.3957 li
clp
893.284 59.8958 mo
899.284 53.8958 li
893.284 53.8958 mo
899.284 59.8958 li
f
1 lw
0 lc
893.284 59.8958 mo
899.284 53.8958 li
893.284 53.8958 mo
899.284 59.8958 li
@
grestore
gsave
905.945 59.8364 mo
912.945 59.8364 li
912.945 52.8365 li
905.945 52.8365 li
905.945 59.8364 li
clp
906.445 59.3366 mo
912.445 53.3366 li
906.445 53.3366 mo
912.445 59.3366 li
f
1 lw
0 lc
906.445 59.3366 mo
912.445 53.3366 li
906.445 53.3366 mo
912.445 59.3366 li
@
grestore
gsave
919.107 59.2775 mo
926.107 59.2775 li
926.107 52.2772 li
919.107 52.2772 li
919.107 59.2775 li
clp
919.607 58.7774 mo
925.607 52.7774 li
919.607 52.7774 mo
925.607 58.7774 li
f
1 lw
0 lc
919.607 58.7774 mo
925.607 52.7774 li
919.607 52.7774 mo
925.607 58.7774 li
@
grestore
gsave
932.269 59.5572 mo
939.269 59.5572 li
939.269 52.5569 li
932.269 52.5569 li
932.269 59.5572 li
clp
932.769 59.057 mo
938.769 53.057 li
932.769 53.057 mo
938.769 59.057 li
f
1 lw
0 lc
932.769 59.057 mo
938.769 53.057 li
932.769 53.057 mo
938.769 59.057 li
@
grestore
gsave
945.43 59.5572 mo
952.43 59.5572 li
952.43 52.5569 li
945.43 52.5569 li
945.43 59.5572 li
clp
945.93 59.057 mo
951.93 53.057 li
945.93 53.057 mo
951.93 59.057 li
f
1 lw
0 lc
945.93 59.057 mo
951.93 53.057 li
945.93 53.057 mo
951.93 59.057 li
@
grestore
gsave
958.592 59.5572 mo
965.592 59.5572 li
965.592 52.5569 li
958.592 52.5569 li
958.592 59.5572 li
clp
959.092 59.057 mo
965.092 53.057 li
959.092 53.057 mo
965.092 59.057 li
f
1 lw
0 lc
959.092 59.057 mo
965.092 53.057 li
959.092 53.057 mo
965.092 59.057 li
@
grestore
gsave
971.754 59.8364 mo
978.754 59.8364 li
978.754 52.8365 li
971.754 52.8365 li
971.754 59.8364 li
clp
972.254 59.3366 mo
978.254 53.3366 li
972.254 53.3366 mo
978.254 59.3366 li
f
1 lw
0 lc
972.254 59.3366 mo
978.254 53.3366 li
972.254 53.3366 mo
978.254 59.3366 li
@
grestore
gsave
984.915 60.1161 mo
991.915 60.1161 li
991.915 53.1161 li
984.915 53.1161 li
984.915 60.1161 li
clp
985.415 59.6162 mo
991.415 53.6162 li
985.415 53.6162 mo
991.415 59.6162 li
f
1 lw
0 lc
985.415 59.6162 mo
991.415 53.6162 li
985.415 53.6162 mo
991.415 59.6162 li
@
grestore
gsave
998.077 60.3957 mo
1005.08 60.3957 li
1005.08 53.3957 li
998.077 53.3957 li
998.077 60.3957 li
clp
998.577 59.8958 mo
1004.58 53.8958 li
998.577 53.8958 mo
1004.58 59.8958 li
f
1 lw
0 lc
998.577 59.8958 mo
1004.58 53.8958 li
998.577 53.8958 mo
1004.58 59.8958 li
@
grestore
gsave
1011.24 60.1161 mo
1018.24 60.1161 li
1018.24 53.1161 li
1011.24 53.1161 li
1011.24 60.1161 li
clp
1011.74 59.6162 mo
1017.74 53.6162 li
1011.74 53.6162 mo
1017.74 59.6162 li
f
1 lw
0 lc
1011.74 59.6162 mo
1017.74 53.6162 li
1011.74 53.6162 mo
1017.74 59.6162 li
@
grestore
gsave
1024.4 59.8364 mo
1031.4 59.8364 li
1031.4 52.8365 li
1024.4 52.8365 li
1024.4 59.8364 li
clp
1024.9 59.3366 mo
1030.9 53.3366 li
1024.9 53.3366 mo
1030.9 59.3366 li
f
1 lw
0 lc
1024.9 59.3366 mo
1030.9 53.3366 li
1024.9 53.3366 mo
1030.9 59.3366 li
@
grestore
gsave
1037.56 59.5572 mo
1044.56 59.5572 li
1044.56 52.5569 li
1037.56 52.5569 li
1037.56 59.5572 li
clp
1038.06 59.057 mo
1044.06 53.057 li
1038.06 53.057 mo
1044.06 59.057 li
f
1 lw
0 lc
1038.06 59.057 mo
1044.06 53.057 li
1038.06 53.057 mo
1044.06 59.057 li
@
grestore
gsave
1050.72 59.2775 mo
1057.72 59.2775 li
1057.72 52.2772 li
1050.72 52.2772 li
1050.72 59.2775 li
clp
1051.22 58.7774 mo
1057.22 52.7774 li
1051.22 52.7774 mo
1057.22 58.7774 li
f
1 lw
0 lc
1051.22 58.7774 mo
1057.22 52.7774 li
1051.22 52.7774 mo
1057.22 58.7774 li
@
grestore
gsave
1063.88 58.7183 mo
1070.88 58.7183 li
1070.88 51.7183 li
1063.88 51.7183 li
1063.88 58.7183 li
clp
1064.38 58.2182 mo
1070.38 52.2182 li
1064.38 52.2182 mo
1070.38 58.2182 li
f
1 lw
0 lc
1064.38 58.2182 mo
1070.38 52.2182 li
1064.38 52.2182 mo
1070.38 58.2182 li
@
grestore
gsave
1077.05 57.5998 mo
1084.05 57.5998 li
1084.05 50.5998 li
1077.05 50.5998 li
1077.05 57.5998 li
clp
1077.55 57.0998 mo
1083.55 51.0998 li
1077.55 51.0998 mo
1083.55 57.0998 li
f
1 lw
0 lc
1077.55 57.0998 mo
1083.55 51.0998 li
1077.55 51.0998 mo
1083.55 57.0998 li
@
grestore
gsave
1090.21 57.0405 mo
1097.21 57.0405 li
1097.21 50.0406 li
1090.21 50.0406 li
1090.21 57.0405 li
clp
1090.71 56.5406 mo
1096.71 50.5406 li
1090.71 50.5406 mo
1096.71 56.5406 li
f
1 lw
0 lc
1090.71 56.5406 mo
1096.71 50.5406 li
1090.71 50.5406 mo
1096.71 56.5406 li
@
grestore
gsave
1103.37 57.8794 mo
1110.37 57.8794 li
1110.37 50.8795 li
1103.37 50.8795 li
1103.37 57.8794 li
clp
1103.87 57.3794 mo
1109.87 51.3794 li
1103.87 51.3794 mo
1109.87 57.3794 li
f
1 lw
0 lc
1103.87 57.3794 mo
1109.87 51.3794 li
1103.87 51.3794 mo
1109.87 57.3794 li
@
grestore
132.906 449.088 mo
146.068 370.426 li
159.229 355.886 li
172.391 330.722 li
185.553 293.628 li
198.715 261.194 li
211.876 226.336 li
225.038 216.271 li
238.199 209.933 li
251.361 200.613 li
264.523 189.056 li
277.685 173.584 li
290.846 165.01 li
304.008 159.604 li
317.17 146.183 li
330.331 129.22 li
343.493 116.359 li
356.655 109.462 li
369.816 97.5318 li
382.978 88.2117 li
396.14 83.5516 li
409.301 78.5187 li
422.463 70.317 li
435.625 58.0143 li
448.786 54.6591 li
461.948 51.6766 li
475.11 49.2534 li
488.271 47.0165 li
501.433 45.8981 li
514.595 44.2205 li
527.756 44.9661 li
540.918 44.2205 li
554.08 44.0341 li
567.241 42.1701 li
580.403 40.8653 li
593.565 39.374 li
606.726 39.9332 li
619.888 40.3061 li
633.05 38.0692 li
646.211 39.0012 li
659.373 37.6964 li
672.535 37.51 li
685.696 35.646 li
698.858 36.0188 li
712.02 36.9508 li
725.181 35.4596 li
738.343 36.7644 li
751.505 37.8828 li
764.666 37.51 li
777.828 36.7644 li
790.99 37.1372 li
804.151 33.4091 li
817.313 32.8499 li
830.475 32.6635 li
843.636 32.8499 li
856.798 32.6635 li
869.96 32.6635 li
883.121 32.6635 li
896.283 32.1043 li
909.445 32.1043 li
922.606 31.9179 li
935.768 31.9179 li
948.93 31.9179 li
962.091 31.9179 li
975.253 31.9179 li
988.415 31.9179 li
1001.58 31.7315 li
1014.74 31.5451 li
1027.9 31.7315 li
1041.06 31.7315 li
1054.22 31.7315 li
1067.38 31.7315 li
1080.55 31.7315 li
1093.71 31.7315 li
1106.87 31.7315 li
1 /0 /CSD get_res sepcs
1 sep
@
132.906 459.527 mo
146.068 396.336 li
159.229 369.494 li
172.391 322.8 li
185.553 289.527 li
198.715 260.168 li
211.876 225.218 li
225.038 206.764 li
238.199 200.053 li
251.361 191.665 li
264.523 180.202 li
277.685 166.781 li
290.846 160.35 li
304.008 151.402 li
317.17 142.735 li
330.331 131.271 li
343.493 118.689 li
356.655 112.258 li
369.816 102.751 li
382.978 94.6426 li
396.14 88.7709 li
409.301 85.6952 li
422.463 79.5439 li
435.625 69.4781 li
448.786 65.5637 li
461.948 62.2084 li
475.11 59.9716 li
488.271 60.2512 li
501.433 57.1755 li
514.595 56.3367 li
527.756 54.6591 li
540.918 56.3367 li
554.08 55.7775 li
567.241 54.0999 li
580.403 51.5834 li
593.565 52.7018 li
606.726 51.5834 li
619.888 50.7446 li
633.05 51.3038 li
646.211 50.7446 li
659.373 51.3038 li
672.535 52.1426 li
685.696 51.5834 li
698.858 49.6262 li
712.02 49.3466 li
725.181 50.1854 li
738.343 49.9058 li
751.505 52.4222 li
764.666 51.5834 li
777.828 53.8203 li
790.99 51.3038 li
804.151 50.7446 li
817.313 51.0242 li
830.475 49.9058 li
843.636 49.6262 li
856.798 49.9058 li
869.96 49.9058 li
883.121 49.9058 li
896.283 49.6262 li
909.445 49.3466 li
922.606 49.3466 li
935.768 49.6262 li
948.93 49.3466 li
962.091 49.6262 li
975.253 49.6262 li
988.415 49.6262 li
1001.58 49.6262 li
1014.74 49.6262 li
1027.9 49.6262 li
1041.06 49.9058 li
1054.22 49.9058 li
1067.38 49.9058 li
1080.55 49.9058 li
1093.71 49.9058 li
1106.87 49.9058 li
@
gsave
129.406 463.027 mo
136.406 463.027 li
136.406 456.026 li
129.406 456.026 li
129.406 463.027 li
clp
129.906 462.527 mo
135.906 456.527 li
129.906 456.527 mo
135.906 462.527 li
f
1 lw
0 lc
129.906 462.527 mo
135.906 456.527 li
129.906 456.527 mo
135.906 462.527 li
@
grestore
gsave
142.568 399.836 mo
149.568 399.836 li
149.568 392.836 li
142.568 392.836 li
142.568 399.836 li
clp
143.068 399.336 mo
149.068 393.336 li
143.068 393.336 mo
149.068 399.336 li
f
1 lw
0 lc
143.068 399.336 mo
149.068 393.336 li
143.068 393.336 mo
149.068 399.336 li
@
grestore
gsave
155.73 372.994 mo
162.729 372.994 li
162.729 365.994 li
155.73 365.994 li
155.73 372.994 li
clp
156.229 372.494 mo
162.229 366.494 li
156.229 366.494 mo
162.229 372.494 li
f
1 lw
0 lc
156.229 372.494 mo
162.229 366.494 li
156.229 366.494 mo
162.229 372.494 li
@
grestore
gsave
168.891 326.3 mo
175.891 326.3 li
175.891 319.3 li
168.891 319.3 li
168.891 326.3 li
clp
169.391 325.8 mo
175.391 319.8 li
169.391 319.8 mo
175.391 325.8 li
f
1 lw
0 lc
169.391 325.8 mo
175.391 319.8 li
169.391 319.8 mo
175.391 325.8 li
@
grestore
gsave
182.053 293.027 mo
189.053 293.027 li
189.053 286.027 li
182.053 286.027 li
182.053 293.027 li
clp
182.553 292.527 mo
188.553 286.527 li
182.553 286.527 mo
188.553 292.527 li
f
1 lw
0 lc
182.553 292.527 mo
188.553 286.527 li
182.553 286.527 mo
188.553 292.527 li
@
grestore
gsave
195.215 263.669 mo
202.215 263.669 li
202.215 256.669 li
195.215 256.669 li
195.215 263.669 li
clp
195.715 263.168 mo
201.715 257.168 li
195.715 257.168 mo
201.715 263.168 li
f
1 lw
0 lc
195.715 263.168 mo
201.715 257.168 li
195.715 257.168 mo
201.715 263.168 li
@
grestore
gsave
208.376 228.718 mo
215.376 228.718 li
215.376 221.718 li
208.376 221.718 li
208.376 228.718 li
clp
208.876 228.218 mo
214.876 222.218 li
208.876 222.218 mo
214.876 228.218 li
f
1 lw
0 lc
208.876 228.218 mo
214.876 222.218 li
208.876 222.218 mo
214.876 228.218 li
@
grestore
gsave
221.538 210.264 mo
228.538 210.264 li
228.538 203.264 li
221.538 203.264 li
221.538 210.264 li
clp
222.038 209.764 mo
228.038 203.764 li
222.038 203.764 mo
228.038 209.764 li
f
1 lw
0 lc
222.038 209.764 mo
228.038 203.764 li
222.038 203.764 mo
228.038 209.764 li
@
grestore
gsave
234.699 203.554 mo
241.7 203.554 li
241.7 196.554 li
234.699 196.554 li
234.699 203.554 li
clp
235.2 203.053 mo
241.2 197.053 li
235.2 197.053 mo
241.2 203.053 li
f
1 lw
0 lc
235.2 203.053 mo
241.2 197.053 li
235.2 197.053 mo
241.2 203.053 li
@
grestore
gsave
247.861 195.165 mo
254.861 195.165 li
254.861 188.165 li
247.861 188.165 li
247.861 195.165 li
clp
248.361 194.665 mo
254.361 188.665 li
248.361 188.665 mo
254.361 194.665 li
f
1 lw
0 lc
248.361 194.665 mo
254.361 188.665 li
248.361 188.665 mo
254.361 194.665 li
@
grestore
gsave
261.023 183.702 mo
268.023 183.702 li
268.023 176.702 li
261.023 176.702 li
261.023 183.702 li
clp
261.523 183.202 mo
267.523 177.202 li
261.523 177.202 mo
267.523 183.202 li
f
1 lw
0 lc
261.523 183.202 mo
267.523 177.202 li
261.523 177.202 mo
267.523 183.202 li
@
grestore
gsave
274.185 170.281 mo
281.185 170.281 li
281.185 163.28 li
274.185 163.28 li
274.185 170.281 li
clp
274.685 169.781 mo
280.685 163.781 li
274.685 163.781 mo
280.685 169.781 li
f
1 lw
0 lc
274.685 169.781 mo
280.685 163.781 li
274.685 163.781 mo
280.685 169.781 li
@
grestore
gsave
287.346 163.85 mo
294.346 163.85 li
294.346 156.85 li
287.346 156.85 li
287.346 163.85 li
clp
287.846 163.35 mo
293.846 157.35 li
287.846 157.35 mo
293.846 163.35 li
f
1 lw
0 lc
287.846 163.35 mo
293.846 157.35 li
287.846 157.35 mo
293.846 163.35 li
@
grestore
gsave
300.508 154.902 mo
307.508 154.902 li
307.508 147.902 li
300.508 147.902 li
300.508 154.902 li
clp
301.008 154.402 mo
307.008 148.402 li
301.008 148.402 mo
307.008 154.402 li
f
1 lw
0 lc
301.008 154.402 mo
307.008 148.402 li
301.008 148.402 mo
307.008 154.402 li
@
grestore
gsave
313.67 146.234 mo
320.67 146.234 li
320.67 139.234 li
313.67 139.234 li
313.67 146.234 li
clp
314.17 145.735 mo
320.17 139.735 li
314.17 139.735 mo
320.17 145.735 li
f
1 lw
0 lc
314.17 145.735 mo
320.17 139.735 li
314.17 139.735 mo
320.17 145.735 li
@
grestore
gsave
326.831 134.771 mo
333.831 134.771 li
333.831 127.771 li
326.831 127.771 li
326.831 134.771 li
clp
327.331 134.271 mo
333.331 128.271 li
327.331 128.271 mo
333.331 134.271 li
f
1 lw
0 lc
327.331 134.271 mo
333.331 128.271 li
327.331 128.271 mo
333.331 134.271 li
@
grestore
gsave
339.993 122.188 mo
346.993 122.188 li
346.993 115.189 li
339.993 115.189 li
339.993 122.188 li
clp
340.493 121.689 mo
346.493 115.689 li
340.493 115.689 mo
346.493 121.689 li
f
1 lw
0 lc
340.493 121.689 mo
346.493 115.689 li
340.493 115.689 mo
346.493 121.689 li
@
grestore
gsave
353.155 115.758 mo
360.155 115.758 li
360.155 108.757 li
353.155 108.757 li
353.155 115.758 li
clp
353.655 115.258 mo
359.655 109.258 li
353.655 109.258 mo
359.655 115.258 li
f
1 lw
0 lc
353.655 115.258 mo
359.655 109.258 li
353.655 109.258 mo
359.655 115.258 li
@
grestore
gsave
366.317 106.251 mo
373.316 106.251 li
373.316 99.251 li
366.317 99.251 li
366.317 106.251 li
clp
366.816 105.751 mo
372.816 99.7511 li
366.816 99.7511 mo
372.816 105.751 li
f
1 lw
0 lc
366.816 105.751 mo
372.816 99.7511 li
366.816 99.7511 mo
372.816 105.751 li
@
grestore
gsave
379.478 98.1425 mo
386.478 98.1425 li
386.478 91.1426 li
379.478 91.1426 li
379.478 98.1425 li
clp
379.978 97.6426 mo
385.978 91.6426 li
379.978 91.6426 mo
385.978 97.6426 li
f
1 lw
0 lc
379.978 97.6426 mo
385.978 91.6426 li
379.978 91.6426 mo
385.978 97.6426 li
@
grestore
gsave
392.64 92.2708 mo
399.64 92.2708 li
399.64 85.2708 li
392.64 85.2708 li
392.64 92.2708 li
clp
393.14 91.7709 mo
399.14 85.7709 li
393.14 85.7709 mo
399.14 91.7709 li
f
1 lw
0 lc
393.14 91.7709 mo
399.14 85.7709 li
393.14 85.7709 mo
399.14 91.7709 li
@
grestore
gsave
405.801 89.1952 mo
412.801 89.1952 li
412.801 82.1953 li
405.801 82.1953 li
405.801 89.1952 li
clp
406.301 88.6953 mo
412.301 82.6953 li
406.301 82.6953 mo
412.301 88.6953 li
f
1 lw
0 lc
406.301 88.6953 mo
412.301 82.6953 li
406.301 82.6953 mo
412.301 88.6953 li
@
grestore
gsave
418.963 83.0439 mo
425.963 83.0439 li
425.963 76.0439 li
418.963 76.0439 li
418.963 83.0439 li
clp
419.463 82.5439 mo
425.463 76.5439 li
419.463 76.5439 mo
425.463 82.5439 li
f
1 lw
0 lc
419.463 82.5439 mo
425.463 76.5439 li
419.463 76.5439 mo
425.463 82.5439 li
@
grestore
gsave
432.125 72.9781 mo
439.125 72.9781 li
439.125 65.9781 li
432.125 65.9781 li
432.125 72.9781 li
clp
432.625 72.4782 mo
438.625 66.4782 li
432.625 66.4782 mo
438.625 72.4782 li
f
1 lw
0 lc
432.625 72.4782 mo
438.625 66.4782 li
432.625 66.4782 mo
438.625 72.4782 li
@
grestore
gsave
445.286 69.0637 mo
452.286 69.0637 li
452.286 62.0637 li
445.286 62.0637 li
445.286 69.0637 li
clp
445.786 68.5637 mo
451.786 62.5637 li
445.786 62.5637 mo
451.786 68.5637 li
f
1 lw
0 lc
445.786 68.5637 mo
451.786 62.5637 li
445.786 62.5637 mo
451.786 68.5637 li
@
grestore
gsave
458.448 65.7085 mo
465.448 65.7085 li
465.448 58.7086 li
458.448 58.7086 li
458.448 65.7085 li
clp
458.948 65.2085 mo
464.948 59.2085 li
458.948 59.2085 mo
464.948 65.2085 li
f
1 lw
0 lc
458.948 65.2085 mo
464.948 59.2085 li
458.948 59.2085 mo
464.948 65.2085 li
@
grestore
gsave
471.61 63.4716 mo
478.61 63.4716 li
478.61 56.4716 li
471.61 56.4716 li
471.61 63.4716 li
clp
472.11 62.9717 mo
478.11 56.9717 li
472.11 56.9717 mo
478.11 62.9717 li
f
1 lw
0 lc
472.11 62.9717 mo
478.11 56.9717 li
472.11 56.9717 mo
478.11 62.9717 li
@
grestore
gsave
484.772 63.7512 mo
491.772 63.7512 li
491.772 56.7512 li
484.772 56.7512 li
484.772 63.7512 li
clp
485.271 63.2513 mo
491.271 57.2513 li
485.271 57.2513 mo
491.271 63.2513 li
f
1 lw
0 lc
485.271 63.2513 mo
491.271 57.2513 li
485.271 57.2513 mo
491.271 63.2513 li
@
grestore
gsave
497.933 60.6757 mo
504.933 60.6757 li
504.933 53.6757 li
497.933 53.6757 li
497.933 60.6757 li
clp
498.433 60.1757 mo
504.433 54.1757 li
498.433 54.1757 mo
504.433 60.1757 li
f
1 lw
0 lc
498.433 60.1757 mo
504.433 54.1757 li
498.433 54.1757 mo
504.433 60.1757 li
@
grestore
gsave
511.095 59.8368 mo
518.095 59.8368 li
518.095 52.8368 li
511.095 52.8368 li
511.095 59.8368 li
clp
511.595 59.3369 mo
517.595 53.3369 li
511.595 53.3369 mo
517.595 59.3369 li
f
1 lw
0 lc
511.595 59.3369 mo
517.595 53.3369 li
511.595 53.3369 mo
517.595 59.3369 li
@
grestore
gsave
524.256 58.1594 mo
531.257 58.1594 li
531.257 51.1591 li
524.256 51.1591 li
524.256 58.1594 li
clp
524.757 57.6592 mo
530.757 51.6592 li
524.757 51.6592 mo
530.757 57.6592 li
f
1 lw
0 lc
524.757 57.6592 mo
530.757 51.6592 li
524.757 51.6592 mo
530.757 57.6592 li
@
grestore
gsave
537.418 59.8368 mo
544.418 59.8368 li
544.418 52.8368 li
537.418 52.8368 li
537.418 59.8368 li
clp
537.918 59.3369 mo
543.918 53.3369 li
537.918 53.3369 mo
543.918 59.3369 li
f
1 lw
0 lc
537.918 59.3369 mo
543.918 53.3369 li
537.918 53.3369 mo
543.918 59.3369 li
@
grestore
gsave
550.58 59.2775 mo
557.58 59.2775 li
557.58 52.2776 li
550.58 52.2776 li
550.58 59.2775 li
clp
551.08 58.7776 mo
557.08 52.7776 li
551.08 52.7776 mo
557.08 58.7776 li
f
1 lw
0 lc
551.08 58.7776 mo
557.08 52.7776 li
551.08 52.7776 mo
557.08 58.7776 li
@
grestore
gsave
563.742 57.6001 mo
570.741 57.6001 li
570.741 50.6002 li
563.742 50.6002 li
563.742 57.6001 li
clp
564.242 57.1 mo
570.242 51.1 li
564.242 51.1 mo
570.242 57.1 li
f
1 lw
0 lc
564.242 57.1 mo
570.242 51.1 li
564.242 51.1 mo
570.242 57.1 li
@
grestore
gsave
576.903 55.0835 mo
583.903 55.0835 li
583.903 48.0836 li
576.903 48.0836 li
576.903 55.0835 li
clp
577.403 54.5836 mo
583.403 48.5836 li
577.403 48.5836 mo
583.403 54.5836 li
f
1 lw
0 lc
577.403 54.5836 mo
583.403 48.5836 li
577.403 48.5836 mo
583.403 54.5836 li
@
grestore
gsave
590.065 56.202 mo
597.065 56.202 li
597.065 49.2021 li
590.065 49.2021 li
590.065 56.202 li
clp
590.565 55.702 mo
596.565 49.702 li
590.565 49.702 mo
596.565 55.702 li
f
1 lw
0 lc
590.565 55.702 mo
596.565 49.702 li
590.565 49.702 mo
596.565 55.702 li
@
grestore
gsave
603.227 55.0835 mo
610.227 55.0835 li
610.227 48.0836 li
603.227 48.0836 li
603.227 55.0835 li
clp
603.727 54.5836 mo
609.727 48.5836 li
603.727 48.5836 mo
609.727 54.5836 li
f
1 lw
0 lc
603.727 54.5836 mo
609.727 48.5836 li
603.727 48.5836 mo
609.727 54.5836 li
@
grestore
gsave
616.388 54.2446 mo
623.388 54.2446 li
623.388 47.2447 li
616.388 47.2447 li
616.388 54.2446 li
clp
616.888 53.7448 mo
622.888 47.7448 li
616.888 47.7448 mo
622.888 53.7448 li
f
1 lw
0 lc
616.888 53.7448 mo
622.888 47.7448 li
616.888 47.7448 mo
622.888 53.7448 li
@
grestore
gsave
629.55 54.8039 mo
636.55 54.8039 li
636.55 47.804 li
629.55 47.804 li
629.55 54.8039 li
clp
630.05 54.304 mo
636.05 48.304 li
630.05 48.304 mo
636.05 54.304 li
f
1 lw
0 lc
630.05 54.304 mo
636.05 48.304 li
630.05 48.304 mo
636.05 54.304 li
@
grestore
gsave
642.712 54.2446 mo
649.712 54.2446 li
649.712 47.2447 li
642.712 47.2447 li
642.712 54.2446 li
clp
643.212 53.7448 mo
649.212 47.7448 li
643.212 47.7448 mo
649.212 53.7448 li
f
1 lw
0 lc
643.212 53.7448 mo
649.212 47.7448 li
643.212 47.7448 mo
649.212 53.7448 li
@
grestore
gsave
655.874 54.8039 mo
662.873 54.8039 li
662.873 47.804 li
655.874 47.804 li
655.874 54.8039 li
clp
656.373 54.304 mo
662.373 48.304 li
656.373 48.304 mo
662.373 54.304 li
f
1 lw
0 lc
656.373 54.304 mo
662.373 48.304 li
656.373 48.304 mo
662.373 54.304 li
@
grestore
gsave
669.035 55.6428 mo
676.035 55.6428 li
676.035 48.6428 li
669.035 48.6428 li
669.035 55.6428 li
clp
669.535 55.1428 mo
675.535 49.1428 li
669.535 49.1428 mo
675.535 55.1428 li
f
1 lw
0 lc
669.535 55.1428 mo
675.535 49.1428 li
669.535 49.1428 mo
675.535 55.1428 li
@
grestore
gsave
682.197 55.0835 mo
689.197 55.0835 li
689.197 48.0836 li
682.197 48.0836 li
682.197 55.0835 li
clp
682.697 54.5836 mo
688.697 48.5836 li
682.697 48.5836 mo
688.697 54.5836 li
f
1 lw
0 lc
682.697 54.5836 mo
688.697 48.5836 li
682.697 48.5836 mo
688.697 54.5836 li
@
grestore
gsave
695.358 53.1265 mo
702.358 53.1265 li
702.358 46.1266 li
695.358 46.1266 li
695.358 53.1265 li
clp
695.858 52.6264 mo
701.858 46.6264 li
695.858 46.6264 mo
701.858 52.6264 li
f
1 lw
0 lc
695.858 52.6264 mo
701.858 46.6264 li
695.858 46.6264 mo
701.858 52.6264 li
@
grestore
gsave
708.52 52.8469 mo
715.52 52.8469 li
715.52 45.8469 li
708.52 45.8469 li
708.52 52.8469 li
clp
709.02 52.3468 mo
715.02 46.3468 li
709.02 46.3468 mo
715.02 52.3468 li
f
1 lw
0 lc
709.02 52.3468 mo
715.02 46.3468 li
709.02 46.3468 mo
715.02 52.3468 li
@
grestore
gsave
721.682 53.6857 mo
728.682 53.6857 li
728.682 46.6855 li
721.682 46.6855 li
721.682 53.6857 li
clp
722.182 53.1856 mo
728.182 47.1856 li
722.182 47.1856 mo
728.182 53.1856 li
f
1 lw
0 lc
722.182 53.1856 mo
728.182 47.1856 li
722.182 47.1856 mo
728.182 53.1856 li
@
grestore
gsave
734.843 53.4061 mo
741.843 53.4061 li
741.843 46.4062 li
734.843 46.4062 li
734.843 53.4061 li
clp
735.343 52.906 mo
741.343 46.906 li
735.343 46.906 mo
741.343 52.906 li
f
1 lw
0 lc
735.343 52.906 mo
741.343 46.906 li
735.343 46.906 mo
741.343 52.906 li
@
grestore
gsave
748.005 55.9224 mo
755.005 55.9224 li
755.005 48.9224 li
748.005 48.9224 li
748.005 55.9224 li
clp
748.505 55.4224 mo
754.505 49.4224 li
748.505 49.4224 mo
754.505 55.4224 li
f
1 lw
0 lc
748.505 55.4224 mo
754.505 49.4224 li
748.505 49.4224 mo
754.505 55.4224 li
@
grestore
gsave
761.167 55.0835 mo
768.167 55.0835 li
768.167 48.0836 li
761.167 48.0836 li
761.167 55.0835 li
clp
761.667 54.5836 mo
767.667 48.5836 li
761.667 48.5836 mo
767.667 54.5836 li
f
1 lw
0 lc
761.667 54.5836 mo
767.667 48.5836 li
761.667 48.5836 mo
767.667 54.5836 li
@
grestore
gsave
774.329 57.3205 mo
781.328 57.3205 li
781.328 50.3206 li
774.329 50.3206 li
774.329 57.3205 li
clp
774.828 56.8204 mo
780.828 50.8204 li
774.828 50.8204 mo
780.828 56.8204 li
f
1 lw
0 lc
774.828 56.8204 mo
780.828 50.8204 li
774.828 50.8204 mo
780.828 56.8204 li
@
grestore
gsave
787.49 54.8039 mo
794.49 54.8039 li
794.49 47.804 li
787.49 47.804 li
787.49 54.8039 li
clp
787.99 54.304 mo
793.99 48.304 li
787.99 48.304 mo
793.99 54.304 li
f
1 lw
0 lc
787.99 54.304 mo
793.99 48.304 li
787.99 48.304 mo
793.99 54.304 li
@
grestore
gsave
800.652 54.2446 mo
807.652 54.2446 li
807.652 47.2447 li
800.652 47.2447 li
800.652 54.2446 li
clp
801.152 53.7448 mo
807.152 47.7448 li
801.152 47.7448 mo
807.152 53.7448 li
f
1 lw
0 lc
801.152 53.7448 mo
807.152 47.7448 li
801.152 47.7448 mo
807.152 53.7448 li
@
grestore
gsave
813.814 54.5243 mo
820.814 54.5243 li
820.814 47.5243 li
813.814 47.5243 li
813.814 54.5243 li
clp
814.314 54.0244 mo
820.314 48.0244 li
814.314 48.0244 mo
820.314 54.0244 li
f
1 lw
0 lc
814.314 54.0244 mo
820.314 48.0244 li
814.314 48.0244 mo
820.314 54.0244 li
@
grestore
gsave
826.975 53.4061 mo
833.975 53.4061 li
833.975 46.4062 li
826.975 46.4062 li
826.975 53.4061 li
clp
827.475 52.906 mo
833.475 46.906 li
827.475 46.906 mo
833.475 52.906 li
f
1 lw
0 lc
827.475 52.906 mo
833.475 46.906 li
827.475 46.906 mo
833.475 52.906 li
@
grestore
gsave
840.137 53.1265 mo
847.137 53.1265 li
847.137 46.1266 li
840.137 46.1266 li
840.137 53.1265 li
clp
840.637 52.6264 mo
846.637 46.6264 li
840.637 46.6264 mo
846.637 52.6264 li
f
1 lw
0 lc
840.637 52.6264 mo
846.637 46.6264 li
840.637 46.6264 mo
846.637 52.6264 li
@
grestore
gsave
853.299 53.4061 mo
860.298 53.4061 li
860.298 46.4062 li
853.299 46.4062 li
853.299 53.4061 li
clp
853.799 52.906 mo
859.799 46.906 li
853.799 46.906 mo
859.799 52.906 li
f
1 lw
0 lc
853.799 52.906 mo
859.799 46.906 li
853.799 46.906 mo
859.799 52.906 li
@
grestore
gsave
866.46 53.4061 mo
873.46 53.4061 li
873.46 46.4062 li
866.46 46.4062 li
866.46 53.4061 li
clp
866.96 52.906 mo
872.96 46.906 li
866.96 46.906 mo
872.96 52.906 li
f
1 lw
0 lc
866.96 52.906 mo
872.96 46.906 li
866.96 46.906 mo
872.96 52.906 li
@
grestore
gsave
879.622 53.4061 mo
886.622 53.4061 li
886.622 46.4062 li
879.622 46.4062 li
879.622 53.4061 li
clp
880.122 52.906 mo
886.122 46.906 li
880.122 46.906 mo
886.122 52.906 li
f
1 lw
0 lc
880.122 52.906 mo
886.122 46.906 li
880.122 46.906 mo
886.122 52.906 li
@
grestore
gsave
892.784 53.1265 mo
899.784 53.1265 li
899.784 46.1266 li
892.784 46.1266 li
892.784 53.1265 li
clp
893.284 52.6264 mo
899.284 46.6264 li
893.284 46.6264 mo
899.284 52.6264 li
f
1 lw
0 lc
893.284 52.6264 mo
899.284 46.6264 li
893.284 46.6264 mo
899.284 52.6264 li
@
grestore
gsave
905.945 52.8469 mo
912.945 52.8469 li
912.945 45.8469 li
905.945 45.8469 li
905.945 52.8469 li
clp
906.445 52.3468 mo
912.445 46.3468 li
906.445 46.3468 mo
912.445 52.3468 li
f
1 lw
0 lc
906.445 52.3468 mo
912.445 46.3468 li
906.445 46.3468 mo
912.445 52.3468 li
@
grestore
gsave
919.107 52.8469 mo
926.107 52.8469 li
926.107 45.8469 li
919.107 45.8469 li
919.107 52.8469 li
clp
919.607 52.3468 mo
925.607 46.3468 li
919.607 46.3468 mo
925.607 52.3468 li
f
1 lw
0 lc
919.607 52.3468 mo
925.607 46.3468 li
919.607 46.3468 mo
925.607 52.3468 li
@
grestore
gsave
932.269 53.1265 mo
939.269 53.1265 li
939.269 46.1266 li
932.269 46.1266 li
932.269 53.1265 li
clp
932.769 52.6264 mo
938.769 46.6264 li
932.769 46.6264 mo
938.769 52.6264 li
f
1 lw
0 lc
932.769 52.6264 mo
938.769 46.6264 li
932.769 46.6264 mo
938.769 52.6264 li
@
grestore
gsave
945.43 52.8469 mo
952.43 52.8469 li
952.43 45.8469 li
945.43 45.8469 li
945.43 52.8469 li
clp
945.93 52.3468 mo
951.93 46.3468 li
945.93 46.3468 mo
951.93 52.3468 li
f
1 lw
0 lc
945.93 52.3468 mo
951.93 46.3468 li
945.93 46.3468 mo
951.93 52.3468 li
@
grestore
gsave
958.592 53.1265 mo
965.592 53.1265 li
965.592 46.1266 li
958.592 46.1266 li
958.592 53.1265 li
clp
959.092 52.6264 mo
965.092 46.6264 li
959.092 46.6264 mo
965.092 52.6264 li
f
1 lw
0 lc
959.092 52.6264 mo
965.092 46.6264 li
959.092 46.6264 mo
965.092 52.6264 li
@
grestore
gsave
971.754 53.1265 mo
978.754 53.1265 li
978.754 46.1266 li
971.754 46.1266 li
971.754 53.1265 li
clp
972.254 52.6264 mo
978.254 46.6264 li
972.254 46.6264 mo
978.254 52.6264 li
f
1 lw
0 lc
972.254 52.6264 mo
978.254 46.6264 li
972.254 46.6264 mo
978.254 52.6264 li
@
grestore
gsave
984.915 53.1265 mo
991.915 53.1265 li
991.915 46.1266 li
984.915 46.1266 li
984.915 53.1265 li
clp
985.415 52.6264 mo
991.415 46.6264 li
985.415 46.6264 mo
991.415 52.6264 li
f
1 lw
0 lc
985.415 52.6264 mo
991.415 46.6264 li
985.415 46.6264 mo
991.415 52.6264 li
@
grestore
gsave
998.077 53.1265 mo
1005.08 53.1265 li
1005.08 46.1266 li
998.077 46.1266 li
998.077 53.1265 li
clp
998.577 52.6264 mo
1004.58 46.6264 li
998.577 46.6264 mo
1004.58 52.6264 li
f
1 lw
0 lc
998.577 52.6264 mo
1004.58 46.6264 li
998.577 46.6264 mo
1004.58 52.6264 li
@
grestore
gsave
1011.24 53.1265 mo
1018.24 53.1265 li
1018.24 46.1266 li
1011.24 46.1266 li
1011.24 53.1265 li
clp
1011.74 52.6264 mo
1017.74 46.6264 li
1011.74 46.6264 mo
1017.74 52.6264 li
f
1 lw
0 lc
1011.74 52.6264 mo
1017.74 46.6264 li
1011.74 46.6264 mo
1017.74 52.6264 li
@
grestore
gsave
1024.4 53.1265 mo
1031.4 53.1265 li
1031.4 46.1266 li
1024.4 46.1266 li
1024.4 53.1265 li
clp
1024.9 52.6264 mo
1030.9 46.6264 li
1024.9 46.6264 mo
1030.9 52.6264 li
f
1 lw
0 lc
1024.9 52.6264 mo
1030.9 46.6264 li
1024.9 46.6264 mo
1030.9 52.6264 li
@
grestore
gsave
1037.56 53.4061 mo
1044.56 53.4061 li
1044.56 46.4062 li
1037.56 46.4062 li
1037.56 53.4061 li
clp
1038.06 52.906 mo
1044.06 46.906 li
1038.06 46.906 mo
1044.06 52.906 li
f
1 lw
0 lc
1038.06 52.906 mo
1044.06 46.906 li
1038.06 46.906 mo
1044.06 52.906 li
@
grestore
gsave
1050.72 53.4061 mo
1057.72 53.4061 li
1057.72 46.4062 li
1050.72 46.4062 li
1050.72 53.4061 li
clp
1051.22 52.906 mo
1057.22 46.906 li
1051.22 46.906 mo
1057.22 52.906 li
f
1 lw
0 lc
1051.22 52.906 mo
1057.22 46.906 li
1051.22 46.906 mo
1057.22 52.906 li
@
grestore
gsave
1063.88 53.4061 mo
1070.88 53.4061 li
1070.88 46.4062 li
1063.88 46.4062 li
1063.88 53.4061 li
clp
1064.38 52.906 mo
1070.38 46.906 li
1064.38 46.906 mo
1070.38 52.906 li
f
1 lw
0 lc
1064.38 52.906 mo
1070.38 46.906 li
1064.38 46.906 mo
1070.38 52.906 li
@
grestore
gsave
1077.05 53.4061 mo
1084.05 53.4061 li
1084.05 46.4062 li
1077.05 46.4062 li
1077.05 53.4061 li
clp
1077.55 52.906 mo
1083.55 46.906 li
1077.55 46.906 mo
1083.55 52.906 li
f
1 lw
0 lc
1077.55 52.906 mo
1083.55 46.906 li
1077.55 46.906 mo
1083.55 52.906 li
@
grestore
gsave
1090.21 53.4061 mo
1097.21 53.4061 li
1097.21 46.4062 li
1090.21 46.4062 li
1090.21 53.4061 li
clp
1090.71 52.906 mo
1096.71 46.906 li
1090.71 46.906 mo
1096.71 52.906 li
f
1 lw
0 lc
1090.71 52.906 mo
1096.71 46.906 li
1090.71 46.906 mo
1096.71 52.906 li
@
grestore
gsave
1103.37 53.4061 mo
1110.37 53.4061 li
1110.37 46.4062 li
1103.37 46.4062 li
1103.37 53.4061 li
clp
1103.87 52.906 mo
1109.87 46.906 li
1103.87 46.906 mo
1109.87 52.906 li
f
1 lw
0 lc
1103.87 52.906 mo
1109.87 46.906 li
1103.87 46.906 mo
1109.87 52.906 li
@
grestore
.8 lw
0 lj
84.208 544.34 mo
84.208 7.12634 li
@
1155.57 544.34 mo
1155.57 7.12634 li
@
84.208 544.34 mo
1155.57 544.34 li
@
84.208 7.12634 mo
1155.57 7.12634 li
@
1148.57 538.84 mo
555.943 538.84 li
555.353 538.838 555.006 538.696 554.797 538.486 cv
554.587 538.277 554.445 537.93 554.443 537.34 cv
554.443 402.215 li
554.445 401.625 554.587 401.278 554.797 401.068 cv
555.006 400.859 555.353 400.717 555.943 400.715 cv
1148.57 400.715 li
1149.16 400.717 1149.51 400.859 1149.71 401.068 cv
1149.92 401.278 1150.07 401.625 1150.07 402.215 cv
1150.07 537.34 li
1150.07 537.93 1149.92 538.277 1149.71 538.486 cv
1149.51 538.696 1149.16 538.838 1148.57 538.84 cv
0 0 0 0 cmyk
f
1148.58 539.84 mo
1148.57 539.84 1148.57 539.84 1148.57 539.84 cv
555.943 539.84 li
555.94 539.84 555.936 539.84 555.933 539.84 cv
555.194 539.84 554.545 539.649 554.089 539.193 cv
553.632 538.736 553.441 538.083 553.443 537.34 cv
553.443 402.215 li
553.441 401.471 553.632 400.819 554.089 400.361 cv
554.544 399.907 555.193 399.715 555.931 399.715 cv
555.935 399.715 555.939 399.715 555.943 399.715 cv
1148.57 399.715 li
1148.57 399.715 1148.58 399.715 1148.58 399.715 cv
1149.32 399.715 1149.97 399.907 1150.42 400.361 cv
1150.88 400.819 1151.07 401.471 1151.07 402.215 cv
1151.07 537.34 li
1151.07 538.083 1150.88 538.736 1150.42 539.193 cv
1149.97 539.649 1149.32 539.84 1148.58 539.84 cv
555.943 538.84 mo
1148.57 538.84 li
1149.16 538.838 1149.51 538.696 1149.71 538.486 cv
1149.92 538.277 1150.07 537.93 1150.07 537.34 cv
1150.07 402.215 li
1150.07 401.625 1149.92 401.278 1149.71 401.068 cv
1149.51 400.859 1149.16 400.717 1148.57 400.715 cv
555.943 400.715 li
555.353 400.717 555.006 400.859 554.797 401.068 cv
554.587 401.278 554.445 401.625 554.443 402.215 cv
554.443 537.34 li
554.445 537.93 554.587 538.277 554.797 538.486 cv
555.006 538.696 555.353 538.838 555.943 538.84 cv
555.943 538.84 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
557.943 423.512 mo
577.943 423.512 li
0 1 1 0 cmyk
@
591.853 416.572 mo
591.853 424.582 li
596.593 424.582 li
598.183 424.582 599.353 424.252 600.133 423.592 cv
600.883 422.932 601.273 421.942 601.273 420.562 cv
601.273 419.212 600.883 418.222 600.133 417.562 cv
599.353 416.902 598.183 416.572 596.593 416.572 cv
591.853 416.572 li
591.853 407.572 mo
591.853 414.172 li
596.233 414.172 li
597.673 414.172 598.723 413.902 599.443 413.362 cv
600.163 412.822 600.523 412.012 600.523 410.872 cv
600.523 409.792 600.163 408.952 599.443 408.412 cv
598.723 407.872 597.673 407.572 596.233 407.572 cv
591.853 407.572 li
588.883 405.142 mo
596.443 405.142 li
598.693 405.142 600.433 405.622 601.663 406.552 cv
602.863 407.512 603.493 408.832 603.493 410.542 cv
603.493 411.892 603.163 412.972 602.533 413.752 cv
601.903 414.532 601.003 415.042 599.803 415.222 cv
601.243 415.552 602.383 416.212 603.193 417.202 cv
603.973 418.192 604.393 419.422 604.393 420.892 cv
604.393 422.872 603.703 424.372 602.383 425.422 cv
601.063 426.502 599.173 427.012 596.743 427.012 cv
588.883 427.012 li
588.883 405.142 li
1 /0 /CSD get_res sepcs
1 sep
f
616.813 418.762 mo
614.623 418.762 613.123 419.032 612.283 419.512 cv
611.443 420.022 611.023 420.862 611.023 422.062 cv
611.023 423.022 611.323 423.802 611.953 424.342 cv
612.583 424.912 613.453 425.182 614.533 425.182 cv
616.033 425.182 617.233 424.672 618.133 423.592 cv
619.033 422.542 619.483 421.132 619.483 419.362 cv
619.483 418.762 li
616.813 418.762 li
622.183 417.652 mo
622.183 427.012 li
619.483 427.012 li
619.483 424.522 li
618.853 425.542 618.073 426.262 617.173 426.712 cv
616.273 427.162 615.133 427.402 613.813 427.402 cv
612.133 427.402 610.783 426.952 609.793 426.022 cv
608.803 425.092 608.323 423.832 608.323 422.242 cv
608.323 420.412 608.923 419.032 610.183 418.072 cv
611.413 417.142 613.243 416.662 615.703 416.662 cv
619.483 416.662 li
619.483 416.392 li
619.483 415.162 619.063 414.202 618.253 413.512 cv
617.443 412.852 616.303 412.492 614.833 412.492 cv
613.873 412.492 612.973 412.612 612.073 412.852 cv
611.173 413.092 610.333 413.422 609.523 413.842 cv
609.523 411.352 li
610.483 410.992 611.443 410.692 612.373 410.512 cv
613.303 410.332 614.203 410.212 615.103 410.212 cv
617.473 410.212 619.243 410.842 620.413 412.072 cv
621.583 413.302 622.183 415.162 622.183 417.652 cv
f
639.553 411.232 mo
639.553 413.752 li
638.773 413.332 638.023 413.032 637.243 412.822 cv
636.463 412.612 635.713 412.492 634.933 412.492 cv
633.193 412.492 631.813 413.062 630.853 414.172 cv
629.893 415.282 629.413 416.842 629.413 418.822 cv
629.413 420.832 629.893 422.392 630.853 423.502 cv
631.813 424.612 633.193 425.152 634.933 425.152 cv
635.713 425.152 636.463 425.062 637.243 424.852 cv
638.023 424.642 638.773 424.312 639.553 423.892 cv
639.553 426.382 li
638.773 426.742 637.993 427.012 637.213 427.162 cv
636.403 427.312 635.533 427.402 634.633 427.402 cv
632.173 427.402 630.193 426.652 628.753 425.092 cv
627.283 423.562 626.563 421.462 626.563 418.822 cv
626.563 416.152 627.283 414.052 628.753 412.522 cv
630.223 410.992 632.233 410.212 634.813 410.212 cv
635.653 410.212 636.463 410.302 637.243 410.482 cv
638.023 410.662 638.803 410.902 639.553 411.232 cv
f
644.143 404.212 mo
646.843 404.212 li
646.843 417.682 li
654.883 410.602 li
658.333 410.602 li
649.633 418.282 li
658.693 427.012 li
655.183 427.012 li
646.843 419.002 li
646.843 427.012 li
644.143 427.012 li
644.143 404.212 li
f
673.753 424.552 mo
673.753 433.222 li
671.053 433.222 li
671.053 410.602 li
673.753 410.602 li
673.753 413.092 li
674.293 412.132 675.013 411.412 675.883 410.932 cv
676.753 410.452 677.803 410.212 679.003 410.212 cv
680.983 410.212 682.603 411.022 683.863 412.582 cv
685.093 414.172 685.723 416.242 685.723 418.822 cv
685.723 421.402 685.093 423.502 683.863 425.062 cv
682.603 426.622 680.983 427.402 679.003 427.402 cv
677.803 427.402 676.753 427.162 675.883 426.712 cv
675.013 426.262 674.293 425.542 673.753 424.552 cv
682.933 418.822 mo
682.933 416.842 682.513 415.312 681.703 414.172 cv
680.863 413.032 679.753 412.462 678.343 412.462 cv
676.903 412.462 675.793 413.032 674.983 414.172 cv
674.143 415.312 673.753 416.842 673.753 418.822 cv
673.753 420.802 674.143 422.362 674.983 423.502 cv
675.793 424.642 676.903 425.182 678.343 425.182 cv
679.753 425.182 680.863 424.642 681.703 423.502 cv
682.513 422.362 682.933 420.802 682.933 418.822 cv
f
699.703 413.122 mo
699.403 412.942 699.073 412.822 698.713 412.732 cv
698.353 412.672 697.963 412.612 697.543 412.612 cv
696.013 412.612 694.843 413.122 694.033 414.112 cv
693.193 415.102 692.803 416.512 692.803 418.372 cv
692.803 427.012 li
690.103 427.012 li
690.103 410.602 li
692.803 410.602 li
692.803 413.152 li
693.343 412.162 694.093 411.412 694.993 410.932 cv
695.893 410.452 697.003 410.212 698.323 410.212 cv
698.503 410.212 698.713 410.242 698.953 410.242 cv
699.163 410.272 699.403 410.302 699.703 410.362 cv
699.703 413.122 li
f
708.883 412.492 mo
707.443 412.492 706.303 413.062 705.463 414.202 cv
704.623 415.342 704.203 416.872 704.203 418.822 cv
704.203 420.802 704.593 422.332 705.433 423.472 cv
706.273 424.612 707.413 425.152 708.883 425.152 cv
710.323 425.152 711.463 424.612 712.303 423.472 cv
713.143 422.332 713.563 420.802 713.563 418.822 cv
713.563 416.902 713.143 415.342 712.303 414.202 cv
711.463 413.062 710.323 412.492 708.883 412.492 cv
708.883 410.212 mo
711.223 410.212 713.053 410.992 714.403 412.492 cv
715.723 414.022 716.413 416.122 716.413 418.822 cv
716.413 421.522 715.723 423.622 714.403 425.122 cv
713.053 426.652 711.223 427.402 708.883 427.402 cv
706.513 427.402 704.653 426.652 703.333 425.122 cv
702.013 423.622 701.353 421.522 701.353 418.822 cv
701.353 416.122 702.013 414.022 703.333 412.492 cv
704.653 410.992 706.513 410.212 708.883 410.212 cv
f
723.493 424.552 mo
723.493 433.222 li
720.793 433.222 li
720.793 410.602 li
723.493 410.602 li
723.493 413.092 li
724.033 412.132 724.753 411.412 725.623 410.932 cv
726.493 410.452 727.543 410.212 728.743 410.212 cv
730.723 410.212 732.343 411.022 733.603 412.582 cv
734.833 414.172 735.463 416.242 735.463 418.822 cv
735.463 421.402 734.833 423.502 733.603 425.062 cv
732.343 426.622 730.723 427.402 728.743 427.402 cv
727.543 427.402 726.493 427.162 725.623 426.712 cv
724.753 426.262 724.033 425.542 723.493 424.552 cv
732.673 418.822 mo
732.673 416.842 732.253 415.312 731.443 414.172 cv
730.603 413.032 729.493 412.462 728.083 412.462 cv
726.643 412.462 725.533 413.032 724.723 414.172 cv
723.883 415.312 723.493 416.842 723.493 418.822 cv
723.493 420.802 723.883 422.362 724.723 423.502 cv
725.533 424.642 726.643 425.182 728.083 425.182 cv
729.493 425.182 730.603 424.642 731.443 423.502 cv
732.253 422.362 732.673 420.802 732.673 418.822 cv
f
747.403 418.762 mo
745.213 418.762 743.713 419.032 742.873 419.512 cv
742.033 420.022 741.613 420.862 741.613 422.062 cv
741.613 423.022 741.913 423.802 742.543 424.342 cv
743.173 424.912 744.043 425.182 745.123 425.182 cv
746.623 425.182 747.823 424.672 748.723 423.592 cv
749.623 422.542 750.073 421.132 750.073 419.362 cv
750.073 418.762 li
747.403 418.762 li
752.773 417.652 mo
752.773 427.012 li
750.073 427.012 li
750.073 424.522 li
749.443 425.542 748.663 426.262 747.763 426.712 cv
746.863 427.162 745.723 427.402 744.403 427.402 cv
742.723 427.402 741.373 426.952 740.383 426.022 cv
739.393 425.092 738.913 423.832 738.913 422.242 cv
738.913 420.412 739.513 419.032 740.773 418.072 cv
742.003 417.142 743.833 416.662 746.293 416.662 cv
750.073 416.662 li
750.073 416.392 li
750.073 415.162 749.653 414.202 748.843 413.512 cv
748.033 412.852 746.893 412.492 745.423 412.492 cv
744.463 412.492 743.563 412.612 742.663 412.852 cv
741.763 413.092 740.923 413.422 740.113 413.842 cv
740.113 411.352 li
741.073 410.992 742.033 410.692 742.963 410.512 cv
743.893 410.332 744.793 410.212 745.693 410.212 cv
748.063 410.212 749.833 410.842 751.003 412.072 cv
752.173 413.302 752.773 415.162 752.773 417.652 cv
f
769.123 418.612 mo
769.123 416.692 768.703 415.162 767.923 414.082 cv
767.113 413.002 765.973 412.462 764.533 412.462 cv
763.093 412.462 761.953 413.002 761.143 414.082 cv
760.333 415.162 759.943 416.692 759.943 418.612 cv
759.943 420.562 760.333 422.062 761.143 423.142 cv
761.953 424.222 763.093 424.762 764.533 424.762 cv
765.973 424.762 767.113 424.222 767.923 423.142 cv
768.703 422.062 769.123 420.562 769.123 418.612 cv
771.823 424.972 mo
771.823 427.732 771.193 429.802 769.963 431.182 cv
768.703 432.532 766.813 433.222 764.263 433.222 cv
763.303 433.222 762.433 433.132 761.593 433.012 cv
760.753 432.862 759.913 432.652 759.133 432.352 cv
759.133 429.742 li
759.913 430.162 760.693 430.462 761.473 430.672 cv
762.253 430.882 763.033 431.002 763.843 431.002 cv
765.583 431.002 766.903 430.522 767.803 429.622 cv
768.673 428.692 769.123 427.312 769.123 425.452 cv
769.123 424.132 li
768.553 425.092 767.833 425.812 766.963 426.292 cv
766.093 426.772 765.073 427.012 763.873 427.012 cv
761.833 427.012 760.213 426.262 758.983 424.732 cv
757.753 423.202 757.153 421.162 757.153 418.612 cv
757.153 416.092 757.753 414.052 758.983 412.522 cv
760.213 410.992 761.833 410.212 763.873 410.212 cv
765.073 410.212 766.093 410.452 766.963 410.932 cv
767.833 411.412 768.553 412.132 769.123 413.092 cv
769.123 410.602 li
771.823 410.602 li
771.823 424.972 li
f
784.843 418.762 mo
782.653 418.762 781.153 419.032 780.313 419.512 cv
779.473 420.022 779.053 420.862 779.053 422.062 cv
779.053 423.022 779.353 423.802 779.983 424.342 cv
780.613 424.912 781.483 425.182 782.563 425.182 cv
784.063 425.182 785.263 424.672 786.163 423.592 cv
787.063 422.542 787.513 421.132 787.513 419.362 cv
787.513 418.762 li
784.843 418.762 li
790.213 417.652 mo
790.213 427.012 li
787.513 427.012 li
787.513 424.522 li
786.883 425.542 786.103 426.262 785.203 426.712 cv
784.303 427.162 783.163 427.402 781.843 427.402 cv
780.163 427.402 778.813 426.952 777.823 426.022 cv
776.833 425.092 776.353 423.832 776.353 422.242 cv
776.353 420.412 776.953 419.032 778.213 418.072 cv
779.443 417.142 781.273 416.662 783.733 416.662 cv
787.513 416.662 li
787.513 416.392 li
787.513 415.162 787.093 414.202 786.283 413.512 cv
785.473 412.852 784.333 412.492 782.863 412.492 cv
781.903 412.492 781.003 412.612 780.103 412.852 cv
779.203 413.092 778.363 413.422 777.553 413.842 cv
777.553 411.352 li
778.513 410.992 779.473 410.692 780.403 410.512 cv
781.333 410.332 782.233 410.212 783.133 410.212 cv
785.503 410.212 787.273 410.842 788.443 412.072 cv
789.613 413.302 790.213 415.162 790.213 417.652 cv
f
798.433 405.952 mo
798.433 410.602 li
803.983 410.602 li
803.983 412.702 li
798.433 412.702 li
798.433 421.612 li
798.433 422.962 798.613 423.832 798.973 424.192 cv
799.333 424.582 800.083 424.762 801.223 424.762 cv
803.983 424.762 li
803.983 427.012 li
801.223 427.012 li
799.123 427.012 797.683 426.622 796.903 425.842 cv
796.123 425.062 795.733 423.652 795.733 421.612 cv
795.733 412.702 li
793.753 412.702 li
793.753 410.602 li
795.733 410.602 li
795.733 405.952 li
798.433 405.952 li
f
807.523 410.602 mo
810.223 410.602 li
810.223 427.012 li
807.523 427.012 li
807.523 410.602 li
807.523 404.212 mo
810.223 404.212 li
810.223 407.632 li
807.523 407.632 li
807.523 404.212 li
f
822.223 412.492 mo
820.783 412.492 819.643 413.062 818.803 414.202 cv
817.963 415.342 817.543 416.872 817.543 418.822 cv
817.543 420.802 817.933 422.332 818.773 423.472 cv
819.613 424.612 820.753 425.152 822.223 425.152 cv
823.663 425.152 824.803 424.612 825.643 423.472 cv
826.483 422.332 826.903 420.802 826.903 418.822 cv
826.903 416.902 826.483 415.342 825.643 414.202 cv
824.803 413.062 823.663 412.492 822.223 412.492 cv
822.223 410.212 mo
824.563 410.212 826.393 410.992 827.743 412.492 cv
829.063 414.022 829.753 416.122 829.753 418.822 cv
829.753 421.522 829.063 423.622 827.743 425.122 cv
826.393 426.652 824.563 427.402 822.223 427.402 cv
819.853 427.402 817.993 426.652 816.673 425.122 cv
815.353 423.622 814.693 421.522 814.693 418.822 cv
814.693 416.122 815.353 414.022 816.673 412.492 cv
817.993 410.992 819.853 410.212 822.223 410.212 cv
f
847.873 417.112 mo
847.873 427.012 li
845.173 427.012 li
845.173 417.202 li
845.173 415.642 844.843 414.502 844.243 413.722 cv
843.643 412.942 842.743 412.552 841.543 412.552 cv
840.073 412.552 838.933 413.032 838.093 413.962 cv
837.253 414.892 836.833 416.152 836.833 417.742 cv
836.833 427.012 li
834.133 427.012 li
834.133 410.602 li
836.833 410.602 li
836.833 413.152 li
837.463 412.192 838.213 411.442 839.113 410.962 cv
839.983 410.482 841.003 410.212 842.143 410.212 cv
844.003 410.212 845.443 410.812 846.403 411.982 cv
847.363 413.152 847.873 414.862 847.873 417.112 cv
f
869.263 404.242 mo
867.943 406.522 866.983 408.742 866.353 410.932 cv
865.693 413.122 865.393 415.342 865.393 417.592 cv
865.393 419.872 865.693 422.092 866.353 424.282 cv
866.983 426.502 867.943 428.692 869.263 430.942 cv
866.923 430.942 li
865.453 428.632 864.343 426.412 863.622 424.192 cv
862.903 421.972 862.543 419.782 862.543 417.592 cv
862.543 415.432 862.903 413.242 863.622 411.022 cv
864.343 408.802 865.423 406.552 866.923 404.242 cv
869.263 404.242 li
f
871.603 405.142 mo
890.083 405.142 li
890.083 407.632 li
882.313 407.632 li
882.313 427.012 li
879.343 427.012 li
879.343 407.632 li
871.603 407.632 li
871.603 405.142 li
f
902.322 413.122 mo
902.022 412.942 901.692 412.822 901.332 412.732 cv
900.972 412.672 900.582 412.612 900.162 412.612 cv
898.632 412.612 897.462 413.122 896.652 414.112 cv
895.812 415.102 895.422 416.512 895.422 418.372 cv
895.422 427.012 li
892.722 427.012 li
892.722 410.602 li
895.422 410.602 li
895.422 413.152 li
895.962 412.162 896.712 411.412 897.612 410.932 cv
898.512 410.452 899.622 410.212 900.942 410.212 cv
901.122 410.212 901.332 410.242 901.572 410.242 cv
901.782 410.272 902.022 410.302 902.322 410.362 cv
902.322 413.122 li
f
912.612 418.762 mo
910.422 418.762 908.922 419.032 908.082 419.512 cv
907.242 420.022 906.822 420.862 906.822 422.062 cv
906.822 423.022 907.122 423.802 907.752 424.342 cv
908.382 424.912 909.252 425.182 910.332 425.182 cv
911.832 425.182 913.032 424.672 913.932 423.592 cv
914.832 422.542 915.282 421.132 915.282 419.362 cv
915.282 418.762 li
912.612 418.762 li
917.982 417.652 mo
917.982 427.012 li
915.282 427.012 li
915.282 424.522 li
914.652 425.542 913.872 426.262 912.972 426.712 cv
912.072 427.162 910.932 427.402 909.612 427.402 cv
907.932 427.402 906.582 426.952 905.592 426.022 cv
904.602 425.092 904.122 423.832 904.122 422.242 cv
904.122 420.412 904.722 419.032 905.982 418.072 cv
907.212 417.142 909.042 416.662 911.502 416.662 cv
915.282 416.662 li
915.282 416.392 li
915.282 415.162 914.862 414.202 914.052 413.512 cv
913.242 412.852 912.102 412.492 910.632 412.492 cv
909.672 412.492 908.772 412.612 907.872 412.852 cv
906.972 413.092 906.132 413.422 905.322 413.842 cv
905.322 411.352 li
906.282 410.992 907.242 410.692 908.172 410.512 cv
909.102 410.332 910.002 410.212 910.902 410.212 cv
913.272 410.212 915.042 410.842 916.212 412.072 cv
917.382 413.302 917.982 415.162 917.982 417.652 cv
f
923.532 410.602 mo
926.232 410.602 li
926.232 427.012 li
923.532 427.012 li
923.532 410.602 li
923.532 404.212 mo
926.232 404.212 li
926.232 407.632 li
923.532 407.632 li
923.532 404.212 li
f
945.522 417.112 mo
945.522 427.012 li
942.822 427.012 li
942.822 417.202 li
942.822 415.642 942.492 414.502 941.892 413.722 cv
941.292 412.942 940.392 412.552 939.192 412.552 cv
937.722 412.552 936.582 413.032 935.742 413.962 cv
934.902 414.892 934.482 416.152 934.482 417.742 cv
934.482 427.012 li
931.782 427.012 li
931.782 410.602 li
934.482 410.602 li
934.482 413.152 li
935.112 412.192 935.862 411.442 936.762 410.962 cv
937.632 410.482 938.652 410.212 939.792 410.212 cv
941.652 410.212 943.092 410.812 944.052 411.982 cv
945.012 413.152 945.522 414.862 945.522 417.112 cv
f
950.892 410.602 mo
953.593 410.602 li
953.593 427.012 li
950.892 427.012 li
950.892 410.602 li
950.892 404.212 mo
953.593 404.212 li
953.593 407.632 li
950.892 407.632 li
950.892 404.212 li
f
972.882 417.112 mo
972.882 427.012 li
970.182 427.012 li
970.182 417.202 li
970.182 415.642 969.852 414.502 969.252 413.722 cv
968.652 412.942 967.752 412.552 966.552 412.552 cv
965.083 412.552 963.943 413.032 963.102 413.962 cv
962.262 414.892 961.843 416.152 961.843 417.742 cv
961.843 427.012 li
959.142 427.012 li
959.142 410.602 li
961.843 410.602 li
961.843 413.152 li
962.473 412.192 963.223 411.442 964.122 410.962 cv
964.992 410.482 966.012 410.212 967.152 410.212 cv
969.012 410.212 970.453 410.812 971.412 411.982 cv
972.372 413.152 972.882 414.862 972.882 417.112 cv
f
989.052 418.612 mo
989.052 416.692 988.632 415.162 987.853 414.082 cv
987.042 413.002 985.902 412.462 984.463 412.462 cv
983.022 412.462 981.882 413.002 981.073 414.082 cv
980.262 415.162 979.872 416.692 979.872 418.612 cv
979.872 420.562 980.262 422.062 981.073 423.142 cv
981.882 424.222 983.022 424.762 984.463 424.762 cv
985.902 424.762 987.042 424.222 987.853 423.142 cv
988.632 422.062 989.052 420.562 989.052 418.612 cv
991.752 424.972 mo
991.752 427.732 991.122 429.802 989.892 431.182 cv
988.632 432.532 986.743 433.222 984.193 433.222 cv
983.233 433.222 982.363 433.132 981.522 433.012 cv
980.682 432.862 979.843 432.652 979.063 432.352 cv
979.063 429.742 li
979.843 430.162 980.622 430.462 981.402 430.672 cv
982.182 430.882 982.963 431.002 983.772 431.002 cv
985.512 431.002 986.833 430.522 987.733 429.622 cv
988.603 428.692 989.052 427.312 989.052 425.452 cv
989.052 424.132 li
988.483 425.092 987.762 425.812 986.892 426.292 cv
986.022 426.772 985.002 427.012 983.802 427.012 cv
981.762 427.012 980.142 426.262 978.912 424.732 cv
977.682 423.202 977.083 421.162 977.083 418.612 cv
977.083 416.092 977.682 414.052 978.912 412.522 cv
980.142 410.992 981.762 410.212 983.802 410.212 cv
985.002 410.212 986.022 410.452 986.892 410.932 cv
987.762 411.412 988.483 412.132 989.052 413.092 cv
989.052 410.602 li
991.752 410.602 li
991.752 424.972 li
f
997.992 423.292 mo
1001.08 423.292 li
1001.08 425.812 li
998.682 430.462 li
996.792 430.462 li
997.992 425.812 li
997.992 423.292 li
f
1029.61 405.862 mo
1029.61 408.742 li
1028.47 408.202 1027.42 407.812 1026.43 407.542 cv
1025.41 407.302 1024.45 407.152 1023.55 407.152 cv
1021.93 407.152 1020.67 407.482 1019.8 408.082 cv
1018.93 408.712 1018.51 409.612 1018.51 410.752 cv
1018.51 411.712 1018.78 412.462 1019.38 412.942 cv
1019.95 413.452 1021.06 413.842 1022.68 414.142 cv
1024.48 414.502 li
1026.67 414.922 1028.29 415.672 1029.34 416.722 cv
1030.39 417.802 1030.93 419.212 1030.93 420.982 cv
1030.93 423.112 1030.21 424.702 1028.8 425.782 cv
1027.36 426.862 1025.29 427.402 1022.56 427.402 cv
1021.51 427.402 1020.4 427.282 1019.23 427.072 cv
1018.06 426.862 1016.86 426.532 1015.63 426.052 cv
1015.63 422.992 li
1016.83 423.682 1018 424.192 1019.14 424.522 cv
1020.28 424.882 1021.42 425.032 1022.56 425.032 cv
1024.24 425.032 1025.53 424.702 1026.46 424.042 cv
1027.36 423.382 1027.84 422.452 1027.84 421.192 cv
1027.84 420.112 1027.51 419.272 1026.85 418.672 cv
1026.19 418.072 1025.11 417.622 1023.61 417.322 cv
1021.81 416.962 li
1019.59 416.542 1018 415.852 1017.01 414.892 cv
1016.02 413.962 1015.54 412.672 1015.54 410.992 cv
1015.54 409.072 1016.2 407.542 1017.58 406.432 cv
1018.93 405.322 1020.82 404.752 1023.22 404.752 cv
1024.24 404.752 1025.26 404.842 1026.34 405.022 cv
1027.39 405.202 1028.47 405.502 1029.61 405.862 cv
f
1035.43 410.602 mo
1038.13 410.602 li
1038.13 427.012 li
1035.43 427.012 li
1035.43 410.602 li
1035.43 404.212 mo
1038.13 404.212 li
1038.13 407.632 li
1035.43 407.632 li
1035.43 404.212 li
f
1054.57 418.612 mo
1054.57 416.692 1054.15 415.162 1053.37 414.082 cv
1052.56 413.002 1051.42 412.462 1049.98 412.462 cv
1048.54 412.462 1047.4 413.002 1046.59 414.082 cv
1045.78 415.162 1045.39 416.692 1045.39 418.612 cv
1045.39 420.562 1045.78 422.062 1046.59 423.142 cv
1047.4 424.222 1048.54 424.762 1049.98 424.762 cv
1051.42 424.762 1052.56 424.222 1053.37 423.142 cv
1054.15 422.062 1054.57 420.562 1054.57 418.612 cv
1057.27 424.972 mo
1057.27 427.732 1056.64 429.802 1055.41 431.182 cv
1054.15 432.532 1052.26 433.222 1049.71 433.222 cv
1048.75 433.222 1047.88 433.132 1047.04 433.012 cv
1046.2 432.862 1045.36 432.652 1044.58 432.352 cv
1044.58 429.742 li
1045.36 430.162 1046.14 430.462 1046.92 430.672 cv
1047.7 430.882 1048.48 431.002 1049.29 431.002 cv
1051.03 431.002 1052.35 430.522 1053.25 429.622 cv
1054.12 428.692 1054.57 427.312 1054.57 425.452 cv
1054.57 424.132 li
1054 425.092 1053.28 425.812 1052.41 426.292 cv
1051.54 426.772 1050.52 427.012 1049.32 427.012 cv
1047.28 427.012 1045.66 426.262 1044.43 424.732 cv
1043.2 423.202 1042.6 421.162 1042.6 418.612 cv
1042.6 416.092 1043.2 414.052 1044.43 412.522 cv
1045.66 410.992 1047.28 410.212 1049.32 410.212 cv
1050.52 410.212 1051.54 410.452 1052.41 410.932 cv
1053.28 411.412 1054 412.132 1054.57 413.092 cv
1054.57 410.602 li
1057.27 410.602 li
1057.27 424.972 li
f
1075.6 413.752 mo
1076.26 412.552 1077.07 411.682 1078 411.082 cv
1078.93 410.512 1080.04 410.212 1081.33 410.212 cv
1083.01 410.212 1084.33 410.812 1085.26 412.012 cv
1086.19 413.212 1086.67 414.922 1086.67 417.112 cv
1086.67 427.012 li
1083.97 427.012 li
1083.97 417.202 li
1083.97 415.642 1083.67 414.472 1083.13 413.692 cv
1082.56 412.942 1081.72 412.552 1080.58 412.552 cv
1079.17 412.552 1078.06 413.032 1077.25 413.962 cv
1076.44 414.892 1076.05 416.152 1076.05 417.742 cv
1076.05 427.012 li
1073.35 427.012 li
1073.35 417.202 li
1073.35 415.642 1073.05 414.472 1072.51 413.692 cv
1071.94 412.942 1071.07 412.552 1069.93 412.552 cv
1068.55 412.552 1067.44 413.032 1066.63 413.962 cv
1065.82 414.892 1065.43 416.152 1065.43 417.742 cv
1065.43 427.012 li
1062.73 427.012 li
1062.73 410.602 li
1065.43 410.602 li
1065.43 413.152 li
1066.03 412.162 1066.78 411.412 1067.65 410.932 cv
1068.49 410.452 1069.51 410.212 1070.71 410.212 cv
1071.91 410.212 1072.9 410.512 1073.74 411.112 cv
1074.58 411.712 1075.18 412.612 1075.6 413.752 cv
f
1098.4 412.492 mo
1096.96 412.492 1095.82 413.062 1094.98 414.202 cv
1094.14 415.342 1093.72 416.872 1093.72 418.822 cv
1093.72 420.802 1094.11 422.332 1094.95 423.472 cv
1095.79 424.612 1096.93 425.152 1098.4 425.152 cv
1099.84 425.152 1100.98 424.612 1101.82 423.472 cv
1102.66 422.332 1103.08 420.802 1103.08 418.822 cv
1103.08 416.902 1102.66 415.342 1101.82 414.202 cv
1100.98 413.062 1099.84 412.492 1098.4 412.492 cv
1098.4 410.212 mo
1100.74 410.212 1102.57 410.992 1103.92 412.492 cv
1105.24 414.022 1105.93 416.122 1105.93 418.822 cv
1105.93 421.522 1105.24 423.622 1103.92 425.122 cv
1102.57 426.652 1100.74 427.402 1098.4 427.402 cv
1096.03 427.402 1094.17 426.652 1092.85 425.122 cv
1091.53 423.622 1090.87 421.522 1090.87 418.822 cv
1090.87 416.122 1091.53 414.022 1092.85 412.492 cv
1094.17 410.992 1096.03 410.212 1098.4 410.212 cv
f
1110.4 410.602 mo
1113.1 410.602 li
1113.1 427.012 li
1110.4 427.012 li
1110.4 410.602 li
1110.4 404.212 mo
1113.1 404.212 li
1113.1 407.632 li
1110.4 407.632 li
1110.4 404.212 li
f
1129.54 413.092 mo
1129.54 404.212 li
1132.24 404.212 li
1132.24 427.012 li
1129.54 427.012 li
1129.54 424.552 li
1128.97 425.542 1128.25 426.262 1127.38 426.712 cv
1126.51 427.162 1125.49 427.402 1124.29 427.402 cv
1122.31 427.402 1120.69 426.622 1119.43 425.062 cv
1118.17 423.502 1117.57 421.402 1117.57 418.822 cv
1117.57 416.242 1118.17 414.172 1119.43 412.582 cv
1120.69 411.022 1122.31 410.212 1124.29 410.212 cv
1125.49 410.212 1126.51 410.452 1127.38 410.932 cv
1128.25 411.412 1128.97 412.132 1129.54 413.092 cv
1120.36 418.822 mo
1120.36 420.802 1120.75 422.362 1121.56 423.502 cv
1122.37 424.642 1123.51 425.182 1124.95 425.182 cv
1126.36 425.182 1127.47 424.642 1128.31 423.502 cv
1129.12 422.362 1129.54 420.802 1129.54 418.822 cv
1129.54 416.842 1129.12 415.312 1128.31 414.172 cv
1127.47 413.032 1126.36 412.462 1124.95 412.462 cv
1123.51 412.462 1122.37 413.032 1121.56 414.172 cv
1120.75 415.312 1120.36 416.842 1120.36 418.822 cv
f
1137.37 404.242 mo
1139.71 404.242 li
1141.15 406.552 1142.26 408.802 1142.98 411.022 cv
1143.7 413.242 1144.09 415.432 1144.09 417.592 cv
1144.09 419.782 1143.7 421.972 1142.98 424.192 cv
1142.26 426.412 1141.15 428.632 1139.71 430.942 cv
1137.37 430.942 li
1138.66 428.692 1139.62 426.502 1140.28 424.282 cv
1140.91 422.092 1141.24 419.872 1141.24 417.592 cv
1141.24 415.342 1140.91 413.122 1140.28 410.932 cv
1139.62 408.742 1138.66 406.522 1137.37 404.242 cv
f
557.943 457.543 mo
577.943 457.543 li
0 1 1 0 cmyk
@
564.943 460.543 mo
570.943 454.543 li
564.943 454.543 mo
570.943 460.543 li
f
1 lw
0 lc
564.943 460.543 mo
570.943 454.543 li
564.943 454.543 mo
570.943 460.543 li
@
591.853 450.603 mo
591.853 458.613 li
596.593 458.613 li
598.183 458.613 599.353 458.283 600.133 457.623 cv
600.883 456.963 601.273 455.973 601.273 454.593 cv
601.273 453.243 600.883 452.253 600.133 451.593 cv
599.353 450.933 598.183 450.603 596.593 450.603 cv
591.853 450.603 li
591.853 441.603 mo
591.853 448.203 li
596.233 448.203 li
597.673 448.203 598.723 447.933 599.443 447.393 cv
600.163 446.853 600.523 446.043 600.523 444.903 cv
600.523 443.823 600.163 442.983 599.443 442.443 cv
598.723 441.903 597.673 441.603 596.233 441.603 cv
591.853 441.603 li
588.883 439.173 mo
596.443 439.173 li
598.693 439.173 600.433 439.653 601.663 440.583 cv
602.863 441.543 603.493 442.863 603.493 444.573 cv
603.493 445.923 603.163 447.003 602.533 447.783 cv
601.903 448.563 601.003 449.073 599.803 449.253 cv
601.243 449.583 602.383 450.243 603.193 451.233 cv
603.973 452.223 604.393 453.453 604.393 454.923 cv
604.393 456.903 603.703 458.403 602.383 459.453 cv
601.063 460.533 599.173 461.043 596.743 461.043 cv
588.883 461.043 li
588.883 439.173 li
1 /0 /CSD get_res sepcs
1 sep
f
616.813 452.793 mo
614.623 452.793 613.123 453.063 612.283 453.543 cv
611.443 454.053 611.023 454.893 611.023 456.093 cv
611.023 457.053 611.323 457.833 611.953 458.373 cv
612.583 458.943 613.453 459.213 614.533 459.213 cv
616.033 459.213 617.233 458.703 618.133 457.623 cv
619.033 456.573 619.483 455.163 619.483 453.393 cv
619.483 452.793 li
616.813 452.793 li
622.183 451.683 mo
622.183 461.043 li
619.483 461.043 li
619.483 458.553 li
618.853 459.573 618.073 460.293 617.173 460.743 cv
616.273 461.193 615.133 461.433 613.813 461.433 cv
612.133 461.433 610.783 460.983 609.793 460.053 cv
608.803 459.123 608.323 457.863 608.323 456.273 cv
608.323 454.443 608.923 453.063 610.183 452.103 cv
611.413 451.173 613.243 450.693 615.703 450.693 cv
619.483 450.693 li
619.483 450.423 li
619.483 449.193 619.063 448.233 618.253 447.543 cv
617.443 446.883 616.303 446.523 614.833 446.523 cv
613.873 446.523 612.973 446.643 612.073 446.883 cv
611.173 447.123 610.333 447.453 609.523 447.873 cv
609.523 445.383 li
610.483 445.023 611.443 444.723 612.373 444.543 cv
613.303 444.363 614.203 444.243 615.103 444.243 cv
617.473 444.243 619.243 444.873 620.413 446.103 cv
621.583 447.333 622.183 449.193 622.183 451.683 cv
f
639.553 445.263 mo
639.553 447.783 li
638.773 447.363 638.023 447.063 637.243 446.853 cv
636.463 446.643 635.713 446.523 634.933 446.523 cv
633.193 446.523 631.813 447.093 630.853 448.203 cv
629.893 449.313 629.413 450.873 629.413 452.853 cv
629.413 454.863 629.893 456.423 630.853 457.533 cv
631.813 458.643 633.193 459.183 634.933 459.183 cv
635.713 459.183 636.463 459.093 637.243 458.883 cv
638.023 458.673 638.773 458.343 639.553 457.923 cv
639.553 460.413 li
638.773 460.773 637.993 461.043 637.213 461.193 cv
636.403 461.343 635.533 461.433 634.633 461.433 cv
632.173 461.433 630.193 460.683 628.753 459.123 cv
627.283 457.593 626.563 455.493 626.563 452.853 cv
626.563 450.183 627.283 448.083 628.753 446.553 cv
630.223 445.023 632.233 444.243 634.813 444.243 cv
635.653 444.243 636.463 444.333 637.243 444.513 cv
638.023 444.693 638.803 444.933 639.553 445.263 cv
f
644.143 438.243 mo
646.843 438.243 li
646.843 451.713 li
654.883 444.633 li
658.333 444.633 li
649.633 452.313 li
658.693 461.043 li
655.183 461.043 li
646.843 453.033 li
646.843 461.043 li
644.143 461.043 li
644.143 438.243 li
f
673.753 458.583 mo
673.753 467.253 li
671.053 467.253 li
671.053 444.633 li
673.753 444.633 li
673.753 447.123 li
674.293 446.163 675.013 445.443 675.883 444.963 cv
676.753 444.483 677.803 444.243 679.003 444.243 cv
680.983 444.243 682.603 445.053 683.863 446.613 cv
685.093 448.203 685.723 450.273 685.723 452.853 cv
685.723 455.433 685.093 457.533 683.863 459.093 cv
682.603 460.653 680.983 461.433 679.003 461.433 cv
677.803 461.433 676.753 461.193 675.883 460.743 cv
675.013 460.293 674.293 459.573 673.753 458.583 cv
682.933 452.853 mo
682.933 450.873 682.513 449.343 681.703 448.203 cv
680.863 447.063 679.753 446.493 678.343 446.493 cv
676.903 446.493 675.793 447.063 674.983 448.203 cv
674.143 449.343 673.753 450.873 673.753 452.853 cv
673.753 454.833 674.143 456.393 674.983 457.533 cv
675.793 458.673 676.903 459.213 678.343 459.213 cv
679.753 459.213 680.863 458.673 681.703 457.533 cv
682.513 456.393 682.933 454.833 682.933 452.853 cv
f
699.703 447.153 mo
699.403 446.973 699.073 446.853 698.713 446.763 cv
698.353 446.703 697.963 446.643 697.543 446.643 cv
696.013 446.643 694.843 447.153 694.033 448.143 cv
693.193 449.133 692.803 450.543 692.803 452.403 cv
692.803 461.043 li
690.103 461.043 li
690.103 444.633 li
692.803 444.633 li
692.803 447.183 li
693.343 446.193 694.093 445.443 694.993 444.963 cv
695.893 444.483 697.003 444.243 698.323 444.243 cv
698.503 444.243 698.713 444.273 698.953 444.273 cv
699.163 444.303 699.403 444.333 699.703 444.393 cv
699.703 447.153 li
f
708.883 446.523 mo
707.443 446.523 706.303 447.093 705.463 448.233 cv
704.623 449.373 704.203 450.903 704.203 452.853 cv
704.203 454.833 704.593 456.363 705.433 457.503 cv
706.273 458.643 707.413 459.183 708.883 459.183 cv
710.323 459.183 711.463 458.643 712.303 457.503 cv
713.143 456.363 713.563 454.833 713.563 452.853 cv
713.563 450.933 713.143 449.373 712.303 448.233 cv
711.463 447.093 710.323 446.523 708.883 446.523 cv
708.883 444.243 mo
711.223 444.243 713.053 445.023 714.403 446.523 cv
715.723 448.053 716.413 450.153 716.413 452.853 cv
716.413 455.553 715.723 457.653 714.403 459.153 cv
713.053 460.683 711.223 461.433 708.883 461.433 cv
706.513 461.433 704.653 460.683 703.333 459.153 cv
702.013 457.653 701.353 455.553 701.353 452.853 cv
701.353 450.153 702.013 448.053 703.333 446.523 cv
704.653 445.023 706.513 444.243 708.883 444.243 cv
f
723.493 458.583 mo
723.493 467.253 li
720.793 467.253 li
720.793 444.633 li
723.493 444.633 li
723.493 447.123 li
724.033 446.163 724.753 445.443 725.623 444.963 cv
726.493 444.483 727.543 444.243 728.743 444.243 cv
730.723 444.243 732.343 445.053 733.603 446.613 cv
734.833 448.203 735.463 450.273 735.463 452.853 cv
735.463 455.433 734.833 457.533 733.603 459.093 cv
732.343 460.653 730.723 461.433 728.743 461.433 cv
727.543 461.433 726.493 461.193 725.623 460.743 cv
724.753 460.293 724.033 459.573 723.493 458.583 cv
732.673 452.853 mo
732.673 450.873 732.253 449.343 731.443 448.203 cv
730.603 447.063 729.493 446.493 728.083 446.493 cv
726.643 446.493 725.533 447.063 724.723 448.203 cv
723.883 449.343 723.493 450.873 723.493 452.853 cv
723.493 454.833 723.883 456.393 724.723 457.533 cv
725.533 458.673 726.643 459.213 728.083 459.213 cv
729.493 459.213 730.603 458.673 731.443 457.533 cv
732.253 456.393 732.673 454.833 732.673 452.853 cv
f
747.403 452.793 mo
745.213 452.793 743.713 453.063 742.873 453.543 cv
742.033 454.053 741.613 454.893 741.613 456.093 cv
741.613 457.053 741.913 457.833 742.543 458.373 cv
743.173 458.943 744.043 459.213 745.123 459.213 cv
746.623 459.213 747.823 458.703 748.723 457.623 cv
749.623 456.573 750.073 455.163 750.073 453.393 cv
750.073 452.793 li
747.403 452.793 li
752.773 451.683 mo
752.773 461.043 li
750.073 461.043 li
750.073 458.553 li
749.443 459.573 748.663 460.293 747.763 460.743 cv
746.863 461.193 745.723 461.433 744.403 461.433 cv
742.723 461.433 741.373 460.983 740.383 460.053 cv
739.393 459.123 738.913 457.863 738.913 456.273 cv
738.913 454.443 739.513 453.063 740.773 452.103 cv
742.003 451.173 743.833 450.693 746.293 450.693 cv
750.073 450.693 li
750.073 450.423 li
750.073 449.193 749.653 448.233 748.843 447.543 cv
748.033 446.883 746.893 446.523 745.423 446.523 cv
744.463 446.523 743.563 446.643 742.663 446.883 cv
741.763 447.123 740.923 447.453 740.113 447.873 cv
740.113 445.383 li
741.073 445.023 742.033 444.723 742.963 444.543 cv
743.893 444.363 744.793 444.243 745.693 444.243 cv
748.063 444.243 749.833 444.873 751.003 446.103 cv
752.173 447.333 752.773 449.193 752.773 451.683 cv
f
769.123 452.643 mo
769.123 450.723 768.703 449.193 767.923 448.113 cv
767.113 447.033 765.973 446.493 764.533 446.493 cv
763.093 446.493 761.953 447.033 761.143 448.113 cv
760.333 449.193 759.943 450.723 759.943 452.643 cv
759.943 454.593 760.333 456.093 761.143 457.173 cv
761.953 458.253 763.093 458.793 764.533 458.793 cv
765.973 458.793 767.113 458.253 767.923 457.173 cv
768.703 456.093 769.123 454.593 769.123 452.643 cv
771.823 459.003 mo
771.823 461.763 771.193 463.833 769.963 465.213 cv
768.703 466.563 766.813 467.253 764.263 467.253 cv
763.303 467.253 762.433 467.163 761.593 467.043 cv
760.753 466.893 759.913 466.683 759.133 466.383 cv
759.133 463.773 li
759.913 464.193 760.693 464.493 761.473 464.703 cv
762.253 464.913 763.033 465.033 763.843 465.033 cv
765.583 465.033 766.903 464.553 767.803 463.653 cv
768.673 462.723 769.123 461.343 769.123 459.483 cv
769.123 458.163 li
768.553 459.123 767.833 459.843 766.963 460.323 cv
766.093 460.803 765.073 461.043 763.873 461.043 cv
761.833 461.043 760.213 460.293 758.983 458.763 cv
757.753 457.233 757.153 455.193 757.153 452.643 cv
757.153 450.123 757.753 448.083 758.983 446.553 cv
760.213 445.023 761.833 444.243 763.873 444.243 cv
765.073 444.243 766.093 444.483 766.963 444.963 cv
767.833 445.443 768.553 446.163 769.123 447.123 cv
769.123 444.633 li
771.823 444.633 li
771.823 459.003 li
f
784.843 452.793 mo
782.653 452.793 781.153 453.063 780.313 453.543 cv
779.473 454.053 779.053 454.893 779.053 456.093 cv
779.053 457.053 779.353 457.833 779.983 458.373 cv
780.613 458.943 781.483 459.213 782.563 459.213 cv
784.063 459.213 785.263 458.703 786.163 457.623 cv
787.063 456.573 787.513 455.163 787.513 453.393 cv
787.513 452.793 li
784.843 452.793 li
790.213 451.683 mo
790.213 461.043 li
787.513 461.043 li
787.513 458.553 li
786.883 459.573 786.103 460.293 785.203 460.743 cv
784.303 461.193 783.163 461.433 781.843 461.433 cv
780.163 461.433 778.813 460.983 777.823 460.053 cv
776.833 459.123 776.353 457.863 776.353 456.273 cv
776.353 454.443 776.953 453.063 778.213 452.103 cv
779.443 451.173 781.273 450.693 783.733 450.693 cv
787.513 450.693 li
787.513 450.423 li
787.513 449.193 787.093 448.233 786.283 447.543 cv
785.473 446.883 784.333 446.523 782.863 446.523 cv
781.903 446.523 781.003 446.643 780.103 446.883 cv
779.203 447.123 778.363 447.453 777.553 447.873 cv
777.553 445.383 li
778.513 445.023 779.473 444.723 780.403 444.543 cv
781.333 444.363 782.233 444.243 783.133 444.243 cv
785.503 444.243 787.273 444.873 788.443 446.103 cv
789.613 447.333 790.213 449.193 790.213 451.683 cv
f
798.433 439.983 mo
798.433 444.633 li
803.983 444.633 li
803.983 446.733 li
798.433 446.733 li
798.433 455.643 li
798.433 456.993 798.613 457.863 798.973 458.223 cv
799.333 458.613 800.083 458.793 801.223 458.793 cv
803.983 458.793 li
803.983 461.043 li
801.223 461.043 li
799.123 461.043 797.683 460.653 796.903 459.873 cv
796.123 459.093 795.733 457.683 795.733 455.643 cv
795.733 446.733 li
793.753 446.733 li
793.753 444.633 li
795.733 444.633 li
795.733 439.983 li
798.433 439.983 li
f
807.523 444.633 mo
810.223 444.633 li
810.223 461.043 li
807.523 461.043 li
807.523 444.633 li
807.523 438.243 mo
810.223 438.243 li
810.223 441.663 li
807.523 441.663 li
807.523 438.243 li
f
822.223 446.523 mo
820.783 446.523 819.643 447.093 818.803 448.233 cv
817.963 449.373 817.543 450.903 817.543 452.853 cv
817.543 454.833 817.933 456.363 818.773 457.503 cv
819.613 458.643 820.753 459.183 822.223 459.183 cv
823.663 459.183 824.803 458.643 825.643 457.503 cv
826.483 456.363 826.903 454.833 826.903 452.853 cv
826.903 450.933 826.483 449.373 825.643 448.233 cv
824.803 447.093 823.663 446.523 822.223 446.523 cv
822.223 444.243 mo
824.563 444.243 826.393 445.023 827.743 446.523 cv
829.063 448.053 829.753 450.153 829.753 452.853 cv
829.753 455.553 829.063 457.653 827.743 459.153 cv
826.393 460.683 824.563 461.433 822.223 461.433 cv
819.853 461.433 817.993 460.683 816.673 459.153 cv
815.353 457.653 814.693 455.553 814.693 452.853 cv
814.693 450.153 815.353 448.053 816.673 446.523 cv
817.993 445.023 819.853 444.243 822.223 444.243 cv
f
847.873 451.143 mo
847.873 461.043 li
845.173 461.043 li
845.173 451.233 li
845.173 449.673 844.843 448.533 844.243 447.753 cv
843.643 446.973 842.743 446.583 841.543 446.583 cv
840.073 446.583 838.933 447.063 838.093 447.993 cv
837.253 448.923 836.833 450.183 836.833 451.773 cv
836.833 461.043 li
834.133 461.043 li
834.133 444.633 li
836.833 444.633 li
836.833 447.183 li
837.463 446.223 838.213 445.473 839.113 444.993 cv
839.983 444.513 841.003 444.243 842.143 444.243 cv
844.003 444.243 845.443 444.843 846.403 446.013 cv
847.363 447.183 847.873 448.893 847.873 451.143 cv
f
869.263 438.273 mo
867.943 440.553 866.983 442.773 866.353 444.963 cv
865.693 447.153 865.393 449.373 865.393 451.623 cv
865.393 453.903 865.693 456.123 866.353 458.313 cv
866.983 460.533 867.943 462.723 869.263 464.973 cv
866.923 464.973 li
865.453 462.663 864.343 460.443 863.622 458.223 cv
862.903 456.003 862.543 453.813 862.543 451.623 cv
862.543 449.463 862.903 447.273 863.622 445.053 cv
864.343 442.833 865.423 440.583 866.923 438.273 cv
869.263 438.273 li
f
871.603 439.173 mo
890.083 439.173 li
890.083 441.663 li
882.313 441.663 li
882.313 461.043 li
879.343 461.043 li
879.343 441.663 li
871.603 441.663 li
871.603 439.173 li
f
906.852 452.163 mo
906.852 453.483 li
894.462 453.483 li
894.582 455.343 895.122 456.783 896.142 457.743 cv
897.132 458.703 898.512 459.183 900.312 459.183 cv
901.332 459.183 902.352 459.063 903.312 458.823 cv
904.272 458.583 905.262 458.193 906.222 457.653 cv
906.222 460.203 li
905.262 460.623 904.272 460.953 903.252 461.133 cv
902.232 461.313 901.182 461.433 900.162 461.433 cv
897.522 461.433 895.452 460.683 893.922 459.183 cv
892.392 457.683 891.642 455.613 891.642 453.003 cv
891.642 450.333 892.362 448.203 893.802 446.613 cv
895.242 445.053 897.222 444.243 899.682 444.243 cv
901.902 444.243 903.642 444.963 904.932 446.373 cv
906.192 447.813 906.852 449.733 906.852 452.163 cv
904.152 451.383 mo
904.122 449.913 903.702 448.743 902.922 447.843 cv
902.112 446.973 901.032 446.523 899.712 446.523 cv
898.212 446.523 897.012 446.973 896.112 447.813 cv
895.212 448.653 894.672 449.853 894.552 451.383 cv
904.152 451.383 li
f
921.732 445.113 mo
921.732 447.663 li
920.953 447.303 920.172 447.003 919.362 446.793 cv
918.523 446.613 917.682 446.493 916.813 446.493 cv
915.463 446.493 914.443 446.703 913.783 447.123 cv
913.122 447.543 912.792 448.143 912.792 448.953 cv
912.792 449.583 913.033 450.063 913.513 450.423 cv
913.992 450.783 914.953 451.143 916.393 451.443 cv
917.323 451.653 li
919.242 452.073 920.593 452.673 921.403 453.393 cv
922.182 454.143 922.602 455.193 922.602 456.513 cv
922.602 458.043 922.003 459.243 920.802 460.113 cv
919.602 461.013 917.922 461.433 915.823 461.433 cv
914.922 461.433 914.023 461.343 913.063 461.193 cv
912.102 461.043 911.112 460.803 910.063 460.443 cv
910.063 457.653 li
911.052 458.193 912.042 458.583 913.003 458.823 cv
913.963 459.093 914.922 459.213 915.883 459.213 cv
917.143 459.213 918.133 459.003 918.823 458.583 cv
919.482 458.163 919.843 457.533 919.843 456.723 cv
919.843 456.003 919.573 455.433 919.093 455.043 cv
918.612 454.653 917.533 454.263 915.852 453.903 cv
914.922 453.693 li
913.242 453.333 912.013 452.793 911.292 452.073 cv
910.542 451.353 910.182 450.363 910.182 449.073 cv
910.182 447.543 910.723 446.343 911.802 445.503 cv
912.883 444.663 914.443 444.243 916.482 444.243 cv
917.473 444.243 918.403 444.333 919.302 444.483 cv
920.172 444.633 920.982 444.843 921.732 445.113 cv
f
929.562 439.983 mo
929.562 444.633 li
935.112 444.633 li
935.112 446.733 li
929.562 446.733 li
929.562 455.643 li
929.562 456.993 929.742 457.863 930.102 458.223 cv
930.462 458.613 931.212 458.793 932.352 458.793 cv
935.112 458.793 li
935.112 461.043 li
932.352 461.043 li
930.252 461.043 928.812 460.653 928.032 459.873 cv
927.252 459.093 926.862 457.683 926.862 455.643 cv
926.862 446.733 li
924.882 446.733 li
924.882 444.633 li
926.862 444.633 li
926.862 439.983 li
929.562 439.983 li
f
938.652 444.633 mo
941.352 444.633 li
941.352 461.043 li
938.652 461.043 li
938.652 444.633 li
938.652 438.243 mo
941.352 438.243 li
941.352 441.663 li
938.652 441.663 li
938.652 438.243 li
f
960.642 451.143 mo
960.642 461.043 li
957.942 461.043 li
957.942 451.233 li
957.942 449.673 957.612 448.533 957.012 447.753 cv
956.412 446.973 955.512 446.583 954.312 446.583 cv
952.842 446.583 951.702 447.063 950.862 447.993 cv
950.022 448.923 949.602 450.183 949.602 451.773 cv
949.602 461.043 li
946.902 461.043 li
946.902 444.633 li
949.602 444.633 li
949.602 447.183 li
950.232 446.223 950.982 445.473 951.882 444.993 cv
952.752 444.513 953.772 444.243 954.912 444.243 cv
956.772 444.243 958.212 444.843 959.172 446.013 cv
960.132 447.183 960.642 448.893 960.642 451.143 cv
f
976.812 452.643 mo
976.812 450.723 976.392 449.193 975.612 448.113 cv
974.802 447.033 973.662 446.493 972.222 446.493 cv
970.782 446.493 969.642 447.033 968.832 448.113 cv
968.022 449.193 967.632 450.723 967.632 452.643 cv
967.632 454.593 968.022 456.093 968.832 457.173 cv
969.642 458.253 970.782 458.793 972.222 458.793 cv
973.662 458.793 974.802 458.253 975.612 457.173 cv
976.392 456.093 976.812 454.593 976.812 452.643 cv
979.512 459.003 mo
979.512 461.763 978.882 463.833 977.652 465.213 cv
976.392 466.563 974.502 467.253 971.952 467.253 cv
970.992 467.253 970.122 467.163 969.282 467.043 cv
968.442 466.893 967.602 466.683 966.822 466.383 cv
966.822 463.773 li
967.602 464.193 968.382 464.493 969.162 464.703 cv
969.942 464.913 970.722 465.033 971.532 465.033 cv
973.272 465.033 974.592 464.553 975.492 463.653 cv
976.362 462.723 976.812 461.343 976.812 459.483 cv
976.812 458.163 li
976.242 459.123 975.522 459.843 974.652 460.323 cv
973.782 460.803 972.762 461.043 971.562 461.043 cv
969.522 461.043 967.902 460.293 966.672 458.763 cv
965.442 457.233 964.842 455.193 964.842 452.643 cv
964.842 450.123 965.442 448.083 966.672 446.553 cv
967.902 445.023 969.522 444.243 971.562 444.243 cv
972.762 444.243 973.782 444.483 974.652 444.963 cv
975.522 445.443 976.242 446.163 976.812 447.123 cv
976.812 444.633 li
979.512 444.633 li
979.512 459.003 li
f
985.752 457.323 mo
988.842 457.323 li
988.842 459.843 li
986.442 464.493 li
984.552 464.493 li
985.752 459.843 li
985.752 457.323 li
f
1017.37 439.893 mo
1017.37 442.773 li
1016.23 442.233 1015.18 441.843 1014.19 441.573 cv
1013.17 441.333 1012.21 441.183 1011.31 441.183 cv
1009.69 441.183 1008.43 441.513 1007.56 442.113 cv
1006.69 442.743 1006.27 443.643 1006.27 444.783 cv
1006.27 445.743 1006.54 446.493 1007.14 446.973 cv
1007.71 447.483 1008.82 447.873 1010.44 448.173 cv
1012.24 448.533 li
1014.43 448.953 1016.05 449.703 1017.1 450.753 cv
1018.15 451.833 1018.69 453.243 1018.69 455.013 cv
1018.69 457.143 1017.97 458.733 1016.56 459.813 cv
1015.12 460.893 1013.05 461.433 1010.32 461.433 cv
1009.27 461.433 1008.16 461.313 1006.99 461.103 cv
1005.82 460.893 1004.62 460.563 1003.39 460.083 cv
1003.39 457.023 li
1004.59 457.713 1005.76 458.223 1006.9 458.553 cv
1008.04 458.913 1009.18 459.063 1010.32 459.063 cv
1012 459.063 1013.29 458.733 1014.22 458.073 cv
1015.12 457.413 1015.6 456.483 1015.6 455.223 cv
1015.6 454.143 1015.27 453.303 1014.61 452.703 cv
1013.95 452.103 1012.87 451.653 1011.37 451.353 cv
1009.57 450.993 li
1007.35 450.573 1005.76 449.883 1004.77 448.923 cv
1003.78 447.993 1003.3 446.703 1003.3 445.023 cv
1003.3 443.103 1003.96 441.573 1005.34 440.463 cv
1006.69 439.353 1008.58 438.783 1010.98 438.783 cv
1012 438.783 1013.02 438.873 1014.1 439.053 cv
1015.15 439.233 1016.23 439.533 1017.37 439.893 cv
f
1023.19 444.633 mo
1025.89 444.633 li
1025.89 461.043 li
1023.19 461.043 li
1023.19 444.633 li
1023.19 438.243 mo
1025.89 438.243 li
1025.89 441.663 li
1023.19 441.663 li
1023.19 438.243 li
f
1042.33 452.643 mo
1042.33 450.723 1041.91 449.193 1041.13 448.113 cv
1040.32 447.033 1039.18 446.493 1037.74 446.493 cv
1036.3 446.493 1035.16 447.033 1034.35 448.113 cv
1033.54 449.193 1033.15 450.723 1033.15 452.643 cv
1033.15 454.593 1033.54 456.093 1034.35 457.173 cv
1035.16 458.253 1036.3 458.793 1037.74 458.793 cv
1039.18 458.793 1040.32 458.253 1041.13 457.173 cv
1041.91 456.093 1042.33 454.593 1042.33 452.643 cv
1045.03 459.003 mo
1045.03 461.763 1044.4 463.833 1043.17 465.213 cv
1041.91 466.563 1040.02 467.253 1037.47 467.253 cv
1036.51 467.253 1035.64 467.163 1034.8 467.043 cv
1033.96 466.893 1033.12 466.683 1032.34 466.383 cv
1032.34 463.773 li
1033.12 464.193 1033.9 464.493 1034.68 464.703 cv
1035.46 464.913 1036.24 465.033 1037.05 465.033 cv
1038.79 465.033 1040.11 464.553 1041.01 463.653 cv
1041.88 462.723 1042.33 461.343 1042.33 459.483 cv
1042.33 458.163 li
1041.76 459.123 1041.04 459.843 1040.17 460.323 cv
1039.3 460.803 1038.28 461.043 1037.08 461.043 cv
1035.04 461.043 1033.42 460.293 1032.19 458.763 cv
1030.96 457.233 1030.36 455.193 1030.36 452.643 cv
1030.36 450.123 1030.96 448.083 1032.19 446.553 cv
1033.42 445.023 1035.04 444.243 1037.08 444.243 cv
1038.28 444.243 1039.3 444.483 1040.17 444.963 cv
1041.04 445.443 1041.76 446.163 1042.33 447.123 cv
1042.33 444.633 li
1045.03 444.633 li
1045.03 459.003 li
f
1063.36 447.783 mo
1064.02 446.583 1064.83 445.713 1065.76 445.113 cv
1066.69 444.543 1067.8 444.243 1069.09 444.243 cv
1070.77 444.243 1072.09 444.843 1073.02 446.043 cv
1073.95 447.243 1074.43 448.953 1074.43 451.143 cv
1074.43 461.043 li
1071.73 461.043 li
1071.73 451.233 li
1071.73 449.673 1071.43 448.503 1070.89 447.723 cv
1070.32 446.973 1069.48 446.583 1068.34 446.583 cv
1066.93 446.583 1065.82 447.063 1065.01 447.993 cv
1064.2 448.923 1063.81 450.183 1063.81 451.773 cv
1063.81 461.043 li
1061.11 461.043 li
1061.11 451.233 li
1061.11 449.673 1060.81 448.503 1060.27 447.723 cv
1059.7 446.973 1058.83 446.583 1057.69 446.583 cv
1056.31 446.583 1055.2 447.063 1054.39 447.993 cv
1053.58 448.923 1053.19 450.183 1053.19 451.773 cv
1053.19 461.043 li
1050.49 461.043 li
1050.49 444.633 li
1053.19 444.633 li
1053.19 447.183 li
1053.79 446.193 1054.54 445.443 1055.41 444.963 cv
1056.25 444.483 1057.27 444.243 1058.47 444.243 cv
1059.67 444.243 1060.66 444.543 1061.5 445.143 cv
1062.34 445.743 1062.94 446.643 1063.36 447.783 cv
f
1086.16 446.523 mo
1084.72 446.523 1083.58 447.093 1082.74 448.233 cv
1081.9 449.373 1081.48 450.903 1081.48 452.853 cv
1081.48 454.833 1081.87 456.363 1082.71 457.503 cv
1083.55 458.643 1084.69 459.183 1086.16 459.183 cv
1087.6 459.183 1088.74 458.643 1089.58 457.503 cv
1090.42 456.363 1090.84 454.833 1090.84 452.853 cv
1090.84 450.933 1090.42 449.373 1089.58 448.233 cv
1088.74 447.093 1087.6 446.523 1086.16 446.523 cv
1086.16 444.243 mo
1088.5 444.243 1090.33 445.023 1091.68 446.523 cv
1093 448.053 1093.69 450.153 1093.69 452.853 cv
1093.69 455.553 1093 457.653 1091.68 459.153 cv
1090.33 460.683 1088.5 461.433 1086.16 461.433 cv
1083.79 461.433 1081.93 460.683 1080.61 459.153 cv
1079.29 457.653 1078.63 455.553 1078.63 452.853 cv
1078.63 450.153 1079.29 448.053 1080.61 446.523 cv
1081.93 445.023 1083.79 444.243 1086.16 444.243 cv
f
1098.16 444.633 mo
1100.86 444.633 li
1100.86 461.043 li
1098.16 461.043 li
1098.16 444.633 li
1098.16 438.243 mo
1100.86 438.243 li
1100.86 441.663 li
1098.16 441.663 li
1098.16 438.243 li
f
1117.3 447.123 mo
1117.3 438.243 li
1120 438.243 li
1120 461.043 li
1117.3 461.043 li
1117.3 458.583 li
1116.73 459.573 1116.01 460.293 1115.14 460.743 cv
1114.27 461.193 1113.25 461.433 1112.05 461.433 cv
1110.07 461.433 1108.45 460.653 1107.19 459.093 cv
1105.93 457.533 1105.33 455.433 1105.33 452.853 cv
1105.33 450.273 1105.93 448.203 1107.19 446.613 cv
1108.45 445.053 1110.07 444.243 1112.05 444.243 cv
1113.25 444.243 1114.27 444.483 1115.14 444.963 cv
1116.01 445.443 1116.73 446.163 1117.3 447.123 cv
1108.12 452.853 mo
1108.12 454.833 1108.51 456.393 1109.32 457.533 cv
1110.13 458.673 1111.27 459.213 1112.71 459.213 cv
1114.12 459.213 1115.23 458.673 1116.07 457.533 cv
1116.88 456.393 1117.3 454.833 1117.3 452.853 cv
1117.3 450.873 1116.88 449.343 1116.07 448.203 cv
1115.23 447.063 1114.12 446.493 1112.71 446.493 cv
1111.27 446.493 1110.13 447.063 1109.32 448.203 cv
1108.51 449.343 1108.12 450.873 1108.12 452.853 cv
f
1125.13 438.273 mo
1127.47 438.273 li
1128.91 440.583 1130.02 442.833 1130.74 445.053 cv
1131.46 447.273 1131.85 449.463 1131.85 451.623 cv
1131.85 453.813 1131.46 456.003 1130.74 458.223 cv
1130.02 460.443 1128.91 462.663 1127.47 464.973 cv
1125.13 464.973 li
1126.42 462.723 1127.38 460.533 1128.04 458.313 cv
1128.67 456.123 1129 453.903 1129 451.623 cv
1129 449.373 1128.67 447.153 1128.04 444.963 cv
1127.38 442.773 1126.42 440.553 1125.13 438.273 cv
f
1.5 lw
2 lc
557.943 491.574 mo
577.943 491.574 li
@
591.853 475.634 mo
591.853 492.644 li
595.423 492.644 li
598.423 492.644 600.643 491.984 602.053 490.604 cv
603.433 489.224 604.153 487.064 604.153 484.124 cv
604.153 481.184 603.433 479.054 602.053 477.674 cv
600.643 476.324 598.423 475.634 595.423 475.634 cv
591.853 475.634 li
588.883 473.204 mo
594.973 473.204 li
599.203 473.204 602.323 474.104 604.303 475.844 cv
606.283 477.614 607.273 480.374 607.273 484.124 cv
607.273 487.904 606.253 490.664 604.273 492.434 cv
602.293 494.204 599.173 495.074 594.973 495.074 cv
588.883 495.074 li
588.883 473.204 li
f
614.953 484.634 mo
614.953 492.644 li
619.693 492.644 li
621.283 492.644 622.453 492.314 623.233 491.654 cv
623.983 490.994 624.373 490.004 624.373 488.624 cv
624.373 487.274 623.983 486.284 623.233 485.624 cv
622.453 484.964 621.283 484.634 619.693 484.634 cv
614.953 484.634 li
614.953 475.634 mo
614.953 482.234 li
619.333 482.234 li
620.773 482.234 621.823 481.964 622.543 481.424 cv
623.263 480.884 623.623 480.074 623.623 478.934 cv
623.623 477.854 623.263 477.014 622.543 476.474 cv
621.823 475.934 620.773 475.634 619.333 475.634 cv
614.953 475.634 li
611.983 473.204 mo
619.543 473.204 li
621.793 473.204 623.533 473.684 624.763 474.614 cv
625.963 475.574 626.593 476.894 626.593 478.604 cv
626.593 479.954 626.263 481.034 625.633 481.814 cv
625.003 482.594 624.103 483.104 622.903 483.284 cv
624.343 483.614 625.483 484.274 626.293 485.264 cv
627.073 486.254 627.493 487.484 627.493 488.954 cv
627.493 490.934 626.803 492.434 625.483 493.484 cv
624.163 494.564 622.273 495.074 619.843 495.074 cv
611.983 495.074 li
611.983 473.204 li
f
632.563 473.204 mo
636.553 473.204 li
646.243 491.504 li
646.243 473.204 li
649.123 473.204 li
649.123 495.074 li
645.133 495.074 li
635.443 476.774 li
635.443 495.074 li
632.563 495.074 li
632.563 473.204 li
f
670.903 472.304 mo
669.583 474.584 668.623 476.804 667.993 478.994 cv
667.333 481.184 667.033 483.404 667.033 485.654 cv
667.033 487.934 667.333 490.154 667.993 492.344 cv
668.623 494.564 669.583 496.754 670.903 499.004 cv
668.563 499.004 li
667.093 496.694 665.983 494.474 665.263 492.254 cv
664.543 490.034 664.183 487.844 664.183 485.654 cv
664.183 483.494 664.543 481.304 665.263 479.084 cv
665.983 476.864 667.063 474.614 668.563 472.304 cv
670.903 472.304 li
f
673.243 473.204 mo
691.723 473.204 li
691.723 475.694 li
683.953 475.694 li
683.953 495.074 li
680.983 495.074 li
680.983 475.694 li
673.243 475.694 li
673.243 473.204 li
f
703.963 481.184 mo
703.663 481.004 703.333 480.884 702.973 480.794 cv
702.613 480.734 702.223 480.674 701.803 480.674 cv
700.273 480.674 699.103 481.184 698.293 482.174 cv
697.453 483.164 697.063 484.574 697.063 486.434 cv
697.063 495.074 li
694.363 495.074 li
694.363 478.664 li
697.063 478.664 li
697.063 481.214 li
697.603 480.224 698.353 479.474 699.253 478.994 cv
700.153 478.514 701.263 478.274 702.583 478.274 cv
702.763 478.274 702.973 478.304 703.213 478.304 cv
703.423 478.334 703.663 478.364 703.963 478.424 cv
703.963 481.184 li
f
714.253 486.824 mo
712.063 486.824 710.563 487.094 709.723 487.574 cv
708.883 488.084 708.463 488.924 708.463 490.124 cv
708.463 491.084 708.763 491.864 709.393 492.404 cv
710.023 492.974 710.893 493.244 711.973 493.244 cv
713.473 493.244 714.673 492.734 715.573 491.654 cv
716.473 490.604 716.923 489.194 716.923 487.424 cv
716.923 486.824 li
714.253 486.824 li
719.623 485.714 mo
719.623 495.074 li
716.923 495.074 li
716.923 492.584 li
716.293 493.604 715.513 494.324 714.613 494.774 cv
713.713 495.224 712.573 495.464 711.253 495.464 cv
709.573 495.464 708.223 495.014 707.233 494.084 cv
706.243 493.154 705.763 491.894 705.763 490.304 cv
705.763 488.474 706.363 487.094 707.623 486.134 cv
708.853 485.204 710.683 484.724 713.143 484.724 cv
716.923 484.724 li
716.923 484.454 li
716.923 483.224 716.503 482.264 715.693 481.574 cv
714.883 480.914 713.743 480.554 712.273 480.554 cv
711.313 480.554 710.413 480.674 709.513 480.914 cv
708.613 481.154 707.773 481.484 706.963 481.904 cv
706.963 479.414 li
707.923 479.054 708.883 478.754 709.813 478.574 cv
710.743 478.394 711.643 478.274 712.543 478.274 cv
714.913 478.274 716.683 478.904 717.853 480.134 cv
719.023 481.364 719.623 483.224 719.623 485.714 cv
f
725.173 478.664 mo
727.873 478.664 li
727.873 495.074 li
725.173 495.074 li
725.173 478.664 li
725.173 472.274 mo
727.873 472.274 li
727.873 475.694 li
725.173 475.694 li
725.173 472.274 li
f
747.163 485.174 mo
747.163 495.074 li
744.463 495.074 li
744.463 485.264 li
744.463 483.704 744.133 482.564 743.533 481.784 cv
742.933 481.004 742.033 480.614 740.833 480.614 cv
739.363 480.614 738.223 481.094 737.383 482.024 cv
736.543 482.954 736.123 484.214 736.123 485.804 cv
736.123 495.074 li
733.423 495.074 li
733.423 478.664 li
736.123 478.664 li
736.123 481.214 li
736.753 480.254 737.503 479.504 738.403 479.024 cv
739.273 478.544 740.293 478.274 741.433 478.274 cv
743.293 478.274 744.733 478.874 745.693 480.044 cv
746.653 481.214 747.163 482.924 747.163 485.174 cv
f
763.333 486.674 mo
763.333 484.754 762.913 483.224 762.133 482.144 cv
761.323 481.064 760.183 480.524 758.743 480.524 cv
757.303 480.524 756.163 481.064 755.353 482.144 cv
754.543 483.224 754.153 484.754 754.153 486.674 cv
754.153 488.624 754.543 490.124 755.353 491.204 cv
756.163 492.284 757.303 492.824 758.743 492.824 cv
760.183 492.824 761.323 492.284 762.133 491.204 cv
762.913 490.124 763.333 488.624 763.333 486.674 cv
766.033 493.034 mo
766.033 495.794 765.403 497.864 764.173 499.244 cv
762.913 500.594 761.023 501.284 758.473 501.284 cv
757.513 501.284 756.643 501.194 755.803 501.074 cv
754.963 500.924 754.123 500.714 753.343 500.414 cv
753.343 497.804 li
754.123 498.224 754.903 498.524 755.683 498.734 cv
756.463 498.944 757.243 499.064 758.053 499.064 cv
759.793 499.064 761.113 498.584 762.013 497.684 cv
762.883 496.754 763.333 495.374 763.333 493.514 cv
763.333 492.194 li
762.763 493.154 762.043 493.874 761.173 494.354 cv
760.303 494.834 759.283 495.074 758.083 495.074 cv
756.043 495.074 754.423 494.324 753.193 492.794 cv
751.963 491.264 751.363 489.224 751.363 486.674 cv
751.363 484.154 751.963 482.114 753.193 480.584 cv
754.423 479.054 756.043 478.274 758.083 478.274 cv
759.283 478.274 760.303 478.514 761.173 478.994 cv
762.043 479.474 762.763 480.194 763.333 481.154 cv
763.333 478.664 li
766.033 478.664 li
766.033 493.034 li
f
771.583 478.664 mo
774.283 478.664 li
774.283 495.074 li
771.583 495.074 li
771.583 478.664 li
771.583 472.274 mo
774.283 472.274 li
774.283 475.694 li
771.583 475.694 li
771.583 472.274 li
f
793.573 485.174 mo
793.573 495.074 li
790.873 495.074 li
790.873 485.264 li
790.873 483.704 790.543 482.564 789.943 481.784 cv
789.343 481.004 788.443 480.614 787.243 480.614 cv
785.773 480.614 784.633 481.094 783.793 482.024 cv
782.953 482.954 782.533 484.214 782.533 485.804 cv
782.533 495.074 li
779.833 495.074 li
779.833 478.664 li
782.533 478.664 li
782.533 481.214 li
783.163 480.254 783.913 479.504 784.813 479.024 cv
785.683 478.544 786.703 478.274 787.843 478.274 cv
789.703 478.274 791.143 478.874 792.103 480.044 cv
793.063 481.214 793.573 482.924 793.573 485.174 cv
f
809.743 486.674 mo
809.743 484.754 809.323 483.224 808.543 482.144 cv
807.733 481.064 806.593 480.524 805.153 480.524 cv
803.713 480.524 802.573 481.064 801.763 482.144 cv
800.953 483.224 800.563 484.754 800.563 486.674 cv
800.563 488.624 800.953 490.124 801.763 491.204 cv
802.573 492.284 803.713 492.824 805.153 492.824 cv
806.593 492.824 807.733 492.284 808.543 491.204 cv
809.323 490.124 809.743 488.624 809.743 486.674 cv
812.443 493.034 mo
812.443 495.794 811.813 497.864 810.583 499.244 cv
809.323 500.594 807.433 501.284 804.883 501.284 cv
803.923 501.284 803.053 501.194 802.213 501.074 cv
801.373 500.924 800.533 500.714 799.753 500.414 cv
799.753 497.804 li
800.533 498.224 801.313 498.524 802.093 498.734 cv
802.873 498.944 803.653 499.064 804.463 499.064 cv
806.203 499.064 807.523 498.584 808.423 497.684 cv
809.293 496.754 809.743 495.374 809.743 493.514 cv
809.743 492.194 li
809.173 493.154 808.453 493.874 807.583 494.354 cv
806.713 494.834 805.693 495.074 804.493 495.074 cv
802.453 495.074 800.833 494.324 799.603 492.794 cv
798.373 491.264 797.773 489.224 797.773 486.674 cv
797.773 484.154 798.373 482.114 799.603 480.584 cv
800.833 479.054 802.453 478.274 804.493 478.274 cv
805.693 478.274 806.713 478.514 807.583 478.994 cv
808.453 479.474 809.173 480.194 809.743 481.154 cv
809.743 478.664 li
812.443 478.664 li
812.443 493.034 li
f
818.683 491.354 mo
821.773 491.354 li
821.773 493.874 li
819.373 498.524 li
817.483 498.524 li
818.683 493.874 li
818.683 491.354 li
f
850.302 473.924 mo
850.302 476.804 li
849.162 476.264 848.112 475.874 847.122 475.604 cv
846.102 475.364 845.142 475.214 844.242 475.214 cv
842.622 475.214 841.362 475.544 840.492 476.144 cv
839.622 476.774 839.202 477.674 839.202 478.814 cv
839.202 479.774 839.472 480.524 840.072 481.004 cv
840.642 481.514 841.752 481.904 843.372 482.204 cv
845.172 482.564 li
847.362 482.984 848.982 483.734 850.032 484.784 cv
851.082 485.864 851.622 487.274 851.622 489.044 cv
851.622 491.174 850.902 492.764 849.492 493.844 cv
848.052 494.924 845.982 495.464 843.252 495.464 cv
842.202 495.464 841.092 495.344 839.922 495.134 cv
838.752 494.924 837.552 494.594 836.322 494.114 cv
836.322 491.054 li
837.522 491.744 838.692 492.254 839.832 492.584 cv
840.972 492.944 842.112 493.094 843.252 493.094 cv
844.932 493.094 846.222 492.764 847.152 492.104 cv
848.052 491.444 848.532 490.514 848.532 489.254 cv
848.532 488.174 848.202 487.334 847.542 486.734 cv
846.882 486.134 845.802 485.684 844.302 485.384 cv
842.502 485.024 li
840.282 484.604 838.692 483.914 837.702 482.954 cv
836.712 482.024 836.232 480.734 836.232 479.054 cv
836.232 477.134 836.892 475.604 838.272 474.494 cv
839.622 473.384 841.512 472.814 843.912 472.814 cv
844.932 472.814 845.952 472.904 847.032 473.084 cv
848.082 473.264 849.162 473.564 850.302 473.924 cv
f
856.122 478.664 mo
858.822 478.664 li
858.822 495.074 li
856.122 495.074 li
856.122 478.664 li
856.122 472.274 mo
858.822 472.274 li
858.822 475.694 li
856.122 475.694 li
856.122 472.274 li
f
875.262 486.674 mo
875.262 484.754 874.842 483.224 874.062 482.144 cv
873.252 481.064 872.112 480.524 870.672 480.524 cv
869.232 480.524 868.092 481.064 867.282 482.144 cv
866.472 483.224 866.082 484.754 866.082 486.674 cv
866.082 488.624 866.472 490.124 867.282 491.204 cv
868.092 492.284 869.232 492.824 870.672 492.824 cv
872.112 492.824 873.252 492.284 874.062 491.204 cv
874.842 490.124 875.262 488.624 875.262 486.674 cv
877.962 493.034 mo
877.962 495.794 877.332 497.864 876.102 499.244 cv
874.842 500.594 872.952 501.284 870.402 501.284 cv
869.442 501.284 868.572 501.194 867.732 501.074 cv
866.892 500.924 866.052 500.714 865.272 500.414 cv
865.272 497.804 li
866.052 498.224 866.832 498.524 867.612 498.734 cv
868.392 498.944 869.172 499.064 869.982 499.064 cv
871.722 499.064 873.042 498.584 873.942 497.684 cv
874.812 496.754 875.262 495.374 875.262 493.514 cv
875.262 492.194 li
874.692 493.154 873.972 493.874 873.102 494.354 cv
872.232 494.834 871.212 495.074 870.012 495.074 cv
867.972 495.074 866.352 494.324 865.122 492.794 cv
863.892 491.264 863.292 489.224 863.292 486.674 cv
863.292 484.154 863.892 482.114 865.122 480.584 cv
866.352 479.054 867.972 478.274 870.012 478.274 cv
871.212 478.274 872.232 478.514 873.102 478.994 cv
873.972 479.474 874.692 480.194 875.262 481.154 cv
875.262 478.664 li
877.962 478.664 li
877.962 493.034 li
f
896.292 481.814 mo
896.952 480.614 897.762 479.744 898.692 479.144 cv
899.622 478.574 900.732 478.274 902.022 478.274 cv
903.702 478.274 905.022 478.874 905.952 480.074 cv
906.882 481.274 907.362 482.984 907.362 485.174 cv
907.362 495.074 li
904.662 495.074 li
904.662 485.264 li
904.662 483.704 904.362 482.534 903.822 481.754 cv
903.252 481.004 902.412 480.614 901.272 480.614 cv
899.862 480.614 898.752 481.094 897.942 482.024 cv
897.132 482.954 896.742 484.214 896.742 485.804 cv
896.742 495.074 li
894.042 495.074 li
894.042 485.264 li
894.042 483.704 893.742 482.534 893.202 481.754 cv
892.632 481.004 891.762 480.614 890.622 480.614 cv
889.242 480.614 888.132 481.094 887.322 482.024 cv
886.512 482.954 886.122 484.214 886.122 485.804 cv
886.122 495.074 li
883.422 495.074 li
883.422 478.664 li
886.122 478.664 li
886.122 481.214 li
886.722 480.224 887.472 479.474 888.342 478.994 cv
889.182 478.514 890.202 478.274 891.402 478.274 cv
892.602 478.274 893.592 478.574 894.432 479.174 cv
895.272 479.774 895.872 480.674 896.292 481.814 cv
f
919.092 480.554 mo
917.652 480.554 916.512 481.124 915.672 482.264 cv
914.832 483.404 914.412 484.934 914.412 486.884 cv
914.412 488.864 914.802 490.394 915.642 491.534 cv
916.482 492.674 917.622 493.214 919.092 493.214 cv
920.532 493.214 921.672 492.674 922.512 491.534 cv
923.352 490.394 923.772 488.864 923.772 486.884 cv
923.772 484.964 923.352 483.404 922.512 482.264 cv
921.672 481.124 920.532 480.554 919.092 480.554 cv
919.092 478.274 mo
921.432 478.274 923.262 479.054 924.612 480.554 cv
925.932 482.084 926.622 484.184 926.622 486.884 cv
926.622 489.584 925.932 491.684 924.612 493.184 cv
923.262 494.714 921.432 495.464 919.092 495.464 cv
916.722 495.464 914.862 494.714 913.542 493.184 cv
912.222 491.684 911.562 489.584 911.562 486.884 cv
911.562 484.184 912.222 482.084 913.542 480.554 cv
914.862 479.054 916.722 478.274 919.092 478.274 cv
f
931.092 478.664 mo
933.792 478.664 li
933.792 495.074 li
931.092 495.074 li
931.092 478.664 li
931.092 472.274 mo
933.792 472.274 li
933.792 475.694 li
931.092 475.694 li
931.092 472.274 li
f
950.232 481.154 mo
950.232 472.274 li
952.932 472.274 li
952.932 495.074 li
950.232 495.074 li
950.232 492.614 li
949.662 493.604 948.942 494.324 948.072 494.774 cv
947.202 495.224 946.182 495.464 944.982 495.464 cv
943.002 495.464 941.382 494.684 940.122 493.124 cv
938.862 491.564 938.262 489.464 938.262 486.884 cv
938.262 484.304 938.862 482.234 940.122 480.644 cv
941.382 479.084 943.002 478.274 944.982 478.274 cv
946.182 478.274 947.202 478.514 948.072 478.994 cv
948.942 479.474 949.662 480.194 950.232 481.154 cv
941.052 486.884 mo
941.052 488.864 941.442 490.424 942.252 491.564 cv
943.062 492.704 944.202 493.244 945.642 493.244 cv
947.052 493.244 948.162 492.704 949.002 491.564 cv
949.812 490.424 950.232 488.864 950.232 486.884 cv
950.232 484.904 949.812 483.374 949.002 482.234 cv
948.162 481.094 947.052 480.524 945.642 480.524 cv
944.202 480.524 943.062 481.094 942.252 482.234 cv
941.442 483.374 941.052 484.904 941.052 486.884 cv
f
958.062 472.304 mo
960.402 472.304 li
961.842 474.614 962.952 476.864 963.672 479.084 cv
964.392 481.304 964.782 483.494 964.782 485.654 cv
964.782 487.844 964.392 490.034 963.672 492.254 cv
962.952 494.474 961.842 496.694 960.402 499.004 cv
958.062 499.004 li
959.352 496.754 960.312 494.564 960.972 492.344 cv
961.602 490.154 961.932 487.934 961.932 485.654 cv
961.932 483.404 961.602 481.184 960.972 478.994 cv
960.312 476.804 959.352 474.584 958.062 472.304 cv
f
557.943 525.606 mo
577.943 525.606 li
@
564.943 528.606 mo
570.943 522.606 li
564.943 522.606 mo
570.943 528.606 li
f
1 lw
0 lc
564.943 528.606 mo
570.943 522.606 li
564.943 522.606 mo
570.943 528.606 li
@
591.853 509.666 mo
591.853 526.676 li
595.423 526.676 li
598.423 526.676 600.643 526.016 602.053 524.636 cv
603.433 523.256 604.153 521.096 604.153 518.156 cv
604.153 515.216 603.433 513.086 602.053 511.706 cv
600.643 510.356 598.423 509.666 595.423 509.666 cv
591.853 509.666 li
588.883 507.236 mo
594.973 507.236 li
599.203 507.236 602.323 508.136 604.303 509.876 cv
606.283 511.646 607.273 514.406 607.273 518.156 cv
607.273 521.936 606.253 524.696 604.273 526.466 cv
602.293 528.236 599.173 529.106 594.973 529.106 cv
588.883 529.106 li
588.883 507.236 li
f
614.953 518.666 mo
614.953 526.676 li
619.693 526.676 li
621.283 526.676 622.453 526.346 623.233 525.686 cv
623.983 525.026 624.373 524.036 624.373 522.656 cv
624.373 521.306 623.983 520.316 623.233 519.656 cv
622.453 518.996 621.283 518.666 619.693 518.666 cv
614.953 518.666 li
614.953 509.666 mo
614.953 516.266 li
619.333 516.266 li
620.773 516.266 621.823 515.996 622.543 515.456 cv
623.263 514.916 623.623 514.106 623.623 512.966 cv
623.623 511.886 623.263 511.046 622.543 510.506 cv
621.823 509.966 620.773 509.666 619.333 509.666 cv
614.953 509.666 li
611.983 507.236 mo
619.543 507.236 li
621.793 507.236 623.533 507.716 624.763 508.646 cv
625.963 509.606 626.593 510.926 626.593 512.635 cv
626.593 513.986 626.263 515.066 625.633 515.846 cv
625.003 516.626 624.103 517.136 622.903 517.316 cv
624.343 517.646 625.483 518.306 626.293 519.296 cv
627.073 520.286 627.493 521.516 627.493 522.986 cv
627.493 524.966 626.803 526.466 625.483 527.516 cv
624.163 528.596 622.273 529.106 619.843 529.106 cv
611.983 529.106 li
611.983 507.236 li
f
632.563 507.236 mo
636.553 507.236 li
646.243 525.536 li
646.243 507.236 li
649.123 507.236 li
649.123 529.106 li
645.133 529.106 li
635.443 510.806 li
635.443 529.106 li
632.563 529.106 li
632.563 507.236 li
f
670.903 506.336 mo
669.583 508.616 668.623 510.836 667.993 513.026 cv
667.333 515.216 667.033 517.436 667.033 519.686 cv
667.033 521.966 667.333 524.186 667.993 526.376 cv
668.623 528.596 669.583 530.786 670.903 533.036 cv
668.563 533.036 li
667.093 530.726 665.983 528.506 665.263 526.286 cv
664.543 524.066 664.183 521.876 664.183 519.686 cv
664.183 517.526 664.543 515.336 665.263 513.116 cv
665.983 510.896 667.063 508.646 668.563 506.336 cv
670.903 506.336 li
f
673.243 507.236 mo
691.723 507.236 li
691.723 509.726 li
683.953 509.726 li
683.953 529.106 li
680.983 529.106 li
680.983 509.726 li
673.243 509.726 li
673.243 507.236 li
f
708.493 520.226 mo
708.493 521.546 li
696.103 521.546 li
696.223 523.406 696.763 524.846 697.783 525.806 cv
698.773 526.766 700.153 527.246 701.953 527.246 cv
702.973 527.246 703.993 527.126 704.953 526.886 cv
705.913 526.646 706.903 526.256 707.863 525.716 cv
707.863 528.266 li
706.903 528.686 705.913 529.016 704.893 529.196 cv
703.873 529.376 702.823 529.496 701.803 529.496 cv
699.163 529.496 697.093 528.746 695.563 527.246 cv
694.033 525.746 693.283 523.676 693.283 521.066 cv
693.283 518.396 694.003 516.266 695.443 514.676 cv
696.883 513.116 698.863 512.306 701.323 512.306 cv
703.543 512.306 705.283 513.026 706.573 514.436 cv
707.833 515.876 708.493 517.796 708.493 520.226 cv
705.793 519.446 mo
705.763 517.976 705.343 516.806 704.563 515.906 cv
703.753 515.036 702.673 514.586 701.353 514.586 cv
699.853 514.586 698.653 515.036 697.753 515.876 cv
696.853 516.716 696.313 517.916 696.193 519.446 cv
705.793 519.446 li
f
723.373 513.176 mo
723.373 515.726 li
722.593 515.366 721.813 515.066 721.003 514.856 cv
720.163 514.676 719.323 514.556 718.453 514.556 cv
717.103 514.556 716.083 514.766 715.423 515.186 cv
714.763 515.606 714.433 516.206 714.433 517.016 cv
714.433 517.646 714.673 518.126 715.153 518.486 cv
715.633 518.846 716.593 519.206 718.033 519.506 cv
718.963 519.716 li
720.883 520.136 722.233 520.736 723.043 521.456 cv
723.823 522.206 724.243 523.256 724.243 524.576 cv
724.243 526.106 723.643 527.306 722.443 528.176 cv
721.243 529.076 719.563 529.496 717.463 529.496 cv
716.563 529.496 715.663 529.406 714.703 529.256 cv
713.743 529.106 712.753 528.866 711.703 528.506 cv
711.703 525.716 li
712.693 526.256 713.683 526.646 714.643 526.886 cv
715.603 527.156 716.563 527.276 717.523 527.276 cv
718.783 527.276 719.773 527.066 720.463 526.646 cv
721.123 526.226 721.483 525.596 721.483 524.786 cv
721.483 524.066 721.213 523.496 720.733 523.106 cv
720.253 522.716 719.173 522.326 717.493 521.966 cv
716.563 521.756 li
714.883 521.396 713.653 520.856 712.933 520.136 cv
712.183 519.416 711.823 518.426 711.823 517.136 cv
711.823 515.606 712.363 514.406 713.443 513.566 cv
714.523 512.726 716.083 512.306 718.123 512.306 cv
719.113 512.306 720.043 512.396 720.943 512.546 cv
721.813 512.696 722.623 512.906 723.373 513.176 cv
f
731.203 508.046 mo
731.203 512.696 li
736.753 512.696 li
736.753 514.796 li
731.203 514.796 li
731.203 523.706 li
731.203 525.056 731.383 525.926 731.743 526.286 cv
732.103 526.676 732.853 526.856 733.993 526.856 cv
736.753 526.856 li
736.753 529.106 li
733.993 529.106 li
731.893 529.106 730.453 528.716 729.673 527.936 cv
728.893 527.156 728.503 525.746 728.503 523.706 cv
728.503 514.796 li
726.523 514.796 li
726.523 512.696 li
728.503 512.696 li
728.503 508.046 li
731.203 508.046 li
f
740.293 512.696 mo
742.993 512.696 li
742.993 529.106 li
740.293 529.106 li
740.293 512.696 li
740.293 506.306 mo
742.993 506.306 li
742.993 509.726 li
740.293 509.726 li
740.293 506.306 li
f
762.283 519.206 mo
762.283 529.106 li
759.583 529.106 li
759.583 519.296 li
759.583 517.736 759.253 516.596 758.653 515.816 cv
758.053 515.036 757.153 514.646 755.953 514.646 cv
754.483 514.646 753.343 515.126 752.503 516.056 cv
751.663 516.986 751.243 518.246 751.243 519.836 cv
751.243 529.106 li
748.543 529.106 li
748.543 512.696 li
751.243 512.696 li
751.243 515.246 li
751.873 514.286 752.623 513.536 753.523 513.056 cv
754.393 512.576 755.413 512.306 756.553 512.306 cv
758.413 512.306 759.853 512.906 760.813 514.076 cv
761.773 515.246 762.283 516.956 762.283 519.206 cv
f
778.453 520.706 mo
778.453 518.786 778.033 517.256 777.253 516.176 cv
776.443 515.096 775.303 514.556 773.863 514.556 cv
772.423 514.556 771.283 515.096 770.473 516.176 cv
769.663 517.256 769.273 518.786 769.273 520.706 cv
769.273 522.656 769.663 524.156 770.473 525.236 cv
771.283 526.316 772.423 526.856 773.863 526.856 cv
775.303 526.856 776.443 526.316 777.253 525.236 cv
778.033 524.156 778.453 522.656 778.453 520.706 cv
781.153 527.066 mo
781.153 529.826 780.523 531.896 779.293 533.276 cv
778.033 534.626 776.143 535.316 773.593 535.316 cv
772.633 535.316 771.763 535.226 770.923 535.106 cv
770.083 534.956 769.243 534.746 768.463 534.446 cv
768.463 531.836 li
769.243 532.256 770.023 532.556 770.803 532.766 cv
771.583 532.976 772.363 533.096 773.173 533.096 cv
774.913 533.096 776.233 532.616 777.133 531.716 cv
778.003 530.786 778.453 529.406 778.453 527.546 cv
778.453 526.226 li
777.883 527.186 777.163 527.906 776.293 528.386 cv
775.423 528.866 774.403 529.106 773.203 529.106 cv
771.163 529.106 769.543 528.356 768.313 526.826 cv
767.083 525.296 766.483 523.256 766.483 520.706 cv
766.483 518.186 767.083 516.146 768.313 514.616 cv
769.543 513.086 771.163 512.306 773.203 512.306 cv
774.403 512.306 775.423 512.546 776.293 513.026 cv
777.163 513.506 777.883 514.226 778.453 515.186 cv
778.453 512.696 li
781.153 512.696 li
781.153 527.066 li
f
787.393 525.386 mo
790.483 525.386 li
790.483 527.906 li
788.083 532.556 li
786.193 532.556 li
787.393 527.906 li
787.393 525.386 li
f
819.012 507.956 mo
819.012 510.836 li
817.872 510.296 816.822 509.906 815.832 509.636 cv
814.812 509.396 813.852 509.246 812.952 509.246 cv
811.332 509.246 810.072 509.576 809.202 510.176 cv
808.332 510.806 807.912 511.706 807.912 512.846 cv
807.912 513.806 808.182 514.556 808.782 515.036 cv
809.352 515.546 810.462 515.936 812.082 516.236 cv
813.882 516.596 li
816.072 517.016 817.692 517.766 818.742 518.816 cv
819.792 519.896 820.332 521.306 820.332 523.076 cv
820.332 525.206 819.612 526.796 818.202 527.876 cv
816.762 528.956 814.692 529.496 811.962 529.496 cv
810.912 529.496 809.802 529.376 808.632 529.166 cv
807.462 528.956 806.262 528.626 805.032 528.146 cv
805.032 525.086 li
806.232 525.776 807.402 526.286 808.542 526.616 cv
809.682 526.976 810.822 527.126 811.962 527.126 cv
813.642 527.126 814.932 526.796 815.862 526.136 cv
816.762 525.476 817.242 524.546 817.242 523.286 cv
817.242 522.206 816.912 521.366 816.252 520.766 cv
815.592 520.166 814.512 519.716 813.012 519.416 cv
811.212 519.056 li
808.992 518.636 807.402 517.946 806.412 516.986 cv
805.422 516.056 804.942 514.766 804.942 513.086 cv
804.942 511.166 805.602 509.636 806.982 508.526 cv
808.332 507.416 810.222 506.846 812.622 506.846 cv
813.642 506.846 814.662 506.936 815.742 507.116 cv
816.792 507.296 817.872 507.596 819.012 507.956 cv
f
824.832 512.696 mo
827.532 512.696 li
827.532 529.106 li
824.832 529.106 li
824.832 512.696 li
824.832 506.306 mo
827.532 506.306 li
827.532 509.726 li
824.832 509.726 li
824.832 506.306 li
f
843.972 520.706 mo
843.972 518.786 843.552 517.256 842.772 516.176 cv
841.962 515.096 840.822 514.556 839.382 514.556 cv
837.942 514.556 836.802 515.096 835.992 516.176 cv
835.182 517.256 834.792 518.786 834.792 520.706 cv
834.792 522.656 835.182 524.156 835.992 525.236 cv
836.802 526.316 837.942 526.856 839.382 526.856 cv
840.822 526.856 841.962 526.316 842.772 525.236 cv
843.552 524.156 843.972 522.656 843.972 520.706 cv
846.672 527.066 mo
846.672 529.826 846.042 531.896 844.812 533.276 cv
843.552 534.626 841.662 535.316 839.112 535.316 cv
838.152 535.316 837.282 535.226 836.442 535.106 cv
835.602 534.956 834.762 534.746 833.982 534.446 cv
833.982 531.836 li
834.762 532.256 835.542 532.556 836.322 532.766 cv
837.102 532.976 837.882 533.096 838.692 533.096 cv
840.432 533.096 841.752 532.616 842.652 531.716 cv
843.522 530.786 843.972 529.406 843.972 527.546 cv
843.972 526.226 li
843.402 527.186 842.682 527.906 841.812 528.386 cv
840.942 528.866 839.922 529.106 838.722 529.106 cv
836.682 529.106 835.062 528.356 833.832 526.826 cv
832.602 525.296 832.002 523.256 832.002 520.706 cv
832.002 518.186 832.602 516.146 833.832 514.616 cv
835.062 513.086 836.682 512.306 838.722 512.306 cv
839.922 512.306 840.942 512.546 841.812 513.026 cv
842.682 513.506 843.402 514.226 843.972 515.186 cv
843.972 512.696 li
846.672 512.696 li
846.672 527.066 li
f
865.002 515.846 mo
865.662 514.646 866.472 513.776 867.402 513.176 cv
868.332 512.606 869.442 512.306 870.732 512.306 cv
872.412 512.306 873.732 512.906 874.662 514.106 cv
875.592 515.306 876.072 517.016 876.072 519.206 cv
876.072 529.106 li
873.372 529.106 li
873.372 519.296 li
873.372 517.736 873.072 516.566 872.532 515.786 cv
871.962 515.036 871.122 514.646 869.982 514.646 cv
868.572 514.646 867.462 515.126 866.652 516.056 cv
865.842 516.986 865.452 518.246 865.452 519.836 cv
865.452 529.106 li
862.752 529.106 li
862.752 519.296 li
862.752 517.736 862.452 516.566 861.912 515.786 cv
861.342 515.036 860.472 514.646 859.332 514.646 cv
857.952 514.646 856.842 515.126 856.032 516.056 cv
855.222 516.986 854.832 518.246 854.832 519.836 cv
854.832 529.106 li
852.132 529.106 li
852.132 512.696 li
854.832 512.696 li
854.832 515.246 li
855.432 514.256 856.182 513.506 857.052 513.026 cv
857.892 512.546 858.912 512.306 860.112 512.306 cv
861.312 512.306 862.302 512.606 863.142 513.206 cv
863.982 513.806 864.582 514.706 865.002 515.846 cv
f
887.802 514.586 mo
886.362 514.586 885.222 515.156 884.382 516.296 cv
883.542 517.436 883.122 518.966 883.122 520.916 cv
883.122 522.896 883.512 524.426 884.352 525.566 cv
885.192 526.706 886.332 527.246 887.802 527.246 cv
889.242 527.246 890.382 526.706 891.222 525.566 cv
892.062 524.426 892.482 522.896 892.482 520.916 cv
892.482 518.996 892.062 517.436 891.222 516.296 cv
890.382 515.156 889.242 514.586 887.802 514.586 cv
887.802 512.306 mo
890.142 512.306 891.972 513.086 893.322 514.586 cv
894.642 516.116 895.332 518.216 895.332 520.916 cv
895.332 523.616 894.642 525.716 893.322 527.216 cv
891.972 528.746 890.142 529.496 887.802 529.496 cv
885.432 529.496 883.572 528.746 882.252 527.216 cv
880.932 525.716 880.272 523.616 880.272 520.916 cv
880.272 518.216 880.932 516.116 882.252 514.586 cv
883.572 513.086 885.432 512.306 887.802 512.306 cv
f
899.802 512.696 mo
902.502 512.696 li
902.502 529.106 li
899.802 529.106 li
899.802 512.696 li
899.802 506.306 mo
902.502 506.306 li
902.502 509.726 li
899.802 509.726 li
899.802 506.306 li
f
918.942 515.186 mo
918.942 506.306 li
921.642 506.306 li
921.642 529.106 li
918.942 529.106 li
918.942 526.646 li
918.372 527.636 917.652 528.356 916.782 528.806 cv
915.912 529.256 914.892 529.496 913.692 529.496 cv
911.712 529.496 910.092 528.716 908.832 527.156 cv
907.572 525.596 906.972 523.496 906.972 520.916 cv
906.972 518.336 907.572 516.266 908.832 514.676 cv
910.092 513.116 911.712 512.306 913.692 512.306 cv
914.892 512.306 915.912 512.546 916.782 513.026 cv
917.652 513.506 918.372 514.226 918.942 515.186 cv
909.762 520.916 mo
909.762 522.896 910.152 524.456 910.962 525.596 cv
911.772 526.736 912.912 527.276 914.352 527.276 cv
915.762 527.276 916.872 526.736 917.712 525.596 cv
918.522 524.456 918.942 522.896 918.942 520.916 cv
918.942 518.936 918.522 517.406 917.712 516.266 cv
916.872 515.126 915.762 514.556 914.352 514.556 cv
912.912 514.556 911.772 515.126 910.962 516.266 cv
910.152 517.406 909.762 518.936 909.762 520.916 cv
f
926.772 506.336 mo
929.112 506.336 li
930.552 508.646 931.662 510.896 932.382 513.116 cv
933.102 515.336 933.492 517.526 933.492 519.686 cv
933.492 521.876 933.102 524.066 932.382 526.286 cv
931.662 528.506 930.552 530.726 929.112 533.036 cv
926.772 533.036 li
928.062 530.786 929.022 528.596 929.682 526.376 cv
930.312 524.186 930.642 521.966 930.642 519.686 cv
930.642 517.436 930.312 515.216 929.682 513.026 cv
929.022 510.836 928.062 508.616 926.772 506.336 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
