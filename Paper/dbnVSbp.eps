%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: dbnVSbp-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/11, 10:08:16
%%BoundingBox: -1 0 1151 604
%%HiResBoundingBox: 0 0 1150.7743 603.5337
%%CropBox: 0 0 1150.7743 603.5337
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-11T10:07:25+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-11T10:08:09+08:00"
   xmp:MetadataDate="2019-06-11T10:08:09+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:77d65a9a-8b34-4f0e-8160-eccbb1fbd897"
   xmpMM:InstanceID="uuid:9bdb13bf-ea89-4ba7-a0fa-7755734cd9e6"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -603.534 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 603.534 li
1150.77 603.534 li
1150.77 0 li
cp
clp
gsave
-.203247 603.931 mo
1150.8 603.931 li
1150.8 -.06956 li
-.203247 -.06956 li
-.203247 603.931 li
clp
-105.203 622.93 mo
1277.2 622.93 li
1277.2 -74.7496 li
-105.203 -74.7496 li
-105.203 622.93 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
67.5969 546.186 mo
1138.96 546.186 li
1138.96 8.9722 li
67.5969 8.9722 li
67.5969 546.186 li
f
116.295 546.186 mo
116.295 549.686 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
116.295 546.186 mo
116.295 549.686 li
@
116.296 555.109 mo
115.276 555.109 114.516 555.609 113.996 556.609 cv
113.476 557.609 113.236 559.109 113.236 561.109 cv
113.236 563.109 113.476 564.609 113.996 565.609 cv
114.516 566.609 115.276 567.109 116.296 567.109 cv
117.316 567.109 118.076 566.609 118.596 565.609 cv
119.096 564.609 119.356 563.109 119.356 561.109 cv
119.356 559.109 119.096 557.609 118.596 556.609 cv
118.076 555.609 117.316 555.109 116.296 555.109 cv
116.296 553.549 mo
117.916 553.549 119.156 554.209 120.036 555.489 cv
120.896 556.789 121.336 558.669 121.336 561.109 cv
121.336 563.569 120.896 565.449 120.036 566.729 cv
119.156 568.009 117.916 568.649 116.296 568.649 cv
114.656 568.649 113.396 568.009 112.536 566.729 cv
111.676 565.449 111.256 563.569 111.256 561.109 cv
111.256 558.669 111.676 556.789 112.536 555.489 cv
113.396 554.209 114.656 553.549 116.296 553.549 cv
f
313.055 546.186 mo
313.055 549.686 li
f
313.055 546.186 mo
313.055 549.686 li
@
297.817 566.729 mo
304.697 566.729 li
304.697 568.389 li
295.437 568.389 li
295.437 566.729 li
296.177 565.969 297.197 564.929 298.497 563.609 cv
299.777 562.309 300.597 561.469 300.937 561.089 cv
301.577 560.389 302.017 559.789 302.257 559.289 cv
302.497 558.809 302.637 558.309 302.637 557.829 cv
302.637 557.069 302.357 556.429 301.817 555.949 cv
301.277 555.469 300.577 555.209 299.697 555.209 cv
299.077 555.209 298.417 555.329 297.737 555.529 cv
297.057 555.749 296.317 556.069 295.537 556.509 cv
295.537 554.509 li
296.337 554.189 297.077 553.949 297.757 553.789 cv
298.437 553.629 299.077 553.549 299.657 553.549 cv
301.157 553.549 302.357 553.929 303.257 554.689 cv
304.157 555.449 304.617 556.449 304.617 557.709 cv
304.617 558.309 304.497 558.889 304.277 559.409 cv
304.057 559.949 303.657 560.589 303.057 561.309 cv
302.897 561.509 302.377 562.049 301.497 562.949 cv
300.617 563.849 299.397 565.109 297.817 566.729 cv
f
313.057 555.109 mo
312.037 555.109 311.277 555.609 310.757 556.609 cv
310.237 557.609 309.997 559.109 309.997 561.109 cv
309.997 563.109 310.237 564.609 310.757 565.609 cv
311.277 566.609 312.037 567.109 313.057 567.109 cv
314.077 567.109 314.837 566.609 315.357 565.609 cv
315.857 564.609 316.117 563.109 316.117 561.109 cv
316.117 559.109 315.857 557.609 315.357 556.609 cv
314.837 555.609 314.077 555.109 313.057 555.109 cv
313.057 553.549 mo
314.677 553.549 315.917 554.209 316.797 555.489 cv
317.657 556.789 318.097 558.669 318.097 561.109 cv
318.097 563.569 317.657 565.449 316.797 566.729 cv
315.917 568.009 314.677 568.649 313.057 568.649 cv
311.417 568.649 310.157 568.009 309.297 566.729 cv
308.437 565.449 308.017 563.569 308.017 561.109 cv
308.017 558.669 308.437 556.789 309.297 555.489 cv
310.157 554.209 311.417 553.549 313.057 553.549 cv
f
325.777 555.109 mo
324.757 555.109 323.997 555.609 323.477 556.609 cv
322.957 557.609 322.717 559.109 322.717 561.109 cv
322.717 563.109 322.957 564.609 323.477 565.609 cv
323.997 566.609 324.757 567.109 325.777 567.109 cv
326.797 567.109 327.557 566.609 328.077 565.609 cv
328.577 564.609 328.837 563.109 328.837 561.109 cv
328.837 559.109 328.577 557.609 328.077 556.609 cv
327.557 555.609 326.797 555.109 325.777 555.109 cv
325.777 553.549 mo
327.397 553.549 328.637 554.209 329.517 555.489 cv
330.377 556.789 330.817 558.669 330.817 561.109 cv
330.817 563.569 330.377 565.449 329.517 566.729 cv
328.637 568.009 327.397 568.649 325.777 568.649 cv
324.137 568.649 322.877 568.009 322.017 566.729 cv
321.157 565.449 320.737 563.569 320.737 561.109 cv
320.737 558.669 321.157 556.789 322.017 555.489 cv
322.877 554.209 324.137 553.549 325.777 553.549 cv
f
509.816 546.186 mo
509.816 549.686 li
f
509.816 546.186 mo
509.816 549.686 li
@
498.298 555.529 mo
493.318 563.309 li
498.298 563.309 li
498.298 555.529 li
497.778 553.809 mo
500.258 553.809 li
500.258 563.309 li
502.338 563.309 li
502.338 564.949 li
500.258 564.949 li
500.258 568.389 li
498.298 568.389 li
498.298 564.949 li
491.718 564.949 li
491.718 563.049 li
497.778 553.809 li
f
509.818 555.109 mo
508.798 555.109 508.038 555.609 507.518 556.609 cv
506.998 557.609 506.758 559.109 506.758 561.109 cv
506.758 563.109 506.998 564.609 507.518 565.609 cv
508.038 566.609 508.798 567.109 509.818 567.109 cv
510.838 567.109 511.598 566.609 512.118 565.609 cv
512.618 564.609 512.878 563.109 512.878 561.109 cv
512.878 559.109 512.618 557.609 512.118 556.609 cv
511.598 555.609 510.838 555.109 509.818 555.109 cv
509.818 553.549 mo
511.438 553.549 512.678 554.209 513.558 555.489 cv
514.418 556.789 514.858 558.669 514.858 561.109 cv
514.858 563.569 514.418 565.449 513.558 566.729 cv
512.678 568.009 511.438 568.649 509.818 568.649 cv
508.178 568.649 506.918 568.009 506.058 566.729 cv
505.198 565.449 504.778 563.569 504.778 561.109 cv
504.778 558.669 505.198 556.789 506.058 555.489 cv
506.918 554.209 508.178 553.549 509.818 553.549 cv
f
522.538 555.109 mo
521.518 555.109 520.758 555.609 520.238 556.609 cv
519.718 557.609 519.478 559.109 519.478 561.109 cv
519.478 563.109 519.718 564.609 520.238 565.609 cv
520.758 566.609 521.518 567.109 522.538 567.109 cv
523.558 567.109 524.318 566.609 524.838 565.609 cv
525.338 564.609 525.598 563.109 525.598 561.109 cv
525.598 559.109 525.338 557.609 524.838 556.609 cv
524.318 555.609 523.558 555.109 522.538 555.109 cv
522.538 553.549 mo
524.158 553.549 525.398 554.209 526.278 555.489 cv
527.138 556.789 527.578 558.669 527.578 561.109 cv
527.578 563.569 527.138 565.449 526.278 566.729 cv
525.398 568.009 524.158 568.649 522.538 568.649 cv
520.898 568.649 519.638 568.009 518.778 566.729 cv
517.918 565.449 517.498 563.569 517.498 561.109 cv
517.498 558.669 517.918 556.789 518.778 555.489 cv
519.638 554.209 520.898 553.549 522.538 553.549 cv
f
706.576 546.186 mo
706.576 549.686 li
f
706.576 546.186 mo
706.576 549.686 li
@
694.098 560.309 mo
693.218 560.309 692.518 560.629 691.998 561.229 cv
691.478 561.829 691.218 562.669 691.218 563.709 cv
691.218 564.769 691.478 565.609 691.998 566.209 cv
692.518 566.809 693.218 567.109 694.098 567.109 cv
694.978 567.109 695.678 566.809 696.198 566.209 cv
696.718 565.609 696.978 564.769 696.978 563.709 cv
696.978 562.669 696.718 561.829 696.198 561.229 cv
695.678 560.629 694.978 560.309 694.098 560.309 cv
698.018 554.129 mo
698.018 555.929 li
697.518 555.689 697.018 555.509 696.518 555.389 cv
695.998 555.269 695.498 555.209 695.018 555.209 cv
693.698 555.209 692.698 555.649 692.018 556.529 cv
691.338 557.409 690.938 558.749 690.858 560.509 cv
691.238 559.949 691.718 559.509 692.298 559.209 cv
692.878 558.909 693.518 558.749 694.218 558.749 cv
695.678 558.749 696.838 559.209 697.678 560.089 cv
698.518 560.969 698.958 562.189 698.958 563.709 cv
698.958 565.209 698.498 566.409 697.618 567.309 cv
696.738 568.209 695.558 568.649 694.098 568.649 cv
692.418 568.649 691.118 568.009 690.238 566.729 cv
689.338 565.449 688.898 563.569 688.898 561.109 cv
688.898 558.809 689.438 556.969 690.538 555.609 cv
691.618 554.249 693.098 553.549 694.938 553.549 cv
695.418 553.549 695.918 553.609 696.438 553.689 cv
696.938 553.789 697.458 553.929 698.018 554.129 cv
f
706.578 555.109 mo
705.558 555.109 704.798 555.609 704.278 556.609 cv
703.758 557.609 703.518 559.109 703.518 561.109 cv
703.518 563.109 703.758 564.609 704.278 565.609 cv
704.798 566.609 705.558 567.109 706.578 567.109 cv
707.598 567.109 708.358 566.609 708.878 565.609 cv
709.378 564.609 709.638 563.109 709.638 561.109 cv
709.638 559.109 709.378 557.609 708.878 556.609 cv
708.358 555.609 707.598 555.109 706.578 555.109 cv
706.578 553.549 mo
708.198 553.549 709.438 554.209 710.318 555.489 cv
711.178 556.789 711.618 558.669 711.618 561.109 cv
711.618 563.569 711.178 565.449 710.318 566.729 cv
709.438 568.009 708.198 568.649 706.578 568.649 cv
704.938 568.649 703.678 568.009 702.818 566.729 cv
701.958 565.449 701.538 563.569 701.538 561.109 cv
701.538 558.669 701.958 556.789 702.818 555.489 cv
703.678 554.209 704.938 553.549 706.578 553.549 cv
f
719.298 555.109 mo
718.278 555.109 717.518 555.609 716.998 556.609 cv
716.478 557.609 716.238 559.109 716.238 561.109 cv
716.238 563.109 716.478 564.609 716.998 565.609 cv
717.518 566.609 718.278 567.109 719.298 567.109 cv
720.318 567.109 721.078 566.609 721.598 565.609 cv
722.098 564.609 722.358 563.109 722.358 561.109 cv
722.358 559.109 722.098 557.609 721.598 556.609 cv
721.078 555.609 720.318 555.109 719.298 555.109 cv
719.298 553.549 mo
720.918 553.549 722.158 554.209 723.038 555.489 cv
723.898 556.789 724.338 558.669 724.338 561.109 cv
724.338 563.569 723.898 565.449 723.038 566.729 cv
722.158 568.009 720.918 568.649 719.298 568.649 cv
717.658 568.649 716.398 568.009 715.538 566.729 cv
714.678 565.449 714.258 563.569 714.258 561.109 cv
714.258 558.669 714.678 556.789 715.538 555.489 cv
716.398 554.209 717.658 553.549 719.298 553.549 cv
f
903.336 546.186 mo
903.336 549.686 li
f
903.336 546.186 mo
903.336 549.686 li
@
890.618 561.469 mo
889.678 561.469 888.938 561.729 888.398 562.229 cv
887.858 562.729 887.598 563.409 887.598 564.289 cv
887.598 565.169 887.858 565.869 888.398 566.369 cv
888.938 566.869 889.678 567.109 890.618 567.109 cv
891.538 567.109 892.278 566.869 892.818 566.349 cv
893.358 565.849 893.638 565.169 893.638 564.289 cv
893.638 563.409 893.358 562.729 892.838 562.229 cv
892.298 561.729 891.558 561.469 890.618 561.469 cv
888.638 560.629 mo
887.798 560.429 887.138 560.029 886.658 559.449 cv
886.178 558.869 885.958 558.169 885.958 557.329 cv
885.958 556.169 886.358 555.249 887.198 554.569 cv
888.018 553.889 889.158 553.549 890.618 553.549 cv
892.058 553.549 893.198 553.889 894.038 554.569 cv
894.858 555.249 895.278 556.169 895.278 557.329 cv
895.278 558.169 895.038 558.869 894.558 559.449 cv
894.078 560.029 893.438 560.429 892.598 560.629 cv
893.538 560.849 894.278 561.289 894.818 561.929 cv
895.338 562.569 895.618 563.369 895.618 564.289 cv
895.618 565.709 895.178 566.789 894.318 567.529 cv
893.438 568.289 892.218 568.649 890.618 568.649 cv
888.998 568.649 887.758 568.289 886.898 567.529 cv
886.038 566.789 885.618 565.709 885.618 564.289 cv
885.618 563.369 885.878 562.569 886.418 561.929 cv
886.938 561.289 887.678 560.849 888.638 560.629 cv
887.918 557.509 mo
887.918 558.269 888.138 558.869 888.618 559.289 cv
889.098 559.709 889.758 559.909 890.618 559.909 cv
891.458 559.909 892.118 559.709 892.598 559.289 cv
893.078 558.869 893.318 558.269 893.318 557.509 cv
893.318 556.749 893.078 556.169 892.598 555.749 cv
892.118 555.329 891.458 555.109 890.618 555.109 cv
889.758 555.109 889.098 555.329 888.618 555.749 cv
888.138 556.169 887.918 556.749 887.918 557.509 cv
f
903.338 555.109 mo
902.318 555.109 901.558 555.609 901.038 556.609 cv
900.518 557.609 900.278 559.109 900.278 561.109 cv
900.278 563.109 900.518 564.609 901.038 565.609 cv
901.558 566.609 902.318 567.109 903.338 567.109 cv
904.358 567.109 905.118 566.609 905.638 565.609 cv
906.138 564.609 906.398 563.109 906.398 561.109 cv
906.398 559.109 906.138 557.609 905.638 556.609 cv
905.118 555.609 904.358 555.109 903.338 555.109 cv
903.338 553.549 mo
904.958 553.549 906.198 554.209 907.078 555.489 cv
907.938 556.789 908.378 558.669 908.378 561.109 cv
908.378 563.569 907.938 565.449 907.078 566.729 cv
906.198 568.009 904.958 568.649 903.338 568.649 cv
901.698 568.649 900.438 568.009 899.578 566.729 cv
898.718 565.449 898.298 563.569 898.298 561.109 cv
898.298 558.669 898.718 556.789 899.578 555.489 cv
900.438 554.209 901.698 553.549 903.338 553.549 cv
f
916.058 555.109 mo
915.038 555.109 914.278 555.609 913.758 556.609 cv
913.238 557.609 912.998 559.109 912.998 561.109 cv
912.998 563.109 913.238 564.609 913.758 565.609 cv
914.278 566.609 915.038 567.109 916.058 567.109 cv
917.078 567.109 917.838 566.609 918.358 565.609 cv
918.858 564.609 919.118 563.109 919.118 561.109 cv
919.118 559.109 918.858 557.609 918.358 556.609 cv
917.838 555.609 917.078 555.109 916.058 555.109 cv
916.058 553.549 mo
917.678 553.549 918.918 554.209 919.798 555.489 cv
920.658 556.789 921.098 558.669 921.098 561.109 cv
921.098 563.569 920.658 565.449 919.798 566.729 cv
918.918 568.009 917.678 568.649 916.058 568.649 cv
914.418 568.649 913.158 568.009 912.298 566.729 cv
911.438 565.449 911.018 563.569 911.018 561.109 cv
911.018 558.669 911.438 556.789 912.298 555.489 cv
913.158 554.209 914.418 553.549 916.058 553.549 cv
f
1100.1 546.186 mo
1100.1 549.686 li
f
1100.1 546.186 mo
1100.1 549.686 li
@
1077.14 566.729 mo
1080.36 566.729 li
1080.36 555.609 li
1076.86 556.309 li
1076.86 554.509 li
1080.34 553.809 li
1082.32 553.809 li
1082.32 566.729 li
1085.54 566.729 li
1085.54 568.389 li
1077.14 568.389 li
1077.14 566.729 li
f
1093.74 555.109 mo
1092.72 555.109 1091.96 555.609 1091.44 556.609 cv
1090.92 557.609 1090.68 559.109 1090.68 561.109 cv
1090.68 563.109 1090.92 564.609 1091.44 565.609 cv
1091.96 566.609 1092.72 567.109 1093.74 567.109 cv
1094.76 567.109 1095.52 566.609 1096.04 565.609 cv
1096.54 564.609 1096.8 563.109 1096.8 561.109 cv
1096.8 559.109 1096.54 557.609 1096.04 556.609 cv
1095.52 555.609 1094.76 555.109 1093.74 555.109 cv
1093.74 553.549 mo
1095.36 553.549 1096.6 554.209 1097.48 555.489 cv
1098.34 556.789 1098.78 558.669 1098.78 561.109 cv
1098.78 563.569 1098.34 565.449 1097.48 566.729 cv
1096.6 568.009 1095.36 568.649 1093.74 568.649 cv
1092.1 568.649 1090.84 568.009 1089.98 566.729 cv
1089.12 565.449 1088.7 563.569 1088.7 561.109 cv
1088.7 558.669 1089.12 556.789 1089.98 555.489 cv
1090.84 554.209 1092.1 553.549 1093.74 553.549 cv
f
1106.46 555.109 mo
1105.44 555.109 1104.68 555.609 1104.16 556.609 cv
1103.64 557.609 1103.4 559.109 1103.4 561.109 cv
1103.4 563.109 1103.64 564.609 1104.16 565.609 cv
1104.68 566.609 1105.44 567.109 1106.46 567.109 cv
1107.48 567.109 1108.24 566.609 1108.76 565.609 cv
1109.26 564.609 1109.52 563.109 1109.52 561.109 cv
1109.52 559.109 1109.26 557.609 1108.76 556.609 cv
1108.24 555.609 1107.48 555.109 1106.46 555.109 cv
1106.46 553.549 mo
1108.08 553.549 1109.32 554.209 1110.2 555.489 cv
1111.06 556.789 1111.5 558.669 1111.5 561.109 cv
1111.5 563.569 1111.06 565.449 1110.2 566.729 cv
1109.32 568.009 1108.08 568.649 1106.46 568.649 cv
1104.82 568.649 1103.56 568.009 1102.7 566.729 cv
1101.84 565.449 1101.42 563.569 1101.42 561.109 cv
1101.42 558.669 1101.84 556.789 1102.7 555.489 cv
1103.56 554.209 1104.82 553.549 1106.46 553.549 cv
f
1119.18 555.109 mo
1118.16 555.109 1117.4 555.609 1116.88 556.609 cv
1116.36 557.609 1116.12 559.109 1116.12 561.109 cv
1116.12 563.109 1116.36 564.609 1116.88 565.609 cv
1117.4 566.609 1118.16 567.109 1119.18 567.109 cv
1120.2 567.109 1120.96 566.609 1121.48 565.609 cv
1121.98 564.609 1122.24 563.109 1122.24 561.109 cv
1122.24 559.109 1121.98 557.609 1121.48 556.609 cv
1120.96 555.609 1120.2 555.109 1119.18 555.109 cv
1119.18 553.549 mo
1120.8 553.549 1122.04 554.209 1122.92 555.489 cv
1123.78 556.789 1124.22 558.669 1124.22 561.109 cv
1124.22 563.569 1123.78 565.449 1122.92 566.729 cv
1122.04 568.009 1120.8 568.649 1119.18 568.649 cv
1117.54 568.649 1116.28 568.009 1115.42 566.729 cv
1114.56 565.449 1114.14 563.569 1114.14 561.109 cv
1114.14 558.669 1114.56 556.789 1115.42 555.489 cv
1116.28 554.209 1117.54 553.549 1119.18 553.549 cv
f
574.612 577.168 mo
583.832 577.168 li
583.832 578.828 li
576.592 578.828 li
576.592 583.148 li
583.532 583.148 li
583.532 584.808 li
576.592 584.808 li
576.592 590.088 li
584.012 590.088 li
584.012 591.748 li
574.612 591.748 li
574.612 577.168 li
f
588.912 590.108 mo
588.912 595.888 li
587.112 595.888 li
587.112 580.808 li
588.912 580.808 li
588.912 582.468 li
589.272 581.828 589.752 581.348 590.332 581.028 cv
590.912 580.708 591.612 580.548 592.412 580.548 cv
593.732 580.548 594.812 581.088 595.652 582.128 cv
596.472 583.188 596.892 584.568 596.892 586.288 cv
596.892 588.008 596.472 589.408 595.652 590.448 cv
594.812 591.488 593.732 592.008 592.412 592.008 cv
591.612 592.008 590.912 591.848 590.332 591.548 cv
589.752 591.248 589.272 590.768 588.912 590.108 cv
595.032 586.288 mo
595.032 584.968 594.752 583.948 594.212 583.188 cv
593.652 582.428 592.912 582.048 591.972 582.048 cv
591.012 582.048 590.272 582.428 589.732 583.188 cv
589.172 583.948 588.912 584.968 588.912 586.288 cv
588.912 587.608 589.172 588.648 589.732 589.408 cv
590.272 590.168 591.012 590.528 591.972 590.528 cv
592.912 590.528 593.652 590.168 594.212 589.408 cv
594.752 588.648 595.032 587.608 595.032 586.288 cv
f
604.112 582.068 mo
603.152 582.068 602.392 582.448 601.832 583.208 cv
601.272 583.968 600.992 584.988 600.992 586.288 cv
600.992 587.608 601.252 588.628 601.812 589.388 cv
602.372 590.148 603.132 590.508 604.112 590.508 cv
605.072 590.508 605.832 590.148 606.392 589.388 cv
606.952 588.628 607.232 587.608 607.232 586.288 cv
607.232 585.008 606.952 583.968 606.392 583.208 cv
605.832 582.448 605.072 582.068 604.112 582.068 cv
604.112 580.548 mo
605.672 580.548 606.892 581.068 607.792 582.068 cv
608.672 583.088 609.132 584.488 609.132 586.288 cv
609.132 588.088 608.672 589.488 607.792 590.488 cv
606.892 591.508 605.672 592.008 604.112 592.008 cv
602.532 592.008 601.292 591.508 600.412 590.488 cv
599.532 589.488 599.092 588.088 599.092 586.288 cv
599.092 584.488 599.532 583.088 600.412 582.068 cv
601.292 581.068 602.532 580.548 604.112 580.548 cv
f
619.992 581.228 mo
619.992 582.908 li
619.472 582.628 618.972 582.428 618.452 582.288 cv
617.932 582.148 617.432 582.068 616.912 582.068 cv
615.752 582.068 614.832 582.448 614.192 583.188 cv
613.552 583.928 613.232 584.968 613.232 586.288 cv
613.232 587.628 613.552 588.668 614.192 589.408 cv
614.832 590.148 615.752 590.508 616.912 590.508 cv
617.432 590.508 617.932 590.448 618.452 590.308 cv
618.972 590.168 619.472 589.948 619.992 589.668 cv
619.992 591.328 li
619.472 591.568 618.952 591.748 618.432 591.848 cv
617.892 591.948 617.312 592.008 616.712 592.008 cv
615.072 592.008 613.752 591.508 612.792 590.468 cv
611.812 589.448 611.332 588.048 611.332 586.288 cv
611.332 584.508 611.812 583.108 612.792 582.088 cv
613.772 581.068 615.112 580.548 616.832 580.548 cv
617.392 580.548 617.932 580.608 618.452 580.728 cv
618.972 580.848 619.492 581.008 619.992 581.228 cv
f
632.212 585.148 mo
632.212 591.748 li
630.412 591.748 li
630.412 585.208 li
630.412 584.168 630.192 583.408 629.792 582.888 cv
629.392 582.368 628.792 582.108 627.992 582.108 cv
627.012 582.108 626.252 582.428 625.692 583.048 cv
625.132 583.668 624.852 584.508 624.852 585.568 cv
624.852 591.748 li
623.052 591.748 li
623.052 576.548 li
624.852 576.548 li
624.852 582.508 li
625.272 581.868 625.772 581.368 626.372 581.048 cv
626.952 580.728 627.632 580.548 628.392 580.548 cv
629.632 580.548 630.592 580.948 631.232 581.728 cv
631.872 582.508 632.212 583.648 632.212 585.148 cv
f
67.5969 459.619 mo
64.0969 459.619 li
f
67.5969 459.619 mo
64.0969 459.619 li
@
35.16 453.941 mo
34.14 453.941 33.38 454.441 32.86 455.441 cv
32.34 456.441 32.1 457.941 32.1 459.941 cv
32.1 461.941 32.34 463.441 32.86 464.441 cv
33.38 465.441 34.14 465.941 35.16 465.941 cv
36.18 465.941 36.94 465.441 37.46 464.441 cv
37.96 463.441 38.22 461.941 38.22 459.941 cv
38.22 457.941 37.96 456.441 37.46 455.441 cv
36.94 454.441 36.18 453.941 35.16 453.941 cv
35.16 452.381 mo
36.78 452.381 38.02 453.041 38.9 454.321 cv
39.76 455.621 40.2 457.501 40.2 459.941 cv
40.2 462.401 39.76 464.281 38.9 465.561 cv
38.02 466.841 36.78 467.481 35.16 467.481 cv
33.52 467.481 32.26 466.841 31.4 465.561 cv
30.54 464.281 30.12 462.401 30.12 459.941 cv
30.12 457.501 30.54 455.621 31.4 454.321 cv
32.26 453.041 33.52 452.381 35.16 452.381 cv
f
43.66 464.741 mo
45.72 464.741 li
45.72 467.221 li
43.66 467.221 li
43.66 464.741 li
f
51.7199 465.561 mo
58.5999 465.561 li
58.5999 467.221 li
49.3399 467.221 li
49.3399 465.561 li
50.0799 464.801 51.0999 463.761 52.3999 462.441 cv
53.6799 461.141 54.4999 460.301 54.8399 459.921 cv
55.4799 459.221 55.9199 458.621 56.1599 458.121 cv
56.3999 457.641 56.5399 457.141 56.5399 456.661 cv
56.5399 455.901 56.2599 455.261 55.7199 454.781 cv
55.1799 454.301 54.4799 454.041 53.5999 454.041 cv
52.9799 454.041 52.3199 454.161 51.6399 454.361 cv
50.9599 454.581 50.2199 454.901 49.4399 455.341 cv
49.4399 453.341 li
50.2399 453.021 50.9799 452.781 51.6599 452.621 cv
52.3399 452.461 52.9799 452.381 53.5599 452.381 cv
55.0599 452.381 56.2599 452.761 57.1599 453.521 cv
58.0599 454.281 58.5199 455.281 58.5199 456.541 cv
58.5199 457.141 58.3999 457.721 58.1799 458.241 cv
57.9599 458.781 57.5599 459.421 56.9599 460.141 cv
56.7999 460.341 56.2799 460.881 55.3999 461.781 cv
54.5199 462.681 53.2999 463.941 51.7199 465.561 cv
f
67.5969 350.139 mo
64.0969 350.139 li
f
67.5969 350.139 mo
64.0969 350.139 li
@
35.16 344.461 mo
34.14 344.461 33.38 344.961 32.86 345.961 cv
32.34 346.961 32.1 348.461 32.1 350.461 cv
32.1 352.461 32.34 353.961 32.86 354.961 cv
33.38 355.961 34.14 356.461 35.16 356.461 cv
36.18 356.461 36.94 355.961 37.46 354.961 cv
37.96 353.961 38.22 352.461 38.22 350.461 cv
38.22 348.461 37.96 346.961 37.46 345.961 cv
36.94 344.961 36.18 344.461 35.16 344.461 cv
35.16 342.901 mo
36.78 342.901 38.02 343.561 38.9 344.841 cv
39.76 346.141 40.2 348.021 40.2 350.461 cv
40.2 352.921 39.76 354.801 38.9 356.081 cv
38.02 357.361 36.78 358.001 35.16 358.001 cv
33.52 358.001 32.26 357.361 31.4 356.081 cv
30.54 354.801 30.12 352.921 30.12 350.461 cv
30.12 348.021 30.54 346.141 31.4 344.841 cv
32.26 343.561 33.52 342.901 35.16 342.901 cv
f
43.66 355.261 mo
45.72 355.261 li
45.72 357.741 li
43.66 357.741 li
43.66 355.261 li
f
55.4399 344.881 mo
50.4599 352.661 li
55.4399 352.661 li
55.4399 344.881 li
54.9199 343.161 mo
57.3999 343.161 li
57.3999 352.661 li
59.4799 352.661 li
59.4799 354.301 li
57.3999 354.301 li
57.3999 357.741 li
55.4399 357.741 li
55.4399 354.301 li
48.8599 354.301 li
48.8599 352.401 li
54.9199 343.161 li
f
67.5969 240.66 mo
64.0969 240.66 li
f
67.5969 240.66 mo
64.0969 240.66 li
@
35.16 234.981 mo
34.14 234.981 33.38 235.481 32.86 236.481 cv
32.34 237.481 32.1 238.981 32.1 240.981 cv
32.1 242.981 32.34 244.481 32.86 245.481 cv
33.38 246.481 34.14 246.981 35.16 246.981 cv
36.18 246.981 36.94 246.481 37.46 245.481 cv
37.96 244.481 38.22 242.981 38.22 240.981 cv
38.22 238.981 37.96 237.481 37.46 236.481 cv
36.94 235.481 36.18 234.981 35.16 234.981 cv
35.16 233.421 mo
36.78 233.421 38.02 234.081 38.9 235.361 cv
39.76 236.661 40.2 238.541 40.2 240.981 cv
40.2 243.441 39.76 245.321 38.9 246.601 cv
38.02 247.881 36.78 248.521 35.16 248.521 cv
33.52 248.521 32.26 247.881 31.4 246.601 cv
30.54 245.321 30.12 243.441 30.12 240.981 cv
30.12 238.541 30.54 236.661 31.4 235.361 cv
32.26 234.081 33.52 233.421 35.16 233.421 cv
f
43.66 245.781 mo
45.72 245.781 li
45.72 248.261 li
43.66 248.261 li
43.66 245.781 li
f
54.4799 240.181 mo
53.5999 240.181 52.8999 240.501 52.3799 241.101 cv
51.8599 241.701 51.5999 242.541 51.5999 243.581 cv
51.5999 244.641 51.8599 245.481 52.3799 246.081 cv
52.8999 246.681 53.5999 246.981 54.4799 246.981 cv
55.3599 246.981 56.0599 246.681 56.5799 246.081 cv
57.0999 245.481 57.3599 244.641 57.3599 243.581 cv
57.3599 242.541 57.0999 241.701 56.5799 241.101 cv
56.0599 240.501 55.3599 240.181 54.4799 240.181 cv
58.3999 234.001 mo
58.3999 235.801 li
57.8999 235.561 57.3999 235.381 56.8999 235.261 cv
56.3799 235.141 55.8799 235.081 55.3999 235.081 cv
54.0799 235.081 53.0799 235.521 52.3999 236.401 cv
51.7199 237.281 51.3199 238.621 51.2399 240.381 cv
51.6199 239.821 52.0999 239.381 52.6799 239.081 cv
53.2599 238.781 53.8999 238.621 54.5999 238.621 cv
56.0599 238.621 57.2199 239.081 58.0599 239.961 cv
58.8999 240.841 59.3399 242.061 59.3399 243.581 cv
59.3399 245.081 58.8799 246.281 57.9999 247.181 cv
57.1199 248.081 55.9399 248.521 54.4799 248.521 cv
52.7999 248.521 51.4999 247.881 50.6199 246.601 cv
49.7199 245.321 49.2799 243.441 49.2799 240.981 cv
49.2799 238.681 49.8199 236.841 50.9199 235.481 cv
51.9999 234.121 53.4799 233.421 55.3199 233.421 cv
55.7999 233.421 56.2999 233.481 56.8199 233.561 cv
57.3199 233.661 57.8399 233.801 58.3999 234.001 cv
f
67.5969 131.18 mo
64.0969 131.18 li
f
67.5969 131.18 mo
64.0969 131.18 li
@
35.16 125.502 mo
34.14 125.502 33.38 126.002 32.86 127.002 cv
32.34 128.002 32.1 129.502 32.1 131.502 cv
32.1 133.502 32.34 135.002 32.86 136.002 cv
33.38 137.002 34.14 137.502 35.16 137.502 cv
36.18 137.502 36.94 137.002 37.46 136.002 cv
37.96 135.002 38.22 133.502 38.22 131.502 cv
38.22 129.502 37.96 128.002 37.46 127.002 cv
36.94 126.002 36.18 125.502 35.16 125.502 cv
35.16 123.942 mo
36.78 123.942 38.02 124.602 38.9 125.882 cv
39.76 127.182 40.2 129.062 40.2 131.502 cv
40.2 133.962 39.76 135.842 38.9 137.122 cv
38.02 138.402 36.78 139.042 35.16 139.042 cv
33.52 139.042 32.26 138.402 31.4 137.122 cv
30.54 135.842 30.12 133.962 30.12 131.502 cv
30.12 129.062 30.54 127.182 31.4 125.882 cv
32.26 124.602 33.52 123.942 35.16 123.942 cv
f
43.66 136.302 mo
45.72 136.302 li
45.72 138.782 li
43.66 138.782 li
43.66 136.302 li
f
54.2399 131.862 mo
53.2999 131.862 52.5599 132.122 52.0199 132.622 cv
51.4799 133.122 51.2199 133.802 51.2199 134.682 cv
51.2199 135.562 51.4799 136.262 52.0199 136.762 cv
52.5599 137.262 53.2999 137.502 54.2399 137.502 cv
55.1599 137.502 55.8999 137.262 56.4399 136.742 cv
56.9799 136.242 57.2599 135.562 57.2599 134.682 cv
57.2599 133.802 56.9799 133.122 56.4599 132.622 cv
55.9199 132.122 55.1799 131.862 54.2399 131.862 cv
52.2599 131.022 mo
51.4199 130.822 50.7599 130.422 50.2799 129.842 cv
49.7999 129.262 49.5799 128.562 49.5799 127.722 cv
49.5799 126.562 49.9799 125.642 50.8199 124.962 cv
51.6399 124.282 52.7799 123.942 54.2399 123.942 cv
55.6799 123.942 56.8199 124.282 57.6599 124.962 cv
58.4799 125.642 58.8999 126.562 58.8999 127.722 cv
58.8999 128.562 58.6599 129.262 58.1799 129.842 cv
57.6999 130.422 57.0599 130.822 56.2199 131.022 cv
57.1599 131.242 57.8999 131.682 58.4399 132.322 cv
58.9599 132.962 59.2399 133.762 59.2399 134.682 cv
59.2399 136.102 58.7999 137.182 57.9399 137.922 cv
57.0599 138.682 55.8399 139.042 54.2399 139.042 cv
52.6199 139.042 51.3799 138.682 50.5199 137.922 cv
49.6599 137.182 49.2399 136.102 49.2399 134.682 cv
49.2399 133.762 49.4999 132.962 50.0399 132.322 cv
50.5599 131.682 51.2999 131.242 52.2599 131.022 cv
51.5399 127.902 mo
51.5399 128.662 51.7599 129.262 52.2399 129.682 cv
52.7199 130.102 53.3799 130.302 54.2399 130.302 cv
55.0799 130.302 55.7399 130.102 56.2199 129.682 cv
56.6999 129.262 56.9399 128.662 56.9399 127.902 cv
56.9399 127.142 56.6999 126.562 56.2199 126.142 cv
55.7399 125.722 55.0799 125.502 54.2399 125.502 cv
53.3799 125.502 52.7199 125.722 52.2399 126.142 cv
51.7599 126.562 51.5399 127.142 51.5399 127.902 cv
f
67.5969 21.7009 mo
64.0969 21.7009 li
f
67.5969 21.7009 mo
64.0969 21.7009 li
@
31.28 27.6424 mo
34.5 27.6424 li
34.5 16.5224 li
31 17.2224 li
31 15.4224 li
34.48 14.7224 li
36.46 14.7224 li
36.46 27.6424 li
39.68 27.6424 li
39.68 29.3024 li
31.28 29.3024 li
31.28 27.6424 li
f
43.66 26.8224 mo
45.72 26.8224 li
45.72 29.3024 li
43.66 29.3024 li
43.66 26.8224 li
f
54.2399 16.0224 mo
53.2199 16.0224 52.4599 16.5224 51.9399 17.5224 cv
51.4199 18.5224 51.1799 20.0224 51.1799 22.0224 cv
51.1799 24.0224 51.4199 25.5224 51.9399 26.5224 cv
52.4599 27.5224 53.2199 28.0224 54.2399 28.0224 cv
55.2599 28.0224 56.0199 27.5224 56.5399 26.5224 cv
57.0399 25.5224 57.2999 24.0224 57.2999 22.0224 cv
57.2999 20.0224 57.0399 18.5224 56.5399 17.5224 cv
56.0199 16.5224 55.2599 16.0224 54.2399 16.0224 cv
54.2399 14.4624 mo
55.8599 14.4624 57.0999 15.1224 57.9799 16.4024 cv
58.8399 17.7024 59.2799 19.5824 59.2799 22.0224 cv
59.2799 24.4824 58.8399 26.3624 57.9799 27.6424 cv
57.0999 28.9224 55.8599 29.5624 54.2399 29.5624 cv
52.5999 29.5624 51.3399 28.9224 50.4799 27.6424 cv
49.6199 26.3624 49.1999 24.4824 49.1999 22.0224 cv
49.1999 19.5824 49.6199 17.7024 50.4799 16.4024 cv
51.3399 15.1224 52.5999 14.4624 54.2399 14.4624 cv
f
8.00375 342.903 mo
15.2638 345.583 li
15.2638 340.223 li
8.00375 342.903 li
6.06375 344.023 mo
6.06375 341.783 li
20.6438 336.223 li
20.6438 338.283 li
16.9038 339.603 li
16.9038 346.183 li
20.6438 347.503 li
20.6438 349.583 li
6.06375 344.023 li
f
10.1237 326.303 mo
11.8038 326.303 li
11.5238 326.823 11.3238 327.323 11.1838 327.843 cv
11.0438 328.363 10.9638 328.863 10.9638 329.383 cv
10.9638 330.543 11.3438 331.463 12.0838 332.103 cv
12.8238 332.743 13.8638 333.063 15.1838 333.063 cv
16.5238 333.063 17.5638 332.743 18.3038 332.103 cv
19.0438 331.463 19.4038 330.543 19.4038 329.383 cv
19.4038 328.863 19.3438 328.363 19.2038 327.843 cv
19.0638 327.323 18.8438 326.823 18.5638 326.303 cv
20.2238 326.303 li
20.4638 326.823 20.6438 327.343 20.7438 327.863 cv
20.8438 328.403 20.9038 328.983 20.9038 329.583 cv
20.9038 331.223 20.4038 332.543 19.3638 333.503 cv
18.3438 334.483 16.9438 334.963 15.1838 334.963 cv
13.4038 334.963 12.0038 334.483 10.9837 333.503 cv
9.96375 332.523 9.44376 331.183 9.44376 329.463 cv
9.44376 328.903 9.50375 328.363 9.62375 327.843 cv
9.74375 327.323 9.90376 326.803 10.1237 326.303 cv
f
10.1237 315.303 mo
11.8038 315.303 li
11.5238 315.823 11.3238 316.323 11.1838 316.843 cv
11.0438 317.363 10.9638 317.863 10.9638 318.383 cv
10.9638 319.543 11.3438 320.463 12.0838 321.103 cv
12.8238 321.743 13.8638 322.063 15.1838 322.063 cv
16.5238 322.063 17.5638 321.743 18.3038 321.103 cv
19.0438 320.463 19.4038 319.543 19.4038 318.383 cv
19.4038 317.863 19.3438 317.363 19.2038 316.843 cv
19.0638 316.323 18.8438 315.823 18.5638 315.303 cv
20.2238 315.303 li
20.4638 315.823 20.6438 316.343 20.7438 316.863 cv
20.8438 317.403 20.9038 317.983 20.9038 318.583 cv
20.9038 320.223 20.4038 321.543 19.3638 322.503 cv
18.3438 323.483 16.9438 323.963 15.1838 323.963 cv
13.4038 323.963 12.0038 323.483 10.9837 322.503 cv
9.96375 321.523 9.44376 320.183 9.44376 318.463 cv
9.44376 317.903 9.50375 317.363 9.62375 316.843 cv
9.74375 316.323 9.90376 315.803 10.1237 315.303 cv
f
16.3238 312.363 mo
9.70375 312.363 li
9.70375 310.563 li
16.2638 310.563 li
17.3038 310.563 18.0638 310.363 18.5838 309.963 cv
19.1038 309.563 19.3638 308.963 19.3638 308.143 cv
19.3638 307.183 19.0638 306.403 18.4438 305.843 cv
17.8238 305.283 16.9837 305.003 15.9038 305.003 cv
9.70375 305.003 li
9.70375 303.203 li
20.6438 303.203 li
20.6438 305.003 li
18.9638 305.003 li
19.6438 305.443 20.1238 305.963 20.4438 306.523 cv
20.7438 307.103 20.9038 307.763 20.9038 308.523 cv
20.9038 309.783 20.5238 310.743 19.7438 311.383 cv
18.9837 312.043 17.8438 312.363 16.3238 312.363 cv
9.44376 307.843 mo
9.44376 307.843 li
f
11.3838 293.163 mo
11.2637 293.363 11.1838 293.583 11.1237 293.823 cv
11.0838 294.063 11.0438 294.323 11.0438 294.603 cv
11.0438 295.623 11.3838 296.403 12.0438 296.943 cv
12.7038 297.503 13.6438 297.763 14.8838 297.763 cv
20.6438 297.763 li
20.6438 299.563 li
9.70375 299.563 li
9.70375 297.763 li
11.4038 297.763 li
10.7438 297.403 10.2438 296.903 9.92375 296.303 cv
9.60375 295.703 9.44376 294.963 9.44376 294.083 cv
9.44376 293.963 9.46375 293.823 9.46375 293.663 cv
9.48375 293.523 9.50375 293.363 9.54375 293.163 cv
11.3838 293.163 li
f
15.1438 286.303 mo
15.1438 287.763 15.3238 288.763 15.6438 289.323 cv
15.9837 289.883 16.5438 290.163 17.3438 290.163 cv
17.9837 290.163 18.5038 289.963 18.8638 289.543 cv
19.2438 289.123 19.4238 288.543 19.4238 287.823 cv
19.4238 286.823 19.0838 286.023 18.3638 285.423 cv
17.6637 284.823 16.7238 284.523 15.5438 284.523 cv
15.1438 284.523 li
15.1438 286.303 li
14.4038 282.723 mo
20.6438 282.723 li
20.6438 284.523 li
18.9837 284.523 li
19.6637 284.943 20.1438 285.463 20.4438 286.063 cv
20.7438 286.663 20.9038 287.423 20.9038 288.303 cv
20.9038 289.423 20.6038 290.323 19.9837 290.983 cv
19.3638 291.643 18.5238 291.963 17.4638 291.963 cv
16.2438 291.963 15.3238 291.563 14.6838 290.723 cv
14.0638 289.903 13.7438 288.683 13.7438 287.043 cv
13.7438 284.523 li
13.5638 284.523 li
12.7438 284.523 12.1038 284.803 11.6438 285.343 cv
11.2038 285.883 10.9638 286.643 10.9638 287.623 cv
10.9638 288.263 11.0438 288.863 11.2038 289.463 cv
11.3638 290.063 11.5838 290.623 11.8638 291.163 cv
10.2038 291.163 li
9.96375 290.523 9.76375 289.883 9.64375 289.263 cv
9.52375 288.643 9.44376 288.043 9.44376 287.443 cv
9.44376 285.863 9.86375 284.683 10.6838 283.903 cv
11.5038 283.123 12.7438 282.723 14.4038 282.723 cv
f
10.1237 271.143 mo
11.8038 271.143 li
11.5238 271.663 11.3238 272.163 11.1838 272.683 cv
11.0438 273.203 10.9638 273.703 10.9638 274.223 cv
10.9638 275.383 11.3438 276.303 12.0838 276.943 cv
12.8238 277.583 13.8638 277.903 15.1838 277.903 cv
16.5238 277.903 17.5638 277.583 18.3038 276.943 cv
19.0438 276.303 19.4038 275.383 19.4038 274.223 cv
19.4038 273.703 19.3438 273.203 19.2038 272.683 cv
19.0638 272.163 18.8438 271.663 18.5638 271.143 cv
20.2238 271.143 li
20.4638 271.663 20.6438 272.183 20.7438 272.703 cv
20.8438 273.243 20.9038 273.823 20.9038 274.423 cv
20.9038 276.063 20.4038 277.383 19.3638 278.343 cv
18.3438 279.323 16.9438 279.803 15.1838 279.803 cv
13.4038 279.803 12.0038 279.323 10.9837 278.343 cv
9.96375 277.363 9.44376 276.023 9.44376 274.303 cv
9.44376 273.743 9.50375 273.203 9.62375 272.683 cv
9.74375 272.163 9.90376 271.643 10.1237 271.143 cv
f
21.6438 263.462 mo
22.9238 263.982 23.7838 264.482 24.1837 264.962 cv
24.5838 265.443 24.7838 266.082 24.7838 266.883 cv
24.7838 268.323 li
23.2838 268.323 li
23.2838 267.262 li
23.2838 266.783 23.1638 266.402 22.9238 266.122 cv
22.6838 265.842 22.1438 265.543 21.2638 265.202 cv
20.4638 264.883 li
9.70375 269.302 li
9.70375 267.402 li
18.2638 263.982 li
9.70375 260.563 li
9.70375 258.663 li
21.6438 263.462 li
f
13.8037 242.823 mo
13.9638 242.403 14.2638 241.983 14.7238 241.583 cv
15.2038 241.183 15.8438 240.783 16.6637 240.383 cv
20.6438 238.383 li
20.6438 240.503 li
16.9038 242.363 li
15.9438 242.843 15.2838 243.323 14.9638 243.763 cv
14.6438 244.223 14.4837 244.843 14.4837 245.623 cv
14.4837 247.763 li
20.6438 247.763 li
20.6438 249.743 li
6.06375 249.743 li
6.06375 245.283 li
6.06375 243.623 6.42375 242.383 7.10375 241.563 cv
7.80375 240.743 8.86375 240.323 10.2637 240.323 cv
11.1838 240.323 11.9638 240.543 12.5638 240.963 cv
13.1637 241.403 13.5838 242.023 13.8037 242.823 cv
7.68375 247.763 mo
12.8638 247.763 li
12.8638 245.283 li
12.8638 244.343 12.6438 243.623 12.2038 243.143 cv
11.7637 242.663 11.1237 242.403 10.2637 242.403 cv
9.42375 242.403 8.78375 242.663 8.34375 243.143 cv
7.90376 243.623 7.68375 244.343 7.68375 245.283 cv
7.68375 247.763 li
f
15.1438 230.943 mo
15.1438 232.403 15.3238 233.403 15.6438 233.963 cv
15.9837 234.523 16.5438 234.803 17.3438 234.803 cv
17.9837 234.803 18.5038 234.603 18.8638 234.183 cv
19.2438 233.763 19.4238 233.183 19.4238 232.463 cv
19.4238 231.463 19.0838 230.663 18.3638 230.063 cv
17.6637 229.463 16.7238 229.163 15.5438 229.163 cv
15.1438 229.163 li
15.1438 230.943 li
14.4038 227.363 mo
20.6438 227.363 li
20.6438 229.163 li
18.9837 229.163 li
19.6637 229.583 20.1438 230.103 20.4438 230.703 cv
20.7438 231.303 20.9038 232.063 20.9038 232.943 cv
20.9038 234.063 20.6038 234.963 19.9837 235.623 cv
19.3638 236.283 18.5238 236.603 17.4638 236.603 cv
16.2438 236.603 15.3238 236.203 14.6838 235.363 cv
14.0638 234.543 13.7438 233.323 13.7438 231.683 cv
13.7438 229.163 li
13.5638 229.163 li
12.7438 229.163 12.1038 229.443 11.6438 229.983 cv
11.2038 230.523 10.9638 231.283 10.9638 232.263 cv
10.9638 232.903 11.0438 233.503 11.2038 234.103 cv
11.3638 234.703 11.5838 235.263 11.8638 235.803 cv
10.2038 235.803 li
9.96375 235.163 9.76375 234.523 9.64375 233.903 cv
9.52375 233.283 9.44376 232.683 9.44376 232.083 cv
9.44376 230.503 9.86375 229.323 10.6838 228.543 cv
11.5038 227.763 12.7438 227.363 14.4038 227.363 cv
f
6.60375 221.882 mo
9.70375 221.882 li
9.70375 218.182 li
11.1038 218.182 li
11.1038 221.882 li
17.0438 221.882 li
17.9438 221.882 18.5238 221.762 18.7638 221.522 cv
19.0238 221.282 19.1438 220.782 19.1438 220.022 cv
19.1438 218.182 li
20.6438 218.182 li
20.6438 220.022 li
20.6438 221.422 20.3838 222.382 19.8638 222.902 cv
19.3438 223.422 18.4038 223.682 17.0438 223.682 cv
11.1038 223.682 li
11.1038 225.002 li
9.70375 225.002 li
9.70375 223.682 li
6.60375 223.682 li
6.60375 221.882 li
f
14.7238 206.462 mo
15.6038 206.462 li
15.6038 214.722 li
16.8438 214.642 17.8038 214.282 18.4438 213.602 cv
19.0838 212.942 19.4038 212.022 19.4038 210.822 cv
19.4038 210.142 19.3238 209.462 19.1637 208.822 cv
19.0038 208.182 18.7438 207.522 18.3838 206.882 cv
20.0838 206.882 li
20.3638 207.522 20.5838 208.182 20.7038 208.862 cv
20.8238 209.542 20.9038 210.242 20.9038 210.922 cv
20.9038 212.682 20.4038 214.062 19.4038 215.082 cv
18.4038 216.102 17.0238 216.602 15.2838 216.602 cv
13.5038 216.602 12.0838 216.122 11.0238 215.162 cv
9.98375 214.202 9.44376 212.882 9.44376 211.242 cv
9.44376 209.762 9.92375 208.602 10.8638 207.742 cv
11.8238 206.902 13.1038 206.462 14.7238 206.462 cv
14.2038 208.262 mo
13.2238 208.282 12.4438 208.562 11.8438 209.082 cv
11.2637 209.622 10.9638 210.342 10.9638 211.222 cv
10.9638 212.222 11.2637 213.022 11.8238 213.622 cv
12.3838 214.222 13.1838 214.582 14.2038 214.662 cv
14.2038 208.262 li
f
1.5 lw
2 lc
116.295 512.729 mo
126.133 509.42 li
135.971 509.42 li
145.809 509.42 li
155.647 509.42 li
165.485 509.42 li
175.323 509.42 li
185.161 509.42 li
194.999 509.42 li
204.837 509.42 li
214.675 509.104 li
224.513 508.313 li
234.351 508.313 li
244.189 508.313 li
254.027 507.206 li
263.865 502.949 li
273.703 497.402 li
283.541 493.667 li
293.379 484.921 li
303.217 468.049 li
313.055 449.924 li
322.893 426.021 li
332.731 400.123 li
342.569 375.283 li
352.407 342.829 li
362.245 319.23 li
372.083 289.159 li
381.922 270.682 li
391.76 246.158 li
401.598 225.357 li
411.436 206.223 li
421.274 186.455 li
431.112 168.489 li
440.95 152.955 li
450.788 144.707 li
460.626 133.309 li
470.464 122.75 li
480.302 113.177 li
490.14 106.17 li
499.978 99.4313 li
509.816 93.6532 li
519.654 89.1159 li
529.492 81.7929 li
539.33 76.3798 li
549.168 73.4725 li
559.006 70.4435 li
568.844 65.5778 li
578.682 63.0841 li
588.52 60.8945 li
598.358 58.0967 li
608.196 55.603 li
618.034 52.647 li
627.872 50.421 li
637.71 48.8517 li
647.548 47.7205 li
657.386 46.7473 li
667.224 46.4432 li
677.062 45.7863 li
686.9 45.312 li
696.738 44.7402 li
706.576 44.278 li
716.414 43.8279 li
726.252 43.6332 li
736.09 42.9885 li
745.928 43.3535 li
755.766 41.8329 li
765.604 41.4558 li
775.442 38.9135 li
785.28 38.8648 li
795.118 38.7675 li
804.956 38.7432 li
814.794 38.6945 li
824.632 38.6458 li
834.47 38.6702 li
844.308 38.5972 li
854.146 38.5242 li
863.984 38.4999 li
873.822 38.439 li
883.66 38.4269 li
893.498 38.3782 li
903.336 38.3174 li
913.174 38.3052 li
923.012 38.2444 li
932.85 38.1957 li
942.688 38.1227 li
952.526 38.0498 li
962.365 38.0498 li
972.203 37.9647 li
982.041 37.8917 li
991.879 37.8308 li
1001.72 37.77 li
1011.55 37.7578 li
1021.39 37.6849 li
1031.23 37.6849 li
1041.07 37.6849 li
1050.91 37.6484 li
1060.74 37.5875 li
1070.58 37.5632 li
1080.42 37.5389 li
1090.26 37.5145 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
116.295 516.804 mo
126.133 521.767 li
135.971 521.767 li
145.809 521.767 li
155.647 521.767 li
165.485 521.767 li
175.323 521.767 li
185.161 521.767 li
194.999 521.767 li
204.837 521.767 li
214.675 521.42 li
224.513 520.69 li
234.351 520.69 li
244.189 520.69 li
254.027 519.796 li
263.865 515.654 li
273.703 510.162 li
283.541 506.385 li
293.379 498.338 li
303.217 481.296 li
313.055 462.429 li
322.893 438.873 li
332.731 412.743 li
342.569 386.012 li
352.407 356.343 li
362.245 331.437 li
372.083 300.801 li
381.922 280.967 li
391.76 255.805 li
401.598 234.967 li
411.436 213.983 li
421.274 193.273 li
431.112 173.823 li
440.95 158.587 li
450.788 149.81 li
460.626 138.534 li
470.464 127.969 li
480.302 119.375 li
490.14 111.419 li
499.978 104.613 li
509.816 97.0045 li
519.654 91.567 li
529.492 85.2537 li
539.33 80.3818 li
549.168 78.0098 li
559.006 74.9626 li
568.844 69.6529 li
578.682 67.2808 li
588.52 65.2554 li
598.358 62.0623 li
608.196 59.4895 li
618.034 56.5336 li
627.872 54.7272 li
637.71 53.1762 li
647.548 52.1727 li
657.386 51.7165 li
667.224 51.2238 li
677.062 50.6764 li
686.9 50.5122 li
696.738 50.4757 li
706.576 50.0195 li
716.414 49.8371 li
726.252 49.6181 li
736.09 49.1619 li
745.928 49.1437 li
755.766 47.6475 li
765.604 47.7752 li
775.442 45.4761 li
785.28 45.6769 li
795.118 45.6586 li
804.956 45.6586 li
814.794 45.6039 li
824.632 45.4944 li
834.47 45.5309 li
844.308 45.5309 li
854.146 45.3849 li
863.984 45.3484 li
873.822 45.239 li
883.66 45.1842 li
893.498 45.166 li
903.336 45.0382 li
913.174 44.9835 li
923.012 44.9835 li
932.85 44.8923 li
942.688 44.9105 li
952.526 44.874 li
962.365 44.874 li
972.203 44.8375 li
982.041 44.8923 li
991.879 44.8558 li
1001.72 44.8193 li
1011.55 44.7828 li
1021.39 44.728 li
1031.23 44.6915 li
1041.07 44.6368 li
1050.91 44.6185 li
1060.74 44.6003 li
1070.58 44.6185 li
1080.42 44.5638 li
1090.26 44.6003 li
@
gsave
112.795 520.304 mo
119.795 520.304 li
119.795 513.304 li
112.795 513.304 li
112.795 520.304 li
clp
113.295 519.804 mo
119.295 513.804 li
113.295 513.804 mo
119.295 519.804 li
f
1 lw
0 lc
113.295 519.804 mo
119.295 513.804 li
113.295 513.804 mo
119.295 519.804 li
@
grestore
gsave
122.633 525.267 mo
129.633 525.267 li
129.633 518.267 li
122.633 518.267 li
122.633 525.267 li
clp
123.133 524.767 mo
129.133 518.767 li
123.133 518.767 mo
129.133 524.767 li
f
1 lw
0 lc
123.133 524.767 mo
129.133 518.767 li
123.133 518.767 mo
129.133 524.767 li
@
grestore
gsave
132.471 525.267 mo
139.471 525.267 li
139.471 518.267 li
132.471 518.267 li
132.471 525.267 li
clp
132.971 524.767 mo
138.971 518.767 li
132.971 518.767 mo
138.971 524.767 li
f
1 lw
0 lc
132.971 524.767 mo
138.971 518.767 li
132.971 518.767 mo
138.971 524.767 li
@
grestore
gsave
142.309 525.267 mo
149.309 525.267 li
149.309 518.267 li
142.309 518.267 li
142.309 525.267 li
clp
142.809 524.767 mo
148.809 518.767 li
142.809 518.767 mo
148.809 524.767 li
f
1 lw
0 lc
142.809 524.767 mo
148.809 518.767 li
142.809 518.767 mo
148.809 524.767 li
@
grestore
gsave
152.147 525.267 mo
159.147 525.267 li
159.147 518.267 li
152.147 518.267 li
152.147 525.267 li
clp
152.647 524.767 mo
158.647 518.767 li
152.647 518.767 mo
158.647 524.767 li
f
1 lw
0 lc
152.647 524.767 mo
158.647 518.767 li
152.647 518.767 mo
158.647 524.767 li
@
grestore
gsave
161.985 525.267 mo
168.985 525.267 li
168.985 518.267 li
161.985 518.267 li
161.985 525.267 li
clp
162.485 524.767 mo
168.485 518.767 li
162.485 518.767 mo
168.485 524.767 li
f
1 lw
0 lc
162.485 524.767 mo
168.485 518.767 li
162.485 518.767 mo
168.485 524.767 li
@
grestore
gsave
171.823 525.267 mo
178.823 525.267 li
178.823 518.267 li
171.823 518.267 li
171.823 525.267 li
clp
172.323 524.767 mo
178.323 518.767 li
172.323 518.767 mo
178.323 524.767 li
f
1 lw
0 lc
172.323 524.767 mo
178.323 518.767 li
172.323 518.767 mo
178.323 524.767 li
@
grestore
gsave
181.661 525.267 mo
188.661 525.267 li
188.661 518.267 li
181.661 518.267 li
181.661 525.267 li
clp
182.161 524.767 mo
188.161 518.767 li
182.161 518.767 mo
188.161 524.767 li
f
1 lw
0 lc
182.161 524.767 mo
188.161 518.767 li
182.161 518.767 mo
188.161 524.767 li
@
grestore
gsave
191.499 525.267 mo
198.499 525.267 li
198.499 518.267 li
191.499 518.267 li
191.499 525.267 li
clp
191.999 524.767 mo
197.999 518.767 li
191.999 518.767 mo
197.999 524.767 li
f
1 lw
0 lc
191.999 524.767 mo
197.999 518.767 li
191.999 518.767 mo
197.999 524.767 li
@
grestore
gsave
201.337 525.267 mo
208.337 525.267 li
208.337 518.267 li
201.337 518.267 li
201.337 525.267 li
clp
201.837 524.767 mo
207.837 518.767 li
201.837 518.767 mo
207.837 524.767 li
f
1 lw
0 lc
201.837 524.767 mo
207.837 518.767 li
201.837 518.767 mo
207.837 524.767 li
@
grestore
gsave
211.175 524.92 mo
218.175 524.92 li
218.175 517.92 li
211.175 517.92 li
211.175 524.92 li
clp
211.675 524.42 mo
217.675 518.42 li
211.675 518.42 mo
217.675 524.42 li
f
1 lw
0 lc
211.675 524.42 mo
217.675 518.42 li
211.675 518.42 mo
217.675 524.42 li
@
grestore
gsave
221.013 524.19 mo
228.013 524.19 li
228.013 517.19 li
221.013 517.19 li
221.013 524.19 li
clp
221.513 523.69 mo
227.513 517.69 li
221.513 517.69 mo
227.513 523.69 li
f
1 lw
0 lc
221.513 523.69 mo
227.513 517.69 li
221.513 517.69 mo
227.513 523.69 li
@
grestore
gsave
230.851 524.19 mo
237.851 524.19 li
237.851 517.19 li
230.851 517.19 li
230.851 524.19 li
clp
231.351 523.69 mo
237.351 517.69 li
231.351 517.69 mo
237.351 523.69 li
f
1 lw
0 lc
231.351 523.69 mo
237.351 517.69 li
231.351 517.69 mo
237.351 523.69 li
@
grestore
gsave
240.689 524.19 mo
247.689 524.19 li
247.689 517.19 li
240.689 517.19 li
240.689 524.19 li
clp
241.189 523.69 mo
247.189 517.69 li
241.189 517.69 mo
247.189 523.69 li
f
1 lw
0 lc
241.189 523.69 mo
247.189 517.69 li
241.189 517.69 mo
247.189 523.69 li
@
grestore
gsave
250.527 523.296 mo
257.527 523.296 li
257.527 516.296 li
250.527 516.296 li
250.527 523.296 li
clp
251.027 522.796 mo
257.027 516.796 li
251.027 516.796 mo
257.027 522.796 li
f
1 lw
0 lc
251.027 522.796 mo
257.027 516.796 li
251.027 516.796 mo
257.027 522.796 li
@
grestore
gsave
260.365 519.154 mo
267.365 519.154 li
267.365 512.154 li
260.365 512.154 li
260.365 519.154 li
clp
260.865 518.654 mo
266.865 512.654 li
260.865 512.654 mo
266.865 518.654 li
f
1 lw
0 lc
260.865 518.654 mo
266.865 512.654 li
260.865 512.654 mo
266.865 518.654 li
@
grestore
gsave
270.203 513.662 mo
277.203 513.662 li
277.203 506.662 li
270.203 506.662 li
270.203 513.662 li
clp
270.703 513.162 mo
276.703 507.162 li
270.703 507.162 mo
276.703 513.162 li
f
1 lw
0 lc
270.703 513.162 mo
276.703 507.162 li
270.703 507.162 mo
276.703 513.162 li
@
grestore
gsave
280.041 509.885 mo
287.041 509.885 li
287.041 502.885 li
280.041 502.885 li
280.041 509.885 li
clp
280.541 509.385 mo
286.541 503.385 li
280.541 503.385 mo
286.541 509.385 li
f
1 lw
0 lc
280.541 509.385 mo
286.541 503.385 li
280.541 503.385 mo
286.541 509.385 li
@
grestore
gsave
289.879 501.838 mo
296.879 501.838 li
296.879 494.838 li
289.879 494.838 li
289.879 501.838 li
clp
290.379 501.338 mo
296.379 495.338 li
290.379 495.338 mo
296.379 501.338 li
f
1 lw
0 lc
290.379 501.338 mo
296.379 495.338 li
290.379 495.338 mo
296.379 501.338 li
@
grestore
gsave
299.717 484.796 mo
306.717 484.796 li
306.717 477.796 li
299.717 477.796 li
299.717 484.796 li
clp
300.217 484.296 mo
306.217 478.296 li
300.217 478.296 mo
306.217 484.296 li
f
1 lw
0 lc
300.217 484.296 mo
306.217 478.296 li
300.217 478.296 mo
306.217 484.296 li
@
grestore
gsave
309.555 465.929 mo
316.555 465.929 li
316.555 458.929 li
309.555 458.929 li
309.555 465.929 li
clp
310.055 465.429 mo
316.055 459.429 li
310.055 459.429 mo
316.055 465.429 li
f
1 lw
0 lc
310.055 465.429 mo
316.055 459.429 li
310.055 459.429 mo
316.055 465.429 li
@
grestore
gsave
319.393 442.373 mo
326.393 442.373 li
326.393 435.373 li
319.393 435.373 li
319.393 442.373 li
clp
319.893 441.873 mo
325.893 435.873 li
319.893 435.873 mo
325.893 441.873 li
f
1 lw
0 lc
319.893 441.873 mo
325.893 435.873 li
319.893 435.873 mo
325.893 441.873 li
@
grestore
gsave
329.231 416.243 mo
336.231 416.243 li
336.231 409.243 li
329.231 409.243 li
329.231 416.243 li
clp
329.731 415.743 mo
335.731 409.743 li
329.731 409.743 mo
335.731 415.743 li
f
1 lw
0 lc
329.731 415.743 mo
335.731 409.743 li
329.731 409.743 mo
335.731 415.743 li
@
grestore
gsave
339.069 389.512 mo
346.069 389.512 li
346.069 382.512 li
339.069 382.512 li
339.069 389.512 li
clp
339.569 389.012 mo
345.569 383.012 li
339.569 383.012 mo
345.569 389.012 li
f
1 lw
0 lc
339.569 389.012 mo
345.569 383.012 li
339.569 383.012 mo
345.569 389.012 li
@
grestore
gsave
348.907 359.843 mo
355.907 359.843 li
355.907 352.843 li
348.907 352.843 li
348.907 359.843 li
clp
349.407 359.343 mo
355.407 353.343 li
349.407 353.343 mo
355.407 359.343 li
f
1 lw
0 lc
349.407 359.343 mo
355.407 353.343 li
349.407 353.343 mo
355.407 359.343 li
@
grestore
gsave
358.745 334.937 mo
365.745 334.937 li
365.745 327.937 li
358.745 327.937 li
358.745 334.937 li
clp
359.245 334.437 mo
365.245 328.437 li
359.245 328.437 mo
365.245 334.437 li
f
1 lw
0 lc
359.245 334.437 mo
365.245 328.437 li
359.245 328.437 mo
365.245 334.437 li
@
grestore
gsave
368.584 304.301 mo
375.583 304.301 li
375.583 297.301 li
368.584 297.301 li
368.584 304.301 li
clp
369.083 303.801 mo
375.083 297.801 li
369.083 297.801 mo
375.083 303.801 li
f
1 lw
0 lc
369.083 303.801 mo
375.083 297.801 li
369.083 297.801 mo
375.083 303.801 li
@
grestore
gsave
378.421 284.467 mo
385.422 284.467 li
385.422 277.467 li
378.421 277.467 li
378.421 284.467 li
clp
378.921 283.967 mo
384.921 277.967 li
378.921 277.967 mo
384.921 283.967 li
f
1 lw
0 lc
378.921 283.967 mo
384.921 277.967 li
378.921 277.967 mo
384.921 283.967 li
@
grestore
gsave
388.259 259.305 mo
395.259 259.305 li
395.259 252.305 li
388.259 252.305 li
388.259 259.305 li
clp
388.759 258.805 mo
394.759 252.805 li
388.759 252.805 mo
394.759 258.805 li
f
1 lw
0 lc
388.759 258.805 mo
394.759 252.805 li
388.759 252.805 mo
394.759 258.805 li
@
grestore
gsave
398.097 238.467 mo
405.097 238.467 li
405.097 231.467 li
398.097 231.467 li
398.097 238.467 li
clp
398.597 237.967 mo
404.597 231.967 li
398.597 231.967 mo
404.597 237.967 li
f
1 lw
0 lc
398.597 237.967 mo
404.597 231.967 li
398.597 231.967 mo
404.597 237.967 li
@
grestore
gsave
407.935 217.483 mo
414.935 217.483 li
414.935 210.483 li
407.935 210.483 li
407.935 217.483 li
clp
408.435 216.983 mo
414.435 210.983 li
408.435 210.983 mo
414.435 216.983 li
f
1 lw
0 lc
408.435 216.983 mo
414.435 210.983 li
408.435 210.983 mo
414.435 216.983 li
@
grestore
gsave
417.773 196.773 mo
424.773 196.773 li
424.773 189.773 li
417.773 189.773 li
417.773 196.773 li
clp
418.273 196.273 mo
424.273 190.273 li
418.273 190.273 mo
424.273 196.273 li
f
1 lw
0 lc
418.273 196.273 mo
424.273 190.273 li
418.273 190.273 mo
424.273 196.273 li
@
grestore
gsave
427.612 177.323 mo
434.612 177.323 li
434.612 170.323 li
427.612 170.323 li
427.612 177.323 li
clp
428.112 176.823 mo
434.112 170.823 li
428.112 170.823 mo
434.112 176.823 li
f
1 lw
0 lc
428.112 176.823 mo
434.112 170.823 li
428.112 170.823 mo
434.112 176.823 li
@
grestore
gsave
437.45 162.087 mo
444.45 162.087 li
444.45 155.087 li
437.45 155.087 li
437.45 162.087 li
clp
437.95 161.587 mo
443.95 155.587 li
437.95 155.587 mo
443.95 161.587 li
f
1 lw
0 lc
437.95 161.587 mo
443.95 155.587 li
437.95 155.587 mo
443.95 161.587 li
@
grestore
gsave
447.288 153.31 mo
454.288 153.31 li
454.288 146.31 li
447.288 146.31 li
447.288 153.31 li
clp
447.788 152.81 mo
453.788 146.81 li
447.788 146.81 mo
453.788 152.81 li
f
1 lw
0 lc
447.788 152.81 mo
453.788 146.81 li
447.788 146.81 mo
453.788 152.81 li
@
grestore
gsave
457.125 142.034 mo
464.126 142.034 li
464.126 135.034 li
457.125 135.034 li
457.125 142.034 li
clp
457.626 141.534 mo
463.626 135.534 li
457.626 135.534 mo
463.626 141.534 li
f
1 lw
0 lc
457.626 141.534 mo
463.626 135.534 li
457.626 135.534 mo
463.626 141.534 li
@
grestore
gsave
466.963 131.469 mo
473.963 131.469 li
473.963 124.469 li
466.963 124.469 li
466.963 131.469 li
clp
467.464 130.969 mo
473.464 124.969 li
467.464 124.969 mo
473.464 130.969 li
f
1 lw
0 lc
467.464 130.969 mo
473.464 124.969 li
467.464 124.969 mo
473.464 130.969 li
@
grestore
gsave
476.802 122.875 mo
483.801 122.875 li
483.801 115.875 li
476.802 115.875 li
476.802 122.875 li
clp
477.302 122.375 mo
483.302 116.375 li
477.302 116.375 mo
483.302 122.375 li
f
1 lw
0 lc
477.302 122.375 mo
483.302 116.375 li
477.302 116.375 mo
483.302 122.375 li
@
grestore
gsave
486.64 114.919 mo
493.64 114.919 li
493.64 107.919 li
486.64 107.919 li
486.64 114.919 li
clp
487.14 114.419 mo
493.14 108.419 li
487.14 108.419 mo
493.14 114.419 li
f
1 lw
0 lc
487.14 114.419 mo
493.14 108.419 li
487.14 108.419 mo
493.14 114.419 li
@
grestore
gsave
496.478 108.113 mo
503.478 108.113 li
503.478 101.113 li
496.478 101.113 li
496.478 108.113 li
clp
496.978 107.613 mo
502.978 101.613 li
496.978 101.613 mo
502.978 107.613 li
f
1 lw
0 lc
496.978 107.613 mo
502.978 101.613 li
496.978 101.613 mo
502.978 107.613 li
@
grestore
gsave
506.316 100.504 mo
513.316 100.504 li
513.316 93.5045 li
506.316 93.5045 li
506.316 100.504 li
clp
506.816 100.004 mo
512.816 94.0045 li
506.816 94.0045 mo
512.816 100.004 li
f
1 lw
0 lc
506.816 100.004 mo
512.816 94.0045 li
506.816 94.0045 mo
512.816 100.004 li
@
grestore
gsave
516.154 95.067 mo
523.154 95.067 li
523.154 88.0671 li
516.154 88.0671 li
516.154 95.067 li
clp
516.654 94.567 mo
522.654 88.567 li
516.654 88.567 mo
522.654 94.567 li
f
1 lw
0 lc
516.654 94.567 mo
522.654 88.567 li
516.654 88.567 mo
522.654 94.567 li
@
grestore
gsave
525.991 88.7537 mo
532.992 88.7537 li
532.992 81.7537 li
525.991 81.7537 li
525.991 88.7537 li
clp
526.492 88.2537 mo
532.492 82.2537 li
526.492 82.2537 mo
532.492 88.2537 li
f
1 lw
0 lc
526.492 88.2537 mo
532.492 82.2537 li
526.492 82.2537 mo
532.492 88.2537 li
@
grestore
gsave
535.83 83.8817 mo
542.829 83.8817 li
542.829 76.8817 li
535.83 76.8817 li
535.83 83.8817 li
clp
536.33 83.3818 mo
542.33 77.3818 li
536.33 77.3818 mo
542.33 83.3818 li
f
1 lw
0 lc
536.33 83.3818 mo
542.33 77.3818 li
536.33 77.3818 mo
542.33 83.3818 li
@
grestore
gsave
545.668 81.5097 mo
552.668 81.5097 li
552.668 74.5098 li
545.668 74.5098 li
545.668 81.5097 li
clp
546.168 81.0098 mo
552.168 75.0098 li
546.168 75.0098 mo
552.168 81.0098 li
f
1 lw
0 lc
546.168 81.0098 mo
552.168 75.0098 li
546.168 75.0098 mo
552.168 81.0098 li
@
grestore
gsave
555.506 78.4626 mo
562.506 78.4626 li
562.506 71.4626 li
555.506 71.4626 li
555.506 78.4626 li
clp
556.006 77.9626 mo
562.006 71.9626 li
556.006 71.9626 mo
562.006 77.9626 li
f
1 lw
0 lc
556.006 77.9626 mo
562.006 71.9626 li
556.006 71.9626 mo
562.006 77.9626 li
@
grestore
gsave
565.344 73.1528 mo
572.344 73.1528 li
572.344 66.1529 li
565.344 66.1529 li
565.344 73.1528 li
clp
565.844 72.6528 mo
571.844 66.6528 li
565.844 66.6528 mo
571.844 72.6528 li
f
1 lw
0 lc
565.844 72.6528 mo
571.844 66.6528 li
565.844 66.6528 mo
571.844 72.6528 li
@
grestore
gsave
575.182 70.7809 mo
582.182 70.7809 li
582.182 63.7806 li
575.182 63.7806 li
575.182 70.7809 li
clp
575.682 70.2808 mo
581.682 64.2808 li
575.682 64.2808 mo
581.682 70.2808 li
f
1 lw
0 lc
575.682 70.2808 mo
581.682 64.2808 li
575.682 64.2808 mo
581.682 70.2808 li
@
grestore
gsave
585.02 68.7553 mo
592.02 68.7553 li
592.02 61.7554 li
585.02 61.7554 li
585.02 68.7553 li
clp
585.52 68.2554 mo
591.52 62.2554 li
585.52 62.2554 mo
591.52 68.2554 li
f
1 lw
0 lc
585.52 68.2554 mo
591.52 62.2554 li
585.52 62.2554 mo
591.52 68.2554 li
@
grestore
gsave
594.858 65.5622 mo
601.858 65.5622 li
601.858 58.5622 li
594.858 58.5622 li
594.858 65.5622 li
clp
595.358 65.0622 mo
601.358 59.0622 li
595.358 59.0622 mo
601.358 65.0622 li
f
1 lw
0 lc
595.358 65.0622 mo
601.358 59.0622 li
595.358 59.0622 mo
601.358 65.0622 li
@
grestore
gsave
604.696 62.9895 mo
611.696 62.9895 li
611.696 55.9895 li
604.696 55.9895 li
604.696 62.9895 li
clp
605.196 62.4894 mo
611.196 56.4894 li
605.196 56.4894 mo
611.196 62.4894 li
f
1 lw
0 lc
605.196 62.4894 mo
611.196 56.4894 li
605.196 56.4894 mo
611.196 62.4894 li
@
grestore
gsave
614.534 60.0334 mo
621.534 60.0334 li
621.534 53.0334 li
614.534 53.0334 li
614.534 60.0334 li
clp
615.034 59.5335 mo
621.034 53.5335 li
615.034 53.5335 mo
621.034 59.5335 li
f
1 lw
0 lc
615.034 59.5335 mo
621.034 53.5335 li
615.034 53.5335 mo
621.034 59.5335 li
@
grestore
gsave
624.372 58.2272 mo
631.372 58.2272 li
631.372 51.2273 li
624.372 51.2273 li
624.372 58.2272 li
clp
624.872 57.7271 mo
630.872 51.7271 li
624.872 51.7271 mo
630.872 57.7271 li
f
1 lw
0 lc
624.872 57.7271 mo
630.872 51.7271 li
624.872 51.7271 mo
630.872 57.7271 li
@
grestore
gsave
634.21 56.6761 mo
641.21 56.6761 li
641.21 49.6762 li
634.21 49.6762 li
634.21 56.6761 li
clp
634.71 56.1761 mo
640.71 50.1761 li
634.71 50.1761 mo
640.71 56.1761 li
f
1 lw
0 lc
634.71 56.1761 mo
640.71 50.1761 li
634.71 50.1761 mo
640.71 56.1761 li
@
grestore
gsave
644.048 55.6725 mo
651.048 55.6725 li
651.048 48.6726 li
644.048 48.6726 li
644.048 55.6725 li
clp
644.548 55.1726 mo
650.548 49.1726 li
644.548 49.1726 mo
650.548 55.1726 li
f
1 lw
0 lc
644.548 55.1726 mo
650.548 49.1726 li
644.548 49.1726 mo
650.548 55.1726 li
@
grestore
gsave
653.886 55.2164 mo
660.886 55.2164 li
660.886 48.2165 li
653.886 48.2165 li
653.886 55.2164 li
clp
654.386 54.7164 mo
660.386 48.7164 li
654.386 48.7164 mo
660.386 54.7164 li
f
1 lw
0 lc
654.386 54.7164 mo
660.386 48.7164 li
654.386 48.7164 mo
660.386 54.7164 li
@
grestore
gsave
663.724 54.7236 mo
670.724 54.7236 li
670.724 47.7237 li
663.724 47.7237 li
663.724 54.7236 li
clp
664.224 54.2238 mo
670.224 48.2238 li
664.224 48.2238 mo
670.224 54.2238 li
f
1 lw
0 lc
664.224 54.2238 mo
670.224 48.2238 li
664.224 48.2238 mo
670.224 54.2238 li
@
grestore
gsave
673.562 54.1765 mo
680.562 54.1765 li
680.562 47.1762 li
673.562 47.1762 li
673.562 54.1765 li
clp
674.062 53.6763 mo
680.062 47.6763 li
674.062 47.6763 mo
680.062 53.6763 li
f
1 lw
0 lc
674.062 53.6763 mo
680.062 47.6763 li
674.062 47.6763 mo
680.062 53.6763 li
@
grestore
gsave
683.4 54.0121 mo
690.4 54.0121 li
690.4 47.0121 li
683.4 47.0121 li
683.4 54.0121 li
clp
683.9 53.5121 mo
689.9 47.5121 li
683.9 47.5121 mo
689.9 53.5121 li
f
1 lw
0 lc
683.9 53.5121 mo
689.9 47.5121 li
683.9 47.5121 mo
689.9 53.5121 li
@
grestore
gsave
693.238 53.9758 mo
700.238 53.9758 li
700.238 46.9755 li
693.238 46.9755 li
693.238 53.9758 li
clp
693.738 53.4756 mo
699.738 47.4756 li
693.738 47.4756 mo
699.738 53.4756 li
f
1 lw
0 lc
693.738 53.4756 mo
699.738 47.4756 li
693.738 47.4756 mo
699.738 53.4756 li
@
grestore
gsave
703.076 53.5193 mo
710.076 53.5193 li
710.076 46.5193 li
703.076 46.5193 li
703.076 53.5193 li
clp
703.576 53.0194 mo
709.576 47.0194 li
703.576 47.0194 mo
709.576 53.0194 li
f
1 lw
0 lc
703.576 53.0194 mo
709.576 47.0194 li
703.576 47.0194 mo
709.576 53.0194 li
@
grestore
gsave
712.914 53.3369 mo
719.914 53.3369 li
719.914 46.337 li
712.914 46.337 li
712.914 53.3369 li
clp
713.414 52.8369 mo
719.414 46.8369 li
713.414 46.8369 mo
719.414 52.8369 li
f
1 lw
0 lc
713.414 52.8369 mo
719.414 46.8369 li
713.414 46.8369 mo
719.414 52.8369 li
@
grestore
gsave
722.752 53.1178 mo
729.752 53.1178 li
729.752 46.1179 li
722.752 46.1179 li
722.752 53.1178 li
clp
723.252 52.618 mo
729.252 46.618 li
723.252 46.618 mo
729.252 52.618 li
f
1 lw
0 lc
723.252 52.618 mo
729.252 46.618 li
723.252 46.618 mo
729.252 52.618 li
@
grestore
gsave
732.59 52.6617 mo
739.59 52.6617 li
739.59 45.6618 li
732.59 45.6618 li
732.59 52.6617 li
clp
733.09 52.1618 mo
739.09 46.1618 li
733.09 46.1618 mo
739.09 52.1618 li
f
1 lw
0 lc
733.09 52.1618 mo
739.09 46.1618 li
733.09 46.1618 mo
739.09 52.1618 li
@
grestore
gsave
742.428 52.6434 mo
749.428 52.6434 li
749.428 45.6434 li
742.428 45.6434 li
742.428 52.6434 li
clp
742.928 52.1436 mo
748.928 46.1436 li
742.928 46.1436 mo
748.928 52.1436 li
f
1 lw
0 lc
742.928 52.1436 mo
748.928 46.1436 li
742.928 46.1436 mo
748.928 52.1436 li
@
grestore
gsave
752.266 51.1473 mo
759.266 51.1473 li
759.266 44.1474 li
752.266 44.1474 li
752.266 51.1473 li
clp
752.766 50.6473 mo
758.766 44.6473 li
752.766 44.6473 mo
758.766 50.6473 li
f
1 lw
0 lc
752.766 50.6473 mo
758.766 44.6473 li
752.766 44.6473 mo
758.766 50.6473 li
@
grestore
gsave
762.104 51.275 mo
769.104 51.275 li
769.104 44.2751 li
762.104 44.2751 li
762.104 51.275 li
clp
762.604 50.7751 mo
768.604 44.7751 li
762.604 44.7751 mo
768.604 50.7751 li
f
1 lw
0 lc
762.604 50.7751 mo
768.604 44.7751 li
762.604 44.7751 mo
768.604 50.7751 li
@
grestore
gsave
771.942 48.9761 mo
778.942 48.9761 li
778.942 41.9761 li
771.942 41.9761 li
771.942 48.9761 li
clp
772.442 48.476 mo
778.442 42.476 li
772.442 42.476 mo
778.442 48.476 li
f
1 lw
0 lc
772.442 48.476 mo
778.442 42.476 li
772.442 42.476 mo
778.442 48.476 li
@
grestore
gsave
781.78 49.1768 mo
788.78 49.1768 li
788.78 42.1769 li
781.78 42.1769 li
781.78 49.1768 li
clp
782.28 48.6767 mo
788.28 42.6767 li
782.28 42.6767 mo
788.28 48.6767 li
f
1 lw
0 lc
782.28 48.6767 mo
788.28 42.6767 li
782.28 42.6767 mo
788.28 48.6767 li
@
grestore
gsave
791.618 49.1585 mo
798.618 49.1585 li
798.618 42.1585 li
791.618 42.1585 li
791.618 49.1585 li
clp
792.118 48.6584 mo
798.118 42.6584 li
792.118 42.6584 mo
798.118 48.6584 li
f
1 lw
0 lc
792.118 48.6584 mo
798.118 42.6584 li
792.118 42.6584 mo
798.118 48.6584 li
@
grestore
gsave
801.456 49.1585 mo
808.456 49.1585 li
808.456 42.1585 li
801.456 42.1585 li
801.456 49.1585 li
clp
801.956 48.6584 mo
807.956 42.6584 li
801.956 42.6584 mo
807.956 48.6584 li
f
1 lw
0 lc
801.956 48.6584 mo
807.956 42.6584 li
801.956 42.6584 mo
807.956 48.6584 li
@
grestore
gsave
811.294 49.1038 mo
818.294 49.1038 li
818.294 42.1038 li
811.294 42.1038 li
811.294 49.1038 li
clp
811.794 48.6037 mo
817.794 42.6037 li
811.794 42.6037 mo
817.794 48.6037 li
f
1 lw
0 lc
811.794 48.6037 mo
817.794 42.6037 li
811.794 42.6037 mo
817.794 48.6037 li
@
grestore
gsave
821.132 48.9941 mo
828.132 48.9941 li
828.132 41.9941 li
821.132 41.9941 li
821.132 48.9941 li
clp
821.632 48.4942 mo
827.632 42.4942 li
821.632 42.4942 mo
827.632 48.4942 li
f
1 lw
0 lc
821.632 48.4942 mo
827.632 42.4942 li
821.632 42.4942 mo
827.632 48.4942 li
@
grestore
gsave
830.97 49.0308 mo
837.97 49.0308 li
837.97 42.0308 li
830.97 42.0308 li
830.97 49.0308 li
clp
831.47 48.5307 mo
837.47 42.5307 li
831.47 42.5307 mo
837.47 48.5307 li
f
1 lw
0 lc
831.47 48.5307 mo
837.47 42.5307 li
831.47 42.5307 mo
837.47 48.5307 li
@
grestore
gsave
840.808 49.0308 mo
847.808 49.0308 li
847.808 42.0308 li
840.808 42.0308 li
840.808 49.0308 li
clp
841.308 48.5307 mo
847.308 42.5307 li
841.308 42.5307 mo
847.308 48.5307 li
f
1 lw
0 lc
841.308 48.5307 mo
847.308 42.5307 li
841.308 42.5307 mo
847.308 48.5307 li
@
grestore
gsave
850.646 48.8847 mo
857.646 48.8847 li
857.646 41.8848 li
850.646 41.8848 li
850.646 48.8847 li
clp
851.146 48.3847 mo
857.146 42.3847 li
851.146 42.3847 mo
857.146 48.3847 li
f
1 lw
0 lc
851.146 48.3847 mo
857.146 42.3847 li
851.146 42.3847 mo
857.146 48.3847 li
@
grestore
gsave
860.484 48.848 mo
867.484 48.848 li
867.484 41.8481 li
860.484 41.8481 li
860.484 48.848 li
clp
860.984 48.3482 mo
866.984 42.3482 li
860.984 42.3482 mo
866.984 48.3482 li
f
1 lw
0 lc
860.984 48.3482 mo
866.984 42.3482 li
860.984 42.3482 mo
866.984 48.3482 li
@
grestore
gsave
870.322 48.7387 mo
877.322 48.7387 li
877.322 41.7387 li
870.322 41.7387 li
870.322 48.7387 li
clp
870.822 48.2387 mo
876.822 42.2387 li
870.822 42.2387 mo
876.822 48.2387 li
f
1 lw
0 lc
870.822 48.2387 mo
876.822 42.2387 li
870.822 42.2387 mo
876.822 48.2387 li
@
grestore
gsave
880.16 48.684 mo
887.16 48.684 li
887.16 41.6841 li
880.16 41.6841 li
880.16 48.684 li
clp
880.66 48.184 mo
886.66 42.184 li
880.66 42.184 mo
886.66 48.184 li
f
1 lw
0 lc
880.66 48.184 mo
886.66 42.184 li
880.66 42.184 mo
886.66 48.184 li
@
grestore
gsave
889.998 48.6657 mo
896.998 48.6657 li
896.998 41.6657 li
889.998 41.6657 li
889.998 48.6657 li
clp
890.498 48.1657 mo
896.498 42.1657 li
890.498 42.1657 mo
896.498 48.1657 li
f
1 lw
0 lc
890.498 48.1657 mo
896.498 42.1657 li
890.498 42.1657 mo
896.498 48.1657 li
@
grestore
gsave
899.836 48.538 mo
906.836 48.538 li
906.836 41.538 li
899.836 41.538 li
899.836 48.538 li
clp
900.336 48.038 mo
906.336 42.038 li
900.336 42.038 mo
906.336 48.038 li
f
1 lw
0 lc
900.336 48.038 mo
906.336 42.038 li
900.336 42.038 mo
906.336 48.038 li
@
grestore
gsave
909.674 48.4833 mo
916.674 48.4833 li
916.674 41.4833 li
909.674 41.4833 li
909.674 48.4833 li
clp
910.174 47.9832 mo
916.174 41.9832 li
910.174 41.9832 mo
916.174 47.9832 li
f
1 lw
0 lc
910.174 47.9832 mo
916.174 41.9832 li
910.174 41.9832 mo
916.174 47.9832 li
@
grestore
gsave
919.512 48.4833 mo
926.512 48.4833 li
926.512 41.4833 li
919.512 41.4833 li
919.512 48.4833 li
clp
920.012 47.9832 mo
926.012 41.9832 li
920.012 41.9832 mo
926.012 47.9832 li
f
1 lw
0 lc
920.012 47.9832 mo
926.012 41.9832 li
920.012 41.9832 mo
926.012 47.9832 li
@
grestore
gsave
929.35 48.3919 mo
936.35 48.3919 li
936.35 41.392 li
929.35 41.392 li
929.35 48.3919 li
clp
929.85 47.892 mo
935.85 41.892 li
929.85 41.892 mo
935.85 47.892 li
f
1 lw
0 lc
929.85 47.892 mo
935.85 41.892 li
929.85 41.892 mo
935.85 47.892 li
@
grestore
gsave
939.188 48.4103 mo
946.188 48.4103 li
946.188 41.4103 li
939.188 41.4103 li
939.188 48.4103 li
clp
939.688 47.9102 mo
945.688 41.9102 li
939.688 41.9102 mo
945.688 47.9102 li
f
1 lw
0 lc
939.688 47.9102 mo
945.688 41.9102 li
939.688 41.9102 mo
945.688 47.9102 li
@
grestore
gsave
949.026 48.3736 mo
956.026 48.3736 li
956.026 41.3736 li
949.026 41.3736 li
949.026 48.3736 li
clp
949.526 47.8737 mo
955.526 41.8737 li
949.526 41.8737 mo
955.526 47.8737 li
f
1 lw
0 lc
949.526 47.8737 mo
955.526 41.8737 li
949.526 41.8737 mo
955.526 47.8737 li
@
grestore
gsave
958.864 48.3736 mo
965.864 48.3736 li
965.864 41.3736 li
958.864 41.3736 li
958.864 48.3736 li
clp
959.364 47.8737 mo
965.364 41.8737 li
959.364 41.8737 mo
965.364 47.8737 li
f
1 lw
0 lc
959.364 47.8737 mo
965.364 41.8737 li
959.364 41.8737 mo
965.364 47.8737 li
@
grestore
gsave
968.702 48.3372 mo
975.702 48.3372 li
975.702 41.3373 li
968.702 41.3373 li
968.702 48.3372 li
clp
969.202 47.8372 mo
975.202 41.8372 li
969.202 41.8372 mo
975.202 47.8372 li
f
1 lw
0 lc
969.202 47.8372 mo
975.202 41.8372 li
969.202 41.8372 mo
975.202 47.8372 li
@
grestore
gsave
978.54 48.3919 mo
985.54 48.3919 li
985.54 41.392 li
978.54 41.392 li
978.54 48.3919 li
clp
979.04 47.892 mo
985.04 41.892 li
979.04 41.892 mo
985.04 47.892 li
f
1 lw
0 lc
979.04 47.892 mo
985.04 41.892 li
979.04 41.892 mo
985.04 47.892 li
@
grestore
gsave
988.378 48.3556 mo
995.378 48.3556 li
995.378 41.3556 li
988.378 41.3556 li
988.378 48.3556 li
clp
988.878 47.8555 mo
994.878 41.8555 li
988.878 41.8555 mo
994.878 47.8555 li
f
1 lw
0 lc
988.878 47.8555 mo
994.878 41.8555 li
988.878 41.8555 mo
994.878 47.8555 li
@
grestore
gsave
998.216 48.3189 mo
1005.22 48.3189 li
1005.22 41.319 li
998.216 41.319 li
998.216 48.3189 li
clp
998.716 47.819 mo
1004.72 41.819 li
998.716 41.819 mo
1004.72 47.819 li
f
1 lw
0 lc
998.716 47.819 mo
1004.72 41.819 li
998.716 41.819 mo
1004.72 47.819 li
@
grestore
gsave
1008.05 48.2826 mo
1015.05 48.2826 li
1015.05 41.2826 li
1008.05 41.2826 li
1008.05 48.2826 li
clp
1008.55 47.7825 mo
1014.55 41.7825 li
1008.55 41.7825 mo
1014.55 47.7825 li
f
1 lw
0 lc
1008.55 47.7825 mo
1014.55 41.7825 li
1008.55 41.7825 mo
1014.55 47.7825 li
@
grestore
gsave
1017.89 48.2279 mo
1024.89 48.2279 li
1024.89 41.2276 li
1017.89 41.2276 li
1017.89 48.2279 li
clp
1018.39 47.7277 mo
1024.39 41.7277 li
1018.39 41.7277 mo
1024.39 47.7277 li
f
1 lw
0 lc
1018.39 47.7277 mo
1024.39 41.7277 li
1018.39 41.7277 mo
1024.39 47.7277 li
@
grestore
gsave
1027.73 48.1912 mo
1034.73 48.1912 li
1034.73 41.1913 li
1027.73 41.1913 li
1027.73 48.1912 li
clp
1028.23 47.6912 mo
1034.23 41.6912 li
1028.23 41.6912 mo
1034.23 47.6912 li
f
1 lw
0 lc
1028.23 47.6912 mo
1034.23 41.6912 li
1028.23 41.6912 mo
1034.23 47.6912 li
@
grestore
gsave
1037.57 48.1365 mo
1044.57 48.1365 li
1044.57 41.1366 li
1037.57 41.1366 li
1037.57 48.1365 li
clp
1038.07 47.6365 mo
1044.07 41.6365 li
1038.07 41.6365 mo
1044.07 47.6365 li
f
1 lw
0 lc
1038.07 47.6365 mo
1044.07 41.6365 li
1038.07 41.6365 mo
1044.07 47.6365 li
@
grestore
gsave
1047.41 48.1182 mo
1054.41 48.1182 li
1054.41 41.1182 li
1047.41 41.1182 li
1047.41 48.1182 li
clp
1047.91 47.6182 mo
1053.91 41.6182 li
1047.91 41.6182 mo
1053.91 47.6182 li
f
1 lw
0 lc
1047.91 47.6182 mo
1053.91 41.6182 li
1047.91 41.6182 mo
1053.91 47.6182 li
@
grestore
gsave
1057.24 48.0998 mo
1064.24 48.0998 li
1064.24 41.0999 li
1057.24 41.0999 li
1057.24 48.0998 li
clp
1057.74 47.6 mo
1063.74 41.6 li
1057.74 41.6 mo
1063.74 47.6 li
f
1 lw
0 lc
1057.74 47.6 mo
1063.74 41.6 li
1057.74 41.6 mo
1063.74 47.6 li
@
grestore
gsave
1067.08 48.1182 mo
1074.08 48.1182 li
1074.08 41.1182 li
1067.08 41.1182 li
1067.08 48.1182 li
clp
1067.58 47.6182 mo
1073.58 41.6182 li
1067.58 41.6182 mo
1073.58 47.6182 li
f
1 lw
0 lc
1067.58 47.6182 mo
1073.58 41.6182 li
1067.58 41.6182 mo
1073.58 47.6182 li
@
grestore
gsave
1076.92 48.0635 mo
1083.92 48.0635 li
1083.92 41.0636 li
1076.92 41.0636 li
1076.92 48.0635 li
clp
1077.42 47.5635 mo
1083.42 41.5635 li
1077.42 41.5635 mo
1083.42 47.5635 li
f
1 lw
0 lc
1077.42 47.5635 mo
1083.42 41.5635 li
1077.42 41.5635 mo
1083.42 47.5635 li
@
grestore
gsave
1086.76 48.0998 mo
1093.76 48.0998 li
1093.76 41.0999 li
1086.76 41.0999 li
1086.76 48.0998 li
clp
1087.26 47.6 mo
1093.26 41.6 li
1087.26 41.6 mo
1093.26 47.6 li
f
1 lw
0 lc
1087.26 47.6 mo
1093.26 41.6 li
1087.26 41.6 mo
1093.26 47.6 li
@
grestore
116.295 458.634 mo
126.133 340.955 li
135.971 290.643 li
145.809 260.658 li
155.647 237.376 li
165.485 229.201 li
175.323 219.032 li
185.161 203.863 li
194.999 186.918 li
204.837 165.593 li
214.675 146.958 li
224.513 133.93 li
234.351 122.702 li
244.189 112.727 li
254.027 102.253 li
263.865 94.9061 li
273.703 89.5781 li
283.541 81.9754 li
293.379 76.915 li
303.217 73.4603 li
313.055 72.3412 li
322.893 69.8353 li
332.731 66.8429 li
342.569 63.6072 li
352.407 60.8458 li
362.245 58.9847 li
372.083 57.1357 li
381.922 55.4205 li
391.76 54.4717 li
401.598 52.793 li
411.436 51.7104 li
421.274 50.567 li
431.112 49.4113 li
440.95 48.791 li
450.788 48.0732 li
460.626 47.1366 li
470.464 46.3824 li
480.302 46.1756 li
490.14 46.2607 li
499.978 46.3702 li
509.816 45.4092 li
519.654 44.9105 li
529.492 45.239 li
539.33 44.059 li
549.168 43.2805 li
559.006 42.7574 li
568.844 42.6966 li
578.682 42.3317 li
588.52 41.2612 li
598.358 40.507 li
608.196 39.765 li
618.034 39.8501 li
627.872 38.95 li
637.71 38.6702 li
647.548 38.439 li
657.386 38.1471 li
667.224 37.9647 li
677.062 37.8552 li
686.9 37.5145 li
696.738 37.5389 li
706.576 37.6727 li
716.414 37.77 li
726.252 37.2347 li
736.09 37.4902 li
745.928 37.4902 li
755.766 37.4902 li
765.604 36.6387 li
775.442 34.2667 li
785.28 34.2423 li
795.118 34.1572 li
804.956 34.0964 li
814.794 34.0842 li
824.632 34.0355 li
834.47 34.0355 li
844.308 33.9869 li
854.146 33.926 li
863.984 33.9017 li
873.822 33.8774 li
883.66 33.8166 li
893.498 33.8044 li
903.336 33.7801 li
913.174 33.7557 li
923.012 33.7557 li
932.85 33.7071 li
942.688 33.6463 li
952.526 33.6219 li
962.365 33.6219 li
972.203 33.6341 li
982.041 33.5733 li
991.879 33.5854 li
1001.72 33.5733 li
1011.55 33.5611 li
1021.39 33.5368 li
1031.23 33.5003 li
1041.07 33.476 li
1050.91 33.4638 li
1060.74 33.4395 li
1070.58 33.4152 li
1080.42 33.4273 li
1090.26 33.3908 li
1 /0 /CSD get_res sepcs
1 sep
@
116.295 465.713 mo
126.133 357.821 li
135.971 303.574 li
145.809 271.497 li
155.647 246.645 li
165.485 238.999 li
175.323 228.471 li
185.161 212.834 li
194.999 194.934 li
204.837 173.75 li
214.675 153.022 li
224.513 140.45 li
234.351 128.37 li
244.189 118.408 li
254.027 108.646 li
263.865 100.727 li
273.703 95.0704 li
283.541 86.9689 li
293.379 80.4001 li
303.217 77.3894 li
313.055 76.4224 li
322.893 74.2875 li
332.731 71.6235 li
342.569 68.3939 li
352.407 65.8029 li
362.245 63.9965 li
372.083 62.2995 li
381.922 60.858 li
391.76 59.8727 li
401.598 57.8839 li
411.436 56.6978 li
421.274 55.1833 li
431.112 54.0703 li
440.95 52.9208 li
450.788 52.3916 li
460.626 51.4792 li
470.464 50.6217 li
480.302 50.5852 li
490.14 51.3516 li
499.978 51.2786 li
509.816 50.7311 li
519.654 50.056 li
529.492 50.5305 li
539.33 48.6876 li
549.168 48.0854 li
559.006 47.7022 li
568.844 47.7387 li
578.682 47.2096 li
588.52 46.5162 li
598.358 46.133 li
608.196 45.4579 li
618.034 45.239 li
627.872 44.5273 li
637.71 44.5273 li
647.548 44.1077 li
657.386 43.9252 li
667.224 43.7792 li
677.062 43.3778 li
686.9 43.1406 li
696.738 42.9399 li
706.576 43.1406 li
716.414 42.9764 li
726.252 42.6297 li
736.09 43.0129 li
745.928 42.9946 li
755.766 43.0493 li
765.604 42.4472 li
775.442 40.6591 li
785.28 40.6591 li
795.118 40.6043 li
804.956 40.5313 li
814.794 40.5131 li
824.632 40.4948 li
834.47 40.5131 li
844.308 40.5313 li
854.146 40.4036 li
863.984 40.4036 li
873.822 40.4036 li
883.66 40.3306 li
893.498 40.3124 li
903.336 40.2394 li
913.174 40.2576 li
923.012 40.3124 li
932.85 40.3124 li
942.688 40.2941 li
952.526 40.2394 li
962.365 40.1846 li
972.203 40.1846 li
982.041 40.1299 li
991.879 40.1116 li
1001.72 40.0204 li
1011.55 40.0386 li
1021.39 40.0386 li
1031.23 40.0569 li
1041.07 40.0386 li
1050.91 40.0204 li
1060.74 40.0022 li
1070.58 39.9657 li
1080.42 39.9474 li
1090.26 39.9657 li
@
gsave
112.795 469.213 mo
119.795 469.213 li
119.795 462.213 li
112.795 462.213 li
112.795 469.213 li
clp
113.295 468.713 mo
119.295 462.713 li
113.295 462.713 mo
119.295 468.713 li
f
1 lw
0 lc
113.295 468.713 mo
119.295 462.713 li
113.295 462.713 mo
119.295 468.713 li
@
grestore
gsave
122.633 361.321 mo
129.633 361.321 li
129.633 354.321 li
122.633 354.321 li
122.633 361.321 li
clp
123.133 360.821 mo
129.133 354.821 li
123.133 354.821 mo
129.133 360.821 li
f
1 lw
0 lc
123.133 360.821 mo
129.133 354.821 li
123.133 354.821 mo
129.133 360.821 li
@
grestore
gsave
132.471 307.074 mo
139.471 307.074 li
139.471 300.074 li
132.471 300.074 li
132.471 307.074 li
clp
132.971 306.574 mo
138.971 300.574 li
132.971 300.574 mo
138.971 306.574 li
f
1 lw
0 lc
132.971 306.574 mo
138.971 300.574 li
132.971 300.574 mo
138.971 306.574 li
@
grestore
gsave
142.309 274.997 mo
149.309 274.997 li
149.309 267.996 li
142.309 267.996 li
142.309 274.997 li
clp
142.809 274.497 mo
148.809 268.497 li
142.809 268.497 mo
148.809 274.497 li
f
1 lw
0 lc
142.809 274.497 mo
148.809 268.497 li
142.809 268.497 mo
148.809 274.497 li
@
grestore
gsave
152.147 250.145 mo
159.147 250.145 li
159.147 243.145 li
152.147 243.145 li
152.147 250.145 li
clp
152.647 249.645 mo
158.647 243.645 li
152.647 243.645 mo
158.647 249.645 li
f
1 lw
0 lc
152.647 249.645 mo
158.647 243.645 li
152.647 243.645 mo
158.647 249.645 li
@
grestore
gsave
161.985 242.499 mo
168.985 242.499 li
168.985 235.5 li
161.985 235.5 li
161.985 242.499 li
clp
162.485 241.999 mo
168.485 235.999 li
162.485 235.999 mo
168.485 241.999 li
f
1 lw
0 lc
162.485 241.999 mo
168.485 235.999 li
162.485 235.999 mo
168.485 241.999 li
@
grestore
gsave
171.823 231.971 mo
178.823 231.971 li
178.823 224.971 li
171.823 224.971 li
171.823 231.971 li
clp
172.323 231.471 mo
178.323 225.471 li
172.323 225.471 mo
178.323 231.471 li
f
1 lw
0 lc
172.323 231.471 mo
178.323 225.471 li
172.323 225.471 mo
178.323 231.471 li
@
grestore
gsave
181.661 216.334 mo
188.661 216.334 li
188.661 209.334 li
181.661 209.334 li
181.661 216.334 li
clp
182.161 215.834 mo
188.161 209.834 li
182.161 209.834 mo
188.161 215.834 li
f
1 lw
0 lc
182.161 215.834 mo
188.161 209.834 li
182.161 209.834 mo
188.161 215.834 li
@
grestore
gsave
191.499 198.434 mo
198.499 198.434 li
198.499 191.434 li
191.499 191.434 li
191.499 198.434 li
clp
191.999 197.934 mo
197.999 191.934 li
191.999 191.934 mo
197.999 197.934 li
f
1 lw
0 lc
191.999 197.934 mo
197.999 191.934 li
191.999 191.934 mo
197.999 197.934 li
@
grestore
gsave
201.337 177.249 mo
208.337 177.249 li
208.337 170.25 li
201.337 170.25 li
201.337 177.249 li
clp
201.837 176.75 mo
207.837 170.75 li
201.837 170.75 mo
207.837 176.75 li
f
1 lw
0 lc
201.837 176.75 mo
207.837 170.75 li
201.837 170.75 mo
207.837 176.75 li
@
grestore
gsave
211.175 156.522 mo
218.175 156.522 li
218.175 149.521 li
211.175 149.521 li
211.175 156.522 li
clp
211.675 156.022 mo
217.675 150.022 li
211.675 150.022 mo
217.675 156.022 li
f
1 lw
0 lc
211.675 156.022 mo
217.675 150.022 li
211.675 150.022 mo
217.675 156.022 li
@
grestore
gsave
221.013 143.95 mo
228.013 143.95 li
228.013 136.95 li
221.013 136.95 li
221.013 143.95 li
clp
221.513 143.45 mo
227.513 137.45 li
221.513 137.45 mo
227.513 143.45 li
f
1 lw
0 lc
221.513 143.45 mo
227.513 137.45 li
221.513 137.45 mo
227.513 143.45 li
@
grestore
gsave
230.851 131.87 mo
237.851 131.87 li
237.851 124.87 li
230.851 124.87 li
230.851 131.87 li
clp
231.351 131.37 mo
237.351 125.37 li
231.351 125.37 mo
237.351 131.37 li
f
1 lw
0 lc
231.351 131.37 mo
237.351 125.37 li
231.351 125.37 mo
237.351 131.37 li
@
grestore
gsave
240.689 121.908 mo
247.689 121.908 li
247.689 114.908 li
240.689 114.908 li
240.689 121.908 li
clp
241.189 121.408 mo
247.189 115.408 li
241.189 115.408 mo
247.189 121.408 li
f
1 lw
0 lc
241.189 121.408 mo
247.189 115.408 li
241.189 115.408 mo
247.189 121.408 li
@
grestore
gsave
250.527 112.146 mo
257.527 112.146 li
257.527 105.146 li
250.527 105.146 li
250.527 112.146 li
clp
251.027 111.646 mo
257.027 105.646 li
251.027 105.646 mo
257.027 111.646 li
f
1 lw
0 lc
251.027 111.646 mo
257.027 105.646 li
251.027 105.646 mo
257.027 111.646 li
@
grestore
gsave
260.365 104.227 mo
267.365 104.227 li
267.365 97.2268 li
260.365 97.2268 li
260.365 104.227 li
clp
260.865 103.727 mo
266.865 97.7268 li
260.865 97.7268 mo
266.865 103.727 li
f
1 lw
0 lc
260.865 103.727 mo
266.865 97.7268 li
260.865 97.7268 mo
266.865 103.727 li
@
grestore
gsave
270.203 98.5703 mo
277.203 98.5703 li
277.203 91.5703 li
270.203 91.5703 li
270.203 98.5703 li
clp
270.703 98.0704 mo
276.703 92.0704 li
270.703 92.0704 mo
276.703 98.0704 li
f
1 lw
0 lc
270.703 98.0704 mo
276.703 92.0704 li
270.703 92.0704 mo
276.703 98.0704 li
@
grestore
gsave
280.041 90.4688 mo
287.041 90.4688 li
287.041 83.4688 li
280.041 83.4688 li
280.041 90.4688 li
clp
280.541 89.9689 mo
286.541 83.9689 li
280.541 83.9689 mo
286.541 89.9689 li
f
1 lw
0 lc
280.541 89.9689 mo
286.541 83.9689 li
280.541 83.9689 mo
286.541 89.9689 li
@
grestore
gsave
289.879 83.9 mo
296.879 83.9 li
296.879 76.9001 li
289.879 76.9001 li
289.879 83.9 li
clp
290.379 83.4001 mo
296.379 77.4001 li
290.379 77.4001 mo
296.379 83.4001 li
f
1 lw
0 lc
290.379 83.4001 mo
296.379 77.4001 li
290.379 77.4001 mo
296.379 83.4001 li
@
grestore
gsave
299.717 80.8896 mo
306.717 80.8896 li
306.717 73.8893 li
299.717 73.8893 li
299.717 80.8896 li
clp
300.217 80.3894 mo
306.217 74.3894 li
300.217 74.3894 mo
306.217 80.3894 li
f
1 lw
0 lc
300.217 80.3894 mo
306.217 74.3894 li
300.217 74.3894 mo
306.217 80.3894 li
@
grestore
gsave
309.555 79.9223 mo
316.555 79.9223 li
316.555 72.9224 li
309.555 72.9224 li
309.555 79.9223 li
clp
310.055 79.4224 mo
316.055 73.4224 li
310.055 73.4224 mo
316.055 79.4224 li
f
1 lw
0 lc
310.055 79.4224 mo
316.055 73.4224 li
310.055 73.4224 mo
316.055 79.4224 li
@
grestore
gsave
319.393 77.7874 mo
326.393 77.7874 li
326.393 70.7875 li
319.393 70.7875 li
319.393 77.7874 li
clp
319.893 77.2875 mo
325.893 71.2875 li
319.893 71.2875 mo
325.893 77.2875 li
f
1 lw
0 lc
319.893 77.2875 mo
325.893 71.2875 li
319.893 71.2875 mo
325.893 77.2875 li
@
grestore
gsave
329.231 75.1234 mo
336.231 75.1234 li
336.231 68.1234 li
329.231 68.1234 li
329.231 75.1234 li
clp
329.731 74.6235 mo
335.731 68.6235 li
329.731 68.6235 mo
335.731 74.6235 li
f
1 lw
0 lc
329.731 74.6235 mo
335.731 68.6235 li
329.731 68.6235 mo
335.731 74.6235 li
@
grestore
gsave
339.069 71.8938 mo
346.069 71.8938 li
346.069 64.8939 li
339.069 64.8939 li
339.069 71.8938 li
clp
339.569 71.3939 mo
345.569 65.3939 li
339.569 65.3939 mo
345.569 71.3939 li
f
1 lw
0 lc
339.569 71.3939 mo
345.569 65.3939 li
339.569 65.3939 mo
345.569 71.3939 li
@
grestore
gsave
348.907 69.3028 mo
355.907 69.3028 li
355.907 62.3029 li
348.907 62.3029 li
348.907 69.3028 li
clp
349.407 68.8029 mo
355.407 62.8029 li
349.407 62.8029 mo
355.407 68.8029 li
f
1 lw
0 lc
349.407 68.8029 mo
355.407 62.8029 li
349.407 62.8029 mo
355.407 68.8029 li
@
grestore
gsave
358.745 67.4963 mo
365.745 67.4963 li
365.745 60.4964 li
358.745 60.4964 li
358.745 67.4963 li
clp
359.245 66.9965 mo
365.245 60.9965 li
359.245 60.9965 mo
365.245 66.9965 li
f
1 lw
0 lc
359.245 66.9965 mo
365.245 60.9965 li
359.245 60.9965 mo
365.245 66.9965 li
@
grestore
gsave
368.584 65.7996 mo
375.583 65.7996 li
375.583 58.7996 li
368.584 58.7996 li
368.584 65.7996 li
clp
369.083 65.2995 mo
375.083 59.2995 li
369.083 59.2995 mo
375.083 65.2995 li
f
1 lw
0 lc
369.083 65.2995 mo
375.083 59.2995 li
369.083 59.2995 mo
375.083 65.2995 li
@
grestore
gsave
378.421 64.3582 mo
385.422 64.3582 li
385.422 57.3579 li
378.421 57.3579 li
378.421 64.3582 li
clp
378.921 63.858 mo
384.921 57.858 li
378.921 57.858 mo
384.921 63.858 li
f
1 lw
0 lc
378.921 63.858 mo
384.921 57.858 li
378.921 57.858 mo
384.921 63.858 li
@
grestore
gsave
388.259 63.3726 mo
395.259 63.3726 li
395.259 56.3726 li
388.259 56.3726 li
388.259 63.3726 li
clp
388.759 62.8727 mo
394.759 56.8727 li
388.759 56.8727 mo
394.759 62.8727 li
f
1 lw
0 lc
388.759 62.8727 mo
394.759 56.8727 li
388.759 56.8727 mo
394.759 62.8727 li
@
grestore
gsave
398.097 61.3837 mo
405.097 61.3837 li
405.097 54.3838 li
398.097 54.3838 li
398.097 61.3837 li
clp
398.597 60.8839 mo
404.597 54.8839 li
398.597 54.8839 mo
404.597 60.8839 li
f
1 lw
0 lc
398.597 60.8839 mo
404.597 54.8839 li
398.597 54.8839 mo
404.597 60.8839 li
@
grestore
gsave
407.935 60.1977 mo
414.935 60.1977 li
414.935 53.1978 li
407.935 53.1978 li
407.935 60.1977 li
clp
408.435 59.6978 mo
414.435 53.6978 li
408.435 53.6978 mo
414.435 59.6978 li
f
1 lw
0 lc
408.435 59.6978 mo
414.435 53.6978 li
408.435 53.6978 mo
414.435 59.6978 li
@
grestore
gsave
417.773 58.6833 mo
424.773 58.6833 li
424.773 51.6834 li
417.773 51.6834 li
417.773 58.6833 li
clp
418.273 58.1833 mo
424.273 52.1833 li
418.273 52.1833 mo
424.273 58.1833 li
f
1 lw
0 lc
418.273 58.1833 mo
424.273 52.1833 li
418.273 52.1833 mo
424.273 58.1833 li
@
grestore
gsave
427.612 57.5704 mo
434.612 57.5704 li
434.612 50.5704 li
427.612 50.5704 li
427.612 57.5704 li
clp
428.112 57.0703 mo
434.112 51.0703 li
428.112 51.0703 mo
434.112 57.0703 li
f
1 lw
0 lc
428.112 57.0703 mo
434.112 51.0703 li
428.112 51.0703 mo
434.112 57.0703 li
@
grestore
gsave
437.45 56.4207 mo
444.45 56.4207 li
444.45 49.4208 li
437.45 49.4208 li
437.45 56.4207 li
clp
437.95 55.9208 mo
443.95 49.9208 li
437.95 49.9208 mo
443.95 55.9208 li
f
1 lw
0 lc
437.95 55.9208 mo
443.95 49.9208 li
437.95 49.9208 mo
443.95 55.9208 li
@
grestore
gsave
447.288 55.8916 mo
454.288 55.8916 li
454.288 48.8916 li
447.288 48.8916 li
447.288 55.8916 li
clp
447.788 55.3916 mo
453.788 49.3916 li
447.788 49.3916 mo
453.788 55.3916 li
f
1 lw
0 lc
447.788 55.3916 mo
453.788 49.3916 li
447.788 49.3916 mo
453.788 55.3916 li
@
grestore
gsave
457.125 54.9794 mo
464.126 54.9794 li
464.126 47.9794 li
457.125 47.9794 li
457.125 54.9794 li
clp
457.626 54.4792 mo
463.626 48.4792 li
457.626 48.4792 mo
463.626 54.4792 li
f
1 lw
0 lc
457.626 54.4792 mo
463.626 48.4792 li
457.626 48.4792 mo
463.626 54.4792 li
@
grestore
gsave
466.963 54.1218 mo
473.963 54.1218 li
473.963 47.1215 li
466.963 47.1215 li
466.963 54.1218 li
clp
467.464 53.6216 mo
473.464 47.6216 li
467.464 47.6216 mo
473.464 53.6216 li
f
1 lw
0 lc
467.464 53.6216 mo
473.464 47.6216 li
467.464 47.6216 mo
473.464 53.6216 li
@
grestore
gsave
476.802 54.0851 mo
483.801 54.0851 li
483.801 47.0852 li
476.802 47.0852 li
476.802 54.0851 li
clp
477.302 53.5851 mo
483.302 47.5851 li
477.302 47.5851 mo
483.302 53.5851 li
f
1 lw
0 lc
477.302 53.5851 mo
483.302 47.5851 li
477.302 47.5851 mo
483.302 53.5851 li
@
grestore
gsave
486.64 54.8517 mo
493.64 54.8517 li
493.64 47.8514 li
486.64 47.8514 li
486.64 54.8517 li
clp
487.14 54.3515 mo
493.14 48.3515 li
487.14 48.3515 mo
493.14 54.3515 li
f
1 lw
0 lc
487.14 54.3515 mo
493.14 48.3515 li
487.14 48.3515 mo
493.14 54.3515 li
@
grestore
gsave
496.478 54.7786 mo
503.478 54.7786 li
503.478 47.7783 li
496.478 47.7783 li
496.478 54.7786 li
clp
496.978 54.2785 mo
502.978 48.2785 li
496.978 48.2785 mo
502.978 54.2785 li
f
1 lw
0 lc
496.978 54.2785 mo
502.978 48.2785 li
496.978 48.2785 mo
502.978 54.2785 li
@
grestore
gsave
506.316 54.2312 mo
513.316 54.2312 li
513.316 47.2312 li
506.316 47.2312 li
506.316 54.2312 li
clp
506.816 53.7311 mo
512.816 47.7311 li
506.816 47.7311 mo
512.816 53.7311 li
f
1 lw
0 lc
506.816 53.7311 mo
512.816 47.7311 li
506.816 47.7311 mo
512.816 53.7311 li
@
grestore
gsave
516.154 53.556 mo
523.154 53.556 li
523.154 46.556 li
516.154 46.556 li
516.154 53.556 li
clp
516.654 53.056 mo
522.654 47.056 li
516.654 47.056 mo
522.654 53.056 li
f
1 lw
0 lc
516.654 53.056 mo
522.654 47.056 li
516.654 47.056 mo
522.654 53.056 li
@
grestore
gsave
525.991 54.0304 mo
532.992 54.0304 li
532.992 47.0305 li
525.991 47.0305 li
525.991 54.0304 li
clp
526.492 53.5304 mo
532.492 47.5304 li
526.492 47.5304 mo
532.492 53.5304 li
f
1 lw
0 lc
526.492 53.5304 mo
532.492 47.5304 li
526.492 47.5304 mo
532.492 53.5304 li
@
grestore
gsave
535.83 52.1876 mo
542.829 52.1876 li
542.829 45.1877 li
535.83 45.1877 li
535.83 52.1876 li
clp
536.33 51.6875 mo
542.33 45.6875 li
536.33 45.6875 mo
542.33 51.6875 li
f
1 lw
0 lc
536.33 51.6875 mo
542.33 45.6875 li
536.33 45.6875 mo
542.33 51.6875 li
@
grestore
gsave
545.668 51.5855 mo
552.668 51.5855 li
552.668 44.5855 li
545.668 44.5855 li
545.668 51.5855 li
clp
546.168 51.0854 mo
552.168 45.0854 li
546.168 45.0854 mo
552.168 51.0854 li
f
1 lw
0 lc
546.168 51.0854 mo
552.168 45.0854 li
546.168 45.0854 mo
552.168 51.0854 li
@
grestore
gsave
555.506 51.2024 mo
562.506 51.2024 li
562.506 44.2021 li
555.506 44.2021 li
555.506 51.2024 li
clp
556.006 50.7022 mo
562.006 44.7022 li
556.006 44.7022 mo
562.006 50.7022 li
f
1 lw
0 lc
556.006 50.7022 mo
562.006 44.7022 li
556.006 44.7022 mo
562.006 50.7022 li
@
grestore
gsave
565.344 51.2387 mo
572.344 51.2387 li
572.344 44.2387 li
565.344 44.2387 li
565.344 51.2387 li
clp
565.844 50.7387 mo
571.844 44.7387 li
565.844 44.7387 mo
571.844 50.7387 li
f
1 lw
0 lc
565.844 50.7387 mo
571.844 44.7387 li
565.844 44.7387 mo
571.844 50.7387 li
@
grestore
gsave
575.182 50.7095 mo
582.182 50.7095 li
582.182 43.7096 li
575.182 43.7096 li
575.182 50.7095 li
clp
575.682 50.2095 mo
581.682 44.2095 li
575.682 44.2095 mo
581.682 50.2095 li
f
1 lw
0 lc
575.682 50.2095 mo
581.682 44.2095 li
575.682 44.2095 mo
581.682 50.2095 li
@
grestore
gsave
585.02 50.016 mo
592.02 50.016 li
592.02 43.0161 li
585.02 43.0161 li
585.02 50.016 li
clp
585.52 49.5162 mo
591.52 43.5162 li
585.52 43.5162 mo
591.52 49.5162 li
f
1 lw
0 lc
585.52 49.5162 mo
591.52 43.5162 li
585.52 43.5162 mo
591.52 49.5162 li
@
grestore
gsave
594.858 49.6329 mo
601.858 49.6329 li
601.858 42.633 li
594.858 42.633 li
594.858 49.6329 li
clp
595.358 49.133 mo
601.358 43.133 li
595.358 43.133 mo
601.358 49.133 li
f
1 lw
0 lc
595.358 49.133 mo
601.358 43.133 li
595.358 43.133 mo
601.358 49.133 li
@
grestore
gsave
604.696 48.9577 mo
611.696 48.9577 li
611.696 41.9578 li
604.696 41.9578 li
604.696 48.9577 li
clp
605.196 48.4579 mo
611.196 42.4579 li
605.196 42.4579 mo
611.196 48.4579 li
f
1 lw
0 lc
605.196 48.4579 mo
611.196 42.4579 li
605.196 42.4579 mo
611.196 48.4579 li
@
grestore
gsave
614.534 48.739 mo
621.534 48.739 li
621.534 41.7391 li
614.534 41.7391 li
614.534 48.739 li
clp
615.034 48.239 mo
621.034 42.239 li
615.034 42.239 mo
621.034 48.239 li
f
1 lw
0 lc
615.034 48.239 mo
621.034 42.239 li
615.034 42.239 mo
621.034 48.239 li
@
grestore
gsave
624.372 48.0275 mo
631.372 48.0275 li
631.372 41.0272 li
624.372 41.0272 li
624.372 48.0275 li
clp
624.872 47.5273 mo
630.872 41.5273 li
624.872 41.5273 mo
630.872 47.5273 li
f
1 lw
0 lc
624.872 47.5273 mo
630.872 41.5273 li
624.872 41.5273 mo
630.872 47.5273 li
@
grestore
gsave
634.21 48.0275 mo
641.21 48.0275 li
641.21 41.0272 li
634.21 41.0272 li
634.21 48.0275 li
clp
634.71 47.5273 mo
640.71 41.5273 li
634.71 41.5273 mo
640.71 47.5273 li
f
1 lw
0 lc
634.71 47.5273 mo
640.71 41.5273 li
634.71 41.5273 mo
640.71 47.5273 li
@
grestore
gsave
644.048 47.6077 mo
651.048 47.6077 li
651.048 40.6078 li
644.048 40.6078 li
644.048 47.6077 li
clp
644.548 47.1077 mo
650.548 41.1077 li
644.548 41.1077 mo
650.548 47.1077 li
f
1 lw
0 lc
644.548 47.1077 mo
650.548 41.1077 li
644.548 41.1077 mo
650.548 47.1077 li
@
grestore
gsave
653.886 47.425 mo
660.886 47.425 li
660.886 40.4251 li
653.886 40.4251 li
653.886 47.425 li
clp
654.386 46.9252 mo
660.386 40.9252 li
654.386 40.9252 mo
660.386 46.9252 li
f
1 lw
0 lc
654.386 46.9252 mo
660.386 40.9252 li
654.386 40.9252 mo
660.386 46.9252 li
@
grestore
gsave
663.724 47.2793 mo
670.724 47.2793 li
670.724 40.279 li
663.724 40.279 li
663.724 47.2793 li
clp
664.224 46.7792 mo
670.224 40.7792 li
664.224 40.7792 mo
670.224 46.7792 li
f
1 lw
0 lc
664.224 46.7792 mo
670.224 40.7792 li
664.224 40.7792 mo
670.224 46.7792 li
@
grestore
gsave
673.562 46.8779 mo
680.562 46.8779 li
680.562 39.8776 li
673.562 39.8776 li
673.562 46.8779 li
clp
674.062 46.3777 mo
680.062 40.3777 li
674.062 40.3777 mo
680.062 46.3777 li
f
1 lw
0 lc
674.062 46.3777 mo
680.062 40.3777 li
674.062 40.3777 mo
680.062 46.3777 li
@
grestore
gsave
683.4 46.6405 mo
690.4 46.6405 li
690.4 39.6405 li
683.4 39.6405 li
683.4 46.6405 li
clp
683.9 46.1406 mo
689.9 40.1406 li
683.9 40.1406 mo
689.9 46.1406 li
f
1 lw
0 lc
683.9 46.1406 mo
689.9 40.1406 li
683.9 40.1406 mo
689.9 46.1406 li
@
grestore
gsave
693.238 46.4397 mo
700.238 46.4397 li
700.238 39.4398 li
693.238 39.4398 li
693.238 46.4397 li
clp
693.738 45.9399 mo
699.738 39.9399 li
693.738 39.9399 mo
699.738 45.9399 li
f
1 lw
0 lc
693.738 45.9399 mo
699.738 39.9399 li
693.738 39.9399 mo
699.738 45.9399 li
@
grestore
gsave
703.076 46.6405 mo
710.076 46.6405 li
710.076 39.6405 li
703.076 39.6405 li
703.076 46.6405 li
clp
703.576 46.1406 mo
709.576 40.1406 li
703.576 40.1406 mo
709.576 46.1406 li
f
1 lw
0 lc
703.576 46.1406 mo
709.576 40.1406 li
703.576 40.1406 mo
709.576 46.1406 li
@
grestore
gsave
712.914 46.4764 mo
719.914 46.4764 li
719.914 39.4765 li
712.914 39.4765 li
712.914 46.4764 li
clp
713.414 45.9763 mo
719.414 39.9763 li
713.414 39.9763 mo
719.414 45.9763 li
f
1 lw
0 lc
713.414 45.9763 mo
719.414 39.9763 li
713.414 39.9763 mo
719.414 45.9763 li
@
grestore
gsave
722.752 46.1297 mo
729.752 46.1297 li
729.752 39.1297 li
722.752 39.1297 li
722.752 46.1297 li
clp
723.252 45.6296 mo
729.252 39.6296 li
723.252 39.6296 mo
729.252 45.6296 li
f
1 lw
0 lc
723.252 45.6296 mo
729.252 39.6296 li
723.252 39.6296 mo
729.252 45.6296 li
@
grestore
gsave
732.59 46.5128 mo
739.59 46.5128 li
739.59 39.5128 li
732.59 39.5128 li
732.59 46.5128 li
clp
733.09 46.0128 mo
739.09 40.0128 li
733.09 40.0128 mo
739.09 46.0128 li
f
1 lw
0 lc
733.09 46.0128 mo
739.09 40.0128 li
733.09 40.0128 mo
739.09 46.0128 li
@
grestore
gsave
742.428 46.4944 mo
749.428 46.4944 li
749.428 39.4945 li
742.428 39.4945 li
742.428 46.4944 li
clp
742.928 45.9946 mo
748.928 39.9946 li
742.928 39.9946 mo
748.928 45.9946 li
f
1 lw
0 lc
742.928 45.9946 mo
748.928 39.9946 li
742.928 39.9946 mo
748.928 45.9946 li
@
grestore
gsave
752.266 46.5494 mo
759.266 46.5494 li
759.266 39.5492 li
752.266 39.5492 li
752.266 46.5494 li
clp
752.766 46.0493 mo
758.766 40.0493 li
752.766 40.0493 mo
758.766 46.0493 li
f
1 lw
0 lc
752.766 46.0493 mo
758.766 40.0493 li
752.766 40.0493 mo
758.766 46.0493 li
@
grestore
gsave
762.104 45.9473 mo
769.104 45.9473 li
769.104 38.9473 li
762.104 38.9473 li
762.104 45.9473 li
clp
762.604 45.4472 mo
768.604 39.4472 li
762.604 39.4472 mo
768.604 45.4472 li
f
1 lw
0 lc
762.604 45.4472 mo
768.604 39.4472 li
762.604 39.4472 mo
768.604 45.4472 li
@
grestore
gsave
771.942 44.1591 mo
778.942 44.1591 li
778.942 37.1592 li
771.942 37.1592 li
771.942 44.1591 li
clp
772.442 43.6591 mo
778.442 37.6591 li
772.442 37.6591 mo
778.442 43.6591 li
f
1 lw
0 lc
772.442 43.6591 mo
778.442 37.6591 li
772.442 37.6591 mo
778.442 43.6591 li
@
grestore
gsave
781.78 44.1591 mo
788.78 44.1591 li
788.78 37.1592 li
781.78 37.1592 li
781.78 44.1591 li
clp
782.28 43.6591 mo
788.28 37.6591 li
782.28 37.6591 mo
788.28 43.6591 li
f
1 lw
0 lc
782.28 43.6591 mo
788.28 37.6591 li
782.28 37.6591 mo
788.28 43.6591 li
@
grestore
gsave
791.618 44.1045 mo
798.618 44.1045 li
798.618 37.1042 li
791.618 37.1042 li
791.618 44.1045 li
clp
792.118 43.6043 mo
798.118 37.6043 li
792.118 37.6043 mo
798.118 43.6043 li
f
1 lw
0 lc
792.118 43.6043 mo
798.118 37.6043 li
792.118 37.6043 mo
798.118 43.6043 li
@
grestore
gsave
801.456 44.0314 mo
808.456 44.0314 li
808.456 37.0312 li
801.456 37.0312 li
801.456 44.0314 li
clp
801.956 43.5313 mo
807.956 37.5313 li
801.956 37.5313 mo
807.956 43.5313 li
f
1 lw
0 lc
801.956 43.5313 mo
807.956 37.5313 li
801.956 37.5313 mo
807.956 43.5313 li
@
grestore
gsave
811.294 44.0131 mo
818.294 44.0131 li
818.294 37.0132 li
811.294 37.0132 li
811.294 44.0131 li
clp
811.794 43.5131 mo
817.794 37.5131 li
811.794 37.5131 mo
817.794 43.5131 li
f
1 lw
0 lc
811.794 43.5131 mo
817.794 37.5131 li
811.794 37.5131 mo
817.794 43.5131 li
@
grestore
gsave
821.132 43.9948 mo
828.132 43.9948 li
828.132 36.9948 li
821.132 36.9948 li
821.132 43.9948 li
clp
821.632 43.4948 mo
827.632 37.4948 li
821.632 37.4948 mo
827.632 43.4948 li
f
1 lw
0 lc
821.632 43.4948 mo
827.632 37.4948 li
821.632 37.4948 mo
827.632 43.4948 li
@
grestore
gsave
830.97 44.0131 mo
837.97 44.0131 li
837.97 37.0132 li
830.97 37.0132 li
830.97 44.0131 li
clp
831.47 43.5131 mo
837.47 37.5131 li
831.47 37.5131 mo
837.47 43.5131 li
f
1 lw
0 lc
831.47 43.5131 mo
837.47 37.5131 li
831.47 37.5131 mo
837.47 43.5131 li
@
grestore
gsave
840.808 44.0314 mo
847.808 44.0314 li
847.808 37.0312 li
840.808 37.0312 li
840.808 44.0314 li
clp
841.308 43.5313 mo
847.308 37.5313 li
841.308 37.5313 mo
847.308 43.5313 li
f
1 lw
0 lc
841.308 43.5313 mo
847.308 37.5313 li
841.308 37.5313 mo
847.308 43.5313 li
@
grestore
gsave
850.646 43.9034 mo
857.646 43.9034 li
857.646 36.9035 li
850.646 36.9035 li
850.646 43.9034 li
clp
851.146 43.4036 mo
857.146 37.4036 li
851.146 37.4036 mo
857.146 43.4036 li
f
1 lw
0 lc
851.146 43.4036 mo
857.146 37.4036 li
851.146 37.4036 mo
857.146 43.4036 li
@
grestore
gsave
860.484 43.9034 mo
867.484 43.9034 li
867.484 36.9035 li
860.484 36.9035 li
860.484 43.9034 li
clp
860.984 43.4036 mo
866.984 37.4036 li
860.984 37.4036 mo
866.984 43.4036 li
f
1 lw
0 lc
860.984 43.4036 mo
866.984 37.4036 li
860.984 37.4036 mo
866.984 43.4036 li
@
grestore
gsave
870.322 43.9034 mo
877.322 43.9034 li
877.322 36.9035 li
870.322 36.9035 li
870.322 43.9034 li
clp
870.822 43.4036 mo
876.822 37.4036 li
870.822 37.4036 mo
876.822 43.4036 li
f
1 lw
0 lc
870.822 43.4036 mo
876.822 37.4036 li
870.822 37.4036 mo
876.822 43.4036 li
@
grestore
gsave
880.16 43.8307 mo
887.16 43.8307 li
887.16 36.8304 li
880.16 36.8304 li
880.16 43.8307 li
clp
880.66 43.3306 mo
886.66 37.3306 li
880.66 37.3306 mo
886.66 43.3306 li
f
1 lw
0 lc
880.66 43.3306 mo
886.66 37.3306 li
880.66 37.3306 mo
886.66 43.3306 li
@
grestore
gsave
889.998 43.8124 mo
896.998 43.8124 li
896.998 36.8124 li
889.998 36.8124 li
889.998 43.8124 li
clp
890.498 43.3123 mo
896.498 37.3123 li
890.498 37.3123 mo
896.498 43.3123 li
f
1 lw
0 lc
890.498 43.3123 mo
896.498 37.3123 li
890.498 37.3123 mo
896.498 43.3123 li
@
grestore
gsave
899.836 43.7394 mo
906.836 43.7394 li
906.836 36.7394 li
899.836 36.7394 li
899.836 43.7394 li
clp
900.336 43.2393 mo
906.336 37.2393 li
900.336 37.2393 mo
906.336 43.2393 li
f
1 lw
0 lc
900.336 43.2393 mo
906.336 37.2393 li
900.336 37.2393 mo
906.336 43.2393 li
@
grestore
gsave
909.674 43.7577 mo
916.674 43.7577 li
916.674 36.7574 li
909.674 36.7574 li
909.674 43.7577 li
clp
910.174 43.2576 mo
916.174 37.2576 li
910.174 37.2576 mo
916.174 43.2576 li
f
1 lw
0 lc
910.174 43.2576 mo
916.174 37.2576 li
910.174 37.2576 mo
916.174 43.2576 li
@
grestore
gsave
919.512 43.8124 mo
926.512 43.8124 li
926.512 36.8124 li
919.512 36.8124 li
919.512 43.8124 li
clp
920.012 43.3123 mo
926.012 37.3123 li
920.012 37.3123 mo
926.012 43.3123 li
f
1 lw
0 lc
920.012 43.3123 mo
926.012 37.3123 li
920.012 37.3123 mo
926.012 43.3123 li
@
grestore
gsave
929.35 43.8124 mo
936.35 43.8124 li
936.35 36.8124 li
929.35 36.8124 li
929.35 43.8124 li
clp
929.85 43.3123 mo
935.85 37.3123 li
929.85 37.3123 mo
935.85 43.3123 li
f
1 lw
0 lc
929.85 43.3123 mo
935.85 37.3123 li
929.85 37.3123 mo
935.85 43.3123 li
@
grestore
gsave
939.188 43.794 mo
946.188 43.794 li
946.188 36.7941 li
939.188 36.7941 li
939.188 43.794 li
clp
939.688 43.2941 mo
945.688 37.2941 li
939.688 37.2941 mo
945.688 43.2941 li
f
1 lw
0 lc
939.688 43.2941 mo
945.688 37.2941 li
939.688 37.2941 mo
945.688 43.2941 li
@
grestore
gsave
949.026 43.7394 mo
956.026 43.7394 li
956.026 36.7394 li
949.026 36.7394 li
949.026 43.7394 li
clp
949.526 43.2393 mo
955.526 37.2393 li
949.526 37.2393 mo
955.526 43.2393 li
f
1 lw
0 lc
949.526 43.2393 mo
955.526 37.2393 li
949.526 37.2393 mo
955.526 43.2393 li
@
grestore
gsave
958.864 43.6847 mo
965.864 43.6847 li
965.864 36.6847 li
958.864 36.6847 li
958.864 43.6847 li
clp
959.364 43.1846 mo
965.364 37.1846 li
959.364 37.1846 mo
965.364 43.1846 li
f
1 lw
0 lc
959.364 43.1846 mo
965.364 37.1846 li
959.364 37.1846 mo
965.364 43.1846 li
@
grestore
gsave
968.702 43.6847 mo
975.702 43.6847 li
975.702 36.6847 li
968.702 36.6847 li
968.702 43.6847 li
clp
969.202 43.1846 mo
975.202 37.1846 li
969.202 37.1846 mo
975.202 43.1846 li
f
1 lw
0 lc
969.202 43.1846 mo
975.202 37.1846 li
969.202 37.1846 mo
975.202 43.1846 li
@
grestore
gsave
978.54 43.6297 mo
985.54 43.6297 li
985.54 36.6297 li
978.54 36.6297 li
978.54 43.6297 li
clp
979.04 43.1298 mo
985.04 37.1298 li
979.04 37.1298 mo
985.04 43.1298 li
f
1 lw
0 lc
979.04 43.1298 mo
985.04 37.1298 li
979.04 37.1298 mo
985.04 43.1298 li
@
grestore
gsave
988.378 43.6117 mo
995.378 43.6117 li
995.378 36.6117 li
988.378 36.6117 li
988.378 43.6117 li
clp
988.878 43.1116 mo
994.878 37.1116 li
988.878 37.1116 mo
994.878 43.1116 li
f
1 lw
0 lc
988.878 43.1116 mo
994.878 37.1116 li
988.878 37.1116 mo
994.878 43.1116 li
@
grestore
gsave
998.216 43.5203 mo
1005.22 43.5203 li
1005.22 36.5204 li
998.216 36.5204 li
998.216 43.5203 li
clp
998.716 43.0203 mo
1004.72 37.0203 li
998.716 37.0203 mo
1004.72 43.0203 li
f
1 lw
0 lc
998.716 43.0203 mo
1004.72 37.0203 li
998.716 37.0203 mo
1004.72 43.0203 li
@
grestore
gsave
1008.05 43.5386 mo
1015.05 43.5386 li
1015.05 36.5387 li
1008.05 36.5387 li
1008.05 43.5386 li
clp
1008.55 43.0386 mo
1014.55 37.0386 li
1008.55 37.0386 mo
1014.55 43.0386 li
f
1 lw
0 lc
1008.55 43.0386 mo
1014.55 37.0386 li
1008.55 37.0386 mo
1014.55 43.0386 li
@
grestore
gsave
1017.89 43.5386 mo
1024.89 43.5386 li
1024.89 36.5387 li
1017.89 36.5387 li
1017.89 43.5386 li
clp
1018.39 43.0386 mo
1024.39 37.0386 li
1018.39 37.0386 mo
1024.39 43.0386 li
f
1 lw
0 lc
1018.39 43.0386 mo
1024.39 37.0386 li
1018.39 37.0386 mo
1024.39 43.0386 li
@
grestore
gsave
1027.73 43.557 mo
1034.73 43.557 li
1034.73 36.5567 li
1027.73 36.5567 li
1027.73 43.557 li
clp
1028.23 43.0568 mo
1034.23 37.0568 li
1028.23 37.0568 mo
1034.23 43.0568 li
f
1 lw
0 lc
1028.23 43.0568 mo
1034.23 37.0568 li
1028.23 37.0568 mo
1034.23 43.0568 li
@
grestore
gsave
1037.57 43.5386 mo
1044.57 43.5386 li
1044.57 36.5387 li
1037.57 36.5387 li
1037.57 43.5386 li
clp
1038.07 43.0386 mo
1044.07 37.0386 li
1038.07 37.0386 mo
1044.07 43.0386 li
f
1 lw
0 lc
1038.07 43.0386 mo
1044.07 37.0386 li
1038.07 37.0386 mo
1044.07 43.0386 li
@
grestore
gsave
1047.41 43.5203 mo
1054.41 43.5203 li
1054.41 36.5204 li
1047.41 36.5204 li
1047.41 43.5203 li
clp
1047.91 43.0203 mo
1053.91 37.0203 li
1047.91 37.0203 mo
1053.91 43.0203 li
f
1 lw
0 lc
1047.91 43.0203 mo
1053.91 37.0203 li
1047.91 37.0203 mo
1053.91 43.0203 li
@
grestore
gsave
1057.24 43.502 mo
1064.24 43.502 li
1064.24 36.502 li
1057.24 36.502 li
1057.24 43.502 li
clp
1057.74 43.0021 mo
1063.74 37.0021 li
1057.74 37.0021 mo
1063.74 43.0021 li
f
1 lw
0 lc
1057.74 43.0021 mo
1063.74 37.0021 li
1057.74 37.0021 mo
1063.74 43.0021 li
@
grestore
gsave
1067.08 43.4656 mo
1074.08 43.4656 li
1074.08 36.4657 li
1067.08 36.4657 li
1067.08 43.4656 li
clp
1067.58 42.9656 mo
1073.58 36.9656 li
1067.58 36.9656 mo
1073.58 42.9656 li
f
1 lw
0 lc
1067.58 42.9656 mo
1073.58 36.9656 li
1067.58 36.9656 mo
1073.58 42.9656 li
@
grestore
gsave
1076.92 43.4473 mo
1083.92 43.4473 li
1083.92 36.4473 li
1076.92 36.4473 li
1076.92 43.4473 li
clp
1077.42 42.9473 mo
1083.42 36.9473 li
1077.42 36.9473 mo
1083.42 42.9473 li
f
1 lw
0 lc
1077.42 42.9473 mo
1083.42 36.9473 li
1077.42 36.9473 mo
1083.42 42.9473 li
@
grestore
gsave
1086.76 43.4656 mo
1093.76 43.4656 li
1093.76 36.4657 li
1086.76 36.4657 li
1086.76 43.4656 li
clp
1087.26 42.9656 mo
1093.26 36.9656 li
1087.26 36.9656 mo
1093.26 42.9656 li
f
1 lw
0 lc
1087.26 42.9656 mo
1093.26 36.9656 li
1087.26 36.9656 mo
1093.26 42.9656 li
@
grestore
.8 lw
0 lj
67.5969 546.186 mo
67.5969 8.97205 li
@
1138.96 546.186 mo
1138.96 8.97205 li
@
67.5969 546.186 mo
1138.96 546.186 li
@
67.5969 8.97205 mo
1138.96 8.97205 li
@
1131.96 540.686 mo
726.879 540.686 li
726.289 540.684 725.941 540.542 725.732 540.332 cv
725.523 540.123 725.38 539.776 725.379 539.185 cv
725.379 442.748 li
725.38 442.158 725.523 441.811 725.732 441.602 cv
725.941 441.392 726.289 441.25 726.879 441.248 cv
1131.96 441.248 li
1132.55 441.25 1132.89 441.392 1133.1 441.602 cv
1133.31 441.811 1133.46 442.158 1133.46 442.748 cv
1133.46 539.185 li
1133.46 539.776 1133.31 540.123 1133.1 540.332 cv
1132.89 540.542 1132.55 540.684 1131.96 540.686 cv
0 0 0 0 cmyk
f
1131.97 541.685 mo
1131.96 541.685 1131.96 541.685 1131.96 541.685 cv
726.879 541.685 li
726.876 541.685 726.872 541.685 726.869 541.685 cv
726.129 541.685 725.481 541.494 725.025 541.039 cv
724.568 540.582 724.377 539.929 724.379 539.185 cv
724.379 442.748 li
724.377 442.005 724.568 441.352 725.025 440.895 cv
725.481 440.439 726.129 440.248 726.869 440.248 cv
726.872 440.248 726.876 440.248 726.879 440.248 cv
1131.96 440.248 li
1131.96 440.248 1131.96 440.248 1131.97 440.248 cv
1132.71 440.248 1133.35 440.439 1133.81 440.895 cv
1134.27 441.352 1134.46 442.005 1134.46 442.748 cv
1134.46 539.185 li
1134.46 539.929 1134.27 540.582 1133.81 541.039 cv
1133.36 541.494 1132.71 541.685 1131.97 541.685 cv
726.879 540.686 mo
1131.96 540.686 li
1132.55 540.684 1132.89 540.542 1133.1 540.332 cv
1133.31 540.123 1133.46 539.776 1133.46 539.185 cv
1133.46 442.748 li
1133.46 442.158 1133.31 441.811 1133.1 441.602 cv
1132.89 441.392 1132.55 441.25 1131.96 441.248 cv
726.879 441.248 li
726.289 441.25 725.941 441.392 725.732 441.602 cv
725.523 441.811 725.38 442.158 725.379 442.748 cv
725.379 539.185 li
725.38 539.776 725.523 540.123 725.732 540.332 cv
725.941 540.542 726.289 540.684 726.879 540.686 cv
726.879 540.686 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
728.879 456.451 mo
748.879 456.451 li
0 1 1 0 cmyk
@
760.819 452.991 mo
760.819 458.331 li
763.979 458.331 li
765.039 458.331 765.819 458.111 766.339 457.671 cv
766.839 457.231 767.099 456.571 767.099 455.651 cv
767.099 454.751 766.839 454.091 766.339 453.651 cv
765.819 453.211 765.039 452.991 763.979 452.991 cv
760.819 452.991 li
760.819 446.991 mo
760.819 451.391 li
763.739 451.391 li
764.699 451.391 765.399 451.211 765.879 450.851 cv
766.359 450.491 766.599 449.951 766.599 449.191 cv
766.599 448.471 766.359 447.911 765.879 447.551 cv
765.399 447.191 764.699 446.991 763.739 446.991 cv
760.819 446.991 li
758.839 445.371 mo
763.879 445.371 li
765.379 445.371 766.539 445.691 767.359 446.311 cv
768.159 446.951 768.579 447.831 768.579 448.971 cv
768.579 449.871 768.359 450.591 767.939 451.111 cv
767.519 451.631 766.919 451.971 766.119 452.091 cv
767.079 452.311 767.839 452.751 768.379 453.411 cv
768.899 454.071 769.179 454.891 769.179 455.871 cv
769.179 457.191 768.719 458.191 767.839 458.891 cv
766.959 459.611 765.699 459.951 764.079 459.951 cv
758.839 459.951 li
758.839 445.371 li
1 /0 /CSD get_res sepcs
1 sep
f
777.459 454.451 mo
775.999 454.451 774.999 454.631 774.439 454.951 cv
773.879 455.291 773.599 455.851 773.599 456.651 cv
773.599 457.291 773.799 457.811 774.219 458.171 cv
774.639 458.551 775.219 458.731 775.939 458.731 cv
776.939 458.731 777.739 458.391 778.339 457.671 cv
778.939 456.971 779.239 456.031 779.239 454.851 cv
779.239 454.451 li
777.459 454.451 li
781.039 453.711 mo
781.039 459.951 li
779.239 459.951 li
779.239 458.291 li
778.819 458.971 778.299 459.451 777.699 459.751 cv
777.099 460.051 776.339 460.211 775.459 460.211 cv
774.339 460.211 773.439 459.911 772.779 459.291 cv
772.119 458.671 771.799 457.831 771.799 456.771 cv
771.799 455.551 772.199 454.631 773.039 453.991 cv
773.859 453.371 775.079 453.051 776.719 453.051 cv
779.239 453.051 li
779.239 452.871 li
779.239 452.051 778.959 451.411 778.419 450.951 cv
777.879 450.511 777.119 450.271 776.139 450.271 cv
775.499 450.271 774.899 450.351 774.299 450.511 cv
773.699 450.671 773.139 450.891 772.599 451.171 cv
772.599 449.511 li
773.239 449.271 773.879 449.071 774.499 448.951 cv
775.119 448.831 775.719 448.751 776.319 448.751 cv
777.899 448.751 779.079 449.171 779.859 449.991 cv
780.639 450.811 781.039 452.051 781.039 453.711 cv
f
792.619 449.431 mo
792.619 451.111 li
792.099 450.831 791.599 450.631 791.079 450.491 cv
790.559 450.351 790.059 450.271 789.539 450.271 cv
788.379 450.271 787.459 450.651 786.819 451.391 cv
786.179 452.131 785.859 453.171 785.859 454.491 cv
785.859 455.831 786.179 456.871 786.819 457.611 cv
787.459 458.351 788.379 458.711 789.539 458.711 cv
790.059 458.711 790.559 458.651 791.079 458.511 cv
791.599 458.371 792.099 458.151 792.619 457.871 cv
792.619 459.531 li
792.099 459.771 791.579 459.951 791.059 460.051 cv
790.519 460.151 789.939 460.211 789.339 460.211 cv
787.699 460.211 786.379 459.711 785.419 458.671 cv
784.439 457.651 783.959 456.251 783.959 454.491 cv
783.959 452.711 784.439 451.311 785.419 450.291 cv
786.399 449.271 787.739 448.751 789.459 448.751 cv
790.019 448.751 790.559 448.811 791.079 448.931 cv
791.599 449.051 792.119 449.211 792.619 449.431 cv
f
795.679 444.751 mo
797.479 444.751 li
797.479 453.731 li
802.839 449.011 li
805.139 449.011 li
799.339 454.131 li
805.379 459.951 li
803.039 459.951 li
797.479 454.611 li
797.479 459.951 li
795.679 459.951 li
795.679 444.751 li
f
815.739 446.991 mo
815.739 452.471 li
818.219 452.471 li
819.139 452.471 819.839 452.251 820.339 451.771 cv
820.839 451.291 821.099 450.611 821.099 449.731 cv
821.099 448.851 820.839 448.191 820.339 447.711 cv
819.839 447.231 819.139 446.991 818.219 446.991 cv
815.739 446.991 li
813.759 445.371 mo
818.219 445.371 li
819.839 445.371 821.079 445.751 821.919 446.491 cv
822.759 447.231 823.179 448.311 823.179 449.731 cv
823.179 451.171 822.759 452.271 821.919 452.991 cv
821.079 453.731 819.839 454.091 818.219 454.091 cv
815.739 454.091 li
815.739 459.951 li
813.759 459.951 li
813.759 445.371 li
f
832.079 450.691 mo
831.879 450.571 831.659 450.491 831.419 450.431 cv
831.179 450.391 830.919 450.351 830.639 450.351 cv
829.619 450.351 828.839 450.691 828.299 451.351 cv
827.739 452.011 827.479 452.951 827.479 454.191 cv
827.479 459.951 li
825.679 459.951 li
825.679 449.011 li
827.479 449.011 li
827.479 450.711 li
827.839 450.051 828.339 449.551 828.939 449.231 cv
829.539 448.911 830.279 448.751 831.159 448.751 cv
831.279 448.751 831.419 448.771 831.579 448.771 cv
831.719 448.791 831.879 448.811 832.079 448.851 cv
832.079 450.691 li
f
838.199 450.271 mo
837.239 450.271 836.479 450.651 835.919 451.411 cv
835.359 452.171 835.079 453.191 835.079 454.491 cv
835.079 455.811 835.339 456.831 835.899 457.591 cv
836.459 458.351 837.219 458.711 838.199 458.711 cv
839.159 458.711 839.919 458.351 840.479 457.591 cv
841.039 456.831 841.319 455.811 841.319 454.491 cv
841.319 453.211 841.039 452.171 840.479 451.411 cv
839.919 450.651 839.159 450.271 838.199 450.271 cv
838.199 448.751 mo
839.759 448.751 840.979 449.271 841.879 450.271 cv
842.759 451.291 843.219 452.691 843.219 454.491 cv
843.219 456.291 842.759 457.691 841.879 458.691 cv
840.979 459.711 839.759 460.211 838.199 460.211 cv
836.619 460.211 835.379 459.711 834.499 458.691 cv
833.619 457.691 833.179 456.291 833.179 454.491 cv
833.179 452.691 833.619 451.291 834.499 450.271 cv
835.379 449.271 836.619 448.751 838.199 448.751 cv
f
847.939 458.311 mo
847.939 464.091 li
846.139 464.091 li
846.139 449.011 li
847.939 449.011 li
847.939 450.671 li
848.299 450.031 848.779 449.551 849.359 449.231 cv
849.939 448.911 850.639 448.751 851.439 448.751 cv
852.759 448.751 853.839 449.291 854.679 450.331 cv
855.499 451.391 855.919 452.771 855.919 454.491 cv
855.919 456.211 855.499 457.611 854.679 458.651 cv
853.839 459.691 852.759 460.211 851.439 460.211 cv
850.639 460.211 849.939 460.051 849.359 459.751 cv
848.779 459.451 848.299 458.971 847.939 458.311 cv
854.059 454.491 mo
854.059 453.171 853.779 452.151 853.239 451.391 cv
852.679 450.631 851.939 450.251 850.999 450.251 cv
850.039 450.251 849.299 450.631 848.759 451.391 cv
848.199 452.151 847.939 453.171 847.939 454.491 cv
847.939 455.811 848.199 456.851 848.759 457.611 cv
849.299 458.371 850.039 458.731 850.999 458.731 cv
851.939 458.731 852.679 458.371 853.239 457.611 cv
853.779 456.851 854.059 455.811 854.059 454.491 cv
f
863.878 454.451 mo
862.419 454.451 861.419 454.631 860.859 454.951 cv
860.299 455.291 860.018 455.851 860.018 456.651 cv
860.018 457.291 860.219 457.811 860.638 458.171 cv
861.058 458.551 861.638 458.731 862.359 458.731 cv
863.359 458.731 864.159 458.391 864.758 457.671 cv
865.359 456.971 865.659 456.031 865.659 454.851 cv
865.659 454.451 li
863.878 454.451 li
867.458 453.711 mo
867.458 459.951 li
865.659 459.951 li
865.659 458.291 li
865.238 458.971 864.719 459.451 864.118 459.751 cv
863.518 460.051 862.758 460.211 861.878 460.211 cv
860.758 460.211 859.859 459.911 859.198 459.291 cv
858.539 458.671 858.219 457.831 858.219 456.771 cv
858.219 455.551 858.618 454.631 859.458 453.991 cv
860.279 453.371 861.498 453.051 863.138 453.051 cv
865.659 453.051 li
865.659 452.871 li
865.659 452.051 865.378 451.411 864.839 450.951 cv
864.299 450.511 863.539 450.271 862.558 450.271 cv
861.919 450.271 861.318 450.351 860.719 450.511 cv
860.118 450.671 859.558 450.891 859.018 451.171 cv
859.018 449.511 li
859.659 449.271 860.299 449.071 860.919 448.951 cv
861.539 448.831 862.138 448.751 862.738 448.751 cv
864.318 448.751 865.498 449.171 866.279 449.991 cv
867.058 450.811 867.458 452.051 867.458 453.711 cv
f
878.359 454.351 mo
878.359 453.071 878.079 452.051 877.559 451.331 cv
877.019 450.611 876.259 450.251 875.299 450.251 cv
874.339 450.251 873.579 450.611 873.039 451.331 cv
872.499 452.051 872.239 453.071 872.239 454.351 cv
872.239 455.651 872.499 456.651 873.039 457.371 cv
873.579 458.091 874.339 458.451 875.299 458.451 cv
876.259 458.451 877.019 458.091 877.559 457.371 cv
878.079 456.651 878.359 455.651 878.359 454.351 cv
880.159 458.591 mo
880.159 460.431 879.739 461.811 878.919 462.731 cv
878.079 463.631 876.819 464.091 875.119 464.091 cv
874.479 464.091 873.899 464.031 873.339 463.951 cv
872.779 463.851 872.219 463.711 871.699 463.511 cv
871.699 461.771 li
872.219 462.051 872.739 462.251 873.259 462.391 cv
873.779 462.531 874.299 462.611 874.839 462.611 cv
875.999 462.611 876.879 462.291 877.479 461.691 cv
878.059 461.071 878.359 460.151 878.359 458.911 cv
878.359 458.031 li
877.979 458.671 877.499 459.151 876.919 459.471 cv
876.339 459.791 875.659 459.951 874.859 459.951 cv
873.499 459.951 872.419 459.451 871.599 458.431 cv
870.779 457.411 870.379 456.051 870.379 454.351 cv
870.379 452.671 870.779 451.311 871.599 450.291 cv
872.419 449.271 873.499 448.751 874.859 448.751 cv
875.659 448.751 876.339 448.911 876.919 449.231 cv
877.499 449.551 877.979 450.031 878.359 450.671 cv
878.359 449.011 li
880.159 449.011 li
880.159 458.591 li
f
888.839 454.451 mo
887.379 454.451 886.379 454.631 885.819 454.951 cv
885.259 455.291 884.979 455.851 884.979 456.651 cv
884.979 457.291 885.179 457.811 885.599 458.171 cv
886.018 458.551 886.599 458.731 887.319 458.731 cv
888.319 458.731 889.119 458.391 889.719 457.671 cv
890.319 456.971 890.619 456.031 890.619 454.851 cv
890.619 454.451 li
888.839 454.451 li
892.419 453.711 mo
892.419 459.951 li
890.619 459.951 li
890.619 458.291 li
890.198 458.971 889.679 459.451 889.078 459.751 cv
888.479 460.051 887.719 460.211 886.839 460.211 cv
885.719 460.211 884.819 459.911 884.159 459.291 cv
883.499 458.671 883.179 457.831 883.179 456.771 cv
883.179 455.551 883.578 454.631 884.419 453.991 cv
885.239 453.371 886.458 453.051 888.099 453.051 cv
890.619 453.051 li
890.619 452.871 li
890.619 452.051 890.339 451.411 889.799 450.951 cv
889.259 450.511 888.499 450.271 887.518 450.271 cv
886.879 450.271 886.279 450.351 885.679 450.511 cv
885.078 450.671 884.518 450.891 883.979 451.171 cv
883.979 449.511 li
884.619 449.271 885.259 449.071 885.879 448.951 cv
886.499 448.831 887.099 448.751 887.698 448.751 cv
889.279 448.751 890.458 449.171 891.239 449.991 cv
892.018 450.811 892.419 452.051 892.419 453.711 cv
f
897.899 445.911 mo
897.899 449.011 li
901.599 449.011 li
901.599 450.411 li
897.899 450.411 li
897.899 456.351 li
897.899 457.251 898.019 457.831 898.259 458.071 cv
898.499 458.331 898.999 458.451 899.759 458.451 cv
901.599 458.451 li
901.599 459.951 li
899.759 459.951 li
898.359 459.951 897.399 459.691 896.879 459.171 cv
896.359 458.651 896.099 457.711 896.099 456.351 cv
896.099 450.411 li
894.779 450.411 li
894.779 449.011 li
896.099 449.011 li
896.099 445.911 li
897.899 445.911 li
f
903.959 449.011 mo
905.759 449.011 li
905.759 459.951 li
903.959 459.951 li
903.959 449.011 li
903.959 444.751 mo
905.759 444.751 li
905.759 447.031 li
903.959 447.031 li
903.959 444.751 li
f
913.759 450.271 mo
912.799 450.271 912.039 450.651 911.479 451.411 cv
910.919 452.171 910.639 453.191 910.639 454.491 cv
910.639 455.811 910.899 456.831 911.459 457.591 cv
912.019 458.351 912.779 458.711 913.759 458.711 cv
914.719 458.711 915.479 458.351 916.039 457.591 cv
916.599 456.831 916.879 455.811 916.879 454.491 cv
916.879 453.211 916.599 452.171 916.039 451.411 cv
915.479 450.651 914.719 450.271 913.759 450.271 cv
913.759 448.751 mo
915.319 448.751 916.539 449.271 917.439 450.271 cv
918.319 451.291 918.779 452.691 918.779 454.491 cv
918.779 456.291 918.319 457.691 917.439 458.691 cv
916.539 459.711 915.319 460.211 913.759 460.211 cv
912.179 460.211 910.939 459.711 910.059 458.691 cv
909.179 457.691 908.739 456.291 908.739 454.491 cv
908.739 452.691 909.179 451.291 910.059 450.271 cv
910.939 449.271 912.179 448.751 913.759 448.751 cv
f
930.859 453.351 mo
930.859 459.951 li
929.059 459.951 li
929.059 453.411 li
929.059 452.371 928.839 451.611 928.439 451.091 cv
928.039 450.571 927.439 450.311 926.639 450.311 cv
925.659 450.311 924.899 450.631 924.339 451.251 cv
923.779 451.871 923.499 452.711 923.499 453.771 cv
923.499 459.951 li
921.699 459.951 li
921.699 449.011 li
923.499 449.011 li
923.499 450.711 li
923.919 450.071 924.419 449.571 925.019 449.251 cv
925.599 448.931 926.279 448.751 927.039 448.751 cv
928.279 448.751 929.239 449.151 929.879 449.931 cv
930.519 450.711 930.859 451.851 930.859 453.351 cv
f
945.118 444.771 mo
944.238 446.291 943.599 447.771 943.178 449.231 cv
942.738 450.691 942.538 452.171 942.538 453.671 cv
942.538 455.191 942.738 456.671 943.178 458.131 cv
943.599 459.611 944.238 461.071 945.118 462.571 cv
943.558 462.571 li
942.578 461.031 941.839 459.551 941.358 458.071 cv
940.878 456.591 940.638 455.131 940.638 453.671 cv
940.638 452.231 940.878 450.771 941.358 449.291 cv
941.839 447.811 942.558 446.311 943.558 444.771 cv
945.118 444.771 li
f
946.678 445.371 mo
958.999 445.371 li
958.999 447.031 li
953.818 447.031 li
953.818 459.951 li
951.839 459.951 li
951.839 447.031 li
946.678 447.031 li
946.678 445.371 li
f
967.158 450.691 mo
966.958 450.571 966.738 450.491 966.498 450.431 cv
966.258 450.391 965.998 450.351 965.718 450.351 cv
964.698 450.351 963.918 450.691 963.378 451.351 cv
962.818 452.011 962.558 452.951 962.558 454.191 cv
962.558 459.951 li
960.758 459.951 li
960.758 449.011 li
962.558 449.011 li
962.558 450.711 li
962.918 450.051 963.418 449.551 964.018 449.231 cv
964.618 448.911 965.358 448.751 966.238 448.751 cv
966.358 448.751 966.498 448.771 966.658 448.771 cv
966.798 448.791 966.958 448.811 967.158 448.851 cv
967.158 450.691 li
f
974.018 454.451 mo
972.558 454.451 971.558 454.631 970.998 454.951 cv
970.438 455.291 970.158 455.851 970.158 456.651 cv
970.158 457.291 970.358 457.811 970.778 458.171 cv
971.198 458.551 971.778 458.731 972.498 458.731 cv
973.498 458.731 974.298 458.391 974.898 457.671 cv
975.498 456.971 975.798 456.031 975.798 454.851 cv
975.798 454.451 li
974.018 454.451 li
977.598 453.711 mo
977.598 459.951 li
975.798 459.951 li
975.798 458.291 li
975.378 458.971 974.858 459.451 974.258 459.751 cv
973.658 460.051 972.898 460.211 972.018 460.211 cv
970.898 460.211 969.998 459.911 969.338 459.291 cv
968.678 458.671 968.358 457.831 968.358 456.771 cv
968.358 455.551 968.758 454.631 969.598 453.991 cv
970.418 453.371 971.638 453.051 973.278 453.051 cv
975.798 453.051 li
975.798 452.871 li
975.798 452.051 975.518 451.411 974.978 450.951 cv
974.438 450.511 973.678 450.271 972.698 450.271 cv
972.058 450.271 971.458 450.351 970.858 450.511 cv
970.258 450.671 969.698 450.891 969.158 451.171 cv
969.158 449.511 li
969.798 449.271 970.438 449.071 971.058 448.951 cv
971.678 448.831 972.278 448.751 972.878 448.751 cv
974.458 448.751 975.638 449.171 976.418 449.991 cv
977.198 450.811 977.598 452.051 977.598 453.711 cv
f
981.298 449.011 mo
983.099 449.011 li
983.099 459.951 li
981.298 459.951 li
981.298 449.011 li
981.298 444.751 mo
983.099 444.751 li
983.099 447.031 li
981.298 447.031 li
981.298 444.751 li
f
995.958 453.351 mo
995.958 459.951 li
994.158 459.951 li
994.158 453.411 li
994.158 452.371 993.938 451.611 993.538 451.091 cv
993.138 450.571 992.538 450.311 991.738 450.311 cv
990.758 450.311 989.998 450.631 989.438 451.251 cv
988.878 451.871 988.598 452.711 988.598 453.771 cv
988.598 459.951 li
986.798 459.951 li
986.798 449.011 li
988.598 449.011 li
988.598 450.711 li
989.018 450.071 989.518 449.571 990.118 449.251 cv
990.698 448.931 991.378 448.751 992.138 448.751 cv
993.378 448.751 994.338 449.151 994.978 449.931 cv
995.618 450.711 995.958 451.851 995.958 453.351 cv
f
999.538 449.011 mo
1001.34 449.011 li
1001.34 459.951 li
999.538 459.951 li
999.538 449.011 li
999.538 444.751 mo
1001.34 444.751 li
1001.34 447.031 li
999.538 447.031 li
999.538 444.751 li
f
1014.2 453.351 mo
1014.2 459.951 li
1012.4 459.951 li
1012.4 453.411 li
1012.4 452.371 1012.18 451.611 1011.78 451.091 cv
1011.38 450.571 1010.78 450.311 1009.98 450.311 cv
1009 450.311 1008.24 450.631 1007.68 451.251 cv
1007.12 451.871 1006.84 452.711 1006.84 453.771 cv
1006.84 459.951 li
1005.04 459.951 li
1005.04 449.011 li
1006.84 449.011 li
1006.84 450.711 li
1007.26 450.071 1007.76 449.571 1008.36 449.251 cv
1008.94 448.931 1009.62 448.751 1010.38 448.751 cv
1011.62 448.751 1012.58 449.151 1013.22 449.931 cv
1013.86 450.711 1014.2 451.851 1014.2 453.351 cv
f
1024.98 454.351 mo
1024.98 453.071 1024.7 452.051 1024.18 451.331 cv
1023.64 450.611 1022.88 450.251 1021.92 450.251 cv
1020.96 450.251 1020.2 450.611 1019.66 451.331 cv
1019.12 452.051 1018.86 453.071 1018.86 454.351 cv
1018.86 455.651 1019.12 456.651 1019.66 457.371 cv
1020.2 458.091 1020.96 458.451 1021.92 458.451 cv
1022.88 458.451 1023.64 458.091 1024.18 457.371 cv
1024.7 456.651 1024.98 455.651 1024.98 454.351 cv
1026.78 458.591 mo
1026.78 460.431 1026.36 461.811 1025.54 462.731 cv
1024.7 463.631 1023.44 464.091 1021.74 464.091 cv
1021.1 464.091 1020.52 464.031 1019.96 463.951 cv
1019.4 463.851 1018.84 463.711 1018.32 463.511 cv
1018.32 461.771 li
1018.84 462.051 1019.36 462.251 1019.88 462.391 cv
1020.4 462.531 1020.92 462.611 1021.46 462.611 cv
1022.62 462.611 1023.5 462.291 1024.1 461.691 cv
1024.68 461.071 1024.98 460.151 1024.98 458.911 cv
1024.98 458.031 li
1024.6 458.671 1024.12 459.151 1023.54 459.471 cv
1022.96 459.791 1022.28 459.951 1021.48 459.951 cv
1020.12 459.951 1019.04 459.451 1018.22 458.431 cv
1017.4 457.411 1017 456.051 1017 454.351 cv
1017 452.671 1017.4 451.311 1018.22 450.291 cv
1019.04 449.271 1020.12 448.751 1021.48 448.751 cv
1022.28 448.751 1022.96 448.911 1023.54 449.231 cv
1024.12 449.551 1024.6 450.031 1024.98 450.671 cv
1024.98 449.011 li
1026.78 449.011 li
1026.78 458.591 li
f
1030.94 457.471 mo
1033 457.471 li
1033 459.151 li
1031.4 462.251 li
1030.14 462.251 li
1030.94 459.151 li
1030.94 457.471 li
f
1052.02 445.851 mo
1052.02 447.771 li
1051.26 447.411 1050.56 447.151 1049.9 446.971 cv
1049.22 446.811 1048.58 446.711 1047.98 446.711 cv
1046.9 446.711 1046.06 446.931 1045.48 447.331 cv
1044.9 447.751 1044.62 448.351 1044.62 449.111 cv
1044.62 449.751 1044.8 450.251 1045.2 450.571 cv
1045.58 450.911 1046.32 451.171 1047.4 451.371 cv
1048.6 451.611 li
1050.06 451.891 1051.14 452.391 1051.84 453.091 cv
1052.54 453.811 1052.9 454.751 1052.9 455.931 cv
1052.9 457.351 1052.42 458.411 1051.48 459.131 cv
1050.52 459.851 1049.14 460.211 1047.32 460.211 cv
1046.62 460.211 1045.88 460.131 1045.1 459.991 cv
1044.32 459.851 1043.52 459.631 1042.7 459.311 cv
1042.7 457.271 li
1043.5 457.731 1044.28 458.071 1045.04 458.291 cv
1045.8 458.531 1046.56 458.631 1047.32 458.631 cv
1048.44 458.631 1049.3 458.411 1049.92 457.971 cv
1050.52 457.531 1050.84 456.911 1050.84 456.071 cv
1050.84 455.351 1050.62 454.791 1050.18 454.391 cv
1049.74 453.991 1049.02 453.691 1048.02 453.491 cv
1046.82 453.251 li
1045.34 452.971 1044.28 452.511 1043.62 451.871 cv
1042.96 451.251 1042.64 450.391 1042.64 449.271 cv
1042.64 447.991 1043.08 446.971 1044 446.231 cv
1044.9 445.491 1046.16 445.111 1047.76 445.111 cv
1048.44 445.111 1049.12 445.171 1049.84 445.291 cv
1050.54 445.411 1051.26 445.611 1052.02 445.851 cv
f
1055.9 449.011 mo
1057.7 449.011 li
1057.7 459.951 li
1055.9 459.951 li
1055.9 449.011 li
1055.9 444.751 mo
1057.7 444.751 li
1057.7 447.031 li
1055.9 447.031 li
1055.9 444.751 li
f
1068.66 454.351 mo
1068.66 453.071 1068.38 452.051 1067.86 451.331 cv
1067.32 450.611 1066.56 450.251 1065.6 450.251 cv
1064.64 450.251 1063.88 450.611 1063.34 451.331 cv
1062.8 452.051 1062.54 453.071 1062.54 454.351 cv
1062.54 455.651 1062.8 456.651 1063.34 457.371 cv
1063.88 458.091 1064.64 458.451 1065.6 458.451 cv
1066.56 458.451 1067.32 458.091 1067.86 457.371 cv
1068.38 456.651 1068.66 455.651 1068.66 454.351 cv
1070.46 458.591 mo
1070.46 460.431 1070.04 461.811 1069.22 462.731 cv
1068.38 463.631 1067.12 464.091 1065.42 464.091 cv
1064.78 464.091 1064.2 464.031 1063.64 463.951 cv
1063.08 463.851 1062.52 463.711 1062 463.511 cv
1062 461.771 li
1062.52 462.051 1063.04 462.251 1063.56 462.391 cv
1064.08 462.531 1064.6 462.611 1065.14 462.611 cv
1066.3 462.611 1067.18 462.291 1067.78 461.691 cv
1068.36 461.071 1068.66 460.151 1068.66 458.911 cv
1068.66 458.031 li
1068.28 458.671 1067.8 459.151 1067.22 459.471 cv
1066.64 459.791 1065.96 459.951 1065.16 459.951 cv
1063.8 459.951 1062.72 459.451 1061.9 458.431 cv
1061.08 457.411 1060.68 456.051 1060.68 454.351 cv
1060.68 452.671 1061.08 451.311 1061.9 450.291 cv
1062.72 449.271 1063.8 448.751 1065.16 448.751 cv
1065.96 448.751 1066.64 448.911 1067.22 449.231 cv
1067.8 449.551 1068.28 450.031 1068.66 450.671 cv
1068.66 449.011 li
1070.46 449.011 li
1070.46 458.591 li
f
1082.68 451.111 mo
1083.12 450.311 1083.66 449.731 1084.28 449.331 cv
1084.9 448.951 1085.64 448.751 1086.5 448.751 cv
1087.62 448.751 1088.5 449.151 1089.12 449.951 cv
1089.74 450.751 1090.06 451.891 1090.06 453.351 cv
1090.06 459.951 li
1088.26 459.951 li
1088.26 453.411 li
1088.26 452.371 1088.06 451.591 1087.7 451.071 cv
1087.32 450.571 1086.76 450.311 1086 450.311 cv
1085.06 450.311 1084.32 450.631 1083.78 451.251 cv
1083.24 451.871 1082.98 452.711 1082.98 453.771 cv
1082.98 459.951 li
1081.18 459.951 li
1081.18 453.411 li
1081.18 452.371 1080.98 451.591 1080.62 451.071 cv
1080.24 450.571 1079.66 450.311 1078.9 450.311 cv
1077.98 450.311 1077.24 450.631 1076.7 451.251 cv
1076.16 451.871 1075.9 452.711 1075.9 453.771 cv
1075.9 459.951 li
1074.1 459.951 li
1074.1 449.011 li
1075.9 449.011 li
1075.9 450.711 li
1076.3 450.051 1076.8 449.551 1077.38 449.231 cv
1077.94 448.911 1078.62 448.751 1079.42 448.751 cv
1080.22 448.751 1080.88 448.951 1081.44 449.351 cv
1082 449.751 1082.4 450.351 1082.68 451.111 cv
f
1097.88 450.271 mo
1096.92 450.271 1096.16 450.651 1095.6 451.411 cv
1095.04 452.171 1094.76 453.191 1094.76 454.491 cv
1094.76 455.811 1095.02 456.831 1095.58 457.591 cv
1096.14 458.351 1096.9 458.711 1097.88 458.711 cv
1098.84 458.711 1099.6 458.351 1100.16 457.591 cv
1100.72 456.831 1101 455.811 1101 454.491 cv
1101 453.211 1100.72 452.171 1100.16 451.411 cv
1099.6 450.651 1098.84 450.271 1097.88 450.271 cv
1097.88 448.751 mo
1099.44 448.751 1100.66 449.271 1101.56 450.271 cv
1102.44 451.291 1102.9 452.691 1102.9 454.491 cv
1102.9 456.291 1102.44 457.691 1101.56 458.691 cv
1100.66 459.711 1099.44 460.211 1097.88 460.211 cv
1096.3 460.211 1095.06 459.711 1094.18 458.691 cv
1093.3 457.691 1092.86 456.291 1092.86 454.491 cv
1092.86 452.691 1093.3 451.291 1094.18 450.271 cv
1095.06 449.271 1096.3 448.751 1097.88 448.751 cv
f
1105.88 449.011 mo
1107.68 449.011 li
1107.68 459.951 li
1105.88 459.951 li
1105.88 449.011 li
1105.88 444.751 mo
1107.68 444.751 li
1107.68 447.031 li
1105.88 447.031 li
1105.88 444.751 li
f
1118.64 450.671 mo
1118.64 444.751 li
1120.44 444.751 li
1120.44 459.951 li
1118.64 459.951 li
1118.64 458.311 li
1118.26 458.971 1117.78 459.451 1117.2 459.751 cv
1116.62 460.051 1115.94 460.211 1115.14 460.211 cv
1113.82 460.211 1112.74 459.691 1111.9 458.651 cv
1111.06 457.611 1110.66 456.211 1110.66 454.491 cv
1110.66 452.771 1111.06 451.391 1111.9 450.331 cv
1112.74 449.291 1113.82 448.751 1115.14 448.751 cv
1115.94 448.751 1116.62 448.911 1117.2 449.231 cv
1117.78 449.551 1118.26 450.031 1118.64 450.671 cv
1112.52 454.491 mo
1112.52 455.811 1112.78 456.851 1113.32 457.611 cv
1113.86 458.371 1114.62 458.731 1115.58 458.731 cv
1116.52 458.731 1117.26 458.371 1117.82 457.611 cv
1118.36 456.851 1118.64 455.811 1118.64 454.491 cv
1118.64 453.171 1118.36 452.151 1117.82 451.391 cv
1117.26 450.631 1116.52 450.251 1115.58 450.251 cv
1114.62 450.251 1113.86 450.631 1113.32 451.391 cv
1112.78 452.151 1112.52 453.171 1112.52 454.491 cv
f
1123.86 444.771 mo
1125.42 444.771 li
1126.38 446.311 1127.12 447.811 1127.6 449.291 cv
1128.08 450.771 1128.34 452.231 1128.34 453.671 cv
1128.34 455.131 1128.08 456.591 1127.6 458.071 cv
1127.12 459.551 1126.38 461.031 1125.42 462.571 cv
1123.86 462.571 li
1124.72 461.071 1125.36 459.611 1125.8 458.131 cv
1126.22 456.671 1126.44 455.191 1126.44 453.671 cv
1126.44 452.171 1126.22 450.691 1125.8 449.231 cv
1125.36 447.771 1124.72 446.291 1123.86 444.771 cv
f
728.879 480.811 mo
748.879 480.811 li
0 1 1 0 cmyk
@
735.879 483.811 mo
741.879 477.811 li
735.879 477.811 mo
741.879 483.811 li
f
1 lw
0 lc
735.879 483.811 mo
741.879 477.811 li
735.879 477.811 mo
741.879 483.811 li
@
760.819 477.351 mo
760.819 482.691 li
763.979 482.691 li
765.039 482.691 765.819 482.471 766.339 482.031 cv
766.839 481.591 767.099 480.931 767.099 480.011 cv
767.099 479.111 766.839 478.451 766.339 478.011 cv
765.819 477.571 765.039 477.351 763.979 477.351 cv
760.819 477.351 li
760.819 471.351 mo
760.819 475.751 li
763.739 475.751 li
764.699 475.751 765.399 475.571 765.879 475.211 cv
766.359 474.851 766.599 474.311 766.599 473.551 cv
766.599 472.831 766.359 472.271 765.879 471.911 cv
765.399 471.551 764.699 471.351 763.739 471.351 cv
760.819 471.351 li
758.839 469.731 mo
763.879 469.731 li
765.379 469.731 766.539 470.051 767.359 470.671 cv
768.159 471.311 768.579 472.191 768.579 473.331 cv
768.579 474.231 768.359 474.951 767.939 475.471 cv
767.519 475.991 766.919 476.331 766.119 476.451 cv
767.079 476.671 767.839 477.111 768.379 477.771 cv
768.899 478.431 769.179 479.251 769.179 480.231 cv
769.179 481.551 768.719 482.551 767.839 483.251 cv
766.959 483.971 765.699 484.311 764.079 484.311 cv
758.839 484.311 li
758.839 469.731 li
1 /0 /CSD get_res sepcs
1 sep
f
777.459 478.811 mo
775.999 478.811 774.999 478.991 774.439 479.311 cv
773.879 479.651 773.599 480.211 773.599 481.011 cv
773.599 481.651 773.799 482.171 774.219 482.531 cv
774.639 482.911 775.219 483.091 775.939 483.091 cv
776.939 483.091 777.739 482.751 778.339 482.031 cv
778.939 481.331 779.239 480.391 779.239 479.211 cv
779.239 478.811 li
777.459 478.811 li
781.039 478.071 mo
781.039 484.311 li
779.239 484.311 li
779.239 482.651 li
778.819 483.331 778.299 483.811 777.699 484.111 cv
777.099 484.411 776.339 484.571 775.459 484.571 cv
774.339 484.571 773.439 484.271 772.779 483.651 cv
772.119 483.031 771.799 482.191 771.799 481.131 cv
771.799 479.911 772.199 478.991 773.039 478.351 cv
773.859 477.731 775.079 477.411 776.719 477.411 cv
779.239 477.411 li
779.239 477.231 li
779.239 476.411 778.959 475.771 778.419 475.311 cv
777.879 474.871 777.119 474.631 776.139 474.631 cv
775.499 474.631 774.899 474.711 774.299 474.871 cv
773.699 475.031 773.139 475.251 772.599 475.531 cv
772.599 473.871 li
773.239 473.631 773.879 473.431 774.499 473.311 cv
775.119 473.191 775.719 473.111 776.319 473.111 cv
777.899 473.111 779.079 473.531 779.859 474.351 cv
780.639 475.171 781.039 476.411 781.039 478.071 cv
f
792.619 473.791 mo
792.619 475.471 li
792.099 475.191 791.599 474.991 791.079 474.851 cv
790.559 474.711 790.059 474.631 789.539 474.631 cv
788.379 474.631 787.459 475.011 786.819 475.751 cv
786.179 476.491 785.859 477.531 785.859 478.851 cv
785.859 480.191 786.179 481.231 786.819 481.971 cv
787.459 482.711 788.379 483.071 789.539 483.071 cv
790.059 483.071 790.559 483.011 791.079 482.871 cv
791.599 482.731 792.099 482.511 792.619 482.231 cv
792.619 483.891 li
792.099 484.131 791.579 484.311 791.059 484.411 cv
790.519 484.511 789.939 484.571 789.339 484.571 cv
787.699 484.571 786.379 484.071 785.419 483.031 cv
784.439 482.011 783.959 480.611 783.959 478.851 cv
783.959 477.071 784.439 475.671 785.419 474.651 cv
786.399 473.631 787.739 473.111 789.459 473.111 cv
790.019 473.111 790.559 473.171 791.079 473.291 cv
791.599 473.411 792.119 473.571 792.619 473.791 cv
f
795.679 469.111 mo
797.479 469.111 li
797.479 478.091 li
802.839 473.371 li
805.139 473.371 li
799.339 478.491 li
805.379 484.311 li
803.039 484.311 li
797.479 478.971 li
797.479 484.311 li
795.679 484.311 li
795.679 469.111 li
f
815.739 471.351 mo
815.739 476.831 li
818.219 476.831 li
819.139 476.831 819.839 476.611 820.339 476.131 cv
820.839 475.651 821.099 474.971 821.099 474.091 cv
821.099 473.211 820.839 472.551 820.339 472.071 cv
819.839 471.591 819.139 471.351 818.219 471.351 cv
815.739 471.351 li
813.759 469.731 mo
818.219 469.731 li
819.839 469.731 821.079 470.111 821.919 470.851 cv
822.759 471.591 823.179 472.671 823.179 474.091 cv
823.179 475.531 822.759 476.631 821.919 477.351 cv
821.079 478.091 819.839 478.451 818.219 478.451 cv
815.739 478.451 li
815.739 484.311 li
813.759 484.311 li
813.759 469.731 li
f
832.079 475.051 mo
831.879 474.931 831.659 474.851 831.419 474.791 cv
831.179 474.751 830.919 474.711 830.639 474.711 cv
829.619 474.711 828.839 475.051 828.299 475.711 cv
827.739 476.371 827.479 477.311 827.479 478.551 cv
827.479 484.311 li
825.679 484.311 li
825.679 473.371 li
827.479 473.371 li
827.479 475.071 li
827.839 474.411 828.339 473.911 828.939 473.591 cv
829.539 473.271 830.279 473.111 831.159 473.111 cv
831.279 473.111 831.419 473.131 831.579 473.131 cv
831.719 473.151 831.879 473.171 832.079 473.211 cv
832.079 475.051 li
f
838.199 474.631 mo
837.239 474.631 836.479 475.011 835.919 475.771 cv
835.359 476.531 835.079 477.551 835.079 478.851 cv
835.079 480.171 835.339 481.191 835.899 481.951 cv
836.459 482.711 837.219 483.071 838.199 483.071 cv
839.159 483.071 839.919 482.711 840.479 481.951 cv
841.039 481.191 841.319 480.171 841.319 478.851 cv
841.319 477.571 841.039 476.531 840.479 475.771 cv
839.919 475.011 839.159 474.631 838.199 474.631 cv
838.199 473.111 mo
839.759 473.111 840.979 473.631 841.879 474.631 cv
842.759 475.651 843.219 477.051 843.219 478.851 cv
843.219 480.651 842.759 482.051 841.879 483.051 cv
840.979 484.071 839.759 484.571 838.199 484.571 cv
836.619 484.571 835.379 484.071 834.499 483.051 cv
833.619 482.051 833.179 480.651 833.179 478.851 cv
833.179 477.051 833.619 475.651 834.499 474.631 cv
835.379 473.631 836.619 473.111 838.199 473.111 cv
f
847.939 482.671 mo
847.939 488.451 li
846.139 488.451 li
846.139 473.371 li
847.939 473.371 li
847.939 475.031 li
848.299 474.391 848.779 473.911 849.359 473.591 cv
849.939 473.271 850.639 473.111 851.439 473.111 cv
852.759 473.111 853.839 473.651 854.679 474.691 cv
855.499 475.751 855.919 477.131 855.919 478.851 cv
855.919 480.571 855.499 481.971 854.679 483.011 cv
853.839 484.051 852.759 484.571 851.439 484.571 cv
850.639 484.571 849.939 484.411 849.359 484.111 cv
848.779 483.811 848.299 483.331 847.939 482.671 cv
854.059 478.851 mo
854.059 477.531 853.779 476.511 853.239 475.751 cv
852.679 474.991 851.939 474.611 850.999 474.611 cv
850.039 474.611 849.299 474.991 848.759 475.751 cv
848.199 476.511 847.939 477.531 847.939 478.851 cv
847.939 480.171 848.199 481.211 848.759 481.971 cv
849.299 482.731 850.039 483.091 850.999 483.091 cv
851.939 483.091 852.679 482.731 853.239 481.971 cv
853.779 481.211 854.059 480.171 854.059 478.851 cv
f
863.878 478.811 mo
862.419 478.811 861.419 478.991 860.859 479.311 cv
860.299 479.651 860.018 480.211 860.018 481.011 cv
860.018 481.651 860.219 482.171 860.638 482.531 cv
861.058 482.911 861.638 483.091 862.359 483.091 cv
863.359 483.091 864.159 482.751 864.758 482.031 cv
865.359 481.331 865.659 480.391 865.659 479.211 cv
865.659 478.811 li
863.878 478.811 li
867.458 478.071 mo
867.458 484.311 li
865.659 484.311 li
865.659 482.651 li
865.238 483.331 864.719 483.811 864.118 484.111 cv
863.518 484.411 862.758 484.571 861.878 484.571 cv
860.758 484.571 859.859 484.271 859.198 483.651 cv
858.539 483.031 858.219 482.191 858.219 481.131 cv
858.219 479.911 858.618 478.991 859.458 478.351 cv
860.279 477.731 861.498 477.411 863.138 477.411 cv
865.659 477.411 li
865.659 477.231 li
865.659 476.411 865.378 475.771 864.839 475.311 cv
864.299 474.871 863.539 474.631 862.558 474.631 cv
861.919 474.631 861.318 474.711 860.719 474.871 cv
860.118 475.031 859.558 475.251 859.018 475.531 cv
859.018 473.871 li
859.659 473.631 860.299 473.431 860.919 473.311 cv
861.539 473.191 862.138 473.111 862.738 473.111 cv
864.318 473.111 865.498 473.531 866.279 474.351 cv
867.058 475.171 867.458 476.411 867.458 478.071 cv
f
878.359 478.711 mo
878.359 477.431 878.079 476.411 877.559 475.691 cv
877.019 474.971 876.259 474.611 875.299 474.611 cv
874.339 474.611 873.579 474.971 873.039 475.691 cv
872.499 476.411 872.239 477.431 872.239 478.711 cv
872.239 480.011 872.499 481.011 873.039 481.731 cv
873.579 482.451 874.339 482.811 875.299 482.811 cv
876.259 482.811 877.019 482.451 877.559 481.731 cv
878.079 481.011 878.359 480.011 878.359 478.711 cv
880.159 482.951 mo
880.159 484.791 879.739 486.171 878.919 487.091 cv
878.079 487.991 876.819 488.451 875.119 488.451 cv
874.479 488.451 873.899 488.391 873.339 488.311 cv
872.779 488.211 872.219 488.071 871.699 487.871 cv
871.699 486.131 li
872.219 486.411 872.739 486.611 873.259 486.751 cv
873.779 486.891 874.299 486.971 874.839 486.971 cv
875.999 486.971 876.879 486.651 877.479 486.051 cv
878.059 485.431 878.359 484.511 878.359 483.271 cv
878.359 482.391 li
877.979 483.031 877.499 483.511 876.919 483.831 cv
876.339 484.151 875.659 484.311 874.859 484.311 cv
873.499 484.311 872.419 483.811 871.599 482.791 cv
870.779 481.771 870.379 480.411 870.379 478.711 cv
870.379 477.031 870.779 475.671 871.599 474.651 cv
872.419 473.631 873.499 473.111 874.859 473.111 cv
875.659 473.111 876.339 473.271 876.919 473.591 cv
877.499 473.911 877.979 474.391 878.359 475.031 cv
878.359 473.371 li
880.159 473.371 li
880.159 482.951 li
f
888.839 478.811 mo
887.379 478.811 886.379 478.991 885.819 479.311 cv
885.259 479.651 884.979 480.211 884.979 481.011 cv
884.979 481.651 885.179 482.171 885.599 482.531 cv
886.018 482.911 886.599 483.091 887.319 483.091 cv
888.319 483.091 889.119 482.751 889.719 482.031 cv
890.319 481.331 890.619 480.391 890.619 479.211 cv
890.619 478.811 li
888.839 478.811 li
892.419 478.071 mo
892.419 484.311 li
890.619 484.311 li
890.619 482.651 li
890.198 483.331 889.679 483.811 889.078 484.111 cv
888.479 484.411 887.719 484.571 886.839 484.571 cv
885.719 484.571 884.819 484.271 884.159 483.651 cv
883.499 483.031 883.179 482.191 883.179 481.131 cv
883.179 479.911 883.578 478.991 884.419 478.351 cv
885.239 477.731 886.458 477.411 888.099 477.411 cv
890.619 477.411 li
890.619 477.231 li
890.619 476.411 890.339 475.771 889.799 475.311 cv
889.259 474.871 888.499 474.631 887.518 474.631 cv
886.879 474.631 886.279 474.711 885.679 474.871 cv
885.078 475.031 884.518 475.251 883.979 475.531 cv
883.979 473.871 li
884.619 473.631 885.259 473.431 885.879 473.311 cv
886.499 473.191 887.099 473.111 887.698 473.111 cv
889.279 473.111 890.458 473.531 891.239 474.351 cv
892.018 475.171 892.419 476.411 892.419 478.071 cv
f
897.899 470.271 mo
897.899 473.371 li
901.599 473.371 li
901.599 474.771 li
897.899 474.771 li
897.899 480.711 li
897.899 481.611 898.019 482.191 898.259 482.431 cv
898.499 482.691 898.999 482.811 899.759 482.811 cv
901.599 482.811 li
901.599 484.311 li
899.759 484.311 li
898.359 484.311 897.399 484.051 896.879 483.531 cv
896.359 483.011 896.099 482.071 896.099 480.711 cv
896.099 474.771 li
894.779 474.771 li
894.779 473.371 li
896.099 473.371 li
896.099 470.271 li
897.899 470.271 li
f
903.959 473.371 mo
905.759 473.371 li
905.759 484.311 li
903.959 484.311 li
903.959 473.371 li
903.959 469.111 mo
905.759 469.111 li
905.759 471.391 li
903.959 471.391 li
903.959 469.111 li
f
913.759 474.631 mo
912.799 474.631 912.039 475.011 911.479 475.771 cv
910.919 476.531 910.639 477.551 910.639 478.851 cv
910.639 480.171 910.899 481.191 911.459 481.951 cv
912.019 482.711 912.779 483.071 913.759 483.071 cv
914.719 483.071 915.479 482.711 916.039 481.951 cv
916.599 481.191 916.879 480.171 916.879 478.851 cv
916.879 477.571 916.599 476.531 916.039 475.771 cv
915.479 475.011 914.719 474.631 913.759 474.631 cv
913.759 473.111 mo
915.319 473.111 916.539 473.631 917.439 474.631 cv
918.319 475.651 918.779 477.051 918.779 478.851 cv
918.779 480.651 918.319 482.051 917.439 483.051 cv
916.539 484.071 915.319 484.571 913.759 484.571 cv
912.179 484.571 910.939 484.071 910.059 483.051 cv
909.179 482.051 908.739 480.651 908.739 478.851 cv
908.739 477.051 909.179 475.651 910.059 474.631 cv
910.939 473.631 912.179 473.111 913.759 473.111 cv
f
930.859 477.711 mo
930.859 484.311 li
929.059 484.311 li
929.059 477.771 li
929.059 476.731 928.839 475.971 928.439 475.451 cv
928.039 474.931 927.439 474.671 926.639 474.671 cv
925.659 474.671 924.899 474.991 924.339 475.611 cv
923.779 476.231 923.499 477.071 923.499 478.131 cv
923.499 484.311 li
921.699 484.311 li
921.699 473.371 li
923.499 473.371 li
923.499 475.071 li
923.919 474.431 924.419 473.931 925.019 473.611 cv
925.599 473.291 926.279 473.111 927.039 473.111 cv
928.279 473.111 929.239 473.511 929.879 474.291 cv
930.519 475.071 930.859 476.211 930.859 477.711 cv
f
945.118 469.131 mo
944.238 470.651 943.599 472.131 943.178 473.591 cv
942.738 475.051 942.538 476.531 942.538 478.031 cv
942.538 479.551 942.738 481.031 943.178 482.491 cv
943.599 483.971 944.238 485.431 945.118 486.931 cv
943.558 486.931 li
942.578 485.391 941.839 483.911 941.358 482.431 cv
940.878 480.951 940.638 479.491 940.638 478.031 cv
940.638 476.591 940.878 475.131 941.358 473.651 cv
941.839 472.171 942.558 470.671 943.558 469.131 cv
945.118 469.131 li
f
946.678 469.731 mo
958.999 469.731 li
958.999 471.391 li
953.818 471.391 li
953.818 484.311 li
951.839 484.311 li
951.839 471.391 li
946.678 471.391 li
946.678 469.731 li
f
970.178 478.391 mo
970.178 479.271 li
961.918 479.271 li
961.998 480.511 962.358 481.471 963.038 482.111 cv
963.698 482.751 964.618 483.071 965.818 483.071 cv
966.498 483.071 967.178 482.991 967.818 482.831 cv
968.458 482.671 969.118 482.411 969.758 482.051 cv
969.758 483.751 li
969.118 484.031 968.458 484.251 967.778 484.371 cv
967.098 484.491 966.398 484.571 965.718 484.571 cv
963.958 484.571 962.578 484.071 961.558 483.071 cv
960.538 482.071 960.038 480.691 960.038 478.951 cv
960.038 477.171 960.518 475.751 961.478 474.691 cv
962.438 473.651 963.758 473.111 965.398 473.111 cv
966.878 473.111 968.038 473.591 968.898 474.531 cv
969.738 475.491 970.178 476.771 970.178 478.391 cv
968.378 477.871 mo
968.358 476.891 968.078 476.111 967.558 475.511 cv
967.018 474.931 966.298 474.631 965.418 474.631 cv
964.418 474.631 963.618 474.931 963.018 475.491 cv
962.418 476.051 962.058 476.851 961.978 477.871 cv
968.378 477.871 li
f
980.099 473.691 mo
980.099 475.391 li
979.578 475.151 979.058 474.951 978.519 474.811 cv
977.958 474.691 977.399 474.611 976.818 474.611 cv
975.919 474.611 975.239 474.751 974.799 475.031 cv
974.359 475.311 974.139 475.711 974.139 476.251 cv
974.139 476.671 974.299 476.991 974.619 477.231 cv
974.938 477.471 975.578 477.711 976.539 477.911 cv
977.159 478.051 li
978.438 478.331 979.339 478.731 979.879 479.211 cv
980.399 479.711 980.678 480.411 980.678 481.291 cv
980.678 482.311 980.279 483.111 979.479 483.691 cv
978.678 484.291 977.558 484.571 976.159 484.571 cv
975.558 484.571 974.958 484.511 974.318 484.411 cv
973.678 484.311 973.019 484.151 972.318 483.911 cv
972.318 482.051 li
972.979 482.411 973.639 482.671 974.279 482.831 cv
974.919 483.011 975.558 483.091 976.198 483.091 cv
977.039 483.091 977.698 482.951 978.159 482.671 cv
978.599 482.391 978.839 481.971 978.839 481.431 cv
978.839 480.951 978.659 480.571 978.339 480.311 cv
978.019 480.051 977.299 479.791 976.178 479.551 cv
975.558 479.411 li
974.438 479.171 973.619 478.811 973.139 478.331 cv
972.639 477.851 972.399 477.191 972.399 476.331 cv
972.399 475.311 972.759 474.511 973.479 473.951 cv
974.198 473.391 975.239 473.111 976.599 473.111 cv
977.259 473.111 977.879 473.171 978.479 473.271 cv
979.058 473.371 979.599 473.511 980.099 473.691 cv
f
985.318 470.271 mo
985.318 473.371 li
989.018 473.371 li
989.018 474.771 li
985.318 474.771 li
985.318 480.711 li
985.318 481.611 985.438 482.191 985.678 482.431 cv
985.918 482.691 986.418 482.811 987.178 482.811 cv
989.018 482.811 li
989.018 484.311 li
987.178 484.311 li
985.778 484.311 984.818 484.051 984.298 483.531 cv
983.778 483.011 983.518 482.071 983.518 480.711 cv
983.518 474.771 li
982.198 474.771 li
982.198 473.371 li
983.518 473.371 li
983.518 470.271 li
985.318 470.271 li
f
991.378 473.371 mo
993.178 473.371 li
993.178 484.311 li
991.378 484.311 li
991.378 473.371 li
991.378 469.111 mo
993.178 469.111 li
993.178 471.391 li
991.378 471.391 li
991.378 469.111 li
f
1006.04 477.711 mo
1006.04 484.311 li
1004.24 484.311 li
1004.24 477.771 li
1004.24 476.731 1004.02 475.971 1003.62 475.451 cv
1003.22 474.931 1002.62 474.671 1001.82 474.671 cv
1000.84 474.671 1000.08 474.991 999.518 475.611 cv
998.958 476.231 998.678 477.071 998.678 478.131 cv
998.678 484.311 li
996.878 484.311 li
996.878 473.371 li
998.678 473.371 li
998.678 475.071 li
999.098 474.431 999.598 473.931 1000.2 473.611 cv
1000.78 473.291 1001.46 473.111 1002.22 473.111 cv
1003.46 473.111 1004.42 473.511 1005.06 474.291 cv
1005.7 475.071 1006.04 476.211 1006.04 477.711 cv
f
1016.82 478.711 mo
1016.82 477.431 1016.54 476.411 1016.02 475.691 cv
1015.48 474.971 1014.72 474.611 1013.76 474.611 cv
1012.8 474.611 1012.04 474.971 1011.5 475.691 cv
1010.96 476.411 1010.7 477.431 1010.7 478.711 cv
1010.7 480.011 1010.96 481.011 1011.5 481.731 cv
1012.04 482.451 1012.8 482.811 1013.76 482.811 cv
1014.72 482.811 1015.48 482.451 1016.02 481.731 cv
1016.54 481.011 1016.82 480.011 1016.82 478.711 cv
1018.62 482.951 mo
1018.62 484.791 1018.2 486.171 1017.38 487.091 cv
1016.54 487.991 1015.28 488.451 1013.58 488.451 cv
1012.94 488.451 1012.36 488.391 1011.8 488.311 cv
1011.24 488.211 1010.68 488.071 1010.16 487.871 cv
1010.16 486.131 li
1010.68 486.411 1011.2 486.611 1011.72 486.751 cv
1012.24 486.891 1012.76 486.971 1013.3 486.971 cv
1014.46 486.971 1015.34 486.651 1015.94 486.051 cv
1016.52 485.431 1016.82 484.511 1016.82 483.271 cv
1016.82 482.391 li
1016.44 483.031 1015.96 483.511 1015.38 483.831 cv
1014.8 484.151 1014.12 484.311 1013.32 484.311 cv
1011.96 484.311 1010.88 483.811 1010.06 482.791 cv
1009.24 481.771 1008.84 480.411 1008.84 478.711 cv
1008.84 477.031 1009.24 475.671 1010.06 474.651 cv
1010.88 473.631 1011.96 473.111 1013.32 473.111 cv
1014.12 473.111 1014.8 473.271 1015.38 473.591 cv
1015.96 473.911 1016.44 474.391 1016.82 475.031 cv
1016.82 473.371 li
1018.62 473.371 li
1018.62 482.951 li
f
1022.78 481.831 mo
1024.84 481.831 li
1024.84 483.511 li
1023.24 486.611 li
1021.98 486.611 li
1022.78 483.511 li
1022.78 481.831 li
f
1043.86 470.211 mo
1043.86 472.131 li
1043.1 471.771 1042.4 471.511 1041.74 471.331 cv
1041.06 471.171 1040.42 471.071 1039.82 471.071 cv
1038.74 471.071 1037.9 471.291 1037.32 471.691 cv
1036.74 472.111 1036.46 472.711 1036.46 473.471 cv
1036.46 474.111 1036.64 474.611 1037.04 474.931 cv
1037.42 475.271 1038.16 475.531 1039.24 475.731 cv
1040.44 475.971 li
1041.9 476.251 1042.98 476.751 1043.68 477.451 cv
1044.38 478.171 1044.74 479.111 1044.74 480.291 cv
1044.74 481.711 1044.26 482.771 1043.32 483.491 cv
1042.36 484.211 1040.98 484.571 1039.16 484.571 cv
1038.46 484.571 1037.72 484.491 1036.94 484.351 cv
1036.16 484.211 1035.36 483.991 1034.54 483.671 cv
1034.54 481.631 li
1035.34 482.091 1036.12 482.431 1036.88 482.651 cv
1037.64 482.891 1038.4 482.991 1039.16 482.991 cv
1040.28 482.991 1041.14 482.771 1041.76 482.331 cv
1042.36 481.891 1042.68 481.271 1042.68 480.431 cv
1042.68 479.711 1042.46 479.151 1042.02 478.751 cv
1041.58 478.351 1040.86 478.051 1039.86 477.851 cv
1038.66 477.611 li
1037.18 477.331 1036.12 476.871 1035.46 476.231 cv
1034.8 475.611 1034.48 474.751 1034.48 473.631 cv
1034.48 472.351 1034.92 471.331 1035.84 470.591 cv
1036.74 469.851 1038 469.471 1039.6 469.471 cv
1040.28 469.471 1040.96 469.531 1041.68 469.651 cv
1042.38 469.771 1043.1 469.971 1043.86 470.211 cv
f
1047.74 473.371 mo
1049.54 473.371 li
1049.54 484.311 li
1047.74 484.311 li
1047.74 473.371 li
1047.74 469.111 mo
1049.54 469.111 li
1049.54 471.391 li
1047.74 471.391 li
1047.74 469.111 li
f
1060.5 478.711 mo
1060.5 477.431 1060.22 476.411 1059.7 475.691 cv
1059.16 474.971 1058.4 474.611 1057.44 474.611 cv
1056.48 474.611 1055.72 474.971 1055.18 475.691 cv
1054.64 476.411 1054.38 477.431 1054.38 478.711 cv
1054.38 480.011 1054.64 481.011 1055.18 481.731 cv
1055.72 482.451 1056.48 482.811 1057.44 482.811 cv
1058.4 482.811 1059.16 482.451 1059.7 481.731 cv
1060.22 481.011 1060.5 480.011 1060.5 478.711 cv
1062.3 482.951 mo
1062.3 484.791 1061.88 486.171 1061.06 487.091 cv
1060.22 487.991 1058.96 488.451 1057.26 488.451 cv
1056.62 488.451 1056.04 488.391 1055.48 488.311 cv
1054.92 488.211 1054.36 488.071 1053.84 487.871 cv
1053.84 486.131 li
1054.36 486.411 1054.88 486.611 1055.4 486.751 cv
1055.92 486.891 1056.44 486.971 1056.98 486.971 cv
1058.14 486.971 1059.02 486.651 1059.62 486.051 cv
1060.2 485.431 1060.5 484.511 1060.5 483.271 cv
1060.5 482.391 li
1060.12 483.031 1059.64 483.511 1059.06 483.831 cv
1058.48 484.151 1057.8 484.311 1057 484.311 cv
1055.64 484.311 1054.56 483.811 1053.74 482.791 cv
1052.92 481.771 1052.52 480.411 1052.52 478.711 cv
1052.52 477.031 1052.92 475.671 1053.74 474.651 cv
1054.56 473.631 1055.64 473.111 1057 473.111 cv
1057.8 473.111 1058.48 473.271 1059.06 473.591 cv
1059.64 473.911 1060.12 474.391 1060.5 475.031 cv
1060.5 473.371 li
1062.3 473.371 li
1062.3 482.951 li
f
1074.52 475.471 mo
1074.96 474.671 1075.5 474.091 1076.12 473.691 cv
1076.74 473.311 1077.48 473.111 1078.34 473.111 cv
1079.46 473.111 1080.34 473.511 1080.96 474.311 cv
1081.58 475.111 1081.9 476.251 1081.9 477.711 cv
1081.9 484.311 li
1080.1 484.311 li
1080.1 477.771 li
1080.1 476.731 1079.9 475.951 1079.54 475.431 cv
1079.16 474.931 1078.6 474.671 1077.84 474.671 cv
1076.9 474.671 1076.16 474.991 1075.62 475.611 cv
1075.08 476.231 1074.82 477.071 1074.82 478.131 cv
1074.82 484.311 li
1073.02 484.311 li
1073.02 477.771 li
1073.02 476.731 1072.82 475.951 1072.46 475.431 cv
1072.08 474.931 1071.5 474.671 1070.74 474.671 cv
1069.82 474.671 1069.08 474.991 1068.54 475.611 cv
1068 476.231 1067.74 477.071 1067.74 478.131 cv
1067.74 484.311 li
1065.94 484.311 li
1065.94 473.371 li
1067.74 473.371 li
1067.74 475.071 li
1068.14 474.411 1068.64 473.911 1069.22 473.591 cv
1069.78 473.271 1070.46 473.111 1071.26 473.111 cv
1072.06 473.111 1072.72 473.311 1073.28 473.711 cv
1073.84 474.111 1074.24 474.711 1074.52 475.471 cv
f
1089.72 474.631 mo
1088.76 474.631 1088 475.011 1087.44 475.771 cv
1086.88 476.531 1086.6 477.551 1086.6 478.851 cv
1086.6 480.171 1086.86 481.191 1087.42 481.951 cv
1087.98 482.711 1088.74 483.071 1089.72 483.071 cv
1090.68 483.071 1091.44 482.711 1092 481.951 cv
1092.56 481.191 1092.84 480.171 1092.84 478.851 cv
1092.84 477.571 1092.56 476.531 1092 475.771 cv
1091.44 475.011 1090.68 474.631 1089.72 474.631 cv
1089.72 473.111 mo
1091.28 473.111 1092.5 473.631 1093.4 474.631 cv
1094.28 475.651 1094.74 477.051 1094.74 478.851 cv
1094.74 480.651 1094.28 482.051 1093.4 483.051 cv
1092.5 484.071 1091.28 484.571 1089.72 484.571 cv
1088.14 484.571 1086.9 484.071 1086.02 483.051 cv
1085.14 482.051 1084.7 480.651 1084.7 478.851 cv
1084.7 477.051 1085.14 475.651 1086.02 474.631 cv
1086.9 473.631 1088.14 473.111 1089.72 473.111 cv
f
1097.72 473.371 mo
1099.52 473.371 li
1099.52 484.311 li
1097.72 484.311 li
1097.72 473.371 li
1097.72 469.111 mo
1099.52 469.111 li
1099.52 471.391 li
1097.72 471.391 li
1097.72 469.111 li
f
1110.48 475.031 mo
1110.48 469.111 li
1112.28 469.111 li
1112.28 484.311 li
1110.48 484.311 li
1110.48 482.671 li
1110.1 483.331 1109.62 483.811 1109.04 484.111 cv
1108.46 484.411 1107.78 484.571 1106.98 484.571 cv
1105.66 484.571 1104.58 484.051 1103.74 483.011 cv
1102.9 481.971 1102.5 480.571 1102.5 478.851 cv
1102.5 477.131 1102.9 475.751 1103.74 474.691 cv
1104.58 473.651 1105.66 473.111 1106.98 473.111 cv
1107.78 473.111 1108.46 473.271 1109.04 473.591 cv
1109.62 473.911 1110.1 474.391 1110.48 475.031 cv
1104.36 478.851 mo
1104.36 480.171 1104.62 481.211 1105.16 481.971 cv
1105.7 482.731 1106.46 483.091 1107.42 483.091 cv
1108.36 483.091 1109.1 482.731 1109.66 481.971 cv
1110.2 481.211 1110.48 480.171 1110.48 478.851 cv
1110.48 477.531 1110.2 476.511 1109.66 475.751 cv
1109.1 474.991 1108.36 474.611 1107.42 474.611 cv
1106.46 474.611 1105.7 474.991 1105.16 475.751 cv
1104.62 476.511 1104.36 477.531 1104.36 478.851 cv
f
1115.7 469.131 mo
1117.26 469.131 li
1118.22 470.671 1118.96 472.171 1119.44 473.651 cv
1119.92 475.131 1120.18 476.591 1120.18 478.031 cv
1120.18 479.491 1119.92 480.951 1119.44 482.431 cv
1118.96 483.911 1118.22 485.391 1117.26 486.931 cv
1115.7 486.931 li
1116.56 485.431 1117.2 483.971 1117.64 482.491 cv
1118.06 481.031 1118.28 479.551 1118.28 478.031 cv
1118.28 476.531 1118.06 475.051 1117.64 473.591 cv
1117.2 472.131 1116.56 470.651 1115.7 469.131 cv
f
1.5 lw
2 lc
728.879 505.17 mo
748.879 505.17 li
@
760.819 495.71 mo
760.819 507.05 li
763.199 507.05 li
765.199 507.05 766.679 506.61 767.619 505.69 cv
768.539 504.77 769.019 503.33 769.019 501.37 cv
769.019 499.41 768.539 497.99 767.619 497.07 cv
766.679 496.17 765.199 495.71 763.199 495.71 cv
760.819 495.71 li
758.839 494.09 mo
762.899 494.09 li
765.719 494.09 767.799 494.69 769.119 495.85 cv
770.439 497.03 771.099 498.87 771.099 501.37 cv
771.099 503.89 770.419 505.73 769.099 506.91 cv
767.779 508.09 765.699 508.67 762.899 508.67 cv
758.839 508.67 li
758.839 494.09 li
f
776.219 501.71 mo
776.219 507.05 li
779.379 507.05 li
780.439 507.05 781.219 506.83 781.739 506.39 cv
782.239 505.95 782.499 505.29 782.499 504.37 cv
782.499 503.47 782.239 502.81 781.739 502.37 cv
781.219 501.93 780.439 501.71 779.379 501.71 cv
776.219 501.71 li
776.219 495.71 mo
776.219 500.11 li
779.139 500.11 li
780.099 500.11 780.799 499.93 781.279 499.57 cv
781.759 499.21 781.999 498.67 781.999 497.91 cv
781.999 497.19 781.759 496.63 781.279 496.27 cv
780.799 495.91 780.099 495.71 779.139 495.71 cv
776.219 495.71 li
774.239 494.09 mo
779.279 494.09 li
780.779 494.09 781.939 494.41 782.759 495.03 cv
783.559 495.67 783.979 496.55 783.979 497.69 cv
783.979 498.59 783.759 499.31 783.339 499.83 cv
782.919 500.35 782.319 500.69 781.519 500.81 cv
782.479 501.03 783.239 501.47 783.779 502.13 cv
784.299 502.79 784.579 503.61 784.579 504.59 cv
784.579 505.91 784.119 506.91 783.239 507.61 cv
782.359 508.33 781.099 508.67 779.479 508.67 cv
774.239 508.67 li
774.239 494.09 li
f
787.959 494.09 mo
790.619 494.09 li
797.079 506.29 li
797.079 494.09 li
798.999 494.09 li
798.999 508.67 li
796.339 508.67 li
789.879 496.47 li
789.879 508.67 li
787.959 508.67 li
787.959 494.09 li
f
813.519 493.49 mo
812.639 495.01 811.999 496.49 811.579 497.95 cv
811.139 499.41 810.939 500.89 810.939 502.39 cv
810.939 503.91 811.139 505.39 811.579 506.85 cv
811.999 508.33 812.639 509.79 813.519 511.29 cv
811.959 511.29 li
810.979 509.75 810.239 508.27 809.759 506.79 cv
809.279 505.31 809.039 503.85 809.039 502.39 cv
809.039 500.95 809.279 499.49 809.759 498.01 cv
810.239 496.53 810.959 495.03 811.959 493.49 cv
813.519 493.49 li
f
815.079 494.09 mo
827.399 494.09 li
827.399 495.75 li
822.219 495.75 li
822.219 508.67 li
820.239 508.67 li
820.239 495.75 li
815.079 495.75 li
815.079 494.09 li
f
835.559 499.41 mo
835.359 499.29 835.139 499.21 834.899 499.15 cv
834.659 499.11 834.399 499.07 834.119 499.07 cv
833.099 499.07 832.319 499.41 831.779 500.07 cv
831.219 500.73 830.959 501.67 830.959 502.91 cv
830.959 508.67 li
829.159 508.67 li
829.159 497.73 li
830.959 497.73 li
830.959 499.43 li
831.319 498.77 831.819 498.27 832.419 497.95 cv
833.019 497.63 833.759 497.47 834.639 497.47 cv
834.759 497.47 834.899 497.49 835.059 497.49 cv
835.199 497.51 835.359 497.53 835.559 497.57 cv
835.559 499.41 li
f
842.419 503.17 mo
840.959 503.17 839.959 503.35 839.399 503.67 cv
838.839 504.01 838.559 504.57 838.559 505.37 cv
838.559 506.01 838.759 506.53 839.179 506.89 cv
839.599 507.27 840.179 507.45 840.899 507.45 cv
841.899 507.45 842.699 507.11 843.299 506.39 cv
843.899 505.69 844.199 504.75 844.199 503.57 cv
844.199 503.17 li
842.419 503.17 li
845.999 502.43 mo
845.999 508.67 li
844.199 508.67 li
844.199 507.01 li
843.779 507.69 843.259 508.17 842.659 508.47 cv
842.059 508.77 841.299 508.93 840.419 508.93 cv
839.299 508.93 838.399 508.63 837.739 508.01 cv
837.079 507.39 836.759 506.55 836.759 505.49 cv
836.759 504.27 837.159 503.35 837.999 502.71 cv
838.819 502.09 840.039 501.77 841.679 501.77 cv
844.199 501.77 li
844.199 501.59 li
844.199 500.77 843.919 500.13 843.379 499.67 cv
842.839 499.23 842.079 498.99 841.099 498.99 cv
840.459 498.99 839.859 499.07 839.259 499.23 cv
838.659 499.39 838.099 499.61 837.559 499.89 cv
837.559 498.23 li
838.199 497.99 838.839 497.79 839.459 497.67 cv
840.079 497.55 840.679 497.47 841.279 497.47 cv
842.859 497.47 844.039 497.89 844.819 498.71 cv
845.599 499.53 845.999 500.77 845.999 502.43 cv
f
849.699 497.73 mo
851.499 497.73 li
851.499 508.67 li
849.699 508.67 li
849.699 497.73 li
849.699 493.47 mo
851.499 493.47 li
851.499 495.75 li
849.699 495.75 li
849.699 493.47 li
f
864.359 502.07 mo
864.359 508.67 li
862.559 508.67 li
862.559 502.13 li
862.559 501.09 862.339 500.33 861.939 499.81 cv
861.539 499.29 860.939 499.03 860.139 499.03 cv
859.159 499.03 858.399 499.35 857.839 499.97 cv
857.279 500.59 856.999 501.43 856.999 502.49 cv
856.999 508.67 li
855.199 508.67 li
855.199 497.73 li
856.999 497.73 li
856.999 499.43 li
857.419 498.79 857.919 498.29 858.519 497.97 cv
859.099 497.65 859.779 497.47 860.539 497.47 cv
861.779 497.47 862.739 497.87 863.379 498.65 cv
864.019 499.43 864.359 500.57 864.359 502.07 cv
f
867.939 497.73 mo
869.739 497.73 li
869.739 508.67 li
867.939 508.67 li
867.939 497.73 li
867.939 493.47 mo
869.739 493.47 li
869.739 495.75 li
867.939 495.75 li
867.939 493.47 li
f
882.599 502.07 mo
882.599 508.67 li
880.799 508.67 li
880.799 502.13 li
880.799 501.09 880.579 500.33 880.179 499.81 cv
879.779 499.29 879.179 499.03 878.379 499.03 cv
877.399 499.03 876.639 499.35 876.079 499.97 cv
875.519 500.59 875.239 501.43 875.239 502.49 cv
875.239 508.67 li
873.439 508.67 li
873.439 497.73 li
875.239 497.73 li
875.239 499.43 li
875.659 498.79 876.159 498.29 876.759 497.97 cv
877.339 497.65 878.019 497.47 878.779 497.47 cv
880.019 497.47 880.979 497.87 881.619 498.65 cv
882.259 499.43 882.599 500.57 882.599 502.07 cv
f
893.379 503.07 mo
893.379 501.79 893.099 500.77 892.579 500.05 cv
892.039 499.33 891.279 498.97 890.319 498.97 cv
889.359 498.97 888.599 499.33 888.059 500.05 cv
887.519 500.77 887.259 501.79 887.259 503.07 cv
887.259 504.37 887.519 505.37 888.059 506.09 cv
888.599 506.81 889.359 507.17 890.319 507.17 cv
891.279 507.17 892.039 506.81 892.579 506.09 cv
893.099 505.37 893.379 504.37 893.379 503.07 cv
895.179 507.31 mo
895.179 509.15 894.759 510.53 893.939 511.45 cv
893.099 512.35 891.839 512.81 890.139 512.81 cv
889.499 512.81 888.919 512.75 888.359 512.67 cv
887.799 512.57 887.239 512.43 886.719 512.23 cv
886.719 510.49 li
887.239 510.77 887.759 510.97 888.279 511.11 cv
888.799 511.25 889.319 511.33 889.859 511.33 cv
891.019 511.33 891.899 511.01 892.499 510.41 cv
893.079 509.79 893.379 508.87 893.379 507.63 cv
893.379 506.75 li
892.999 507.39 892.519 507.87 891.939 508.19 cv
891.359 508.51 890.679 508.67 889.879 508.67 cv
888.519 508.67 887.439 508.17 886.619 507.15 cv
885.799 506.13 885.399 504.77 885.399 503.07 cv
885.399 501.39 885.799 500.03 886.619 499.01 cv
887.439 497.99 888.519 497.47 889.879 497.47 cv
890.679 497.47 891.359 497.63 891.939 497.95 cv
892.519 498.27 892.999 498.75 893.379 499.39 cv
893.379 497.73 li
895.179 497.73 li
895.179 507.31 li
f
899.339 506.19 mo
901.399 506.19 li
901.399 507.87 li
899.799 510.97 li
898.539 510.97 li
899.339 507.87 li
899.339 506.19 li
f
920.418 494.57 mo
920.418 496.49 li
919.658 496.13 918.958 495.87 918.298 495.69 cv
917.618 495.53 916.978 495.43 916.378 495.43 cv
915.298 495.43 914.458 495.65 913.878 496.05 cv
913.298 496.47 913.018 497.07 913.018 497.83 cv
913.018 498.47 913.198 498.97 913.598 499.29 cv
913.978 499.63 914.718 499.89 915.798 500.09 cv
916.998 500.33 li
918.458 500.61 919.538 501.11 920.238 501.81 cv
920.938 502.53 921.298 503.47 921.298 504.65 cv
921.298 506.07 920.818 507.13 919.878 507.85 cv
918.918 508.57 917.538 508.93 915.718 508.93 cv
915.018 508.93 914.278 508.85 913.498 508.71 cv
912.718 508.57 911.918 508.35 911.098 508.03 cv
911.098 505.99 li
911.898 506.45 912.678 506.79 913.438 507.01 cv
914.198 507.25 914.958 507.35 915.718 507.35 cv
916.838 507.35 917.698 507.13 918.318 506.69 cv
918.918 506.25 919.238 505.63 919.238 504.79 cv
919.238 504.07 919.018 503.51 918.578 503.11 cv
918.138 502.71 917.418 502.41 916.418 502.21 cv
915.218 501.97 li
913.738 501.69 912.678 501.23 912.018 500.59 cv
911.358 499.97 911.038 499.11 911.038 497.99 cv
911.038 496.71 911.478 495.69 912.398 494.95 cv
913.298 494.21 914.558 493.83 916.158 493.83 cv
916.838 493.83 917.518 493.89 918.238 494.01 cv
918.938 494.13 919.658 494.33 920.418 494.57 cv
f
924.298 497.73 mo
926.098 497.73 li
926.098 508.67 li
924.298 508.67 li
924.298 497.73 li
924.298 493.47 mo
926.098 493.47 li
926.098 495.75 li
924.298 495.75 li
924.298 493.47 li
f
937.058 503.07 mo
937.058 501.79 936.778 500.77 936.258 500.05 cv
935.718 499.33 934.958 498.97 933.998 498.97 cv
933.038 498.97 932.278 499.33 931.738 500.05 cv
931.198 500.77 930.938 501.79 930.938 503.07 cv
930.938 504.37 931.198 505.37 931.738 506.09 cv
932.278 506.81 933.038 507.17 933.998 507.17 cv
934.958 507.17 935.718 506.81 936.258 506.09 cv
936.778 505.37 937.058 504.37 937.058 503.07 cv
938.858 507.31 mo
938.858 509.15 938.438 510.53 937.618 511.45 cv
936.778 512.35 935.518 512.81 933.818 512.81 cv
933.178 512.81 932.598 512.75 932.038 512.67 cv
931.478 512.57 930.918 512.43 930.398 512.23 cv
930.398 510.49 li
930.918 510.77 931.438 510.97 931.958 511.11 cv
932.478 511.25 932.998 511.33 933.538 511.33 cv
934.698 511.33 935.578 511.01 936.178 510.41 cv
936.758 509.79 937.058 508.87 937.058 507.63 cv
937.058 506.75 li
936.678 507.39 936.198 507.87 935.618 508.19 cv
935.038 508.51 934.358 508.67 933.558 508.67 cv
932.198 508.67 931.118 508.17 930.298 507.15 cv
929.478 506.13 929.078 504.77 929.078 503.07 cv
929.078 501.39 929.478 500.03 930.298 499.01 cv
931.118 497.99 932.198 497.47 933.558 497.47 cv
934.358 497.47 935.038 497.63 935.618 497.95 cv
936.198 498.27 936.678 498.75 937.058 499.39 cv
937.058 497.73 li
938.858 497.73 li
938.858 507.31 li
f
951.078 499.83 mo
951.518 499.03 952.058 498.45 952.678 498.05 cv
953.298 497.67 954.038 497.47 954.898 497.47 cv
956.018 497.47 956.898 497.87 957.518 498.67 cv
958.138 499.47 958.458 500.61 958.458 502.07 cv
958.458 508.67 li
956.658 508.67 li
956.658 502.13 li
956.658 501.09 956.458 500.31 956.098 499.79 cv
955.718 499.29 955.158 499.03 954.398 499.03 cv
953.458 499.03 952.718 499.35 952.178 499.97 cv
951.638 500.59 951.378 501.43 951.378 502.49 cv
951.378 508.67 li
949.578 508.67 li
949.578 502.13 li
949.578 501.09 949.378 500.31 949.018 499.79 cv
948.638 499.29 948.058 499.03 947.298 499.03 cv
946.378 499.03 945.638 499.35 945.098 499.97 cv
944.558 500.59 944.298 501.43 944.298 502.49 cv
944.298 508.67 li
942.498 508.67 li
942.498 497.73 li
944.298 497.73 li
944.298 499.43 li
944.698 498.77 945.198 498.27 945.778 497.95 cv
946.338 497.63 947.018 497.47 947.818 497.47 cv
948.618 497.47 949.278 497.67 949.838 498.07 cv
950.398 498.47 950.798 499.07 951.078 499.83 cv
f
966.278 498.99 mo
965.318 498.99 964.558 499.37 963.998 500.13 cv
963.438 500.89 963.158 501.91 963.158 503.21 cv
963.158 504.53 963.418 505.55 963.978 506.31 cv
964.538 507.07 965.298 507.43 966.278 507.43 cv
967.238 507.43 967.998 507.07 968.558 506.31 cv
969.118 505.55 969.398 504.53 969.398 503.21 cv
969.398 501.93 969.118 500.89 968.558 500.13 cv
967.998 499.37 967.238 498.99 966.278 498.99 cv
966.278 497.47 mo
967.838 497.47 969.058 497.99 969.958 498.99 cv
970.838 500.01 971.298 501.41 971.298 503.21 cv
971.298 505.01 970.838 506.41 969.958 507.41 cv
969.058 508.43 967.838 508.93 966.278 508.93 cv
964.698 508.93 963.458 508.43 962.578 507.41 cv
961.698 506.41 961.258 505.01 961.258 503.21 cv
961.258 501.41 961.698 500.01 962.578 498.99 cv
963.458 497.99 964.698 497.47 966.278 497.47 cv
f
974.278 497.73 mo
976.078 497.73 li
976.078 508.67 li
974.278 508.67 li
974.278 497.73 li
974.278 493.47 mo
976.078 493.47 li
976.078 495.75 li
974.278 495.75 li
974.278 493.47 li
f
987.038 499.39 mo
987.038 493.47 li
988.838 493.47 li
988.838 508.67 li
987.038 508.67 li
987.038 507.03 li
986.658 507.69 986.178 508.17 985.598 508.47 cv
985.018 508.77 984.338 508.93 983.538 508.93 cv
982.218 508.93 981.138 508.41 980.298 507.37 cv
979.458 506.33 979.058 504.93 979.058 503.21 cv
979.058 501.49 979.458 500.11 980.298 499.05 cv
981.138 498.01 982.218 497.47 983.538 497.47 cv
984.338 497.47 985.018 497.63 985.598 497.95 cv
986.178 498.27 986.658 498.75 987.038 499.39 cv
980.918 503.21 mo
980.918 504.53 981.178 505.57 981.718 506.33 cv
982.258 507.09 983.018 507.45 983.978 507.45 cv
984.918 507.45 985.658 507.09 986.218 506.33 cv
986.758 505.57 987.038 504.53 987.038 503.21 cv
987.038 501.89 986.758 500.87 986.218 500.11 cv
985.658 499.35 984.918 498.97 983.978 498.97 cv
983.018 498.97 982.258 499.35 981.718 500.11 cv
981.178 500.87 980.918 501.89 980.918 503.21 cv
f
992.258 493.49 mo
993.818 493.49 li
994.778 495.03 995.518 496.53 995.998 498.01 cv
996.478 499.49 996.738 500.95 996.738 502.39 cv
996.738 503.85 996.478 505.31 995.998 506.79 cv
995.518 508.27 994.778 509.75 993.818 511.29 cv
992.258 511.29 li
993.118 509.79 993.758 508.33 994.198 506.85 cv
994.618 505.39 994.838 503.91 994.838 502.39 cv
994.838 500.89 994.618 499.41 994.198 497.95 cv
993.758 496.49 993.118 495.01 992.258 493.49 cv
f
728.879 529.529 mo
748.879 529.529 li
@
735.879 532.529 mo
741.879 526.529 li
735.879 526.529 mo
741.879 532.529 li
f
1 lw
0 lc
735.879 532.529 mo
741.879 526.529 li
735.879 526.529 mo
741.879 532.529 li
@
760.819 520.069 mo
760.819 531.409 li
763.199 531.409 li
765.199 531.409 766.679 530.969 767.619 530.049 cv
768.539 529.129 769.019 527.689 769.019 525.729 cv
769.019 523.769 768.539 522.349 767.619 521.429 cv
766.679 520.529 765.199 520.069 763.199 520.069 cv
760.819 520.069 li
758.839 518.449 mo
762.899 518.449 li
765.719 518.449 767.799 519.049 769.119 520.209 cv
770.439 521.389 771.099 523.229 771.099 525.729 cv
771.099 528.249 770.419 530.089 769.099 531.269 cv
767.779 532.449 765.699 533.029 762.899 533.029 cv
758.839 533.029 li
758.839 518.449 li
f
776.219 526.069 mo
776.219 531.409 li
779.379 531.409 li
780.439 531.409 781.219 531.189 781.739 530.749 cv
782.239 530.309 782.499 529.649 782.499 528.729 cv
782.499 527.829 782.239 527.169 781.739 526.729 cv
781.219 526.289 780.439 526.069 779.379 526.069 cv
776.219 526.069 li
776.219 520.069 mo
776.219 524.469 li
779.139 524.469 li
780.099 524.469 780.799 524.289 781.279 523.929 cv
781.759 523.569 781.999 523.029 781.999 522.269 cv
781.999 521.549 781.759 520.989 781.279 520.629 cv
780.799 520.269 780.099 520.069 779.139 520.069 cv
776.219 520.069 li
774.239 518.449 mo
779.279 518.449 li
780.779 518.449 781.939 518.769 782.759 519.389 cv
783.559 520.029 783.979 520.909 783.979 522.049 cv
783.979 522.949 783.759 523.669 783.339 524.189 cv
782.919 524.709 782.319 525.049 781.519 525.169 cv
782.479 525.389 783.239 525.829 783.779 526.489 cv
784.299 527.149 784.579 527.969 784.579 528.949 cv
784.579 530.269 784.119 531.269 783.239 531.969 cv
782.359 532.689 781.099 533.029 779.479 533.029 cv
774.239 533.029 li
774.239 518.449 li
f
787.959 518.449 mo
790.619 518.449 li
797.079 530.649 li
797.079 518.449 li
798.999 518.449 li
798.999 533.029 li
796.339 533.029 li
789.879 520.829 li
789.879 533.029 li
787.959 533.029 li
787.959 518.449 li
f
813.519 517.849 mo
812.639 519.369 811.999 520.849 811.579 522.309 cv
811.139 523.769 810.939 525.249 810.939 526.749 cv
810.939 528.269 811.139 529.749 811.579 531.209 cv
811.999 532.689 812.639 534.149 813.519 535.649 cv
811.959 535.649 li
810.979 534.109 810.239 532.629 809.759 531.149 cv
809.279 529.669 809.039 528.209 809.039 526.749 cv
809.039 525.309 809.279 523.849 809.759 522.369 cv
810.239 520.889 810.959 519.389 811.959 517.849 cv
813.519 517.849 li
f
815.079 518.449 mo
827.399 518.449 li
827.399 520.109 li
822.219 520.109 li
822.219 533.029 li
820.239 533.029 li
820.239 520.109 li
815.079 520.109 li
815.079 518.449 li
f
838.579 527.109 mo
838.579 527.989 li
830.319 527.989 li
830.399 529.229 830.759 530.189 831.439 530.829 cv
832.099 531.469 833.019 531.789 834.219 531.789 cv
834.899 531.789 835.579 531.709 836.219 531.549 cv
836.859 531.389 837.519 531.129 838.159 530.769 cv
838.159 532.469 li
837.519 532.749 836.859 532.969 836.179 533.089 cv
835.499 533.209 834.799 533.289 834.119 533.289 cv
832.359 533.289 830.979 532.789 829.959 531.789 cv
828.939 530.789 828.439 529.409 828.439 527.669 cv
828.439 525.889 828.919 524.469 829.879 523.409 cv
830.839 522.369 832.159 521.829 833.799 521.829 cv
835.279 521.829 836.439 522.309 837.299 523.249 cv
838.139 524.209 838.579 525.489 838.579 527.109 cv
836.779 526.589 mo
836.759 525.609 836.479 524.829 835.959 524.229 cv
835.419 523.649 834.699 523.349 833.819 523.349 cv
832.819 523.349 832.019 523.649 831.419 524.209 cv
830.819 524.769 830.459 525.569 830.379 526.589 cv
836.779 526.589 li
f
848.499 522.409 mo
848.499 524.109 li
847.979 523.869 847.459 523.669 846.919 523.529 cv
846.359 523.409 845.799 523.329 845.219 523.329 cv
844.319 523.329 843.639 523.469 843.199 523.749 cv
842.759 524.029 842.539 524.429 842.539 524.969 cv
842.539 525.389 842.699 525.709 843.019 525.949 cv
843.339 526.189 843.979 526.429 844.939 526.629 cv
845.559 526.769 li
846.839 527.049 847.739 527.449 848.279 527.929 cv
848.799 528.429 849.079 529.129 849.079 530.009 cv
849.079 531.029 848.679 531.829 847.879 532.409 cv
847.079 533.009 845.959 533.289 844.559 533.289 cv
843.959 533.289 843.359 533.229 842.719 533.129 cv
842.079 533.029 841.419 532.869 840.719 532.629 cv
840.719 530.769 li
841.379 531.129 842.039 531.389 842.679 531.549 cv
843.319 531.729 843.959 531.809 844.599 531.809 cv
845.439 531.809 846.099 531.669 846.559 531.389 cv
846.999 531.109 847.239 530.689 847.239 530.149 cv
847.239 529.669 847.059 529.289 846.739 529.029 cv
846.419 528.769 845.699 528.509 844.579 528.269 cv
843.959 528.129 li
842.839 527.889 842.019 527.529 841.539 527.049 cv
841.039 526.569 840.799 525.909 840.799 525.049 cv
840.799 524.029 841.159 523.229 841.879 522.669 cv
842.599 522.109 843.639 521.829 844.999 521.829 cv
845.659 521.829 846.279 521.889 846.879 521.989 cv
847.459 522.089 847.999 522.229 848.499 522.409 cv
f
853.719 518.989 mo
853.719 522.089 li
857.419 522.089 li
857.419 523.489 li
853.719 523.489 li
853.719 529.429 li
853.719 530.329 853.839 530.909 854.079 531.149 cv
854.319 531.409 854.819 531.529 855.579 531.529 cv
857.419 531.529 li
857.419 533.029 li
855.579 533.029 li
854.179 533.029 853.219 532.769 852.699 532.249 cv
852.179 531.729 851.919 530.789 851.919 529.429 cv
851.919 523.489 li
850.599 523.489 li
850.599 522.089 li
851.919 522.089 li
851.919 518.989 li
853.719 518.989 li
f
859.779 522.089 mo
861.579 522.089 li
861.579 533.029 li
859.779 533.029 li
859.779 522.089 li
859.779 517.829 mo
861.579 517.829 li
861.579 520.109 li
859.779 520.109 li
859.779 517.829 li
f
874.439 526.429 mo
874.439 533.029 li
872.639 533.029 li
872.639 526.489 li
872.639 525.449 872.419 524.689 872.019 524.169 cv
871.619 523.649 871.019 523.389 870.219 523.389 cv
869.239 523.389 868.479 523.709 867.919 524.329 cv
867.359 524.949 867.079 525.789 867.079 526.849 cv
867.079 533.029 li
865.279 533.029 li
865.279 522.089 li
867.079 522.089 li
867.079 523.789 li
867.499 523.149 867.999 522.649 868.599 522.329 cv
869.179 522.009 869.859 521.829 870.619 521.829 cv
871.859 521.829 872.819 522.229 873.459 523.009 cv
874.099 523.789 874.439 524.929 874.439 526.429 cv
f
885.219 527.429 mo
885.219 526.149 884.939 525.129 884.419 524.409 cv
883.879 523.689 883.119 523.329 882.159 523.329 cv
881.199 523.329 880.439 523.689 879.899 524.409 cv
879.359 525.129 879.099 526.149 879.099 527.429 cv
879.099 528.729 879.359 529.729 879.899 530.449 cv
880.439 531.169 881.199 531.529 882.159 531.529 cv
883.119 531.529 883.879 531.169 884.419 530.449 cv
884.939 529.729 885.219 528.729 885.219 527.429 cv
887.019 531.669 mo
887.019 533.509 886.599 534.889 885.779 535.809 cv
884.939 536.709 883.679 537.169 881.979 537.169 cv
881.339 537.169 880.759 537.109 880.199 537.029 cv
879.639 536.929 879.079 536.789 878.559 536.589 cv
878.559 534.849 li
879.079 535.129 879.599 535.329 880.119 535.469 cv
880.639 535.609 881.159 535.689 881.699 535.689 cv
882.859 535.689 883.739 535.369 884.339 534.769 cv
884.919 534.149 885.219 533.229 885.219 531.989 cv
885.219 531.109 li
884.839 531.749 884.359 532.229 883.779 532.549 cv
883.199 532.869 882.519 533.029 881.719 533.029 cv
880.359 533.029 879.279 532.529 878.459 531.509 cv
877.639 530.489 877.239 529.129 877.239 527.429 cv
877.239 525.749 877.639 524.389 878.459 523.369 cv
879.279 522.349 880.359 521.829 881.719 521.829 cv
882.519 521.829 883.199 521.989 883.779 522.309 cv
884.359 522.629 884.839 523.109 885.219 523.749 cv
885.219 522.089 li
887.019 522.089 li
887.019 531.669 li
f
891.179 530.549 mo
893.239 530.549 li
893.239 532.229 li
891.639 535.329 li
890.379 535.329 li
891.179 532.229 li
891.179 530.549 li
f
912.258 518.929 mo
912.258 520.849 li
911.498 520.489 910.798 520.229 910.138 520.049 cv
909.458 519.889 908.818 519.789 908.218 519.789 cv
907.138 519.789 906.298 520.009 905.718 520.409 cv
905.138 520.829 904.858 521.429 904.858 522.189 cv
904.858 522.829 905.038 523.329 905.438 523.649 cv
905.818 523.989 906.558 524.249 907.638 524.449 cv
908.838 524.689 li
910.298 524.969 911.378 525.469 912.078 526.169 cv
912.778 526.889 913.138 527.829 913.138 529.009 cv
913.138 530.429 912.658 531.489 911.718 532.209 cv
910.758 532.929 909.378 533.289 907.558 533.289 cv
906.858 533.289 906.118 533.209 905.338 533.069 cv
904.558 532.929 903.758 532.709 902.938 532.389 cv
902.938 530.349 li
903.738 530.809 904.518 531.149 905.278 531.369 cv
906.038 531.609 906.798 531.709 907.558 531.709 cv
908.678 531.709 909.538 531.489 910.158 531.049 cv
910.758 530.609 911.078 529.989 911.078 529.149 cv
911.078 528.429 910.858 527.869 910.418 527.469 cv
909.978 527.069 909.258 526.769 908.258 526.569 cv
907.058 526.329 li
905.578 526.049 904.518 525.589 903.858 524.949 cv
903.198 524.329 902.878 523.469 902.878 522.349 cv
902.878 521.069 903.318 520.049 904.238 519.309 cv
905.138 518.569 906.398 518.189 907.998 518.189 cv
908.678 518.189 909.358 518.249 910.078 518.369 cv
910.778 518.489 911.498 518.689 912.258 518.929 cv
f
916.138 522.089 mo
917.938 522.089 li
917.938 533.029 li
916.138 533.029 li
916.138 522.089 li
916.138 517.829 mo
917.938 517.829 li
917.938 520.109 li
916.138 520.109 li
916.138 517.829 li
f
928.898 527.429 mo
928.898 526.149 928.618 525.129 928.098 524.409 cv
927.558 523.689 926.798 523.329 925.838 523.329 cv
924.878 523.329 924.118 523.689 923.578 524.409 cv
923.038 525.129 922.778 526.149 922.778 527.429 cv
922.778 528.729 923.038 529.729 923.578 530.449 cv
924.118 531.169 924.878 531.529 925.838 531.529 cv
926.798 531.529 927.558 531.169 928.098 530.449 cv
928.618 529.729 928.898 528.729 928.898 527.429 cv
930.698 531.669 mo
930.698 533.509 930.278 534.889 929.458 535.809 cv
928.618 536.709 927.358 537.169 925.658 537.169 cv
925.018 537.169 924.438 537.109 923.878 537.029 cv
923.318 536.929 922.758 536.789 922.238 536.589 cv
922.238 534.849 li
922.758 535.129 923.278 535.329 923.798 535.469 cv
924.318 535.609 924.838 535.689 925.378 535.689 cv
926.538 535.689 927.418 535.369 928.018 534.769 cv
928.598 534.149 928.898 533.229 928.898 531.989 cv
928.898 531.109 li
928.518 531.749 928.038 532.229 927.458 532.549 cv
926.878 532.869 926.198 533.029 925.398 533.029 cv
924.038 533.029 922.958 532.529 922.138 531.509 cv
921.318 530.489 920.918 529.129 920.918 527.429 cv
920.918 525.749 921.318 524.389 922.138 523.369 cv
922.958 522.349 924.038 521.829 925.398 521.829 cv
926.198 521.829 926.878 521.989 927.458 522.309 cv
928.038 522.629 928.518 523.109 928.898 523.749 cv
928.898 522.089 li
930.698 522.089 li
930.698 531.669 li
f
942.918 524.189 mo
943.358 523.389 943.898 522.809 944.518 522.409 cv
945.138 522.029 945.878 521.829 946.738 521.829 cv
947.858 521.829 948.738 522.229 949.358 523.029 cv
949.978 523.829 950.298 524.969 950.298 526.429 cv
950.298 533.029 li
948.498 533.029 li
948.498 526.489 li
948.498 525.449 948.298 524.669 947.938 524.149 cv
947.558 523.649 946.998 523.389 946.238 523.389 cv
945.298 523.389 944.558 523.709 944.018 524.329 cv
943.478 524.949 943.218 525.789 943.218 526.849 cv
943.218 533.029 li
941.418 533.029 li
941.418 526.489 li
941.418 525.449 941.218 524.669 940.858 524.149 cv
940.478 523.649 939.898 523.389 939.138 523.389 cv
938.218 523.389 937.478 523.709 936.938 524.329 cv
936.398 524.949 936.138 525.789 936.138 526.849 cv
936.138 533.029 li
934.338 533.029 li
934.338 522.089 li
936.138 522.089 li
936.138 523.789 li
936.538 523.129 937.038 522.629 937.618 522.309 cv
938.178 521.989 938.858 521.829 939.658 521.829 cv
940.458 521.829 941.118 522.029 941.678 522.429 cv
942.238 522.829 942.638 523.429 942.918 524.189 cv
f
958.118 523.349 mo
957.158 523.349 956.398 523.729 955.838 524.489 cv
955.278 525.249 954.998 526.269 954.998 527.569 cv
954.998 528.889 955.258 529.909 955.818 530.669 cv
956.378 531.429 957.138 531.789 958.118 531.789 cv
959.078 531.789 959.838 531.429 960.398 530.669 cv
960.958 529.909 961.238 528.889 961.238 527.569 cv
961.238 526.289 960.958 525.249 960.398 524.489 cv
959.838 523.729 959.078 523.349 958.118 523.349 cv
958.118 521.829 mo
959.678 521.829 960.898 522.349 961.798 523.349 cv
962.678 524.369 963.138 525.769 963.138 527.569 cv
963.138 529.369 962.678 530.769 961.798 531.769 cv
960.898 532.789 959.678 533.289 958.118 533.289 cv
956.538 533.289 955.298 532.789 954.418 531.769 cv
953.538 530.769 953.098 529.369 953.098 527.569 cv
953.098 525.769 953.538 524.369 954.418 523.349 cv
955.298 522.349 956.538 521.829 958.118 521.829 cv
f
966.118 522.089 mo
967.918 522.089 li
967.918 533.029 li
966.118 533.029 li
966.118 522.089 li
966.118 517.829 mo
967.918 517.829 li
967.918 520.109 li
966.118 520.109 li
966.118 517.829 li
f
978.878 523.749 mo
978.878 517.829 li
980.678 517.829 li
980.678 533.029 li
978.878 533.029 li
978.878 531.389 li
978.498 532.049 978.018 532.529 977.438 532.829 cv
976.858 533.129 976.178 533.289 975.378 533.289 cv
974.058 533.289 972.978 532.769 972.138 531.729 cv
971.298 530.689 970.898 529.289 970.898 527.569 cv
970.898 525.849 971.298 524.469 972.138 523.409 cv
972.978 522.369 974.058 521.829 975.378 521.829 cv
976.178 521.829 976.858 521.989 977.438 522.309 cv
978.018 522.629 978.498 523.109 978.878 523.749 cv
972.758 527.569 mo
972.758 528.889 973.018 529.929 973.558 530.689 cv
974.098 531.449 974.858 531.809 975.818 531.809 cv
976.758 531.809 977.498 531.449 978.058 530.689 cv
978.598 529.929 978.878 528.889 978.878 527.569 cv
978.878 526.249 978.598 525.229 978.058 524.469 cv
977.498 523.709 976.758 523.329 975.818 523.329 cv
974.858 523.329 974.098 523.709 973.558 524.469 cv
973.018 525.229 972.758 526.249 972.758 527.569 cv
f
984.098 517.849 mo
985.658 517.849 li
986.618 519.389 987.358 520.889 987.838 522.369 cv
988.318 523.849 988.578 525.309 988.578 526.749 cv
988.578 528.209 988.318 529.669 987.838 531.149 cv
987.358 532.629 986.618 534.109 985.658 535.649 cv
984.098 535.649 li
984.958 534.149 985.598 532.689 986.038 531.209 cv
986.458 529.749 986.678 528.269 986.678 526.749 cv
986.678 525.249 986.458 523.769 986.038 522.309 cv
985.598 520.849 984.958 519.369 984.098 517.849 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
