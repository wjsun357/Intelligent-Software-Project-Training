%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: dbnVSbp-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/10, 13:38:11
%%BoundingBox: -1 0 1147 601
%%HiResBoundingBox: -0 0 1146.0176 600.0092
%%CropBox: -0 0 1146.0176 600.0092
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-10T13:37:37+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-10T13:38:02+08:00"
   xmp:MetadataDate="2019-06-10T13:38:02+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:bc84c308-f51a-49d6-9c52-72ac9a9a8488"
   xmpMM:InstanceID="uuid:3e860682-a1c9-4a95-8ac8-178a96e86186"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -600.009 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-6.10352e-5 0 mo
-6.10352e-5 600.009 li
1146.02 600.009 li
1146.02 0 li
cp
clp
gsave
-.00175476 600.179 mo
1147 600.179 li
1147 -.821223 li
-.00175476 -.821223 li
-.00175476 600.179 li
clp
-108.002 621.179 mo
1274.4 621.179 li
1274.4 -76.5011 li
-108.002 -76.5011 li
-108.002 621.179 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
64.7984 544.434 mo
1136.16 544.434 li
1136.16 7.22039 li
64.7984 7.22039 li
64.7984 544.434 li
f
113.496 544.434 mo
113.496 547.934 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
113.496 544.434 mo
113.496 547.934 li
@
113.497 553.357 mo
112.477 553.357 111.717 553.857 111.197 554.857 cv
110.677 555.857 110.437 557.357 110.437 559.357 cv
110.437 561.357 110.677 562.857 111.197 563.857 cv
111.717 564.857 112.477 565.357 113.497 565.357 cv
114.517 565.357 115.277 564.857 115.797 563.857 cv
116.297 562.857 116.557 561.357 116.557 559.357 cv
116.557 557.357 116.297 555.857 115.797 554.857 cv
115.277 553.857 114.517 553.357 113.497 553.357 cv
113.497 551.797 mo
115.117 551.797 116.357 552.457 117.237 553.737 cv
118.097 555.037 118.537 556.917 118.537 559.357 cv
118.537 561.817 118.097 563.697 117.237 564.977 cv
116.357 566.257 115.117 566.897 113.497 566.897 cv
111.857 566.897 110.597 566.257 109.737 564.977 cv
108.877 563.697 108.457 561.817 108.457 559.357 cv
108.457 556.917 108.877 555.037 109.737 553.737 cv
110.597 552.457 111.857 551.797 113.497 551.797 cv
f
310.257 544.434 mo
310.257 547.934 li
f
310.257 544.434 mo
310.257 547.934 li
@
295.019 564.977 mo
301.899 564.977 li
301.899 566.637 li
292.639 566.637 li
292.639 564.977 li
293.379 564.217 294.399 563.177 295.699 561.857 cv
296.979 560.557 297.799 559.717 298.139 559.337 cv
298.779 558.637 299.219 558.037 299.459 557.537 cv
299.699 557.057 299.839 556.557 299.839 556.077 cv
299.839 555.317 299.559 554.677 299.019 554.197 cv
298.479 553.717 297.779 553.457 296.899 553.457 cv
296.279 553.457 295.619 553.577 294.939 553.777 cv
294.259 553.997 293.519 554.317 292.739 554.757 cv
292.739 552.757 li
293.539 552.437 294.279 552.197 294.959 552.037 cv
295.639 551.877 296.279 551.797 296.859 551.797 cv
298.359 551.797 299.559 552.177 300.459 552.937 cv
301.359 553.697 301.819 554.697 301.819 555.957 cv
301.819 556.557 301.699 557.137 301.479 557.657 cv
301.259 558.197 300.859 558.837 300.259 559.557 cv
300.099 559.757 299.579 560.297 298.699 561.197 cv
297.819 562.097 296.599 563.357 295.019 564.977 cv
f
310.259 553.357 mo
309.239 553.357 308.479 553.857 307.959 554.857 cv
307.439 555.857 307.199 557.357 307.199 559.357 cv
307.199 561.357 307.439 562.857 307.959 563.857 cv
308.479 564.857 309.239 565.357 310.259 565.357 cv
311.279 565.357 312.039 564.857 312.559 563.857 cv
313.059 562.857 313.319 561.357 313.319 559.357 cv
313.319 557.357 313.059 555.857 312.559 554.857 cv
312.039 553.857 311.279 553.357 310.259 553.357 cv
310.259 551.797 mo
311.879 551.797 313.119 552.457 313.999 553.737 cv
314.859 555.037 315.299 556.917 315.299 559.357 cv
315.299 561.817 314.859 563.697 313.999 564.977 cv
313.119 566.257 311.879 566.897 310.259 566.897 cv
308.619 566.897 307.359 566.257 306.499 564.977 cv
305.639 563.697 305.219 561.817 305.219 559.357 cv
305.219 556.917 305.639 555.037 306.499 553.737 cv
307.359 552.457 308.619 551.797 310.259 551.797 cv
f
322.979 553.357 mo
321.959 553.357 321.199 553.857 320.679 554.857 cv
320.159 555.857 319.919 557.357 319.919 559.357 cv
319.919 561.357 320.159 562.857 320.679 563.857 cv
321.199 564.857 321.959 565.357 322.979 565.357 cv
323.999 565.357 324.759 564.857 325.279 563.857 cv
325.779 562.857 326.039 561.357 326.039 559.357 cv
326.039 557.357 325.779 555.857 325.279 554.857 cv
324.759 553.857 323.999 553.357 322.979 553.357 cv
322.979 551.797 mo
324.599 551.797 325.839 552.457 326.719 553.737 cv
327.579 555.037 328.019 556.917 328.019 559.357 cv
328.019 561.817 327.579 563.697 326.719 564.977 cv
325.839 566.257 324.599 566.897 322.979 566.897 cv
321.339 566.897 320.079 566.257 319.219 564.977 cv
318.359 563.697 317.939 561.817 317.939 559.357 cv
317.939 556.917 318.359 555.037 319.219 553.737 cv
320.079 552.457 321.339 551.797 322.979 551.797 cv
f
507.017 544.434 mo
507.017 547.934 li
f
507.017 544.434 mo
507.017 547.934 li
@
495.499 553.777 mo
490.519 561.557 li
495.499 561.557 li
495.499 553.777 li
494.979 552.057 mo
497.459 552.057 li
497.459 561.557 li
499.539 561.557 li
499.539 563.197 li
497.459 563.197 li
497.459 566.637 li
495.499 566.637 li
495.499 563.197 li
488.919 563.197 li
488.919 561.297 li
494.979 552.057 li
f
507.019 553.357 mo
505.999 553.357 505.239 553.857 504.719 554.857 cv
504.199 555.857 503.959 557.357 503.959 559.357 cv
503.959 561.357 504.199 562.857 504.719 563.857 cv
505.239 564.857 505.999 565.357 507.019 565.357 cv
508.039 565.357 508.799 564.857 509.319 563.857 cv
509.819 562.857 510.079 561.357 510.079 559.357 cv
510.079 557.357 509.819 555.857 509.319 554.857 cv
508.799 553.857 508.039 553.357 507.019 553.357 cv
507.019 551.797 mo
508.639 551.797 509.879 552.457 510.759 553.737 cv
511.619 555.037 512.059 556.917 512.059 559.357 cv
512.059 561.817 511.619 563.697 510.759 564.977 cv
509.879 566.257 508.639 566.897 507.019 566.897 cv
505.379 566.897 504.119 566.257 503.259 564.977 cv
502.399 563.697 501.979 561.817 501.979 559.357 cv
501.979 556.917 502.399 555.037 503.259 553.737 cv
504.119 552.457 505.379 551.797 507.019 551.797 cv
f
519.739 553.357 mo
518.719 553.357 517.959 553.857 517.439 554.857 cv
516.919 555.857 516.679 557.357 516.679 559.357 cv
516.679 561.357 516.919 562.857 517.439 563.857 cv
517.959 564.857 518.719 565.357 519.739 565.357 cv
520.759 565.357 521.519 564.857 522.039 563.857 cv
522.539 562.857 522.799 561.357 522.799 559.357 cv
522.799 557.357 522.539 555.857 522.039 554.857 cv
521.519 553.857 520.759 553.357 519.739 553.357 cv
519.739 551.797 mo
521.359 551.797 522.599 552.457 523.479 553.737 cv
524.339 555.037 524.779 556.917 524.779 559.357 cv
524.779 561.817 524.339 563.697 523.479 564.977 cv
522.599 566.257 521.359 566.897 519.739 566.897 cv
518.099 566.897 516.839 566.257 515.979 564.977 cv
515.119 563.697 514.699 561.817 514.699 559.357 cv
514.699 556.917 515.119 555.037 515.979 553.737 cv
516.839 552.457 518.099 551.797 519.739 551.797 cv
f
703.777 544.434 mo
703.777 547.934 li
f
703.777 544.434 mo
703.777 547.934 li
@
691.299 558.557 mo
690.419 558.557 689.719 558.877 689.199 559.477 cv
688.679 560.077 688.419 560.917 688.419 561.957 cv
688.419 563.017 688.679 563.857 689.199 564.457 cv
689.719 565.057 690.419 565.357 691.299 565.357 cv
692.179 565.357 692.879 565.057 693.399 564.457 cv
693.919 563.857 694.179 563.017 694.179 561.957 cv
694.179 560.917 693.919 560.077 693.399 559.477 cv
692.879 558.877 692.179 558.557 691.299 558.557 cv
695.219 552.377 mo
695.219 554.177 li
694.719 553.937 694.219 553.757 693.719 553.637 cv
693.199 553.517 692.699 553.457 692.219 553.457 cv
690.899 553.457 689.899 553.897 689.219 554.777 cv
688.539 555.657 688.139 556.997 688.059 558.757 cv
688.439 558.197 688.919 557.757 689.499 557.457 cv
690.079 557.157 690.719 556.997 691.419 556.997 cv
692.879 556.997 694.039 557.457 694.879 558.337 cv
695.719 559.217 696.159 560.437 696.159 561.957 cv
696.159 563.457 695.699 564.657 694.819 565.557 cv
693.939 566.457 692.759 566.897 691.299 566.897 cv
689.619 566.897 688.319 566.257 687.439 564.977 cv
686.539 563.697 686.099 561.817 686.099 559.357 cv
686.099 557.057 686.639 555.217 687.739 553.857 cv
688.819 552.497 690.299 551.797 692.139 551.797 cv
692.619 551.797 693.119 551.857 693.639 551.937 cv
694.139 552.037 694.659 552.177 695.219 552.377 cv
f
703.779 553.357 mo
702.759 553.357 701.999 553.857 701.479 554.857 cv
700.959 555.857 700.719 557.357 700.719 559.357 cv
700.719 561.357 700.959 562.857 701.479 563.857 cv
701.999 564.857 702.759 565.357 703.779 565.357 cv
704.799 565.357 705.559 564.857 706.079 563.857 cv
706.579 562.857 706.839 561.357 706.839 559.357 cv
706.839 557.357 706.579 555.857 706.079 554.857 cv
705.559 553.857 704.799 553.357 703.779 553.357 cv
703.779 551.797 mo
705.399 551.797 706.639 552.457 707.519 553.737 cv
708.379 555.037 708.819 556.917 708.819 559.357 cv
708.819 561.817 708.379 563.697 707.519 564.977 cv
706.639 566.257 705.399 566.897 703.779 566.897 cv
702.139 566.897 700.879 566.257 700.019 564.977 cv
699.159 563.697 698.739 561.817 698.739 559.357 cv
698.739 556.917 699.159 555.037 700.019 553.737 cv
700.879 552.457 702.139 551.797 703.779 551.797 cv
f
716.499 553.357 mo
715.479 553.357 714.719 553.857 714.199 554.857 cv
713.679 555.857 713.439 557.357 713.439 559.357 cv
713.439 561.357 713.679 562.857 714.199 563.857 cv
714.719 564.857 715.479 565.357 716.499 565.357 cv
717.519 565.357 718.279 564.857 718.799 563.857 cv
719.299 562.857 719.559 561.357 719.559 559.357 cv
719.559 557.357 719.299 555.857 718.799 554.857 cv
718.279 553.857 717.519 553.357 716.499 553.357 cv
716.499 551.797 mo
718.119 551.797 719.359 552.457 720.239 553.737 cv
721.099 555.037 721.539 556.917 721.539 559.357 cv
721.539 561.817 721.099 563.697 720.239 564.977 cv
719.359 566.257 718.119 566.897 716.499 566.897 cv
714.859 566.897 713.599 566.257 712.739 564.977 cv
711.879 563.697 711.459 561.817 711.459 559.357 cv
711.459 556.917 711.879 555.037 712.739 553.737 cv
713.599 552.457 714.859 551.797 716.499 551.797 cv
f
900.538 544.434 mo
900.538 547.934 li
f
900.538 544.434 mo
900.538 547.934 li
@
887.82 559.717 mo
886.88 559.717 886.14 559.977 885.6 560.477 cv
885.06 560.977 884.8 561.657 884.8 562.537 cv
884.8 563.417 885.06 564.117 885.6 564.617 cv
886.14 565.117 886.88 565.357 887.82 565.357 cv
888.74 565.357 889.48 565.117 890.02 564.597 cv
890.56 564.097 890.84 563.417 890.84 562.537 cv
890.84 561.657 890.56 560.977 890.04 560.477 cv
889.5 559.977 888.76 559.717 887.82 559.717 cv
885.84 558.877 mo
885 558.677 884.34 558.277 883.86 557.697 cv
883.38 557.117 883.16 556.417 883.16 555.577 cv
883.16 554.417 883.56 553.497 884.4 552.817 cv
885.22 552.137 886.36 551.797 887.82 551.797 cv
889.26 551.797 890.4 552.137 891.24 552.817 cv
892.06 553.497 892.48 554.417 892.48 555.577 cv
892.48 556.417 892.24 557.117 891.76 557.697 cv
891.28 558.277 890.64 558.677 889.8 558.877 cv
890.74 559.097 891.48 559.537 892.02 560.177 cv
892.54 560.817 892.82 561.617 892.82 562.537 cv
892.82 563.957 892.38 565.037 891.52 565.777 cv
890.64 566.537 889.42 566.897 887.82 566.897 cv
886.2 566.897 884.96 566.537 884.1 565.777 cv
883.24 565.037 882.82 563.957 882.82 562.537 cv
882.82 561.617 883.08 560.817 883.62 560.177 cv
884.14 559.537 884.88 559.097 885.84 558.877 cv
885.12 555.757 mo
885.12 556.517 885.34 557.117 885.82 557.537 cv
886.3 557.957 886.96 558.157 887.82 558.157 cv
888.66 558.157 889.32 557.957 889.8 557.537 cv
890.28 557.117 890.52 556.517 890.52 555.757 cv
890.52 554.997 890.28 554.417 889.8 553.997 cv
889.32 553.577 888.66 553.357 887.82 553.357 cv
886.96 553.357 886.3 553.577 885.82 553.997 cv
885.34 554.417 885.12 554.997 885.12 555.757 cv
f
900.54 553.357 mo
899.52 553.357 898.76 553.857 898.24 554.857 cv
897.72 555.857 897.48 557.357 897.48 559.357 cv
897.48 561.357 897.72 562.857 898.24 563.857 cv
898.76 564.857 899.52 565.357 900.54 565.357 cv
901.56 565.357 902.32 564.857 902.84 563.857 cv
903.34 562.857 903.6 561.357 903.6 559.357 cv
903.6 557.357 903.34 555.857 902.84 554.857 cv
902.32 553.857 901.56 553.357 900.54 553.357 cv
900.54 551.797 mo
902.16 551.797 903.4 552.457 904.28 553.737 cv
905.14 555.037 905.58 556.917 905.58 559.357 cv
905.58 561.817 905.14 563.697 904.28 564.977 cv
903.4 566.257 902.16 566.897 900.54 566.897 cv
898.9 566.897 897.64 566.257 896.78 564.977 cv
895.92 563.697 895.5 561.817 895.5 559.357 cv
895.5 556.917 895.92 555.037 896.78 553.737 cv
897.64 552.457 898.9 551.797 900.54 551.797 cv
f
913.26 553.357 mo
912.24 553.357 911.48 553.857 910.96 554.857 cv
910.44 555.857 910.2 557.357 910.2 559.357 cv
910.2 561.357 910.44 562.857 910.96 563.857 cv
911.48 564.857 912.24 565.357 913.26 565.357 cv
914.28 565.357 915.04 564.857 915.56 563.857 cv
916.06 562.857 916.32 561.357 916.32 559.357 cv
916.32 557.357 916.06 555.857 915.56 554.857 cv
915.04 553.857 914.28 553.357 913.26 553.357 cv
913.26 551.797 mo
914.88 551.797 916.12 552.457 917 553.737 cv
917.86 555.037 918.3 556.917 918.3 559.357 cv
918.3 561.817 917.86 563.697 917 564.977 cv
916.12 566.257 914.88 566.897 913.26 566.897 cv
911.62 566.897 910.36 566.257 909.5 564.977 cv
908.64 563.697 908.22 561.817 908.22 559.357 cv
908.22 556.917 908.64 555.037 909.5 553.737 cv
910.36 552.457 911.62 551.797 913.26 551.797 cv
f
1097.3 544.434 mo
1097.3 547.934 li
f
1097.3 544.434 mo
1097.3 547.934 li
@
1074.34 564.977 mo
1077.56 564.977 li
1077.56 553.857 li
1074.06 554.557 li
1074.06 552.757 li
1077.54 552.057 li
1079.52 552.057 li
1079.52 564.977 li
1082.74 564.977 li
1082.74 566.637 li
1074.34 566.637 li
1074.34 564.977 li
f
1090.94 553.357 mo
1089.92 553.357 1089.16 553.857 1088.64 554.857 cv
1088.12 555.857 1087.88 557.357 1087.88 559.357 cv
1087.88 561.357 1088.12 562.857 1088.64 563.857 cv
1089.16 564.857 1089.92 565.357 1090.94 565.357 cv
1091.96 565.357 1092.72 564.857 1093.24 563.857 cv
1093.74 562.857 1094 561.357 1094 559.357 cv
1094 557.357 1093.74 555.857 1093.24 554.857 cv
1092.72 553.857 1091.96 553.357 1090.94 553.357 cv
1090.94 551.797 mo
1092.56 551.797 1093.8 552.457 1094.68 553.737 cv
1095.54 555.037 1095.98 556.917 1095.98 559.357 cv
1095.98 561.817 1095.54 563.697 1094.68 564.977 cv
1093.8 566.257 1092.56 566.897 1090.94 566.897 cv
1089.3 566.897 1088.04 566.257 1087.18 564.977 cv
1086.32 563.697 1085.9 561.817 1085.9 559.357 cv
1085.9 556.917 1086.32 555.037 1087.18 553.737 cv
1088.04 552.457 1089.3 551.797 1090.94 551.797 cv
f
1103.66 553.357 mo
1102.64 553.357 1101.88 553.857 1101.36 554.857 cv
1100.84 555.857 1100.6 557.357 1100.6 559.357 cv
1100.6 561.357 1100.84 562.857 1101.36 563.857 cv
1101.88 564.857 1102.64 565.357 1103.66 565.357 cv
1104.68 565.357 1105.44 564.857 1105.96 563.857 cv
1106.46 562.857 1106.72 561.357 1106.72 559.357 cv
1106.72 557.357 1106.46 555.857 1105.96 554.857 cv
1105.44 553.857 1104.68 553.357 1103.66 553.357 cv
1103.66 551.797 mo
1105.28 551.797 1106.52 552.457 1107.4 553.737 cv
1108.26 555.037 1108.7 556.917 1108.7 559.357 cv
1108.7 561.817 1108.26 563.697 1107.4 564.977 cv
1106.52 566.257 1105.28 566.897 1103.66 566.897 cv
1102.02 566.897 1100.76 566.257 1099.9 564.977 cv
1099.04 563.697 1098.62 561.817 1098.62 559.357 cv
1098.62 556.917 1099.04 555.037 1099.9 553.737 cv
1100.76 552.457 1102.02 551.797 1103.66 551.797 cv
f
1116.38 553.357 mo
1115.36 553.357 1114.6 553.857 1114.08 554.857 cv
1113.56 555.857 1113.32 557.357 1113.32 559.357 cv
1113.32 561.357 1113.56 562.857 1114.08 563.857 cv
1114.6 564.857 1115.36 565.357 1116.38 565.357 cv
1117.4 565.357 1118.16 564.857 1118.68 563.857 cv
1119.18 562.857 1119.44 561.357 1119.44 559.357 cv
1119.44 557.357 1119.18 555.857 1118.68 554.857 cv
1118.16 553.857 1117.4 553.357 1116.38 553.357 cv
1116.38 551.797 mo
1118 551.797 1119.24 552.457 1120.12 553.737 cv
1120.98 555.037 1121.42 556.917 1121.42 559.357 cv
1121.42 561.817 1120.98 563.697 1120.12 564.977 cv
1119.24 566.257 1118 566.897 1116.38 566.897 cv
1114.74 566.897 1113.48 566.257 1112.62 564.977 cv
1111.76 563.697 1111.34 561.817 1111.34 559.357 cv
1111.34 556.917 1111.76 555.037 1112.62 553.737 cv
1113.48 552.457 1114.74 551.797 1116.38 551.797 cv
f
571.813 575.417 mo
581.033 575.417 li
581.033 577.077 li
573.793 577.077 li
573.793 581.397 li
580.733 581.397 li
580.733 583.057 li
573.793 583.057 li
573.793 588.337 li
581.213 588.337 li
581.213 589.997 li
571.813 589.997 li
571.813 575.417 li
f
586.113 588.357 mo
586.113 594.137 li
584.313 594.137 li
584.313 579.057 li
586.113 579.057 li
586.113 580.716 li
586.473 580.077 586.953 579.596 587.533 579.276 cv
588.113 578.957 588.813 578.797 589.613 578.797 cv
590.933 578.797 592.013 579.337 592.853 580.377 cv
593.673 581.437 594.093 582.817 594.093 584.536 cv
594.093 586.257 593.673 587.656 592.853 588.697 cv
592.013 589.737 590.933 590.257 589.613 590.257 cv
588.813 590.257 588.113 590.096 587.533 589.797 cv
586.953 589.497 586.473 589.017 586.113 588.357 cv
592.233 584.536 mo
592.233 583.216 591.953 582.197 591.413 581.437 cv
590.853 580.677 590.113 580.297 589.173 580.297 cv
588.213 580.297 587.473 580.677 586.933 581.437 cv
586.373 582.197 586.113 583.216 586.113 584.536 cv
586.113 585.857 586.373 586.897 586.933 587.656 cv
587.473 588.417 588.213 588.777 589.173 588.777 cv
590.113 588.777 590.853 588.417 591.413 587.656 cv
591.953 586.897 592.233 585.857 592.233 584.536 cv
f
601.313 580.317 mo
600.353 580.317 599.593 580.697 599.033 581.457 cv
598.473 582.216 598.193 583.237 598.193 584.536 cv
598.193 585.857 598.453 586.877 599.013 587.637 cv
599.573 588.397 600.333 588.757 601.313 588.757 cv
602.273 588.757 603.033 588.397 603.593 587.637 cv
604.153 586.877 604.433 585.857 604.433 584.536 cv
604.433 583.257 604.153 582.216 603.593 581.457 cv
603.033 580.697 602.273 580.317 601.313 580.317 cv
601.313 578.797 mo
602.873 578.797 604.093 579.317 604.993 580.317 cv
605.873 581.337 606.333 582.737 606.333 584.536 cv
606.333 586.337 605.873 587.737 604.993 588.737 cv
604.093 589.757 602.873 590.257 601.313 590.257 cv
599.733 590.257 598.493 589.757 597.613 588.737 cv
596.733 587.737 596.293 586.337 596.293 584.536 cv
596.293 582.737 596.733 581.337 597.613 580.317 cv
598.493 579.317 599.733 578.797 601.313 578.797 cv
f
617.193 579.477 mo
617.193 581.156 li
616.673 580.877 616.173 580.677 615.653 580.536 cv
615.133 580.397 614.633 580.317 614.113 580.317 cv
612.953 580.317 612.033 580.697 611.393 581.437 cv
610.753 582.177 610.433 583.216 610.433 584.536 cv
610.433 585.877 610.753 586.917 611.393 587.656 cv
612.033 588.397 612.953 588.757 614.113 588.757 cv
614.633 588.757 615.133 588.697 615.653 588.557 cv
616.173 588.417 616.673 588.197 617.193 587.917 cv
617.193 589.577 li
616.673 589.817 616.153 589.997 615.633 590.096 cv
615.093 590.197 614.513 590.257 613.913 590.257 cv
612.273 590.257 610.953 589.757 609.993 588.716 cv
609.013 587.697 608.533 586.297 608.533 584.536 cv
608.533 582.757 609.013 581.357 609.993 580.337 cv
610.973 579.317 612.313 578.797 614.033 578.797 cv
614.593 578.797 615.133 578.857 615.653 578.977 cv
616.173 579.096 616.693 579.257 617.193 579.477 cv
f
629.413 583.397 mo
629.413 589.997 li
627.613 589.997 li
627.613 583.457 li
627.613 582.417 627.393 581.656 626.993 581.137 cv
626.593 580.617 625.993 580.357 625.193 580.357 cv
624.213 580.357 623.453 580.677 622.893 581.297 cv
622.333 581.917 622.053 582.757 622.053 583.817 cv
622.053 589.997 li
620.253 589.997 li
620.253 574.797 li
622.053 574.797 li
622.053 580.757 li
622.473 580.117 622.973 579.617 623.573 579.297 cv
624.153 578.977 624.833 578.797 625.593 578.797 cv
626.833 578.797 627.793 579.197 628.433 579.977 cv
629.073 580.757 629.413 581.897 629.413 583.397 cv
f
64.7983 454.62 mo
61.2983 454.62 li
f
64.7983 454.62 mo
61.2983 454.62 li
@
32.3614 448.941 mo
31.3414 448.941 30.5814 449.441 30.0614 450.441 cv
29.5414 451.441 29.3014 452.941 29.3014 454.941 cv
29.3014 456.941 29.5414 458.441 30.0614 459.441 cv
30.5814 460.441 31.3414 460.941 32.3614 460.941 cv
33.3814 460.941 34.1414 460.441 34.6614 459.441 cv
35.1614 458.441 35.4214 456.941 35.4214 454.941 cv
35.4214 452.941 35.1614 451.441 34.6614 450.441 cv
34.1414 449.441 33.3814 448.941 32.3614 448.941 cv
32.3614 447.381 mo
33.9814 447.381 35.2214 448.041 36.1014 449.321 cv
36.9614 450.621 37.4014 452.501 37.4014 454.941 cv
37.4014 457.401 36.9614 459.281 36.1014 460.561 cv
35.2214 461.841 33.9814 462.481 32.3614 462.481 cv
30.7214 462.481 29.4614 461.841 28.6014 460.561 cv
27.7414 459.281 27.3214 457.401 27.3214 454.941 cv
27.3214 452.501 27.7414 450.621 28.6014 449.321 cv
29.4614 448.041 30.7214 447.381 32.3614 447.381 cv
f
40.8615 459.741 mo
42.9214 459.741 li
42.9214 462.221 li
40.8615 462.221 li
40.8615 459.741 li
f
48.9213 460.561 mo
55.8013 460.561 li
55.8013 462.221 li
46.5413 462.221 li
46.5413 460.561 li
47.2813 459.801 48.3013 458.761 49.6013 457.441 cv
50.8813 456.141 51.7013 455.301 52.0413 454.921 cv
52.6813 454.221 53.1213 453.621 53.3613 453.121 cv
53.6013 452.641 53.7413 452.141 53.7413 451.661 cv
53.7413 450.901 53.4613 450.261 52.9213 449.781 cv
52.3813 449.301 51.6813 449.041 50.8013 449.041 cv
50.1813 449.041 49.5213 449.161 48.8413 449.361 cv
48.1613 449.581 47.4213 449.901 46.6413 450.341 cv
46.6413 448.341 li
47.4413 448.021 48.1813 447.781 48.8613 447.621 cv
49.5413 447.461 50.1813 447.381 50.7613 447.381 cv
52.2613 447.381 53.4613 447.761 54.3613 448.521 cv
55.2613 449.281 55.7213 450.281 55.7213 451.541 cv
55.7213 452.141 55.6013 452.721 55.3813 453.241 cv
55.1613 453.781 54.7613 454.421 54.1613 455.141 cv
54.0013 455.341 53.4813 455.881 52.6013 456.781 cv
51.7213 457.681 50.5013 458.941 48.9213 460.561 cv
f
64.7983 345.628 mo
61.2983 345.628 li
f
64.7983 345.628 mo
61.2983 345.628 li
@
32.3614 339.949 mo
31.3414 339.949 30.5814 340.449 30.0614 341.449 cv
29.5414 342.449 29.3014 343.949 29.3014 345.949 cv
29.3014 347.949 29.5414 349.449 30.0614 350.449 cv
30.5814 351.449 31.3414 351.949 32.3614 351.949 cv
33.3814 351.949 34.1414 351.449 34.6614 350.449 cv
35.1614 349.449 35.4214 347.949 35.4214 345.949 cv
35.4214 343.949 35.1614 342.449 34.6614 341.449 cv
34.1414 340.449 33.3814 339.949 32.3614 339.949 cv
32.3614 338.389 mo
33.9814 338.389 35.2214 339.049 36.1014 340.329 cv
36.9614 341.629 37.4014 343.509 37.4014 345.949 cv
37.4014 348.409 36.9614 350.289 36.1014 351.569 cv
35.2214 352.849 33.9814 353.489 32.3614 353.489 cv
30.7214 353.489 29.4614 352.849 28.6014 351.569 cv
27.7414 350.289 27.3214 348.409 27.3214 345.949 cv
27.3214 343.509 27.7414 341.629 28.6014 340.329 cv
29.4614 339.049 30.7214 338.389 32.3614 338.389 cv
f
40.8615 350.749 mo
42.9214 350.749 li
42.9214 353.229 li
40.8615 353.229 li
40.8615 350.749 li
f
52.6413 340.369 mo
47.6613 348.149 li
52.6413 348.149 li
52.6413 340.369 li
52.1213 338.649 mo
54.6013 338.649 li
54.6013 348.149 li
56.6813 348.149 li
56.6813 349.789 li
54.6013 349.789 li
54.6013 353.229 li
52.6413 353.229 li
52.6413 349.789 li
46.0613 349.789 li
46.0613 347.889 li
52.1213 338.649 li
f
64.7983 236.635 mo
61.2983 236.635 li
f
64.7983 236.635 mo
61.2983 236.635 li
@
32.3614 230.957 mo
31.3414 230.957 30.5814 231.457 30.0614 232.457 cv
29.5414 233.457 29.3014 234.957 29.3014 236.957 cv
29.3014 238.957 29.5414 240.457 30.0614 241.457 cv
30.5814 242.457 31.3414 242.957 32.3614 242.957 cv
33.3814 242.957 34.1414 242.457 34.6614 241.457 cv
35.1614 240.457 35.4214 238.957 35.4214 236.957 cv
35.4214 234.957 35.1614 233.457 34.6614 232.457 cv
34.1414 231.457 33.3814 230.957 32.3614 230.957 cv
32.3614 229.397 mo
33.9814 229.397 35.2214 230.057 36.1014 231.337 cv
36.9614 232.637 37.4014 234.517 37.4014 236.957 cv
37.4014 239.417 36.9614 241.297 36.1014 242.577 cv
35.2214 243.857 33.9814 244.497 32.3614 244.497 cv
30.7214 244.497 29.4614 243.857 28.6014 242.577 cv
27.7414 241.297 27.3214 239.417 27.3214 236.957 cv
27.3214 234.517 27.7414 232.637 28.6014 231.337 cv
29.4614 230.057 30.7214 229.397 32.3614 229.397 cv
f
40.8615 241.757 mo
42.9214 241.757 li
42.9214 244.237 li
40.8615 244.237 li
40.8615 241.757 li
f
51.6813 236.157 mo
50.8013 236.157 50.1013 236.477 49.5813 237.077 cv
49.0613 237.677 48.8013 238.517 48.8013 239.557 cv
48.8013 240.617 49.0613 241.457 49.5813 242.057 cv
50.1013 242.657 50.8013 242.957 51.6813 242.957 cv
52.5613 242.957 53.2613 242.657 53.7813 242.057 cv
54.3013 241.457 54.5613 240.617 54.5613 239.557 cv
54.5613 238.517 54.3013 237.677 53.7813 237.077 cv
53.2613 236.477 52.5613 236.157 51.6813 236.157 cv
55.6013 229.977 mo
55.6013 231.777 li
55.1013 231.537 54.6013 231.357 54.1013 231.237 cv
53.5813 231.117 53.0813 231.057 52.6013 231.057 cv
51.2813 231.057 50.2813 231.497 49.6013 232.377 cv
48.9213 233.257 48.5213 234.597 48.4413 236.357 cv
48.8213 235.797 49.3013 235.357 49.8813 235.057 cv
50.4613 234.757 51.1013 234.597 51.8013 234.597 cv
53.2613 234.597 54.4213 235.057 55.2613 235.937 cv
56.1013 236.817 56.5413 238.037 56.5413 239.557 cv
56.5413 241.057 56.0813 242.257 55.2013 243.157 cv
54.3213 244.057 53.1413 244.497 51.6813 244.497 cv
50.0013 244.497 48.7013 243.857 47.8213 242.577 cv
46.9213 241.297 46.4813 239.417 46.4813 236.957 cv
46.4813 234.657 47.0213 232.817 48.1213 231.457 cv
49.2013 230.097 50.6813 229.397 52.5213 229.397 cv
53.0013 229.397 53.5013 229.457 54.0213 229.537 cv
54.5213 229.637 55.0413 229.777 55.6013 229.977 cv
f
64.7983 127.643 mo
61.2983 127.643 li
f
64.7983 127.643 mo
61.2983 127.643 li
@
32.3614 121.965 mo
31.3414 121.965 30.5814 122.465 30.0614 123.465 cv
29.5414 124.465 29.3014 125.965 29.3014 127.965 cv
29.3014 129.965 29.5414 131.465 30.0614 132.465 cv
30.5814 133.465 31.3414 133.965 32.3614 133.965 cv
33.3814 133.965 34.1414 133.465 34.6614 132.465 cv
35.1614 131.465 35.4214 129.965 35.4214 127.965 cv
35.4214 125.965 35.1614 124.465 34.6614 123.465 cv
34.1414 122.465 33.3814 121.965 32.3614 121.965 cv
32.3614 120.405 mo
33.9814 120.405 35.2214 121.065 36.1014 122.345 cv
36.9614 123.645 37.4014 125.525 37.4014 127.965 cv
37.4014 130.425 36.9614 132.305 36.1014 133.585 cv
35.2214 134.865 33.9814 135.505 32.3614 135.505 cv
30.7214 135.505 29.4614 134.865 28.6014 133.585 cv
27.7414 132.305 27.3214 130.425 27.3214 127.965 cv
27.3214 125.525 27.7414 123.645 28.6014 122.345 cv
29.4614 121.065 30.7214 120.405 32.3614 120.405 cv
f
40.8615 132.765 mo
42.9214 132.765 li
42.9214 135.245 li
40.8615 135.245 li
40.8615 132.765 li
f
51.4413 128.325 mo
50.5013 128.325 49.7613 128.585 49.2213 129.085 cv
48.6813 129.585 48.4213 130.265 48.4213 131.145 cv
48.4213 132.025 48.6813 132.725 49.2213 133.225 cv
49.7613 133.725 50.5013 133.965 51.4413 133.965 cv
52.3613 133.965 53.1013 133.725 53.6413 133.205 cv
54.1813 132.705 54.4613 132.025 54.4613 131.145 cv
54.4613 130.265 54.1813 129.585 53.6613 129.085 cv
53.1213 128.585 52.3813 128.325 51.4413 128.325 cv
49.4613 127.485 mo
48.6213 127.285 47.9613 126.885 47.4813 126.305 cv
47.0013 125.725 46.7813 125.025 46.7813 124.185 cv
46.7813 123.025 47.1813 122.105 48.0213 121.425 cv
48.8413 120.745 49.9813 120.405 51.4413 120.405 cv
52.8813 120.405 54.0213 120.745 54.8613 121.425 cv
55.6813 122.105 56.1013 123.025 56.1013 124.185 cv
56.1013 125.025 55.8613 125.725 55.3813 126.305 cv
54.9013 126.885 54.2613 127.285 53.4213 127.485 cv
54.3613 127.705 55.1013 128.145 55.6413 128.785 cv
56.1613 129.425 56.4413 130.225 56.4413 131.145 cv
56.4413 132.565 56.0013 133.645 55.1413 134.385 cv
54.2613 135.145 53.0413 135.505 51.4413 135.505 cv
49.8213 135.505 48.5813 135.145 47.7213 134.385 cv
46.8613 133.645 46.4413 132.565 46.4413 131.145 cv
46.4413 130.225 46.7013 129.425 47.2413 128.785 cv
47.7613 128.145 48.5013 127.705 49.4613 127.485 cv
48.7413 124.365 mo
48.7413 125.125 48.9613 125.725 49.4413 126.145 cv
49.9213 126.565 50.5813 126.765 51.4413 126.765 cv
52.2813 126.765 52.9413 126.565 53.4213 126.145 cv
53.9013 125.725 54.1413 125.125 54.1413 124.365 cv
54.1413 123.605 53.9013 123.025 53.4213 122.605 cv
52.9413 122.185 52.2813 121.965 51.4413 121.965 cv
50.5813 121.965 49.9213 122.185 49.4413 122.605 cv
48.9613 123.025 48.7413 123.605 48.7413 124.365 cv
f
64.7983 18.651 mo
61.2983 18.651 li
f
64.7983 18.651 mo
61.2983 18.651 li
@
28.4814 24.5926 mo
31.7014 24.5926 li
31.7014 13.4726 li
28.2014 14.1726 li
28.2014 12.3726 li
31.6814 11.6726 li
33.6614 11.6726 li
33.6614 24.5926 li
36.8814 24.5926 li
36.8814 26.2526 li
28.4814 26.2526 li
28.4814 24.5926 li
f
40.8615 23.7726 mo
42.9214 23.7726 li
42.9214 26.2526 li
40.8615 26.2526 li
40.8615 23.7726 li
f
51.4413 12.9726 mo
50.4213 12.9726 49.6613 13.4726 49.1413 14.4726 cv
48.6213 15.4726 48.3813 16.9726 48.3813 18.9726 cv
48.3813 20.9726 48.6213 22.4726 49.1413 23.4726 cv
49.6613 24.4726 50.4213 24.9726 51.4413 24.9726 cv
52.4613 24.9726 53.2213 24.4726 53.7413 23.4726 cv
54.2413 22.4726 54.5013 20.9726 54.5013 18.9726 cv
54.5013 16.9726 54.2413 15.4726 53.7413 14.4726 cv
53.2213 13.4726 52.4613 12.9726 51.4413 12.9726 cv
51.4413 11.4126 mo
53.0613 11.4126 54.3013 12.0726 55.1813 13.3526 cv
56.0413 14.6526 56.4813 16.5326 56.4813 18.9726 cv
56.4813 21.4326 56.0413 23.3126 55.1813 24.5926 cv
54.3013 25.8726 53.0613 26.5126 51.4413 26.5126 cv
49.8013 26.5126 48.5413 25.8726 47.6813 24.5926 cv
46.8213 23.3126 46.4013 21.4326 46.4013 18.9726 cv
46.4013 16.5326 46.8213 14.6526 47.6813 13.3526 cv
48.5413 12.0726 49.8013 11.4126 51.4413 11.4126 cv
f
5.20517 341.151 mo
12.4652 343.831 li
12.4652 338.471 li
5.20517 341.151 li
3.26517 342.271 mo
3.26517 340.031 li
17.8452 334.471 li
17.8452 336.531 li
14.1052 337.851 li
14.1052 344.431 li
17.8452 345.751 li
17.8452 347.831 li
3.26517 342.271 li
f
7.32516 324.551 mo
9.00517 324.551 li
8.72517 325.071 8.52517 325.571 8.38517 326.091 cv
8.24517 326.611 8.16517 327.111 8.16517 327.631 cv
8.16517 328.791 8.54517 329.711 9.28517 330.351 cv
10.0252 330.991 11.0652 331.311 12.3852 331.311 cv
13.7252 331.311 14.7652 330.991 15.5052 330.351 cv
16.2452 329.711 16.6052 328.791 16.6052 327.631 cv
16.6052 327.111 16.5452 326.611 16.4052 326.091 cv
16.2652 325.571 16.0452 325.071 15.7652 324.551 cv
17.4252 324.551 li
17.6652 325.071 17.8452 325.591 17.9452 326.111 cv
18.0452 326.651 18.1052 327.231 18.1052 327.831 cv
18.1052 329.471 17.6052 330.791 16.5652 331.751 cv
15.5452 332.731 14.1452 333.211 12.3852 333.211 cv
10.6052 333.211 9.20517 332.731 8.18517 331.751 cv
7.16517 330.771 6.64517 329.431 6.64517 327.711 cv
6.64517 327.151 6.70517 326.611 6.82516 326.091 cv
6.94517 325.571 7.10517 325.051 7.32516 324.551 cv
f
7.32516 313.551 mo
9.00517 313.551 li
8.72517 314.071 8.52517 314.571 8.38517 315.091 cv
8.24517 315.611 8.16517 316.111 8.16517 316.631 cv
8.16517 317.791 8.54517 318.711 9.28517 319.351 cv
10.0252 319.991 11.0652 320.311 12.3852 320.311 cv
13.7252 320.311 14.7652 319.991 15.5052 319.351 cv
16.2452 318.711 16.6052 317.791 16.6052 316.631 cv
16.6052 316.111 16.5452 315.611 16.4052 315.091 cv
16.2652 314.571 16.0452 314.071 15.7652 313.551 cv
17.4252 313.551 li
17.6652 314.071 17.8452 314.591 17.9452 315.111 cv
18.0452 315.651 18.1052 316.231 18.1052 316.831 cv
18.1052 318.471 17.6052 319.791 16.5652 320.751 cv
15.5452 321.731 14.1452 322.211 12.3852 322.211 cv
10.6052 322.211 9.20517 321.731 8.18517 320.751 cv
7.16517 319.771 6.64517 318.431 6.64517 316.711 cv
6.64517 316.151 6.70517 315.611 6.82516 315.091 cv
6.94517 314.571 7.10517 314.051 7.32516 313.551 cv
f
13.5252 310.611 mo
6.90517 310.611 li
6.90517 308.811 li
13.4652 308.811 li
14.5052 308.811 15.2652 308.611 15.7852 308.211 cv
16.3052 307.811 16.5652 307.211 16.5652 306.391 cv
16.5652 305.431 16.2652 304.651 15.6452 304.091 cv
15.0252 303.531 14.1852 303.251 13.1052 303.251 cv
6.90517 303.251 li
6.90517 301.451 li
17.8452 301.451 li
17.8452 303.251 li
16.1652 303.251 li
16.8452 303.691 17.3252 304.211 17.6452 304.771 cv
17.9452 305.351 18.1052 306.011 18.1052 306.771 cv
18.1052 308.031 17.7252 308.991 16.9452 309.631 cv
16.1852 310.291 15.0452 310.611 13.5252 310.611 cv
6.64517 306.091 mo
6.64517 306.091 li
f
8.58517 291.411 mo
8.46516 291.611 8.38517 291.831 8.32516 292.071 cv
8.28517 292.311 8.24517 292.571 8.24517 292.851 cv
8.24517 293.871 8.58517 294.651 9.24517 295.191 cv
9.90517 295.751 10.8452 296.011 12.0852 296.011 cv
17.8452 296.011 li
17.8452 297.811 li
6.90517 297.811 li
6.90517 296.011 li
8.60517 296.011 li
7.94517 295.651 7.44517 295.151 7.12517 294.551 cv
6.80517 293.951 6.64517 293.211 6.64517 292.331 cv
6.64517 292.211 6.66517 292.071 6.66517 291.911 cv
6.68517 291.771 6.70517 291.611 6.74517 291.411 cv
8.58517 291.411 li
f
12.3452 284.551 mo
12.3452 286.011 12.5252 287.011 12.8452 287.571 cv
13.1852 288.131 13.7452 288.411 14.5452 288.411 cv
15.1852 288.411 15.7052 288.211 16.0652 287.791 cv
16.4452 287.371 16.6252 286.791 16.6252 286.071 cv
16.6252 285.071 16.2852 284.271 15.5652 283.671 cv
14.8652 283.071 13.9252 282.771 12.7452 282.771 cv
12.3452 282.771 li
12.3452 284.551 li
11.6052 280.971 mo
17.8452 280.971 li
17.8452 282.771 li
16.1852 282.771 li
16.8652 283.191 17.3452 283.711 17.6452 284.311 cv
17.9452 284.911 18.1052 285.671 18.1052 286.551 cv
18.1052 287.671 17.8052 288.571 17.1852 289.231 cv
16.5652 289.891 15.7252 290.211 14.6652 290.211 cv
13.4452 290.211 12.5252 289.811 11.8852 288.971 cv
11.2652 288.151 10.9452 286.931 10.9452 285.291 cv
10.9452 282.771 li
10.7652 282.771 li
9.94517 282.771 9.30517 283.051 8.84517 283.591 cv
8.40517 284.131 8.16517 284.891 8.16517 285.871 cv
8.16517 286.511 8.24517 287.111 8.40517 287.711 cv
8.56517 288.311 8.78517 288.871 9.06517 289.411 cv
7.40517 289.411 li
7.16517 288.771 6.96516 288.131 6.84517 287.511 cv
6.72517 286.891 6.64517 286.291 6.64517 285.691 cv
6.64517 284.111 7.06517 282.931 7.88517 282.151 cv
8.70517 281.371 9.94517 280.971 11.6052 280.971 cv
f
7.32516 269.391 mo
9.00517 269.391 li
8.72517 269.911 8.52517 270.411 8.38517 270.931 cv
8.24517 271.451 8.16517 271.951 8.16517 272.471 cv
8.16517 273.631 8.54517 274.551 9.28517 275.191 cv
10.0252 275.831 11.0652 276.151 12.3852 276.151 cv
13.7252 276.151 14.7652 275.831 15.5052 275.191 cv
16.2452 274.551 16.6052 273.631 16.6052 272.471 cv
16.6052 271.951 16.5452 271.451 16.4052 270.931 cv
16.2652 270.411 16.0452 269.911 15.7652 269.391 cv
17.4252 269.391 li
17.6652 269.911 17.8452 270.431 17.9452 270.951 cv
18.0452 271.491 18.1052 272.071 18.1052 272.671 cv
18.1052 274.311 17.6052 275.631 16.5652 276.591 cv
15.5452 277.571 14.1452 278.051 12.3852 278.051 cv
10.6052 278.051 9.20517 277.571 8.18517 276.591 cv
7.16517 275.611 6.64517 274.271 6.64517 272.551 cv
6.64517 271.991 6.70517 271.451 6.82516 270.931 cv
6.94517 270.411 7.10517 269.891 7.32516 269.391 cv
f
18.8452 261.711 mo
20.1252 262.231 20.9852 262.731 21.3852 263.211 cv
21.7852 263.691 21.9852 264.331 21.9852 265.131 cv
21.9852 266.571 li
20.4852 266.571 li
20.4852 265.511 li
20.4852 265.031 20.3652 264.651 20.1252 264.371 cv
19.8852 264.091 19.3452 263.791 18.4652 263.451 cv
17.6652 263.131 li
6.90517 267.551 li
6.90517 265.651 li
15.4652 262.231 li
6.90517 258.811 li
6.90517 256.911 li
18.8452 261.711 li
f
11.0052 241.071 mo
11.1652 240.651 11.4652 240.231 11.9252 239.831 cv
12.4052 239.431 13.0452 239.031 13.8652 238.631 cv
17.8452 236.631 li
17.8452 238.751 li
14.1052 240.611 li
13.1452 241.091 12.4852 241.571 12.1652 242.011 cv
11.8452 242.471 11.6852 243.091 11.6852 243.871 cv
11.6852 246.011 li
17.8452 246.011 li
17.8452 247.991 li
3.26517 247.991 li
3.26517 243.531 li
3.26517 241.871 3.62517 240.631 4.30517 239.811 cv
5.00517 238.991 6.06517 238.571 7.46516 238.571 cv
8.38517 238.571 9.16517 238.791 9.76517 239.211 cv
10.3652 239.651 10.7852 240.271 11.0052 241.071 cv
4.88517 246.011 mo
10.0652 246.011 li
10.0652 243.531 li
10.0652 242.591 9.84517 241.871 9.40517 241.391 cv
8.96516 240.911 8.32516 240.651 7.46516 240.651 cv
6.62517 240.651 5.98517 240.911 5.54517 241.391 cv
5.10517 241.871 4.88517 242.591 4.88517 243.531 cv
4.88517 246.011 li
f
12.3452 229.191 mo
12.3452 230.651 12.5252 231.651 12.8452 232.211 cv
13.1852 232.771 13.7452 233.051 14.5452 233.051 cv
15.1852 233.051 15.7052 232.851 16.0652 232.431 cv
16.4452 232.011 16.6252 231.431 16.6252 230.711 cv
16.6252 229.711 16.2852 228.911 15.5652 228.311 cv
14.8652 227.711 13.9252 227.411 12.7452 227.411 cv
12.3452 227.411 li
12.3452 229.191 li
11.6052 225.611 mo
17.8452 225.611 li
17.8452 227.411 li
16.1852 227.411 li
16.8652 227.831 17.3452 228.351 17.6452 228.951 cv
17.9452 229.551 18.1052 230.311 18.1052 231.191 cv
18.1052 232.311 17.8052 233.211 17.1852 233.871 cv
16.5652 234.531 15.7252 234.851 14.6652 234.851 cv
13.4452 234.851 12.5252 234.451 11.8852 233.611 cv
11.2652 232.791 10.9452 231.571 10.9452 229.931 cv
10.9452 227.411 li
10.7652 227.411 li
9.94517 227.411 9.30517 227.691 8.84517 228.231 cv
8.40517 228.771 8.16517 229.531 8.16517 230.511 cv
8.16517 231.151 8.24517 231.751 8.40517 232.351 cv
8.56517 232.951 8.78517 233.511 9.06517 234.051 cv
7.40517 234.051 li
7.16517 233.411 6.96516 232.771 6.84517 232.151 cv
6.72517 231.531 6.64517 230.931 6.64517 230.331 cv
6.64517 228.751 7.06517 227.571 7.88517 226.791 cv
8.70517 226.011 9.94517 225.611 11.6052 225.611 cv
f
3.80517 220.131 mo
6.90517 220.131 li
6.90517 216.431 li
8.30517 216.431 li
8.30517 220.131 li
14.2452 220.131 li
15.1452 220.131 15.7252 220.011 15.9652 219.771 cv
16.2252 219.531 16.3452 219.031 16.3452 218.271 cv
16.3452 216.431 li
17.8452 216.431 li
17.8452 218.271 li
17.8452 219.671 17.5852 220.631 17.0652 221.151 cv
16.5452 221.671 15.6052 221.931 14.2452 221.931 cv
8.30517 221.931 li
8.30517 223.251 li
6.90517 223.251 li
6.90517 221.931 li
3.80517 221.931 li
3.80517 220.131 li
f
11.9252 204.711 mo
12.8052 204.711 li
12.8052 212.971 li
14.0452 212.891 15.0052 212.531 15.6452 211.851 cv
16.2852 211.191 16.6052 210.271 16.6052 209.071 cv
16.6052 208.391 16.5252 207.711 16.3652 207.071 cv
16.2052 206.431 15.9452 205.771 15.5852 205.131 cv
17.2852 205.131 li
17.5652 205.771 17.7852 206.431 17.9052 207.111 cv
18.0252 207.791 18.1052 208.491 18.1052 209.171 cv
18.1052 210.931 17.6052 212.311 16.6052 213.331 cv
15.6052 214.351 14.2252 214.851 12.4852 214.851 cv
10.7052 214.851 9.28517 214.371 8.22517 213.411 cv
7.18517 212.451 6.64517 211.131 6.64517 209.491 cv
6.64517 208.011 7.12517 206.851 8.06517 205.991 cv
9.02517 205.151 10.3052 204.711 11.9252 204.711 cv
11.4052 206.511 mo
10.4252 206.531 9.64517 206.811 9.04517 207.331 cv
8.46516 207.871 8.16517 208.591 8.16517 209.471 cv
8.16517 210.471 8.46516 211.271 9.02517 211.871 cv
9.58517 212.471 10.3852 212.831 11.4052 212.911 cv
11.4052 206.511 li
f
1.5 lw
2 lc
113.496 506.815 mo
123.334 501.85 li
133.173 501.85 li
143.011 501.729 li
152.849 498.943 li
162.687 499.065 li
172.525 499.186 li
182.363 501.063 li
192.201 502.153 li
202.039 499.549 li
211.877 501.547 li
221.715 502.334 li
231.553 500.518 li
241.391 498.096 li
251.229 500.154 li
261.067 498.035 li
270.905 489.921 li
280.743 464.732 li
290.581 454.802 li
300.419 421.014 li
310.257 395.098 li
320.095 375.661 li
329.933 357.92 li
339.771 333.275 li
349.609 302.939 li
359.447 280.596 li
369.285 259.403 li
379.123 241.782 li
388.961 222.466 li
398.799 204.059 li
408.637 176.448 li
418.475 159.978 li
428.313 143.81 li
438.151 131.518 li
447.989 120.014 li
457.827 105.118 li
467.665 97.0648 li
477.503 89.3748 li
487.341 81.2004 li
497.179 76.6591 li
507.017 72.9655 li
516.855 69.9984 li
526.693 66.6682 li
536.531 63.3378 li
546.369 60.613 li
556.207 59.6442 li
566.045 57.4644 li
575.883 54.1946 li
585.721 52.1358 li
595.559 50.2587 li
605.397 48.8055 li
615.235 48.0789 li
625.073 46.8073 li
634.911 46.989 li
644.749 45.7174 li
654.587 43.5375 li
664.425 44.5063 li
674.263 41.4788 li
684.101 41.2972 li
693.939 40.5706 li
703.777 40.0861 li
713.615 40.3283 li
723.453 39.7228 li
733.292 38.9357 li
743.13 39.2384 li
752.968 39.3595 li
762.806 39.6623 li
772.644 37.4219 li
782.482 37.3613 li
792.32 37.4219 li
802.158 37.4219 li
811.996 37.6641 li
821.834 37.7246 li
831.672 37.6641 li
841.51 37.6641 li
851.348 37.6641 li
861.186 37.543 li
871.024 37.4824 li
880.862 37.4219 li
890.7 37.3613 li
900.538 37.3008 li
910.376 37.1797 li
920.214 37.1797 li
930.052 37.0586 li
939.89 36.998 li
949.728 36.998 li
959.566 36.8769 li
969.404 36.8163 li
979.242 36.8769 li
989.08 36.8163 li
998.918 36.8163 li
1008.76 36.6953 li
1018.59 36.6347 li
1028.43 36.5742 li
1038.27 36.4531 li
1048.11 36.1503 li
1057.95 36.1503 li
1067.78 36.1503 li
1077.62 36.0897 li
1087.46 35.9686 li
/1 
[/DeviceCMYK] /CSA add_res
0 .9617 .904814 0 cmyk
@
113.496 512.567 mo
123.334 520.015 li
133.173 520.015 li
143.011 520.015 li
152.849 516.836 li
162.687 515.292 li
172.525 516.201 li
182.363 517.654 li
192.201 518.653 li
202.039 516.11 li
211.877 518.017 li
221.715 518.29 li
231.553 515.928 li
241.391 513.567 li
251.229 515.02 li
261.067 510.66 li
270.905 500.669 li
280.743 471.241 li
290.581 459.161 li
300.419 420.741 li
310.257 390.314 li
320.095 369.969 li
329.933 351.35 li
339.771 329.188 li
349.609 295.582 li
359.447 272.966 li
369.285 251.985 li
379.123 232.367 li
388.961 210.023 li
398.799 192.13 li
408.637 167.88 li
418.475 146.535 li
428.313 130.005 li
438.151 119.56 li
447.989 109.75 li
457.827 94.6731 li
467.665 87.1345 li
477.503 78.5059 li
487.341 72.5113 li
497.179 67.5159 li
507.017 64.9727 li
516.855 60.613 li
526.693 58.1606 li
536.531 55.2542 li
546.369 53.4377 li
556.207 52.6202 li
566.045 50.9854 li
575.883 47.1707 li
585.721 46.2623 li
595.559 44.2642 li
605.397 43.9009 li
615.235 43.2651 li
625.073 42.6293 li
634.911 42.9926 li
644.749 41.9026 li
654.587 40.3586 li
664.425 40.5403 li
674.263 37.1797 li
684.101 37.3613 li
693.939 37.2705 li
703.777 37.3613 li
713.615 37.6338 li
723.453 37.543 li
733.292 36.8163 li
743.13 37.3613 li
752.968 37.2705 li
762.806 38.088 li
772.644 39.2687 li
782.482 39.632 li
792.32 39.632 li
802.158 39.2687 li
811.996 39.4503 li
821.834 39.632 li
831.672 39.5412 li
841.51 39.5412 li
851.348 39.5412 li
861.186 39.5412 li
871.024 39.632 li
880.862 39.4503 li
890.7 39.3595 li
900.538 39.5412 li
910.376 39.5412 li
920.214 39.7228 li
930.052 39.8137 li
939.89 39.8137 li
949.728 39.7228 li
959.566 39.7228 li
969.404 39.8137 li
979.242 39.632 li
989.08 39.632 li
998.918 39.7228 li
1008.76 39.632 li
1018.59 39.7228 li
1028.43 39.9045 li
1038.27 40.0861 li
1048.11 40.0861 li
1057.95 39.9953 li
1067.78 39.8137 li
1077.62 39.8137 li
1087.46 39.8137 li
@
gsave
109.996 516.067 mo
116.996 516.067 li
116.996 509.067 li
109.996 509.067 li
109.996 516.067 li
clp
110.496 515.567 mo
116.496 509.567 li
110.496 509.567 mo
116.496 515.567 li
f
1 lw
0 lc
110.496 515.567 mo
116.496 509.567 li
110.496 509.567 mo
116.496 515.567 li
@
grestore
gsave
119.834 523.515 mo
126.834 523.515 li
126.834 516.515 li
119.834 516.515 li
119.834 523.515 li
clp
120.334 523.015 mo
126.334 517.015 li
120.334 517.015 mo
126.334 523.015 li
f
1 lw
0 lc
120.334 523.015 mo
126.334 517.015 li
120.334 517.015 mo
126.334 523.015 li
@
grestore
gsave
129.673 523.515 mo
136.672 523.515 li
136.672 516.515 li
129.673 516.515 li
129.673 523.515 li
clp
130.173 523.015 mo
136.173 517.015 li
130.173 517.015 mo
136.173 523.015 li
f
1 lw
0 lc
130.173 523.015 mo
136.173 517.015 li
130.173 517.015 mo
136.173 523.015 li
@
grestore
gsave
139.511 523.515 mo
146.511 523.515 li
146.511 516.515 li
139.511 516.515 li
139.511 523.515 li
clp
140.011 523.015 mo
146.011 517.015 li
140.011 517.015 mo
146.011 523.015 li
f
1 lw
0 lc
140.011 523.015 mo
146.011 517.015 li
140.011 517.015 mo
146.011 523.015 li
@
grestore
gsave
149.349 520.336 mo
156.349 520.336 li
156.349 513.336 li
149.349 513.336 li
149.349 520.336 li
clp
149.849 519.836 mo
155.849 513.836 li
149.849 513.836 mo
155.849 519.836 li
f
1 lw
0 lc
149.849 519.836 mo
155.849 513.836 li
149.849 513.836 mo
155.849 519.836 li
@
grestore
gsave
159.187 518.792 mo
166.187 518.792 li
166.187 511.792 li
159.187 511.792 li
159.187 518.792 li
clp
159.687 518.292 mo
165.687 512.292 li
159.687 512.292 mo
165.687 518.292 li
f
1 lw
0 lc
159.687 518.292 mo
165.687 512.292 li
159.687 512.292 mo
165.687 518.292 li
@
grestore
gsave
169.024 519.7 mo
176.025 519.7 li
176.025 512.7 li
169.024 512.7 li
169.024 519.7 li
clp
169.525 519.201 mo
175.525 513.201 li
169.525 513.201 mo
175.525 519.201 li
f
1 lw
0 lc
169.525 519.201 mo
175.525 513.201 li
169.525 513.201 mo
175.525 519.201 li
@
grestore
gsave
178.862 521.154 mo
185.862 521.154 li
185.862 514.154 li
178.862 514.154 li
178.862 521.154 li
clp
179.363 520.654 mo
185.363 514.654 li
179.363 514.654 mo
185.363 520.654 li
f
1 lw
0 lc
179.363 520.654 mo
185.363 514.654 li
179.363 514.654 mo
185.363 520.654 li
@
grestore
gsave
188.701 522.153 mo
195.701 522.153 li
195.701 515.153 li
188.701 515.153 li
188.701 522.153 li
clp
189.201 521.653 mo
195.201 515.653 li
189.201 515.653 mo
195.201 521.653 li
f
1 lw
0 lc
189.201 521.653 mo
195.201 515.653 li
189.201 515.653 mo
195.201 521.653 li
@
grestore
gsave
198.539 519.61 mo
205.539 519.61 li
205.539 512.61 li
198.539 512.61 li
198.539 519.61 li
clp
199.039 519.11 mo
205.039 513.11 li
199.039 513.11 mo
205.039 519.11 li
f
1 lw
0 lc
199.039 519.11 mo
205.039 513.11 li
199.039 513.11 mo
205.039 519.11 li
@
grestore
gsave
208.377 521.517 mo
215.377 521.517 li
215.377 514.517 li
208.377 514.517 li
208.377 521.517 li
clp
208.877 521.017 mo
214.877 515.017 li
208.877 515.017 mo
214.877 521.017 li
f
1 lw
0 lc
208.877 521.017 mo
214.877 515.017 li
208.877 515.017 mo
214.877 521.017 li
@
grestore
gsave
218.215 521.79 mo
225.215 521.79 li
225.215 514.79 li
218.215 514.79 li
218.215 521.79 li
clp
218.715 521.29 mo
224.715 515.29 li
218.715 515.29 mo
224.715 521.29 li
f
1 lw
0 lc
218.715 521.29 mo
224.715 515.29 li
218.715 515.29 mo
224.715 521.29 li
@
grestore
gsave
228.053 519.428 mo
235.053 519.428 li
235.053 512.428 li
228.053 512.428 li
228.053 519.428 li
clp
228.553 518.928 mo
234.553 512.928 li
228.553 512.928 mo
234.553 518.928 li
f
1 lw
0 lc
228.553 518.928 mo
234.553 512.928 li
228.553 512.928 mo
234.553 518.928 li
@
grestore
gsave
237.891 517.066 mo
244.891 517.066 li
244.891 510.066 li
237.891 510.066 li
237.891 517.066 li
clp
238.391 516.567 mo
244.391 510.567 li
238.391 510.567 mo
244.391 516.567 li
f
1 lw
0 lc
238.391 516.567 mo
244.391 510.567 li
238.391 510.567 mo
244.391 516.567 li
@
grestore
gsave
247.729 518.52 mo
254.729 518.52 li
254.729 511.52 li
247.729 511.52 li
247.729 518.52 li
clp
248.229 518.02 mo
254.229 512.02 li
248.229 512.02 mo
254.229 518.02 li
f
1 lw
0 lc
248.229 518.02 mo
254.229 512.02 li
248.229 512.02 mo
254.229 518.02 li
@
grestore
gsave
257.567 514.16 mo
264.567 514.16 li
264.567 507.16 li
257.567 507.16 li
257.567 514.16 li
clp
258.067 513.66 mo
264.067 507.66 li
258.067 507.66 mo
264.067 513.66 li
f
1 lw
0 lc
258.067 513.66 mo
264.067 507.66 li
258.067 507.66 mo
264.067 513.66 li
@
grestore
gsave
267.405 504.169 mo
274.405 504.169 li
274.405 497.169 li
267.405 497.169 li
267.405 504.169 li
clp
267.905 503.669 mo
273.905 497.669 li
267.905 497.669 mo
273.905 503.669 li
f
1 lw
0 lc
267.905 503.669 mo
273.905 497.669 li
267.905 497.669 mo
273.905 503.669 li
@
grestore
gsave
277.243 474.741 mo
284.243 474.741 li
284.243 467.741 li
277.243 467.741 li
277.243 474.741 li
clp
277.743 474.241 mo
283.743 468.241 li
277.743 468.241 mo
283.743 474.241 li
f
1 lw
0 lc
277.743 474.241 mo
283.743 468.241 li
277.743 468.241 mo
283.743 474.241 li
@
grestore
gsave
287.081 462.661 mo
294.081 462.661 li
294.081 455.661 li
287.081 455.661 li
287.081 462.661 li
clp
287.581 462.161 mo
293.581 456.161 li
287.581 456.161 mo
293.581 462.161 li
f
1 lw
0 lc
287.581 462.161 mo
293.581 456.161 li
287.581 456.161 mo
293.581 462.161 li
@
grestore
gsave
296.919 424.242 mo
303.919 424.242 li
303.919 417.241 li
296.919 417.241 li
296.919 424.242 li
clp
297.419 423.742 mo
303.419 417.742 li
297.419 417.742 mo
303.419 423.742 li
f
1 lw
0 lc
297.419 423.742 mo
303.419 417.742 li
297.419 417.742 mo
303.419 423.742 li
@
grestore
gsave
306.757 393.815 mo
313.757 393.815 li
313.757 386.815 li
306.757 386.815 li
306.757 393.815 li
clp
307.257 393.315 mo
313.257 387.315 li
307.257 387.315 mo
313.257 393.315 li
f
1 lw
0 lc
307.257 393.315 mo
313.257 387.315 li
307.257 387.315 mo
313.257 393.315 li
@
grestore
gsave
316.595 373.469 mo
323.595 373.469 li
323.595 366.469 li
316.595 366.469 li
316.595 373.469 li
clp
317.095 372.969 mo
323.095 366.969 li
317.095 366.969 mo
323.095 372.969 li
f
1 lw
0 lc
317.095 372.969 mo
323.095 366.969 li
317.095 366.969 mo
323.095 372.969 li
@
grestore
gsave
326.433 354.85 mo
333.433 354.85 li
333.433 347.85 li
326.433 347.85 li
326.433 354.85 li
clp
326.933 354.35 mo
332.933 348.35 li
326.933 348.35 mo
332.933 354.35 li
f
1 lw
0 lc
326.933 354.35 mo
332.933 348.35 li
326.933 348.35 mo
332.933 354.35 li
@
grestore
gsave
336.271 332.688 mo
343.271 332.688 li
343.271 325.688 li
336.271 325.688 li
336.271 332.688 li
clp
336.771 332.188 mo
342.771 326.188 li
336.771 326.188 mo
342.771 332.188 li
f
1 lw
0 lc
336.771 332.188 mo
342.771 326.188 li
336.771 326.188 mo
342.771 332.188 li
@
grestore
gsave
346.109 299.082 mo
353.109 299.082 li
353.109 292.082 li
346.109 292.082 li
346.109 299.082 li
clp
346.609 298.582 mo
352.609 292.582 li
346.609 292.582 mo
352.609 298.582 li
f
1 lw
0 lc
346.609 298.582 mo
352.609 292.582 li
346.609 292.582 mo
352.609 298.582 li
@
grestore
gsave
355.947 276.466 mo
362.947 276.466 li
362.947 269.466 li
355.947 269.466 li
355.947 276.466 li
clp
356.447 275.966 mo
362.447 269.966 li
356.447 269.966 mo
362.447 275.966 li
f
1 lw
0 lc
356.447 275.966 mo
362.447 269.966 li
356.447 269.966 mo
362.447 275.966 li
@
grestore
gsave
365.785 255.485 mo
372.785 255.485 li
372.785 248.485 li
365.785 248.485 li
365.785 255.485 li
clp
366.285 254.985 mo
372.285 248.985 li
366.285 248.985 mo
372.285 254.985 li
f
1 lw
0 lc
366.285 254.985 mo
372.285 248.985 li
366.285 248.985 mo
372.285 254.985 li
@
grestore
gsave
375.623 235.867 mo
382.623 235.867 li
382.623 228.867 li
375.623 228.867 li
375.623 235.867 li
clp
376.123 235.367 mo
382.123 229.367 li
376.123 229.367 mo
382.123 235.367 li
f
1 lw
0 lc
376.123 235.367 mo
382.123 229.367 li
376.123 229.367 mo
382.123 235.367 li
@
grestore
gsave
385.461 213.523 mo
392.461 213.523 li
392.461 206.523 li
385.461 206.523 li
385.461 213.523 li
clp
385.961 213.023 mo
391.961 207.023 li
385.961 207.023 mo
391.961 213.023 li
f
1 lw
0 lc
385.961 213.023 mo
391.961 207.023 li
385.961 207.023 mo
391.961 213.023 li
@
grestore
gsave
395.299 195.63 mo
402.299 195.63 li
402.299 188.63 li
395.299 188.63 li
395.299 195.63 li
clp
395.799 195.13 mo
401.799 189.13 li
395.799 189.13 mo
401.799 195.13 li
f
1 lw
0 lc
395.799 195.13 mo
401.799 189.13 li
395.799 189.13 mo
401.799 195.13 li
@
grestore
gsave
405.137 171.379 mo
412.137 171.379 li
412.137 164.38 li
405.137 164.38 li
405.137 171.379 li
clp
405.637 170.88 mo
411.637 164.88 li
405.637 164.88 mo
411.637 170.88 li
f
1 lw
0 lc
405.637 170.88 mo
411.637 164.88 li
405.637 164.88 mo
411.637 170.88 li
@
grestore
gsave
414.975 150.035 mo
421.975 150.035 li
421.975 143.035 li
414.975 143.035 li
414.975 150.035 li
clp
415.475 149.535 mo
421.475 143.535 li
415.475 143.535 mo
421.475 149.535 li
f
1 lw
0 lc
415.475 149.535 mo
421.475 143.535 li
415.475 143.535 mo
421.475 149.535 li
@
grestore
gsave
424.813 133.505 mo
431.813 133.505 li
431.813 126.505 li
424.813 126.505 li
424.813 133.505 li
clp
425.313 133.005 mo
431.313 127.005 li
425.313 127.005 mo
431.313 133.005 li
f
1 lw
0 lc
425.313 133.005 mo
431.313 127.005 li
425.313 127.005 mo
431.313 133.005 li
@
grestore
gsave
434.651 123.06 mo
441.651 123.06 li
441.651 116.06 li
434.651 116.06 li
434.651 123.06 li
clp
435.151 122.56 mo
441.151 116.56 li
435.151 116.56 mo
441.151 122.56 li
f
1 lw
0 lc
435.151 122.56 mo
441.151 116.56 li
435.151 116.56 mo
441.151 122.56 li
@
grestore
gsave
444.489 113.251 mo
451.489 113.251 li
451.489 106.25 li
444.489 106.25 li
444.489 113.251 li
clp
444.989 112.75 mo
450.989 106.75 li
444.989 106.75 mo
450.989 112.75 li
f
1 lw
0 lc
444.989 112.75 mo
450.989 106.75 li
444.989 106.75 mo
450.989 112.75 li
@
grestore
gsave
454.327 98.1733 mo
461.327 98.1733 li
461.327 91.173 li
454.327 91.173 li
454.327 98.1733 li
clp
454.827 97.6732 mo
460.827 91.6732 li
454.827 91.6732 mo
460.827 97.6732 li
f
1 lw
0 lc
454.827 97.6732 mo
460.827 91.6732 li
454.827 91.6732 mo
460.827 97.6732 li
@
grestore
gsave
464.165 90.6345 mo
471.165 90.6345 li
471.165 83.6346 li
464.165 83.6346 li
464.165 90.6345 li
clp
464.665 90.1345 mo
470.665 84.1345 li
464.665 84.1345 mo
470.665 90.1345 li
f
1 lw
0 lc
464.665 90.1345 mo
470.665 84.1345 li
464.665 84.1345 mo
470.665 90.1345 li
@
grestore
gsave
474.003 82.006 mo
481.003 82.006 li
481.003 75.006 li
474.003 75.006 li
474.003 82.006 li
clp
474.503 81.506 mo
480.503 75.506 li
474.503 75.506 mo
480.503 81.506 li
f
1 lw
0 lc
474.503 81.506 mo
480.503 75.506 li
474.503 75.506 mo
480.503 81.506 li
@
grestore
gsave
483.841 76.0114 mo
490.841 76.0114 li
490.841 69.0114 li
483.841 69.0114 li
483.841 76.0114 li
clp
484.341 75.5114 mo
490.341 69.5114 li
484.341 69.5114 mo
490.341 75.5114 li
f
1 lw
0 lc
484.341 75.5114 mo
490.341 69.5114 li
484.341 69.5114 mo
490.341 75.5114 li
@
grestore
gsave
493.679 71.0159 mo
500.679 71.0159 li
500.679 64.0159 li
493.679 64.0159 li
493.679 71.0159 li
clp
494.179 70.5159 mo
500.179 64.5159 li
494.179 64.5159 mo
500.179 70.5159 li
f
1 lw
0 lc
494.179 70.5159 mo
500.179 64.5159 li
494.179 64.5159 mo
500.179 70.5159 li
@
grestore
gsave
503.517 68.4729 mo
510.517 68.4729 li
510.517 61.4727 li
503.517 61.4727 li
503.517 68.4729 li
clp
504.017 67.9728 mo
510.017 61.9728 li
504.017 61.9728 mo
510.017 67.9728 li
f
1 lw
0 lc
504.017 67.9728 mo
510.017 61.9728 li
504.017 61.9728 mo
510.017 67.9728 li
@
grestore
gsave
513.355 64.1132 mo
520.355 64.1132 li
520.355 57.1132 li
513.355 57.1132 li
513.355 64.1132 li
clp
513.855 63.6131 mo
519.855 57.6131 li
513.855 57.6131 mo
519.855 63.6131 li
f
1 lw
0 lc
513.855 63.6131 mo
519.855 57.6131 li
513.855 57.6131 mo
519.855 63.6131 li
@
grestore
gsave
523.193 61.6609 mo
530.193 61.6609 li
530.193 54.6606 li
523.193 54.6606 li
523.193 61.6609 li
clp
523.693 61.1608 mo
529.693 55.1608 li
523.693 55.1608 mo
529.693 61.1608 li
f
1 lw
0 lc
523.693 61.1608 mo
529.693 55.1608 li
523.693 55.1608 mo
529.693 61.1608 li
@
grestore
gsave
533.031 58.7543 mo
540.031 58.7543 li
540.031 51.7543 li
533.031 51.7543 li
533.031 58.7543 li
clp
533.531 58.2543 mo
539.531 52.2543 li
533.531 52.2543 mo
539.531 58.2543 li
f
1 lw
0 lc
533.531 58.2543 mo
539.531 52.2543 li
533.531 52.2543 mo
539.531 58.2543 li
@
grestore
gsave
542.869 56.9378 mo
549.869 56.9378 li
549.869 49.9378 li
542.869 49.9378 li
542.869 56.9378 li
clp
543.369 56.4378 mo
549.369 50.4378 li
543.369 50.4378 mo
549.369 56.4378 li
f
1 lw
0 lc
543.369 56.4378 mo
549.369 50.4378 li
543.369 50.4378 mo
549.369 56.4378 li
@
grestore
gsave
552.707 56.1203 mo
559.707 56.1203 li
559.707 49.1204 li
552.707 49.1204 li
552.707 56.1203 li
clp
553.207 55.6204 mo
559.207 49.6204 li
553.207 49.6204 mo
559.207 55.6204 li
f
1 lw
0 lc
553.207 55.6204 mo
559.207 49.6204 li
553.207 49.6204 mo
559.207 55.6204 li
@
grestore
gsave
562.545 54.4855 mo
569.545 54.4855 li
569.545 47.4856 li
562.545 47.4856 li
562.545 54.4855 li
clp
563.045 53.9855 mo
569.045 47.9855 li
563.045 47.9855 mo
569.045 53.9855 li
f
1 lw
0 lc
563.045 53.9855 mo
569.045 47.9855 li
563.045 47.9855 mo
569.045 53.9855 li
@
grestore
gsave
572.383 50.6708 mo
579.383 50.6708 li
579.383 43.6708 li
572.383 43.6708 li
572.383 50.6708 li
clp
572.883 50.1707 mo
578.883 44.1707 li
572.883 44.1707 mo
578.883 50.1707 li
f
1 lw
0 lc
572.883 50.1707 mo
578.883 44.1707 li
572.883 44.1707 mo
578.883 50.1707 li
@
grestore
gsave
582.221 49.7624 mo
589.221 49.7624 li
589.221 42.7624 li
582.221 42.7624 li
582.221 49.7624 li
clp
582.721 49.2625 mo
588.721 43.2625 li
582.721 43.2625 mo
588.721 49.2625 li
f
1 lw
0 lc
582.721 49.2625 mo
588.721 43.2625 li
582.721 43.2625 mo
588.721 49.2625 li
@
grestore
gsave
592.059 47.7642 mo
599.059 47.7642 li
599.059 40.7642 li
592.059 40.7642 li
592.059 47.7642 li
clp
592.559 47.2643 mo
598.559 41.2643 li
592.559 41.2643 mo
598.559 47.2643 li
f
1 lw
0 lc
592.559 47.2643 mo
598.559 41.2643 li
592.559 41.2643 mo
598.559 47.2643 li
@
grestore
gsave
601.897 47.4011 mo
608.897 47.4011 li
608.897 40.4008 li
601.897 40.4008 li
601.897 47.4011 li
clp
602.397 46.901 mo
608.397 40.901 li
602.397 40.901 mo
608.397 46.901 li
f
1 lw
0 lc
602.397 46.901 mo
608.397 40.901 li
602.397 40.901 mo
608.397 46.901 li
@
grestore
gsave
611.735 46.7651 mo
618.735 46.7651 li
618.735 39.7651 li
611.735 39.7651 li
611.735 46.7651 li
clp
612.235 46.2652 mo
618.235 40.2652 li
612.235 40.2652 mo
618.235 46.2652 li
f
1 lw
0 lc
612.235 46.2652 mo
618.235 40.2652 li
612.235 40.2652 mo
618.235 46.2652 li
@
grestore
gsave
621.573 46.1293 mo
628.573 46.1293 li
628.573 39.1294 li
621.573 39.1294 li
621.573 46.1293 li
clp
622.073 45.6294 mo
628.073 39.6294 li
622.073 39.6294 mo
628.073 45.6294 li
f
1 lw
0 lc
622.073 45.6294 mo
628.073 39.6294 li
622.073 39.6294 mo
628.073 45.6294 li
@
grestore
gsave
631.411 46.4927 mo
638.411 46.4927 li
638.411 39.4927 li
631.411 39.4927 li
631.411 46.4927 li
clp
631.911 45.9927 mo
637.911 39.9927 li
631.911 39.9927 mo
637.911 45.9927 li
f
1 lw
0 lc
631.911 45.9927 mo
637.911 39.9927 li
631.911 39.9927 mo
637.911 45.9927 li
@
grestore
gsave
641.249 45.4029 mo
648.249 45.4029 li
648.249 38.4026 li
641.249 38.4026 li
641.249 45.4029 li
clp
641.749 44.9028 mo
647.749 38.9028 li
641.749 38.9028 mo
647.749 44.9028 li
f
1 lw
0 lc
641.749 44.9028 mo
647.749 38.9028 li
641.749 38.9028 mo
647.749 44.9028 li
@
grestore
gsave
651.087 43.8588 mo
658.087 43.8588 li
658.087 36.8588 li
651.087 36.8588 li
651.087 43.8588 li
clp
651.587 43.3587 mo
657.587 37.3587 li
651.587 37.3587 mo
657.587 43.3587 li
f
1 lw
0 lc
651.587 43.3587 mo
657.587 37.3587 li
651.587 37.3587 mo
657.587 43.3587 li
@
grestore
gsave
660.925 44.0404 mo
667.925 44.0404 li
667.925 37.0405 li
660.925 37.0405 li
660.925 44.0404 li
clp
661.425 43.5403 mo
667.425 37.5403 li
661.425 37.5403 mo
667.425 43.5403 li
f
1 lw
0 lc
661.425 43.5403 mo
667.425 37.5403 li
661.425 37.5403 mo
667.425 43.5403 li
@
grestore
gsave
670.763 40.6798 mo
677.763 40.6798 li
677.763 33.6798 li
670.763 33.6798 li
670.763 40.6798 li
clp
671.263 40.1797 mo
677.263 34.1797 li
671.263 34.1797 mo
677.263 40.1797 li
f
1 lw
0 lc
671.263 40.1797 mo
677.263 34.1797 li
671.263 34.1797 mo
677.263 40.1797 li
@
grestore
gsave
680.601 40.8615 mo
687.601 40.8615 li
687.601 33.8615 li
680.601 33.8615 li
680.601 40.8615 li
clp
681.101 40.3614 mo
687.101 34.3614 li
681.101 34.3614 mo
687.101 40.3614 li
f
1 lw
0 lc
681.101 40.3614 mo
687.101 34.3614 li
681.101 34.3614 mo
687.101 40.3614 li
@
grestore
gsave
690.439 40.7704 mo
697.439 40.7704 li
697.439 33.7705 li
690.439 33.7705 li
690.439 40.7704 li
clp
690.939 40.2706 mo
696.939 34.2706 li
690.939 34.2706 mo
696.939 40.2706 li
f
1 lw
0 lc
690.939 40.2706 mo
696.939 34.2706 li
690.939 34.2706 mo
696.939 40.2706 li
@
grestore
gsave
700.277 40.8615 mo
707.277 40.8615 li
707.277 33.8615 li
700.277 33.8615 li
700.277 40.8615 li
clp
700.777 40.3614 mo
706.777 34.3614 li
700.777 34.3614 mo
706.777 40.3614 li
f
1 lw
0 lc
700.777 40.3614 mo
706.777 34.3614 li
700.777 34.3614 mo
706.777 40.3614 li
@
grestore
gsave
710.115 41.1338 mo
717.115 41.1338 li
717.115 34.1339 li
710.115 34.1339 li
710.115 41.1338 li
clp
710.615 40.6339 mo
716.615 34.6339 li
710.615 34.6339 mo
716.615 40.6339 li
f
1 lw
0 lc
710.615 40.6339 mo
716.615 34.6339 li
710.615 34.6339 mo
716.615 40.6339 li
@
grestore
gsave
719.953 41.0431 mo
726.953 41.0431 li
726.953 34.0432 li
719.953 34.0432 li
719.953 41.0431 li
clp
720.453 40.543 mo
726.453 34.543 li
720.453 34.543 mo
726.453 40.543 li
f
1 lw
0 lc
720.453 40.543 mo
726.453 34.543 li
720.453 34.543 mo
726.453 40.543 li
@
grestore
gsave
729.792 40.3164 mo
736.791 40.3164 li
736.791 33.3164 li
729.792 33.3164 li
729.792 40.3164 li
clp
730.291 39.8164 mo
736.291 33.8164 li
730.291 33.8164 mo
736.291 39.8164 li
f
1 lw
0 lc
730.291 39.8164 mo
736.291 33.8164 li
730.291 33.8164 mo
736.291 39.8164 li
@
grestore
gsave
739.629 40.8615 mo
746.63 40.8615 li
746.63 33.8615 li
739.629 33.8615 li
739.629 40.8615 li
clp
740.129 40.3614 mo
746.129 34.3614 li
740.129 34.3614 mo
746.129 40.3614 li
f
1 lw
0 lc
740.129 40.3614 mo
746.129 34.3614 li
740.129 34.3614 mo
746.129 40.3614 li
@
grestore
gsave
749.467 40.7704 mo
756.467 40.7704 li
756.467 33.7705 li
749.467 33.7705 li
749.467 40.7704 li
clp
749.967 40.2706 mo
755.967 34.2706 li
749.967 34.2706 mo
755.967 40.2706 li
f
1 lw
0 lc
749.967 40.2706 mo
755.967 34.2706 li
749.967 34.2706 mo
755.967 40.2706 li
@
grestore
gsave
759.305 41.5879 mo
766.305 41.5879 li
766.305 34.5879 li
759.305 34.5879 li
759.305 41.5879 li
clp
759.805 41.088 mo
765.805 35.088 li
759.805 35.088 mo
765.805 41.088 li
f
1 lw
0 lc
759.805 41.088 mo
765.805 35.088 li
759.805 35.088 mo
765.805 41.088 li
@
grestore
gsave
769.143 42.7686 mo
776.143 42.7686 li
776.143 35.7687 li
769.143 35.7687 li
769.143 42.7686 li
clp
769.643 42.2687 mo
775.643 36.2687 li
769.643 36.2687 mo
775.643 42.2687 li
f
1 lw
0 lc
769.643 42.2687 mo
775.643 36.2687 li
769.643 36.2687 mo
775.643 42.2687 li
@
grestore
gsave
778.981 43.132 mo
785.981 43.132 li
785.981 36.1321 li
778.981 36.1321 li
778.981 43.132 li
clp
779.481 42.632 mo
785.481 36.632 li
779.481 36.632 mo
785.481 42.632 li
f
1 lw
0 lc
779.481 42.632 mo
785.481 36.632 li
779.481 36.632 mo
785.481 42.632 li
@
grestore
gsave
788.82 43.132 mo
795.819 43.132 li
795.819 36.1321 li
788.82 36.1321 li
788.82 43.132 li
clp
789.319 42.632 mo
795.319 36.632 li
789.319 36.632 mo
795.319 42.632 li
f
1 lw
0 lc
789.319 42.632 mo
795.319 36.632 li
789.319 36.632 mo
795.319 42.632 li
@
grestore
gsave
798.658 42.7686 mo
805.658 42.7686 li
805.658 35.7687 li
798.658 35.7687 li
798.658 42.7686 li
clp
799.157 42.2687 mo
805.157 36.2687 li
799.157 36.2687 mo
805.157 42.2687 li
f
1 lw
0 lc
799.157 42.2687 mo
805.157 36.2687 li
799.157 36.2687 mo
805.157 42.2687 li
@
grestore
gsave
808.495 42.9503 mo
815.496 42.9503 li
815.496 35.9504 li
808.495 35.9504 li
808.495 42.9503 li
clp
808.995 42.4504 mo
814.995 36.4504 li
808.995 36.4504 mo
814.995 42.4504 li
f
1 lw
0 lc
808.995 42.4504 mo
814.995 36.4504 li
808.995 36.4504 mo
814.995 42.4504 li
@
grestore
gsave
818.333 43.132 mo
825.333 43.132 li
825.333 36.1321 li
818.333 36.1321 li
818.333 43.132 li
clp
818.833 42.632 mo
824.833 36.632 li
818.833 36.632 mo
824.833 42.632 li
f
1 lw
0 lc
818.833 42.632 mo
824.833 36.632 li
818.833 36.632 mo
824.833 42.632 li
@
grestore
gsave
828.171 43.0413 mo
835.171 43.0413 li
835.171 36.0411 li
828.171 36.0411 li
828.171 43.0413 li
clp
828.671 42.5412 mo
834.671 36.5412 li
828.671 36.5412 mo
834.671 42.5412 li
f
1 lw
0 lc
828.671 42.5412 mo
834.671 36.5412 li
828.671 36.5412 mo
834.671 42.5412 li
@
grestore
gsave
838.009 43.0413 mo
845.009 43.0413 li
845.009 36.0411 li
838.009 36.0411 li
838.009 43.0413 li
clp
838.509 42.5412 mo
844.509 36.5412 li
838.509 36.5412 mo
844.509 42.5412 li
f
1 lw
0 lc
838.509 42.5412 mo
844.509 36.5412 li
838.509 36.5412 mo
844.509 42.5412 li
@
grestore
gsave
847.848 43.0413 mo
854.847 43.0413 li
854.847 36.0411 li
847.848 36.0411 li
847.848 43.0413 li
clp
848.347 42.5412 mo
854.347 36.5412 li
848.347 36.5412 mo
854.347 42.5412 li
f
1 lw
0 lc
848.347 42.5412 mo
854.347 36.5412 li
848.347 36.5412 mo
854.347 42.5412 li
@
grestore
gsave
857.686 43.0413 mo
864.686 43.0413 li
864.686 36.0411 li
857.686 36.0411 li
857.686 43.0413 li
clp
858.185 42.5412 mo
864.185 36.5412 li
858.185 36.5412 mo
864.185 42.5412 li
f
1 lw
0 lc
858.185 42.5412 mo
864.185 36.5412 li
858.185 36.5412 mo
864.185 42.5412 li
@
grestore
gsave
867.524 43.132 mo
874.524 43.132 li
874.524 36.1321 li
867.524 36.1321 li
867.524 43.132 li
clp
868.023 42.632 mo
874.023 36.632 li
868.023 36.632 mo
874.023 42.632 li
f
1 lw
0 lc
868.023 42.632 mo
874.023 36.632 li
868.023 36.632 mo
874.023 42.632 li
@
grestore
gsave
877.361 42.9503 mo
884.362 42.9503 li
884.362 35.9504 li
877.361 35.9504 li
877.361 42.9503 li
clp
877.862 42.4504 mo
883.862 36.4504 li
877.862 36.4504 mo
883.862 42.4504 li
f
1 lw
0 lc
877.862 42.4504 mo
883.862 36.4504 li
877.862 36.4504 mo
883.862 42.4504 li
@
grestore
gsave
887.199 42.8597 mo
894.199 42.8597 li
894.199 35.8597 li
887.199 35.8597 li
887.199 42.8597 li
clp
887.7 42.3596 mo
893.7 36.3596 li
887.7 36.3596 mo
893.7 42.3596 li
f
1 lw
0 lc
887.7 42.3596 mo
893.7 36.3596 li
887.7 36.3596 mo
893.7 42.3596 li
@
grestore
gsave
897.037 43.0413 mo
904.037 43.0413 li
904.037 36.0411 li
897.037 36.0411 li
897.037 43.0413 li
clp
897.538 42.5412 mo
903.538 36.5412 li
897.538 36.5412 mo
903.538 42.5412 li
f
1 lw
0 lc
897.538 42.5412 mo
903.538 36.5412 li
897.538 36.5412 mo
903.538 42.5412 li
@
grestore
gsave
906.876 43.0413 mo
913.875 43.0413 li
913.875 36.0411 li
906.876 36.0411 li
906.876 43.0413 li
clp
907.376 42.5412 mo
913.376 36.5412 li
907.376 36.5412 mo
913.376 42.5412 li
f
1 lw
0 lc
907.376 42.5412 mo
913.376 36.5412 li
907.376 36.5412 mo
913.376 42.5412 li
@
grestore
gsave
916.714 43.2227 mo
923.714 43.2227 li
923.714 36.2227 li
916.714 36.2227 li
916.714 43.2227 li
clp
917.214 42.7228 mo
923.214 36.7228 li
917.214 36.7228 mo
923.214 42.7228 li
f
1 lw
0 lc
917.214 42.7228 mo
923.214 36.7228 li
917.214 36.7228 mo
923.214 42.7228 li
@
grestore
gsave
926.552 43.3137 mo
933.552 43.3137 li
933.552 36.3138 li
926.552 36.3138 li
926.552 43.3137 li
clp
927.052 42.8137 mo
933.052 36.8137 li
927.052 36.8137 mo
933.052 42.8137 li
f
1 lw
0 lc
927.052 42.8137 mo
933.052 36.8137 li
927.052 36.8137 mo
933.052 42.8137 li
@
grestore
gsave
936.39 43.3137 mo
943.39 43.3137 li
943.39 36.3138 li
936.39 36.3138 li
936.39 43.3137 li
clp
936.89 42.8137 mo
942.89 36.8137 li
936.89 36.8137 mo
942.89 42.8137 li
f
1 lw
0 lc
936.89 42.8137 mo
942.89 36.8137 li
936.89 36.8137 mo
942.89 42.8137 li
@
grestore
gsave
946.228 43.2227 mo
953.228 43.2227 li
953.228 36.2227 li
946.228 36.2227 li
946.228 43.2227 li
clp
946.728 42.7228 mo
952.728 36.7228 li
946.728 36.7228 mo
952.728 42.7228 li
f
1 lw
0 lc
946.728 42.7228 mo
952.728 36.7228 li
946.728 36.7228 mo
952.728 42.7228 li
@
grestore
gsave
956.066 43.2227 mo
963.066 43.2227 li
963.066 36.2227 li
956.066 36.2227 li
956.066 43.2227 li
clp
956.566 42.7228 mo
962.566 36.7228 li
956.566 36.7228 mo
962.566 42.7228 li
f
1 lw
0 lc
956.566 42.7228 mo
962.566 36.7228 li
956.566 36.7228 mo
962.566 42.7228 li
@
grestore
gsave
965.904 43.3137 mo
972.904 43.3137 li
972.904 36.3138 li
965.904 36.3138 li
965.904 43.3137 li
clp
966.404 42.8137 mo
972.404 36.8137 li
966.404 36.8137 mo
972.404 42.8137 li
f
1 lw
0 lc
966.404 42.8137 mo
972.404 36.8137 li
966.404 36.8137 mo
972.404 42.8137 li
@
grestore
gsave
975.742 43.132 mo
982.742 43.132 li
982.742 36.1321 li
975.742 36.1321 li
975.742 43.132 li
clp
976.242 42.632 mo
982.242 36.632 li
976.242 36.632 mo
982.242 42.632 li
f
1 lw
0 lc
976.242 42.632 mo
982.242 36.632 li
976.242 36.632 mo
982.242 42.632 li
@
grestore
gsave
985.58 43.132 mo
992.58 43.132 li
992.58 36.1321 li
985.58 36.1321 li
985.58 43.132 li
clp
986.08 42.632 mo
992.08 36.632 li
986.08 36.632 mo
992.08 42.632 li
f
1 lw
0 lc
986.08 42.632 mo
992.08 36.632 li
986.08 36.632 mo
992.08 42.632 li
@
grestore
gsave
995.418 43.2227 mo
1002.42 43.2227 li
1002.42 36.2227 li
995.418 36.2227 li
995.418 43.2227 li
clp
995.918 42.7228 mo
1001.92 36.7228 li
995.918 36.7228 mo
1001.92 42.7228 li
f
1 lw
0 lc
995.918 42.7228 mo
1001.92 36.7228 li
995.918 36.7228 mo
1001.92 42.7228 li
@
grestore
gsave
1005.26 43.132 mo
1012.26 43.132 li
1012.26 36.1321 li
1005.26 36.1321 li
1005.26 43.132 li
clp
1005.76 42.632 mo
1011.76 36.632 li
1005.76 36.632 mo
1011.76 42.632 li
f
1 lw
0 lc
1005.76 42.632 mo
1011.76 36.632 li
1005.76 36.632 mo
1011.76 42.632 li
@
grestore
gsave
1015.09 43.2227 mo
1022.09 43.2227 li
1022.09 36.2227 li
1015.09 36.2227 li
1015.09 43.2227 li
clp
1015.59 42.7228 mo
1021.59 36.7228 li
1015.59 36.7228 mo
1021.59 42.7228 li
f
1 lw
0 lc
1015.59 42.7228 mo
1021.59 36.7228 li
1015.59 36.7228 mo
1021.59 42.7228 li
@
grestore
gsave
1024.93 43.4044 mo
1031.93 43.4044 li
1031.93 36.4044 li
1024.93 36.4044 li
1024.93 43.4044 li
clp
1025.43 42.9045 mo
1031.43 36.9045 li
1025.43 36.9045 mo
1031.43 42.9045 li
f
1 lw
0 lc
1025.43 42.9045 mo
1031.43 36.9045 li
1025.43 36.9045 mo
1031.43 42.9045 li
@
grestore
gsave
1034.77 43.5861 mo
1041.77 43.5861 li
1041.77 36.5861 li
1034.77 36.5861 li
1034.77 43.5861 li
clp
1035.27 43.0861 mo
1041.27 37.0861 li
1035.27 37.0861 mo
1041.27 43.0861 li
f
1 lw
0 lc
1035.27 43.0861 mo
1041.27 37.0861 li
1035.27 37.0861 mo
1041.27 43.0861 li
@
grestore
gsave
1044.61 43.5861 mo
1051.61 43.5861 li
1051.61 36.5861 li
1044.61 36.5861 li
1044.61 43.5861 li
clp
1045.11 43.0861 mo
1051.11 37.0861 li
1045.11 37.0861 mo
1051.11 43.0861 li
f
1 lw
0 lc
1045.11 43.0861 mo
1051.11 37.0861 li
1045.11 37.0861 mo
1051.11 43.0861 li
@
grestore
gsave
1054.45 43.4954 mo
1061.45 43.4954 li
1061.45 36.4954 li
1054.45 36.4954 li
1054.45 43.4954 li
clp
1054.95 42.9953 mo
1060.95 36.9953 li
1054.95 36.9953 mo
1060.95 42.9953 li
f
1 lw
0 lc
1054.95 42.9953 mo
1060.95 36.9953 li
1054.95 36.9953 mo
1060.95 42.9953 li
@
grestore
gsave
1064.28 43.3137 mo
1071.28 43.3137 li
1071.28 36.3138 li
1064.28 36.3138 li
1064.28 43.3137 li
clp
1064.78 42.8137 mo
1070.78 36.8137 li
1064.78 36.8137 mo
1070.78 42.8137 li
f
1 lw
0 lc
1064.78 42.8137 mo
1070.78 36.8137 li
1064.78 36.8137 mo
1070.78 42.8137 li
@
grestore
gsave
1074.12 43.3137 mo
1081.12 43.3137 li
1081.12 36.3138 li
1074.12 36.3138 li
1074.12 43.3137 li
clp
1074.62 42.8137 mo
1080.62 36.8137 li
1074.62 36.8137 mo
1080.62 42.8137 li
f
1 lw
0 lc
1074.62 42.8137 mo
1080.62 36.8137 li
1074.62 36.8137 mo
1080.62 42.8137 li
@
grestore
gsave
1083.96 43.3137 mo
1090.96 43.3137 li
1090.96 36.3138 li
1083.96 36.3138 li
1083.96 43.3137 li
clp
1084.46 42.8137 mo
1090.46 36.8137 li
1084.46 36.8137 mo
1090.46 42.8137 li
f
1 lw
0 lc
1084.46 42.8137 mo
1090.46 36.8137 li
1084.46 36.8137 mo
1090.46 42.8137 li
@
grestore
113.496 462.794 mo
123.334 354.165 li
133.173 309.115 li
143.011 273.814 li
152.849 244.507 li
162.687 237.846 li
172.525 224.525 li
182.363 196.793 li
192.201 168.091 li
202.039 142.902 li
211.877 119.711 li
221.715 107.177 li
231.553 101.182 li
241.391 96.8832 li
251.229 92.6446 li
261.067 87.4977 li
270.905 84.4702 li
280.743 79.4445 li
290.581 76.7196 li
300.419 72.2994 li
310.257 70.3618 li
320.095 68.6058 li
329.933 66.0626 li
339.771 64.5488 li
349.609 59.2203 li
359.447 56.9194 li
369.285 54.9212 li
379.123 53.8918 li
388.961 52.7413 li
398.799 51.712 li
408.637 49.5927 li
418.475 47.2917 li
428.313 46.2018 li
438.151 44.5669 li
447.989 43.2348 li
457.827 42.8109 li
467.665 42.266 li
477.503 41.8421 li
487.341 41.7816 li
497.179 41.5394 li
507.017 41.3577 li
516.855 40.7522 li
526.693 40.4495 li
536.531 40.5706 li
546.369 40.7522 li
556.207 39.965 li
566.045 39.6017 li
575.883 38.9962 li
585.721 39.0568 li
595.559 39.7228 li
605.397 38.209 li
615.235 36.6347 li
625.073 36.0292 li
634.911 35.242 li
644.749 35.1815 li
654.587 35.5448 li
664.425 35.4843 li
674.263 35.6053 li
684.101 34.9998 li
693.939 35.4237 li
703.777 34.1521 li
713.615 33.9705 li
723.453 33.9099 li
733.292 34.3943 li
743.13 34.0916 li
752.968 34.8787 li
762.806 35.787 li
772.644 32.3356 li
782.482 32.6383 li
792.32 32.6383 li
802.158 32.6989 li
811.996 32.3356 li
821.834 32.5172 li
831.672 32.5172 li
841.51 32.4567 li
851.348 32.3961 li
861.186 32.3961 li
871.024 32.3961 li
880.862 32.3961 li
890.7 32.4567 li
900.538 32.3961 li
910.376 32.275 li
920.214 32.2145 li
930.052 32.275 li
939.89 32.275 li
949.728 32.275 li
959.566 32.3356 li
969.404 32.275 li
979.242 32.2145 li
989.08 32.1539 li
998.918 32.1539 li
1008.76 32.1539 li
1018.59 32.0934 li
1028.43 32.0934 li
1038.27 32.0328 li
1048.11 32.0934 li
1057.95 32.0934 li
1067.78 32.0934 li
1077.62 32.0328 li
1087.46 31.9117 li
1 /0 /CSD get_res sepcs
1 sep
@
113.496 455.891 mo
123.334 336.272 li
133.173 290.496 li
143.011 251.985 li
152.849 225.736 li
162.687 219.469 li
172.525 208.388 li
182.363 183.956 li
192.201 153.166 li
202.039 131.276 li
211.877 106.935 li
221.715 96.2171 li
231.553 90.1317 li
241.391 87.3161 li
251.229 81.8665 li
261.067 76.0536 li
270.905 72.6022 li
280.743 67.3342 li
290.581 65.336 li
300.419 62.8837 li
310.257 61.2488 li
320.095 60.5222 li
329.933 59.5231 li
339.771 57.7065 li
349.609 51.2578 li
359.447 49.3505 li
369.285 48.4422 li
379.123 47.6248 li
388.961 47.3523 li
398.799 44.9908 li
408.637 43.4467 li
418.475 41.721 li
428.313 41.5394 li
438.151 40.5403 li
447.989 39.632 li
457.827 39.8137 li
467.665 39.9045 li
477.503 39.2687 li
487.341 38.9962 li
497.179 38.8146 li
507.017 38.7238 li
516.855 38.3604 li
526.693 38.1788 li
536.531 37.543 li
546.369 37.9063 li
556.207 37.7246 li
566.045 37.4521 li
575.883 37.6338 li
585.721 37.6338 li
595.559 38.1788 li
605.397 36.4531 li
615.235 35.454 li
625.073 35.0906 li
634.911 34.9998 li
644.749 34.4549 li
654.587 34.5457 li
664.425 34.2732 li
674.263 34.2732 li
684.101 33.9099 li
693.939 34.0007 li
703.777 32.82 li
713.615 31.6392 li
723.453 31.9117 li
733.292 32.1842 li
743.13 32.3658 li
752.968 33.6375 li
762.806 33.5466 li
772.644 35.454 li
782.482 35.9081 li
792.32 36.0897 li
802.158 36.2714 li
811.996 36.2714 li
821.834 36.2714 li
831.672 36.3622 li
841.51 36.3622 li
851.348 36.3622 li
861.186 36.3622 li
871.024 36.3622 li
880.862 36.4531 li
890.7 36.4531 li
900.538 36.5439 li
910.376 36.6347 li
920.214 36.6347 li
930.052 36.6347 li
939.89 36.7255 li
949.728 36.8163 li
959.566 36.9072 li
969.404 36.9072 li
979.242 36.998 li
989.08 36.9072 li
998.918 36.9072 li
1008.76 36.998 li
1018.59 36.998 li
1028.43 36.998 li
1038.27 36.998 li
1048.11 36.998 li
1057.95 36.998 li
1067.78 36.998 li
1077.62 36.998 li
1087.46 36.998 li
@
gsave
109.996 459.392 mo
116.996 459.392 li
116.996 452.392 li
109.996 452.392 li
109.996 459.392 li
clp
110.496 458.891 mo
116.496 452.891 li
110.496 452.891 mo
116.496 458.891 li
f
1 lw
0 lc
110.496 458.891 mo
116.496 452.891 li
110.496 452.891 mo
116.496 458.891 li
@
grestore
gsave
119.834 339.773 mo
126.834 339.773 li
126.834 332.772 li
119.834 332.772 li
119.834 339.773 li
clp
120.334 339.273 mo
126.334 333.273 li
120.334 333.273 mo
126.334 339.273 li
f
1 lw
0 lc
120.334 339.273 mo
126.334 333.273 li
120.334 333.273 mo
126.334 339.273 li
@
grestore
gsave
129.673 293.996 mo
136.672 293.996 li
136.672 286.996 li
129.673 286.996 li
129.673 293.996 li
clp
130.173 293.496 mo
136.173 287.496 li
130.173 287.496 mo
136.173 293.496 li
f
1 lw
0 lc
130.173 293.496 mo
136.173 287.496 li
130.173 287.496 mo
136.173 293.496 li
@
grestore
gsave
139.511 255.485 mo
146.511 255.485 li
146.511 248.485 li
139.511 248.485 li
139.511 255.485 li
clp
140.011 254.985 mo
146.011 248.985 li
140.011 248.985 mo
146.011 254.985 li
f
1 lw
0 lc
140.011 254.985 mo
146.011 248.985 li
140.011 248.985 mo
146.011 254.985 li
@
grestore
gsave
149.349 229.236 mo
156.349 229.236 li
156.349 222.236 li
149.349 222.236 li
149.349 229.236 li
clp
149.849 228.736 mo
155.849 222.736 li
149.849 222.736 mo
155.849 228.736 li
f
1 lw
0 lc
149.849 228.736 mo
155.849 222.736 li
149.849 222.736 mo
155.849 228.736 li
@
grestore
gsave
159.187 222.969 mo
166.187 222.969 li
166.187 215.969 li
159.187 215.969 li
159.187 222.969 li
clp
159.687 222.469 mo
165.687 216.469 li
159.687 216.469 mo
165.687 222.469 li
f
1 lw
0 lc
159.687 222.469 mo
165.687 216.469 li
159.687 216.469 mo
165.687 222.469 li
@
grestore
gsave
169.024 211.888 mo
176.025 211.888 li
176.025 204.888 li
169.024 204.888 li
169.024 211.888 li
clp
169.525 211.388 mo
175.525 205.388 li
169.525 205.388 mo
175.525 211.388 li
f
1 lw
0 lc
169.525 211.388 mo
175.525 205.388 li
169.525 205.388 mo
175.525 211.388 li
@
grestore
gsave
178.862 187.456 mo
185.862 187.456 li
185.862 180.456 li
178.862 180.456 li
178.862 187.456 li
clp
179.363 186.956 mo
185.363 180.956 li
179.363 180.956 mo
185.363 186.956 li
f
1 lw
0 lc
179.363 186.956 mo
185.363 180.956 li
179.363 180.956 mo
185.363 186.956 li
@
grestore
gsave
188.701 156.666 mo
195.701 156.666 li
195.701 149.666 li
188.701 149.666 li
188.701 156.666 li
clp
189.201 156.166 mo
195.201 150.166 li
189.201 150.166 mo
195.201 156.166 li
f
1 lw
0 lc
189.201 156.166 mo
195.201 150.166 li
189.201 150.166 mo
195.201 156.166 li
@
grestore
gsave
198.539 134.776 mo
205.539 134.776 li
205.539 127.776 li
198.539 127.776 li
198.539 134.776 li
clp
199.039 134.276 mo
205.039 128.276 li
199.039 128.276 mo
205.039 134.276 li
f
1 lw
0 lc
199.039 134.276 mo
205.039 128.276 li
199.039 128.276 mo
205.039 134.276 li
@
grestore
gsave
208.377 110.435 mo
215.377 110.435 li
215.377 103.435 li
208.377 103.435 li
208.377 110.435 li
clp
208.877 109.935 mo
214.877 103.935 li
208.877 103.935 mo
214.877 109.935 li
f
1 lw
0 lc
208.877 109.935 mo
214.877 103.935 li
208.877 103.935 mo
214.877 109.935 li
@
grestore
gsave
218.215 99.7171 mo
225.215 99.7171 li
225.215 92.7172 li
218.215 92.7172 li
218.215 99.7171 li
clp
218.715 99.2171 mo
224.715 93.2171 li
218.715 93.2171 mo
224.715 99.2171 li
f
1 lw
0 lc
218.715 99.2171 mo
224.715 93.2171 li
218.715 93.2171 mo
224.715 99.2171 li
@
grestore
gsave
228.053 93.6318 mo
235.053 93.6318 li
235.053 86.6316 li
228.053 86.6316 li
228.053 93.6318 li
clp
228.553 93.1317 mo
234.553 87.1317 li
228.553 87.1317 mo
234.553 93.1317 li
f
1 lw
0 lc
228.553 93.1317 mo
234.553 87.1317 li
228.553 87.1317 mo
234.553 93.1317 li
@
grestore
gsave
237.891 90.8162 mo
244.891 90.8162 li
244.891 83.8159 li
237.891 83.8159 li
237.891 90.8162 li
clp
238.391 90.3161 mo
244.391 84.3161 li
238.391 84.3161 mo
244.391 90.3161 li
f
1 lw
0 lc
238.391 90.3161 mo
244.391 84.3161 li
238.391 84.3161 mo
244.391 90.3161 li
@
grestore
gsave
247.729 85.3667 mo
254.729 85.3667 li
254.729 78.3664 li
247.729 78.3664 li
247.729 85.3667 li
clp
248.229 84.8665 mo
254.229 78.8665 li
248.229 78.8665 mo
254.229 84.8665 li
f
1 lw
0 lc
248.229 84.8665 mo
254.229 78.8665 li
248.229 78.8665 mo
254.229 84.8665 li
@
grestore
gsave
257.567 79.5537 mo
264.567 79.5537 li
264.567 72.5535 li
257.567 72.5535 li
257.567 79.5537 li
clp
258.067 79.0536 mo
264.067 73.0536 li
258.067 73.0536 mo
264.067 79.0536 li
f
1 lw
0 lc
258.067 79.0536 mo
264.067 73.0536 li
258.067 73.0536 mo
264.067 79.0536 li
@
grestore
gsave
267.405 76.1021 mo
274.405 76.1021 li
274.405 69.1021 li
267.405 69.1021 li
267.405 76.1021 li
clp
267.905 75.6022 mo
273.905 69.6022 li
267.905 69.6022 mo
273.905 75.6022 li
f
1 lw
0 lc
267.905 75.6022 mo
273.905 69.6022 li
267.905 69.6022 mo
273.905 75.6022 li
@
grestore
gsave
277.243 70.8342 mo
284.243 70.8342 li
284.243 63.8342 li
277.243 63.8342 li
277.243 70.8342 li
clp
277.743 70.3342 mo
283.743 64.3342 li
277.743 64.3342 mo
283.743 70.3342 li
f
1 lw
0 lc
277.743 70.3342 mo
283.743 64.3342 li
277.743 64.3342 mo
283.743 70.3342 li
@
grestore
gsave
287.081 68.836 mo
294.081 68.836 li
294.081 61.836 li
287.081 61.836 li
287.081 68.836 li
clp
287.581 68.3361 mo
293.581 62.3361 li
287.581 62.3361 mo
293.581 68.3361 li
f
1 lw
0 lc
287.581 68.3361 mo
293.581 62.3361 li
287.581 62.3361 mo
293.581 68.3361 li
@
grestore
gsave
296.919 66.3837 mo
303.919 66.3837 li
303.919 59.3838 li
296.919 59.3838 li
296.919 66.3837 li
clp
297.419 65.8837 mo
303.419 59.8837 li
297.419 59.8837 mo
303.419 65.8837 li
f
1 lw
0 lc
297.419 65.8837 mo
303.419 59.8837 li
297.419 59.8837 mo
303.419 65.8837 li
@
grestore
gsave
306.757 64.7489 mo
313.757 64.7489 li
313.757 57.7489 li
306.757 57.7489 li
306.757 64.7489 li
clp
307.257 64.2488 mo
313.257 58.2488 li
307.257 58.2488 mo
313.257 64.2488 li
f
1 lw
0 lc
307.257 64.2488 mo
313.257 58.2488 li
307.257 58.2488 mo
313.257 64.2488 li
@
grestore
gsave
316.595 64.0221 mo
323.595 64.0221 li
323.595 57.0222 li
316.595 57.0222 li
316.595 64.0221 li
clp
317.095 63.5222 mo
323.095 57.5222 li
317.095 57.5222 mo
323.095 63.5222 li
f
1 lw
0 lc
317.095 63.5222 mo
323.095 57.5222 li
317.095 57.5222 mo
323.095 63.5222 li
@
grestore
gsave
326.433 63.023 mo
333.433 63.023 li
333.433 56.0231 li
326.433 56.0231 li
326.433 63.023 li
clp
326.933 62.5231 mo
332.933 56.5231 li
326.933 56.5231 mo
332.933 62.5231 li
f
1 lw
0 lc
326.933 62.5231 mo
332.933 56.5231 li
326.933 56.5231 mo
332.933 62.5231 li
@
grestore
gsave
336.271 61.2065 mo
343.271 61.2065 li
343.271 54.2066 li
336.271 54.2066 li
336.271 61.2065 li
clp
336.771 60.7066 mo
342.771 54.7066 li
336.771 54.7066 mo
342.771 60.7066 li
f
1 lw
0 lc
336.771 60.7066 mo
342.771 54.7066 li
336.771 54.7066 mo
342.771 60.7066 li
@
grestore
gsave
346.109 54.7579 mo
353.109 54.7579 li
353.109 47.7579 li
346.109 47.7579 li
346.109 54.7579 li
clp
346.609 54.2579 mo
352.609 48.2579 li
346.609 48.2579 mo
352.609 54.2579 li
f
1 lw
0 lc
346.609 54.2579 mo
352.609 48.2579 li
346.609 48.2579 mo
352.609 54.2579 li
@
grestore
gsave
355.947 52.8507 mo
362.947 52.8507 li
362.947 45.8504 li
355.947 45.8504 li
355.947 52.8507 li
clp
356.447 52.3505 mo
362.447 46.3505 li
356.447 46.3505 mo
362.447 52.3505 li
f
1 lw
0 lc
356.447 52.3505 mo
362.447 46.3505 li
356.447 46.3505 mo
362.447 52.3505 li
@
grestore
gsave
365.785 51.9422 mo
372.785 51.9422 li
372.785 44.9423 li
365.785 44.9423 li
365.785 51.9422 li
clp
366.285 51.4423 mo
372.285 45.4423 li
366.285 45.4423 mo
372.285 51.4423 li
f
1 lw
0 lc
366.285 51.4423 mo
372.285 45.4423 li
366.285 45.4423 mo
372.285 51.4423 li
@
grestore
gsave
375.623 51.1248 mo
382.623 51.1248 li
382.623 44.1249 li
375.623 44.1249 li
375.623 51.1248 li
clp
376.123 50.6248 mo
382.123 44.6248 li
376.123 44.6248 mo
382.123 50.6248 li
f
1 lw
0 lc
376.123 50.6248 mo
382.123 44.6248 li
376.123 44.6248 mo
382.123 50.6248 li
@
grestore
gsave
385.461 50.8525 mo
392.461 50.8525 li
392.461 43.8522 li
385.461 43.8522 li
385.461 50.8525 li
clp
385.961 50.3524 mo
391.961 44.3524 li
385.961 44.3524 mo
391.961 50.3524 li
f
1 lw
0 lc
385.961 50.3524 mo
391.961 44.3524 li
385.961 44.3524 mo
391.961 50.3524 li
@
grestore
gsave
395.299 48.4909 mo
402.299 48.4909 li
402.299 41.491 li
395.299 41.491 li
395.299 48.4909 li
clp
395.799 47.9908 mo
401.799 41.9908 li
395.799 41.9908 mo
401.799 47.9908 li
f
1 lw
0 lc
395.799 47.9908 mo
401.799 41.9908 li
395.799 41.9908 mo
401.799 47.9908 li
@
grestore
gsave
405.137 46.9467 mo
412.137 46.9467 li
412.137 39.9468 li
405.137 39.9468 li
405.137 46.9467 li
clp
405.637 46.4468 mo
411.637 40.4468 li
405.637 40.4468 mo
411.637 46.4468 li
f
1 lw
0 lc
405.637 46.4468 mo
411.637 40.4468 li
405.637 40.4468 mo
411.637 46.4468 li
@
grestore
gsave
414.975 45.2212 mo
421.975 45.2212 li
421.975 38.2209 li
414.975 38.2209 li
414.975 45.2212 li
clp
415.475 44.7211 mo
421.475 38.7211 li
415.475 38.7211 mo
421.475 44.7211 li
f
1 lw
0 lc
415.475 44.7211 mo
421.475 38.7211 li
415.475 38.7211 mo
421.475 44.7211 li
@
grestore
gsave
424.813 45.0396 mo
431.813 45.0396 li
431.813 38.0393 li
424.813 38.0393 li
424.813 45.0396 li
clp
425.313 44.5394 mo
431.313 38.5394 li
425.313 38.5394 mo
431.313 44.5394 li
f
1 lw
0 lc
425.313 44.5394 mo
431.313 38.5394 li
425.313 38.5394 mo
431.313 44.5394 li
@
grestore
gsave
434.651 44.0404 mo
441.651 44.0404 li
441.651 37.0405 li
434.651 37.0405 li
434.651 44.0404 li
clp
435.151 43.5403 mo
441.151 37.5403 li
435.151 37.5403 mo
441.151 43.5403 li
f
1 lw
0 lc
435.151 43.5403 mo
441.151 37.5403 li
435.151 37.5403 mo
441.151 43.5403 li
@
grestore
gsave
444.489 43.132 mo
451.489 43.132 li
451.489 36.1321 li
444.489 36.1321 li
444.489 43.132 li
clp
444.989 42.6321 mo
450.989 36.6321 li
444.989 36.6321 mo
450.989 42.6321 li
f
1 lw
0 lc
444.989 42.6321 mo
450.989 36.6321 li
444.989 36.6321 mo
450.989 42.6321 li
@
grestore
gsave
454.327 43.3137 mo
461.327 43.3137 li
461.327 36.3138 li
454.327 36.3138 li
454.327 43.3137 li
clp
454.827 42.8137 mo
460.827 36.8137 li
454.827 36.8137 mo
460.827 42.8137 li
f
1 lw
0 lc
454.827 42.8137 mo
460.827 36.8137 li
454.827 36.8137 mo
460.827 42.8137 li
@
grestore
gsave
464.165 43.4044 mo
471.165 43.4044 li
471.165 36.4044 li
464.165 36.4044 li
464.165 43.4044 li
clp
464.665 42.9045 mo
470.665 36.9045 li
464.665 36.9045 mo
470.665 42.9045 li
f
1 lw
0 lc
464.665 42.9045 mo
470.665 36.9045 li
464.665 36.9045 mo
470.665 42.9045 li
@
grestore
gsave
474.003 42.7686 mo
481.003 42.7686 li
481.003 35.7687 li
474.003 35.7687 li
474.003 42.7686 li
clp
474.503 42.2687 mo
480.503 36.2687 li
474.503 36.2687 mo
480.503 42.2687 li
f
1 lw
0 lc
474.503 42.2687 mo
480.503 36.2687 li
474.503 36.2687 mo
480.503 42.2687 li
@
grestore
gsave
483.841 42.4963 mo
490.841 42.4963 li
490.841 35.4963 li
483.841 35.4963 li
483.841 42.4963 li
clp
484.341 41.9963 mo
490.341 35.9963 li
484.341 35.9963 mo
490.341 41.9963 li
f
1 lw
0 lc
484.341 41.9963 mo
490.341 35.9963 li
484.341 35.9963 mo
490.341 41.9963 li
@
grestore
gsave
493.679 42.3146 mo
500.679 42.3146 li
500.679 35.3147 li
493.679 35.3147 li
493.679 42.3146 li
clp
494.179 41.8146 mo
500.179 35.8146 li
494.179 35.8146 mo
500.179 41.8146 li
f
1 lw
0 lc
494.179 41.8146 mo
500.179 35.8146 li
494.179 35.8146 mo
500.179 41.8146 li
@
grestore
gsave
503.517 42.2239 mo
510.517 42.2239 li
510.517 35.224 li
503.517 35.224 li
503.517 42.2239 li
clp
504.017 41.7238 mo
510.017 35.7238 li
504.017 35.7238 mo
510.017 41.7238 li
f
1 lw
0 lc
504.017 41.7238 mo
510.017 35.7238 li
504.017 35.7238 mo
510.017 41.7238 li
@
grestore
gsave
513.355 41.8606 mo
520.355 41.8606 li
520.355 34.8606 li
513.355 34.8606 li
513.355 41.8606 li
clp
513.855 41.3605 mo
519.855 35.3605 li
513.855 35.3605 mo
519.855 41.3605 li
f
1 lw
0 lc
513.855 41.3605 mo
519.855 35.3605 li
513.855 35.3605 mo
519.855 41.3605 li
@
grestore
gsave
523.193 41.6789 mo
530.193 41.6789 li
530.193 34.6789 li
523.193 34.6789 li
523.193 41.6789 li
clp
523.693 41.1789 mo
529.693 35.1789 li
523.693 35.1789 mo
529.693 41.1789 li
f
1 lw
0 lc
523.693 41.1789 mo
529.693 35.1789 li
523.693 35.1789 mo
529.693 41.1789 li
@
grestore
gsave
533.031 41.0431 mo
540.031 41.0431 li
540.031 34.0432 li
533.031 34.0432 li
533.031 41.0431 li
clp
533.531 40.5431 mo
539.531 34.5431 li
533.531 34.5431 mo
539.531 40.5431 li
f
1 lw
0 lc
533.531 40.5431 mo
539.531 34.5431 li
533.531 34.5431 mo
539.531 40.5431 li
@
grestore
gsave
542.869 41.4065 mo
549.869 41.4065 li
549.869 34.4062 li
542.869 34.4062 li
542.869 41.4065 li
clp
543.369 40.9064 mo
549.369 34.9064 li
543.369 34.9064 mo
549.369 40.9064 li
f
1 lw
0 lc
543.369 40.9064 mo
549.369 34.9064 li
543.369 34.9064 mo
549.369 40.9064 li
@
grestore
gsave
552.707 41.2248 mo
559.707 41.2248 li
559.707 34.2249 li
552.707 34.2249 li
552.707 41.2248 li
clp
553.207 40.7247 mo
559.207 34.7247 li
553.207 34.7247 mo
559.207 40.7247 li
f
1 lw
0 lc
553.207 40.7247 mo
559.207 34.7247 li
553.207 34.7247 mo
559.207 40.7247 li
@
grestore
gsave
562.545 40.9521 mo
569.545 40.9521 li
569.545 33.9522 li
562.545 33.9522 li
562.545 40.9521 li
clp
563.045 40.4523 mo
569.045 34.4523 li
563.045 34.4523 mo
569.045 40.4523 li
f
1 lw
0 lc
563.045 40.4523 mo
569.045 34.4523 li
563.045 34.4523 mo
569.045 40.4523 li
@
grestore
gsave
572.383 41.1338 mo
579.383 41.1338 li
579.383 34.1339 li
572.383 34.1339 li
572.383 41.1338 li
clp
572.883 40.6339 mo
578.883 34.6339 li
572.883 34.6339 mo
578.883 40.6339 li
f
1 lw
0 lc
572.883 40.6339 mo
578.883 34.6339 li
572.883 34.6339 mo
578.883 40.6339 li
@
grestore
gsave
582.221 41.1338 mo
589.221 41.1338 li
589.221 34.1339 li
582.221 34.1339 li
582.221 41.1338 li
clp
582.721 40.6339 mo
588.721 34.6339 li
582.721 34.6339 mo
588.721 40.6339 li
f
1 lw
0 lc
582.721 40.6339 mo
588.721 34.6339 li
582.721 34.6339 mo
588.721 40.6339 li
@
grestore
gsave
592.059 41.6789 mo
599.059 41.6789 li
599.059 34.6789 li
592.059 34.6789 li
592.059 41.6789 li
clp
592.559 41.1789 mo
598.559 35.1789 li
592.559 35.1789 mo
598.559 41.1789 li
f
1 lw
0 lc
592.559 41.1789 mo
598.559 35.1789 li
592.559 35.1789 mo
598.559 41.1789 li
@
grestore
gsave
601.897 39.953 mo
608.897 39.953 li
608.897 32.9531 li
601.897 32.9531 li
601.897 39.953 li
clp
602.397 39.4532 mo
608.397 33.4532 li
602.397 33.4532 mo
608.397 39.4532 li
f
1 lw
0 lc
602.397 39.4532 mo
608.397 33.4532 li
602.397 33.4532 mo
608.397 39.4532 li
@
grestore
gsave
611.735 38.9543 mo
618.735 38.9543 li
618.735 31.954 li
611.735 31.954 li
611.735 38.9543 li
clp
612.235 38.4541 mo
618.235 32.4541 li
612.235 32.4541 mo
618.235 38.4541 li
f
1 lw
0 lc
612.235 38.4541 mo
618.235 32.4541 li
612.235 32.4541 mo
618.235 38.4541 li
@
grestore
gsave
621.573 38.5909 mo
628.573 38.5909 li
628.573 31.5909 li
621.573 31.5909 li
621.573 38.5909 li
clp
622.073 38.0908 mo
628.073 32.0908 li
622.073 32.0908 mo
628.073 38.0908 li
f
1 lw
0 lc
622.073 38.0908 mo
628.073 32.0908 li
622.073 32.0908 mo
628.073 38.0908 li
@
grestore
gsave
631.411 38.4999 mo
638.411 38.4999 li
638.411 31.4999 li
631.411 31.4999 li
631.411 38.4999 li
clp
631.911 38 mo
637.911 32 li
631.911 32 mo
637.911 38 li
f
1 lw
0 lc
631.911 38 mo
637.911 32 li
631.911 32 mo
637.911 38 li
@
grestore
gsave
641.249 37.9552 mo
648.249 37.9552 li
648.249 30.9549 li
641.249 30.9549 li
641.249 37.9552 li
clp
641.749 37.455 mo
647.749 31.455 li
641.749 31.455 mo
647.749 37.455 li
f
1 lw
0 lc
641.749 37.455 mo
647.749 31.455 li
641.749 31.455 mo
647.749 37.455 li
@
grestore
gsave
651.087 38.0458 mo
658.087 38.0458 li
658.087 31.0459 li
651.087 31.0459 li
651.087 38.0458 li
clp
651.587 37.5458 mo
657.587 31.5458 li
651.587 31.5458 mo
657.587 37.5458 li
f
1 lw
0 lc
651.587 37.5458 mo
657.587 31.5458 li
651.587 31.5458 mo
657.587 37.5458 li
@
grestore
gsave
660.925 37.7735 mo
667.925 37.7735 li
667.925 30.7735 li
660.925 30.7735 li
660.925 37.7735 li
clp
661.425 37.2734 mo
667.425 31.2734 li
661.425 31.2734 mo
667.425 37.2734 li
f
1 lw
0 lc
661.425 37.2734 mo
667.425 31.2734 li
661.425 31.2734 mo
667.425 37.2734 li
@
grestore
gsave
670.763 37.7735 mo
677.763 37.7735 li
677.763 30.7735 li
670.763 30.7735 li
670.763 37.7735 li
clp
671.263 37.2734 mo
677.263 31.2734 li
671.263 31.2734 mo
677.263 37.2734 li
f
1 lw
0 lc
671.263 37.2734 mo
677.263 31.2734 li
671.263 31.2734 mo
677.263 37.2734 li
@
grestore
gsave
680.601 37.4101 mo
687.601 37.4101 li
687.601 30.4102 li
680.601 30.4102 li
680.601 37.4101 li
clp
681.101 36.9101 mo
687.101 30.9101 li
681.101 30.9101 mo
687.101 36.9101 li
f
1 lw
0 lc
681.101 36.9101 mo
687.101 30.9101 li
681.101 30.9101 mo
687.101 36.9101 li
@
grestore
gsave
690.439 37.5008 mo
697.439 37.5008 li
697.439 30.5008 li
690.439 30.5008 li
690.439 37.5008 li
clp
690.939 37.0009 mo
696.939 31.0009 li
690.939 31.0009 mo
696.939 37.0009 li
f
1 lw
0 lc
690.939 37.0009 mo
696.939 31.0009 li
690.939 31.0009 mo
696.939 37.0009 li
@
grestore
gsave
700.277 36.3203 mo
707.277 36.3203 li
707.277 29.32 li
700.277 29.32 li
700.277 36.3203 li
clp
700.777 35.8202 mo
706.777 29.8202 li
700.777 29.8202 mo
706.777 35.8202 li
f
1 lw
0 lc
700.777 35.8202 mo
706.777 29.8202 li
700.777 29.8202 mo
706.777 35.8202 li
@
grestore
gsave
710.115 35.1395 mo
717.115 35.1395 li
717.115 28.1396 li
710.115 28.1396 li
710.115 35.1395 li
clp
710.615 34.6395 mo
716.615 28.6395 li
710.615 28.6395 mo
716.615 34.6395 li
f
1 lw
0 lc
710.615 34.6395 mo
716.615 28.6395 li
710.615 28.6395 mo
716.615 34.6395 li
@
grestore
gsave
719.953 35.4119 mo
726.953 35.4119 li
726.953 28.412 li
719.953 28.412 li
719.953 35.4119 li
clp
720.453 34.9119 mo
726.453 28.9119 li
720.453 28.9119 mo
726.453 34.9119 li
f
1 lw
0 lc
720.453 34.9119 mo
726.453 28.9119 li
720.453 28.9119 mo
726.453 34.9119 li
@
grestore
gsave
729.792 35.6843 mo
736.791 35.6843 li
736.791 28.6843 li
729.792 28.6843 li
729.792 35.6843 li
clp
730.291 35.1844 mo
736.291 29.1844 li
730.291 29.1844 mo
736.291 35.1844 li
f
1 lw
0 lc
730.291 35.1844 mo
736.291 29.1844 li
730.291 29.1844 mo
736.291 35.1844 li
@
grestore
gsave
739.629 35.8659 mo
746.63 35.8659 li
746.63 28.866 li
739.629 28.866 li
739.629 35.8659 li
clp
740.129 35.366 mo
746.129 29.366 li
740.129 29.366 mo
746.129 35.366 li
f
1 lw
0 lc
740.129 35.366 mo
746.129 29.366 li
740.129 29.366 mo
746.129 35.366 li
@
grestore
gsave
749.467 37.1374 mo
756.467 37.1374 li
756.467 30.1375 li
749.467 30.1375 li
749.467 37.1374 li
clp
749.967 36.6376 mo
755.967 30.6376 li
749.967 30.6376 mo
755.967 36.6376 li
f
1 lw
0 lc
749.967 36.6376 mo
755.967 30.6376 li
749.967 30.6376 mo
755.967 36.6376 li
@
grestore
gsave
759.305 37.0467 mo
766.305 37.0467 li
766.305 30.0468 li
759.305 30.0468 li
759.305 37.0467 li
clp
759.805 36.5468 mo
765.805 30.5468 li
759.805 30.5468 mo
765.805 36.5468 li
f
1 lw
0 lc
759.805 36.5468 mo
765.805 30.5468 li
759.805 30.5468 mo
765.805 36.5468 li
@
grestore
gsave
769.143 38.9543 mo
776.143 38.9543 li
776.143 31.954 li
769.143 31.954 li
769.143 38.9543 li
clp
769.643 38.4541 mo
775.643 32.4541 li
769.643 32.4541 mo
775.643 38.4541 li
f
1 lw
0 lc
769.643 38.4541 mo
775.643 32.4541 li
769.643 32.4541 mo
775.643 38.4541 li
@
grestore
gsave
778.981 39.4083 mo
785.981 39.4083 li
785.981 32.4084 li
778.981 32.4084 li
778.981 39.4083 li
clp
779.481 38.9083 mo
785.481 32.9083 li
779.481 32.9083 mo
785.481 38.9083 li
f
1 lw
0 lc
779.481 38.9083 mo
785.481 32.9083 li
779.481 32.9083 mo
785.481 38.9083 li
@
grestore
gsave
788.82 39.59 mo
795.819 39.59 li
795.819 32.59 li
788.82 32.59 li
788.82 39.59 li
clp
789.319 39.0899 mo
795.319 33.0899 li
789.319 33.0899 mo
795.319 39.0899 li
f
1 lw
0 lc
789.319 39.0899 mo
795.319 33.0899 li
789.319 33.0899 mo
795.319 39.0899 li
@
grestore
gsave
798.658 39.7717 mo
805.658 39.7717 li
805.658 32.7714 li
798.658 32.7714 li
798.658 39.7717 li
clp
799.157 39.2715 mo
805.157 33.2715 li
799.157 33.2715 mo
805.157 39.2715 li
f
1 lw
0 lc
799.157 39.2715 mo
805.157 33.2715 li
799.157 33.2715 mo
805.157 39.2715 li
@
grestore
gsave
808.495 39.7717 mo
815.496 39.7717 li
815.496 32.7714 li
808.495 32.7714 li
808.495 39.7717 li
clp
808.995 39.2715 mo
814.995 33.2715 li
808.995 33.2715 mo
814.995 39.2715 li
f
1 lw
0 lc
808.995 39.2715 mo
814.995 33.2715 li
808.995 33.2715 mo
814.995 39.2715 li
@
grestore
gsave
818.333 39.7717 mo
825.333 39.7717 li
825.333 32.7714 li
818.333 32.7714 li
818.333 39.7717 li
clp
818.833 39.2715 mo
824.833 33.2715 li
818.833 33.2715 mo
824.833 39.2715 li
f
1 lw
0 lc
818.833 39.2715 mo
824.833 33.2715 li
818.833 33.2715 mo
824.833 39.2715 li
@
grestore
gsave
828.171 39.8624 mo
835.171 39.8624 li
835.171 32.8624 li
828.171 32.8624 li
828.171 39.8624 li
clp
828.671 39.3624 mo
834.671 33.3624 li
828.671 33.3624 mo
834.671 39.3624 li
f
1 lw
0 lc
828.671 39.3624 mo
834.671 33.3624 li
828.671 33.3624 mo
834.671 39.3624 li
@
grestore
gsave
838.009 39.8624 mo
845.009 39.8624 li
845.009 32.8624 li
838.009 32.8624 li
838.009 39.8624 li
clp
838.509 39.3624 mo
844.509 33.3624 li
838.509 33.3624 mo
844.509 39.3624 li
f
1 lw
0 lc
838.509 39.3624 mo
844.509 33.3624 li
838.509 33.3624 mo
844.509 39.3624 li
@
grestore
gsave
847.848 39.8624 mo
854.847 39.8624 li
854.847 32.8624 li
847.848 32.8624 li
847.848 39.8624 li
clp
848.347 39.3624 mo
854.347 33.3624 li
848.347 33.3624 mo
854.347 39.3624 li
f
1 lw
0 lc
848.347 39.3624 mo
854.347 33.3624 li
848.347 33.3624 mo
854.347 39.3624 li
@
grestore
gsave
857.686 39.8624 mo
864.686 39.8624 li
864.686 32.8624 li
857.686 32.8624 li
857.686 39.8624 li
clp
858.185 39.3624 mo
864.185 33.3624 li
858.185 33.3624 mo
864.185 39.3624 li
f
1 lw
0 lc
858.185 39.3624 mo
864.185 33.3624 li
858.185 33.3624 mo
864.185 39.3624 li
@
grestore
gsave
867.524 39.8624 mo
874.524 39.8624 li
874.524 32.8624 li
867.524 32.8624 li
867.524 39.8624 li
clp
868.023 39.3624 mo
874.023 33.3624 li
868.023 33.3624 mo
874.023 39.3624 li
f
1 lw
0 lc
868.023 39.3624 mo
874.023 33.3624 li
868.023 33.3624 mo
874.023 39.3624 li
@
grestore
gsave
877.361 39.953 mo
884.362 39.953 li
884.362 32.9531 li
877.361 32.9531 li
877.361 39.953 li
clp
877.862 39.4532 mo
883.862 33.4532 li
877.862 33.4532 mo
883.862 39.4532 li
f
1 lw
0 lc
877.862 39.4532 mo
883.862 33.4532 li
877.862 33.4532 mo
883.862 39.4532 li
@
grestore
gsave
887.199 39.953 mo
894.199 39.953 li
894.199 32.9531 li
887.199 32.9531 li
887.199 39.953 li
clp
887.7 39.4532 mo
893.7 33.4532 li
887.7 33.4532 mo
893.7 39.4532 li
f
1 lw
0 lc
887.7 39.4532 mo
893.7 33.4532 li
887.7 33.4532 mo
893.7 39.4532 li
@
grestore
gsave
897.037 40.044 mo
904.037 40.044 li
904.037 33.0441 li
897.037 33.0441 li
897.037 40.044 li
clp
897.538 39.544 mo
903.538 33.544 li
897.538 33.544 mo
903.538 39.544 li
f
1 lw
0 lc
897.538 39.544 mo
903.538 33.544 li
897.538 33.544 mo
903.538 39.544 li
@
grestore
gsave
906.876 40.1347 mo
913.875 40.1347 li
913.875 33.1348 li
906.876 33.1348 li
906.876 40.1347 li
clp
907.376 39.6348 mo
913.376 33.6348 li
907.376 33.6348 mo
913.376 39.6348 li
f
1 lw
0 lc
907.376 39.6348 mo
913.376 33.6348 li
907.376 33.6348 mo
913.376 39.6348 li
@
grestore
gsave
916.714 40.1347 mo
923.714 40.1347 li
923.714 33.1348 li
916.714 33.1348 li
916.714 40.1347 li
clp
917.214 39.6348 mo
923.214 33.6348 li
917.214 33.6348 mo
923.214 39.6348 li
f
1 lw
0 lc
917.214 39.6348 mo
923.214 33.6348 li
917.214 33.6348 mo
923.214 39.6348 li
@
grestore
gsave
926.552 40.1347 mo
933.552 40.1347 li
933.552 33.1348 li
926.552 33.1348 li
926.552 40.1347 li
clp
927.052 39.6348 mo
933.052 33.6348 li
927.052 33.6348 mo
933.052 39.6348 li
f
1 lw
0 lc
927.052 39.6348 mo
933.052 33.6348 li
927.052 33.6348 mo
933.052 39.6348 li
@
grestore
gsave
936.39 40.2257 mo
943.39 40.2257 li
943.39 33.2258 li
936.39 33.2258 li
936.39 40.2257 li
clp
936.89 39.7256 mo
942.89 33.7256 li
936.89 33.7256 mo
942.89 39.7256 li
f
1 lw
0 lc
936.89 39.7256 mo
942.89 33.7256 li
936.89 33.7256 mo
942.89 39.7256 li
@
grestore
gsave
946.228 40.3164 mo
953.228 40.3164 li
953.228 33.3164 li
946.228 33.3164 li
946.228 40.3164 li
clp
946.728 39.8165 mo
952.728 33.8165 li
946.728 33.8165 mo
952.728 39.8165 li
f
1 lw
0 lc
946.728 39.8165 mo
952.728 33.8165 li
946.728 33.8165 mo
952.728 39.8165 li
@
grestore
gsave
956.066 40.4074 mo
963.066 40.4074 li
963.066 33.4071 li
956.066 33.4071 li
956.066 40.4074 li
clp
956.566 39.9073 mo
962.566 33.9073 li
956.566 33.9073 mo
962.566 39.9073 li
f
1 lw
0 lc
956.566 39.9073 mo
962.566 33.9073 li
956.566 33.9073 mo
962.566 39.9073 li
@
grestore
gsave
965.904 40.4074 mo
972.904 40.4074 li
972.904 33.4071 li
965.904 33.4071 li
965.904 40.4074 li
clp
966.404 39.9073 mo
972.404 33.9073 li
966.404 33.9073 mo
972.404 39.9073 li
f
1 lw
0 lc
966.404 39.9073 mo
972.404 33.9073 li
966.404 33.9073 mo
972.404 39.9073 li
@
grestore
gsave
975.742 40.4981 mo
982.742 40.4981 li
982.742 33.4981 li
975.742 33.4981 li
975.742 40.4981 li
clp
976.242 39.9981 mo
982.242 33.9981 li
976.242 33.9981 mo
982.242 39.9981 li
f
1 lw
0 lc
976.242 39.9981 mo
982.242 33.9981 li
976.242 33.9981 mo
982.242 39.9981 li
@
grestore
gsave
985.58 40.4074 mo
992.58 40.4074 li
992.58 33.4071 li
985.58 33.4071 li
985.58 40.4074 li
clp
986.08 39.9073 mo
992.08 33.9073 li
986.08 33.9073 mo
992.08 39.9073 li
f
1 lw
0 lc
986.08 39.9073 mo
992.08 33.9073 li
986.08 33.9073 mo
992.08 39.9073 li
@
grestore
gsave
995.418 40.4074 mo
1002.42 40.4074 li
1002.42 33.4071 li
995.418 33.4071 li
995.418 40.4074 li
clp
995.918 39.9073 mo
1001.92 33.9073 li
995.918 33.9073 mo
1001.92 39.9073 li
f
1 lw
0 lc
995.918 39.9073 mo
1001.92 33.9073 li
995.918 33.9073 mo
1001.92 39.9073 li
@
grestore
gsave
1005.26 40.4981 mo
1012.26 40.4981 li
1012.26 33.4981 li
1005.26 33.4981 li
1005.26 40.4981 li
clp
1005.76 39.9981 mo
1011.76 33.9981 li
1005.76 33.9981 mo
1011.76 39.9981 li
f
1 lw
0 lc
1005.76 39.9981 mo
1011.76 33.9981 li
1005.76 33.9981 mo
1011.76 39.9981 li
@
grestore
gsave
1015.09 40.4981 mo
1022.09 40.4981 li
1022.09 33.4981 li
1015.09 33.4981 li
1015.09 40.4981 li
clp
1015.59 39.9981 mo
1021.59 33.9981 li
1015.59 33.9981 mo
1021.59 39.9981 li
f
1 lw
0 lc
1015.59 39.9981 mo
1021.59 33.9981 li
1015.59 33.9981 mo
1021.59 39.9981 li
@
grestore
gsave
1024.93 40.4981 mo
1031.93 40.4981 li
1031.93 33.4981 li
1024.93 33.4981 li
1024.93 40.4981 li
clp
1025.43 39.9981 mo
1031.43 33.9981 li
1025.43 33.9981 mo
1031.43 39.9981 li
f
1 lw
0 lc
1025.43 39.9981 mo
1031.43 33.9981 li
1025.43 33.9981 mo
1031.43 39.9981 li
@
grestore
gsave
1034.77 40.4981 mo
1041.77 40.4981 li
1041.77 33.4981 li
1034.77 33.4981 li
1034.77 40.4981 li
clp
1035.27 39.9981 mo
1041.27 33.9981 li
1035.27 33.9981 mo
1041.27 39.9981 li
f
1 lw
0 lc
1035.27 39.9981 mo
1041.27 33.9981 li
1035.27 33.9981 mo
1041.27 39.9981 li
@
grestore
gsave
1044.61 40.4981 mo
1051.61 40.4981 li
1051.61 33.4981 li
1044.61 33.4981 li
1044.61 40.4981 li
clp
1045.11 39.9981 mo
1051.11 33.9981 li
1045.11 33.9981 mo
1051.11 39.9981 li
f
1 lw
0 lc
1045.11 39.9981 mo
1051.11 33.9981 li
1045.11 33.9981 mo
1051.11 39.9981 li
@
grestore
gsave
1054.45 40.4981 mo
1061.45 40.4981 li
1061.45 33.4981 li
1054.45 33.4981 li
1054.45 40.4981 li
clp
1054.95 39.9981 mo
1060.95 33.9981 li
1054.95 33.9981 mo
1060.95 39.9981 li
f
1 lw
0 lc
1054.95 39.9981 mo
1060.95 33.9981 li
1054.95 33.9981 mo
1060.95 39.9981 li
@
grestore
gsave
1064.28 40.4981 mo
1071.28 40.4981 li
1071.28 33.4981 li
1064.28 33.4981 li
1064.28 40.4981 li
clp
1064.78 39.9981 mo
1070.78 33.9981 li
1064.78 33.9981 mo
1070.78 39.9981 li
f
1 lw
0 lc
1064.78 39.9981 mo
1070.78 33.9981 li
1064.78 33.9981 mo
1070.78 39.9981 li
@
grestore
gsave
1074.12 40.4981 mo
1081.12 40.4981 li
1081.12 33.4981 li
1074.12 33.4981 li
1074.12 40.4981 li
clp
1074.62 39.9981 mo
1080.62 33.9981 li
1074.62 33.9981 mo
1080.62 39.9981 li
f
1 lw
0 lc
1074.62 39.9981 mo
1080.62 33.9981 li
1074.62 33.9981 mo
1080.62 39.9981 li
@
grestore
gsave
1083.96 40.4981 mo
1090.96 40.4981 li
1090.96 33.4981 li
1083.96 33.4981 li
1083.96 40.4981 li
clp
1084.46 39.9981 mo
1090.46 33.9981 li
1084.46 33.9981 mo
1090.46 39.9981 li
f
1 lw
0 lc
1084.46 39.9981 mo
1090.46 33.9981 li
1084.46 33.9981 mo
1090.46 39.9981 li
@
grestore
.8 lw
0 lj
64.7983 544.434 mo
64.7983 7.22046 li
@
1136.16 544.434 mo
1136.16 7.22046 li
@
64.7983 544.434 mo
1136.16 544.434 li
@
64.7983 7.22046 mo
1136.16 7.22046 li
@
1129.16 538.934 mo
723.439 538.934 li
722.85 538.932 722.502 538.79 722.293 538.581 cv
722.083 538.371 721.941 538.024 721.94 537.434 cv
721.94 440.997 li
721.941 440.407 722.083 440.059 722.293 439.85 cv
722.502 439.641 722.85 439.498 723.439 439.496 cv
1129.16 439.496 li
1129.75 439.498 1130.1 439.641 1130.3 439.85 cv
1130.51 440.059 1130.66 440.407 1130.66 440.997 cv
1130.66 537.434 li
1130.66 538.024 1130.51 538.371 1130.3 538.581 cv
1130.1 538.79 1129.75 538.932 1129.16 538.934 cv
0 0 0 0 cmyk
f
1129.17 539.934 mo
1129.17 539.934 1129.16 539.934 1129.16 539.934 cv
723.439 539.934 li
723.436 539.934 723.433 539.934 723.429 539.934 cv
722.69 539.934 722.042 539.743 721.586 539.288 cv
721.129 538.83 720.938 538.177 720.939 537.434 cv
720.939 440.997 li
720.938 440.253 721.129 439.601 721.586 439.143 cv
722.042 438.688 722.69 438.497 723.429 438.497 cv
723.433 438.497 723.436 438.497 723.439 438.497 cv
1129.16 438.497 li
1129.16 438.497 1129.17 438.497 1129.17 438.497 cv
1129.91 438.497 1130.56 438.688 1131.01 439.143 cv
1131.47 439.601 1131.66 440.253 1131.66 440.997 cv
1131.66 537.434 li
1131.66 538.177 1131.47 538.83 1131.01 539.288 cv
1130.56 539.743 1129.91 539.934 1129.17 539.934 cv
723.439 538.934 mo
1129.16 538.934 li
1129.75 538.932 1130.1 538.79 1130.3 538.581 cv
1130.51 538.371 1130.66 538.024 1130.66 537.434 cv
1130.66 440.997 li
1130.66 440.407 1130.51 440.059 1130.3 439.85 cv
1130.1 439.641 1129.75 439.498 1129.16 439.496 cv
723.439 439.496 li
722.85 439.498 722.502 439.641 722.293 439.85 cv
722.083 440.059 721.941 440.407 721.94 440.997 cv
721.94 537.434 li
721.941 538.024 722.083 538.371 722.293 538.581 cv
722.502 538.79 722.85 538.932 723.439 538.934 cv
723.439 538.934 li
.194827 .146395 .141878 0 cmyk
f
1.5 lw
1 lj
725.44 454.7 mo
745.44 454.7 li
0 .9617 .904814 0 cmyk
@
757.38 451.24 mo
757.38 456.58 li
760.539 456.58 li
761.599 456.58 762.38 456.36 762.9 455.92 cv
763.4 455.48 763.659 454.82 763.659 453.9 cv
763.659 453 763.4 452.34 762.9 451.9 cv
762.38 451.46 761.599 451.24 760.539 451.24 cv
757.38 451.24 li
757.38 445.24 mo
757.38 449.64 li
760.299 449.64 li
761.26 449.64 761.96 449.46 762.44 449.1 cv
762.919 448.74 763.159 448.2 763.159 447.44 cv
763.159 446.72 762.919 446.16 762.44 445.8 cv
761.96 445.44 761.26 445.24 760.299 445.24 cv
757.38 445.24 li
755.4 443.62 mo
760.44 443.62 li
761.94 443.62 763.099 443.94 763.919 444.56 cv
764.72 445.2 765.14 446.08 765.14 447.22 cv
765.14 448.12 764.919 448.84 764.5 449.36 cv
764.08 449.88 763.479 450.22 762.68 450.34 cv
763.64 450.56 764.4 451 764.94 451.66 cv
765.46 452.32 765.74 453.14 765.74 454.12 cv
765.74 455.44 765.28 456.44 764.4 457.14 cv
763.52 457.86 762.26 458.2 760.64 458.2 cv
755.4 458.2 li
755.4 443.62 li
1 /0 /CSD get_res sepcs
1 sep
f
774.02 452.7 mo
772.56 452.7 771.56 452.88 771 453.2 cv
770.44 453.54 770.16 454.1 770.16 454.9 cv
770.16 455.54 770.36 456.06 770.78 456.42 cv
771.2 456.8 771.78 456.98 772.5 456.98 cv
773.5 456.98 774.3 456.64 774.9 455.92 cv
775.5 455.22 775.8 454.28 775.8 453.1 cv
775.8 452.7 li
774.02 452.7 li
777.6 451.96 mo
777.6 458.2 li
775.8 458.2 li
775.8 456.54 li
775.38 457.22 774.86 457.7 774.26 458 cv
773.66 458.3 772.9 458.46 772.02 458.46 cv
770.9 458.46 770 458.16 769.34 457.54 cv
768.68 456.92 768.36 456.08 768.36 455.02 cv
768.36 453.8 768.76 452.88 769.6 452.24 cv
770.42 451.62 771.64 451.3 773.28 451.3 cv
775.8 451.3 li
775.8 451.12 li
775.8 450.3 775.52 449.66 774.98 449.2 cv
774.44 448.76 773.68 448.52 772.7 448.52 cv
772.06 448.52 771.46 448.6 770.86 448.76 cv
770.26 448.92 769.7 449.14 769.16 449.42 cv
769.16 447.76 li
769.8 447.52 770.44 447.32 771.06 447.2 cv
771.68 447.08 772.28 447 772.88 447 cv
774.46 447 775.64 447.42 776.42 448.24 cv
777.2 449.06 777.6 450.3 777.6 451.96 cv
f
789.18 447.68 mo
789.18 449.36 li
788.66 449.08 788.16 448.88 787.64 448.74 cv
787.12 448.6 786.62 448.52 786.1 448.52 cv
784.94 448.52 784.02 448.9 783.38 449.64 cv
782.74 450.38 782.42 451.42 782.42 452.74 cv
782.42 454.08 782.74 455.12 783.38 455.86 cv
784.02 456.6 784.94 456.96 786.1 456.96 cv
786.62 456.96 787.12 456.9 787.64 456.76 cv
788.16 456.62 788.66 456.4 789.18 456.12 cv
789.18 457.78 li
788.66 458.02 788.14 458.2 787.62 458.3 cv
787.08 458.4 786.5 458.46 785.9 458.46 cv
784.26 458.46 782.94 457.96 781.98 456.92 cv
781 455.9 780.52 454.5 780.52 452.74 cv
780.52 450.96 781 449.56 781.98 448.54 cv
782.96 447.52 784.3 447 786.02 447 cv
786.58 447 787.12 447.06 787.64 447.18 cv
788.16 447.3 788.68 447.46 789.18 447.68 cv
f
792.24 443 mo
794.04 443 li
794.04 451.98 li
799.4 447.26 li
801.7 447.26 li
795.9 452.38 li
801.94 458.2 li
799.6 458.2 li
794.04 452.86 li
794.04 458.2 li
792.24 458.2 li
792.24 443 li
f
811.98 456.56 mo
811.98 462.34 li
810.18 462.34 li
810.18 447.26 li
811.98 447.26 li
811.98 448.92 li
812.34 448.28 812.82 447.8 813.4 447.48 cv
813.98 447.16 814.68 447 815.48 447 cv
816.8 447 817.88 447.54 818.72 448.58 cv
819.54 449.64 819.96 451.02 819.96 452.74 cv
819.96 454.46 819.54 455.86 818.72 456.9 cv
817.88 457.94 816.8 458.46 815.48 458.46 cv
814.68 458.46 813.98 458.3 813.4 458 cv
812.82 457.7 812.34 457.22 811.98 456.56 cv
818.1 452.74 mo
818.1 451.42 817.82 450.4 817.28 449.64 cv
816.72 448.88 815.98 448.5 815.04 448.5 cv
814.08 448.5 813.34 448.88 812.8 449.64 cv
812.24 450.4 811.98 451.42 811.98 452.74 cv
811.98 454.06 812.24 455.1 812.8 455.86 cv
813.34 456.62 814.08 456.98 815.04 456.98 cv
815.98 456.98 816.72 456.62 817.28 455.86 cv
817.82 455.1 818.1 454.06 818.1 452.74 cv
f
829.279 448.94 mo
829.079 448.82 828.859 448.74 828.619 448.68 cv
828.379 448.64 828.119 448.6 827.839 448.6 cv
826.819 448.6 826.039 448.94 825.499 449.6 cv
824.939 450.26 824.679 451.2 824.679 452.44 cv
824.679 458.2 li
822.879 458.2 li
822.879 447.26 li
824.679 447.26 li
824.679 448.96 li
825.039 448.3 825.539 447.8 826.139 447.48 cv
826.739 447.16 827.479 447 828.359 447 cv
828.479 447 828.619 447.02 828.779 447.02 cv
828.919 447.04 829.079 447.06 829.279 447.1 cv
829.279 448.94 li
f
835.399 448.52 mo
834.439 448.52 833.679 448.9 833.119 449.66 cv
832.559 450.42 832.279 451.44 832.279 452.74 cv
832.279 454.06 832.539 455.08 833.099 455.84 cv
833.659 456.6 834.419 456.96 835.399 456.96 cv
836.359 456.96 837.119 456.6 837.679 455.84 cv
838.239 455.08 838.519 454.06 838.519 452.74 cv
838.519 451.46 838.239 450.42 837.679 449.66 cv
837.119 448.9 836.359 448.52 835.399 448.52 cv
835.399 447 mo
836.959 447 838.179 447.52 839.079 448.52 cv
839.959 449.54 840.419 450.94 840.419 452.74 cv
840.419 454.54 839.959 455.94 839.079 456.94 cv
838.179 457.96 836.959 458.46 835.399 458.46 cv
833.819 458.46 832.579 457.96 831.699 456.94 cv
830.819 455.94 830.379 454.54 830.379 452.74 cv
830.379 450.94 830.819 449.54 831.699 448.52 cv
832.579 447.52 833.819 447 835.399 447 cv
f
845.139 456.56 mo
845.139 462.34 li
843.339 462.34 li
843.339 447.26 li
845.139 447.26 li
845.139 448.92 li
845.499 448.28 845.979 447.8 846.559 447.48 cv
847.139 447.16 847.839 447 848.639 447 cv
849.959 447 851.039 447.54 851.879 448.58 cv
852.699 449.64 853.119 451.02 853.119 452.74 cv
853.119 454.46 852.699 455.86 851.879 456.9 cv
851.039 457.94 849.959 458.46 848.639 458.46 cv
847.839 458.46 847.139 458.3 846.559 458 cv
845.979 457.7 845.499 457.22 845.139 456.56 cv
851.259 452.74 mo
851.259 451.42 850.979 450.4 850.439 449.64 cv
849.879 448.88 849.139 448.5 848.199 448.5 cv
847.239 448.5 846.499 448.88 845.959 449.64 cv
845.399 450.4 845.139 451.42 845.139 452.74 cv
845.139 454.06 845.399 455.1 845.959 455.86 cv
846.499 456.62 847.239 456.98 848.199 456.98 cv
849.139 456.98 849.879 456.62 850.439 455.86 cv
850.979 455.1 851.259 454.06 851.259 452.74 cv
f
861.079 452.7 mo
859.619 452.7 858.619 452.88 858.059 453.2 cv
857.499 453.54 857.219 454.1 857.219 454.9 cv
857.219 455.54 857.419 456.06 857.839 456.42 cv
858.259 456.8 858.839 456.98 859.559 456.98 cv
860.559 456.98 861.359 456.64 861.959 455.92 cv
862.559 455.22 862.859 454.28 862.859 453.1 cv
862.859 452.7 li
861.079 452.7 li
864.659 451.96 mo
864.659 458.2 li
862.859 458.2 li
862.859 456.54 li
862.439 457.22 861.919 457.7 861.319 458 cv
860.719 458.3 859.959 458.46 859.079 458.46 cv
857.959 458.46 857.059 458.16 856.399 457.54 cv
855.739 456.92 855.419 456.08 855.419 455.02 cv
855.419 453.8 855.819 452.88 856.659 452.24 cv
857.479 451.62 858.699 451.3 860.339 451.3 cv
862.859 451.3 li
862.859 451.12 li
862.859 450.3 862.579 449.66 862.039 449.2 cv
861.499 448.76 860.739 448.52 859.759 448.52 cv
859.119 448.52 858.519 448.6 857.919 448.76 cv
857.319 448.92 856.759 449.14 856.219 449.42 cv
856.219 447.76 li
856.859 447.52 857.499 447.32 858.119 447.2 cv
858.739 447.08 859.339 447 859.939 447 cv
861.519 447 862.699 447.42 863.479 448.24 cv
864.259 449.06 864.659 450.3 864.659 451.96 cv
f
875.559 452.6 mo
875.559 451.32 875.279 450.3 874.759 449.58 cv
874.219 448.86 873.459 448.5 872.499 448.5 cv
871.539 448.5 870.779 448.86 870.239 449.58 cv
869.699 450.3 869.439 451.32 869.439 452.6 cv
869.439 453.9 869.699 454.9 870.239 455.62 cv
870.779 456.34 871.539 456.7 872.499 456.7 cv
873.459 456.7 874.219 456.34 874.759 455.62 cv
875.279 454.9 875.559 453.9 875.559 452.6 cv
877.359 456.84 mo
877.359 458.68 876.939 460.06 876.119 460.98 cv
875.279 461.88 874.019 462.34 872.319 462.34 cv
871.679 462.34 871.099 462.28 870.539 462.2 cv
869.979 462.1 869.419 461.96 868.899 461.76 cv
868.899 460.02 li
869.419 460.3 869.939 460.5 870.459 460.64 cv
870.979 460.78 871.499 460.86 872.039 460.86 cv
873.199 460.86 874.079 460.54 874.679 459.94 cv
875.259 459.32 875.559 458.4 875.559 457.16 cv
875.559 456.28 li
875.179 456.92 874.699 457.4 874.119 457.72 cv
873.539 458.04 872.859 458.2 872.059 458.2 cv
870.699 458.2 869.619 457.7 868.799 456.68 cv
867.979 455.66 867.579 454.3 867.579 452.6 cv
867.579 450.92 867.979 449.56 868.799 448.54 cv
869.619 447.52 870.699 447 872.059 447 cv
872.859 447 873.539 447.16 874.119 447.48 cv
874.699 447.8 875.179 448.28 875.559 448.92 cv
875.559 447.26 li
877.359 447.26 li
877.359 456.84 li
f
886.039 452.7 mo
884.579 452.7 883.579 452.88 883.019 453.2 cv
882.459 453.54 882.179 454.1 882.179 454.9 cv
882.179 455.54 882.379 456.06 882.799 456.42 cv
883.219 456.8 883.799 456.98 884.519 456.98 cv
885.519 456.98 886.319 456.64 886.919 455.92 cv
887.519 455.22 887.819 454.28 887.819 453.1 cv
887.819 452.7 li
886.039 452.7 li
889.619 451.96 mo
889.619 458.2 li
887.819 458.2 li
887.819 456.54 li
887.399 457.22 886.879 457.7 886.279 458 cv
885.679 458.3 884.919 458.46 884.039 458.46 cv
882.919 458.46 882.019 458.16 881.359 457.54 cv
880.699 456.92 880.379 456.08 880.379 455.02 cv
880.379 453.8 880.779 452.88 881.619 452.24 cv
882.439 451.62 883.659 451.3 885.299 451.3 cv
887.819 451.3 li
887.819 451.12 li
887.819 450.3 887.539 449.66 886.999 449.2 cv
886.459 448.76 885.699 448.52 884.719 448.52 cv
884.079 448.52 883.479 448.6 882.879 448.76 cv
882.279 448.92 881.719 449.14 881.179 449.42 cv
881.179 447.76 li
881.819 447.52 882.459 447.32 883.079 447.2 cv
883.699 447.08 884.299 447 884.899 447 cv
886.479 447 887.659 447.42 888.439 448.24 cv
889.219 449.06 889.619 450.3 889.619 451.96 cv
f
895.099 444.16 mo
895.099 447.26 li
898.799 447.26 li
898.799 448.66 li
895.099 448.66 li
895.099 454.6 li
895.099 455.5 895.219 456.08 895.459 456.32 cv
895.699 456.58 896.199 456.7 896.959 456.7 cv
898.799 456.7 li
898.799 458.2 li
896.959 458.2 li
895.559 458.2 894.599 457.94 894.079 457.42 cv
893.559 456.9 893.299 455.96 893.299 454.6 cv
893.299 448.66 li
891.979 448.66 li
891.979 447.26 li
893.299 447.26 li
893.299 444.16 li
895.099 444.16 li
f
901.159 447.26 mo
902.959 447.26 li
902.959 458.2 li
901.159 458.2 li
901.159 447.26 li
901.159 443 mo
902.959 443 li
902.959 445.28 li
901.159 445.28 li
901.159 443 li
f
910.959 448.52 mo
909.999 448.52 909.239 448.9 908.679 449.66 cv
908.119 450.42 907.839 451.44 907.839 452.74 cv
907.839 454.06 908.099 455.08 908.659 455.84 cv
909.219 456.6 909.979 456.96 910.959 456.96 cv
911.919 456.96 912.679 456.6 913.239 455.84 cv
913.799 455.08 914.079 454.06 914.079 452.74 cv
914.079 451.46 913.799 450.42 913.239 449.66 cv
912.679 448.9 911.919 448.52 910.959 448.52 cv
910.959 447 mo
912.519 447 913.739 447.52 914.639 448.52 cv
915.519 449.54 915.979 450.94 915.979 452.74 cv
915.979 454.54 915.519 455.94 914.639 456.94 cv
913.739 457.96 912.519 458.46 910.959 458.46 cv
909.379 458.46 908.139 457.96 907.259 456.94 cv
906.379 455.94 905.939 454.54 905.939 452.74 cv
905.939 450.94 906.379 449.54 907.259 448.52 cv
908.139 447.52 909.379 447 910.959 447 cv
f
928.059 451.6 mo
928.059 458.2 li
926.259 458.2 li
926.259 451.66 li
926.259 450.62 926.039 449.86 925.639 449.34 cv
925.239 448.82 924.639 448.56 923.839 448.56 cv
922.859 448.56 922.099 448.88 921.539 449.5 cv
920.979 450.12 920.699 450.96 920.699 452.02 cv
920.699 458.2 li
918.899 458.2 li
918.899 447.26 li
920.699 447.26 li
920.699 448.96 li
921.119 448.32 921.619 447.82 922.219 447.5 cv
922.799 447.18 923.479 447 924.239 447 cv
925.479 447 926.439 447.4 927.079 448.18 cv
927.719 448.96 928.059 450.1 928.059 451.6 cv
f
942.319 443.02 mo
941.439 444.54 940.799 446.02 940.379 447.48 cv
939.939 448.94 939.739 450.42 939.739 451.92 cv
939.739 453.44 939.939 454.92 940.379 456.38 cv
940.799 457.86 941.439 459.32 942.319 460.82 cv
940.759 460.82 li
939.779 459.28 939.039 457.8 938.559 456.32 cv
938.079 454.84 937.839 453.38 937.839 451.92 cv
937.839 450.48 938.079 449.02 938.559 447.54 cv
939.039 446.06 939.759 444.56 940.759 443.02 cv
942.319 443.02 li
f
943.879 443.62 mo
956.199 443.62 li
956.199 445.28 li
951.019 445.28 li
951.019 458.2 li
949.039 458.2 li
949.039 445.28 li
943.879 445.28 li
943.879 443.62 li
f
964.359 448.94 mo
964.159 448.82 963.939 448.74 963.699 448.68 cv
963.459 448.64 963.199 448.6 962.919 448.6 cv
961.899 448.6 961.119 448.94 960.579 449.6 cv
960.019 450.26 959.759 451.2 959.759 452.44 cv
959.759 458.2 li
957.959 458.2 li
957.959 447.26 li
959.759 447.26 li
959.759 448.96 li
960.119 448.3 960.619 447.8 961.219 447.48 cv
961.819 447.16 962.559 447 963.439 447 cv
963.559 447 963.699 447.02 963.859 447.02 cv
963.999 447.04 964.159 447.06 964.359 447.1 cv
964.359 448.94 li
f
971.219 452.7 mo
969.759 452.7 968.759 452.88 968.199 453.2 cv
967.639 453.54 967.359 454.1 967.359 454.9 cv
967.359 455.54 967.559 456.06 967.979 456.42 cv
968.399 456.8 968.979 456.98 969.699 456.98 cv
970.699 456.98 971.499 456.64 972.099 455.92 cv
972.699 455.22 972.999 454.28 972.999 453.1 cv
972.999 452.7 li
971.219 452.7 li
974.799 451.96 mo
974.799 458.2 li
972.999 458.2 li
972.999 456.54 li
972.579 457.22 972.059 457.7 971.459 458 cv
970.859 458.3 970.099 458.46 969.219 458.46 cv
968.099 458.46 967.199 458.16 966.539 457.54 cv
965.879 456.92 965.559 456.08 965.559 455.02 cv
965.559 453.8 965.959 452.88 966.799 452.24 cv
967.619 451.62 968.839 451.3 970.479 451.3 cv
972.999 451.3 li
972.999 451.12 li
972.999 450.3 972.719 449.66 972.179 449.2 cv
971.639 448.76 970.879 448.52 969.899 448.52 cv
969.259 448.52 968.659 448.6 968.059 448.76 cv
967.459 448.92 966.899 449.14 966.359 449.42 cv
966.359 447.76 li
966.999 447.52 967.639 447.32 968.259 447.2 cv
968.879 447.08 969.479 447 970.079 447 cv
971.659 447 972.839 447.42 973.619 448.24 cv
974.399 449.06 974.799 450.3 974.799 451.96 cv
f
978.499 447.26 mo
980.299 447.26 li
980.299 458.2 li
978.499 458.2 li
978.499 447.26 li
978.499 443 mo
980.299 443 li
980.299 445.28 li
978.499 445.28 li
978.499 443 li
f
993.159 451.6 mo
993.159 458.2 li
991.359 458.2 li
991.359 451.66 li
991.359 450.62 991.139 449.86 990.739 449.34 cv
990.339 448.82 989.739 448.56 988.939 448.56 cv
987.959 448.56 987.199 448.88 986.639 449.5 cv
986.079 450.12 985.799 450.96 985.799 452.02 cv
985.799 458.2 li
983.999 458.2 li
983.999 447.26 li
985.799 447.26 li
985.799 448.96 li
986.219 448.32 986.719 447.82 987.319 447.5 cv
987.899 447.18 988.579 447 989.339 447 cv
990.579 447 991.539 447.4 992.179 448.18 cv
992.819 448.96 993.159 450.1 993.159 451.6 cv
f
996.739 447.26 mo
998.539 447.26 li
998.539 458.2 li
996.739 458.2 li
996.739 447.26 li
996.739 443 mo
998.539 443 li
998.539 445.28 li
996.739 445.28 li
996.739 443 li
f
1011.4 451.6 mo
1011.4 458.2 li
1009.6 458.2 li
1009.6 451.66 li
1009.6 450.62 1009.38 449.86 1008.98 449.34 cv
1008.58 448.82 1007.98 448.56 1007.18 448.56 cv
1006.2 448.56 1005.44 448.88 1004.88 449.5 cv
1004.32 450.12 1004.04 450.96 1004.04 452.02 cv
1004.04 458.2 li
1002.24 458.2 li
1002.24 447.26 li
1004.04 447.26 li
1004.04 448.96 li
1004.46 448.32 1004.96 447.82 1005.56 447.5 cv
1006.14 447.18 1006.82 447 1007.58 447 cv
1008.82 447 1009.78 447.4 1010.42 448.18 cv
1011.06 448.96 1011.4 450.1 1011.4 451.6 cv
f
1022.18 452.6 mo
1022.18 451.32 1021.9 450.3 1021.38 449.58 cv
1020.84 448.86 1020.08 448.5 1019.12 448.5 cv
1018.16 448.5 1017.4 448.86 1016.86 449.58 cv
1016.32 450.3 1016.06 451.32 1016.06 452.6 cv
1016.06 453.9 1016.32 454.9 1016.86 455.62 cv
1017.4 456.34 1018.16 456.7 1019.12 456.7 cv
1020.08 456.7 1020.84 456.34 1021.38 455.62 cv
1021.9 454.9 1022.18 453.9 1022.18 452.6 cv
1023.98 456.84 mo
1023.98 458.68 1023.56 460.06 1022.74 460.98 cv
1021.9 461.88 1020.64 462.34 1018.94 462.34 cv
1018.3 462.34 1017.72 462.28 1017.16 462.2 cv
1016.6 462.1 1016.04 461.96 1015.52 461.76 cv
1015.52 460.02 li
1016.04 460.3 1016.56 460.5 1017.08 460.64 cv
1017.6 460.78 1018.12 460.86 1018.66 460.86 cv
1019.82 460.86 1020.7 460.54 1021.3 459.94 cv
1021.88 459.32 1022.18 458.4 1022.18 457.16 cv
1022.18 456.28 li
1021.8 456.92 1021.32 457.4 1020.74 457.72 cv
1020.16 458.04 1019.48 458.2 1018.68 458.2 cv
1017.32 458.2 1016.24 457.7 1015.42 456.68 cv
1014.6 455.66 1014.2 454.3 1014.2 452.6 cv
1014.2 450.92 1014.6 449.56 1015.42 448.54 cv
1016.24 447.52 1017.32 447 1018.68 447 cv
1019.48 447 1020.16 447.16 1020.74 447.48 cv
1021.32 447.8 1021.8 448.28 1022.18 448.92 cv
1022.18 447.26 li
1023.98 447.26 li
1023.98 456.84 li
f
1028.14 455.72 mo
1030.2 455.72 li
1030.2 457.4 li
1028.6 460.5 li
1027.34 460.5 li
1028.14 457.4 li
1028.14 455.72 li
f
1049.22 444.1 mo
1049.22 446.02 li
1048.46 445.66 1047.76 445.4 1047.1 445.22 cv
1046.42 445.06 1045.78 444.96 1045.18 444.96 cv
1044.1 444.96 1043.26 445.18 1042.68 445.58 cv
1042.1 446 1041.82 446.6 1041.82 447.36 cv
1041.82 448 1042 448.5 1042.4 448.82 cv
1042.78 449.16 1043.52 449.42 1044.6 449.62 cv
1045.8 449.86 li
1047.26 450.14 1048.34 450.64 1049.04 451.34 cv
1049.74 452.06 1050.1 453 1050.1 454.18 cv
1050.1 455.6 1049.62 456.66 1048.68 457.38 cv
1047.72 458.1 1046.34 458.46 1044.52 458.46 cv
1043.82 458.46 1043.08 458.38 1042.3 458.24 cv
1041.52 458.1 1040.72 457.88 1039.9 457.56 cv
1039.9 455.52 li
1040.7 455.98 1041.48 456.32 1042.24 456.54 cv
1043 456.78 1043.76 456.88 1044.52 456.88 cv
1045.64 456.88 1046.5 456.66 1047.12 456.22 cv
1047.72 455.78 1048.04 455.16 1048.04 454.32 cv
1048.04 453.6 1047.82 453.04 1047.38 452.64 cv
1046.94 452.24 1046.22 451.94 1045.22 451.74 cv
1044.02 451.5 li
1042.54 451.22 1041.48 450.76 1040.82 450.12 cv
1040.16 449.5 1039.84 448.64 1039.84 447.52 cv
1039.84 446.24 1040.28 445.22 1041.2 444.48 cv
1042.1 443.74 1043.36 443.36 1044.96 443.36 cv
1045.64 443.36 1046.32 443.42 1047.04 443.54 cv
1047.74 443.66 1048.46 443.86 1049.22 444.1 cv
f
1053.1 447.26 mo
1054.9 447.26 li
1054.9 458.2 li
1053.1 458.2 li
1053.1 447.26 li
1053.1 443 mo
1054.9 443 li
1054.9 445.28 li
1053.1 445.28 li
1053.1 443 li
f
1065.86 452.6 mo
1065.86 451.32 1065.58 450.3 1065.06 449.58 cv
1064.52 448.86 1063.76 448.5 1062.8 448.5 cv
1061.84 448.5 1061.08 448.86 1060.54 449.58 cv
1060 450.3 1059.74 451.32 1059.74 452.6 cv
1059.74 453.9 1060 454.9 1060.54 455.62 cv
1061.08 456.34 1061.84 456.7 1062.8 456.7 cv
1063.76 456.7 1064.52 456.34 1065.06 455.62 cv
1065.58 454.9 1065.86 453.9 1065.86 452.6 cv
1067.66 456.84 mo
1067.66 458.68 1067.24 460.06 1066.42 460.98 cv
1065.58 461.88 1064.32 462.34 1062.62 462.34 cv
1061.98 462.34 1061.4 462.28 1060.84 462.2 cv
1060.28 462.1 1059.72 461.96 1059.2 461.76 cv
1059.2 460.02 li
1059.72 460.3 1060.24 460.5 1060.76 460.64 cv
1061.28 460.78 1061.8 460.86 1062.34 460.86 cv
1063.5 460.86 1064.38 460.54 1064.98 459.94 cv
1065.56 459.32 1065.86 458.4 1065.86 457.16 cv
1065.86 456.28 li
1065.48 456.92 1065 457.4 1064.42 457.72 cv
1063.84 458.04 1063.16 458.2 1062.36 458.2 cv
1061 458.2 1059.92 457.7 1059.1 456.68 cv
1058.28 455.66 1057.88 454.3 1057.88 452.6 cv
1057.88 450.92 1058.28 449.56 1059.1 448.54 cv
1059.92 447.52 1061 447 1062.36 447 cv
1063.16 447 1063.84 447.16 1064.42 447.48 cv
1065 447.8 1065.48 448.28 1065.86 448.92 cv
1065.86 447.26 li
1067.66 447.26 li
1067.66 456.84 li
f
1079.88 449.36 mo
1080.32 448.56 1080.86 447.98 1081.48 447.58 cv
1082.1 447.2 1082.84 447 1083.7 447 cv
1084.82 447 1085.7 447.4 1086.32 448.2 cv
1086.94 449 1087.26 450.14 1087.26 451.6 cv
1087.26 458.2 li
1085.46 458.2 li
1085.46 451.66 li
1085.46 450.62 1085.26 449.84 1084.9 449.32 cv
1084.52 448.82 1083.96 448.56 1083.2 448.56 cv
1082.26 448.56 1081.52 448.88 1080.98 449.5 cv
1080.44 450.12 1080.18 450.96 1080.18 452.02 cv
1080.18 458.2 li
1078.38 458.2 li
1078.38 451.66 li
1078.38 450.62 1078.18 449.84 1077.82 449.32 cv
1077.44 448.82 1076.86 448.56 1076.1 448.56 cv
1075.18 448.56 1074.44 448.88 1073.9 449.5 cv
1073.36 450.12 1073.1 450.96 1073.1 452.02 cv
1073.1 458.2 li
1071.3 458.2 li
1071.3 447.26 li
1073.1 447.26 li
1073.1 448.96 li
1073.5 448.3 1074 447.8 1074.58 447.48 cv
1075.14 447.16 1075.82 447 1076.62 447 cv
1077.42 447 1078.08 447.2 1078.64 447.6 cv
1079.2 448 1079.6 448.6 1079.88 449.36 cv
f
1095.08 448.52 mo
1094.12 448.52 1093.36 448.9 1092.8 449.66 cv
1092.24 450.42 1091.96 451.44 1091.96 452.74 cv
1091.96 454.06 1092.22 455.08 1092.78 455.84 cv
1093.34 456.6 1094.1 456.96 1095.08 456.96 cv
1096.04 456.96 1096.8 456.6 1097.36 455.84 cv
1097.92 455.08 1098.2 454.06 1098.2 452.74 cv
1098.2 451.46 1097.92 450.42 1097.36 449.66 cv
1096.8 448.9 1096.04 448.52 1095.08 448.52 cv
1095.08 447 mo
1096.64 447 1097.86 447.52 1098.76 448.52 cv
1099.64 449.54 1100.1 450.94 1100.1 452.74 cv
1100.1 454.54 1099.64 455.94 1098.76 456.94 cv
1097.86 457.96 1096.64 458.46 1095.08 458.46 cv
1093.5 458.46 1092.26 457.96 1091.38 456.94 cv
1090.5 455.94 1090.06 454.54 1090.06 452.74 cv
1090.06 450.94 1090.5 449.54 1091.38 448.52 cv
1092.26 447.52 1093.5 447 1095.08 447 cv
f
1103.08 447.26 mo
1104.88 447.26 li
1104.88 458.2 li
1103.08 458.2 li
1103.08 447.26 li
1103.08 443 mo
1104.88 443 li
1104.88 445.28 li
1103.08 445.28 li
1103.08 443 li
f
1115.84 448.92 mo
1115.84 443 li
1117.64 443 li
1117.64 458.2 li
1115.84 458.2 li
1115.84 456.56 li
1115.46 457.22 1114.98 457.7 1114.4 458 cv
1113.82 458.3 1113.14 458.46 1112.34 458.46 cv
1111.02 458.46 1109.94 457.94 1109.1 456.9 cv
1108.26 455.86 1107.86 454.46 1107.86 452.74 cv
1107.86 451.02 1108.26 449.64 1109.1 448.58 cv
1109.94 447.54 1111.02 447 1112.34 447 cv
1113.14 447 1113.82 447.16 1114.4 447.48 cv
1114.98 447.8 1115.46 448.28 1115.84 448.92 cv
1109.72 452.74 mo
1109.72 454.06 1109.98 455.1 1110.52 455.86 cv
1111.06 456.62 1111.82 456.98 1112.78 456.98 cv
1113.72 456.98 1114.46 456.62 1115.02 455.86 cv
1115.56 455.1 1115.84 454.06 1115.84 452.74 cv
1115.84 451.42 1115.56 450.4 1115.02 449.64 cv
1114.46 448.88 1113.72 448.5 1112.78 448.5 cv
1111.82 448.5 1111.06 448.88 1110.52 449.64 cv
1109.98 450.4 1109.72 451.42 1109.72 452.74 cv
f
1121.06 443.02 mo
1122.62 443.02 li
1123.58 444.56 1124.32 446.06 1124.8 447.54 cv
1125.28 449.02 1125.54 450.48 1125.54 451.92 cv
1125.54 453.38 1125.28 454.84 1124.8 456.32 cv
1124.32 457.8 1123.58 459.28 1122.62 460.82 cv
1121.06 460.82 li
1121.92 459.32 1122.56 457.86 1123 456.38 cv
1123.42 454.92 1123.64 453.44 1123.64 451.92 cv
1123.64 450.42 1123.42 448.94 1123 447.48 cv
1122.56 446.02 1121.92 444.54 1121.06 443.02 cv
f
725.44 479.059 mo
745.44 479.059 li
0 .9617 .904814 0 cmyk
@
732.44 482.059 mo
738.44 476.059 li
732.44 476.059 mo
738.44 482.059 li
f
1 lw
0 lc
732.44 482.059 mo
738.44 476.059 li
732.44 476.059 mo
738.44 482.059 li
@
757.38 475.599 mo
757.38 480.939 li
760.539 480.939 li
761.599 480.939 762.38 480.719 762.9 480.279 cv
763.4 479.839 763.659 479.179 763.659 478.259 cv
763.659 477.359 763.4 476.699 762.9 476.259 cv
762.38 475.819 761.599 475.599 760.539 475.599 cv
757.38 475.599 li
757.38 469.599 mo
757.38 473.999 li
760.299 473.999 li
761.26 473.999 761.96 473.819 762.44 473.459 cv
762.919 473.099 763.159 472.559 763.159 471.799 cv
763.159 471.079 762.919 470.519 762.44 470.159 cv
761.96 469.799 761.26 469.599 760.299 469.599 cv
757.38 469.599 li
755.4 467.979 mo
760.44 467.979 li
761.94 467.979 763.099 468.299 763.919 468.919 cv
764.72 469.559 765.14 470.439 765.14 471.579 cv
765.14 472.479 764.919 473.199 764.5 473.719 cv
764.08 474.239 763.479 474.579 762.68 474.699 cv
763.64 474.919 764.4 475.359 764.94 476.019 cv
765.46 476.679 765.74 477.499 765.74 478.479 cv
765.74 479.799 765.28 480.799 764.4 481.499 cv
763.52 482.219 762.26 482.559 760.64 482.559 cv
755.4 482.559 li
755.4 467.979 li
1 /0 /CSD get_res sepcs
1 sep
f
774.02 477.059 mo
772.56 477.059 771.56 477.239 771 477.559 cv
770.44 477.899 770.16 478.459 770.16 479.259 cv
770.16 479.899 770.36 480.419 770.78 480.779 cv
771.2 481.159 771.78 481.339 772.5 481.339 cv
773.5 481.339 774.3 480.999 774.9 480.279 cv
775.5 479.579 775.8 478.639 775.8 477.459 cv
775.8 477.059 li
774.02 477.059 li
777.6 476.319 mo
777.6 482.559 li
775.8 482.559 li
775.8 480.899 li
775.38 481.579 774.86 482.059 774.26 482.359 cv
773.66 482.659 772.9 482.819 772.02 482.819 cv
770.9 482.819 770 482.519 769.34 481.899 cv
768.68 481.279 768.36 480.439 768.36 479.379 cv
768.36 478.159 768.76 477.239 769.6 476.599 cv
770.42 475.979 771.64 475.659 773.28 475.659 cv
775.8 475.659 li
775.8 475.479 li
775.8 474.659 775.52 474.019 774.98 473.559 cv
774.44 473.119 773.68 472.879 772.7 472.879 cv
772.06 472.879 771.46 472.959 770.86 473.119 cv
770.26 473.279 769.7 473.499 769.16 473.779 cv
769.16 472.119 li
769.8 471.879 770.44 471.679 771.06 471.559 cv
771.68 471.439 772.28 471.359 772.88 471.359 cv
774.46 471.359 775.64 471.779 776.42 472.599 cv
777.2 473.419 777.6 474.659 777.6 476.319 cv
f
789.18 472.039 mo
789.18 473.719 li
788.66 473.439 788.16 473.239 787.64 473.099 cv
787.12 472.959 786.62 472.879 786.1 472.879 cv
784.94 472.879 784.02 473.259 783.38 473.999 cv
782.74 474.739 782.42 475.779 782.42 477.099 cv
782.42 478.439 782.74 479.479 783.38 480.219 cv
784.02 480.959 784.94 481.319 786.1 481.319 cv
786.62 481.319 787.12 481.259 787.64 481.119 cv
788.16 480.979 788.66 480.759 789.18 480.479 cv
789.18 482.139 li
788.66 482.379 788.14 482.559 787.62 482.659 cv
787.08 482.759 786.5 482.819 785.9 482.819 cv
784.26 482.819 782.94 482.319 781.98 481.279 cv
781 480.259 780.52 478.859 780.52 477.099 cv
780.52 475.319 781 473.919 781.98 472.899 cv
782.96 471.879 784.3 471.359 786.02 471.359 cv
786.58 471.359 787.12 471.419 787.64 471.539 cv
788.16 471.659 788.68 471.819 789.18 472.039 cv
f
792.24 467.359 mo
794.04 467.359 li
794.04 476.339 li
799.4 471.619 li
801.7 471.619 li
795.9 476.739 li
801.94 482.559 li
799.6 482.559 li
794.04 477.219 li
794.04 482.559 li
792.24 482.559 li
792.24 467.359 li
f
811.98 480.919 mo
811.98 486.699 li
810.18 486.699 li
810.18 471.619 li
811.98 471.619 li
811.98 473.279 li
812.34 472.639 812.82 472.159 813.4 471.839 cv
813.98 471.519 814.68 471.359 815.48 471.359 cv
816.8 471.359 817.88 471.899 818.72 472.939 cv
819.54 473.999 819.96 475.379 819.96 477.099 cv
819.96 478.819 819.54 480.219 818.72 481.259 cv
817.88 482.299 816.8 482.819 815.48 482.819 cv
814.68 482.819 813.98 482.659 813.4 482.359 cv
812.82 482.059 812.34 481.579 811.98 480.919 cv
818.1 477.099 mo
818.1 475.779 817.82 474.759 817.28 473.999 cv
816.72 473.239 815.98 472.859 815.04 472.859 cv
814.08 472.859 813.34 473.239 812.8 473.999 cv
812.24 474.759 811.98 475.779 811.98 477.099 cv
811.98 478.419 812.24 479.459 812.8 480.219 cv
813.34 480.979 814.08 481.339 815.04 481.339 cv
815.98 481.339 816.72 480.979 817.28 480.219 cv
817.82 479.459 818.1 478.419 818.1 477.099 cv
f
829.279 473.299 mo
829.079 473.179 828.859 473.099 828.619 473.039 cv
828.379 472.999 828.119 472.959 827.839 472.959 cv
826.819 472.959 826.039 473.299 825.499 473.959 cv
824.939 474.619 824.679 475.559 824.679 476.799 cv
824.679 482.559 li
822.879 482.559 li
822.879 471.619 li
824.679 471.619 li
824.679 473.319 li
825.039 472.659 825.539 472.159 826.139 471.839 cv
826.739 471.519 827.479 471.359 828.359 471.359 cv
828.479 471.359 828.619 471.379 828.779 471.379 cv
828.919 471.399 829.079 471.419 829.279 471.459 cv
829.279 473.299 li
f
835.399 472.879 mo
834.439 472.879 833.679 473.259 833.119 474.019 cv
832.559 474.779 832.279 475.799 832.279 477.099 cv
832.279 478.419 832.539 479.439 833.099 480.199 cv
833.659 480.959 834.419 481.319 835.399 481.319 cv
836.359 481.319 837.119 480.959 837.679 480.199 cv
838.239 479.439 838.519 478.419 838.519 477.099 cv
838.519 475.819 838.239 474.779 837.679 474.019 cv
837.119 473.259 836.359 472.879 835.399 472.879 cv
835.399 471.359 mo
836.959 471.359 838.179 471.879 839.079 472.879 cv
839.959 473.899 840.419 475.299 840.419 477.099 cv
840.419 478.899 839.959 480.299 839.079 481.299 cv
838.179 482.319 836.959 482.819 835.399 482.819 cv
833.819 482.819 832.579 482.319 831.699 481.299 cv
830.819 480.299 830.379 478.899 830.379 477.099 cv
830.379 475.299 830.819 473.899 831.699 472.879 cv
832.579 471.879 833.819 471.359 835.399 471.359 cv
f
845.139 480.919 mo
845.139 486.699 li
843.339 486.699 li
843.339 471.619 li
845.139 471.619 li
845.139 473.279 li
845.499 472.639 845.979 472.159 846.559 471.839 cv
847.139 471.519 847.839 471.359 848.639 471.359 cv
849.959 471.359 851.039 471.899 851.879 472.939 cv
852.699 473.999 853.119 475.379 853.119 477.099 cv
853.119 478.819 852.699 480.219 851.879 481.259 cv
851.039 482.299 849.959 482.819 848.639 482.819 cv
847.839 482.819 847.139 482.659 846.559 482.359 cv
845.979 482.059 845.499 481.579 845.139 480.919 cv
851.259 477.099 mo
851.259 475.779 850.979 474.759 850.439 473.999 cv
849.879 473.239 849.139 472.859 848.199 472.859 cv
847.239 472.859 846.499 473.239 845.959 473.999 cv
845.399 474.759 845.139 475.779 845.139 477.099 cv
845.139 478.419 845.399 479.459 845.959 480.219 cv
846.499 480.979 847.239 481.339 848.199 481.339 cv
849.139 481.339 849.879 480.979 850.439 480.219 cv
850.979 479.459 851.259 478.419 851.259 477.099 cv
f
861.079 477.059 mo
859.619 477.059 858.619 477.239 858.059 477.559 cv
857.499 477.899 857.219 478.459 857.219 479.259 cv
857.219 479.899 857.419 480.419 857.839 480.779 cv
858.259 481.159 858.839 481.339 859.559 481.339 cv
860.559 481.339 861.359 480.999 861.959 480.279 cv
862.559 479.579 862.859 478.639 862.859 477.459 cv
862.859 477.059 li
861.079 477.059 li
864.659 476.319 mo
864.659 482.559 li
862.859 482.559 li
862.859 480.899 li
862.439 481.579 861.919 482.059 861.319 482.359 cv
860.719 482.659 859.959 482.819 859.079 482.819 cv
857.959 482.819 857.059 482.519 856.399 481.899 cv
855.739 481.279 855.419 480.439 855.419 479.379 cv
855.419 478.159 855.819 477.239 856.659 476.599 cv
857.479 475.979 858.699 475.659 860.339 475.659 cv
862.859 475.659 li
862.859 475.479 li
862.859 474.659 862.579 474.019 862.039 473.559 cv
861.499 473.119 860.739 472.879 859.759 472.879 cv
859.119 472.879 858.519 472.959 857.919 473.119 cv
857.319 473.279 856.759 473.499 856.219 473.779 cv
856.219 472.119 li
856.859 471.879 857.499 471.679 858.119 471.559 cv
858.739 471.439 859.339 471.359 859.939 471.359 cv
861.519 471.359 862.699 471.779 863.479 472.599 cv
864.259 473.419 864.659 474.659 864.659 476.319 cv
f
875.559 476.959 mo
875.559 475.679 875.279 474.659 874.759 473.939 cv
874.219 473.219 873.459 472.859 872.499 472.859 cv
871.539 472.859 870.779 473.219 870.239 473.939 cv
869.699 474.659 869.439 475.679 869.439 476.959 cv
869.439 478.259 869.699 479.259 870.239 479.979 cv
870.779 480.699 871.539 481.059 872.499 481.059 cv
873.459 481.059 874.219 480.699 874.759 479.979 cv
875.279 479.259 875.559 478.259 875.559 476.959 cv
877.359 481.199 mo
877.359 483.039 876.939 484.419 876.119 485.339 cv
875.279 486.239 874.019 486.699 872.319 486.699 cv
871.679 486.699 871.099 486.639 870.539 486.559 cv
869.979 486.459 869.419 486.319 868.899 486.119 cv
868.899 484.379 li
869.419 484.659 869.939 484.859 870.459 484.999 cv
870.979 485.139 871.499 485.219 872.039 485.219 cv
873.199 485.219 874.079 484.899 874.679 484.299 cv
875.259 483.679 875.559 482.759 875.559 481.519 cv
875.559 480.639 li
875.179 481.279 874.699 481.759 874.119 482.079 cv
873.539 482.399 872.859 482.559 872.059 482.559 cv
870.699 482.559 869.619 482.059 868.799 481.039 cv
867.979 480.019 867.579 478.659 867.579 476.959 cv
867.579 475.279 867.979 473.919 868.799 472.899 cv
869.619 471.879 870.699 471.359 872.059 471.359 cv
872.859 471.359 873.539 471.519 874.119 471.839 cv
874.699 472.159 875.179 472.639 875.559 473.279 cv
875.559 471.619 li
877.359 471.619 li
877.359 481.199 li
f
886.039 477.059 mo
884.579 477.059 883.579 477.239 883.019 477.559 cv
882.459 477.899 882.179 478.459 882.179 479.259 cv
882.179 479.899 882.379 480.419 882.799 480.779 cv
883.219 481.159 883.799 481.339 884.519 481.339 cv
885.519 481.339 886.319 480.999 886.919 480.279 cv
887.519 479.579 887.819 478.639 887.819 477.459 cv
887.819 477.059 li
886.039 477.059 li
889.619 476.319 mo
889.619 482.559 li
887.819 482.559 li
887.819 480.899 li
887.399 481.579 886.879 482.059 886.279 482.359 cv
885.679 482.659 884.919 482.819 884.039 482.819 cv
882.919 482.819 882.019 482.519 881.359 481.899 cv
880.699 481.279 880.379 480.439 880.379 479.379 cv
880.379 478.159 880.779 477.239 881.619 476.599 cv
882.439 475.979 883.659 475.659 885.299 475.659 cv
887.819 475.659 li
887.819 475.479 li
887.819 474.659 887.539 474.019 886.999 473.559 cv
886.459 473.119 885.699 472.879 884.719 472.879 cv
884.079 472.879 883.479 472.959 882.879 473.119 cv
882.279 473.279 881.719 473.499 881.179 473.779 cv
881.179 472.119 li
881.819 471.879 882.459 471.679 883.079 471.559 cv
883.699 471.439 884.299 471.359 884.899 471.359 cv
886.479 471.359 887.659 471.779 888.439 472.599 cv
889.219 473.419 889.619 474.659 889.619 476.319 cv
f
895.099 468.519 mo
895.099 471.619 li
898.799 471.619 li
898.799 473.019 li
895.099 473.019 li
895.099 478.959 li
895.099 479.859 895.219 480.439 895.459 480.679 cv
895.699 480.939 896.199 481.059 896.959 481.059 cv
898.799 481.059 li
898.799 482.559 li
896.959 482.559 li
895.559 482.559 894.599 482.299 894.079 481.779 cv
893.559 481.259 893.299 480.319 893.299 478.959 cv
893.299 473.019 li
891.979 473.019 li
891.979 471.619 li
893.299 471.619 li
893.299 468.519 li
895.099 468.519 li
f
901.159 471.619 mo
902.959 471.619 li
902.959 482.559 li
901.159 482.559 li
901.159 471.619 li
901.159 467.359 mo
902.959 467.359 li
902.959 469.639 li
901.159 469.639 li
901.159 467.359 li
f
910.959 472.879 mo
909.999 472.879 909.239 473.259 908.679 474.019 cv
908.119 474.779 907.839 475.799 907.839 477.099 cv
907.839 478.419 908.099 479.439 908.659 480.199 cv
909.219 480.959 909.979 481.319 910.959 481.319 cv
911.919 481.319 912.679 480.959 913.239 480.199 cv
913.799 479.439 914.079 478.419 914.079 477.099 cv
914.079 475.819 913.799 474.779 913.239 474.019 cv
912.679 473.259 911.919 472.879 910.959 472.879 cv
910.959 471.359 mo
912.519 471.359 913.739 471.879 914.639 472.879 cv
915.519 473.899 915.979 475.299 915.979 477.099 cv
915.979 478.899 915.519 480.299 914.639 481.299 cv
913.739 482.319 912.519 482.819 910.959 482.819 cv
909.379 482.819 908.139 482.319 907.259 481.299 cv
906.379 480.299 905.939 478.899 905.939 477.099 cv
905.939 475.299 906.379 473.899 907.259 472.879 cv
908.139 471.879 909.379 471.359 910.959 471.359 cv
f
928.059 475.959 mo
928.059 482.559 li
926.259 482.559 li
926.259 476.019 li
926.259 474.979 926.039 474.219 925.639 473.699 cv
925.239 473.179 924.639 472.919 923.839 472.919 cv
922.859 472.919 922.099 473.239 921.539 473.859 cv
920.979 474.479 920.699 475.319 920.699 476.379 cv
920.699 482.559 li
918.899 482.559 li
918.899 471.619 li
920.699 471.619 li
920.699 473.319 li
921.119 472.679 921.619 472.179 922.219 471.859 cv
922.799 471.539 923.479 471.359 924.239 471.359 cv
925.479 471.359 926.439 471.759 927.079 472.539 cv
927.719 473.319 928.059 474.459 928.059 475.959 cv
f
942.319 467.379 mo
941.439 468.899 940.799 470.379 940.379 471.839 cv
939.939 473.299 939.739 474.779 939.739 476.279 cv
939.739 477.799 939.939 479.279 940.379 480.739 cv
940.799 482.219 941.439 483.679 942.319 485.179 cv
940.759 485.179 li
939.779 483.639 939.039 482.159 938.559 480.679 cv
938.079 479.199 937.839 477.739 937.839 476.279 cv
937.839 474.839 938.079 473.379 938.559 471.899 cv
939.039 470.419 939.759 468.919 940.759 467.379 cv
942.319 467.379 li
f
943.879 467.979 mo
956.199 467.979 li
956.199 469.639 li
951.019 469.639 li
951.019 482.559 li
949.039 482.559 li
949.039 469.639 li
943.879 469.639 li
943.879 467.979 li
f
967.379 476.639 mo
967.379 477.519 li
959.119 477.519 li
959.199 478.759 959.559 479.719 960.239 480.359 cv
960.899 480.999 961.819 481.319 963.019 481.319 cv
963.699 481.319 964.379 481.239 965.019 481.079 cv
965.659 480.919 966.319 480.659 966.959 480.299 cv
966.959 481.999 li
966.319 482.279 965.659 482.499 964.979 482.619 cv
964.299 482.739 963.599 482.819 962.919 482.819 cv
961.159 482.819 959.779 482.319 958.759 481.319 cv
957.739 480.319 957.239 478.939 957.239 477.199 cv
957.239 475.419 957.719 473.999 958.679 472.939 cv
959.639 471.899 960.959 471.359 962.599 471.359 cv
964.079 471.359 965.239 471.839 966.099 472.779 cv
966.939 473.739 967.379 475.019 967.379 476.639 cv
965.579 476.119 mo
965.559 475.139 965.279 474.359 964.759 473.759 cv
964.219 473.179 963.499 472.879 962.619 472.879 cv
961.619 472.879 960.819 473.179 960.219 473.739 cv
959.619 474.299 959.259 475.099 959.179 476.119 cv
965.579 476.119 li
f
977.299 471.939 mo
977.299 473.639 li
976.779 473.399 976.259 473.199 975.719 473.059 cv
975.159 472.939 974.599 472.859 974.019 472.859 cv
973.119 472.859 972.439 472.999 971.999 473.279 cv
971.559 473.559 971.339 473.959 971.339 474.499 cv
971.339 474.919 971.499 475.239 971.819 475.479 cv
972.139 475.719 972.779 475.959 973.739 476.159 cv
974.359 476.299 li
975.639 476.579 976.539 476.979 977.079 477.459 cv
977.599 477.959 977.879 478.659 977.879 479.539 cv
977.879 480.559 977.479 481.359 976.679 481.939 cv
975.879 482.539 974.759 482.819 973.359 482.819 cv
972.759 482.819 972.159 482.759 971.519 482.659 cv
970.879 482.559 970.219 482.399 969.519 482.159 cv
969.519 480.299 li
970.179 480.659 970.839 480.919 971.479 481.079 cv
972.119 481.259 972.759 481.339 973.399 481.339 cv
974.239 481.339 974.899 481.199 975.359 480.919 cv
975.799 480.639 976.039 480.219 976.039 479.679 cv
976.039 479.199 975.859 478.819 975.539 478.559 cv
975.219 478.299 974.499 478.039 973.379 477.799 cv
972.759 477.659 li
971.639 477.419 970.819 477.059 970.339 476.579 cv
969.839 476.099 969.599 475.439 969.599 474.579 cv
969.599 473.559 969.959 472.759 970.679 472.199 cv
971.399 471.639 972.439 471.359 973.799 471.359 cv
974.459 471.359 975.079 471.419 975.679 471.519 cv
976.259 471.619 976.799 471.759 977.299 471.939 cv
f
982.519 468.519 mo
982.519 471.619 li
986.219 471.619 li
986.219 473.019 li
982.519 473.019 li
982.519 478.959 li
982.519 479.859 982.639 480.439 982.879 480.679 cv
983.119 480.939 983.619 481.059 984.379 481.059 cv
986.219 481.059 li
986.219 482.559 li
984.379 482.559 li
982.979 482.559 982.019 482.299 981.499 481.779 cv
980.979 481.259 980.719 480.319 980.719 478.959 cv
980.719 473.019 li
979.399 473.019 li
979.399 471.619 li
980.719 471.619 li
980.719 468.519 li
982.519 468.519 li
f
988.579 471.619 mo
990.379 471.619 li
990.379 482.559 li
988.579 482.559 li
988.579 471.619 li
988.579 467.359 mo
990.379 467.359 li
990.379 469.639 li
988.579 469.639 li
988.579 467.359 li
f
1003.24 475.959 mo
1003.24 482.559 li
1001.44 482.559 li
1001.44 476.019 li
1001.44 474.979 1001.22 474.219 1000.82 473.699 cv
1000.42 473.179 999.819 472.919 999.019 472.919 cv
998.039 472.919 997.279 473.239 996.719 473.859 cv
996.159 474.479 995.879 475.319 995.879 476.379 cv
995.879 482.559 li
994.079 482.559 li
994.079 471.619 li
995.879 471.619 li
995.879 473.319 li
996.299 472.679 996.799 472.179 997.399 471.859 cv
997.979 471.539 998.659 471.359 999.419 471.359 cv
1000.66 471.359 1001.62 471.759 1002.26 472.539 cv
1002.9 473.319 1003.24 474.459 1003.24 475.959 cv
f
1014.02 476.959 mo
1014.02 475.679 1013.74 474.659 1013.22 473.939 cv
1012.68 473.219 1011.92 472.859 1010.96 472.859 cv
1010 472.859 1009.24 473.219 1008.7 473.939 cv
1008.16 474.659 1007.9 475.679 1007.9 476.959 cv
1007.9 478.259 1008.16 479.259 1008.7 479.979 cv
1009.24 480.699 1010 481.059 1010.96 481.059 cv
1011.92 481.059 1012.68 480.699 1013.22 479.979 cv
1013.74 479.259 1014.02 478.259 1014.02 476.959 cv
1015.82 481.199 mo
1015.82 483.039 1015.4 484.419 1014.58 485.339 cv
1013.74 486.239 1012.48 486.699 1010.78 486.699 cv
1010.14 486.699 1009.56 486.639 1009 486.559 cv
1008.44 486.459 1007.88 486.319 1007.36 486.119 cv
1007.36 484.379 li
1007.88 484.659 1008.4 484.859 1008.92 484.999 cv
1009.44 485.139 1009.96 485.219 1010.5 485.219 cv
1011.66 485.219 1012.54 484.899 1013.14 484.299 cv
1013.72 483.679 1014.02 482.759 1014.02 481.519 cv
1014.02 480.639 li
1013.64 481.279 1013.16 481.759 1012.58 482.079 cv
1012 482.399 1011.32 482.559 1010.52 482.559 cv
1009.16 482.559 1008.08 482.059 1007.26 481.039 cv
1006.44 480.019 1006.04 478.659 1006.04 476.959 cv
1006.04 475.279 1006.44 473.919 1007.26 472.899 cv
1008.08 471.879 1009.16 471.359 1010.52 471.359 cv
1011.32 471.359 1012 471.519 1012.58 471.839 cv
1013.16 472.159 1013.64 472.639 1014.02 473.279 cv
1014.02 471.619 li
1015.82 471.619 li
1015.82 481.199 li
f
1019.98 480.079 mo
1022.04 480.079 li
1022.04 481.759 li
1020.44 484.859 li
1019.18 484.859 li
1019.98 481.759 li
1019.98 480.079 li
f
1041.06 468.459 mo
1041.06 470.379 li
1040.3 470.019 1039.6 469.759 1038.94 469.579 cv
1038.26 469.419 1037.62 469.319 1037.02 469.319 cv
1035.94 469.319 1035.1 469.539 1034.52 469.939 cv
1033.94 470.359 1033.66 470.959 1033.66 471.719 cv
1033.66 472.359 1033.84 472.859 1034.24 473.179 cv
1034.62 473.519 1035.36 473.779 1036.44 473.979 cv
1037.64 474.219 li
1039.1 474.499 1040.18 474.999 1040.88 475.699 cv
1041.58 476.419 1041.94 477.359 1041.94 478.539 cv
1041.94 479.959 1041.46 481.019 1040.52 481.739 cv
1039.56 482.459 1038.18 482.819 1036.36 482.819 cv
1035.66 482.819 1034.92 482.739 1034.14 482.599 cv
1033.36 482.459 1032.56 482.239 1031.74 481.919 cv
1031.74 479.879 li
1032.54 480.339 1033.32 480.679 1034.08 480.899 cv
1034.84 481.139 1035.6 481.239 1036.36 481.239 cv
1037.48 481.239 1038.34 481.019 1038.96 480.579 cv
1039.56 480.139 1039.88 479.519 1039.88 478.679 cv
1039.88 477.959 1039.66 477.399 1039.22 476.999 cv
1038.78 476.599 1038.06 476.299 1037.06 476.099 cv
1035.86 475.859 li
1034.38 475.579 1033.32 475.119 1032.66 474.479 cv
1032 473.859 1031.68 472.999 1031.68 471.879 cv
1031.68 470.599 1032.12 469.579 1033.04 468.839 cv
1033.94 468.099 1035.2 467.719 1036.8 467.719 cv
1037.48 467.719 1038.16 467.779 1038.88 467.899 cv
1039.58 468.019 1040.3 468.219 1041.06 468.459 cv
f
1044.94 471.619 mo
1046.74 471.619 li
1046.74 482.559 li
1044.94 482.559 li
1044.94 471.619 li
1044.94 467.359 mo
1046.74 467.359 li
1046.74 469.639 li
1044.94 469.639 li
1044.94 467.359 li
f
1057.7 476.959 mo
1057.7 475.679 1057.42 474.659 1056.9 473.939 cv
1056.36 473.219 1055.6 472.859 1054.64 472.859 cv
1053.68 472.859 1052.92 473.219 1052.38 473.939 cv
1051.84 474.659 1051.58 475.679 1051.58 476.959 cv
1051.58 478.259 1051.84 479.259 1052.38 479.979 cv
1052.92 480.699 1053.68 481.059 1054.64 481.059 cv
1055.6 481.059 1056.36 480.699 1056.9 479.979 cv
1057.42 479.259 1057.7 478.259 1057.7 476.959 cv
1059.5 481.199 mo
1059.5 483.039 1059.08 484.419 1058.26 485.339 cv
1057.42 486.239 1056.16 486.699 1054.46 486.699 cv
1053.82 486.699 1053.24 486.639 1052.68 486.559 cv
1052.12 486.459 1051.56 486.319 1051.04 486.119 cv
1051.04 484.379 li
1051.56 484.659 1052.08 484.859 1052.6 484.999 cv
1053.12 485.139 1053.64 485.219 1054.18 485.219 cv
1055.34 485.219 1056.22 484.899 1056.82 484.299 cv
1057.4 483.679 1057.7 482.759 1057.7 481.519 cv
1057.7 480.639 li
1057.32 481.279 1056.84 481.759 1056.26 482.079 cv
1055.68 482.399 1055 482.559 1054.2 482.559 cv
1052.84 482.559 1051.76 482.059 1050.94 481.039 cv
1050.12 480.019 1049.72 478.659 1049.72 476.959 cv
1049.72 475.279 1050.12 473.919 1050.94 472.899 cv
1051.76 471.879 1052.84 471.359 1054.2 471.359 cv
1055 471.359 1055.68 471.519 1056.26 471.839 cv
1056.84 472.159 1057.32 472.639 1057.7 473.279 cv
1057.7 471.619 li
1059.5 471.619 li
1059.5 481.199 li
f
1071.72 473.719 mo
1072.16 472.919 1072.7 472.339 1073.32 471.939 cv
1073.94 471.559 1074.68 471.359 1075.54 471.359 cv
1076.66 471.359 1077.54 471.759 1078.16 472.559 cv
1078.78 473.359 1079.1 474.499 1079.1 475.959 cv
1079.1 482.559 li
1077.3 482.559 li
1077.3 476.019 li
1077.3 474.979 1077.1 474.199 1076.74 473.679 cv
1076.36 473.179 1075.8 472.919 1075.04 472.919 cv
1074.1 472.919 1073.36 473.239 1072.82 473.859 cv
1072.28 474.479 1072.02 475.319 1072.02 476.379 cv
1072.02 482.559 li
1070.22 482.559 li
1070.22 476.019 li
1070.22 474.979 1070.02 474.199 1069.66 473.679 cv
1069.28 473.179 1068.7 472.919 1067.94 472.919 cv
1067.02 472.919 1066.28 473.239 1065.74 473.859 cv
1065.2 474.479 1064.94 475.319 1064.94 476.379 cv
1064.94 482.559 li
1063.14 482.559 li
1063.14 471.619 li
1064.94 471.619 li
1064.94 473.319 li
1065.34 472.659 1065.84 472.159 1066.42 471.839 cv
1066.98 471.519 1067.66 471.359 1068.46 471.359 cv
1069.26 471.359 1069.92 471.559 1070.48 471.959 cv
1071.04 472.359 1071.44 472.959 1071.72 473.719 cv
f
1086.92 472.879 mo
1085.96 472.879 1085.2 473.259 1084.64 474.019 cv
1084.08 474.779 1083.8 475.799 1083.8 477.099 cv
1083.8 478.419 1084.06 479.439 1084.62 480.199 cv
1085.18 480.959 1085.94 481.319 1086.92 481.319 cv
1087.88 481.319 1088.64 480.959 1089.2 480.199 cv
1089.76 479.439 1090.04 478.419 1090.04 477.099 cv
1090.04 475.819 1089.76 474.779 1089.2 474.019 cv
1088.64 473.259 1087.88 472.879 1086.92 472.879 cv
1086.92 471.359 mo
1088.48 471.359 1089.7 471.879 1090.6 472.879 cv
1091.48 473.899 1091.94 475.299 1091.94 477.099 cv
1091.94 478.899 1091.48 480.299 1090.6 481.299 cv
1089.7 482.319 1088.48 482.819 1086.92 482.819 cv
1085.34 482.819 1084.1 482.319 1083.22 481.299 cv
1082.34 480.299 1081.9 478.899 1081.9 477.099 cv
1081.9 475.299 1082.34 473.899 1083.22 472.879 cv
1084.1 471.879 1085.34 471.359 1086.92 471.359 cv
f
1094.92 471.619 mo
1096.72 471.619 li
1096.72 482.559 li
1094.92 482.559 li
1094.92 471.619 li
1094.92 467.359 mo
1096.72 467.359 li
1096.72 469.639 li
1094.92 469.639 li
1094.92 467.359 li
f
1107.68 473.279 mo
1107.68 467.359 li
1109.48 467.359 li
1109.48 482.559 li
1107.68 482.559 li
1107.68 480.919 li
1107.3 481.579 1106.82 482.059 1106.24 482.359 cv
1105.66 482.659 1104.98 482.819 1104.18 482.819 cv
1102.86 482.819 1101.78 482.299 1100.94 481.259 cv
1100.1 480.219 1099.7 478.819 1099.7 477.099 cv
1099.7 475.379 1100.1 473.999 1100.94 472.939 cv
1101.78 471.899 1102.86 471.359 1104.18 471.359 cv
1104.98 471.359 1105.66 471.519 1106.24 471.839 cv
1106.82 472.159 1107.3 472.639 1107.68 473.279 cv
1101.56 477.099 mo
1101.56 478.419 1101.82 479.459 1102.36 480.219 cv
1102.9 480.979 1103.66 481.339 1104.62 481.339 cv
1105.56 481.339 1106.3 480.979 1106.86 480.219 cv
1107.4 479.459 1107.68 478.419 1107.68 477.099 cv
1107.68 475.779 1107.4 474.759 1106.86 473.999 cv
1106.3 473.239 1105.56 472.859 1104.62 472.859 cv
1103.66 472.859 1102.9 473.239 1102.36 473.999 cv
1101.82 474.759 1101.56 475.779 1101.56 477.099 cv
f
1112.9 467.379 mo
1114.46 467.379 li
1115.42 468.919 1116.16 470.419 1116.64 471.899 cv
1117.12 473.379 1117.38 474.839 1117.38 476.279 cv
1117.38 477.739 1117.12 479.199 1116.64 480.679 cv
1116.16 482.159 1115.42 483.639 1114.46 485.179 cv
1112.9 485.179 li
1113.76 483.679 1114.4 482.219 1114.84 480.739 cv
1115.26 479.279 1115.48 477.799 1115.48 476.279 cv
1115.48 474.779 1115.26 473.299 1114.84 471.839 cv
1114.4 470.379 1113.76 468.899 1112.9 467.379 cv
f
1.5 lw
2 lc
725.44 503.418 mo
745.44 503.418 li
@
757.38 493.958 mo
757.38 505.298 li
759.76 505.298 li
761.76 505.298 763.24 504.858 764.18 503.938 cv
765.099 503.018 765.58 501.578 765.58 499.618 cv
765.58 497.658 765.099 496.238 764.18 495.318 cv
763.24 494.418 761.76 493.958 759.76 493.958 cv
757.38 493.958 li
755.4 492.338 mo
759.46 492.338 li
762.28 492.338 764.359 492.938 765.68 494.098 cv
767 495.278 767.66 497.118 767.66 499.618 cv
767.66 502.138 766.979 503.978 765.66 505.158 cv
764.34 506.338 762.26 506.918 759.46 506.918 cv
755.4 506.918 li
755.4 492.338 li
f
772.78 499.958 mo
772.78 505.298 li
775.94 505.298 li
777 505.298 777.78 505.078 778.3 504.638 cv
778.8 504.198 779.06 503.538 779.06 502.618 cv
779.06 501.718 778.8 501.058 778.3 500.618 cv
777.78 500.178 777 499.958 775.94 499.958 cv
772.78 499.958 li
772.78 493.958 mo
772.78 498.358 li
775.7 498.358 li
776.66 498.358 777.36 498.178 777.84 497.818 cv
778.32 497.458 778.56 496.918 778.56 496.158 cv
778.56 495.438 778.32 494.878 777.84 494.518 cv
777.36 494.158 776.66 493.958 775.7 493.958 cv
772.78 493.958 li
770.8 492.338 mo
775.84 492.338 li
777.34 492.338 778.5 492.658 779.32 493.278 cv
780.12 493.918 780.54 494.798 780.54 495.938 cv
780.54 496.838 780.32 497.558 779.9 498.078 cv
779.48 498.598 778.88 498.938 778.08 499.058 cv
779.04 499.278 779.8 499.718 780.34 500.378 cv
780.86 501.038 781.14 501.858 781.14 502.838 cv
781.14 504.158 780.68 505.158 779.8 505.858 cv
778.92 506.578 777.66 506.918 776.04 506.918 cv
770.8 506.918 li
770.8 492.338 li
f
784.52 492.338 mo
787.18 492.338 li
793.64 504.538 li
793.64 492.338 li
795.56 492.338 li
795.56 506.918 li
792.9 506.918 li
786.44 494.718 li
786.44 506.918 li
784.52 506.918 li
784.52 492.338 li
f
810.08 491.738 mo
809.2 493.258 808.56 494.738 808.14 496.198 cv
807.7 497.658 807.5 499.138 807.5 500.638 cv
807.5 502.158 807.7 503.638 808.14 505.098 cv
808.56 506.578 809.2 508.038 810.08 509.538 cv
808.52 509.538 li
807.54 507.998 806.8 506.518 806.32 505.038 cv
805.84 503.558 805.6 502.098 805.6 500.638 cv
805.6 499.198 805.84 497.738 806.32 496.258 cv
806.8 494.778 807.52 493.278 808.52 491.738 cv
810.08 491.738 li
f
811.64 492.338 mo
823.96 492.338 li
823.96 493.998 li
818.78 493.998 li
818.78 506.918 li
816.8 506.918 li
816.8 493.998 li
811.64 493.998 li
811.64 492.338 li
f
832.119 497.658 mo
831.919 497.538 831.699 497.458 831.459 497.398 cv
831.219 497.358 830.959 497.318 830.679 497.318 cv
829.659 497.318 828.879 497.658 828.339 498.318 cv
827.779 498.978 827.519 499.918 827.519 501.158 cv
827.519 506.918 li
825.719 506.918 li
825.719 495.978 li
827.519 495.978 li
827.519 497.678 li
827.879 497.018 828.379 496.518 828.979 496.198 cv
829.579 495.878 830.319 495.718 831.199 495.718 cv
831.319 495.718 831.459 495.738 831.619 495.738 cv
831.759 495.758 831.919 495.778 832.119 495.818 cv
832.119 497.658 li
f
838.979 501.418 mo
837.519 501.418 836.519 501.598 835.959 501.918 cv
835.399 502.258 835.119 502.818 835.119 503.618 cv
835.119 504.258 835.319 504.778 835.739 505.138 cv
836.159 505.518 836.739 505.698 837.459 505.698 cv
838.459 505.698 839.259 505.358 839.859 504.638 cv
840.459 503.938 840.759 502.998 840.759 501.818 cv
840.759 501.418 li
838.979 501.418 li
842.559 500.678 mo
842.559 506.918 li
840.759 506.918 li
840.759 505.258 li
840.339 505.938 839.819 506.418 839.219 506.718 cv
838.619 507.018 837.859 507.178 836.979 507.178 cv
835.859 507.178 834.959 506.878 834.299 506.258 cv
833.639 505.638 833.319 504.798 833.319 503.738 cv
833.319 502.518 833.719 501.598 834.559 500.958 cv
835.379 500.338 836.599 500.018 838.239 500.018 cv
840.759 500.018 li
840.759 499.838 li
840.759 499.018 840.479 498.378 839.939 497.918 cv
839.399 497.478 838.639 497.238 837.659 497.238 cv
837.019 497.238 836.419 497.318 835.819 497.478 cv
835.219 497.638 834.659 497.858 834.119 498.138 cv
834.119 496.478 li
834.759 496.238 835.399 496.038 836.019 495.918 cv
836.639 495.798 837.239 495.718 837.839 495.718 cv
839.419 495.718 840.599 496.138 841.379 496.958 cv
842.159 497.778 842.559 499.018 842.559 500.678 cv
f
846.259 495.978 mo
848.059 495.978 li
848.059 506.918 li
846.259 506.918 li
846.259 495.978 li
846.259 491.718 mo
848.059 491.718 li
848.059 493.998 li
846.259 493.998 li
846.259 491.718 li
f
860.919 500.318 mo
860.919 506.918 li
859.119 506.918 li
859.119 500.378 li
859.119 499.338 858.899 498.578 858.499 498.058 cv
858.099 497.538 857.499 497.278 856.699 497.278 cv
855.719 497.278 854.959 497.598 854.399 498.218 cv
853.839 498.838 853.559 499.678 853.559 500.738 cv
853.559 506.918 li
851.759 506.918 li
851.759 495.978 li
853.559 495.978 li
853.559 497.678 li
853.979 497.038 854.479 496.538 855.079 496.218 cv
855.659 495.898 856.339 495.718 857.099 495.718 cv
858.339 495.718 859.299 496.118 859.939 496.898 cv
860.579 497.678 860.919 498.818 860.919 500.318 cv
f
864.5 495.978 mo
866.299 495.978 li
866.299 506.918 li
864.5 506.918 li
864.5 495.978 li
864.5 491.718 mo
866.299 491.718 li
866.299 493.998 li
864.5 493.998 li
864.5 491.718 li
f
879.159 500.318 mo
879.159 506.918 li
877.359 506.918 li
877.359 500.378 li
877.359 499.338 877.14 498.578 876.74 498.058 cv
876.339 497.538 875.74 497.278 874.94 497.278 cv
873.96 497.278 873.2 497.598 872.64 498.218 cv
872.08 498.838 871.799 499.678 871.799 500.738 cv
871.799 506.918 li
870 506.918 li
870 495.978 li
871.799 495.978 li
871.799 497.678 li
872.219 497.038 872.719 496.538 873.32 496.218 cv
873.899 495.898 874.58 495.718 875.339 495.718 cv
876.58 495.718 877.539 496.118 878.18 496.898 cv
878.82 497.678 879.159 498.818 879.159 500.318 cv
f
889.94 501.318 mo
889.94 500.038 889.66 499.018 889.14 498.298 cv
888.6 497.578 887.84 497.218 886.88 497.218 cv
885.92 497.218 885.16 497.578 884.62 498.298 cv
884.08 499.018 883.82 500.038 883.82 501.318 cv
883.82 502.618 884.08 503.618 884.62 504.338 cv
885.16 505.058 885.92 505.418 886.88 505.418 cv
887.84 505.418 888.6 505.058 889.14 504.338 cv
889.66 503.618 889.94 502.618 889.94 501.318 cv
891.74 505.558 mo
891.74 507.398 891.32 508.778 890.5 509.698 cv
889.66 510.598 888.4 511.058 886.7 511.058 cv
886.06 511.058 885.48 510.998 884.92 510.918 cv
884.36 510.818 883.8 510.678 883.28 510.478 cv
883.28 508.738 li
883.8 509.018 884.32 509.218 884.84 509.358 cv
885.36 509.498 885.88 509.578 886.42 509.578 cv
887.58 509.578 888.46 509.258 889.06 508.658 cv
889.64 508.038 889.94 507.118 889.94 505.878 cv
889.94 504.998 li
889.56 505.638 889.08 506.118 888.5 506.438 cv
887.92 506.758 887.24 506.918 886.44 506.918 cv
885.08 506.918 884 506.418 883.18 505.398 cv
882.36 504.378 881.96 503.018 881.96 501.318 cv
881.96 499.638 882.36 498.278 883.18 497.258 cv
884 496.238 885.08 495.718 886.44 495.718 cv
887.24 495.718 887.92 495.878 888.5 496.198 cv
889.08 496.518 889.56 496.998 889.94 497.638 cv
889.94 495.978 li
891.74 495.978 li
891.74 505.558 li
f
895.899 504.438 mo
897.959 504.438 li
897.959 506.118 li
896.359 509.218 li
895.099 509.218 li
895.899 506.118 li
895.899 504.438 li
f
916.979 492.818 mo
916.979 494.738 li
916.219 494.378 915.519 494.118 914.859 493.938 cv
914.179 493.778 913.539 493.678 912.939 493.678 cv
911.859 493.678 911.019 493.898 910.439 494.298 cv
909.859 494.718 909.579 495.318 909.579 496.078 cv
909.579 496.718 909.759 497.218 910.159 497.538 cv
910.539 497.878 911.279 498.138 912.359 498.338 cv
913.559 498.578 li
915.019 498.858 916.099 499.358 916.799 500.058 cv
917.499 500.778 917.859 501.718 917.859 502.898 cv
917.859 504.318 917.379 505.378 916.439 506.098 cv
915.479 506.818 914.099 507.178 912.279 507.178 cv
911.579 507.178 910.839 507.098 910.059 506.958 cv
909.279 506.818 908.479 506.598 907.659 506.278 cv
907.659 504.238 li
908.459 504.698 909.239 505.038 909.999 505.258 cv
910.759 505.498 911.519 505.598 912.279 505.598 cv
913.399 505.598 914.259 505.378 914.879 504.938 cv
915.479 504.498 915.799 503.878 915.799 503.038 cv
915.799 502.318 915.579 501.758 915.139 501.358 cv
914.699 500.958 913.979 500.658 912.979 500.458 cv
911.779 500.218 li
910.299 499.938 909.239 499.478 908.579 498.838 cv
907.919 498.218 907.599 497.358 907.599 496.238 cv
907.599 494.958 908.039 493.938 908.959 493.198 cv
909.859 492.458 911.119 492.078 912.719 492.078 cv
913.399 492.078 914.079 492.138 914.799 492.258 cv
915.499 492.378 916.219 492.578 916.979 492.818 cv
f
920.859 495.978 mo
922.659 495.978 li
922.659 506.918 li
920.859 506.918 li
920.859 495.978 li
920.859 491.718 mo
922.659 491.718 li
922.659 493.998 li
920.859 493.998 li
920.859 491.718 li
f
933.619 501.318 mo
933.619 500.038 933.339 499.018 932.819 498.298 cv
932.279 497.578 931.519 497.218 930.559 497.218 cv
929.599 497.218 928.839 497.578 928.299 498.298 cv
927.759 499.018 927.499 500.038 927.499 501.318 cv
927.499 502.618 927.759 503.618 928.299 504.338 cv
928.839 505.058 929.599 505.418 930.559 505.418 cv
931.519 505.418 932.279 505.058 932.819 504.338 cv
933.339 503.618 933.619 502.618 933.619 501.318 cv
935.419 505.558 mo
935.419 507.398 934.999 508.778 934.179 509.698 cv
933.339 510.598 932.079 511.058 930.379 511.058 cv
929.739 511.058 929.159 510.998 928.599 510.918 cv
928.039 510.818 927.479 510.678 926.959 510.478 cv
926.959 508.738 li
927.479 509.018 927.999 509.218 928.519 509.358 cv
929.039 509.498 929.559 509.578 930.099 509.578 cv
931.259 509.578 932.139 509.258 932.739 508.658 cv
933.319 508.038 933.619 507.118 933.619 505.878 cv
933.619 504.998 li
933.239 505.638 932.759 506.118 932.179 506.438 cv
931.599 506.758 930.919 506.918 930.119 506.918 cv
928.759 506.918 927.679 506.418 926.859 505.398 cv
926.039 504.378 925.639 503.018 925.639 501.318 cv
925.639 499.638 926.039 498.278 926.859 497.258 cv
927.679 496.238 928.759 495.718 930.119 495.718 cv
930.919 495.718 931.599 495.878 932.179 496.198 cv
932.759 496.518 933.239 496.998 933.619 497.638 cv
933.619 495.978 li
935.419 495.978 li
935.419 505.558 li
f
947.639 498.078 mo
948.079 497.278 948.619 496.698 949.239 496.298 cv
949.859 495.918 950.599 495.718 951.459 495.718 cv
952.579 495.718 953.459 496.118 954.079 496.918 cv
954.699 497.718 955.019 498.858 955.019 500.318 cv
955.019 506.918 li
953.219 506.918 li
953.219 500.378 li
953.219 499.338 953.019 498.558 952.659 498.038 cv
952.279 497.538 951.719 497.278 950.959 497.278 cv
950.019 497.278 949.279 497.598 948.739 498.218 cv
948.199 498.838 947.939 499.678 947.939 500.738 cv
947.939 506.918 li
946.139 506.918 li
946.139 500.378 li
946.139 499.338 945.939 498.558 945.579 498.038 cv
945.199 497.538 944.619 497.278 943.859 497.278 cv
942.939 497.278 942.199 497.598 941.659 498.218 cv
941.119 498.838 940.859 499.678 940.859 500.738 cv
940.859 506.918 li
939.059 506.918 li
939.059 495.978 li
940.859 495.978 li
940.859 497.678 li
941.259 497.018 941.759 496.518 942.339 496.198 cv
942.899 495.878 943.579 495.718 944.379 495.718 cv
945.179 495.718 945.839 495.918 946.399 496.318 cv
946.959 496.718 947.359 497.318 947.639 498.078 cv
f
962.839 497.238 mo
961.879 497.238 961.119 497.618 960.559 498.378 cv
959.999 499.138 959.719 500.158 959.719 501.458 cv
959.719 502.778 959.979 503.798 960.539 504.558 cv
961.099 505.318 961.859 505.678 962.839 505.678 cv
963.799 505.678 964.559 505.318 965.119 504.558 cv
965.679 503.798 965.959 502.778 965.959 501.458 cv
965.959 500.178 965.679 499.138 965.119 498.378 cv
964.559 497.618 963.799 497.238 962.839 497.238 cv
962.839 495.718 mo
964.399 495.718 965.619 496.238 966.519 497.238 cv
967.399 498.258 967.859 499.658 967.859 501.458 cv
967.859 503.258 967.399 504.658 966.519 505.658 cv
965.619 506.678 964.399 507.178 962.839 507.178 cv
961.259 507.178 960.019 506.678 959.139 505.658 cv
958.259 504.658 957.819 503.258 957.819 501.458 cv
957.819 499.658 958.259 498.258 959.139 497.238 cv
960.019 496.238 961.259 495.718 962.839 495.718 cv
f
970.839 495.978 mo
972.639 495.978 li
972.639 506.918 li
970.839 506.918 li
970.839 495.978 li
970.839 491.718 mo
972.639 491.718 li
972.639 493.998 li
970.839 493.998 li
970.839 491.718 li
f
983.599 497.638 mo
983.599 491.718 li
985.399 491.718 li
985.399 506.918 li
983.599 506.918 li
983.599 505.278 li
983.219 505.938 982.739 506.418 982.159 506.718 cv
981.579 507.018 980.899 507.178 980.099 507.178 cv
978.779 507.178 977.699 506.658 976.859 505.618 cv
976.019 504.578 975.619 503.178 975.619 501.458 cv
975.619 499.738 976.019 498.358 976.859 497.298 cv
977.699 496.258 978.779 495.718 980.099 495.718 cv
980.899 495.718 981.579 495.878 982.159 496.198 cv
982.739 496.518 983.219 496.998 983.599 497.638 cv
977.479 501.458 mo
977.479 502.778 977.739 503.818 978.279 504.578 cv
978.819 505.338 979.579 505.698 980.539 505.698 cv
981.479 505.698 982.219 505.338 982.779 504.578 cv
983.319 503.818 983.599 502.778 983.599 501.458 cv
983.599 500.138 983.319 499.118 982.779 498.358 cv
982.219 497.598 981.479 497.218 980.539 497.218 cv
979.579 497.218 978.819 497.598 978.279 498.358 cv
977.739 499.118 977.479 500.138 977.479 501.458 cv
f
988.819 491.738 mo
990.379 491.738 li
991.339 493.278 992.079 494.778 992.559 496.258 cv
993.039 497.738 993.299 499.198 993.299 500.638 cv
993.299 502.098 993.039 503.558 992.559 505.038 cv
992.079 506.518 991.339 507.998 990.379 509.538 cv
988.819 509.538 li
989.679 508.038 990.319 506.578 990.759 505.098 cv
991.179 503.638 991.399 502.158 991.399 500.638 cv
991.399 499.138 991.179 497.658 990.759 496.198 cv
990.319 494.738 989.679 493.258 988.819 491.738 cv
f
725.44 527.778 mo
745.44 527.778 li
@
732.44 530.778 mo
738.44 524.778 li
732.44 524.778 mo
738.44 530.778 li
f
1 lw
0 lc
732.44 530.778 mo
738.44 524.778 li
732.44 524.778 mo
738.44 530.778 li
@
757.38 518.318 mo
757.38 529.658 li
759.76 529.658 li
761.76 529.658 763.24 529.218 764.18 528.298 cv
765.099 527.378 765.58 525.938 765.58 523.978 cv
765.58 522.018 765.099 520.598 764.18 519.678 cv
763.24 518.778 761.76 518.318 759.76 518.318 cv
757.38 518.318 li
755.4 516.698 mo
759.46 516.698 li
762.28 516.698 764.359 517.298 765.68 518.458 cv
767 519.638 767.66 521.478 767.66 523.978 cv
767.66 526.498 766.979 528.338 765.66 529.518 cv
764.34 530.698 762.26 531.278 759.46 531.278 cv
755.4 531.278 li
755.4 516.698 li
f
772.78 524.318 mo
772.78 529.658 li
775.94 529.658 li
777 529.658 777.78 529.438 778.3 528.998 cv
778.8 528.558 779.06 527.898 779.06 526.978 cv
779.06 526.078 778.8 525.418 778.3 524.978 cv
777.78 524.538 777 524.318 775.94 524.318 cv
772.78 524.318 li
772.78 518.318 mo
772.78 522.718 li
775.7 522.718 li
776.66 522.718 777.36 522.538 777.84 522.178 cv
778.32 521.818 778.56 521.278 778.56 520.518 cv
778.56 519.798 778.32 519.238 777.84 518.878 cv
777.36 518.518 776.66 518.318 775.7 518.318 cv
772.78 518.318 li
770.8 516.698 mo
775.84 516.698 li
777.34 516.698 778.5 517.018 779.32 517.638 cv
780.12 518.278 780.54 519.158 780.54 520.298 cv
780.54 521.198 780.32 521.918 779.9 522.438 cv
779.48 522.958 778.88 523.298 778.08 523.418 cv
779.04 523.638 779.8 524.078 780.34 524.738 cv
780.86 525.398 781.14 526.218 781.14 527.198 cv
781.14 528.518 780.68 529.518 779.8 530.218 cv
778.92 530.938 777.66 531.278 776.04 531.278 cv
770.8 531.278 li
770.8 516.698 li
f
784.52 516.698 mo
787.18 516.698 li
793.64 528.898 li
793.64 516.698 li
795.56 516.698 li
795.56 531.278 li
792.9 531.278 li
786.44 519.078 li
786.44 531.278 li
784.52 531.278 li
784.52 516.698 li
f
810.08 516.098 mo
809.2 517.618 808.56 519.098 808.14 520.558 cv
807.7 522.018 807.5 523.498 807.5 524.998 cv
807.5 526.518 807.7 527.998 808.14 529.458 cv
808.56 530.938 809.2 532.398 810.08 533.898 cv
808.52 533.898 li
807.54 532.358 806.8 530.878 806.32 529.398 cv
805.84 527.918 805.6 526.458 805.6 524.998 cv
805.6 523.558 805.84 522.098 806.32 520.618 cv
806.8 519.138 807.52 517.638 808.52 516.098 cv
810.08 516.098 li
f
811.64 516.698 mo
823.96 516.698 li
823.96 518.358 li
818.78 518.358 li
818.78 531.278 li
816.8 531.278 li
816.8 518.358 li
811.64 518.358 li
811.64 516.698 li
f
835.139 525.358 mo
835.139 526.238 li
826.879 526.238 li
826.959 527.478 827.319 528.438 827.999 529.078 cv
828.659 529.718 829.579 530.038 830.779 530.038 cv
831.459 530.038 832.139 529.958 832.779 529.798 cv
833.419 529.638 834.079 529.378 834.719 529.018 cv
834.719 530.718 li
834.079 530.998 833.419 531.218 832.739 531.338 cv
832.059 531.458 831.359 531.538 830.679 531.538 cv
828.919 531.538 827.539 531.038 826.519 530.038 cv
825.499 529.038 824.999 527.658 824.999 525.918 cv
824.999 524.138 825.479 522.718 826.439 521.658 cv
827.399 520.618 828.719 520.078 830.359 520.078 cv
831.839 520.078 832.999 520.558 833.859 521.498 cv
834.699 522.458 835.139 523.738 835.139 525.358 cv
833.339 524.838 mo
833.319 523.858 833.039 523.078 832.519 522.478 cv
831.979 521.898 831.259 521.598 830.379 521.598 cv
829.379 521.598 828.579 521.898 827.979 522.458 cv
827.379 523.018 827.019 523.818 826.939 524.838 cv
833.339 524.838 li
f
845.06 520.658 mo
845.06 522.358 li
844.54 522.118 844.02 521.918 843.48 521.778 cv
842.919 521.658 842.359 521.578 841.78 521.578 cv
840.88 521.578 840.2 521.718 839.76 521.998 cv
839.32 522.278 839.1 522.678 839.1 523.218 cv
839.1 523.638 839.26 523.958 839.58 524.198 cv
839.9 524.438 840.54 524.678 841.5 524.878 cv
842.12 525.018 li
843.4 525.298 844.299 525.698 844.84 526.178 cv
845.359 526.678 845.64 527.378 845.64 528.258 cv
845.64 529.278 845.24 530.078 844.44 530.658 cv
843.64 531.258 842.52 531.538 841.12 531.538 cv
840.52 531.538 839.919 531.478 839.28 531.378 cv
838.64 531.278 837.98 531.118 837.28 530.878 cv
837.28 529.018 li
837.94 529.378 838.6 529.638 839.24 529.798 cv
839.88 529.978 840.52 530.058 841.16 530.058 cv
842 530.058 842.66 529.918 843.12 529.638 cv
843.56 529.358 843.799 528.938 843.799 528.398 cv
843.799 527.918 843.62 527.538 843.299 527.278 cv
842.98 527.018 842.26 526.758 841.14 526.518 cv
840.52 526.378 li
839.4 526.138 838.58 525.778 838.1 525.298 cv
837.6 524.818 837.359 524.158 837.359 523.298 cv
837.359 522.278 837.72 521.478 838.44 520.918 cv
839.16 520.358 840.2 520.078 841.56 520.078 cv
842.22 520.078 842.84 520.138 843.44 520.238 cv
844.02 520.338 844.56 520.478 845.06 520.658 cv
f
850.279 517.238 mo
850.279 520.338 li
853.979 520.338 li
853.979 521.738 li
850.279 521.738 li
850.279 527.678 li
850.279 528.578 850.399 529.158 850.639 529.398 cv
850.879 529.658 851.379 529.778 852.139 529.778 cv
853.979 529.778 li
853.979 531.278 li
852.139 531.278 li
850.739 531.278 849.779 531.018 849.259 530.498 cv
848.739 529.978 848.479 529.038 848.479 527.678 cv
848.479 521.738 li
847.159 521.738 li
847.159 520.338 li
848.479 520.338 li
848.479 517.238 li
850.279 517.238 li
f
856.339 520.338 mo
858.139 520.338 li
858.139 531.278 li
856.339 531.278 li
856.339 520.338 li
856.339 516.078 mo
858.139 516.078 li
858.139 518.358 li
856.339 518.358 li
856.339 516.078 li
f
870.999 524.678 mo
870.999 531.278 li
869.199 531.278 li
869.199 524.738 li
869.199 523.698 868.979 522.938 868.579 522.418 cv
868.179 521.898 867.579 521.638 866.779 521.638 cv
865.799 521.638 865.039 521.958 864.479 522.578 cv
863.919 523.198 863.639 524.038 863.639 525.098 cv
863.639 531.278 li
861.839 531.278 li
861.839 520.338 li
863.639 520.338 li
863.639 522.038 li
864.059 521.398 864.559 520.898 865.159 520.578 cv
865.739 520.258 866.419 520.078 867.179 520.078 cv
868.419 520.078 869.379 520.478 870.019 521.258 cv
870.659 522.038 870.999 523.178 870.999 524.678 cv
f
881.779 525.678 mo
881.779 524.398 881.499 523.378 880.979 522.658 cv
880.439 521.938 879.679 521.578 878.719 521.578 cv
877.759 521.578 876.999 521.938 876.459 522.658 cv
875.919 523.378 875.659 524.398 875.659 525.678 cv
875.659 526.978 875.919 527.978 876.459 528.698 cv
876.999 529.418 877.759 529.778 878.719 529.778 cv
879.679 529.778 880.439 529.418 880.979 528.698 cv
881.499 527.978 881.779 526.978 881.779 525.678 cv
883.579 529.918 mo
883.579 531.758 883.159 533.138 882.339 534.058 cv
881.499 534.958 880.239 535.418 878.539 535.418 cv
877.899 535.418 877.319 535.358 876.759 535.278 cv
876.199 535.178 875.639 535.038 875.119 534.838 cv
875.119 533.098 li
875.639 533.378 876.159 533.578 876.679 533.718 cv
877.199 533.858 877.719 533.938 878.259 533.938 cv
879.419 533.938 880.299 533.618 880.899 533.018 cv
881.479 532.398 881.779 531.478 881.779 530.238 cv
881.779 529.358 li
881.399 529.998 880.919 530.478 880.339 530.798 cv
879.759 531.118 879.079 531.278 878.279 531.278 cv
876.919 531.278 875.839 530.778 875.019 529.758 cv
874.199 528.738 873.799 527.378 873.799 525.678 cv
873.799 523.998 874.199 522.638 875.019 521.618 cv
875.839 520.598 876.919 520.078 878.279 520.078 cv
879.079 520.078 879.759 520.238 880.339 520.558 cv
880.919 520.878 881.399 521.358 881.779 521.998 cv
881.779 520.338 li
883.579 520.338 li
883.579 529.918 li
f
887.739 528.798 mo
889.799 528.798 li
889.799 530.478 li
888.199 533.578 li
886.939 533.578 li
887.739 530.478 li
887.739 528.798 li
f
908.819 517.178 mo
908.819 519.098 li
908.059 518.738 907.359 518.478 906.699 518.298 cv
906.019 518.138 905.379 518.038 904.779 518.038 cv
903.699 518.038 902.859 518.258 902.279 518.658 cv
901.699 519.078 901.419 519.678 901.419 520.438 cv
901.419 521.078 901.599 521.578 901.999 521.898 cv
902.379 522.238 903.119 522.498 904.199 522.698 cv
905.399 522.938 li
906.859 523.218 907.939 523.718 908.639 524.418 cv
909.339 525.138 909.699 526.078 909.699 527.258 cv
909.699 528.678 909.219 529.738 908.279 530.458 cv
907.319 531.178 905.939 531.538 904.119 531.538 cv
903.419 531.538 902.679 531.458 901.899 531.318 cv
901.119 531.178 900.319 530.958 899.499 530.638 cv
899.499 528.598 li
900.299 529.058 901.079 529.398 901.839 529.618 cv
902.599 529.858 903.359 529.958 904.119 529.958 cv
905.239 529.958 906.099 529.738 906.719 529.298 cv
907.319 528.858 907.639 528.238 907.639 527.398 cv
907.639 526.678 907.419 526.118 906.979 525.718 cv
906.539 525.318 905.819 525.018 904.819 524.818 cv
903.619 524.578 li
902.139 524.298 901.079 523.838 900.419 523.198 cv
899.759 522.578 899.439 521.718 899.439 520.598 cv
899.439 519.318 899.879 518.298 900.799 517.558 cv
901.699 516.818 902.959 516.438 904.559 516.438 cv
905.239 516.438 905.919 516.498 906.639 516.618 cv
907.339 516.738 908.059 516.938 908.819 517.178 cv
f
912.699 520.338 mo
914.499 520.338 li
914.499 531.278 li
912.699 531.278 li
912.699 520.338 li
912.699 516.078 mo
914.499 516.078 li
914.499 518.358 li
912.699 518.358 li
912.699 516.078 li
f
925.459 525.678 mo
925.459 524.398 925.179 523.378 924.659 522.658 cv
924.119 521.938 923.359 521.578 922.399 521.578 cv
921.439 521.578 920.679 521.938 920.139 522.658 cv
919.599 523.378 919.339 524.398 919.339 525.678 cv
919.339 526.978 919.599 527.978 920.139 528.698 cv
920.679 529.418 921.439 529.778 922.399 529.778 cv
923.359 529.778 924.119 529.418 924.659 528.698 cv
925.179 527.978 925.459 526.978 925.459 525.678 cv
927.259 529.918 mo
927.259 531.758 926.839 533.138 926.019 534.058 cv
925.179 534.958 923.919 535.418 922.219 535.418 cv
921.579 535.418 920.999 535.358 920.439 535.278 cv
919.879 535.178 919.319 535.038 918.799 534.838 cv
918.799 533.098 li
919.319 533.378 919.839 533.578 920.359 533.718 cv
920.879 533.858 921.399 533.938 921.939 533.938 cv
923.099 533.938 923.979 533.618 924.579 533.018 cv
925.159 532.398 925.459 531.478 925.459 530.238 cv
925.459 529.358 li
925.079 529.998 924.599 530.478 924.019 530.798 cv
923.439 531.118 922.759 531.278 921.959 531.278 cv
920.599 531.278 919.519 530.778 918.699 529.758 cv
917.879 528.738 917.479 527.378 917.479 525.678 cv
917.479 523.998 917.879 522.638 918.699 521.618 cv
919.519 520.598 920.599 520.078 921.959 520.078 cv
922.759 520.078 923.439 520.238 924.019 520.558 cv
924.599 520.878 925.079 521.358 925.459 521.998 cv
925.459 520.338 li
927.259 520.338 li
927.259 529.918 li
f
939.479 522.438 mo
939.919 521.638 940.459 521.058 941.079 520.658 cv
941.699 520.278 942.439 520.078 943.299 520.078 cv
944.419 520.078 945.299 520.478 945.919 521.278 cv
946.539 522.078 946.859 523.218 946.859 524.678 cv
946.859 531.278 li
945.059 531.278 li
945.059 524.738 li
945.059 523.698 944.859 522.918 944.499 522.398 cv
944.119 521.898 943.559 521.638 942.799 521.638 cv
941.859 521.638 941.119 521.958 940.579 522.578 cv
940.039 523.198 939.779 524.038 939.779 525.098 cv
939.779 531.278 li
937.979 531.278 li
937.979 524.738 li
937.979 523.698 937.779 522.918 937.419 522.398 cv
937.039 521.898 936.459 521.638 935.699 521.638 cv
934.779 521.638 934.039 521.958 933.499 522.578 cv
932.959 523.198 932.699 524.038 932.699 525.098 cv
932.699 531.278 li
930.899 531.278 li
930.899 520.338 li
932.699 520.338 li
932.699 522.038 li
933.099 521.378 933.599 520.878 934.179 520.558 cv
934.739 520.238 935.419 520.078 936.219 520.078 cv
937.019 520.078 937.679 520.278 938.239 520.678 cv
938.799 521.078 939.199 521.678 939.479 522.438 cv
f
954.679 521.598 mo
953.719 521.598 952.959 521.978 952.399 522.738 cv
951.839 523.498 951.559 524.518 951.559 525.818 cv
951.559 527.138 951.819 528.158 952.379 528.918 cv
952.939 529.678 953.699 530.038 954.679 530.038 cv
955.639 530.038 956.399 529.678 956.959 528.918 cv
957.519 528.158 957.799 527.138 957.799 525.818 cv
957.799 524.538 957.519 523.498 956.959 522.738 cv
956.399 521.978 955.639 521.598 954.679 521.598 cv
954.679 520.078 mo
956.239 520.078 957.459 520.598 958.359 521.598 cv
959.239 522.618 959.699 524.018 959.699 525.818 cv
959.699 527.618 959.239 529.018 958.359 530.018 cv
957.459 531.038 956.239 531.538 954.679 531.538 cv
953.099 531.538 951.859 531.038 950.979 530.018 cv
950.099 529.018 949.659 527.618 949.659 525.818 cv
949.659 524.018 950.099 522.618 950.979 521.598 cv
951.859 520.598 953.099 520.078 954.679 520.078 cv
f
962.679 520.338 mo
964.479 520.338 li
964.479 531.278 li
962.679 531.278 li
962.679 520.338 li
962.679 516.078 mo
964.479 516.078 li
964.479 518.358 li
962.679 518.358 li
962.679 516.078 li
f
975.439 521.998 mo
975.439 516.078 li
977.239 516.078 li
977.239 531.278 li
975.439 531.278 li
975.439 529.638 li
975.059 530.298 974.579 530.778 973.999 531.078 cv
973.419 531.378 972.739 531.538 971.939 531.538 cv
970.619 531.538 969.539 531.018 968.699 529.978 cv
967.859 528.938 967.459 527.538 967.459 525.818 cv
967.459 524.098 967.859 522.718 968.699 521.658 cv
969.539 520.618 970.619 520.078 971.939 520.078 cv
972.739 520.078 973.419 520.238 973.999 520.558 cv
974.579 520.878 975.059 521.358 975.439 521.998 cv
969.319 525.818 mo
969.319 527.138 969.579 528.178 970.119 528.938 cv
970.659 529.698 971.419 530.058 972.379 530.058 cv
973.319 530.058 974.059 529.698 974.619 528.938 cv
975.159 528.178 975.439 527.138 975.439 525.818 cv
975.439 524.498 975.159 523.478 974.619 522.718 cv
974.059 521.958 973.319 521.578 972.379 521.578 cv
971.419 521.578 970.659 521.958 970.119 522.718 cv
969.579 523.478 969.319 524.498 969.319 525.818 cv
f
980.659 516.098 mo
982.219 516.098 li
983.179 517.638 983.919 519.138 984.399 520.618 cv
984.879 522.098 985.139 523.558 985.139 524.998 cv
985.139 526.458 984.879 527.918 984.399 529.398 cv
983.919 530.878 983.179 532.358 982.219 533.898 cv
980.659 533.898 li
981.519 532.398 982.159 530.938 982.599 529.458 cv
983.019 527.998 983.239 526.518 983.239 524.998 cv
983.239 523.498 983.019 522.018 982.599 520.558 cv
982.159 519.098 981.519 517.618 980.659 516.098 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
