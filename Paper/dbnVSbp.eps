%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: dbnVSbp-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/2, 16:25:49
%%BoundingBox: 0 0 1185 610
%%HiResBoundingBox: 0 0 1185 610
%%CropBox: 0 0 1185 610
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-02T16:25:01+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-02T16:25:39+08:00"
   xmp:MetadataDate="2019-06-02T16:25:39+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:14d040f3-351a-44a4-8493-f4cda6d6f703"
   xmpMM:InstanceID="uuid:c1270ada-465a-43d9-b303-9410e3548cd5"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -610 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 610 li
1185 610 li
1185 0 li
cp
clp
gsave
8.39233e-5 610.68 mo
1185 610.68 li
1185 -.320114 li
8.39233e-5 -.320114 li
8.39233e-5 610.68 li
clp
-72 620.68 mo
1310.4 620.68 li
1310.4 -77.0001 li
-72 -77.0001 li
-72 620.68 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
100.8 543.935 mo
1172.16 543.935 li
1172.16 6.72171 li
100.8 6.72171 li
100.8 543.935 li
f
149.498 543.935 mo
149.498 547.435 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
149.498 543.935 mo
149.498 547.435 li
@
149.492 553.132 mo
148.319 553.132 147.445 553.707 146.847 554.857 cv
146.249 556.007 145.973 557.732 145.973 560.032 cv
145.973 562.332 146.249 564.057 146.847 565.207 cv
147.445 566.357 148.319 566.932 149.492 566.932 cv
150.665 566.932 151.539 566.357 152.137 565.207 cv
152.712 564.057 153.011 562.332 153.011 560.032 cv
153.011 557.732 152.712 556.007 152.137 554.857 cv
151.539 553.707 150.665 553.132 149.492 553.132 cv
149.492 551.338 mo
151.355 551.338 152.781 552.097 153.793 553.569 cv
154.782 555.064 155.288 557.226 155.288 560.032 cv
155.288 562.861 154.782 565.023 153.793 566.495 cv
152.781 567.967 151.355 568.703 149.492 568.703 cv
147.606 568.703 146.157 567.967 145.168 566.495 cv
144.179 565.023 143.696 562.861 143.696 560.032 cv
143.696 557.226 144.179 555.064 145.168 553.569 cv
146.157 552.097 147.606 551.338 149.492 551.338 cv
f
346.259 543.935 mo
346.259 547.435 li
f
346.259 543.935 mo
346.259 547.435 li
@
328.714 566.495 mo
336.626 566.495 li
336.626 568.404 li
325.977 568.404 li
325.977 566.495 li
326.828 565.621 328.001 564.425 329.496 562.907 cv
330.968 561.412 331.911 560.446 332.302 560.009 cv
333.038 559.204 333.544 558.514 333.82 557.939 cv
334.096 557.387 334.257 556.812 334.257 556.26 cv
334.257 555.386 333.935 554.65 333.314 554.098 cv
332.693 553.546 331.888 553.247 330.876 553.247 cv
330.163 553.247 329.404 553.385 328.622 553.615 cv
327.84 553.868 326.989 554.236 326.092 554.742 cv
326.092 552.442 li
327.012 552.074 327.863 551.798 328.645 551.614 cv
329.427 551.43 330.163 551.338 330.83 551.338 cv
332.555 551.338 333.935 551.775 334.97 552.649 cv
336.005 553.523 336.534 554.673 336.534 556.122 cv
336.534 556.812 336.396 557.479 336.143 558.077 cv
335.89 558.698 335.43 559.434 334.74 560.262 cv
334.556 560.492 333.958 561.113 332.946 562.148 cv
331.934 563.183 330.531 564.632 328.714 566.495 cv
f
346.24 553.132 mo
345.067 553.132 344.193 553.707 343.595 554.857 cv
342.997 556.007 342.721 557.732 342.721 560.032 cv
342.721 562.332 342.997 564.057 343.595 565.207 cv
344.193 566.357 345.067 566.932 346.24 566.932 cv
347.413 566.932 348.287 566.357 348.885 565.207 cv
349.46 564.057 349.759 562.332 349.759 560.032 cv
349.759 557.732 349.46 556.007 348.885 554.857 cv
348.287 553.707 347.413 553.132 346.24 553.132 cv
346.24 551.338 mo
348.103 551.338 349.529 552.097 350.541 553.569 cv
351.53 555.064 352.036 557.226 352.036 560.032 cv
352.036 562.861 351.53 565.023 350.541 566.495 cv
349.529 567.967 348.103 568.703 346.24 568.703 cv
344.354 568.703 342.905 567.967 341.916 566.495 cv
340.927 565.023 340.444 562.861 340.444 560.032 cv
340.444 557.226 340.927 555.064 341.916 553.569 cv
342.905 552.097 344.354 551.338 346.24 551.338 cv
f
360.868 553.132 mo
359.695 553.132 358.821 553.707 358.223 554.857 cv
357.625 556.007 357.349 557.732 357.349 560.032 cv
357.349 562.332 357.625 564.057 358.223 565.207 cv
358.821 566.357 359.695 566.932 360.868 566.932 cv
362.041 566.932 362.915 566.357 363.513 565.207 cv
364.088 564.057 364.387 562.332 364.387 560.032 cv
364.387 557.732 364.088 556.007 363.513 554.857 cv
362.915 553.707 362.041 553.132 360.868 553.132 cv
360.868 551.338 mo
362.731 551.338 364.157 552.097 365.169 553.569 cv
366.158 555.064 366.664 557.226 366.664 560.032 cv
366.664 562.861 366.158 565.023 365.169 566.495 cv
364.157 567.967 362.731 568.703 360.868 568.703 cv
358.982 568.703 357.533 567.967 356.544 566.495 cv
355.555 565.023 355.072 562.861 355.072 560.032 cv
355.072 557.226 355.555 555.064 356.544 553.569 cv
357.533 552.097 358.982 551.338 360.868 551.338 cv
f
543.019 543.935 mo
543.019 547.435 li
f
543.019 543.935 mo
543.019 547.435 li
@
529.752 553.615 mo
524.025 562.562 li
529.752 562.562 li
529.752 553.615 li
529.154 551.637 mo
532.006 551.637 li
532.006 562.562 li
534.398 562.562 li
534.398 564.448 li
532.006 564.448 li
532.006 568.404 li
529.752 568.404 li
529.752 564.448 li
522.185 564.448 li
522.185 562.263 li
529.154 551.637 li
f
543 553.132 mo
541.827 553.132 540.953 553.707 540.355 554.857 cv
539.757 556.007 539.481 557.732 539.481 560.032 cv
539.481 562.332 539.757 564.057 540.355 565.207 cv
540.953 566.357 541.827 566.932 543 566.932 cv
544.173 566.932 545.047 566.357 545.645 565.207 cv
546.22 564.057 546.519 562.332 546.519 560.032 cv
546.519 557.732 546.22 556.007 545.645 554.857 cv
545.047 553.707 544.173 553.132 543 553.132 cv
543 551.338 mo
544.863 551.338 546.289 552.097 547.301 553.569 cv
548.29 555.064 548.796 557.226 548.796 560.032 cv
548.796 562.861 548.29 565.023 547.301 566.495 cv
546.289 567.967 544.863 568.703 543 568.703 cv
541.114 568.703 539.665 567.967 538.676 566.495 cv
537.687 565.023 537.204 562.861 537.204 560.032 cv
537.204 557.226 537.687 555.064 538.676 553.569 cv
539.665 552.097 541.114 551.338 543 551.338 cv
f
557.628 553.132 mo
556.455 553.132 555.581 553.707 554.983 554.857 cv
554.385 556.007 554.109 557.732 554.109 560.032 cv
554.109 562.332 554.385 564.057 554.983 565.207 cv
555.581 566.357 556.455 566.932 557.628 566.932 cv
558.801 566.932 559.675 566.357 560.273 565.207 cv
560.848 564.057 561.147 562.332 561.147 560.032 cv
561.147 557.732 560.848 556.007 560.273 554.857 cv
559.675 553.707 558.801 553.132 557.628 553.132 cv
557.628 551.338 mo
559.491 551.338 560.917 552.097 561.929 553.569 cv
562.918 555.064 563.424 557.226 563.424 560.032 cv
563.424 562.861 562.918 565.023 561.929 566.495 cv
560.917 567.967 559.491 568.703 557.628 568.703 cv
555.742 568.703 554.293 567.967 553.304 566.495 cv
552.315 565.023 551.832 562.861 551.832 560.032 cv
551.832 557.226 552.315 555.064 553.304 553.569 cv
554.293 552.097 555.742 551.338 557.628 551.338 cv
f
739.779 543.935 mo
739.779 547.435 li
f
739.779 543.935 mo
739.779 547.435 li
@
725.408 559.112 mo
724.396 559.112 723.591 559.48 722.993 560.17 cv
722.395 560.86 722.096 561.826 722.096 563.022 cv
722.096 564.241 722.395 565.207 722.993 565.897 cv
723.591 566.587 724.396 566.932 725.408 566.932 cv
726.42 566.932 727.225 566.587 727.823 565.897 cv
728.421 565.207 728.72 564.241 728.72 563.022 cv
728.72 561.826 728.421 560.86 727.823 560.17 cv
727.225 559.48 726.42 559.112 725.408 559.112 cv
729.916 552.005 mo
729.916 554.075 li
729.341 553.799 728.766 553.592 728.191 553.454 cv
727.593 553.316 727.018 553.247 726.466 553.247 cv
724.948 553.247 723.798 553.753 723.016 554.765 cv
722.234 555.777 721.774 557.318 721.682 559.342 cv
722.119 558.698 722.671 558.192 723.338 557.847 cv
724.005 557.502 724.741 557.318 725.546 557.318 cv
727.225 557.318 728.559 557.847 729.525 558.859 cv
730.491 559.871 730.997 561.274 730.997 563.022 cv
730.997 564.747 730.468 566.127 729.456 567.162 cv
728.444 568.197 727.087 568.703 725.408 568.703 cv
723.476 568.703 721.981 567.967 720.969 566.495 cv
719.934 565.023 719.428 562.861 719.428 560.032 cv
719.428 557.387 720.049 555.271 721.314 553.707 cv
722.556 552.143 724.258 551.338 726.374 551.338 cv
726.926 551.338 727.501 551.407 728.099 551.499 cv
728.674 551.614 729.272 551.775 729.916 552.005 cv
f
739.76 553.132 mo
738.587 553.132 737.713 553.707 737.115 554.857 cv
736.517 556.007 736.241 557.732 736.241 560.032 cv
736.241 562.332 736.517 564.057 737.115 565.207 cv
737.713 566.357 738.587 566.932 739.76 566.932 cv
740.933 566.932 741.807 566.357 742.405 565.207 cv
742.98 564.057 743.279 562.332 743.279 560.032 cv
743.279 557.732 742.98 556.007 742.405 554.857 cv
741.807 553.707 740.933 553.132 739.76 553.132 cv
739.76 551.338 mo
741.623 551.338 743.049 552.097 744.061 553.569 cv
745.05 555.064 745.556 557.226 745.556 560.032 cv
745.556 562.861 745.05 565.023 744.061 566.495 cv
743.049 567.967 741.623 568.703 739.76 568.703 cv
737.874 568.703 736.425 567.967 735.436 566.495 cv
734.447 565.023 733.964 562.861 733.964 560.032 cv
733.964 557.226 734.447 555.064 735.436 553.569 cv
736.425 552.097 737.874 551.338 739.76 551.338 cv
f
754.388 553.132 mo
753.215 553.132 752.341 553.707 751.743 554.857 cv
751.145 556.007 750.869 557.732 750.869 560.032 cv
750.869 562.332 751.145 564.057 751.743 565.207 cv
752.341 566.357 753.215 566.932 754.388 566.932 cv
755.561 566.932 756.435 566.357 757.033 565.207 cv
757.608 564.057 757.907 562.332 757.907 560.032 cv
757.907 557.732 757.608 556.007 757.033 554.857 cv
756.435 553.707 755.561 553.132 754.388 553.132 cv
754.388 551.338 mo
756.251 551.338 757.677 552.097 758.689 553.569 cv
759.678 555.064 760.184 557.226 760.184 560.032 cv
760.184 562.861 759.678 565.023 758.689 566.495 cv
757.677 567.967 756.251 568.703 754.388 568.703 cv
752.502 568.703 751.053 567.967 750.064 566.495 cv
749.075 565.023 748.592 562.861 748.592 560.032 cv
748.592 557.226 749.075 555.064 750.064 553.569 cv
751.053 552.097 752.502 551.338 754.388 551.338 cv
f
936.539 543.935 mo
936.539 547.435 li
f
936.539 543.935 mo
936.539 547.435 li
@
921.893 560.446 mo
920.812 560.446 919.961 560.745 919.34 561.32 cv
918.719 561.895 918.42 562.677 918.42 563.689 cv
918.42 564.701 918.719 565.506 919.34 566.081 cv
919.961 566.656 920.812 566.932 921.893 566.932 cv
922.951 566.932 923.802 566.656 924.423 566.058 cv
925.044 565.483 925.366 564.701 925.366 563.689 cv
925.366 562.677 925.044 561.895 924.446 561.32 cv
923.825 560.745 922.974 560.446 921.893 560.446 cv
919.616 559.48 mo
918.65 559.25 917.891 558.79 917.339 558.123 cv
916.787 557.456 916.534 556.651 916.534 555.685 cv
916.534 554.351 916.994 553.293 917.96 552.511 cv
918.903 551.729 920.214 551.338 921.893 551.338 cv
923.549 551.338 924.86 551.729 925.826 552.511 cv
926.769 553.293 927.252 554.351 927.252 555.685 cv
927.252 556.651 926.976 557.456 926.424 558.123 cv
925.872 558.79 925.136 559.25 924.17 559.48 cv
925.251 559.733 926.102 560.239 926.723 560.975 cv
927.321 561.711 927.643 562.631 927.643 563.689 cv
927.643 565.322 927.137 566.564 926.148 567.415 cv
925.136 568.289 923.733 568.703 921.893 568.703 cv
920.03 568.703 918.604 568.289 917.615 567.415 cv
916.626 566.564 916.143 565.322 916.143 563.689 cv
916.143 562.631 916.442 561.711 917.063 560.975 cv
917.661 560.239 918.512 559.733 919.616 559.48 cv
918.788 555.892 mo
918.788 556.766 919.041 557.456 919.593 557.939 cv
920.145 558.422 920.904 558.652 921.893 558.652 cv
922.859 558.652 923.618 558.422 924.17 557.939 cv
924.722 557.456 924.998 556.766 924.998 555.892 cv
924.998 555.018 924.722 554.351 924.17 553.868 cv
923.618 553.385 922.859 553.132 921.893 553.132 cv
920.904 553.132 920.145 553.385 919.593 553.868 cv
919.041 554.351 918.788 555.018 918.788 555.892 cv
f
936.521 553.132 mo
935.348 553.132 934.474 553.707 933.876 554.857 cv
933.278 556.007 933.002 557.732 933.002 560.032 cv
933.002 562.332 933.278 564.057 933.876 565.207 cv
934.474 566.357 935.348 566.932 936.521 566.932 cv
937.694 566.932 938.568 566.357 939.166 565.207 cv
939.741 564.057 940.04 562.332 940.04 560.032 cv
940.04 557.732 939.741 556.007 939.166 554.857 cv
938.568 553.707 937.694 553.132 936.521 553.132 cv
936.521 551.338 mo
938.384 551.338 939.81 552.097 940.822 553.569 cv
941.811 555.064 942.317 557.226 942.317 560.032 cv
942.317 562.861 941.811 565.023 940.822 566.495 cv
939.81 567.967 938.384 568.703 936.521 568.703 cv
934.635 568.703 933.186 567.967 932.197 566.495 cv
931.208 565.023 930.725 562.861 930.725 560.032 cv
930.725 557.226 931.208 555.064 932.197 553.569 cv
933.186 552.097 934.635 551.338 936.521 551.338 cv
f
951.149 553.132 mo
949.976 553.132 949.102 553.707 948.504 554.857 cv
947.906 556.007 947.63 557.732 947.63 560.032 cv
947.63 562.332 947.906 564.057 948.504 565.207 cv
949.102 566.357 949.976 566.932 951.149 566.932 cv
952.322 566.932 953.196 566.357 953.794 565.207 cv
954.369 564.057 954.668 562.332 954.668 560.032 cv
954.668 557.732 954.369 556.007 953.794 554.857 cv
953.196 553.707 952.322 553.132 951.149 553.132 cv
951.149 551.338 mo
953.012 551.338 954.438 552.097 955.45 553.569 cv
956.439 555.064 956.945 557.226 956.945 560.032 cv
956.945 562.861 956.439 565.023 955.45 566.495 cv
954.438 567.967 953.012 568.703 951.149 568.703 cv
949.263 568.703 947.814 567.967 946.825 566.495 cv
945.836 565.023 945.353 562.861 945.353 560.032 cv
945.353 557.226 945.836 555.064 946.825 553.569 cv
947.814 552.097 949.263 551.338 951.149 551.338 cv
f
1133.3 543.935 mo
1133.3 547.435 li
f
1133.3 543.935 mo
1133.3 547.435 li
@
1106.87 566.495 mo
1110.57 566.495 li
1110.57 553.707 li
1106.55 554.512 li
1106.55 552.442 li
1110.55 551.637 li
1112.83 551.637 li
1112.83 566.495 li
1116.53 566.495 li
1116.53 568.404 li
1106.87 568.404 li
1106.87 566.495 li
f
1125.96 553.132 mo
1124.79 553.132 1123.91 553.707 1123.32 554.857 cv
1122.72 556.007 1122.44 557.732 1122.44 560.032 cv
1122.44 562.332 1122.72 564.057 1123.32 565.207 cv
1123.91 566.357 1124.79 566.932 1125.96 566.932 cv
1127.13 566.932 1128.01 566.357 1128.61 565.207 cv
1129.18 564.057 1129.48 562.332 1129.48 560.032 cv
1129.48 557.732 1129.18 556.007 1128.61 554.857 cv
1128.01 553.707 1127.13 553.132 1125.96 553.132 cv
1125.96 551.338 mo
1127.82 551.338 1129.25 552.097 1130.26 553.569 cv
1131.25 555.064 1131.76 557.226 1131.76 560.032 cv
1131.76 562.861 1131.25 565.023 1130.26 566.495 cv
1129.25 567.967 1127.82 568.703 1125.96 568.703 cv
1124.07 568.703 1122.63 567.967 1121.64 566.495 cv
1120.65 565.023 1120.16 562.861 1120.16 560.032 cv
1120.16 557.226 1120.65 555.064 1121.64 553.569 cv
1122.63 552.097 1124.07 551.338 1125.96 551.338 cv
f
1140.59 553.132 mo
1139.42 553.132 1138.54 553.707 1137.94 554.857 cv
1137.35 556.007 1137.07 557.732 1137.07 560.032 cv
1137.07 562.332 1137.35 564.057 1137.94 565.207 cv
1138.54 566.357 1139.42 566.932 1140.59 566.932 cv
1141.76 566.932 1142.64 566.357 1143.23 565.207 cv
1143.81 564.057 1144.11 562.332 1144.11 560.032 cv
1144.11 557.732 1143.81 556.007 1143.23 554.857 cv
1142.64 553.707 1141.76 553.132 1140.59 553.132 cv
1140.59 551.338 mo
1142.45 551.338 1143.88 552.097 1144.89 553.569 cv
1145.88 555.064 1146.38 557.226 1146.38 560.032 cv
1146.38 562.861 1145.88 565.023 1144.89 566.495 cv
1143.88 567.967 1142.45 568.703 1140.59 568.703 cv
1138.7 568.703 1137.25 567.967 1136.26 566.495 cv
1135.28 565.023 1134.79 562.861 1134.79 560.032 cv
1134.79 557.226 1135.28 555.064 1136.26 553.569 cv
1137.25 552.097 1138.7 551.338 1140.59 551.338 cv
f
1155.22 553.132 mo
1154.04 553.132 1153.17 553.707 1152.57 554.857 cv
1151.97 556.007 1151.7 557.732 1151.7 560.032 cv
1151.7 562.332 1151.97 564.057 1152.57 565.207 cv
1153.17 566.357 1154.04 566.932 1155.22 566.932 cv
1156.39 566.932 1157.26 566.357 1157.86 565.207 cv
1158.44 564.057 1158.74 562.332 1158.74 560.032 cv
1158.74 557.732 1158.44 556.007 1157.86 554.857 cv
1157.26 553.707 1156.39 553.132 1155.22 553.132 cv
1155.22 551.338 mo
1157.08 551.338 1158.51 552.097 1159.52 553.569 cv
1160.51 555.064 1161.01 557.226 1161.01 560.032 cv
1161.01 562.861 1160.51 565.023 1159.52 566.495 cv
1158.51 567.967 1157.08 568.703 1155.22 568.703 cv
1153.33 568.703 1151.88 567.967 1150.89 566.495 cv
1149.9 565.023 1149.42 562.861 1149.42 560.032 cv
1149.42 557.226 1149.9 555.064 1150.89 553.569 cv
1151.88 552.097 1153.33 551.338 1155.22 551.338 cv
f
593.482 578.112 mo
607.313 578.112 li
607.313 580.602 li
596.452 580.602 li
596.452 587.082 li
606.862 587.082 li
606.862 589.572 li
596.452 589.572 li
596.452 597.492 li
607.582 597.492 li
607.582 599.982 li
593.482 599.982 li
593.482 578.112 li
f
614.933 597.522 mo
614.933 606.192 li
612.233 606.192 li
612.233 583.572 li
614.933 583.572 li
614.933 586.062 li
615.473 585.102 616.193 584.382 617.063 583.902 cv
617.933 583.422 618.983 583.182 620.183 583.182 cv
622.163 583.182 623.783 583.992 625.043 585.552 cv
626.273 587.142 626.903 589.212 626.903 591.792 cv
626.903 594.372 626.273 596.472 625.043 598.032 cv
623.783 599.592 622.163 600.372 620.183 600.372 cv
618.983 600.372 617.933 600.132 617.063 599.682 cv
616.193 599.232 615.473 598.512 614.933 597.522 cv
624.113 591.792 mo
624.113 589.812 623.693 588.282 622.883 587.142 cv
622.043 586.002 620.933 585.432 619.523 585.432 cv
618.083 585.432 616.973 586.002 616.163 587.142 cv
615.323 588.282 614.933 589.812 614.933 591.792 cv
614.933 593.772 615.323 595.332 616.163 596.472 cv
616.973 597.612 618.083 598.152 619.523 598.152 cv
620.933 598.152 622.043 597.612 622.883 596.472 cv
623.693 595.332 624.113 593.772 624.113 591.792 cv
f
637.732 585.462 mo
636.292 585.462 635.152 586.032 634.312 587.172 cv
633.472 588.312 633.052 589.842 633.052 591.792 cv
633.052 593.772 633.442 595.302 634.282 596.442 cv
635.122 597.582 636.262 598.122 637.732 598.122 cv
639.172 598.122 640.312 597.582 641.152 596.442 cv
641.992 595.302 642.412 593.772 642.412 591.792 cv
642.412 589.872 641.992 588.312 641.152 587.172 cv
640.312 586.032 639.172 585.462 637.732 585.462 cv
637.732 583.182 mo
640.072 583.182 641.902 583.962 643.252 585.462 cv
644.572 586.992 645.262 589.092 645.262 591.792 cv
645.262 594.492 644.572 596.592 643.252 598.092 cv
641.902 599.622 640.072 600.372 637.732 600.372 cv
635.362 600.372 633.502 599.622 632.182 598.092 cv
630.862 596.592 630.202 594.492 630.202 591.792 cv
630.202 589.092 630.862 586.992 632.182 585.462 cv
633.502 583.962 635.362 583.182 637.732 583.182 cv
f
661.552 584.202 mo
661.552 586.722 li
660.772 586.302 660.022 586.002 659.242 585.792 cv
658.462 585.582 657.712 585.462 656.932 585.462 cv
655.192 585.462 653.812 586.032 652.852 587.142 cv
651.892 588.252 651.412 589.812 651.412 591.792 cv
651.412 593.802 651.892 595.362 652.852 596.472 cv
653.812 597.582 655.192 598.122 656.932 598.122 cv
657.712 598.122 658.462 598.032 659.242 597.822 cv
660.022 597.612 660.772 597.282 661.552 596.862 cv
661.552 599.352 li
660.772 599.712 659.992 599.982 659.212 600.132 cv
658.402 600.282 657.532 600.372 656.632 600.372 cv
654.172 600.372 652.192 599.622 650.752 598.062 cv
649.282 596.532 648.562 594.432 648.562 591.792 cv
648.562 589.122 649.282 587.022 650.752 585.492 cv
652.222 583.962 654.232 583.182 656.812 583.182 cv
657.652 583.182 658.462 583.272 659.242 583.452 cv
660.022 583.632 660.802 583.872 661.552 584.202 cv
f
679.882 590.082 mo
679.882 599.982 li
677.182 599.982 li
677.182 590.172 li
677.182 588.612 676.852 587.472 676.253 586.692 cv
675.652 585.912 674.753 585.522 673.552 585.522 cv
672.082 585.522 670.943 586.002 670.102 586.932 cv
669.262 587.862 668.842 589.122 668.842 590.712 cv
668.842 599.982 li
666.142 599.982 li
666.142 577.182 li
668.842 577.182 li
668.842 586.122 li
669.472 585.162 670.222 584.412 671.122 583.932 cv
671.992 583.452 673.012 583.182 674.152 583.182 cv
676.012 583.182 677.452 583.782 678.412 584.952 cv
679.372 586.122 679.882 587.832 679.882 590.082 cv
f
100.8 447.837 mo
97.3 447.837 li
f
100.8 447.837 mo
97.3 447.837 li
@
64.5202 441.299 mo
63.3473 441.299 62.4733 441.874 61.8753 443.024 cv
61.2773 444.174 61.0013 445.899 61.0013 448.199 cv
61.0013 450.499 61.2773 452.224 61.8753 453.374 cv
62.4733 454.524 63.3473 455.099 64.5202 455.099 cv
65.6933 455.099 66.5673 454.524 67.1653 453.374 cv
67.7402 452.224 68.0393 450.499 68.0393 448.199 cv
68.0393 445.899 67.7402 444.174 67.1653 443.024 cv
66.5673 441.874 65.6933 441.299 64.5202 441.299 cv
64.5202 439.505 mo
66.3833 439.505 67.8092 440.264 68.8213 441.736 cv
69.8103 443.231 70.3163 445.393 70.3163 448.199 cv
70.3163 451.028 69.8103 453.19 68.8213 454.662 cv
67.8092 456.134 66.3833 456.87 64.5202 456.87 cv
62.6342 456.87 61.1853 456.134 60.1963 454.662 cv
59.2073 453.19 58.7243 451.028 58.7243 448.199 cv
58.7243 445.393 59.2073 443.231 60.1963 441.736 cv
61.1853 440.264 62.6342 439.505 64.5202 439.505 cv
f
74.2953 453.719 mo
76.6643 453.719 li
76.6643 456.571 li
74.2953 456.571 li
74.2953 453.719 li
f
83.5641 454.662 mo
91.4761 454.662 li
91.4761 456.571 li
80.8271 456.571 li
80.8271 454.662 li
81.6781 453.788 82.8511 452.592 84.3461 451.074 cv
85.8181 449.579 86.7611 448.613 87.1521 448.176 cv
87.8881 447.371 88.3941 446.681 88.6701 446.106 cv
88.9461 445.554 89.1071 444.979 89.1071 444.427 cv
89.1071 443.553 88.7851 442.817 88.1641 442.265 cv
87.5431 441.713 86.7381 441.414 85.7261 441.414 cv
85.0131 441.414 84.2541 441.552 83.4721 441.782 cv
82.6901 442.035 81.8391 442.403 80.9421 442.909 cv
80.9421 440.609 li
81.8621 440.241 82.7131 439.965 83.4951 439.781 cv
84.2771 439.597 85.0131 439.505 85.6801 439.505 cv
87.4051 439.505 88.7851 439.942 89.8201 440.816 cv
90.8551 441.69 91.3841 442.84 91.3841 444.289 cv
91.3841 444.979 91.2461 445.646 90.9931 446.244 cv
90.7401 446.865 90.2801 447.601 89.5901 448.429 cv
89.4061 448.659 88.8081 449.28 87.7961 450.315 cv
86.7841 451.35 85.3811 452.799 83.5641 454.662 cv
f
100.8 333.15 mo
97.3 333.15 li
f
100.8 333.15 mo
97.3 333.15 li
@
64.5202 326.612 mo
63.3473 326.612 62.4733 327.187 61.8753 328.337 cv
61.2773 329.487 61.0013 331.212 61.0013 333.512 cv
61.0013 335.812 61.2773 337.537 61.8753 338.687 cv
62.4733 339.837 63.3473 340.412 64.5202 340.412 cv
65.6933 340.412 66.5673 339.837 67.1653 338.687 cv
67.7402 337.537 68.0393 335.812 68.0393 333.512 cv
68.0393 331.212 67.7402 329.487 67.1653 328.337 cv
66.5673 327.187 65.6933 326.612 64.5202 326.612 cv
64.5202 324.818 mo
66.3833 324.818 67.8092 325.577 68.8213 327.049 cv
69.8103 328.544 70.3163 330.706 70.3163 333.512 cv
70.3163 336.341 69.8103 338.503 68.8213 339.975 cv
67.8092 341.447 66.3833 342.183 64.5202 342.183 cv
62.6342 342.183 61.1853 341.447 60.1963 339.975 cv
59.2073 338.503 58.7243 336.341 58.7243 333.512 cv
58.7243 330.706 59.2073 328.544 60.1963 327.049 cv
61.1853 325.577 62.6342 324.818 64.5202 324.818 cv
f
74.2953 339.032 mo
76.6643 339.032 li
76.6643 341.884 li
74.2953 341.884 li
74.2953 339.032 li
f
87.8421 327.095 mo
82.1151 336.042 li
87.8421 336.042 li
87.8421 327.095 li
87.2441 325.117 mo
90.0961 325.117 li
90.0961 336.042 li
92.4881 336.042 li
92.4881 337.928 li
90.0961 337.928 li
90.0961 341.884 li
87.8421 341.884 li
87.8421 337.928 li
80.2751 337.928 li
80.2751 335.743 li
87.2441 325.117 li
f
100.8 218.463 mo
97.3 218.463 li
f
100.8 218.463 mo
97.3 218.463 li
@
64.5202 211.925 mo
63.3473 211.925 62.4733 212.5 61.8753 213.65 cv
61.2773 214.8 61.0013 216.525 61.0013 218.825 cv
61.0013 221.125 61.2773 222.85 61.8753 224 cv
62.4733 225.15 63.3473 225.725 64.5202 225.725 cv
65.6933 225.725 66.5673 225.15 67.1653 224 cv
67.7402 222.85 68.0393 221.125 68.0393 218.825 cv
68.0393 216.525 67.7402 214.8 67.1653 213.65 cv
66.5673 212.5 65.6933 211.925 64.5202 211.925 cv
64.5202 210.131 mo
66.3833 210.131 67.8092 210.89 68.8213 212.362 cv
69.8103 213.857 70.3163 216.019 70.3163 218.825 cv
70.3163 221.654 69.8103 223.816 68.8213 225.288 cv
67.8092 226.76 66.3833 227.496 64.5202 227.496 cv
62.6342 227.496 61.1853 226.76 60.1963 225.288 cv
59.2073 223.816 58.7243 221.654 58.7243 218.825 cv
58.7243 216.019 59.2073 213.857 60.1963 212.362 cv
61.1853 210.89 62.6342 210.131 64.5202 210.131 cv
f
74.2953 224.345 mo
76.6643 224.345 li
76.6643 227.197 li
74.2953 227.197 li
74.2953 224.345 li
f
86.7381 217.905 mo
85.7261 217.905 84.9211 218.273 84.3231 218.963 cv
83.7251 219.653 83.4261 220.619 83.4261 221.815 cv
83.4261 223.034 83.7251 224 84.3231 224.69 cv
84.9211 225.38 85.7261 225.725 86.7381 225.725 cv
87.7501 225.725 88.5551 225.38 89.1531 224.69 cv
89.7511 224 90.0501 223.034 90.0501 221.815 cv
90.0501 220.619 89.7511 219.653 89.1531 218.963 cv
88.5551 218.273 87.7501 217.905 86.7381 217.905 cv
91.2461 210.798 mo
91.2461 212.868 li
90.6711 212.592 90.0961 212.385 89.5211 212.247 cv
88.9231 212.109 88.3481 212.04 87.7961 212.04 cv
86.2781 212.04 85.1281 212.546 84.3461 213.558 cv
83.5641 214.57 83.1041 216.111 83.0121 218.135 cv
83.4491 217.491 84.0011 216.985 84.6681 216.64 cv
85.3351 216.295 86.0711 216.111 86.8761 216.111 cv
88.5551 216.111 89.8891 216.64 90.8551 217.652 cv
91.8211 218.664 92.3271 220.067 92.3271 221.815 cv
92.3271 223.54 91.7981 224.92 90.7861 225.955 cv
89.7741 226.99 88.4171 227.496 86.7381 227.496 cv
84.8061 227.496 83.3111 226.76 82.2991 225.288 cv
81.2641 223.816 80.7581 221.654 80.7581 218.825 cv
80.7581 216.18 81.3791 214.064 82.6441 212.5 cv
83.8861 210.936 85.5881 210.131 87.7041 210.131 cv
88.2561 210.131 88.8311 210.2 89.4291 210.292 cv
90.0041 210.407 90.6021 210.568 91.2461 210.798 cv
f
100.8 103.776 mo
97.3 103.776 li
f
100.8 103.776 mo
97.3 103.776 li
@
64.5202 97.2379 mo
63.3473 97.2379 62.4733 97.813 61.8753 98.963 cv
61.2773 100.113 61.0013 101.838 61.0013 104.138 cv
61.0013 106.438 61.2773 108.163 61.8753 109.313 cv
62.4733 110.463 63.3473 111.038 64.5202 111.038 cv
65.6933 111.038 66.5673 110.463 67.1653 109.313 cv
67.7402 108.163 68.0393 106.438 68.0393 104.138 cv
68.0393 101.838 67.7402 100.113 67.1653 98.963 cv
66.5673 97.813 65.6933 97.2379 64.5202 97.2379 cv
64.5202 95.4439 mo
66.3833 95.4439 67.8092 96.2029 68.8213 97.6749 cv
69.8103 99.1699 70.3163 101.332 70.3163 104.138 cv
70.3163 106.967 69.8103 109.129 68.8213 110.601 cv
67.8092 112.073 66.3833 112.809 64.5202 112.809 cv
62.6342 112.809 61.1853 112.073 60.1963 110.601 cv
59.2073 109.129 58.7243 106.967 58.7243 104.138 cv
58.7243 101.332 59.2073 99.1699 60.1963 97.6749 cv
61.1853 96.2029 62.6342 95.4439 64.5202 95.4439 cv
f
74.2953 109.658 mo
76.6643 109.658 li
76.6643 112.51 li
74.2953 112.51 li
74.2953 109.658 li
f
86.4621 104.552 mo
85.3811 104.552 84.5301 104.851 83.9091 105.426 cv
83.2881 106.001 82.9891 106.783 82.9891 107.795 cv
82.9891 108.807 83.2881 109.612 83.9091 110.187 cv
84.5301 110.762 85.3811 111.038 86.4621 111.038 cv
87.5201 111.038 88.3711 110.762 88.9921 110.164 cv
89.6131 109.589 89.9351 108.807 89.9351 107.795 cv
89.9351 106.783 89.6131 106.001 89.0151 105.426 cv
88.3941 104.851 87.5431 104.552 86.4621 104.552 cv
84.1851 103.586 mo
83.2191 103.356 82.4601 102.896 81.9081 102.229 cv
81.3561 101.562 81.1031 100.757 81.1031 99.7909 cv
81.1031 98.4569 81.5631 97.3989 82.5291 96.6169 cv
83.4721 95.8349 84.7831 95.4439 86.4621 95.4439 cv
88.1181 95.4439 89.4291 95.8349 90.3951 96.6169 cv
91.3381 97.3989 91.8211 98.4569 91.8211 99.7909 cv
91.8211 100.757 91.5451 101.562 90.9931 102.229 cv
90.4411 102.896 89.7051 103.356 88.7391 103.586 cv
89.8201 103.839 90.6711 104.345 91.2921 105.081 cv
91.8901 105.817 92.2121 106.737 92.2121 107.795 cv
92.2121 109.428 91.7061 110.67 90.7171 111.521 cv
89.7051 112.395 88.3021 112.809 86.4621 112.809 cv
84.5991 112.809 83.1731 112.395 82.1841 111.521 cv
81.1951 110.67 80.7121 109.428 80.7121 107.795 cv
80.7121 106.737 81.0111 105.817 81.6321 105.081 cv
82.2301 104.345 83.0811 103.839 84.1851 103.586 cv
83.3571 99.9979 mo
83.3571 100.872 83.6101 101.562 84.1621 102.045 cv
84.7141 102.528 85.4731 102.758 86.4621 102.758 cv
87.4281 102.758 88.1871 102.528 88.7391 102.045 cv
89.2911 101.562 89.5671 100.872 89.5671 99.9979 cv
89.5671 99.1239 89.2911 98.4569 88.7391 97.9739 cv
88.1871 97.491 87.4281 97.2379 86.4621 97.2379 cv
85.4731 97.2379 84.7141 97.491 84.1621 97.9739 cv
83.6101 98.4569 83.3571 99.1239 83.3571 99.9979 cv
f
28.0119 373.318 mo
38.9019 377.338 li
38.9019 369.298 li
28.0119 373.318 li
25.1019 374.998 mo
25.1019 371.638 li
46.9719 363.298 li
46.9719 366.388 li
41.3619 368.368 li
41.3619 378.238 li
46.9719 380.218 li
46.9719 383.338 li
25.1019 374.998 li
f
31.1919 348.418 mo
33.7119 348.418 li
33.2919 349.198 32.9919 349.948 32.7819 350.728 cv
32.5719 351.508 32.4519 352.258 32.4519 353.038 cv
32.4519 354.778 33.0219 356.158 34.1319 357.118 cv
35.2419 358.078 36.8019 358.558 38.7819 358.558 cv
40.7919 358.558 42.3519 358.078 43.4619 357.118 cv
44.5719 356.158 45.1119 354.778 45.1119 353.038 cv
45.1119 352.258 45.0219 351.508 44.8119 350.728 cv
44.6019 349.948 44.2719 349.198 43.8519 348.418 cv
46.3419 348.418 li
46.7019 349.198 46.9719 349.978 47.1219 350.758 cv
47.2719 351.568 47.3619 352.438 47.3619 353.338 cv
47.3619 355.798 46.6119 357.778 45.0519 359.218 cv
43.5219 360.688 41.4219 361.408 38.7819 361.408 cv
36.1119 361.408 34.0119 360.688 32.4819 359.218 cv
30.9519 357.748 30.1719 355.738 30.1719 353.158 cv
30.1719 352.318 30.2619 351.508 30.4419 350.728 cv
30.6219 349.948 30.8619 349.168 31.1919 348.418 cv
f
31.1919 331.918 mo
33.7119 331.918 li
33.2919 332.698 32.9919 333.448 32.7819 334.228 cv
32.5719 335.008 32.4519 335.758 32.4519 336.538 cv
32.4519 338.278 33.0219 339.658 34.1319 340.618 cv
35.2419 341.578 36.8019 342.058 38.7819 342.058 cv
40.7919 342.058 42.3519 341.578 43.4619 340.618 cv
44.5719 339.658 45.1119 338.278 45.1119 336.538 cv
45.1119 335.758 45.0219 335.008 44.8119 334.228 cv
44.6019 333.448 44.2719 332.698 43.8519 331.918 cv
46.3419 331.918 li
46.7019 332.698 46.9719 333.478 47.1219 334.258 cv
47.2719 335.068 47.3619 335.938 47.3619 336.838 cv
47.3619 339.298 46.6119 341.278 45.0519 342.718 cv
43.5219 344.188 41.4219 344.908 38.7819 344.908 cv
36.1119 344.908 34.0119 344.188 32.4819 342.718 cv
30.9519 341.248 30.1719 339.238 30.1719 336.658 cv
30.1719 335.818 30.2619 335.008 30.4419 334.228 cv
30.6219 333.448 30.8619 332.668 31.1919 331.918 cv
f
40.4919 327.508 mo
30.5619 327.508 li
30.5619 324.808 li
40.4019 324.808 li
41.9619 324.808 43.1019 324.508 43.8819 323.908 cv
44.6619 323.308 45.0519 322.408 45.0519 321.178 cv
45.0519 319.738 44.6019 318.568 43.6719 317.728 cv
42.7419 316.888 41.4819 316.468 39.8619 316.468 cv
30.5619 316.468 li
30.5619 313.768 li
46.9719 313.768 li
46.9719 316.468 li
44.4519 316.468 li
45.4719 317.128 46.1919 317.908 46.6719 318.748 cv
47.1219 319.618 47.3619 320.608 47.3619 321.748 cv
47.3619 323.638 46.7919 325.078 45.6219 326.038 cv
44.4819 327.028 42.7719 327.508 40.4919 327.508 cv
30.1719 320.728 mo
30.1719 320.728 li
f
33.0819 298.708 mo
32.9019 299.008 32.7819 299.338 32.6919 299.698 cv
32.6319 300.058 32.5719 300.448 32.5719 300.868 cv
32.5719 302.398 33.0819 303.568 34.0719 304.378 cv
35.0619 305.218 36.4719 305.608 38.3319 305.608 cv
46.9719 305.608 li
46.9719 308.308 li
30.5619 308.308 li
30.5619 305.608 li
33.1119 305.608 li
32.1219 305.068 31.3719 304.318 30.8919 303.418 cv
30.4119 302.518 30.1719 301.408 30.1719 300.088 cv
30.1719 299.908 30.2019 299.698 30.2019 299.458 cv
30.2319 299.248 30.2619 299.008 30.3219 298.708 cv
33.0819 298.708 li
f
38.7219 288.418 mo
38.7219 290.608 38.9919 292.108 39.4719 292.948 cv
39.9819 293.788 40.8219 294.208 42.0219 294.208 cv
42.9819 294.208 43.7619 293.908 44.3019 293.278 cv
44.8719 292.648 45.1419 291.778 45.1419 290.698 cv
45.1419 289.198 44.6319 287.998 43.5519 287.098 cv
42.5019 286.198 41.0919 285.748 39.3219 285.748 cv
38.7219 285.748 li
38.7219 288.418 li
37.6119 283.048 mo
46.9719 283.048 li
46.9719 285.748 li
44.4819 285.748 li
45.5019 286.378 46.2219 287.158 46.6719 288.058 cv
47.1219 288.958 47.3619 290.098 47.3619 291.418 cv
47.3619 293.098 46.9119 294.448 45.9819 295.438 cv
45.0519 296.428 43.7919 296.908 42.2019 296.908 cv
40.3719 296.908 38.9919 296.308 38.0319 295.048 cv
37.1019 293.818 36.6219 291.988 36.6219 289.528 cv
36.6219 285.748 li
36.3519 285.748 li
35.1219 285.748 34.1619 286.168 33.4719 286.978 cv
32.8119 287.788 32.4519 288.928 32.4519 290.398 cv
32.4519 291.358 32.5719 292.258 32.8119 293.158 cv
33.0519 294.058 33.3819 294.898 33.8019 295.708 cv
31.3119 295.708 li
30.9519 294.748 30.6519 293.788 30.4719 292.858 cv
30.2919 291.928 30.1719 291.028 30.1719 290.128 cv
30.1719 287.758 30.8019 285.988 32.0319 284.818 cv
33.2619 283.648 35.1219 283.048 37.6119 283.048 cv
f
31.1919 265.678 mo
33.7119 265.678 li
33.2919 266.458 32.9919 267.208 32.7819 267.988 cv
32.5719 268.768 32.4519 269.518 32.4519 270.298 cv
32.4519 272.038 33.0219 273.418 34.1319 274.378 cv
35.2419 275.338 36.8019 275.818 38.7819 275.818 cv
40.7919 275.818 42.3519 275.338 43.4619 274.378 cv
44.5719 273.418 45.1119 272.038 45.1119 270.298 cv
45.1119 269.518 45.0219 268.768 44.8119 267.988 cv
44.6019 267.208 44.2719 266.458 43.8519 265.678 cv
46.3419 265.678 li
46.7019 266.458 46.9719 267.238 47.1219 268.018 cv
47.2719 268.828 47.3619 269.698 47.3619 270.598 cv
47.3619 273.058 46.6119 275.038 45.0519 276.478 cv
43.5219 277.948 41.4219 278.668 38.7819 278.668 cv
36.1119 278.668 34.0119 277.948 32.4819 276.478 cv
30.9519 275.008 30.1719 272.998 30.1719 270.418 cv
30.1719 269.578 30.2619 268.768 30.4419 267.988 cv
30.6219 267.208 30.8619 266.428 31.1919 265.678 cv
f
48.4719 254.158 mo
50.3919 254.938 51.6819 255.688 52.2819 256.408 cv
52.8819 257.128 53.1819 258.088 53.1819 259.288 cv
53.1819 261.448 li
50.9319 261.448 li
50.9319 259.858 li
50.9319 259.138 50.7519 258.568 50.3919 258.148 cv
50.0319 257.728 49.2219 257.278 47.9019 256.768 cv
46.7019 256.288 li
30.5619 262.918 li
30.5619 260.068 li
43.4019 254.938 li
30.5619 249.808 li
30.5619 246.958 li
48.4719 254.158 li
f
36.7119 223.198 mo
36.9519 222.568 37.4019 221.938 38.0919 221.338 cv
38.8119 220.738 39.7719 220.138 41.0019 219.538 cv
46.9719 216.538 li
46.9719 219.718 li
41.3619 222.508 li
39.9219 223.228 38.9319 223.948 38.4519 224.608 cv
37.9719 225.298 37.7319 226.228 37.7319 227.398 cv
37.7319 230.608 li
46.9719 230.608 li
46.9719 233.578 li
25.1019 233.578 li
25.1019 226.888 li
25.1019 224.398 25.6419 222.538 26.6619 221.308 cv
27.7119 220.078 29.3019 219.448 31.4019 219.448 cv
32.7819 219.448 33.9519 219.778 34.8519 220.408 cv
35.7519 221.068 36.3819 221.998 36.7119 223.198 cv
27.5319 230.608 mo
35.3019 230.608 li
35.3019 226.888 li
35.3019 225.478 34.9719 224.398 34.3119 223.678 cv
33.6519 222.958 32.6919 222.568 31.4019 222.568 cv
30.1419 222.568 29.1819 222.958 28.5219 223.678 cv
27.8619 224.398 27.5319 225.478 27.5319 226.888 cv
27.5319 230.608 li
f
38.7219 205.378 mo
38.7219 207.568 38.9919 209.068 39.4719 209.908 cv
39.9819 210.748 40.8219 211.168 42.0219 211.168 cv
42.9819 211.168 43.7619 210.868 44.3019 210.238 cv
44.8719 209.608 45.1419 208.738 45.1419 207.658 cv
45.1419 206.158 44.6319 204.958 43.5519 204.058 cv
42.5019 203.158 41.0919 202.708 39.3219 202.708 cv
38.7219 202.708 li
38.7219 205.378 li
37.6119 200.008 mo
46.9719 200.008 li
46.9719 202.708 li
44.4819 202.708 li
45.5019 203.338 46.2219 204.118 46.6719 205.018 cv
47.1219 205.918 47.3619 207.058 47.3619 208.378 cv
47.3619 210.058 46.9119 211.408 45.9819 212.398 cv
45.0519 213.388 43.7919 213.868 42.2019 213.868 cv
40.3719 213.868 38.9919 213.268 38.0319 212.008 cv
37.1019 210.778 36.6219 208.948 36.6219 206.488 cv
36.6219 202.708 li
36.3519 202.708 li
35.1219 202.708 34.1619 203.128 33.4719 203.938 cv
32.8119 204.748 32.4519 205.888 32.4519 207.358 cv
32.4519 208.318 32.5719 209.218 32.8119 210.118 cv
33.0519 211.018 33.3819 211.858 33.8019 212.668 cv
31.3119 212.668 li
30.9519 211.708 30.6519 210.748 30.4719 209.818 cv
30.2919 208.888 30.1719 207.988 30.1719 207.088 cv
30.1719 204.718 30.8019 202.948 32.0319 201.778 cv
33.2619 200.608 35.1219 200.008 37.6119 200.008 cv
f
25.9119 191.788 mo
30.5619 191.788 li
30.5619 186.238 li
32.6619 186.238 li
32.6619 191.788 li
41.5719 191.788 li
42.9219 191.788 43.7919 191.608 44.1519 191.248 cv
44.5419 190.888 44.7219 190.138 44.7219 188.998 cv
44.7219 186.238 li
46.9719 186.238 li
46.9719 188.998 li
46.9719 191.098 46.5819 192.538 45.8019 193.318 cv
45.0219 194.098 43.6119 194.488 41.5719 194.488 cv
32.6619 194.488 li
32.6619 196.468 li
30.5619 196.468 li
30.5619 194.488 li
25.9119 194.488 li
25.9119 191.788 li
f
38.0919 168.658 mo
39.4119 168.658 li
39.4119 181.048 li
41.2719 180.928 42.7119 180.388 43.6719 179.368 cv
44.6319 178.378 45.1119 176.998 45.1119 175.198 cv
45.1119 174.178 44.9919 173.158 44.7519 172.198 cv
44.5119 171.238 44.1219 170.248 43.5819 169.288 cv
46.1319 169.288 li
46.5519 170.248 46.8819 171.238 47.0619 172.258 cv
47.2419 173.278 47.3619 174.328 47.3619 175.348 cv
47.3619 177.988 46.6119 180.058 45.1119 181.588 cv
43.6119 183.118 41.5419 183.868 38.9319 183.868 cv
36.2619 183.868 34.1319 183.148 32.5419 181.708 cv
30.9819 180.268 30.1719 178.288 30.1719 175.828 cv
30.1719 173.608 30.8919 171.868 32.3019 170.578 cv
33.7419 169.318 35.6619 168.658 38.0919 168.658 cv
37.3119 171.358 mo
35.8419 171.388 34.6719 171.808 33.7719 172.588 cv
32.9019 173.398 32.4519 174.478 32.4519 175.798 cv
32.4519 177.298 32.9019 178.498 33.7419 179.398 cv
34.5819 180.298 35.7819 180.838 37.3119 180.958 cv
37.3119 171.358 li
f
1.5 lw
2 lc
149.498 504.225 mo
159.336 495.623 li
169.174 495.623 li
179.012 495.623 li
188.85 495.623 li
198.688 495.623 li
208.526 495.623 li
218.364 495.623 li
228.202 495.623 li
238.04 495.623 li
247.878 495.623 li
257.716 495.623 li
267.554 495.623 li
277.392 495.623 li
287.23 495.623 li
297.068 495.623 li
306.906 495.623 li
316.744 495.623 li
326.582 495.623 li
336.421 495.623 li
346.259 495.623 li
356.097 495.623 li
365.935 495.623 li
375.773 495.623 li
385.611 493.138 li
395.449 489.507 li
405.287 483.39 li
415.125 477.082 li
424.963 474.98 li
434.801 474.98 li
444.639 470.01 li
454.477 460.835 li
464.315 455.674 li
474.153 440.956 li
483.991 428.722 li
493.829 416.68 li
503.667 408.27 li
513.505 403.491 li
523.343 392.978 li
533.181 372.526 li
543.019 358.381 li
552.857 333.532 li
562.695 311.55 li
572.533 290.716 li
582.371 275.806 li
592.209 273.704 li
602.047 261.661 li
611.885 252.678 li
621.723 239.871 li
631.561 229.74 li
641.399 209.861 li
651.237 191.32 li
661.075 177.749 li
670.913 171.25 li
680.751 162.075 li
690.589 156.532 li
700.427 156.532 li
710.265 146.401 li
720.103 147.548 li
729.941 140.475 li
739.779 135.123 li
749.617 134.359 li
759.455 136.079 li
769.293 128.433 li
779.131 130.345 li
788.969 120.405 li
798.807 115.435 li
808.645 103.011 li
818.483 101.673 li
828.321 99.9526 li
838.159 98.2324 li
847.997 96.8943 li
857.835 95.5563 li
867.673 94.2183 li
877.511 93.2626 li
887.349 91.3511 li
897.187 89.4397 li
907.025 87.9105 li
916.863 85.4257 li
926.701 83.3231 li
936.539 82.1761 li
946.378 81.6027 li
956.216 81.0293 li
966.054 81.2205 li
975.892 80.0735 li
985.73 80.647 li
995.568 80.0735 li
1005.41 78.7355 li
1015.24 78.7355 li
1025.08 77.5887 li
1034.92 76.2507 li
1044.76 75.1038 li
1054.6 73.9569 li
1064.43 72.8101 li
1074.27 72.2366 li
1084.11 71.8543 li
1093.95 71.0897 li
1103.79 70.7075 li
1113.62 69.9429 li
1123.46 69.7517 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
149.498 506.614 mo
159.336 519.516 li
169.174 519.516 li
179.012 519.516 li
188.85 519.516 li
198.688 519.516 li
208.526 519.516 li
218.364 519.516 li
228.202 519.516 li
238.04 519.516 li
247.878 519.516 li
257.716 519.516 li
267.554 519.516 li
277.392 519.516 li
287.23 519.516 li
297.068 519.516 li
306.906 519.516 li
316.744 519.516 li
326.582 519.516 li
336.421 519.516 li
346.259 519.516 li
356.097 519.516 li
365.935 519.516 li
375.773 519.516 li
385.611 516.362 li
395.449 513.209 li
405.287 508.334 li
415.125 503.747 li
424.963 500.88 li
434.801 502.313 li
444.639 493.712 li
454.477 480.523 li
464.315 474.215 li
474.153 459.019 li
483.991 446.117 li
493.829 432.641 li
503.667 421.172 li
513.505 415.151 li
523.343 404.829 li
533.181 382.465 li
543.019 362.682 li
552.857 342.612 li
562.695 318.814 li
572.533 296.45 li
582.371 284.695 li
592.209 284.121 li
602.047 271.792 li
611.885 258.03 li
621.723 244.554 li
631.561 234.806 li
641.399 215.596 li
651.237 195.812 li
661.075 186.924 li
670.913 177.749 li
680.751 170.294 li
690.589 158.825 li
700.427 157.965 li
710.265 153.951 li
720.103 154.811 li
729.941 150.797 li
739.779 144.203 li
749.617 143.916 li
759.455 144.49 li
769.293 138.182 li
779.131 134.454 li
788.969 127.86 li
798.807 119.832 li
808.645 110.657 li
818.483 108.363 li
828.321 105.496 li
838.159 103.489 li
847.997 102.915 li
857.835 103.202 li
867.673 100.622 li
877.511 100.335 li
887.349 98.9014 li
897.187 94.3139 li
907.025 92.8803 li
916.863 90.0131 li
926.701 90.0131 li
936.539 89.4397 li
946.378 87.7194 li
956.216 85.9991 li
966.054 84.5655 li
975.892 82.8452 li
985.73 82.2717 li
995.568 80.2647 li
1005.41 78.8311 li
1015.24 79.6913 li
1025.08 79.6913 li
1034.92 79.1179 li
1044.76 79.6913 li
1054.6 79.6913 li
1064.43 78.8311 li
1074.27 78.2577 li
1084.11 77.6843 li
1093.95 77.3975 li
1103.79 77.6843 li
1113.62 76.5374 li
1123.46 75.9639 li
@
gsave
145.998 510.114 mo
152.998 510.114 li
152.998 503.114 li
145.998 503.114 li
145.998 510.114 li
clp
146.498 509.614 mo
152.498 503.614 li
146.498 503.614 mo
152.498 509.614 li
f
1 lw
0 lc
146.498 509.614 mo
152.498 503.614 li
146.498 503.614 mo
152.498 509.614 li
@
grestore
gsave
155.836 523.016 mo
162.836 523.016 li
162.836 516.016 li
155.836 516.016 li
155.836 523.016 li
clp
156.336 522.516 mo
162.336 516.516 li
156.336 516.516 mo
162.336 522.516 li
f
1 lw
0 lc
156.336 522.516 mo
162.336 516.516 li
156.336 516.516 mo
162.336 522.516 li
@
grestore
gsave
165.674 523.016 mo
172.674 523.016 li
172.674 516.016 li
165.674 516.016 li
165.674 523.016 li
clp
166.174 522.516 mo
172.174 516.516 li
166.174 516.516 mo
172.174 522.516 li
f
1 lw
0 lc
166.174 522.516 mo
172.174 516.516 li
166.174 516.516 mo
172.174 522.516 li
@
grestore
gsave
175.512 523.016 mo
182.512 523.016 li
182.512 516.016 li
175.512 516.016 li
175.512 523.016 li
clp
176.012 522.516 mo
182.012 516.516 li
176.012 516.516 mo
182.012 522.516 li
f
1 lw
0 lc
176.012 522.516 mo
182.012 516.516 li
176.012 516.516 mo
182.012 522.516 li
@
grestore
gsave
185.35 523.016 mo
192.35 523.016 li
192.35 516.016 li
185.35 516.016 li
185.35 523.016 li
clp
185.85 522.516 mo
191.85 516.516 li
185.85 516.516 mo
191.85 522.516 li
f
1 lw
0 lc
185.85 522.516 mo
191.85 516.516 li
185.85 516.516 mo
191.85 522.516 li
@
grestore
gsave
195.188 523.016 mo
202.188 523.016 li
202.188 516.016 li
195.188 516.016 li
195.188 523.016 li
clp
195.688 522.516 mo
201.688 516.516 li
195.688 516.516 mo
201.688 522.516 li
f
1 lw
0 lc
195.688 522.516 mo
201.688 516.516 li
195.688 516.516 mo
201.688 522.516 li
@
grestore
gsave
205.026 523.016 mo
212.026 523.016 li
212.026 516.016 li
205.026 516.016 li
205.026 523.016 li
clp
205.526 522.516 mo
211.526 516.516 li
205.526 516.516 mo
211.526 522.516 li
f
1 lw
0 lc
205.526 522.516 mo
211.526 516.516 li
205.526 516.516 mo
211.526 522.516 li
@
grestore
gsave
214.864 523.016 mo
221.864 523.016 li
221.864 516.016 li
214.864 516.016 li
214.864 523.016 li
clp
215.364 522.516 mo
221.364 516.516 li
215.364 516.516 mo
221.364 522.516 li
f
1 lw
0 lc
215.364 522.516 mo
221.364 516.516 li
215.364 516.516 mo
221.364 522.516 li
@
grestore
gsave
224.702 523.016 mo
231.702 523.016 li
231.702 516.016 li
224.702 516.016 li
224.702 523.016 li
clp
225.202 522.516 mo
231.202 516.516 li
225.202 516.516 mo
231.202 522.516 li
f
1 lw
0 lc
225.202 522.516 mo
231.202 516.516 li
225.202 516.516 mo
231.202 522.516 li
@
grestore
gsave
234.54 523.016 mo
241.54 523.016 li
241.54 516.016 li
234.54 516.016 li
234.54 523.016 li
clp
235.04 522.516 mo
241.04 516.516 li
235.04 516.516 mo
241.04 522.516 li
f
1 lw
0 lc
235.04 522.516 mo
241.04 516.516 li
235.04 516.516 mo
241.04 522.516 li
@
grestore
gsave
244.378 523.016 mo
251.378 523.016 li
251.378 516.016 li
244.378 516.016 li
244.378 523.016 li
clp
244.878 522.516 mo
250.878 516.516 li
244.878 516.516 mo
250.878 522.516 li
f
1 lw
0 lc
244.878 522.516 mo
250.878 516.516 li
244.878 516.516 mo
250.878 522.516 li
@
grestore
gsave
254.216 523.016 mo
261.216 523.016 li
261.216 516.016 li
254.216 516.016 li
254.216 523.016 li
clp
254.716 522.516 mo
260.716 516.516 li
254.716 516.516 mo
260.716 522.516 li
f
1 lw
0 lc
254.716 522.516 mo
260.716 516.516 li
254.716 516.516 mo
260.716 522.516 li
@
grestore
gsave
264.055 523.016 mo
271.054 523.016 li
271.054 516.016 li
264.055 516.016 li
264.055 523.016 li
clp
264.554 522.516 mo
270.554 516.516 li
264.554 516.516 mo
270.554 522.516 li
f
1 lw
0 lc
264.554 522.516 mo
270.554 516.516 li
264.554 516.516 mo
270.554 522.516 li
@
grestore
gsave
273.892 523.016 mo
280.893 523.016 li
280.893 516.016 li
273.892 516.016 li
273.892 523.016 li
clp
274.392 522.516 mo
280.392 516.516 li
274.392 516.516 mo
280.392 522.516 li
f
1 lw
0 lc
274.392 522.516 mo
280.392 516.516 li
274.392 516.516 mo
280.392 522.516 li
@
grestore
gsave
283.73 523.016 mo
290.73 523.016 li
290.73 516.016 li
283.73 516.016 li
283.73 523.016 li
clp
284.23 522.516 mo
290.23 516.516 li
284.23 516.516 mo
290.23 522.516 li
f
1 lw
0 lc
284.23 522.516 mo
290.23 516.516 li
284.23 516.516 mo
290.23 522.516 li
@
grestore
gsave
293.568 523.016 mo
300.568 523.016 li
300.568 516.016 li
293.568 516.016 li
293.568 523.016 li
clp
294.068 522.516 mo
300.068 516.516 li
294.068 516.516 mo
300.068 522.516 li
f
1 lw
0 lc
294.068 522.516 mo
300.068 516.516 li
294.068 516.516 mo
300.068 522.516 li
@
grestore
gsave
303.406 523.016 mo
310.406 523.016 li
310.406 516.016 li
303.406 516.016 li
303.406 523.016 li
clp
303.906 522.516 mo
309.906 516.516 li
303.906 516.516 mo
309.906 522.516 li
f
1 lw
0 lc
303.906 522.516 mo
309.906 516.516 li
303.906 516.516 mo
309.906 522.516 li
@
grestore
gsave
313.244 523.016 mo
320.244 523.016 li
320.244 516.016 li
313.244 516.016 li
313.244 523.016 li
clp
313.744 522.516 mo
319.744 516.516 li
313.744 516.516 mo
319.744 522.516 li
f
1 lw
0 lc
313.744 522.516 mo
319.744 516.516 li
313.744 516.516 mo
319.744 522.516 li
@
grestore
gsave
323.083 523.016 mo
330.082 523.016 li
330.082 516.016 li
323.083 516.016 li
323.083 523.016 li
clp
323.582 522.516 mo
329.582 516.516 li
323.582 516.516 mo
329.582 522.516 li
f
1 lw
0 lc
323.582 522.516 mo
329.582 516.516 li
323.582 516.516 mo
329.582 522.516 li
@
grestore
gsave
332.921 523.016 mo
339.921 523.016 li
339.921 516.016 li
332.921 516.016 li
332.921 523.016 li
clp
333.42 522.516 mo
339.42 516.516 li
333.42 516.516 mo
339.42 522.516 li
f
1 lw
0 lc
333.42 522.516 mo
339.42 516.516 li
333.42 516.516 mo
339.42 522.516 li
@
grestore
gsave
342.758 523.016 mo
349.759 523.016 li
349.759 516.016 li
342.758 516.016 li
342.758 523.016 li
clp
343.258 522.516 mo
349.258 516.516 li
343.258 516.516 mo
349.258 522.516 li
f
1 lw
0 lc
343.258 522.516 mo
349.258 516.516 li
343.258 516.516 mo
349.258 522.516 li
@
grestore
gsave
352.596 523.016 mo
359.596 523.016 li
359.596 516.016 li
352.596 516.016 li
352.596 523.016 li
clp
353.096 522.516 mo
359.096 516.516 li
353.096 516.516 mo
359.096 522.516 li
f
1 lw
0 lc
353.096 522.516 mo
359.096 516.516 li
353.096 516.516 mo
359.096 522.516 li
@
grestore
gsave
362.434 523.016 mo
369.434 523.016 li
369.434 516.016 li
362.434 516.016 li
362.434 523.016 li
clp
362.934 522.516 mo
368.934 516.516 li
362.934 516.516 mo
368.934 522.516 li
f
1 lw
0 lc
362.934 522.516 mo
368.934 516.516 li
362.934 516.516 mo
368.934 522.516 li
@
grestore
gsave
372.272 523.016 mo
379.272 523.016 li
379.272 516.016 li
372.272 516.016 li
372.272 523.016 li
clp
372.772 522.516 mo
378.772 516.516 li
372.772 516.516 mo
378.772 522.516 li
f
1 lw
0 lc
372.772 522.516 mo
378.772 516.516 li
372.772 516.516 mo
378.772 522.516 li
@
grestore
gsave
382.111 519.862 mo
389.111 519.862 li
389.111 512.862 li
382.111 512.862 li
382.111 519.862 li
clp
382.611 519.362 mo
388.611 513.362 li
382.611 513.362 mo
388.611 519.362 li
f
1 lw
0 lc
382.611 519.362 mo
388.611 513.362 li
382.611 513.362 mo
388.611 519.362 li
@
grestore
gsave
391.949 516.709 mo
398.949 516.709 li
398.949 509.709 li
391.949 509.709 li
391.949 516.709 li
clp
392.449 516.209 mo
398.449 510.209 li
392.449 510.209 mo
398.449 516.209 li
f
1 lw
0 lc
392.449 516.209 mo
398.449 510.209 li
392.449 510.209 mo
398.449 516.209 li
@
grestore
gsave
401.787 511.835 mo
408.787 511.835 li
408.787 504.834 li
401.787 504.834 li
401.787 511.835 li
clp
402.287 511.334 mo
408.287 505.334 li
402.287 505.334 mo
408.287 511.334 li
f
1 lw
0 lc
402.287 511.334 mo
408.287 505.334 li
402.287 505.334 mo
408.287 511.334 li
@
grestore
gsave
411.624 507.247 mo
418.625 507.247 li
418.625 500.247 li
411.624 500.247 li
411.624 507.247 li
clp
412.125 506.747 mo
418.125 500.747 li
412.125 500.747 mo
418.125 506.747 li
f
1 lw
0 lc
412.125 506.747 mo
418.125 500.747 li
412.125 500.747 mo
418.125 506.747 li
@
grestore
gsave
421.462 504.38 mo
428.462 504.38 li
428.462 497.38 li
421.462 497.38 li
421.462 504.38 li
clp
421.963 503.88 mo
427.963 497.88 li
421.963 497.88 mo
427.963 503.88 li
f
1 lw
0 lc
421.963 503.88 mo
427.963 497.88 li
421.963 497.88 mo
427.963 503.88 li
@
grestore
gsave
431.301 505.813 mo
438.3 505.813 li
438.3 498.813 li
431.301 498.813 li
431.301 505.813 li
clp
431.801 505.313 mo
437.801 499.313 li
431.801 499.313 mo
437.801 505.313 li
f
1 lw
0 lc
431.801 505.313 mo
437.801 499.313 li
431.801 499.313 mo
437.801 505.313 li
@
grestore
gsave
441.139 497.212 mo
448.138 497.212 li
448.138 490.212 li
441.139 490.212 li
441.139 497.212 li
clp
441.639 496.712 mo
447.639 490.712 li
441.639 490.712 mo
447.639 496.712 li
f
1 lw
0 lc
441.639 496.712 mo
447.639 490.712 li
441.639 490.712 mo
447.639 496.712 li
@
grestore
gsave
450.977 484.023 mo
457.977 484.023 li
457.977 477.023 li
450.977 477.023 li
450.977 484.023 li
clp
451.477 483.523 mo
457.477 477.523 li
451.477 477.523 mo
457.477 483.523 li
f
1 lw
0 lc
451.477 483.523 mo
457.477 477.523 li
451.477 477.523 mo
457.477 483.523 li
@
grestore
gsave
460.815 477.715 mo
467.815 477.715 li
467.815 470.715 li
460.815 470.715 li
460.815 477.715 li
clp
461.315 477.215 mo
467.315 471.215 li
461.315 471.215 mo
467.315 477.215 li
f
1 lw
0 lc
461.315 477.215 mo
467.315 471.215 li
461.315 471.215 mo
467.315 477.215 li
@
grestore
gsave
470.653 462.519 mo
477.653 462.519 li
477.653 455.519 li
470.653 455.519 li
470.653 462.519 li
clp
471.153 462.019 mo
477.153 456.019 li
471.153 456.019 mo
477.153 462.019 li
f
1 lw
0 lc
471.153 462.019 mo
477.153 456.019 li
471.153 456.019 mo
477.153 462.019 li
@
grestore
gsave
480.491 449.616 mo
487.491 449.616 li
487.491 442.617 li
480.491 442.617 li
480.491 449.616 li
clp
480.991 449.117 mo
486.991 443.117 li
480.991 443.117 mo
486.991 449.117 li
f
1 lw
0 lc
480.991 449.117 mo
486.991 443.117 li
480.991 443.117 mo
486.991 449.117 li
@
grestore
gsave
490.329 436.141 mo
497.329 436.141 li
497.329 429.141 li
490.329 429.141 li
490.329 436.141 li
clp
490.829 435.641 mo
496.829 429.641 li
490.829 429.641 mo
496.829 435.641 li
f
1 lw
0 lc
490.829 435.641 mo
496.829 429.641 li
490.829 429.641 mo
496.829 435.641 li
@
grestore
gsave
500.167 424.672 mo
507.167 424.672 li
507.167 417.672 li
500.167 417.672 li
500.167 424.672 li
clp
500.667 424.172 mo
506.667 418.172 li
500.667 418.172 mo
506.667 424.172 li
f
1 lw
0 lc
500.667 424.172 mo
506.667 418.172 li
500.667 418.172 mo
506.667 424.172 li
@
grestore
gsave
510.005 418.651 mo
517.005 418.651 li
517.005 411.651 li
510.005 411.651 li
510.005 418.651 li
clp
510.505 418.151 mo
516.505 412.151 li
510.505 412.151 mo
516.505 418.151 li
f
1 lw
0 lc
510.505 418.151 mo
516.505 412.151 li
510.505 412.151 mo
516.505 418.151 li
@
grestore
gsave
519.843 408.329 mo
526.843 408.329 li
526.843 401.329 li
519.843 401.329 li
519.843 408.329 li
clp
520.343 407.829 mo
526.343 401.829 li
520.343 401.829 mo
526.343 407.829 li
f
1 lw
0 lc
520.343 407.829 mo
526.343 401.829 li
520.343 401.829 mo
526.343 407.829 li
@
grestore
gsave
529.681 385.965 mo
536.681 385.965 li
536.681 378.965 li
529.681 378.965 li
529.681 385.965 li
clp
530.181 385.465 mo
536.181 379.465 li
530.181 379.465 mo
536.181 385.465 li
f
1 lw
0 lc
530.181 385.465 mo
536.181 379.465 li
530.181 379.465 mo
536.181 385.465 li
@
grestore
gsave
539.519 366.182 mo
546.519 366.182 li
546.519 359.182 li
539.519 359.182 li
539.519 366.182 li
clp
540.019 365.682 mo
546.019 359.682 li
540.019 359.682 mo
546.019 365.682 li
f
1 lw
0 lc
540.019 365.682 mo
546.019 359.682 li
540.019 359.682 mo
546.019 365.682 li
@
grestore
gsave
549.357 346.112 mo
556.357 346.112 li
556.357 339.112 li
549.357 339.112 li
549.357 346.112 li
clp
549.857 345.612 mo
555.857 339.612 li
549.857 339.612 mo
555.857 345.612 li
f
1 lw
0 lc
549.857 345.612 mo
555.857 339.612 li
549.857 339.612 mo
555.857 345.612 li
@
grestore
gsave
559.195 322.314 mo
566.195 322.314 li
566.195 315.314 li
559.195 315.314 li
559.195 322.314 li
clp
559.695 321.814 mo
565.695 315.814 li
559.695 315.814 mo
565.695 321.814 li
f
1 lw
0 lc
559.695 321.814 mo
565.695 315.814 li
559.695 315.814 mo
565.695 321.814 li
@
grestore
gsave
569.033 299.95 mo
576.033 299.95 li
576.033 292.95 li
569.033 292.95 li
569.033 299.95 li
clp
569.533 299.45 mo
575.533 293.45 li
569.533 293.45 mo
575.533 299.45 li
f
1 lw
0 lc
569.533 299.45 mo
575.533 293.45 li
569.533 293.45 mo
575.533 299.45 li
@
grestore
gsave
578.871 288.194 mo
585.871 288.194 li
585.871 281.195 li
578.871 281.195 li
578.871 288.194 li
clp
579.371 287.695 mo
585.371 281.695 li
579.371 281.695 mo
585.371 287.695 li
f
1 lw
0 lc
579.371 287.695 mo
585.371 281.695 li
579.371 281.695 mo
585.371 287.695 li
@
grestore
gsave
588.709 287.621 mo
595.709 287.621 li
595.709 280.621 li
588.709 280.621 li
588.709 287.621 li
clp
589.209 287.121 mo
595.209 281.121 li
589.209 281.121 mo
595.209 287.121 li
f
1 lw
0 lc
589.209 287.121 mo
595.209 281.121 li
589.209 281.121 mo
595.209 287.121 li
@
grestore
gsave
598.547 275.292 mo
605.547 275.292 li
605.547 268.292 li
598.547 268.292 li
598.547 275.292 li
clp
599.047 274.792 mo
605.047 268.792 li
599.047 268.792 mo
605.047 274.792 li
f
1 lw
0 lc
599.047 274.792 mo
605.047 268.792 li
599.047 268.792 mo
605.047 274.792 li
@
grestore
gsave
608.385 261.53 mo
615.385 261.53 li
615.385 254.53 li
608.385 254.53 li
608.385 261.53 li
clp
608.885 261.03 mo
614.885 255.03 li
608.885 255.03 mo
614.885 261.03 li
f
1 lw
0 lc
608.885 261.03 mo
614.885 255.03 li
608.885 255.03 mo
614.885 261.03 li
@
grestore
gsave
618.223 248.054 mo
625.223 248.054 li
625.223 241.054 li
618.223 241.054 li
618.223 248.054 li
clp
618.723 247.554 mo
624.723 241.554 li
618.723 241.554 mo
624.723 247.554 li
f
1 lw
0 lc
618.723 247.554 mo
624.723 241.554 li
618.723 241.554 mo
624.723 247.554 li
@
grestore
gsave
628.061 238.305 mo
635.061 238.305 li
635.061 231.306 li
628.061 231.306 li
628.061 238.305 li
clp
628.561 237.806 mo
634.561 231.806 li
628.561 231.806 mo
634.561 237.806 li
f
1 lw
0 lc
628.561 237.806 mo
634.561 231.806 li
628.561 231.806 mo
634.561 237.806 li
@
grestore
gsave
637.899 219.096 mo
644.899 219.096 li
644.899 212.096 li
637.899 212.096 li
637.899 219.096 li
clp
638.399 218.596 mo
644.399 212.596 li
638.399 212.596 mo
644.399 218.596 li
f
1 lw
0 lc
638.399 218.596 mo
644.399 212.596 li
638.399 212.596 mo
644.399 218.596 li
@
grestore
gsave
647.737 199.312 mo
654.737 199.312 li
654.737 192.312 li
647.737 192.312 li
647.737 199.312 li
clp
648.237 198.812 mo
654.237 192.812 li
648.237 192.812 mo
654.237 198.812 li
f
1 lw
0 lc
648.237 198.812 mo
654.237 192.812 li
648.237 192.812 mo
654.237 198.812 li
@
grestore
gsave
657.575 190.424 mo
664.575 190.424 li
664.575 183.424 li
657.575 183.424 li
657.575 190.424 li
clp
658.075 189.924 mo
664.075 183.924 li
658.075 183.924 mo
664.075 189.924 li
f
1 lw
0 lc
658.075 189.924 mo
664.075 183.924 li
658.075 183.924 mo
664.075 189.924 li
@
grestore
gsave
667.413 181.249 mo
674.413 181.249 li
674.413 174.249 li
667.413 174.249 li
667.413 181.249 li
clp
667.913 180.749 mo
673.913 174.749 li
667.913 174.749 mo
673.913 180.749 li
f
1 lw
0 lc
667.913 180.749 mo
673.913 174.749 li
667.913 174.749 mo
673.913 180.749 li
@
grestore
gsave
677.251 173.794 mo
684.251 173.794 li
684.251 166.794 li
677.251 166.794 li
677.251 173.794 li
clp
677.751 173.294 mo
683.751 167.294 li
677.751 167.294 mo
683.751 173.294 li
f
1 lw
0 lc
677.751 173.294 mo
683.751 167.294 li
677.751 167.294 mo
683.751 173.294 li
@
grestore
gsave
687.089 162.326 mo
694.089 162.326 li
694.089 155.325 li
687.089 155.325 li
687.089 162.326 li
clp
687.589 161.825 mo
693.589 155.825 li
687.589 155.825 mo
693.589 161.825 li
f
1 lw
0 lc
687.589 161.825 mo
693.589 155.825 li
687.589 155.825 mo
693.589 161.825 li
@
grestore
gsave
696.927 161.465 mo
703.927 161.465 li
703.927 154.465 li
696.927 154.465 li
696.927 161.465 li
clp
697.427 160.965 mo
703.427 154.965 li
697.427 154.965 mo
703.427 160.965 li
f
1 lw
0 lc
697.427 160.965 mo
703.427 154.965 li
697.427 154.965 mo
703.427 160.965 li
@
grestore
gsave
706.765 157.451 mo
713.765 157.451 li
713.765 150.451 li
706.765 150.451 li
706.765 157.451 li
clp
707.265 156.951 mo
713.265 150.951 li
707.265 150.951 mo
713.265 156.951 li
f
1 lw
0 lc
707.265 156.951 mo
713.265 150.951 li
707.265 150.951 mo
713.265 156.951 li
@
grestore
gsave
716.603 158.312 mo
723.603 158.312 li
723.603 151.311 li
716.603 151.311 li
716.603 158.312 li
clp
717.103 157.811 mo
723.103 151.811 li
717.103 151.811 mo
723.103 157.811 li
f
1 lw
0 lc
717.103 157.811 mo
723.103 151.811 li
717.103 151.811 mo
723.103 157.811 li
@
grestore
gsave
726.441 154.297 mo
733.441 154.297 li
733.441 147.298 li
726.441 147.298 li
726.441 154.297 li
clp
726.941 153.797 mo
732.941 147.797 li
726.941 147.797 mo
732.941 153.797 li
f
1 lw
0 lc
726.941 153.797 mo
732.941 147.797 li
726.941 147.797 mo
732.941 153.797 li
@
grestore
gsave
736.279 147.703 mo
743.279 147.703 li
743.279 140.703 li
736.279 140.703 li
736.279 147.703 li
clp
736.779 147.203 mo
742.779 141.203 li
736.779 141.203 mo
742.779 147.203 li
f
1 lw
0 lc
736.779 147.203 mo
742.779 141.203 li
736.779 141.203 mo
742.779 147.203 li
@
grestore
gsave
746.117 147.416 mo
753.117 147.416 li
753.117 140.416 li
746.117 140.416 li
746.117 147.416 li
clp
746.617 146.916 mo
752.617 140.916 li
746.617 140.916 mo
752.617 146.916 li
f
1 lw
0 lc
746.617 146.916 mo
752.617 140.916 li
746.617 140.916 mo
752.617 146.916 li
@
grestore
gsave
755.955 147.99 mo
762.955 147.99 li
762.955 140.99 li
755.955 140.99 li
755.955 147.99 li
clp
756.455 147.49 mo
762.455 141.49 li
756.455 141.49 mo
762.455 147.49 li
f
1 lw
0 lc
756.455 147.49 mo
762.455 141.49 li
756.455 141.49 mo
762.455 147.49 li
@
grestore
gsave
765.793 141.682 mo
772.793 141.682 li
772.793 134.682 li
765.793 134.682 li
765.793 141.682 li
clp
766.293 141.182 mo
772.293 135.182 li
766.293 135.182 mo
772.293 141.182 li
f
1 lw
0 lc
766.293 141.182 mo
772.293 135.182 li
766.293 135.182 mo
772.293 141.182 li
@
grestore
gsave
775.631 137.954 mo
782.631 137.954 li
782.631 130.954 li
775.631 130.954 li
775.631 137.954 li
clp
776.131 137.454 mo
782.131 131.454 li
776.131 131.454 mo
782.131 137.454 li
f
1 lw
0 lc
776.131 137.454 mo
782.131 131.454 li
776.131 131.454 mo
782.131 137.454 li
@
grestore
gsave
785.469 131.36 mo
792.469 131.36 li
792.469 124.36 li
785.469 124.36 li
785.469 131.36 li
clp
785.969 130.86 mo
791.969 124.86 li
785.969 124.86 mo
791.969 130.86 li
f
1 lw
0 lc
785.969 130.86 mo
791.969 124.86 li
785.969 124.86 mo
791.969 130.86 li
@
grestore
gsave
795.307 123.332 mo
802.307 123.332 li
802.307 116.332 li
795.307 116.332 li
795.307 123.332 li
clp
795.807 122.832 mo
801.807 116.832 li
795.807 116.832 mo
801.807 122.832 li
f
1 lw
0 lc
795.807 122.832 mo
801.807 116.832 li
795.807 116.832 mo
801.807 122.832 li
@
grestore
gsave
805.145 114.157 mo
812.145 114.157 li
812.145 107.157 li
805.145 107.157 li
805.145 114.157 li
clp
805.645 113.657 mo
811.645 107.657 li
805.645 107.657 mo
811.645 113.657 li
f
1 lw
0 lc
805.645 113.657 mo
811.645 107.657 li
805.645 107.657 mo
811.645 113.657 li
@
grestore
gsave
814.983 111.863 mo
821.983 111.863 li
821.983 104.863 li
814.983 104.863 li
814.983 111.863 li
clp
815.483 111.363 mo
821.483 105.363 li
815.483 105.363 mo
821.483 111.363 li
f
1 lw
0 lc
815.483 111.363 mo
821.483 105.363 li
815.483 105.363 mo
821.483 111.363 li
@
grestore
gsave
824.821 108.996 mo
831.821 108.996 li
831.821 101.996 li
824.821 101.996 li
824.821 108.996 li
clp
825.321 108.496 mo
831.321 102.496 li
825.321 102.496 mo
831.321 108.496 li
f
1 lw
0 lc
825.321 108.496 mo
831.321 102.496 li
825.321 102.496 mo
831.321 108.496 li
@
grestore
gsave
834.659 106.989 mo
841.659 106.989 li
841.659 99.9888 li
834.659 99.9888 li
834.659 106.989 li
clp
835.159 106.489 mo
841.159 100.489 li
835.159 100.489 mo
841.159 106.489 li
f
1 lw
0 lc
835.159 106.489 mo
841.159 100.489 li
835.159 100.489 mo
841.159 106.489 li
@
grestore
gsave
844.497 106.415 mo
851.497 106.415 li
851.497 99.4154 li
844.497 99.4154 li
844.497 106.415 li
clp
844.997 105.915 mo
850.997 99.9155 li
844.997 99.9155 mo
850.997 105.915 li
f
1 lw
0 lc
844.997 105.915 mo
850.997 99.9155 li
844.997 99.9155 mo
850.997 105.915 li
@
grestore
gsave
854.335 106.702 mo
861.335 106.702 li
861.335 99.7022 li
854.335 99.7022 li
854.335 106.702 li
clp
854.835 106.202 mo
860.835 100.202 li
854.835 100.202 mo
860.835 106.202 li
f
1 lw
0 lc
854.835 106.202 mo
860.835 100.202 li
854.835 100.202 mo
860.835 106.202 li
@
grestore
gsave
864.173 104.122 mo
871.173 104.122 li
871.173 97.1216 li
864.173 97.1216 li
864.173 104.122 li
clp
864.673 103.622 mo
870.673 97.6218 li
864.673 97.6218 mo
870.673 103.622 li
f
1 lw
0 lc
864.673 103.622 mo
870.673 97.6218 li
864.673 97.6218 mo
870.673 103.622 li
@
grestore
gsave
874.011 103.835 mo
881.011 103.835 li
881.011 96.8351 li
874.011 96.8351 li
874.011 103.835 li
clp
874.511 103.335 mo
880.511 97.335 li
874.511 97.335 mo
880.511 103.335 li
f
1 lw
0 lc
874.511 103.335 mo
880.511 97.335 li
874.511 97.335 mo
880.511 103.335 li
@
grestore
gsave
883.849 102.402 mo
890.849 102.402 li
890.849 95.4013 li
883.849 95.4013 li
883.849 102.402 li
clp
884.349 101.901 mo
890.349 95.9014 li
884.349 95.9014 mo
890.349 101.901 li
f
1 lw
0 lc
884.349 101.901 mo
890.349 95.9014 li
884.349 95.9014 mo
890.349 101.901 li
@
grestore
gsave
893.687 97.8141 mo
900.687 97.8141 li
900.687 90.8138 li
893.687 90.8138 li
893.687 97.8141 li
clp
894.187 97.314 mo
900.187 91.314 li
894.187 91.314 mo
900.187 97.314 li
f
1 lw
0 lc
894.187 97.314 mo
900.187 91.314 li
894.187 91.314 mo
900.187 97.314 li
@
grestore
gsave
903.525 96.3803 mo
910.525 96.3803 li
910.525 89.3804 li
903.525 89.3804 li
903.525 96.3803 li
clp
904.025 95.8804 mo
910.025 89.8804 li
904.025 89.8804 mo
910.025 95.8804 li
f
1 lw
0 lc
904.025 95.8804 mo
910.025 89.8804 li
904.025 89.8804 mo
910.025 95.8804 li
@
grestore
gsave
913.363 93.5131 mo
920.363 93.5131 li
920.363 86.5132 li
913.363 86.5132 li
913.363 93.5131 li
clp
913.863 93.0132 mo
919.863 87.0132 li
913.863 87.0132 mo
919.863 93.0132 li
f
1 lw
0 lc
913.863 93.0132 mo
919.863 87.0132 li
913.863 87.0132 mo
919.863 93.0132 li
@
grestore
gsave
923.201 93.5131 mo
930.201 93.5131 li
930.201 86.5132 li
923.201 86.5132 li
923.201 93.5131 li
clp
923.701 93.0132 mo
929.701 87.0132 li
923.701 87.0132 mo
929.701 93.0132 li
f
1 lw
0 lc
923.701 93.0132 mo
929.701 87.0132 li
923.701 87.0132 mo
929.701 93.0132 li
@
grestore
gsave
933.039 92.9397 mo
940.039 92.9397 li
940.039 85.9398 li
933.039 85.9398 li
933.039 92.9397 li
clp
933.539 92.4398 mo
939.539 86.4398 li
933.539 86.4398 mo
939.539 92.4398 li
f
1 lw
0 lc
933.539 92.4398 mo
939.539 86.4398 li
933.539 86.4398 mo
939.539 92.4398 li
@
grestore
gsave
942.877 91.2194 mo
949.877 91.2194 li
949.877 84.2195 li
942.877 84.2195 li
942.877 91.2194 li
clp
943.377 90.7194 mo
949.377 84.7194 li
943.377 84.7194 mo
949.377 90.7194 li
f
1 lw
0 lc
943.377 90.7194 mo
949.377 84.7194 li
943.377 84.7194 mo
949.377 90.7194 li
@
grestore
gsave
952.715 89.4991 mo
959.715 89.4991 li
959.715 82.4991 li
952.715 82.4991 li
952.715 89.4991 li
clp
953.215 88.9991 mo
959.215 82.9991 li
953.215 82.9991 mo
959.215 88.9991 li
f
1 lw
0 lc
953.215 88.9991 mo
959.215 82.9991 li
953.215 82.9991 mo
959.215 88.9991 li
@
grestore
gsave
962.553 88.0653 mo
969.553 88.0653 li
969.553 81.0654 li
962.553 81.0654 li
962.553 88.0653 li
clp
963.053 87.5655 mo
969.053 81.5655 li
963.053 81.5655 mo
969.053 87.5655 li
f
1 lw
0 lc
963.053 87.5655 mo
969.053 81.5655 li
963.053 81.5655 mo
969.053 87.5655 li
@
grestore
gsave
972.391 86.345 mo
979.391 86.345 li
979.391 79.3451 li
972.391 79.3451 li
972.391 86.345 li
clp
972.891 85.8452 mo
978.891 79.8452 li
972.891 79.8452 mo
978.891 85.8452 li
f
1 lw
0 lc
972.891 85.8452 mo
978.891 79.8452 li
972.891 79.8452 mo
978.891 85.8452 li
@
grestore
gsave
982.229 85.7716 mo
989.229 85.7716 li
989.229 78.7716 li
982.229 78.7716 li
982.229 85.7716 li
clp
982.729 85.2717 mo
988.729 79.2717 li
982.729 79.2717 mo
988.729 85.2717 li
f
1 lw
0 lc
982.729 85.2717 mo
988.729 79.2717 li
982.729 79.2717 mo
988.729 85.2717 li
@
grestore
gsave
992.067 83.7647 mo
999.068 83.7647 li
999.068 76.7648 li
992.067 76.7648 li
992.067 83.7647 li
clp
992.567 83.2647 mo
998.567 77.2647 li
992.567 77.2647 mo
998.567 83.2647 li
f
1 lw
0 lc
992.567 83.2647 mo
998.567 77.2647 li
992.567 77.2647 mo
998.567 83.2647 li
@
grestore
gsave
1001.91 82.3309 mo
1008.91 82.3309 li
1008.91 75.331 li
1001.91 75.331 li
1001.91 82.3309 li
clp
1002.41 81.8311 mo
1008.41 75.8311 li
1002.41 75.8311 mo
1008.41 81.8311 li
f
1 lw
0 lc
1002.41 81.8311 mo
1008.41 75.8311 li
1002.41 75.8311 mo
1008.41 81.8311 li
@
grestore
gsave
1011.74 83.1913 mo
1018.74 83.1913 li
1018.74 76.1913 li
1011.74 76.1913 li
1011.74 83.1913 li
clp
1012.24 82.6913 mo
1018.24 76.6913 li
1012.24 76.6913 mo
1018.24 82.6913 li
f
1 lw
0 lc
1012.24 82.6913 mo
1018.24 76.6913 li
1012.24 76.6913 mo
1018.24 82.6913 li
@
grestore
gsave
1021.58 83.1913 mo
1028.58 83.1913 li
1028.58 76.1913 li
1021.58 76.1913 li
1021.58 83.1913 li
clp
1022.08 82.6913 mo
1028.08 76.6913 li
1022.08 76.6913 mo
1028.08 82.6913 li
f
1 lw
0 lc
1022.08 82.6913 mo
1028.08 76.6913 li
1022.08 76.6913 mo
1028.08 82.6913 li
@
grestore
gsave
1031.42 82.6178 mo
1038.42 82.6178 li
1038.42 75.6179 li
1031.42 75.6179 li
1031.42 82.6178 li
clp
1031.92 82.1179 mo
1037.92 76.1179 li
1031.92 76.1179 mo
1037.92 82.1179 li
f
1 lw
0 lc
1031.92 82.1179 mo
1037.92 76.1179 li
1031.92 76.1179 mo
1037.92 82.1179 li
@
grestore
gsave
1041.26 83.1913 mo
1048.26 83.1913 li
1048.26 76.1913 li
1041.26 76.1913 li
1041.26 83.1913 li
clp
1041.76 82.6913 mo
1047.76 76.6913 li
1041.76 76.6913 mo
1047.76 82.6913 li
f
1 lw
0 lc
1041.76 82.6913 mo
1047.76 76.6913 li
1041.76 76.6913 mo
1047.76 82.6913 li
@
grestore
gsave
1051.1 83.1913 mo
1058.1 83.1913 li
1058.1 76.1913 li
1051.1 76.1913 li
1051.1 83.1913 li
clp
1051.6 82.6913 mo
1057.6 76.6913 li
1051.6 76.6913 mo
1057.6 82.6913 li
f
1 lw
0 lc
1051.6 82.6913 mo
1057.6 76.6913 li
1051.6 76.6913 mo
1057.6 82.6913 li
@
grestore
gsave
1060.93 82.3309 mo
1067.93 82.3309 li
1067.93 75.331 li
1060.93 75.331 li
1060.93 82.3309 li
clp
1061.43 81.8311 mo
1067.43 75.8311 li
1061.43 75.8311 mo
1067.43 81.8311 li
f
1 lw
0 lc
1061.43 81.8311 mo
1067.43 75.8311 li
1061.43 75.8311 mo
1067.43 81.8311 li
@
grestore
gsave
1070.77 81.7579 mo
1077.77 81.7579 li
1077.77 74.7576 li
1070.77 74.7576 li
1070.77 81.7579 li
clp
1071.27 81.2577 mo
1077.27 75.2577 li
1071.27 75.2577 mo
1077.27 81.2577 li
f
1 lw
0 lc
1071.27 81.2577 mo
1077.27 75.2577 li
1071.27 75.2577 mo
1077.27 81.2577 li
@
grestore
gsave
1080.61 81.1844 mo
1087.61 81.1844 li
1087.61 74.1841 li
1080.61 74.1841 li
1080.61 81.1844 li
clp
1081.11 80.6843 mo
1087.11 74.6843 li
1081.11 74.6843 mo
1087.11 80.6843 li
f
1 lw
0 lc
1081.11 80.6843 mo
1087.11 74.6843 li
1081.11 74.6843 mo
1087.11 80.6843 li
@
grestore
gsave
1090.45 80.8975 mo
1097.45 80.8975 li
1097.45 73.8976 li
1090.45 73.8976 li
1090.45 80.8975 li
clp
1090.95 80.3975 mo
1096.95 74.3975 li
1090.95 74.3975 mo
1096.95 80.3975 li
f
1 lw
0 lc
1090.95 80.3975 mo
1096.95 74.3975 li
1090.95 74.3975 mo
1096.95 80.3975 li
@
grestore
gsave
1100.29 81.1844 mo
1107.29 81.1844 li
1107.29 74.1841 li
1100.29 74.1841 li
1100.29 81.1844 li
clp
1100.79 80.6843 mo
1106.79 74.6843 li
1100.79 74.6843 mo
1106.79 80.6843 li
f
1 lw
0 lc
1100.79 80.6843 mo
1106.79 74.6843 li
1100.79 74.6843 mo
1106.79 80.6843 li
@
grestore
gsave
1110.12 80.0376 mo
1117.12 80.0376 li
1117.12 73.0373 li
1110.12 73.0373 li
1110.12 80.0376 li
clp
1110.62 79.5374 mo
1116.62 73.5374 li
1110.62 73.5374 mo
1116.62 79.5374 li
f
1 lw
0 lc
1110.62 79.5374 mo
1116.62 73.5374 li
1110.62 73.5374 mo
1116.62 79.5374 li
@
grestore
gsave
1119.96 79.4641 mo
1126.96 79.4641 li
1126.96 72.4638 li
1119.96 72.4638 li
1119.96 79.4641 li
clp
1120.46 78.964 mo
1126.46 72.964 li
1120.46 72.964 mo
1126.46 78.964 li
f
1 lw
0 lc
1120.46 78.964 mo
1126.46 72.964 li
1120.46 72.964 mo
1126.46 78.964 li
@
grestore
149.498 446.499 mo
159.336 403.682 li
169.174 364.498 li
179.012 366.218 li
188.85 361.63 li
198.688 364.88 li
208.526 338.311 li
218.364 311.55 li
228.202 296.832 li
238.04 276.762 li
247.878 257.265 li
257.716 241.209 li
267.554 228.211 li
277.392 222.286 li
287.23 216.934 li
297.068 212.919 li
306.906 210.243 li
316.744 204.127 li
326.582 202.789 li
336.421 197.054 li
346.259 189.026 li
356.097 185.203 li
365.935 182.336 li
375.773 173.735 li
385.611 165.707 li
395.449 155.958 li
405.287 146.592 li
415.125 136.844 li
424.963 129.007 li
434.801 116.965 li
444.639 112.377 li
454.477 107.025 li
464.315 101.482 li
474.153 98.0412 li
483.991 91.5423 li
493.829 84.2787 li
503.667 80.2647 li
513.505 76.8241 li
523.343 74.7215 li
533.181 69.7517 li
543.019 65.7377 li
552.857 62.8705 li
562.695 60.5768 li
572.533 58.0919 li
582.371 54.269 li
592.209 50.6372 li
602.047 49.6815 li
611.885 48.9169 li
621.723 46.432 li
631.561 45.094 li
641.399 45.2852 li
651.237 43.1826 li
661.075 42.9914 li
670.913 42.6091 li
680.751 41.8445 li
690.589 41.6534 li
700.427 41.08 li
710.265 40.1242 li
720.103 39.3596 li
729.941 40.1242 li
739.779 38.595 li
749.617 39.7419 li
759.455 38.9774 li
769.293 41.4622 li
779.131 42.0356 li
788.969 40.1242 li
798.807 40.1242 li
808.645 34.581 li
818.483 34.3898 li
828.321 34.3898 li
838.159 34.7722 li
847.997 34.9633 li
857.835 34.9633 li
867.673 34.581 li
877.511 34.581 li
887.349 34.581 li
897.187 34.1987 li
907.025 33.8164 li
916.863 33.8164 li
926.701 33.4341 li
936.539 33.243 li
946.378 33.0518 li
956.216 32.6696 li
966.054 32.4784 li
975.892 32.4784 li
985.73 32.4784 li
995.568 32.2873 li
1005.41 31.905 li
1015.24 31.905 li
1025.08 31.905 li
1034.92 31.905 li
1044.76 31.905 li
1054.6 31.905 li
1064.43 31.3315 li
1074.27 31.5227 li
1084.11 31.3315 li
1093.95 31.3315 li
1103.79 31.3315 li
1113.62 31.1404 li
1123.46 31.1404 li
1 /0 /CSD get_res sepcs
1 sep
@
149.498 465.613 mo
159.336 433.214 li
169.174 403.109 li
179.012 391.067 li
188.85 378.738 li
198.688 375.584 li
208.526 337.737 li
218.364 302.184 li
228.202 290.142 li
238.04 273.799 li
247.878 251.722 li
257.716 235.666 li
267.554 227.064 li
277.392 219.036 li
287.23 212.155 li
297.068 206.134 li
306.906 202.12 li
316.744 198.106 li
326.582 193.232 li
336.421 190.078 li
346.259 179.182 li
356.097 174.882 li
365.935 173.161 li
375.773 164.56 li
385.611 156.245 li
395.449 149.65 li
405.287 144.203 li
415.125 136.175 li
424.963 127.86 li
434.801 120.405 li
444.639 113.237 li
454.477 111.517 li
464.315 106.356 li
474.153 101.769 li
483.991 94.3139 li
493.829 87.1459 li
503.667 84.5655 li
513.505 80.5515 li
523.343 78.8311 li
533.181 75.3905 li
543.019 72.2366 li
552.857 71.0897 li
562.695 68.5093 li
572.533 63.9218 li
582.371 60.4812 li
592.209 58.1874 li
602.047 55.607 li
611.885 55.0336 li
621.723 55.607 li
631.561 55.3203 li
641.399 54.4601 li
651.237 52.1664 li
661.075 51.0195 li
670.913 49.2992 li
680.751 48.1523 li
690.589 50.1594 li
700.427 49.2992 li
710.265 48.439 li
720.103 48.7258 li
729.941 47.2922 li
739.779 49.5859 li
749.617 51.3062 li
759.455 49.5859 li
769.293 53.6 li
779.131 51.593 li
788.969 52.7398 li
798.807 48.7258 li
808.645 45.5718 li
818.483 46.432 li
828.321 46.432 li
838.159 45.8586 li
847.997 45.8586 li
857.835 45.5718 li
867.673 45.2852 li
877.511 45.2852 li
887.349 44.9984 li
897.187 44.425 li
907.025 44.425 li
916.863 44.7117 li
926.701 44.1382 li
936.539 43.8516 li
946.378 44.425 li
956.216 43.5648 li
966.054 42.9914 li
975.892 43.2781 li
985.73 42.9914 li
995.568 42.9914 li
1005.41 43.2781 li
1015.24 42.9914 li
1025.08 43.2781 li
1034.92 43.2781 li
1044.76 43.5648 li
1054.6 43.2781 li
1064.43 43.5648 li
1074.27 43.2781 li
1084.11 42.9914 li
1093.95 43.8516 li
1103.79 44.1382 li
1113.62 44.425 li
1123.46 44.1382 li
@
gsave
145.998 469.113 mo
152.998 469.113 li
152.998 462.113 li
145.998 462.113 li
145.998 469.113 li
clp
146.498 468.613 mo
152.498 462.613 li
146.498 462.613 mo
152.498 468.613 li
f
1 lw
0 lc
146.498 468.613 mo
152.498 462.613 li
146.498 462.613 mo
152.498 468.613 li
@
grestore
gsave
155.836 436.714 mo
162.836 436.714 li
162.836 429.714 li
155.836 429.714 li
155.836 436.714 li
clp
156.336 436.214 mo
162.336 430.214 li
156.336 430.214 mo
162.336 436.214 li
f
1 lw
0 lc
156.336 436.214 mo
162.336 430.214 li
156.336 430.214 mo
162.336 436.214 li
@
grestore
gsave
165.674 406.609 mo
172.674 406.609 li
172.674 399.609 li
165.674 399.609 li
165.674 406.609 li
clp
166.174 406.109 mo
172.174 400.109 li
166.174 400.109 mo
172.174 406.109 li
f
1 lw
0 lc
166.174 406.109 mo
172.174 400.109 li
166.174 400.109 mo
172.174 406.109 li
@
grestore
gsave
175.512 394.567 mo
182.512 394.567 li
182.512 387.567 li
175.512 387.567 li
175.512 394.567 li
clp
176.012 394.067 mo
182.012 388.067 li
176.012 388.067 mo
182.012 394.067 li
f
1 lw
0 lc
176.012 394.067 mo
182.012 388.067 li
176.012 388.067 mo
182.012 394.067 li
@
grestore
gsave
185.35 382.238 mo
192.35 382.238 li
192.35 375.238 li
185.35 375.238 li
185.35 382.238 li
clp
185.85 381.738 mo
191.85 375.738 li
185.85 375.738 mo
191.85 381.738 li
f
1 lw
0 lc
185.85 381.738 mo
191.85 375.738 li
185.85 375.738 mo
191.85 381.738 li
@
grestore
gsave
195.188 379.084 mo
202.188 379.084 li
202.188 372.084 li
195.188 372.084 li
195.188 379.084 li
clp
195.688 378.584 mo
201.688 372.584 li
195.688 372.584 mo
201.688 378.584 li
f
1 lw
0 lc
195.688 378.584 mo
201.688 372.584 li
195.688 372.584 mo
201.688 378.584 li
@
grestore
gsave
205.026 341.237 mo
212.026 341.237 li
212.026 334.237 li
205.026 334.237 li
205.026 341.237 li
clp
205.526 340.737 mo
211.526 334.737 li
205.526 334.737 mo
211.526 340.737 li
f
1 lw
0 lc
205.526 340.737 mo
211.526 334.737 li
205.526 334.737 mo
211.526 340.737 li
@
grestore
gsave
214.864 305.684 mo
221.864 305.684 li
221.864 298.684 li
214.864 298.684 li
214.864 305.684 li
clp
215.364 305.184 mo
221.364 299.184 li
215.364 299.184 mo
221.364 305.184 li
f
1 lw
0 lc
215.364 305.184 mo
221.364 299.184 li
215.364 299.184 mo
221.364 305.184 li
@
grestore
gsave
224.702 293.642 mo
231.702 293.642 li
231.702 286.642 li
224.702 286.642 li
224.702 293.642 li
clp
225.202 293.142 mo
231.202 287.142 li
225.202 287.142 mo
231.202 293.142 li
f
1 lw
0 lc
225.202 293.142 mo
231.202 287.142 li
225.202 287.142 mo
231.202 293.142 li
@
grestore
gsave
234.54 277.299 mo
241.54 277.299 li
241.54 270.299 li
234.54 270.299 li
234.54 277.299 li
clp
235.04 276.799 mo
241.04 270.799 li
235.04 270.799 mo
241.04 276.799 li
f
1 lw
0 lc
235.04 276.799 mo
241.04 270.799 li
235.04 270.799 mo
241.04 276.799 li
@
grestore
gsave
244.378 255.222 mo
251.378 255.222 li
251.378 248.222 li
244.378 248.222 li
244.378 255.222 li
clp
244.878 254.722 mo
250.878 248.722 li
244.878 248.722 mo
250.878 254.722 li
f
1 lw
0 lc
244.878 254.722 mo
250.878 248.722 li
244.878 248.722 mo
250.878 254.722 li
@
grestore
gsave
254.216 239.166 mo
261.216 239.166 li
261.216 232.166 li
254.216 232.166 li
254.216 239.166 li
clp
254.716 238.666 mo
260.716 232.666 li
254.716 232.666 mo
260.716 238.666 li
f
1 lw
0 lc
254.716 238.666 mo
260.716 232.666 li
254.716 232.666 mo
260.716 238.666 li
@
grestore
gsave
264.055 230.564 mo
271.054 230.564 li
271.054 223.564 li
264.055 223.564 li
264.055 230.564 li
clp
264.554 230.064 mo
270.554 224.064 li
264.554 224.064 mo
270.554 230.064 li
f
1 lw
0 lc
264.554 230.064 mo
270.554 224.064 li
264.554 224.064 mo
270.554 230.064 li
@
grestore
gsave
273.892 222.536 mo
280.893 222.536 li
280.893 215.536 li
273.892 215.536 li
273.892 222.536 li
clp
274.392 222.036 mo
280.392 216.036 li
274.392 216.036 mo
280.392 222.036 li
f
1 lw
0 lc
274.392 222.036 mo
280.392 216.036 li
274.392 216.036 mo
280.392 222.036 li
@
grestore
gsave
283.73 215.655 mo
290.73 215.655 li
290.73 208.655 li
283.73 208.655 li
283.73 215.655 li
clp
284.23 215.155 mo
290.23 209.155 li
284.23 209.155 mo
290.23 215.155 li
f
1 lw
0 lc
284.23 215.155 mo
290.23 209.155 li
284.23 209.155 mo
290.23 215.155 li
@
grestore
gsave
293.568 209.634 mo
300.568 209.634 li
300.568 202.634 li
293.568 202.634 li
293.568 209.634 li
clp
294.068 209.134 mo
300.068 203.134 li
294.068 203.134 mo
300.068 209.134 li
f
1 lw
0 lc
294.068 209.134 mo
300.068 203.134 li
294.068 203.134 mo
300.068 209.134 li
@
grestore
gsave
303.406 205.62 mo
310.406 205.62 li
310.406 198.62 li
303.406 198.62 li
303.406 205.62 li
clp
303.906 205.12 mo
309.906 199.12 li
303.906 199.12 mo
309.906 205.12 li
f
1 lw
0 lc
303.906 205.12 mo
309.906 199.12 li
303.906 199.12 mo
309.906 205.12 li
@
grestore
gsave
313.244 201.606 mo
320.244 201.606 li
320.244 194.606 li
313.244 194.606 li
313.244 201.606 li
clp
313.744 201.106 mo
319.744 195.106 li
313.744 195.106 mo
319.744 201.106 li
f
1 lw
0 lc
313.744 201.106 mo
319.744 195.106 li
313.744 195.106 mo
319.744 201.106 li
@
grestore
gsave
323.083 196.731 mo
330.082 196.731 li
330.082 189.732 li
323.083 189.732 li
323.083 196.731 li
clp
323.582 196.232 mo
329.582 190.232 li
323.582 190.232 mo
329.582 196.232 li
f
1 lw
0 lc
323.582 196.232 mo
329.582 190.232 li
323.582 190.232 mo
329.582 196.232 li
@
grestore
gsave
332.921 193.578 mo
339.921 193.578 li
339.921 186.578 li
332.921 186.578 li
332.921 193.578 li
clp
333.42 193.078 mo
339.42 187.078 li
333.42 187.078 mo
339.42 193.078 li
f
1 lw
0 lc
333.42 193.078 mo
339.42 187.078 li
333.42 187.078 mo
339.42 193.078 li
@
grestore
gsave
342.758 182.682 mo
349.759 182.682 li
349.759 175.682 li
342.758 175.682 li
342.758 182.682 li
clp
343.258 182.182 mo
349.258 176.182 li
343.258 176.182 mo
349.258 182.182 li
f
1 lw
0 lc
343.258 182.182 mo
349.258 176.182 li
343.258 176.182 mo
349.258 182.182 li
@
grestore
gsave
352.596 178.381 mo
359.596 178.381 li
359.596 171.382 li
352.596 171.382 li
352.596 178.381 li
clp
353.096 177.882 mo
359.096 171.882 li
353.096 171.882 mo
359.096 177.882 li
f
1 lw
0 lc
353.096 177.882 mo
359.096 171.882 li
353.096 171.882 mo
359.096 177.882 li
@
grestore
gsave
362.434 176.661 mo
369.434 176.661 li
369.434 169.661 li
362.434 169.661 li
362.434 176.661 li
clp
362.934 176.161 mo
368.934 170.161 li
362.934 170.161 mo
368.934 176.161 li
f
1 lw
0 lc
362.934 176.161 mo
368.934 170.161 li
362.934 170.161 mo
368.934 176.161 li
@
grestore
gsave
372.272 168.06 mo
379.272 168.06 li
379.272 161.06 li
372.272 161.06 li
372.272 168.06 li
clp
372.772 167.56 mo
378.772 161.56 li
372.772 161.56 mo
378.772 167.56 li
f
1 lw
0 lc
372.772 167.56 mo
378.772 161.56 li
372.772 161.56 mo
378.772 167.56 li
@
grestore
gsave
382.111 159.745 mo
389.111 159.745 li
389.111 152.745 li
382.111 152.745 li
382.111 159.745 li
clp
382.611 159.245 mo
388.611 153.245 li
382.611 153.245 mo
388.611 159.245 li
f
1 lw
0 lc
382.611 159.245 mo
388.611 153.245 li
382.611 153.245 mo
388.611 159.245 li
@
grestore
gsave
391.949 153.15 mo
398.949 153.15 li
398.949 146.15 li
391.949 146.15 li
391.949 153.15 li
clp
392.449 152.65 mo
398.449 146.65 li
392.449 146.65 mo
398.449 152.65 li
f
1 lw
0 lc
392.449 152.65 mo
398.449 146.65 li
392.449 146.65 mo
398.449 152.65 li
@
grestore
gsave
401.787 147.703 mo
408.787 147.703 li
408.787 140.703 li
401.787 140.703 li
401.787 147.703 li
clp
402.287 147.203 mo
408.287 141.203 li
402.287 141.203 mo
408.287 147.203 li
f
1 lw
0 lc
402.287 147.203 mo
408.287 141.203 li
402.287 141.203 mo
408.287 147.203 li
@
grestore
gsave
411.624 139.675 mo
418.625 139.675 li
418.625 132.675 li
411.624 132.675 li
411.624 139.675 li
clp
412.125 139.175 mo
418.125 133.175 li
412.125 133.175 mo
418.125 139.175 li
f
1 lw
0 lc
412.125 139.175 mo
418.125 133.175 li
412.125 133.175 mo
418.125 139.175 li
@
grestore
gsave
421.462 131.36 mo
428.462 131.36 li
428.462 124.36 li
421.462 124.36 li
421.462 131.36 li
clp
421.963 130.86 mo
427.963 124.86 li
421.963 124.86 mo
427.963 130.86 li
f
1 lw
0 lc
421.963 130.86 mo
427.963 124.86 li
421.963 124.86 mo
427.963 130.86 li
@
grestore
gsave
431.301 123.905 mo
438.3 123.905 li
438.3 116.905 li
431.301 116.905 li
431.301 123.905 li
clp
431.801 123.405 mo
437.801 117.405 li
431.801 117.405 mo
437.801 123.405 li
f
1 lw
0 lc
431.801 123.405 mo
437.801 117.405 li
431.801 117.405 mo
437.801 123.405 li
@
grestore
gsave
441.139 116.737 mo
448.138 116.737 li
448.138 109.737 li
441.139 109.737 li
441.139 116.737 li
clp
441.639 116.237 mo
447.639 110.237 li
441.639 110.237 mo
447.639 116.237 li
f
1 lw
0 lc
441.639 116.237 mo
447.639 110.237 li
441.639 110.237 mo
447.639 116.237 li
@
grestore
gsave
450.977 115.017 mo
457.977 115.017 li
457.977 108.017 li
450.977 108.017 li
450.977 115.017 li
clp
451.477 114.517 mo
457.477 108.517 li
451.477 108.517 mo
457.477 114.517 li
f
1 lw
0 lc
451.477 114.517 mo
457.477 108.517 li
451.477 108.517 mo
457.477 114.517 li
@
grestore
gsave
460.815 109.856 mo
467.815 109.856 li
467.815 102.856 li
460.815 102.856 li
460.815 109.856 li
clp
461.315 109.356 mo
467.315 103.356 li
461.315 103.356 mo
467.315 109.356 li
f
1 lw
0 lc
461.315 109.356 mo
467.315 103.356 li
461.315 103.356 mo
467.315 109.356 li
@
grestore
gsave
470.653 105.268 mo
477.653 105.268 li
477.653 98.2685 li
470.653 98.2685 li
470.653 105.268 li
clp
471.153 104.769 mo
477.153 98.7686 li
471.153 98.7686 mo
477.153 104.769 li
f
1 lw
0 lc
471.153 104.769 mo
477.153 98.7686 li
471.153 98.7686 mo
477.153 104.769 li
@
grestore
gsave
480.491 97.8138 mo
487.491 97.8138 li
487.491 90.8138 li
480.491 90.8138 li
480.491 97.8138 li
clp
480.991 97.3139 mo
486.991 91.3139 li
480.991 91.3139 mo
486.991 97.3139 li
f
1 lw
0 lc
480.991 97.3139 mo
486.991 91.3139 li
480.991 91.3139 mo
486.991 97.3139 li
@
grestore
gsave
490.329 90.646 mo
497.329 90.646 li
497.329 83.646 li
490.329 83.646 li
490.329 90.646 li
clp
490.829 90.1459 mo
496.829 84.1459 li
490.829 84.1459 mo
496.829 90.1459 li
f
1 lw
0 lc
490.829 90.1459 mo
496.829 84.1459 li
490.829 84.1459 mo
496.829 90.1459 li
@
grestore
gsave
500.167 88.0653 mo
507.167 88.0653 li
507.167 81.0654 li
500.167 81.0654 li
500.167 88.0653 li
clp
500.667 87.5655 mo
506.667 81.5655 li
500.667 81.5655 mo
506.667 87.5655 li
f
1 lw
0 lc
500.667 87.5655 mo
506.667 81.5655 li
500.667 81.5655 mo
506.667 87.5655 li
@
grestore
gsave
510.005 84.0516 mo
517.005 84.0516 li
517.005 77.0513 li
510.005 77.0513 li
510.005 84.0516 li
clp
510.505 83.5515 mo
516.505 77.5515 li
510.505 77.5515 mo
516.505 83.5515 li
f
1 lw
0 lc
510.505 83.5515 mo
516.505 77.5515 li
510.505 77.5515 mo
516.505 83.5515 li
@
grestore
gsave
519.843 82.3309 mo
526.843 82.3309 li
526.843 75.331 li
519.843 75.331 li
519.843 82.3309 li
clp
520.343 81.8311 mo
526.343 75.8311 li
520.343 75.8311 mo
526.343 81.8311 li
f
1 lw
0 lc
520.343 81.8311 mo
526.343 75.8311 li
520.343 75.8311 mo
526.343 81.8311 li
@
grestore
gsave
529.681 78.8907 mo
536.681 78.8907 li
536.681 71.8904 li
529.681 71.8904 li
529.681 78.8907 li
clp
530.181 78.3905 mo
536.181 72.3905 li
530.181 72.3905 mo
536.181 78.3905 li
f
1 lw
0 lc
530.181 78.3905 mo
536.181 72.3905 li
530.181 72.3905 mo
536.181 78.3905 li
@
grestore
gsave
539.519 75.7366 mo
546.519 75.7366 li
546.519 68.7366 li
539.519 68.7366 li
539.519 75.7366 li
clp
540.019 75.2366 mo
546.019 69.2366 li
540.019 69.2366 mo
546.019 75.2366 li
f
1 lw
0 lc
540.019 75.2366 mo
546.019 69.2366 li
540.019 69.2366 mo
546.019 75.2366 li
@
grestore
gsave
549.357 74.5897 mo
556.357 74.5897 li
556.357 67.5898 li
549.357 67.5898 li
549.357 74.5897 li
clp
549.857 74.0898 mo
555.857 68.0898 li
549.857 68.0898 mo
555.857 74.0898 li
f
1 lw
0 lc
549.857 74.0898 mo
555.857 68.0898 li
549.857 68.0898 mo
555.857 74.0898 li
@
grestore
gsave
559.195 72.0094 mo
566.195 72.0094 li
566.195 65.0095 li
559.195 65.0095 li
559.195 72.0094 li
clp
559.695 71.5093 mo
565.695 65.5093 li
559.695 65.5093 mo
565.695 71.5093 li
f
1 lw
0 lc
559.695 71.5093 mo
565.695 65.5093 li
559.695 65.5093 mo
565.695 71.5093 li
@
grestore
gsave
569.033 67.4219 mo
576.033 67.4219 li
576.033 60.422 li
569.033 60.422 li
569.033 67.4219 li
clp
569.533 66.9219 mo
575.533 60.9219 li
569.533 60.9219 mo
575.533 66.9219 li
f
1 lw
0 lc
569.533 66.9219 mo
575.533 60.9219 li
569.533 60.9219 mo
575.533 66.9219 li
@
grestore
gsave
578.871 63.9813 mo
585.871 63.9813 li
585.871 56.9814 li
578.871 56.9814 li
578.871 63.9813 li
clp
579.371 63.4813 mo
585.371 57.4813 li
579.371 57.4813 mo
585.371 63.4813 li
f
1 lw
0 lc
579.371 63.4813 mo
585.371 57.4813 li
579.371 57.4813 mo
585.371 63.4813 li
@
grestore
gsave
588.709 61.6876 mo
595.709 61.6876 li
595.709 54.6876 li
588.709 54.6876 li
588.709 61.6876 li
clp
589.209 61.1875 mo
595.209 55.1875 li
589.209 55.1875 mo
595.209 61.1875 li
f
1 lw
0 lc
589.209 61.1875 mo
595.209 55.1875 li
589.209 55.1875 mo
595.209 61.1875 li
@
grestore
gsave
598.547 59.1069 mo
605.547 59.1069 li
605.547 52.107 li
598.547 52.107 li
598.547 59.1069 li
clp
599.047 58.6071 mo
605.047 52.6071 li
599.047 52.6071 mo
605.047 58.6071 li
f
1 lw
0 lc
599.047 58.6071 mo
605.047 52.6071 li
599.047 52.6071 mo
605.047 58.6071 li
@
grestore
gsave
608.385 58.5335 mo
615.385 58.5335 li
615.385 51.5335 li
608.385 51.5335 li
608.385 58.5335 li
clp
608.885 58.0336 mo
614.885 52.0336 li
608.885 52.0336 mo
614.885 58.0336 li
f
1 lw
0 lc
608.885 58.0336 mo
614.885 52.0336 li
608.885 52.0336 mo
614.885 58.0336 li
@
grestore
gsave
618.223 59.1069 mo
625.223 59.1069 li
625.223 52.107 li
618.223 52.107 li
618.223 59.1069 li
clp
618.723 58.6071 mo
624.723 52.6071 li
618.723 52.6071 mo
624.723 58.6071 li
f
1 lw
0 lc
618.723 58.6071 mo
624.723 52.6071 li
618.723 52.6071 mo
624.723 58.6071 li
@
grestore
gsave
628.061 58.8204 mo
635.061 58.8204 li
635.061 51.8204 li
628.061 51.8204 li
628.061 58.8204 li
clp
628.561 58.3203 mo
634.561 52.3203 li
628.561 52.3203 mo
634.561 58.3203 li
f
1 lw
0 lc
628.561 58.3203 mo
634.561 52.3203 li
628.561 52.3203 mo
634.561 58.3203 li
@
grestore
gsave
637.899 57.9601 mo
644.899 57.9601 li
644.899 50.9601 li
637.899 50.9601 li
637.899 57.9601 li
clp
638.399 57.4601 mo
644.399 51.4601 li
638.399 51.4601 mo
644.399 57.4601 li
f
1 lw
0 lc
638.399 57.4601 mo
644.399 51.4601 li
638.399 51.4601 mo
644.399 57.4601 li
@
grestore
gsave
647.737 55.6663 mo
654.737 55.6663 li
654.737 48.6664 li
647.737 48.6664 li
647.737 55.6663 li
clp
648.237 55.1664 mo
654.237 49.1664 li
648.237 49.1664 mo
654.237 55.1664 li
f
1 lw
0 lc
648.237 55.1664 mo
654.237 49.1664 li
648.237 49.1664 mo
654.237 55.1664 li
@
grestore
gsave
657.575 54.5194 mo
664.575 54.5194 li
664.575 47.5195 li
657.575 47.5195 li
657.575 54.5194 li
clp
658.075 54.0195 mo
664.075 48.0195 li
658.075 48.0195 mo
664.075 54.0195 li
f
1 lw
0 lc
658.075 54.0195 mo
664.075 48.0195 li
658.075 48.0195 mo
664.075 54.0195 li
@
grestore
gsave
667.413 52.7991 mo
674.413 52.7991 li
674.413 45.7992 li
667.413 45.7992 li
667.413 52.7991 li
clp
667.913 52.2992 mo
673.913 46.2992 li
667.913 46.2992 mo
673.913 52.2992 li
f
1 lw
0 lc
667.913 52.2992 mo
673.913 46.2992 li
667.913 46.2992 mo
673.913 52.2992 li
@
grestore
gsave
677.251 51.6522 mo
684.251 51.6522 li
684.251 44.6523 li
677.251 44.6523 li
677.251 51.6522 li
clp
677.751 51.1523 mo
683.751 45.1523 li
677.751 45.1523 mo
683.751 51.1523 li
f
1 lw
0 lc
677.751 51.1523 mo
683.751 45.1523 li
677.751 45.1523 mo
683.751 51.1523 li
@
grestore
gsave
687.089 53.6594 mo
694.089 53.6594 li
694.089 46.6595 li
687.089 46.6595 li
687.089 53.6594 li
clp
687.589 53.1594 mo
693.589 47.1594 li
687.589 47.1594 mo
693.589 53.1594 li
f
1 lw
0 lc
687.589 53.1594 mo
693.589 47.1594 li
687.589 47.1594 mo
693.589 53.1594 li
@
grestore
gsave
696.927 52.7991 mo
703.927 52.7991 li
703.927 45.7992 li
696.927 45.7992 li
696.927 52.7991 li
clp
697.427 52.2992 mo
703.427 46.2992 li
697.427 46.2992 mo
703.427 52.2992 li
f
1 lw
0 lc
697.427 52.2992 mo
703.427 46.2992 li
697.427 46.2992 mo
703.427 52.2992 li
@
grestore
gsave
706.765 51.9391 mo
713.765 51.9391 li
713.765 44.9392 li
706.765 44.9392 li
706.765 51.9391 li
clp
707.265 51.439 mo
713.265 45.439 li
707.265 45.439 mo
713.265 51.439 li
f
1 lw
0 lc
707.265 51.439 mo
713.265 45.439 li
707.265 45.439 mo
713.265 51.439 li
@
grestore
gsave
716.603 52.2257 mo
723.603 52.2257 li
723.603 45.2257 li
716.603 45.2257 li
716.603 52.2257 li
clp
717.103 51.7258 mo
723.103 45.7258 li
717.103 45.7258 mo
723.103 51.7258 li
f
1 lw
0 lc
717.103 51.7258 mo
723.103 45.7258 li
717.103 45.7258 mo
723.103 51.7258 li
@
grestore
gsave
726.441 50.7923 mo
733.441 50.7923 li
733.441 43.7923 li
726.441 43.7923 li
726.441 50.7923 li
clp
726.941 50.2922 mo
732.941 44.2922 li
726.941 44.2922 mo
732.941 50.2922 li
f
1 lw
0 lc
726.941 50.2922 mo
732.941 44.2922 li
726.941 44.2922 mo
732.941 50.2922 li
@
grestore
gsave
736.279 53.086 mo
743.279 53.086 li
743.279 46.0861 li
736.279 46.0861 li
736.279 53.086 li
clp
736.779 52.5859 mo
742.779 46.5859 li
736.779 46.5859 mo
742.779 52.5859 li
f
1 lw
0 lc
736.779 52.5859 mo
742.779 46.5859 li
736.779 46.5859 mo
742.779 52.5859 li
@
grestore
gsave
746.117 54.8063 mo
753.117 54.8063 li
753.117 47.8064 li
746.117 47.8064 li
746.117 54.8063 li
clp
746.617 54.3063 mo
752.617 48.3063 li
746.617 48.3063 mo
752.617 54.3063 li
f
1 lw
0 lc
746.617 54.3063 mo
752.617 48.3063 li
746.617 48.3063 mo
752.617 54.3063 li
@
grestore
gsave
755.955 53.086 mo
762.955 53.086 li
762.955 46.0861 li
755.955 46.0861 li
755.955 53.086 li
clp
756.455 52.5859 mo
762.455 46.5859 li
756.455 46.5859 mo
762.455 52.5859 li
f
1 lw
0 lc
756.455 52.5859 mo
762.455 46.5859 li
756.455 46.5859 mo
762.455 52.5859 li
@
grestore
gsave
765.793 57.1001 mo
772.793 57.1001 li
772.793 50.1001 li
765.793 50.1001 li
765.793 57.1001 li
clp
766.293 56.6 mo
772.293 50.6 li
766.293 50.6 mo
772.293 56.6 li
f
1 lw
0 lc
766.293 56.6 mo
772.293 50.6 li
766.293 50.6 mo
772.293 56.6 li
@
grestore
gsave
775.631 55.0929 mo
782.631 55.0929 li
782.631 48.0929 li
775.631 48.0929 li
775.631 55.0929 li
clp
776.131 54.593 mo
782.131 48.593 li
776.131 48.593 mo
782.131 54.593 li
f
1 lw
0 lc
776.131 54.593 mo
782.131 48.593 li
776.131 48.593 mo
782.131 54.593 li
@
grestore
gsave
785.469 56.2397 mo
792.469 56.2397 li
792.469 49.2398 li
785.469 49.2398 li
785.469 56.2397 li
clp
785.969 55.7398 mo
791.969 49.7398 li
785.969 49.7398 mo
791.969 55.7398 li
f
1 lw
0 lc
785.969 55.7398 mo
791.969 49.7398 li
785.969 49.7398 mo
791.969 55.7398 li
@
grestore
gsave
795.307 52.2257 mo
802.307 52.2257 li
802.307 45.2257 li
795.307 45.2257 li
795.307 52.2257 li
clp
795.807 51.7258 mo
801.807 45.7258 li
795.807 45.7258 mo
801.807 51.7258 li
f
1 lw
0 lc
795.807 51.7258 mo
801.807 45.7258 li
795.807 45.7258 mo
801.807 51.7258 li
@
grestore
gsave
805.145 49.0719 mo
812.145 49.0719 li
812.145 42.072 li
805.145 42.072 li
805.145 49.0719 li
clp
805.645 48.5719 mo
811.645 42.5719 li
805.645 42.5719 mo
811.645 48.5719 li
f
1 lw
0 lc
805.645 48.5719 mo
811.645 42.5719 li
805.645 42.5719 mo
811.645 48.5719 li
@
grestore
gsave
814.983 49.9319 mo
821.983 49.9319 li
821.983 42.932 li
814.983 42.932 li
814.983 49.9319 li
clp
815.483 49.4321 mo
821.483 43.4321 li
815.483 43.4321 mo
821.483 49.4321 li
f
1 lw
0 lc
815.483 49.4321 mo
821.483 43.4321 li
815.483 43.4321 mo
821.483 49.4321 li
@
grestore
gsave
824.821 49.9319 mo
831.821 49.9319 li
831.821 42.932 li
824.821 42.932 li
824.821 49.9319 li
clp
825.321 49.4321 mo
831.321 43.4321 li
825.321 43.4321 mo
831.321 49.4321 li
f
1 lw
0 lc
825.321 49.4321 mo
831.321 43.4321 li
825.321 43.4321 mo
831.321 49.4321 li
@
grestore
gsave
834.659 49.3585 mo
841.659 49.3585 li
841.659 42.3586 li
834.659 42.3586 li
834.659 49.3585 li
clp
835.159 48.8586 mo
841.159 42.8586 li
835.159 42.8586 mo
841.159 48.8586 li
f
1 lw
0 lc
835.159 48.8586 mo
841.159 42.8586 li
835.159 42.8586 mo
841.159 48.8586 li
@
grestore
gsave
844.497 49.3585 mo
851.497 49.3585 li
851.497 42.3586 li
844.497 42.3586 li
844.497 49.3585 li
clp
844.997 48.8586 mo
850.997 42.8586 li
844.997 42.8586 mo
850.997 48.8586 li
f
1 lw
0 lc
844.997 48.8586 mo
850.997 42.8586 li
844.997 42.8586 mo
850.997 48.8586 li
@
grestore
gsave
854.335 49.0719 mo
861.335 49.0719 li
861.335 42.072 li
854.335 42.072 li
854.335 49.0719 li
clp
854.835 48.5719 mo
860.835 42.5719 li
854.835 42.5719 mo
860.835 48.5719 li
f
1 lw
0 lc
854.835 48.5719 mo
860.835 42.5719 li
854.835 42.5719 mo
860.835 48.5719 li
@
grestore
gsave
864.173 48.7851 mo
871.173 48.7851 li
871.173 41.7851 li
864.173 41.7851 li
864.173 48.7851 li
clp
864.673 48.2852 mo
870.673 42.2852 li
864.673 42.2852 mo
870.673 48.2852 li
f
1 lw
0 lc
864.673 48.2852 mo
870.673 42.2852 li
864.673 42.2852 mo
870.673 48.2852 li
@
grestore
gsave
874.011 48.7851 mo
881.011 48.7851 li
881.011 41.7851 li
874.011 41.7851 li
874.011 48.7851 li
clp
874.511 48.2852 mo
880.511 42.2852 li
874.511 42.2852 mo
880.511 48.2852 li
f
1 lw
0 lc
874.511 48.2852 mo
880.511 42.2852 li
874.511 42.2852 mo
880.511 48.2852 li
@
grestore
gsave
883.849 48.4985 mo
890.849 48.4985 li
890.849 41.4986 li
883.849 41.4986 li
883.849 48.4985 li
clp
884.349 47.9984 mo
890.349 41.9984 li
884.349 41.9984 mo
890.349 47.9984 li
f
1 lw
0 lc
884.349 47.9984 mo
890.349 41.9984 li
884.349 41.9984 mo
890.349 47.9984 li
@
grestore
gsave
893.687 47.9251 mo
900.687 47.9251 li
900.687 40.9251 li
893.687 40.9251 li
893.687 47.9251 li
clp
894.187 47.425 mo
900.187 41.425 li
894.187 41.425 mo
900.187 47.425 li
f
1 lw
0 lc
894.187 47.425 mo
900.187 41.425 li
894.187 41.425 mo
900.187 47.425 li
@
grestore
gsave
903.525 47.9251 mo
910.525 47.9251 li
910.525 40.9251 li
903.525 40.9251 li
903.525 47.9251 li
clp
904.025 47.425 mo
910.025 41.425 li
904.025 41.425 mo
910.025 47.425 li
f
1 lw
0 lc
904.025 47.425 mo
910.025 41.425 li
904.025 41.425 mo
910.025 47.425 li
@
grestore
gsave
913.363 48.2116 mo
920.363 48.2116 li
920.363 41.2117 li
913.363 41.2117 li
913.363 48.2116 li
clp
913.863 47.7117 mo
919.863 41.7117 li
913.863 41.7117 mo
919.863 47.7117 li
f
1 lw
0 lc
913.863 47.7117 mo
919.863 41.7117 li
913.863 41.7117 mo
919.863 47.7117 li
@
grestore
gsave
923.201 47.6382 mo
930.201 47.6382 li
930.201 40.6382 li
923.201 40.6382 li
923.201 47.6382 li
clp
923.701 47.1383 mo
929.701 41.1383 li
923.701 41.1383 mo
929.701 47.1383 li
f
1 lw
0 lc
923.701 47.1383 mo
929.701 41.1383 li
923.701 41.1383 mo
929.701 47.1383 li
@
grestore
gsave
933.039 47.3516 mo
940.039 47.3516 li
940.039 40.3517 li
933.039 40.3517 li
933.039 47.3516 li
clp
933.539 46.8516 mo
939.539 40.8516 li
933.539 40.8516 mo
939.539 46.8516 li
f
1 lw
0 lc
933.539 46.8516 mo
939.539 40.8516 li
933.539 40.8516 mo
939.539 46.8516 li
@
grestore
gsave
942.877 47.9251 mo
949.877 47.9251 li
949.877 40.9251 li
942.877 40.9251 li
942.877 47.9251 li
clp
943.377 47.425 mo
949.377 41.425 li
943.377 41.425 mo
949.377 47.425 li
f
1 lw
0 lc
943.377 47.425 mo
949.377 41.425 li
943.377 41.425 mo
949.377 47.425 li
@
grestore
gsave
952.715 47.0647 mo
959.715 47.0647 li
959.715 40.0648 li
952.715 40.0648 li
952.715 47.0647 li
clp
953.215 46.5648 mo
959.215 40.5648 li
953.215 40.5648 mo
959.215 46.5648 li
f
1 lw
0 lc
953.215 46.5648 mo
959.215 40.5648 li
953.215 40.5648 mo
959.215 46.5648 li
@
grestore
gsave
962.553 46.4913 mo
969.553 46.4913 li
969.553 39.4914 li
962.553 39.4914 li
962.553 46.4913 li
clp
963.053 45.9914 mo
969.053 39.9914 li
963.053 39.9914 mo
969.053 45.9914 li
f
1 lw
0 lc
963.053 45.9914 mo
969.053 39.9914 li
963.053 39.9914 mo
969.053 45.9914 li
@
grestore
gsave
972.391 46.7782 mo
979.391 46.7782 li
979.391 39.7783 li
972.391 39.7783 li
972.391 46.7782 li
clp
972.891 46.2781 mo
978.891 40.2781 li
972.891 40.2781 mo
978.891 46.2781 li
f
1 lw
0 lc
972.891 46.2781 mo
978.891 40.2781 li
972.891 40.2781 mo
978.891 46.2781 li
@
grestore
gsave
982.229 46.4913 mo
989.229 46.4913 li
989.229 39.4914 li
982.229 39.4914 li
982.229 46.4913 li
clp
982.729 45.9914 mo
988.729 39.9914 li
982.729 39.9914 mo
988.729 45.9914 li
f
1 lw
0 lc
982.729 45.9914 mo
988.729 39.9914 li
982.729 39.9914 mo
988.729 45.9914 li
@
grestore
gsave
992.067 46.4913 mo
999.068 46.4913 li
999.068 39.4914 li
992.067 39.4914 li
992.067 46.4913 li
clp
992.567 45.9914 mo
998.567 39.9914 li
992.567 39.9914 mo
998.567 45.9914 li
f
1 lw
0 lc
992.567 45.9914 mo
998.567 39.9914 li
992.567 39.9914 mo
998.567 45.9914 li
@
grestore
gsave
1001.91 46.7782 mo
1008.91 46.7782 li
1008.91 39.7783 li
1001.91 39.7783 li
1001.91 46.7782 li
clp
1002.41 46.2781 mo
1008.41 40.2781 li
1002.41 40.2781 mo
1008.41 46.2781 li
f
1 lw
0 lc
1002.41 46.2781 mo
1008.41 40.2781 li
1002.41 40.2781 mo
1008.41 46.2781 li
@
grestore
gsave
1011.74 46.4913 mo
1018.74 46.4913 li
1018.74 39.4914 li
1011.74 39.4914 li
1011.74 46.4913 li
clp
1012.24 45.9914 mo
1018.24 39.9914 li
1012.24 39.9914 mo
1018.24 45.9914 li
f
1 lw
0 lc
1012.24 45.9914 mo
1018.24 39.9914 li
1012.24 39.9914 mo
1018.24 45.9914 li
@
grestore
gsave
1021.58 46.7782 mo
1028.58 46.7782 li
1028.58 39.7783 li
1021.58 39.7783 li
1021.58 46.7782 li
clp
1022.08 46.2781 mo
1028.08 40.2781 li
1022.08 40.2781 mo
1028.08 46.2781 li
f
1 lw
0 lc
1022.08 46.2781 mo
1028.08 40.2781 li
1022.08 40.2781 mo
1028.08 46.2781 li
@
grestore
gsave
1031.42 46.7782 mo
1038.42 46.7782 li
1038.42 39.7783 li
1031.42 39.7783 li
1031.42 46.7782 li
clp
1031.92 46.2781 mo
1037.92 40.2781 li
1031.92 40.2781 mo
1037.92 46.2781 li
f
1 lw
0 lc
1031.92 46.2781 mo
1037.92 40.2781 li
1031.92 40.2781 mo
1037.92 46.2781 li
@
grestore
gsave
1041.26 47.0647 mo
1048.26 47.0647 li
1048.26 40.0648 li
1041.26 40.0648 li
1041.26 47.0647 li
clp
1041.76 46.5649 mo
1047.76 40.5649 li
1041.76 40.5649 mo
1047.76 46.5649 li
f
1 lw
0 lc
1041.76 46.5649 mo
1047.76 40.5649 li
1041.76 40.5649 mo
1047.76 46.5649 li
@
grestore
gsave
1051.1 46.7782 mo
1058.1 46.7782 li
1058.1 39.7783 li
1051.1 39.7783 li
1051.1 46.7782 li
clp
1051.6 46.2781 mo
1057.6 40.2781 li
1051.6 40.2781 mo
1057.6 46.2781 li
f
1 lw
0 lc
1051.6 46.2781 mo
1057.6 40.2781 li
1051.6 40.2781 mo
1057.6 46.2781 li
@
grestore
gsave
1060.93 47.0647 mo
1067.93 47.0647 li
1067.93 40.0648 li
1060.93 40.0648 li
1060.93 47.0647 li
clp
1061.43 46.5649 mo
1067.43 40.5649 li
1061.43 40.5649 mo
1067.43 46.5649 li
f
1 lw
0 lc
1061.43 46.5649 mo
1067.43 40.5649 li
1061.43 40.5649 mo
1067.43 46.5649 li
@
grestore
gsave
1070.77 46.7782 mo
1077.77 46.7782 li
1077.77 39.7783 li
1070.77 39.7783 li
1070.77 46.7782 li
clp
1071.27 46.2781 mo
1077.27 40.2781 li
1071.27 40.2781 mo
1077.27 46.2781 li
f
1 lw
0 lc
1071.27 46.2781 mo
1077.27 40.2781 li
1071.27 40.2781 mo
1077.27 46.2781 li
@
grestore
gsave
1080.61 46.4913 mo
1087.61 46.4913 li
1087.61 39.4914 li
1080.61 39.4914 li
1080.61 46.4913 li
clp
1081.11 45.9914 mo
1087.11 39.9914 li
1081.11 39.9914 mo
1087.11 45.9914 li
f
1 lw
0 lc
1081.11 45.9914 mo
1087.11 39.9914 li
1081.11 39.9914 mo
1087.11 45.9914 li
@
grestore
gsave
1090.45 47.3516 mo
1097.45 47.3516 li
1097.45 40.3517 li
1090.45 40.3517 li
1090.45 47.3516 li
clp
1090.95 46.8516 mo
1096.95 40.8516 li
1090.95 40.8516 mo
1096.95 46.8516 li
f
1 lw
0 lc
1090.95 46.8516 mo
1096.95 40.8516 li
1090.95 40.8516 mo
1096.95 46.8516 li
@
grestore
gsave
1100.29 47.6382 mo
1107.29 47.6382 li
1107.29 40.6382 li
1100.29 40.6382 li
1100.29 47.6382 li
clp
1100.79 47.1383 mo
1106.79 41.1383 li
1100.79 41.1383 mo
1106.79 47.1383 li
f
1 lw
0 lc
1100.79 47.1383 mo
1106.79 41.1383 li
1100.79 41.1383 mo
1106.79 47.1383 li
@
grestore
gsave
1110.12 47.9251 mo
1117.12 47.9251 li
1117.12 40.9251 li
1110.12 40.9251 li
1110.12 47.9251 li
clp
1110.62 47.425 mo
1116.62 41.425 li
1110.62 41.425 mo
1116.62 47.425 li
f
1 lw
0 lc
1110.62 47.425 mo
1116.62 41.425 li
1110.62 41.425 mo
1116.62 47.425 li
@
grestore
gsave
1119.96 47.6382 mo
1126.96 47.6382 li
1126.96 40.6382 li
1119.96 40.6382 li
1119.96 47.6382 li
clp
1120.46 47.1383 mo
1126.46 41.1383 li
1120.46 41.1383 mo
1126.46 47.1383 li
f
1 lw
0 lc
1120.46 47.1383 mo
1126.46 41.1383 li
1120.46 41.1383 mo
1126.46 47.1383 li
@
grestore
.8 lw
0 lj
100.8 543.935 mo
100.8 6.72162 li
@
1172.16 543.935 mo
1172.16 6.72162 li
@
100.8 543.935 mo
1172.16 543.935 li
@
100.8 6.72162 mo
1172.16 6.72162 li
@
1165.16 538.435 mo
572.535 538.435 li
571.945 538.433 571.598 538.291 571.389 538.082 cv
571.179 537.872 571.037 537.525 571.035 536.935 cv
571.035 401.81 li
571.037 401.22 571.179 400.873 571.389 400.664 cv
571.598 400.454 571.945 400.312 572.535 400.31 cv
1165.16 400.31 li
1165.75 400.312 1166.1 400.454 1166.31 400.664 cv
1166.52 400.873 1166.66 401.22 1166.66 401.81 cv
1166.66 536.935 li
1166.66 537.525 1166.52 537.872 1166.31 538.082 cv
1166.1 538.291 1165.75 538.433 1165.16 538.435 cv
0 0 0 0 cmyk
f
1165.17 539.435 mo
1165.17 539.435 1165.16 539.435 1165.16 539.435 cv
572.535 539.435 li
572.532 539.435 572.528 539.435 572.525 539.435 cv
571.786 539.435 571.137 539.244 570.681 538.789 cv
570.224 538.331 570.033 537.679 570.035 536.935 cv
570.035 401.81 li
570.033 401.067 570.224 400.414 570.681 399.957 cv
571.137 399.501 571.786 399.31 572.525 399.31 cv
572.528 399.31 572.532 399.31 572.535 399.31 cv
1165.16 399.31 li
1165.16 399.31 1165.17 399.31 1165.17 399.31 cv
1165.91 399.31 1166.56 399.501 1167.01 399.957 cv
1167.47 400.414 1167.66 401.067 1167.66 401.81 cv
1167.66 536.935 li
1167.66 537.679 1167.47 538.331 1167.01 538.789 cv
1166.56 539.244 1165.91 539.435 1165.17 539.435 cv
572.535 538.435 mo
1165.16 538.435 li
1165.75 538.433 1166.1 538.291 1166.31 538.082 cv
1166.52 537.872 1166.66 537.525 1166.66 536.935 cv
1166.66 401.81 li
1166.66 401.22 1166.52 400.873 1166.31 400.664 cv
1166.1 400.454 1165.75 400.312 1165.16 400.31 cv
572.535 400.31 li
571.945 400.312 571.598 400.454 571.389 400.664 cv
571.179 400.873 571.037 401.22 571.035 401.81 cv
571.035 536.935 li
571.037 537.525 571.179 537.872 571.389 538.082 cv
571.598 538.291 571.945 538.433 572.535 538.435 cv
572.535 538.435 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
574.535 423.107 mo
594.535 423.107 li
0 1 1 0 cmyk
@
608.445 416.167 mo
608.445 424.177 li
613.185 424.177 li
614.775 424.177 615.945 423.847 616.725 423.187 cv
617.475 422.527 617.865 421.537 617.865 420.157 cv
617.865 418.807 617.475 417.817 616.725 417.157 cv
615.945 416.497 614.775 416.167 613.185 416.167 cv
608.445 416.167 li
608.445 407.167 mo
608.445 413.767 li
612.825 413.767 li
614.265 413.767 615.315 413.497 616.035 412.957 cv
616.755 412.417 617.115 411.607 617.115 410.467 cv
617.115 409.387 616.755 408.547 616.035 408.007 cv
615.315 407.467 614.265 407.167 612.825 407.167 cv
608.445 407.167 li
605.475 404.737 mo
613.035 404.737 li
615.285 404.737 617.025 405.217 618.255 406.147 cv
619.455 407.107 620.085 408.427 620.085 410.137 cv
620.085 411.487 619.755 412.567 619.125 413.347 cv
618.495 414.127 617.595 414.637 616.395 414.817 cv
617.835 415.147 618.975 415.807 619.785 416.797 cv
620.565 417.787 620.985 419.017 620.985 420.487 cv
620.985 422.467 620.295 423.967 618.975 425.017 cv
617.655 426.097 615.765 426.607 613.335 426.607 cv
605.475 426.607 li
605.475 404.737 li
1 /0 /CSD get_res sepcs
1 sep
f
633.405 418.357 mo
631.215 418.357 629.715 418.627 628.875 419.107 cv
628.035 419.617 627.615 420.457 627.615 421.657 cv
627.615 422.617 627.915 423.397 628.545 423.937 cv
629.175 424.507 630.045 424.777 631.125 424.777 cv
632.625 424.777 633.825 424.267 634.725 423.187 cv
635.625 422.137 636.075 420.727 636.075 418.957 cv
636.075 418.357 li
633.405 418.357 li
638.775 417.247 mo
638.775 426.607 li
636.075 426.607 li
636.075 424.117 li
635.445 425.137 634.665 425.857 633.765 426.307 cv
632.865 426.757 631.725 426.997 630.405 426.997 cv
628.725 426.997 627.375 426.547 626.385 425.617 cv
625.395 424.687 624.915 423.427 624.915 421.837 cv
624.915 420.007 625.515 418.627 626.775 417.667 cv
628.005 416.737 629.835 416.257 632.295 416.257 cv
636.075 416.257 li
636.075 415.987 li
636.075 414.757 635.655 413.797 634.845 413.107 cv
634.035 412.447 632.895 412.087 631.425 412.087 cv
630.465 412.087 629.565 412.207 628.665 412.447 cv
627.765 412.687 626.925 413.017 626.115 413.437 cv
626.115 410.947 li
627.075 410.587 628.035 410.287 628.965 410.107 cv
629.895 409.927 630.795 409.807 631.695 409.807 cv
634.065 409.807 635.835 410.437 637.005 411.667 cv
638.175 412.897 638.775 414.757 638.775 417.247 cv
f
656.145 410.827 mo
656.145 413.347 li
655.365 412.927 654.615 412.627 653.835 412.417 cv
653.055 412.207 652.305 412.087 651.525 412.087 cv
649.785 412.087 648.405 412.657 647.445 413.767 cv
646.485 414.877 646.005 416.437 646.005 418.417 cv
646.005 420.427 646.485 421.987 647.445 423.097 cv
648.405 424.207 649.785 424.747 651.525 424.747 cv
652.305 424.747 653.055 424.657 653.835 424.447 cv
654.615 424.237 655.365 423.907 656.145 423.487 cv
656.145 425.977 li
655.365 426.337 654.585 426.607 653.805 426.757 cv
652.995 426.907 652.125 426.997 651.225 426.997 cv
648.765 426.997 646.785 426.247 645.345 424.687 cv
643.875 423.157 643.155 421.057 643.155 418.417 cv
643.155 415.747 643.875 413.647 645.345 412.117 cv
646.815 410.587 648.825 409.807 651.405 409.807 cv
652.245 409.807 653.055 409.897 653.835 410.077 cv
654.615 410.257 655.395 410.497 656.145 410.827 cv
f
660.735 403.807 mo
663.435 403.807 li
663.435 417.277 li
671.475 410.197 li
674.925 410.197 li
666.225 417.877 li
675.285 426.607 li
671.775 426.607 li
663.435 418.597 li
663.435 426.607 li
660.735 426.607 li
660.735 403.807 li
f
690.345 424.147 mo
690.345 432.817 li
687.645 432.817 li
687.645 410.197 li
690.345 410.197 li
690.345 412.687 li
690.885 411.727 691.605 411.007 692.475 410.527 cv
693.345 410.047 694.395 409.807 695.595 409.807 cv
697.575 409.807 699.195 410.617 700.455 412.177 cv
701.685 413.767 702.315 415.837 702.315 418.417 cv
702.315 420.997 701.685 423.097 700.455 424.657 cv
699.195 426.217 697.575 426.997 695.595 426.997 cv
694.395 426.997 693.345 426.757 692.475 426.307 cv
691.605 425.857 690.885 425.137 690.345 424.147 cv
699.525 418.417 mo
699.525 416.437 699.105 414.907 698.295 413.767 cv
697.455 412.627 696.345 412.057 694.935 412.057 cv
693.495 412.057 692.385 412.627 691.575 413.767 cv
690.735 414.907 690.345 416.437 690.345 418.417 cv
690.345 420.397 690.735 421.957 691.575 423.097 cv
692.385 424.237 693.495 424.777 694.935 424.777 cv
696.345 424.777 697.455 424.237 698.295 423.097 cv
699.105 421.957 699.525 420.397 699.525 418.417 cv
f
716.295 412.717 mo
715.995 412.537 715.665 412.417 715.305 412.327 cv
714.945 412.267 714.555 412.207 714.135 412.207 cv
712.605 412.207 711.435 412.717 710.625 413.707 cv
709.785 414.697 709.395 416.107 709.395 417.967 cv
709.395 426.607 li
706.695 426.607 li
706.695 410.197 li
709.395 410.197 li
709.395 412.747 li
709.935 411.757 710.685 411.007 711.585 410.527 cv
712.485 410.047 713.595 409.807 714.915 409.807 cv
715.095 409.807 715.305 409.837 715.545 409.837 cv
715.755 409.867 715.995 409.897 716.295 409.957 cv
716.295 412.717 li
f
725.475 412.087 mo
724.035 412.087 722.895 412.657 722.055 413.797 cv
721.215 414.937 720.795 416.467 720.795 418.417 cv
720.795 420.397 721.185 421.927 722.025 423.067 cv
722.865 424.207 724.005 424.747 725.475 424.747 cv
726.915 424.747 728.055 424.207 728.895 423.067 cv
729.735 421.927 730.155 420.397 730.155 418.417 cv
730.155 416.497 729.735 414.937 728.895 413.797 cv
728.055 412.657 726.915 412.087 725.475 412.087 cv
725.475 409.807 mo
727.815 409.807 729.645 410.587 730.995 412.087 cv
732.315 413.617 733.005 415.717 733.005 418.417 cv
733.005 421.117 732.315 423.217 730.995 424.717 cv
729.645 426.247 727.815 426.997 725.475 426.997 cv
723.105 426.997 721.245 426.247 719.925 424.717 cv
718.605 423.217 717.945 421.117 717.945 418.417 cv
717.945 415.717 718.605 413.617 719.925 412.087 cv
721.245 410.587 723.105 409.807 725.475 409.807 cv
f
740.085 424.147 mo
740.085 432.817 li
737.385 432.817 li
737.385 410.197 li
740.085 410.197 li
740.085 412.687 li
740.625 411.727 741.345 411.007 742.215 410.527 cv
743.085 410.047 744.135 409.807 745.335 409.807 cv
747.315 409.807 748.935 410.617 750.195 412.177 cv
751.425 413.767 752.055 415.837 752.055 418.417 cv
752.055 420.997 751.425 423.097 750.195 424.657 cv
748.935 426.217 747.315 426.997 745.335 426.997 cv
744.135 426.997 743.085 426.757 742.215 426.307 cv
741.345 425.857 740.625 425.137 740.085 424.147 cv
749.265 418.417 mo
749.265 416.437 748.845 414.907 748.035 413.767 cv
747.195 412.627 746.085 412.057 744.675 412.057 cv
743.235 412.057 742.125 412.627 741.315 413.767 cv
740.475 414.907 740.085 416.437 740.085 418.417 cv
740.085 420.397 740.475 421.957 741.315 423.097 cv
742.125 424.237 743.235 424.777 744.675 424.777 cv
746.085 424.777 747.195 424.237 748.035 423.097 cv
748.845 421.957 749.265 420.397 749.265 418.417 cv
f
763.995 418.357 mo
761.805 418.357 760.305 418.627 759.465 419.107 cv
758.625 419.617 758.205 420.457 758.205 421.657 cv
758.205 422.617 758.505 423.397 759.135 423.937 cv
759.765 424.507 760.635 424.777 761.715 424.777 cv
763.215 424.777 764.415 424.267 765.315 423.187 cv
766.215 422.137 766.665 420.727 766.665 418.957 cv
766.665 418.357 li
763.995 418.357 li
769.365 417.247 mo
769.365 426.607 li
766.665 426.607 li
766.665 424.117 li
766.035 425.137 765.255 425.857 764.355 426.307 cv
763.455 426.757 762.315 426.997 760.995 426.997 cv
759.315 426.997 757.965 426.547 756.975 425.617 cv
755.985 424.687 755.505 423.427 755.505 421.837 cv
755.505 420.007 756.105 418.627 757.365 417.667 cv
758.595 416.737 760.425 416.257 762.885 416.257 cv
766.665 416.257 li
766.665 415.987 li
766.665 414.757 766.245 413.797 765.435 413.107 cv
764.625 412.447 763.485 412.087 762.015 412.087 cv
761.055 412.087 760.155 412.207 759.255 412.447 cv
758.355 412.687 757.515 413.017 756.705 413.437 cv
756.705 410.947 li
757.665 410.587 758.625 410.287 759.555 410.107 cv
760.485 409.927 761.385 409.807 762.285 409.807 cv
764.655 409.807 766.425 410.437 767.595 411.667 cv
768.765 412.897 769.365 414.757 769.365 417.247 cv
f
785.715 418.207 mo
785.715 416.287 785.295 414.757 784.515 413.677 cv
783.705 412.597 782.565 412.057 781.125 412.057 cv
779.685 412.057 778.545 412.597 777.735 413.677 cv
776.925 414.757 776.535 416.287 776.535 418.207 cv
776.535 420.157 776.925 421.657 777.735 422.737 cv
778.545 423.817 779.685 424.357 781.125 424.357 cv
782.565 424.357 783.705 423.817 784.515 422.737 cv
785.295 421.657 785.715 420.157 785.715 418.207 cv
788.415 424.567 mo
788.415 427.327 787.785 429.397 786.555 430.777 cv
785.295 432.127 783.405 432.817 780.855 432.817 cv
779.895 432.817 779.025 432.727 778.185 432.607 cv
777.345 432.457 776.505 432.247 775.725 431.947 cv
775.725 429.337 li
776.505 429.757 777.285 430.057 778.065 430.267 cv
778.845 430.477 779.625 430.597 780.435 430.597 cv
782.175 430.597 783.495 430.117 784.395 429.217 cv
785.265 428.287 785.715 426.907 785.715 425.047 cv
785.715 423.727 li
785.145 424.687 784.425 425.407 783.555 425.887 cv
782.685 426.367 781.665 426.607 780.465 426.607 cv
778.425 426.607 776.805 425.857 775.575 424.327 cv
774.345 422.797 773.745 420.757 773.745 418.207 cv
773.745 415.687 774.345 413.647 775.575 412.117 cv
776.805 410.587 778.425 409.807 780.465 409.807 cv
781.665 409.807 782.685 410.047 783.555 410.527 cv
784.425 411.007 785.145 411.727 785.715 412.687 cv
785.715 410.197 li
788.415 410.197 li
788.415 424.567 li
f
801.435 418.357 mo
799.245 418.357 797.745 418.627 796.905 419.107 cv
796.065 419.617 795.645 420.457 795.645 421.657 cv
795.645 422.617 795.945 423.397 796.575 423.937 cv
797.205 424.507 798.075 424.777 799.155 424.777 cv
800.655 424.777 801.855 424.267 802.755 423.187 cv
803.655 422.137 804.105 420.727 804.105 418.957 cv
804.105 418.357 li
801.435 418.357 li
806.805 417.247 mo
806.805 426.607 li
804.105 426.607 li
804.105 424.117 li
803.475 425.137 802.695 425.857 801.795 426.307 cv
800.895 426.757 799.755 426.997 798.435 426.997 cv
796.755 426.997 795.405 426.547 794.415 425.617 cv
793.425 424.687 792.945 423.427 792.945 421.837 cv
792.945 420.007 793.545 418.627 794.805 417.667 cv
796.035 416.737 797.865 416.257 800.325 416.257 cv
804.105 416.257 li
804.105 415.987 li
804.105 414.757 803.685 413.797 802.875 413.107 cv
802.065 412.447 800.925 412.087 799.455 412.087 cv
798.495 412.087 797.595 412.207 796.695 412.447 cv
795.795 412.687 794.955 413.017 794.145 413.437 cv
794.145 410.947 li
795.105 410.587 796.065 410.287 796.995 410.107 cv
797.925 409.927 798.825 409.807 799.725 409.807 cv
802.095 409.807 803.865 410.437 805.035 411.667 cv
806.205 412.897 806.805 414.757 806.805 417.247 cv
f
815.025 405.547 mo
815.025 410.197 li
820.575 410.197 li
820.575 412.297 li
815.025 412.297 li
815.025 421.207 li
815.025 422.557 815.205 423.427 815.565 423.787 cv
815.925 424.177 816.675 424.357 817.815 424.357 cv
820.575 424.357 li
820.575 426.607 li
817.815 426.607 li
815.715 426.607 814.275 426.217 813.495 425.437 cv
812.715 424.657 812.325 423.247 812.325 421.207 cv
812.325 412.297 li
810.345 412.297 li
810.345 410.197 li
812.325 410.197 li
812.325 405.547 li
815.025 405.547 li
f
824.115 410.197 mo
826.815 410.197 li
826.815 426.607 li
824.115 426.607 li
824.115 410.197 li
824.115 403.807 mo
826.815 403.807 li
826.815 407.227 li
824.115 407.227 li
824.115 403.807 li
f
838.815 412.087 mo
837.375 412.087 836.235 412.657 835.395 413.797 cv
834.555 414.937 834.135 416.467 834.135 418.417 cv
834.135 420.397 834.525 421.927 835.365 423.067 cv
836.205 424.207 837.345 424.747 838.815 424.747 cv
840.255 424.747 841.395 424.207 842.235 423.067 cv
843.075 421.927 843.495 420.397 843.495 418.417 cv
843.495 416.497 843.075 414.937 842.235 413.797 cv
841.395 412.657 840.255 412.087 838.815 412.087 cv
838.815 409.807 mo
841.155 409.807 842.985 410.587 844.335 412.087 cv
845.655 413.617 846.345 415.717 846.345 418.417 cv
846.345 421.117 845.655 423.217 844.335 424.717 cv
842.985 426.247 841.155 426.997 838.815 426.997 cv
836.445 426.997 834.585 426.247 833.265 424.717 cv
831.945 423.217 831.285 421.117 831.285 418.417 cv
831.285 415.717 831.945 413.617 833.265 412.087 cv
834.585 410.587 836.445 409.807 838.815 409.807 cv
f
864.465 416.707 mo
864.465 426.607 li
861.765 426.607 li
861.765 416.797 li
861.765 415.237 861.435 414.097 860.835 413.317 cv
860.235 412.537 859.335 412.147 858.135 412.147 cv
856.665 412.147 855.525 412.627 854.685 413.557 cv
853.845 414.487 853.425 415.747 853.425 417.337 cv
853.425 426.607 li
850.725 426.607 li
850.725 410.197 li
853.425 410.197 li
853.425 412.747 li
854.055 411.787 854.805 411.037 855.705 410.557 cv
856.575 410.077 857.595 409.807 858.735 409.807 cv
860.595 409.807 862.035 410.407 862.995 411.577 cv
863.955 412.747 864.465 414.457 864.465 416.707 cv
f
885.855 403.837 mo
884.535 406.117 883.575 408.337 882.945 410.527 cv
882.285 412.717 881.985 414.937 881.985 417.187 cv
881.985 419.467 882.285 421.687 882.945 423.877 cv
883.575 426.097 884.535 428.287 885.855 430.537 cv
883.515 430.537 li
882.045 428.227 880.935 426.007 880.215 423.787 cv
879.495 421.567 879.135 419.377 879.135 417.187 cv
879.135 415.027 879.495 412.837 880.215 410.617 cv
880.935 408.397 882.015 406.147 883.515 403.837 cv
885.855 403.837 li
f
888.195 404.737 mo
906.675 404.737 li
906.675 407.227 li
898.905 407.227 li
898.905 426.607 li
895.935 426.607 li
895.935 407.227 li
888.195 407.227 li
888.195 404.737 li
f
918.914 412.717 mo
918.614 412.537 918.284 412.417 917.924 412.327 cv
917.564 412.267 917.174 412.207 916.754 412.207 cv
915.224 412.207 914.054 412.717 913.244 413.707 cv
912.404 414.697 912.014 416.107 912.014 417.967 cv
912.014 426.607 li
909.314 426.607 li
909.314 410.197 li
912.014 410.197 li
912.014 412.747 li
912.554 411.757 913.304 411.007 914.204 410.527 cv
915.104 410.047 916.214 409.807 917.534 409.807 cv
917.714 409.807 917.924 409.837 918.164 409.837 cv
918.374 409.867 918.614 409.897 918.914 409.957 cv
918.914 412.717 li
f
929.204 418.357 mo
927.014 418.357 925.514 418.627 924.674 419.107 cv
923.834 419.617 923.414 420.457 923.414 421.657 cv
923.414 422.617 923.714 423.397 924.344 423.937 cv
924.974 424.507 925.844 424.777 926.924 424.777 cv
928.424 424.777 929.624 424.267 930.524 423.187 cv
931.424 422.137 931.874 420.727 931.874 418.957 cv
931.874 418.357 li
929.204 418.357 li
934.574 417.247 mo
934.574 426.607 li
931.874 426.607 li
931.874 424.117 li
931.244 425.137 930.464 425.857 929.564 426.307 cv
928.664 426.757 927.524 426.997 926.204 426.997 cv
924.524 426.997 923.174 426.547 922.184 425.617 cv
921.194 424.687 920.714 423.427 920.714 421.837 cv
920.714 420.007 921.314 418.627 922.574 417.667 cv
923.804 416.737 925.634 416.257 928.094 416.257 cv
931.874 416.257 li
931.874 415.987 li
931.874 414.757 931.454 413.797 930.644 413.107 cv
929.834 412.447 928.694 412.087 927.224 412.087 cv
926.264 412.087 925.364 412.207 924.464 412.447 cv
923.564 412.687 922.724 413.017 921.914 413.437 cv
921.914 410.947 li
922.874 410.587 923.834 410.287 924.764 410.107 cv
925.694 409.927 926.594 409.807 927.494 409.807 cv
929.864 409.807 931.634 410.437 932.804 411.667 cv
933.974 412.897 934.574 414.757 934.574 417.247 cv
f
940.124 410.197 mo
942.824 410.197 li
942.824 426.607 li
940.124 426.607 li
940.124 410.197 li
940.124 403.807 mo
942.824 403.807 li
942.824 407.227 li
940.124 407.227 li
940.124 403.807 li
f
962.114 416.707 mo
962.114 426.607 li
959.414 426.607 li
959.414 416.797 li
959.414 415.237 959.084 414.097 958.484 413.317 cv
957.884 412.537 956.984 412.147 955.784 412.147 cv
954.314 412.147 953.174 412.627 952.334 413.557 cv
951.494 414.487 951.074 415.747 951.074 417.337 cv
951.074 426.607 li
948.374 426.607 li
948.374 410.197 li
951.074 410.197 li
951.074 412.747 li
951.704 411.787 952.454 411.037 953.354 410.557 cv
954.224 410.077 955.244 409.807 956.384 409.807 cv
958.244 409.807 959.684 410.407 960.644 411.577 cv
961.604 412.747 962.114 414.457 962.114 416.707 cv
f
967.484 410.197 mo
970.185 410.197 li
970.185 426.607 li
967.484 426.607 li
967.484 410.197 li
967.484 403.807 mo
970.185 403.807 li
970.185 407.227 li
967.484 407.227 li
967.484 403.807 li
f
989.474 416.707 mo
989.474 426.607 li
986.775 426.607 li
986.775 416.797 li
986.775 415.237 986.444 414.097 985.844 413.317 cv
985.245 412.537 984.344 412.147 983.145 412.147 cv
981.675 412.147 980.535 412.627 979.694 413.557 cv
978.854 414.487 978.435 415.747 978.435 417.337 cv
978.435 426.607 li
975.734 426.607 li
975.734 410.197 li
978.435 410.197 li
978.435 412.747 li
979.065 411.787 979.815 411.037 980.714 410.557 cv
981.584 410.077 982.604 409.807 983.745 409.807 cv
985.604 409.807 987.045 410.407 988.005 411.577 cv
988.964 412.747 989.474 414.457 989.474 416.707 cv
f
1005.64 418.207 mo
1005.64 416.287 1005.22 414.757 1004.44 413.677 cv
1003.63 412.597 1002.49 412.057 1001.05 412.057 cv
999.615 412.057 998.474 412.597 997.665 413.677 cv
996.854 414.757 996.464 416.287 996.464 418.207 cv
996.464 420.157 996.854 421.657 997.665 422.737 cv
998.474 423.817 999.615 424.357 1001.05 424.357 cv
1002.49 424.357 1003.63 423.817 1004.44 422.737 cv
1005.22 421.657 1005.64 420.157 1005.64 418.207 cv
1008.34 424.567 mo
1008.34 427.327 1007.71 429.397 1006.48 430.777 cv
1005.22 432.127 1003.33 432.817 1000.78 432.817 cv
999.825 432.817 998.955 432.727 998.115 432.607 cv
997.275 432.457 996.435 432.247 995.655 431.947 cv
995.655 429.337 li
996.435 429.757 997.214 430.057 997.995 430.267 cv
998.775 430.477 999.555 430.597 1000.36 430.597 cv
1002.1 430.597 1003.42 430.117 1004.32 429.217 cv
1005.19 428.287 1005.64 426.907 1005.64 425.047 cv
1005.64 423.727 li
1005.07 424.687 1004.35 425.407 1003.48 425.887 cv
1002.61 426.367 1001.59 426.607 1000.39 426.607 cv
998.354 426.607 996.734 425.857 995.505 424.327 cv
994.275 422.797 993.675 420.757 993.675 418.207 cv
993.675 415.687 994.275 413.647 995.505 412.117 cv
996.734 410.587 998.354 409.807 1000.39 409.807 cv
1001.59 409.807 1002.61 410.047 1003.48 410.527 cv
1004.35 411.007 1005.07 411.727 1005.64 412.687 cv
1005.64 410.197 li
1008.34 410.197 li
1008.34 424.567 li
f
1014.58 422.887 mo
1017.67 422.887 li
1017.67 425.407 li
1015.27 430.057 li
1013.38 430.057 li
1014.58 425.407 li
1014.58 422.887 li
f
1046.2 405.457 mo
1046.2 408.337 li
1045.06 407.797 1044.01 407.407 1043.02 407.137 cv
1042 406.897 1041.04 406.747 1040.14 406.747 cv
1038.52 406.747 1037.26 407.077 1036.39 407.677 cv
1035.52 408.307 1035.1 409.207 1035.1 410.347 cv
1035.1 411.307 1035.37 412.057 1035.97 412.537 cv
1036.54 413.047 1037.65 413.437 1039.27 413.737 cv
1041.07 414.097 li
1043.26 414.517 1044.88 415.267 1045.93 416.317 cv
1046.98 417.397 1047.52 418.807 1047.52 420.577 cv
1047.52 422.707 1046.8 424.297 1045.39 425.377 cv
1043.95 426.457 1041.88 426.997 1039.15 426.997 cv
1038.1 426.997 1036.99 426.877 1035.82 426.667 cv
1034.65 426.457 1033.45 426.127 1032.22 425.647 cv
1032.22 422.587 li
1033.42 423.277 1034.59 423.787 1035.73 424.117 cv
1036.87 424.477 1038.01 424.627 1039.15 424.627 cv
1040.83 424.627 1042.12 424.297 1043.05 423.637 cv
1043.95 422.977 1044.43 422.047 1044.43 420.787 cv
1044.43 419.707 1044.1 418.867 1043.44 418.267 cv
1042.78 417.667 1041.7 417.217 1040.2 416.917 cv
1038.4 416.557 li
1036.18 416.137 1034.59 415.447 1033.6 414.487 cv
1032.61 413.557 1032.13 412.267 1032.13 410.587 cv
1032.13 408.667 1032.79 407.137 1034.17 406.027 cv
1035.52 404.917 1037.41 404.347 1039.81 404.347 cv
1040.83 404.347 1041.85 404.437 1042.93 404.617 cv
1043.98 404.797 1045.06 405.097 1046.2 405.457 cv
f
1052.02 410.197 mo
1054.72 410.197 li
1054.72 426.607 li
1052.02 426.607 li
1052.02 410.197 li
1052.02 403.807 mo
1054.72 403.807 li
1054.72 407.227 li
1052.02 407.227 li
1052.02 403.807 li
f
1071.16 418.207 mo
1071.16 416.287 1070.74 414.757 1069.96 413.677 cv
1069.15 412.597 1068.01 412.057 1066.57 412.057 cv
1065.13 412.057 1063.99 412.597 1063.18 413.677 cv
1062.37 414.757 1061.98 416.287 1061.98 418.207 cv
1061.98 420.157 1062.37 421.657 1063.18 422.737 cv
1063.99 423.817 1065.13 424.357 1066.57 424.357 cv
1068.01 424.357 1069.15 423.817 1069.96 422.737 cv
1070.74 421.657 1071.16 420.157 1071.16 418.207 cv
1073.86 424.567 mo
1073.86 427.327 1073.23 429.397 1072 430.777 cv
1070.74 432.127 1068.85 432.817 1066.3 432.817 cv
1065.34 432.817 1064.47 432.727 1063.63 432.607 cv
1062.79 432.457 1061.95 432.247 1061.17 431.947 cv
1061.17 429.337 li
1061.95 429.757 1062.73 430.057 1063.51 430.267 cv
1064.29 430.477 1065.07 430.597 1065.88 430.597 cv
1067.62 430.597 1068.94 430.117 1069.84 429.217 cv
1070.71 428.287 1071.16 426.907 1071.16 425.047 cv
1071.16 423.727 li
1070.59 424.687 1069.87 425.407 1069 425.887 cv
1068.13 426.367 1067.11 426.607 1065.91 426.607 cv
1063.87 426.607 1062.25 425.857 1061.02 424.327 cv
1059.79 422.797 1059.19 420.757 1059.19 418.207 cv
1059.19 415.687 1059.79 413.647 1061.02 412.117 cv
1062.25 410.587 1063.87 409.807 1065.91 409.807 cv
1067.11 409.807 1068.13 410.047 1069 410.527 cv
1069.87 411.007 1070.59 411.727 1071.16 412.687 cv
1071.16 410.197 li
1073.86 410.197 li
1073.86 424.567 li
f
1092.19 413.347 mo
1092.85 412.147 1093.66 411.277 1094.59 410.677 cv
1095.52 410.107 1096.63 409.807 1097.92 409.807 cv
1099.6 409.807 1100.92 410.407 1101.85 411.607 cv
1102.78 412.807 1103.26 414.517 1103.26 416.707 cv
1103.26 426.607 li
1100.56 426.607 li
1100.56 416.797 li
1100.56 415.237 1100.26 414.067 1099.72 413.287 cv
1099.15 412.537 1098.31 412.147 1097.17 412.147 cv
1095.76 412.147 1094.65 412.627 1093.84 413.557 cv
1093.03 414.487 1092.64 415.747 1092.64 417.337 cv
1092.64 426.607 li
1089.94 426.607 li
1089.94 416.797 li
1089.94 415.237 1089.64 414.067 1089.1 413.287 cv
1088.53 412.537 1087.66 412.147 1086.52 412.147 cv
1085.14 412.147 1084.03 412.627 1083.22 413.557 cv
1082.41 414.487 1082.02 415.747 1082.02 417.337 cv
1082.02 426.607 li
1079.32 426.607 li
1079.32 410.197 li
1082.02 410.197 li
1082.02 412.747 li
1082.62 411.757 1083.37 411.007 1084.24 410.527 cv
1085.08 410.047 1086.1 409.807 1087.3 409.807 cv
1088.5 409.807 1089.49 410.107 1090.33 410.707 cv
1091.17 411.307 1091.77 412.207 1092.19 413.347 cv
f
1114.99 412.087 mo
1113.55 412.087 1112.41 412.657 1111.57 413.797 cv
1110.73 414.937 1110.31 416.467 1110.31 418.417 cv
1110.31 420.397 1110.7 421.927 1111.54 423.067 cv
1112.38 424.207 1113.52 424.747 1114.99 424.747 cv
1116.43 424.747 1117.57 424.207 1118.41 423.067 cv
1119.25 421.927 1119.67 420.397 1119.67 418.417 cv
1119.67 416.497 1119.25 414.937 1118.41 413.797 cv
1117.57 412.657 1116.43 412.087 1114.99 412.087 cv
1114.99 409.807 mo
1117.33 409.807 1119.16 410.587 1120.51 412.087 cv
1121.83 413.617 1122.52 415.717 1122.52 418.417 cv
1122.52 421.117 1121.83 423.217 1120.51 424.717 cv
1119.16 426.247 1117.33 426.997 1114.99 426.997 cv
1112.62 426.997 1110.76 426.247 1109.44 424.717 cv
1108.12 423.217 1107.46 421.117 1107.46 418.417 cv
1107.46 415.717 1108.12 413.617 1109.44 412.087 cv
1110.76 410.587 1112.62 409.807 1114.99 409.807 cv
f
1126.99 410.197 mo
1129.69 410.197 li
1129.69 426.607 li
1126.99 426.607 li
1126.99 410.197 li
1126.99 403.807 mo
1129.69 403.807 li
1129.69 407.227 li
1126.99 407.227 li
1126.99 403.807 li
f
1146.13 412.687 mo
1146.13 403.807 li
1148.83 403.807 li
1148.83 426.607 li
1146.13 426.607 li
1146.13 424.147 li
1145.56 425.137 1144.84 425.857 1143.97 426.307 cv
1143.1 426.757 1142.08 426.997 1140.88 426.997 cv
1138.9 426.997 1137.28 426.217 1136.02 424.657 cv
1134.76 423.097 1134.16 420.997 1134.16 418.417 cv
1134.16 415.837 1134.76 413.767 1136.02 412.177 cv
1137.28 410.617 1138.9 409.807 1140.88 409.807 cv
1142.08 409.807 1143.1 410.047 1143.97 410.527 cv
1144.84 411.007 1145.56 411.727 1146.13 412.687 cv
1136.95 418.417 mo
1136.95 420.397 1137.34 421.957 1138.15 423.097 cv
1138.96 424.237 1140.1 424.777 1141.54 424.777 cv
1142.95 424.777 1144.06 424.237 1144.9 423.097 cv
1145.71 421.957 1146.13 420.397 1146.13 418.417 cv
1146.13 416.437 1145.71 414.907 1144.9 413.767 cv
1144.06 412.627 1142.95 412.057 1141.54 412.057 cv
1140.1 412.057 1138.96 412.627 1138.15 413.767 cv
1137.34 414.907 1136.95 416.437 1136.95 418.417 cv
f
1153.96 403.837 mo
1156.3 403.837 li
1157.74 406.147 1158.85 408.397 1159.57 410.617 cv
1160.29 412.837 1160.68 415.027 1160.68 417.187 cv
1160.68 419.377 1160.29 421.567 1159.57 423.787 cv
1158.85 426.007 1157.74 428.227 1156.3 430.537 cv
1153.96 430.537 li
1155.25 428.287 1156.21 426.097 1156.87 423.877 cv
1157.5 421.687 1157.83 419.467 1157.83 417.187 cv
1157.83 414.937 1157.5 412.717 1156.87 410.527 cv
1156.21 408.337 1155.25 406.117 1153.96 403.837 cv
f
574.535 457.138 mo
594.535 457.138 li
0 1 1 0 cmyk
@
581.535 460.138 mo
587.535 454.138 li
581.535 454.138 mo
587.535 460.138 li
f
1 lw
0 lc
581.535 460.138 mo
587.535 454.138 li
581.535 454.138 mo
587.535 460.138 li
@
608.445 450.198 mo
608.445 458.208 li
613.185 458.208 li
614.775 458.208 615.945 457.878 616.725 457.218 cv
617.475 456.558 617.865 455.568 617.865 454.188 cv
617.865 452.838 617.475 451.848 616.725 451.188 cv
615.945 450.528 614.775 450.198 613.185 450.198 cv
608.445 450.198 li
608.445 441.198 mo
608.445 447.798 li
612.825 447.798 li
614.265 447.798 615.315 447.528 616.035 446.988 cv
616.755 446.448 617.115 445.638 617.115 444.498 cv
617.115 443.418 616.755 442.578 616.035 442.038 cv
615.315 441.498 614.265 441.198 612.825 441.198 cv
608.445 441.198 li
605.475 438.768 mo
613.035 438.768 li
615.285 438.768 617.025 439.248 618.255 440.178 cv
619.455 441.138 620.085 442.458 620.085 444.168 cv
620.085 445.518 619.755 446.598 619.125 447.378 cv
618.495 448.158 617.595 448.668 616.395 448.848 cv
617.835 449.178 618.975 449.838 619.785 450.828 cv
620.565 451.818 620.985 453.048 620.985 454.518 cv
620.985 456.498 620.295 457.998 618.975 459.048 cv
617.655 460.128 615.765 460.638 613.335 460.638 cv
605.475 460.638 li
605.475 438.768 li
1 /0 /CSD get_res sepcs
1 sep
f
633.405 452.388 mo
631.215 452.388 629.715 452.658 628.875 453.138 cv
628.035 453.648 627.615 454.488 627.615 455.688 cv
627.615 456.648 627.915 457.428 628.545 457.968 cv
629.175 458.538 630.045 458.808 631.125 458.808 cv
632.625 458.808 633.825 458.298 634.725 457.218 cv
635.625 456.168 636.075 454.758 636.075 452.988 cv
636.075 452.388 li
633.405 452.388 li
638.775 451.278 mo
638.775 460.638 li
636.075 460.638 li
636.075 458.148 li
635.445 459.168 634.665 459.888 633.765 460.338 cv
632.865 460.788 631.725 461.028 630.405 461.028 cv
628.725 461.028 627.375 460.578 626.385 459.648 cv
625.395 458.718 624.915 457.458 624.915 455.868 cv
624.915 454.038 625.515 452.658 626.775 451.698 cv
628.005 450.768 629.835 450.288 632.295 450.288 cv
636.075 450.288 li
636.075 450.018 li
636.075 448.788 635.655 447.828 634.845 447.138 cv
634.035 446.478 632.895 446.118 631.425 446.118 cv
630.465 446.118 629.565 446.238 628.665 446.478 cv
627.765 446.718 626.925 447.048 626.115 447.468 cv
626.115 444.978 li
627.075 444.618 628.035 444.318 628.965 444.138 cv
629.895 443.958 630.795 443.838 631.695 443.838 cv
634.065 443.838 635.835 444.468 637.005 445.698 cv
638.175 446.928 638.775 448.788 638.775 451.278 cv
f
656.145 444.858 mo
656.145 447.378 li
655.365 446.958 654.615 446.658 653.835 446.448 cv
653.055 446.238 652.305 446.118 651.525 446.118 cv
649.785 446.118 648.405 446.688 647.445 447.798 cv
646.485 448.908 646.005 450.468 646.005 452.448 cv
646.005 454.458 646.485 456.018 647.445 457.128 cv
648.405 458.238 649.785 458.778 651.525 458.778 cv
652.305 458.778 653.055 458.688 653.835 458.478 cv
654.615 458.268 655.365 457.938 656.145 457.518 cv
656.145 460.008 li
655.365 460.368 654.585 460.638 653.805 460.788 cv
652.995 460.938 652.125 461.028 651.225 461.028 cv
648.765 461.028 646.785 460.278 645.345 458.718 cv
643.875 457.188 643.155 455.088 643.155 452.448 cv
643.155 449.778 643.875 447.678 645.345 446.148 cv
646.815 444.618 648.825 443.838 651.405 443.838 cv
652.245 443.838 653.055 443.928 653.835 444.108 cv
654.615 444.288 655.395 444.528 656.145 444.858 cv
f
660.735 437.838 mo
663.435 437.838 li
663.435 451.308 li
671.475 444.228 li
674.925 444.228 li
666.225 451.908 li
675.285 460.638 li
671.775 460.638 li
663.435 452.628 li
663.435 460.638 li
660.735 460.638 li
660.735 437.838 li
f
690.345 458.178 mo
690.345 466.848 li
687.645 466.848 li
687.645 444.228 li
690.345 444.228 li
690.345 446.718 li
690.885 445.758 691.605 445.038 692.475 444.558 cv
693.345 444.078 694.395 443.838 695.595 443.838 cv
697.575 443.838 699.195 444.648 700.455 446.208 cv
701.685 447.798 702.315 449.868 702.315 452.448 cv
702.315 455.028 701.685 457.128 700.455 458.688 cv
699.195 460.248 697.575 461.028 695.595 461.028 cv
694.395 461.028 693.345 460.788 692.475 460.338 cv
691.605 459.888 690.885 459.168 690.345 458.178 cv
699.525 452.448 mo
699.525 450.468 699.105 448.938 698.295 447.798 cv
697.455 446.658 696.345 446.088 694.935 446.088 cv
693.495 446.088 692.385 446.658 691.575 447.798 cv
690.735 448.938 690.345 450.468 690.345 452.448 cv
690.345 454.428 690.735 455.988 691.575 457.128 cv
692.385 458.268 693.495 458.808 694.935 458.808 cv
696.345 458.808 697.455 458.268 698.295 457.128 cv
699.105 455.988 699.525 454.428 699.525 452.448 cv
f
716.295 446.748 mo
715.995 446.568 715.665 446.448 715.305 446.358 cv
714.945 446.298 714.555 446.238 714.135 446.238 cv
712.605 446.238 711.435 446.748 710.625 447.738 cv
709.785 448.728 709.395 450.138 709.395 451.998 cv
709.395 460.638 li
706.695 460.638 li
706.695 444.228 li
709.395 444.228 li
709.395 446.778 li
709.935 445.788 710.685 445.038 711.585 444.558 cv
712.485 444.078 713.595 443.838 714.915 443.838 cv
715.095 443.838 715.305 443.868 715.545 443.868 cv
715.755 443.898 715.995 443.928 716.295 443.988 cv
716.295 446.748 li
f
725.475 446.118 mo
724.035 446.118 722.895 446.688 722.055 447.828 cv
721.215 448.968 720.795 450.498 720.795 452.448 cv
720.795 454.428 721.185 455.958 722.025 457.098 cv
722.865 458.238 724.005 458.778 725.475 458.778 cv
726.915 458.778 728.055 458.238 728.895 457.098 cv
729.735 455.958 730.155 454.428 730.155 452.448 cv
730.155 450.528 729.735 448.968 728.895 447.828 cv
728.055 446.688 726.915 446.118 725.475 446.118 cv
725.475 443.838 mo
727.815 443.838 729.645 444.618 730.995 446.118 cv
732.315 447.648 733.005 449.748 733.005 452.448 cv
733.005 455.148 732.315 457.248 730.995 458.748 cv
729.645 460.278 727.815 461.028 725.475 461.028 cv
723.105 461.028 721.245 460.278 719.925 458.748 cv
718.605 457.248 717.945 455.148 717.945 452.448 cv
717.945 449.748 718.605 447.648 719.925 446.118 cv
721.245 444.618 723.105 443.838 725.475 443.838 cv
f
740.085 458.178 mo
740.085 466.848 li
737.385 466.848 li
737.385 444.228 li
740.085 444.228 li
740.085 446.718 li
740.625 445.758 741.345 445.038 742.215 444.558 cv
743.085 444.078 744.135 443.838 745.335 443.838 cv
747.315 443.838 748.935 444.648 750.195 446.208 cv
751.425 447.798 752.055 449.868 752.055 452.448 cv
752.055 455.028 751.425 457.128 750.195 458.688 cv
748.935 460.248 747.315 461.028 745.335 461.028 cv
744.135 461.028 743.085 460.788 742.215 460.338 cv
741.345 459.888 740.625 459.168 740.085 458.178 cv
749.265 452.448 mo
749.265 450.468 748.845 448.938 748.035 447.798 cv
747.195 446.658 746.085 446.088 744.675 446.088 cv
743.235 446.088 742.125 446.658 741.315 447.798 cv
740.475 448.938 740.085 450.468 740.085 452.448 cv
740.085 454.428 740.475 455.988 741.315 457.128 cv
742.125 458.268 743.235 458.808 744.675 458.808 cv
746.085 458.808 747.195 458.268 748.035 457.128 cv
748.845 455.988 749.265 454.428 749.265 452.448 cv
f
763.995 452.388 mo
761.805 452.388 760.305 452.658 759.465 453.138 cv
758.625 453.648 758.205 454.488 758.205 455.688 cv
758.205 456.648 758.505 457.428 759.135 457.968 cv
759.765 458.538 760.635 458.808 761.715 458.808 cv
763.215 458.808 764.415 458.298 765.315 457.218 cv
766.215 456.168 766.665 454.758 766.665 452.988 cv
766.665 452.388 li
763.995 452.388 li
769.365 451.278 mo
769.365 460.638 li
766.665 460.638 li
766.665 458.148 li
766.035 459.168 765.255 459.888 764.355 460.338 cv
763.455 460.788 762.315 461.028 760.995 461.028 cv
759.315 461.028 757.965 460.578 756.975 459.648 cv
755.985 458.718 755.505 457.458 755.505 455.868 cv
755.505 454.038 756.105 452.658 757.365 451.698 cv
758.595 450.768 760.425 450.288 762.885 450.288 cv
766.665 450.288 li
766.665 450.018 li
766.665 448.788 766.245 447.828 765.435 447.138 cv
764.625 446.478 763.485 446.118 762.015 446.118 cv
761.055 446.118 760.155 446.238 759.255 446.478 cv
758.355 446.718 757.515 447.048 756.705 447.468 cv
756.705 444.978 li
757.665 444.618 758.625 444.318 759.555 444.138 cv
760.485 443.958 761.385 443.838 762.285 443.838 cv
764.655 443.838 766.425 444.468 767.595 445.698 cv
768.765 446.928 769.365 448.788 769.365 451.278 cv
f
785.715 452.238 mo
785.715 450.318 785.295 448.788 784.515 447.708 cv
783.705 446.628 782.565 446.088 781.125 446.088 cv
779.685 446.088 778.545 446.628 777.735 447.708 cv
776.925 448.788 776.535 450.318 776.535 452.238 cv
776.535 454.188 776.925 455.688 777.735 456.768 cv
778.545 457.848 779.685 458.388 781.125 458.388 cv
782.565 458.388 783.705 457.848 784.515 456.768 cv
785.295 455.688 785.715 454.188 785.715 452.238 cv
788.415 458.598 mo
788.415 461.358 787.785 463.428 786.555 464.808 cv
785.295 466.158 783.405 466.848 780.855 466.848 cv
779.895 466.848 779.025 466.758 778.185 466.638 cv
777.345 466.488 776.505 466.278 775.725 465.978 cv
775.725 463.368 li
776.505 463.788 777.285 464.088 778.065 464.298 cv
778.845 464.508 779.625 464.628 780.435 464.628 cv
782.175 464.628 783.495 464.148 784.395 463.248 cv
785.265 462.318 785.715 460.938 785.715 459.078 cv
785.715 457.758 li
785.145 458.718 784.425 459.438 783.555 459.918 cv
782.685 460.398 781.665 460.638 780.465 460.638 cv
778.425 460.638 776.805 459.888 775.575 458.358 cv
774.345 456.828 773.745 454.788 773.745 452.238 cv
773.745 449.718 774.345 447.678 775.575 446.148 cv
776.805 444.618 778.425 443.838 780.465 443.838 cv
781.665 443.838 782.685 444.078 783.555 444.558 cv
784.425 445.038 785.145 445.758 785.715 446.718 cv
785.715 444.228 li
788.415 444.228 li
788.415 458.598 li
f
801.435 452.388 mo
799.245 452.388 797.745 452.658 796.905 453.138 cv
796.065 453.648 795.645 454.488 795.645 455.688 cv
795.645 456.648 795.945 457.428 796.575 457.968 cv
797.205 458.538 798.075 458.808 799.155 458.808 cv
800.655 458.808 801.855 458.298 802.755 457.218 cv
803.655 456.168 804.105 454.758 804.105 452.988 cv
804.105 452.388 li
801.435 452.388 li
806.805 451.278 mo
806.805 460.638 li
804.105 460.638 li
804.105 458.148 li
803.475 459.168 802.695 459.888 801.795 460.338 cv
800.895 460.788 799.755 461.028 798.435 461.028 cv
796.755 461.028 795.405 460.578 794.415 459.648 cv
793.425 458.718 792.945 457.458 792.945 455.868 cv
792.945 454.038 793.545 452.658 794.805 451.698 cv
796.035 450.768 797.865 450.288 800.325 450.288 cv
804.105 450.288 li
804.105 450.018 li
804.105 448.788 803.685 447.828 802.875 447.138 cv
802.065 446.478 800.925 446.118 799.455 446.118 cv
798.495 446.118 797.595 446.238 796.695 446.478 cv
795.795 446.718 794.955 447.048 794.145 447.468 cv
794.145 444.978 li
795.105 444.618 796.065 444.318 796.995 444.138 cv
797.925 443.958 798.825 443.838 799.725 443.838 cv
802.095 443.838 803.865 444.468 805.035 445.698 cv
806.205 446.928 806.805 448.788 806.805 451.278 cv
f
815.025 439.578 mo
815.025 444.228 li
820.575 444.228 li
820.575 446.328 li
815.025 446.328 li
815.025 455.238 li
815.025 456.588 815.205 457.458 815.565 457.818 cv
815.925 458.208 816.675 458.388 817.815 458.388 cv
820.575 458.388 li
820.575 460.638 li
817.815 460.638 li
815.715 460.638 814.275 460.248 813.495 459.468 cv
812.715 458.688 812.325 457.278 812.325 455.238 cv
812.325 446.328 li
810.345 446.328 li
810.345 444.228 li
812.325 444.228 li
812.325 439.578 li
815.025 439.578 li
f
824.115 444.228 mo
826.815 444.228 li
826.815 460.638 li
824.115 460.638 li
824.115 444.228 li
824.115 437.838 mo
826.815 437.838 li
826.815 441.258 li
824.115 441.258 li
824.115 437.838 li
f
838.815 446.118 mo
837.375 446.118 836.235 446.688 835.395 447.828 cv
834.555 448.968 834.135 450.498 834.135 452.448 cv
834.135 454.428 834.525 455.958 835.365 457.098 cv
836.205 458.238 837.345 458.778 838.815 458.778 cv
840.255 458.778 841.395 458.238 842.235 457.098 cv
843.075 455.958 843.495 454.428 843.495 452.448 cv
843.495 450.528 843.075 448.968 842.235 447.828 cv
841.395 446.688 840.255 446.118 838.815 446.118 cv
838.815 443.838 mo
841.155 443.838 842.985 444.618 844.335 446.118 cv
845.655 447.648 846.345 449.748 846.345 452.448 cv
846.345 455.148 845.655 457.248 844.335 458.748 cv
842.985 460.278 841.155 461.028 838.815 461.028 cv
836.445 461.028 834.585 460.278 833.265 458.748 cv
831.945 457.248 831.285 455.148 831.285 452.448 cv
831.285 449.748 831.945 447.648 833.265 446.118 cv
834.585 444.618 836.445 443.838 838.815 443.838 cv
f
864.465 450.738 mo
864.465 460.638 li
861.765 460.638 li
861.765 450.828 li
861.765 449.268 861.435 448.128 860.835 447.348 cv
860.235 446.568 859.335 446.178 858.135 446.178 cv
856.665 446.178 855.525 446.658 854.685 447.588 cv
853.845 448.518 853.425 449.778 853.425 451.368 cv
853.425 460.638 li
850.725 460.638 li
850.725 444.228 li
853.425 444.228 li
853.425 446.778 li
854.055 445.818 854.805 445.068 855.705 444.588 cv
856.575 444.108 857.595 443.838 858.735 443.838 cv
860.595 443.838 862.035 444.438 862.995 445.608 cv
863.955 446.778 864.465 448.488 864.465 450.738 cv
f
885.855 437.868 mo
884.535 440.148 883.575 442.368 882.945 444.558 cv
882.285 446.748 881.985 448.968 881.985 451.218 cv
881.985 453.498 882.285 455.718 882.945 457.908 cv
883.575 460.128 884.535 462.318 885.855 464.568 cv
883.515 464.568 li
882.045 462.258 880.935 460.038 880.215 457.818 cv
879.495 455.598 879.135 453.408 879.135 451.218 cv
879.135 449.058 879.495 446.868 880.215 444.648 cv
880.935 442.428 882.015 440.178 883.515 437.868 cv
885.855 437.868 li
f
888.195 438.768 mo
906.675 438.768 li
906.675 441.258 li
898.905 441.258 li
898.905 460.638 li
895.935 460.638 li
895.935 441.258 li
888.195 441.258 li
888.195 438.768 li
f
923.444 451.758 mo
923.444 453.078 li
911.054 453.078 li
911.174 454.938 911.714 456.378 912.734 457.338 cv
913.724 458.298 915.104 458.778 916.904 458.778 cv
917.924 458.778 918.944 458.658 919.904 458.418 cv
920.864 458.178 921.854 457.788 922.814 457.248 cv
922.814 459.798 li
921.854 460.218 920.864 460.548 919.844 460.728 cv
918.824 460.908 917.774 461.028 916.754 461.028 cv
914.114 461.028 912.044 460.278 910.514 458.778 cv
908.984 457.278 908.234 455.208 908.234 452.598 cv
908.234 449.928 908.954 447.798 910.394 446.208 cv
911.834 444.648 913.814 443.838 916.274 443.838 cv
918.494 443.838 920.234 444.558 921.524 445.968 cv
922.784 447.408 923.444 449.328 923.444 451.758 cv
920.744 450.978 mo
920.714 449.508 920.294 448.338 919.514 447.438 cv
918.704 446.568 917.624 446.118 916.304 446.118 cv
914.804 446.118 913.604 446.568 912.704 447.408 cv
911.804 448.248 911.264 449.448 911.144 450.978 cv
920.744 450.978 li
f
938.325 444.708 mo
938.325 447.258 li
937.545 446.898 936.765 446.598 935.955 446.388 cv
935.115 446.208 934.275 446.088 933.405 446.088 cv
932.055 446.088 931.035 446.298 930.375 446.718 cv
929.715 447.138 929.385 447.738 929.385 448.548 cv
929.385 449.178 929.625 449.658 930.105 450.018 cv
930.585 450.378 931.545 450.738 932.985 451.038 cv
933.915 451.248 li
935.835 451.668 937.185 452.268 937.995 452.988 cv
938.775 453.738 939.195 454.788 939.195 456.108 cv
939.195 457.638 938.595 458.838 937.395 459.708 cv
936.195 460.608 934.515 461.028 932.415 461.028 cv
931.515 461.028 930.615 460.938 929.655 460.788 cv
928.695 460.638 927.705 460.398 926.655 460.038 cv
926.655 457.248 li
927.645 457.788 928.635 458.178 929.595 458.418 cv
930.555 458.688 931.515 458.808 932.475 458.808 cv
933.735 458.808 934.725 458.598 935.415 458.178 cv
936.075 457.758 936.435 457.128 936.435 456.318 cv
936.435 455.598 936.165 455.028 935.685 454.638 cv
935.205 454.248 934.125 453.858 932.445 453.498 cv
931.515 453.288 li
929.835 452.928 928.605 452.388 927.885 451.668 cv
927.135 450.948 926.775 449.958 926.775 448.668 cv
926.775 447.138 927.315 445.938 928.395 445.098 cv
929.475 444.258 931.035 443.838 933.075 443.838 cv
934.065 443.838 934.995 443.928 935.895 444.078 cv
936.765 444.228 937.575 444.438 938.325 444.708 cv
f
946.154 439.578 mo
946.154 444.228 li
951.704 444.228 li
951.704 446.328 li
946.154 446.328 li
946.154 455.238 li
946.154 456.588 946.334 457.458 946.694 457.818 cv
947.054 458.208 947.804 458.388 948.944 458.388 cv
951.704 458.388 li
951.704 460.638 li
948.944 460.638 li
946.844 460.638 945.404 460.248 944.624 459.468 cv
943.844 458.688 943.454 457.278 943.454 455.238 cv
943.454 446.328 li
941.474 446.328 li
941.474 444.228 li
943.454 444.228 li
943.454 439.578 li
946.154 439.578 li
f
955.244 444.228 mo
957.944 444.228 li
957.944 460.638 li
955.244 460.638 li
955.244 444.228 li
955.244 437.838 mo
957.944 437.838 li
957.944 441.258 li
955.244 441.258 li
955.244 437.838 li
f
977.234 450.738 mo
977.234 460.638 li
974.534 460.638 li
974.534 450.828 li
974.534 449.268 974.204 448.128 973.604 447.348 cv
973.004 446.568 972.104 446.178 970.904 446.178 cv
969.434 446.178 968.294 446.658 967.454 447.588 cv
966.614 448.518 966.194 449.778 966.194 451.368 cv
966.194 460.638 li
963.494 460.638 li
963.494 444.228 li
966.194 444.228 li
966.194 446.778 li
966.824 445.818 967.574 445.068 968.474 444.588 cv
969.344 444.108 970.364 443.838 971.504 443.838 cv
973.364 443.838 974.804 444.438 975.764 445.608 cv
976.724 446.778 977.234 448.488 977.234 450.738 cv
f
993.404 452.238 mo
993.404 450.318 992.984 448.788 992.204 447.708 cv
991.394 446.628 990.254 446.088 988.814 446.088 cv
987.374 446.088 986.234 446.628 985.424 447.708 cv
984.614 448.788 984.224 450.318 984.224 452.238 cv
984.224 454.188 984.614 455.688 985.424 456.768 cv
986.234 457.848 987.374 458.388 988.814 458.388 cv
990.254 458.388 991.394 457.848 992.204 456.768 cv
992.984 455.688 993.404 454.188 993.404 452.238 cv
996.104 458.598 mo
996.104 461.358 995.474 463.428 994.244 464.808 cv
992.984 466.158 991.094 466.848 988.544 466.848 cv
987.584 466.848 986.714 466.758 985.874 466.638 cv
985.034 466.488 984.194 466.278 983.414 465.978 cv
983.414 463.368 li
984.194 463.788 984.974 464.088 985.754 464.298 cv
986.534 464.508 987.314 464.628 988.124 464.628 cv
989.864 464.628 991.184 464.148 992.084 463.248 cv
992.954 462.318 993.404 460.938 993.404 459.078 cv
993.404 457.758 li
992.834 458.718 992.114 459.438 991.244 459.918 cv
990.374 460.398 989.354 460.638 988.154 460.638 cv
986.114 460.638 984.494 459.888 983.264 458.358 cv
982.034 456.828 981.434 454.788 981.434 452.238 cv
981.434 449.718 982.034 447.678 983.264 446.148 cv
984.494 444.618 986.114 443.838 988.154 443.838 cv
989.354 443.838 990.374 444.078 991.244 444.558 cv
992.114 445.038 992.834 445.758 993.404 446.718 cv
993.404 444.228 li
996.104 444.228 li
996.104 458.598 li
f
1002.34 456.918 mo
1005.43 456.918 li
1005.43 459.438 li
1003.03 464.088 li
1001.14 464.088 li
1002.34 459.438 li
1002.34 456.918 li
f
1033.96 439.488 mo
1033.96 442.368 li
1032.82 441.828 1031.77 441.438 1030.78 441.168 cv
1029.76 440.928 1028.8 440.778 1027.9 440.778 cv
1026.28 440.778 1025.02 441.108 1024.15 441.708 cv
1023.28 442.338 1022.86 443.238 1022.86 444.378 cv
1022.86 445.338 1023.13 446.088 1023.73 446.568 cv
1024.3 447.078 1025.41 447.468 1027.03 447.768 cv
1028.83 448.128 li
1031.02 448.548 1032.64 449.298 1033.69 450.348 cv
1034.74 451.428 1035.28 452.838 1035.28 454.608 cv
1035.28 456.738 1034.56 458.328 1033.15 459.408 cv
1031.71 460.488 1029.64 461.028 1026.91 461.028 cv
1025.86 461.028 1024.75 460.908 1023.58 460.698 cv
1022.41 460.488 1021.21 460.158 1019.98 459.678 cv
1019.98 456.618 li
1021.18 457.308 1022.35 457.818 1023.49 458.148 cv
1024.63 458.508 1025.77 458.658 1026.91 458.658 cv
1028.59 458.658 1029.88 458.328 1030.81 457.668 cv
1031.71 457.008 1032.19 456.078 1032.19 454.818 cv
1032.19 453.738 1031.86 452.898 1031.2 452.298 cv
1030.54 451.698 1029.46 451.248 1027.96 450.948 cv
1026.16 450.588 li
1023.94 450.168 1022.35 449.478 1021.36 448.518 cv
1020.37 447.588 1019.89 446.298 1019.89 444.618 cv
1019.89 442.698 1020.55 441.168 1021.93 440.058 cv
1023.28 438.948 1025.17 438.378 1027.57 438.378 cv
1028.59 438.378 1029.61 438.468 1030.69 438.648 cv
1031.74 438.828 1032.82 439.128 1033.96 439.488 cv
f
1039.78 444.228 mo
1042.48 444.228 li
1042.48 460.638 li
1039.78 460.638 li
1039.78 444.228 li
1039.78 437.838 mo
1042.48 437.838 li
1042.48 441.258 li
1039.78 441.258 li
1039.78 437.838 li
f
1058.92 452.238 mo
1058.92 450.318 1058.5 448.788 1057.72 447.708 cv
1056.91 446.628 1055.77 446.088 1054.33 446.088 cv
1052.89 446.088 1051.75 446.628 1050.94 447.708 cv
1050.13 448.788 1049.74 450.318 1049.74 452.238 cv
1049.74 454.188 1050.13 455.688 1050.94 456.768 cv
1051.75 457.848 1052.89 458.388 1054.33 458.388 cv
1055.77 458.388 1056.91 457.848 1057.72 456.768 cv
1058.5 455.688 1058.92 454.188 1058.92 452.238 cv
1061.62 458.598 mo
1061.62 461.358 1060.99 463.428 1059.76 464.808 cv
1058.5 466.158 1056.61 466.848 1054.06 466.848 cv
1053.1 466.848 1052.23 466.758 1051.39 466.638 cv
1050.55 466.488 1049.71 466.278 1048.93 465.978 cv
1048.93 463.368 li
1049.71 463.788 1050.49 464.088 1051.27 464.298 cv
1052.05 464.508 1052.83 464.628 1053.64 464.628 cv
1055.38 464.628 1056.7 464.148 1057.6 463.248 cv
1058.47 462.318 1058.92 460.938 1058.92 459.078 cv
1058.92 457.758 li
1058.35 458.718 1057.63 459.438 1056.76 459.918 cv
1055.89 460.398 1054.87 460.638 1053.67 460.638 cv
1051.63 460.638 1050.01 459.888 1048.78 458.358 cv
1047.55 456.828 1046.95 454.788 1046.95 452.238 cv
1046.95 449.718 1047.55 447.678 1048.78 446.148 cv
1050.01 444.618 1051.63 443.838 1053.67 443.838 cv
1054.87 443.838 1055.89 444.078 1056.76 444.558 cv
1057.63 445.038 1058.35 445.758 1058.92 446.718 cv
1058.92 444.228 li
1061.62 444.228 li
1061.62 458.598 li
f
1079.95 447.378 mo
1080.61 446.178 1081.42 445.308 1082.35 444.708 cv
1083.28 444.138 1084.39 443.838 1085.68 443.838 cv
1087.36 443.838 1088.68 444.438 1089.61 445.638 cv
1090.54 446.838 1091.02 448.548 1091.02 450.738 cv
1091.02 460.638 li
1088.32 460.638 li
1088.32 450.828 li
1088.32 449.268 1088.02 448.098 1087.48 447.318 cv
1086.91 446.568 1086.07 446.178 1084.93 446.178 cv
1083.52 446.178 1082.41 446.658 1081.6 447.588 cv
1080.79 448.518 1080.4 449.778 1080.4 451.368 cv
1080.4 460.638 li
1077.7 460.638 li
1077.7 450.828 li
1077.7 449.268 1077.4 448.098 1076.86 447.318 cv
1076.29 446.568 1075.42 446.178 1074.28 446.178 cv
1072.9 446.178 1071.79 446.658 1070.98 447.588 cv
1070.17 448.518 1069.78 449.778 1069.78 451.368 cv
1069.78 460.638 li
1067.08 460.638 li
1067.08 444.228 li
1069.78 444.228 li
1069.78 446.778 li
1070.38 445.788 1071.13 445.038 1072 444.558 cv
1072.84 444.078 1073.86 443.838 1075.06 443.838 cv
1076.26 443.838 1077.25 444.138 1078.09 444.738 cv
1078.93 445.338 1079.53 446.238 1079.95 447.378 cv
f
1102.75 446.118 mo
1101.31 446.118 1100.17 446.688 1099.33 447.828 cv
1098.49 448.968 1098.07 450.498 1098.07 452.448 cv
1098.07 454.428 1098.46 455.958 1099.3 457.098 cv
1100.14 458.238 1101.28 458.778 1102.75 458.778 cv
1104.19 458.778 1105.33 458.238 1106.17 457.098 cv
1107.01 455.958 1107.43 454.428 1107.43 452.448 cv
1107.43 450.528 1107.01 448.968 1106.17 447.828 cv
1105.33 446.688 1104.19 446.118 1102.75 446.118 cv
1102.75 443.838 mo
1105.09 443.838 1106.92 444.618 1108.27 446.118 cv
1109.59 447.648 1110.28 449.748 1110.28 452.448 cv
1110.28 455.148 1109.59 457.248 1108.27 458.748 cv
1106.92 460.278 1105.09 461.028 1102.75 461.028 cv
1100.38 461.028 1098.52 460.278 1097.2 458.748 cv
1095.88 457.248 1095.22 455.148 1095.22 452.448 cv
1095.22 449.748 1095.88 447.648 1097.2 446.118 cv
1098.52 444.618 1100.38 443.838 1102.75 443.838 cv
f
1114.75 444.228 mo
1117.45 444.228 li
1117.45 460.638 li
1114.75 460.638 li
1114.75 444.228 li
1114.75 437.838 mo
1117.45 437.838 li
1117.45 441.258 li
1114.75 441.258 li
1114.75 437.838 li
f
1133.89 446.718 mo
1133.89 437.838 li
1136.59 437.838 li
1136.59 460.638 li
1133.89 460.638 li
1133.89 458.178 li
1133.32 459.168 1132.6 459.888 1131.73 460.338 cv
1130.86 460.788 1129.84 461.028 1128.64 461.028 cv
1126.66 461.028 1125.04 460.248 1123.78 458.688 cv
1122.52 457.128 1121.92 455.028 1121.92 452.448 cv
1121.92 449.868 1122.52 447.798 1123.78 446.208 cv
1125.04 444.648 1126.66 443.838 1128.64 443.838 cv
1129.84 443.838 1130.86 444.078 1131.73 444.558 cv
1132.6 445.038 1133.32 445.758 1133.89 446.718 cv
1124.71 452.448 mo
1124.71 454.428 1125.1 455.988 1125.91 457.128 cv
1126.72 458.268 1127.86 458.808 1129.3 458.808 cv
1130.71 458.808 1131.82 458.268 1132.66 457.128 cv
1133.47 455.988 1133.89 454.428 1133.89 452.448 cv
1133.89 450.468 1133.47 448.938 1132.66 447.798 cv
1131.82 446.658 1130.71 446.088 1129.3 446.088 cv
1127.86 446.088 1126.72 446.658 1125.91 447.798 cv
1125.1 448.938 1124.71 450.468 1124.71 452.448 cv
f
1141.72 437.868 mo
1144.06 437.868 li
1145.5 440.178 1146.61 442.428 1147.33 444.648 cv
1148.05 446.868 1148.44 449.058 1148.44 451.218 cv
1148.44 453.408 1148.05 455.598 1147.33 457.818 cv
1146.61 460.038 1145.5 462.258 1144.06 464.568 cv
1141.72 464.568 li
1143.01 462.318 1143.97 460.128 1144.63 457.908 cv
1145.26 455.718 1145.59 453.498 1145.59 451.218 cv
1145.59 448.968 1145.26 446.748 1144.63 444.558 cv
1143.97 442.368 1143.01 440.148 1141.72 437.868 cv
f
1.5 lw
2 lc
574.535 491.17 mo
594.535 491.17 li
@
608.445 475.23 mo
608.445 492.24 li
612.015 492.24 li
615.015 492.24 617.235 491.58 618.645 490.2 cv
620.025 488.82 620.745 486.66 620.745 483.72 cv
620.745 480.78 620.025 478.65 618.645 477.27 cv
617.235 475.92 615.015 475.23 612.015 475.23 cv
608.445 475.23 li
605.475 472.8 mo
611.565 472.8 li
615.795 472.8 618.915 473.7 620.895 475.44 cv
622.875 477.21 623.865 479.97 623.865 483.72 cv
623.865 487.5 622.845 490.26 620.865 492.03 cv
618.885 493.8 615.765 494.67 611.565 494.67 cv
605.475 494.67 li
605.475 472.8 li
f
631.545 484.23 mo
631.545 492.24 li
636.285 492.24 li
637.875 492.24 639.045 491.91 639.825 491.25 cv
640.575 490.59 640.965 489.6 640.965 488.22 cv
640.965 486.87 640.575 485.88 639.825 485.22 cv
639.045 484.56 637.875 484.23 636.285 484.23 cv
631.545 484.23 li
631.545 475.23 mo
631.545 481.83 li
635.925 481.83 li
637.365 481.83 638.415 481.56 639.135 481.02 cv
639.855 480.48 640.215 479.67 640.215 478.53 cv
640.215 477.45 639.855 476.61 639.135 476.07 cv
638.415 475.53 637.365 475.23 635.925 475.23 cv
631.545 475.23 li
628.575 472.8 mo
636.135 472.8 li
638.385 472.8 640.125 473.28 641.355 474.21 cv
642.555 475.17 643.185 476.49 643.185 478.2 cv
643.185 479.55 642.855 480.63 642.225 481.41 cv
641.595 482.19 640.695 482.7 639.495 482.88 cv
640.935 483.21 642.075 483.87 642.885 484.86 cv
643.665 485.85 644.085 487.08 644.085 488.55 cv
644.085 490.53 643.395 492.03 642.075 493.08 cv
640.755 494.16 638.865 494.67 636.435 494.67 cv
628.575 494.67 li
628.575 472.8 li
f
649.155 472.8 mo
653.145 472.8 li
662.835 491.1 li
662.835 472.8 li
665.715 472.8 li
665.715 494.67 li
661.725 494.67 li
652.035 476.37 li
652.035 494.67 li
649.155 494.67 li
649.155 472.8 li
f
687.495 471.9 mo
686.175 474.18 685.215 476.4 684.585 478.59 cv
683.925 480.78 683.625 483 683.625 485.25 cv
683.625 487.53 683.925 489.75 684.585 491.94 cv
685.215 494.16 686.175 496.35 687.495 498.6 cv
685.155 498.6 li
683.685 496.29 682.575 494.07 681.855 491.85 cv
681.135 489.63 680.775 487.44 680.775 485.25 cv
680.775 483.09 681.135 480.9 681.855 478.68 cv
682.575 476.46 683.655 474.21 685.155 471.9 cv
687.495 471.9 li
f
689.835 472.8 mo
708.315 472.8 li
708.315 475.29 li
700.545 475.29 li
700.545 494.67 li
697.575 494.67 li
697.575 475.29 li
689.835 475.29 li
689.835 472.8 li
f
720.555 480.78 mo
720.255 480.6 719.925 480.48 719.565 480.39 cv
719.205 480.33 718.815 480.27 718.395 480.27 cv
716.865 480.27 715.695 480.78 714.885 481.77 cv
714.045 482.76 713.655 484.17 713.655 486.03 cv
713.655 494.67 li
710.955 494.67 li
710.955 478.26 li
713.655 478.26 li
713.655 480.81 li
714.195 479.82 714.945 479.07 715.845 478.59 cv
716.745 478.11 717.855 477.87 719.175 477.87 cv
719.355 477.87 719.565 477.9 719.805 477.9 cv
720.015 477.93 720.255 477.96 720.555 478.02 cv
720.555 480.78 li
f
730.845 486.42 mo
728.655 486.42 727.155 486.69 726.315 487.17 cv
725.475 487.68 725.055 488.52 725.055 489.72 cv
725.055 490.68 725.355 491.46 725.985 492 cv
726.615 492.57 727.485 492.84 728.565 492.84 cv
730.065 492.84 731.265 492.33 732.165 491.25 cv
733.065 490.2 733.515 488.79 733.515 487.02 cv
733.515 486.42 li
730.845 486.42 li
736.215 485.31 mo
736.215 494.67 li
733.515 494.67 li
733.515 492.18 li
732.885 493.2 732.105 493.92 731.205 494.37 cv
730.305 494.82 729.165 495.06 727.845 495.06 cv
726.165 495.06 724.815 494.61 723.825 493.68 cv
722.835 492.75 722.355 491.49 722.355 489.9 cv
722.355 488.07 722.955 486.69 724.215 485.73 cv
725.445 484.8 727.275 484.32 729.735 484.32 cv
733.515 484.32 li
733.515 484.05 li
733.515 482.82 733.095 481.86 732.285 481.17 cv
731.475 480.51 730.335 480.15 728.865 480.15 cv
727.905 480.15 727.005 480.27 726.105 480.51 cv
725.205 480.75 724.365 481.08 723.555 481.5 cv
723.555 479.01 li
724.515 478.65 725.475 478.35 726.405 478.17 cv
727.335 477.99 728.235 477.87 729.135 477.87 cv
731.505 477.87 733.275 478.5 734.445 479.73 cv
735.615 480.96 736.215 482.82 736.215 485.31 cv
f
741.765 478.26 mo
744.465 478.26 li
744.465 494.67 li
741.765 494.67 li
741.765 478.26 li
741.765 471.87 mo
744.465 471.87 li
744.465 475.29 li
741.765 475.29 li
741.765 471.87 li
f
763.755 484.77 mo
763.755 494.67 li
761.055 494.67 li
761.055 484.86 li
761.055 483.3 760.725 482.16 760.125 481.38 cv
759.525 480.6 758.625 480.21 757.425 480.21 cv
755.955 480.21 754.815 480.69 753.975 481.62 cv
753.135 482.55 752.715 483.81 752.715 485.4 cv
752.715 494.67 li
750.015 494.67 li
750.015 478.26 li
752.715 478.26 li
752.715 480.81 li
753.345 479.85 754.095 479.1 754.995 478.62 cv
755.865 478.14 756.885 477.87 758.025 477.87 cv
759.885 477.87 761.325 478.47 762.285 479.64 cv
763.245 480.81 763.755 482.52 763.755 484.77 cv
f
779.925 486.27 mo
779.925 484.35 779.505 482.82 778.725 481.74 cv
777.915 480.66 776.775 480.12 775.335 480.12 cv
773.895 480.12 772.755 480.66 771.945 481.74 cv
771.135 482.82 770.745 484.35 770.745 486.27 cv
770.745 488.22 771.135 489.72 771.945 490.8 cv
772.755 491.88 773.895 492.42 775.335 492.42 cv
776.775 492.42 777.915 491.88 778.725 490.8 cv
779.505 489.72 779.925 488.22 779.925 486.27 cv
782.625 492.63 mo
782.625 495.39 781.995 497.46 780.765 498.84 cv
779.505 500.19 777.615 500.88 775.065 500.88 cv
774.105 500.88 773.235 500.79 772.395 500.67 cv
771.555 500.52 770.715 500.31 769.935 500.01 cv
769.935 497.4 li
770.715 497.82 771.495 498.12 772.275 498.33 cv
773.055 498.54 773.835 498.66 774.645 498.66 cv
776.385 498.66 777.705 498.18 778.605 497.28 cv
779.475 496.35 779.925 494.97 779.925 493.11 cv
779.925 491.79 li
779.355 492.75 778.635 493.47 777.765 493.95 cv
776.895 494.43 775.875 494.67 774.675 494.67 cv
772.635 494.67 771.015 493.92 769.785 492.39 cv
768.555 490.86 767.955 488.82 767.955 486.27 cv
767.955 483.75 768.555 481.71 769.785 480.18 cv
771.015 478.65 772.635 477.87 774.675 477.87 cv
775.875 477.87 776.895 478.11 777.765 478.59 cv
778.635 479.07 779.355 479.79 779.925 480.75 cv
779.925 478.26 li
782.625 478.26 li
782.625 492.63 li
f
788.175 478.26 mo
790.875 478.26 li
790.875 494.67 li
788.175 494.67 li
788.175 478.26 li
788.175 471.87 mo
790.875 471.87 li
790.875 475.29 li
788.175 475.29 li
788.175 471.87 li
f
810.165 484.77 mo
810.165 494.67 li
807.465 494.67 li
807.465 484.86 li
807.465 483.3 807.135 482.16 806.535 481.38 cv
805.935 480.6 805.035 480.21 803.835 480.21 cv
802.365 480.21 801.225 480.69 800.385 481.62 cv
799.545 482.55 799.125 483.81 799.125 485.4 cv
799.125 494.67 li
796.425 494.67 li
796.425 478.26 li
799.125 478.26 li
799.125 480.81 li
799.755 479.85 800.505 479.1 801.405 478.62 cv
802.275 478.14 803.295 477.87 804.435 477.87 cv
806.295 477.87 807.735 478.47 808.695 479.64 cv
809.655 480.81 810.165 482.52 810.165 484.77 cv
f
826.335 486.27 mo
826.335 484.35 825.915 482.82 825.135 481.74 cv
824.325 480.66 823.185 480.12 821.745 480.12 cv
820.305 480.12 819.165 480.66 818.355 481.74 cv
817.545 482.82 817.155 484.35 817.155 486.27 cv
817.155 488.22 817.545 489.72 818.355 490.8 cv
819.165 491.88 820.305 492.42 821.745 492.42 cv
823.185 492.42 824.325 491.88 825.135 490.8 cv
825.915 489.72 826.335 488.22 826.335 486.27 cv
829.035 492.63 mo
829.035 495.39 828.405 497.46 827.175 498.84 cv
825.915 500.19 824.025 500.88 821.475 500.88 cv
820.515 500.88 819.645 500.79 818.805 500.67 cv
817.965 500.52 817.125 500.31 816.345 500.01 cv
816.345 497.4 li
817.125 497.82 817.905 498.12 818.685 498.33 cv
819.465 498.54 820.245 498.66 821.055 498.66 cv
822.795 498.66 824.115 498.18 825.015 497.28 cv
825.885 496.35 826.335 494.97 826.335 493.11 cv
826.335 491.79 li
825.765 492.75 825.045 493.47 824.175 493.95 cv
823.305 494.43 822.285 494.67 821.085 494.67 cv
819.045 494.67 817.425 493.92 816.195 492.39 cv
814.965 490.86 814.365 488.82 814.365 486.27 cv
814.365 483.75 814.965 481.71 816.195 480.18 cv
817.425 478.65 819.045 477.87 821.085 477.87 cv
822.285 477.87 823.305 478.11 824.175 478.59 cv
825.045 479.07 825.765 479.79 826.335 480.75 cv
826.335 478.26 li
829.035 478.26 li
829.035 492.63 li
f
835.275 490.95 mo
838.365 490.95 li
838.365 493.47 li
835.965 498.12 li
834.075 498.12 li
835.275 493.47 li
835.275 490.95 li
f
866.894 473.52 mo
866.894 476.4 li
865.754 475.86 864.704 475.47 863.714 475.2 cv
862.694 474.96 861.734 474.81 860.834 474.81 cv
859.214 474.81 857.954 475.14 857.084 475.74 cv
856.214 476.37 855.794 477.27 855.794 478.41 cv
855.794 479.37 856.064 480.12 856.664 480.6 cv
857.234 481.11 858.344 481.5 859.964 481.8 cv
861.764 482.16 li
863.954 482.58 865.574 483.33 866.624 484.38 cv
867.674 485.46 868.214 486.87 868.214 488.64 cv
868.214 490.77 867.494 492.36 866.084 493.44 cv
864.644 494.52 862.574 495.06 859.844 495.06 cv
858.794 495.06 857.684 494.94 856.514 494.73 cv
855.344 494.52 854.144 494.19 852.914 493.71 cv
852.914 490.65 li
854.114 491.34 855.284 491.85 856.424 492.18 cv
857.564 492.54 858.704 492.69 859.844 492.69 cv
861.524 492.69 862.814 492.36 863.744 491.7 cv
864.644 491.04 865.124 490.11 865.124 488.85 cv
865.124 487.77 864.794 486.93 864.134 486.33 cv
863.474 485.73 862.394 485.28 860.894 484.98 cv
859.094 484.62 li
856.874 484.2 855.284 483.51 854.294 482.55 cv
853.304 481.62 852.824 480.33 852.824 478.65 cv
852.824 476.73 853.484 475.2 854.864 474.09 cv
856.214 472.98 858.104 472.41 860.504 472.41 cv
861.524 472.41 862.544 472.5 863.624 472.68 cv
864.674 472.86 865.754 473.16 866.894 473.52 cv
f
872.714 478.26 mo
875.414 478.26 li
875.414 494.67 li
872.714 494.67 li
872.714 478.26 li
872.714 471.87 mo
875.414 471.87 li
875.414 475.29 li
872.714 475.29 li
872.714 471.87 li
f
891.854 486.27 mo
891.854 484.35 891.434 482.82 890.654 481.74 cv
889.844 480.66 888.704 480.12 887.264 480.12 cv
885.824 480.12 884.684 480.66 883.874 481.74 cv
883.064 482.82 882.674 484.35 882.674 486.27 cv
882.674 488.22 883.064 489.72 883.874 490.8 cv
884.684 491.88 885.824 492.42 887.264 492.42 cv
888.704 492.42 889.844 491.88 890.654 490.8 cv
891.434 489.72 891.854 488.22 891.854 486.27 cv
894.554 492.63 mo
894.554 495.39 893.924 497.46 892.694 498.84 cv
891.434 500.19 889.544 500.88 886.994 500.88 cv
886.034 500.88 885.164 500.79 884.324 500.67 cv
883.484 500.52 882.644 500.31 881.864 500.01 cv
881.864 497.4 li
882.644 497.82 883.424 498.12 884.204 498.33 cv
884.984 498.54 885.764 498.66 886.574 498.66 cv
888.314 498.66 889.634 498.18 890.534 497.28 cv
891.404 496.35 891.854 494.97 891.854 493.11 cv
891.854 491.79 li
891.284 492.75 890.564 493.47 889.694 493.95 cv
888.824 494.43 887.804 494.67 886.604 494.67 cv
884.564 494.67 882.944 493.92 881.714 492.39 cv
880.484 490.86 879.884 488.82 879.884 486.27 cv
879.884 483.75 880.484 481.71 881.714 480.18 cv
882.944 478.65 884.564 477.87 886.604 477.87 cv
887.804 477.87 888.824 478.11 889.694 478.59 cv
890.564 479.07 891.284 479.79 891.854 480.75 cv
891.854 478.26 li
894.554 478.26 li
894.554 492.63 li
f
912.884 481.41 mo
913.544 480.21 914.354 479.34 915.284 478.74 cv
916.214 478.17 917.324 477.87 918.614 477.87 cv
920.294 477.87 921.614 478.47 922.544 479.67 cv
923.474 480.87 923.954 482.58 923.954 484.77 cv
923.954 494.67 li
921.254 494.67 li
921.254 484.86 li
921.254 483.3 920.954 482.13 920.414 481.35 cv
919.844 480.6 919.004 480.21 917.864 480.21 cv
916.454 480.21 915.344 480.69 914.534 481.62 cv
913.724 482.55 913.334 483.81 913.334 485.4 cv
913.334 494.67 li
910.634 494.67 li
910.634 484.86 li
910.634 483.3 910.334 482.13 909.794 481.35 cv
909.224 480.6 908.354 480.21 907.214 480.21 cv
905.834 480.21 904.724 480.69 903.914 481.62 cv
903.104 482.55 902.714 483.81 902.714 485.4 cv
902.714 494.67 li
900.014 494.67 li
900.014 478.26 li
902.714 478.26 li
902.714 480.81 li
903.314 479.82 904.064 479.07 904.934 478.59 cv
905.774 478.11 906.794 477.87 907.994 477.87 cv
909.194 477.87 910.184 478.17 911.024 478.77 cv
911.864 479.37 912.464 480.27 912.884 481.41 cv
f
935.684 480.15 mo
934.244 480.15 933.104 480.72 932.264 481.86 cv
931.424 483 931.004 484.53 931.004 486.48 cv
931.004 488.46 931.394 489.99 932.234 491.13 cv
933.074 492.27 934.214 492.81 935.684 492.81 cv
937.124 492.81 938.264 492.27 939.104 491.13 cv
939.944 489.99 940.364 488.46 940.364 486.48 cv
940.364 484.56 939.944 483 939.104 481.86 cv
938.264 480.72 937.124 480.15 935.684 480.15 cv
935.684 477.87 mo
938.024 477.87 939.854 478.65 941.204 480.15 cv
942.524 481.68 943.214 483.78 943.214 486.48 cv
943.214 489.18 942.524 491.28 941.204 492.78 cv
939.854 494.31 938.024 495.06 935.684 495.06 cv
933.314 495.06 931.454 494.31 930.134 492.78 cv
928.814 491.28 928.154 489.18 928.154 486.48 cv
928.154 483.78 928.814 481.68 930.134 480.15 cv
931.454 478.65 933.314 477.87 935.684 477.87 cv
f
947.684 478.26 mo
950.384 478.26 li
950.384 494.67 li
947.684 494.67 li
947.684 478.26 li
947.684 471.87 mo
950.384 471.87 li
950.384 475.29 li
947.684 475.29 li
947.684 471.87 li
f
966.824 480.75 mo
966.824 471.87 li
969.524 471.87 li
969.524 494.67 li
966.824 494.67 li
966.824 492.21 li
966.254 493.2 965.534 493.92 964.664 494.37 cv
963.794 494.82 962.774 495.06 961.574 495.06 cv
959.594 495.06 957.974 494.28 956.714 492.72 cv
955.454 491.16 954.854 489.06 954.854 486.48 cv
954.854 483.9 955.454 481.83 956.714 480.24 cv
957.974 478.68 959.594 477.87 961.574 477.87 cv
962.774 477.87 963.794 478.11 964.664 478.59 cv
965.534 479.07 966.254 479.79 966.824 480.75 cv
957.644 486.48 mo
957.644 488.46 958.034 490.02 958.844 491.16 cv
959.654 492.3 960.794 492.84 962.234 492.84 cv
963.644 492.84 964.754 492.3 965.594 491.16 cv
966.404 490.02 966.824 488.46 966.824 486.48 cv
966.824 484.5 966.404 482.97 965.594 481.83 cv
964.754 480.69 963.644 480.12 962.234 480.12 cv
960.794 480.12 959.654 480.69 958.844 481.83 cv
958.034 482.97 957.644 484.5 957.644 486.48 cv
f
974.654 471.9 mo
976.994 471.9 li
978.434 474.21 979.544 476.46 980.264 478.68 cv
980.984 480.9 981.374 483.09 981.374 485.25 cv
981.374 487.44 980.984 489.63 980.264 491.85 cv
979.544 494.07 978.434 496.29 976.994 498.6 cv
974.654 498.6 li
975.944 496.35 976.904 494.16 977.564 491.94 cv
978.194 489.75 978.524 487.53 978.524 485.25 cv
978.524 483 978.194 480.78 977.564 478.59 cv
976.904 476.4 975.944 474.18 974.654 471.9 cv
f
574.535 525.201 mo
594.535 525.201 li
@
581.535 528.201 mo
587.535 522.201 li
581.535 522.201 mo
587.535 528.201 li
f
1 lw
0 lc
581.535 528.201 mo
587.535 522.201 li
581.535 522.201 mo
587.535 528.201 li
@
608.445 509.261 mo
608.445 526.271 li
612.015 526.271 li
615.015 526.271 617.235 525.611 618.645 524.231 cv
620.025 522.851 620.745 520.691 620.745 517.751 cv
620.745 514.811 620.025 512.681 618.645 511.301 cv
617.235 509.951 615.015 509.261 612.015 509.261 cv
608.445 509.261 li
605.475 506.831 mo
611.565 506.831 li
615.795 506.831 618.915 507.731 620.895 509.471 cv
622.875 511.241 623.865 514.001 623.865 517.751 cv
623.865 521.531 622.845 524.291 620.865 526.061 cv
618.885 527.831 615.765 528.701 611.565 528.701 cv
605.475 528.701 li
605.475 506.831 li
f
631.545 518.261 mo
631.545 526.271 li
636.285 526.271 li
637.875 526.271 639.045 525.941 639.825 525.281 cv
640.575 524.621 640.965 523.631 640.965 522.251 cv
640.965 520.901 640.575 519.911 639.825 519.251 cv
639.045 518.591 637.875 518.261 636.285 518.261 cv
631.545 518.261 li
631.545 509.261 mo
631.545 515.861 li
635.925 515.861 li
637.365 515.861 638.415 515.591 639.135 515.051 cv
639.855 514.511 640.215 513.701 640.215 512.561 cv
640.215 511.481 639.855 510.641 639.135 510.101 cv
638.415 509.561 637.365 509.261 635.925 509.261 cv
631.545 509.261 li
628.575 506.831 mo
636.135 506.831 li
638.385 506.831 640.125 507.311 641.355 508.241 cv
642.555 509.201 643.185 510.521 643.185 512.231 cv
643.185 513.581 642.855 514.661 642.225 515.441 cv
641.595 516.221 640.695 516.731 639.495 516.911 cv
640.935 517.241 642.075 517.901 642.885 518.891 cv
643.665 519.881 644.085 521.111 644.085 522.581 cv
644.085 524.561 643.395 526.061 642.075 527.111 cv
640.755 528.191 638.865 528.701 636.435 528.701 cv
628.575 528.701 li
628.575 506.831 li
f
649.155 506.831 mo
653.145 506.831 li
662.835 525.131 li
662.835 506.831 li
665.715 506.831 li
665.715 528.701 li
661.725 528.701 li
652.035 510.401 li
652.035 528.701 li
649.155 528.701 li
649.155 506.831 li
f
687.495 505.931 mo
686.175 508.211 685.215 510.431 684.585 512.621 cv
683.925 514.811 683.625 517.031 683.625 519.281 cv
683.625 521.561 683.925 523.781 684.585 525.971 cv
685.215 528.191 686.175 530.381 687.495 532.631 cv
685.155 532.631 li
683.685 530.321 682.575 528.101 681.855 525.881 cv
681.135 523.661 680.775 521.471 680.775 519.281 cv
680.775 517.121 681.135 514.931 681.855 512.711 cv
682.575 510.491 683.655 508.241 685.155 505.931 cv
687.495 505.931 li
f
689.835 506.831 mo
708.315 506.831 li
708.315 509.321 li
700.545 509.321 li
700.545 528.701 li
697.575 528.701 li
697.575 509.321 li
689.835 509.321 li
689.835 506.831 li
f
725.085 519.821 mo
725.085 521.141 li
712.695 521.141 li
712.815 523.001 713.355 524.441 714.375 525.401 cv
715.365 526.361 716.745 526.841 718.545 526.841 cv
719.565 526.841 720.585 526.721 721.545 526.481 cv
722.505 526.241 723.495 525.851 724.455 525.311 cv
724.455 527.861 li
723.495 528.281 722.505 528.611 721.485 528.791 cv
720.465 528.971 719.415 529.091 718.395 529.091 cv
715.755 529.091 713.685 528.341 712.155 526.841 cv
710.625 525.341 709.875 523.271 709.875 520.661 cv
709.875 517.991 710.595 515.861 712.035 514.271 cv
713.475 512.711 715.455 511.901 717.915 511.901 cv
720.135 511.901 721.875 512.621 723.165 514.031 cv
724.425 515.471 725.085 517.391 725.085 519.821 cv
722.385 519.041 mo
722.355 517.571 721.935 516.401 721.155 515.501 cv
720.345 514.631 719.265 514.181 717.945 514.181 cv
716.445 514.181 715.245 514.631 714.345 515.471 cv
713.445 516.311 712.905 517.511 712.785 519.041 cv
722.385 519.041 li
f
739.965 512.771 mo
739.965 515.321 li
739.185 514.961 738.405 514.661 737.595 514.451 cv
736.755 514.271 735.915 514.151 735.045 514.151 cv
733.695 514.151 732.675 514.361 732.015 514.781 cv
731.355 515.201 731.025 515.801 731.025 516.611 cv
731.025 517.241 731.265 517.721 731.745 518.081 cv
732.225 518.441 733.185 518.801 734.625 519.101 cv
735.555 519.311 li
737.475 519.731 738.825 520.331 739.635 521.051 cv
740.415 521.801 740.835 522.851 740.835 524.171 cv
740.835 525.701 740.235 526.901 739.035 527.771 cv
737.835 528.671 736.155 529.091 734.055 529.091 cv
733.155 529.091 732.255 529.001 731.295 528.851 cv
730.335 528.701 729.345 528.461 728.295 528.101 cv
728.295 525.311 li
729.285 525.851 730.275 526.241 731.235 526.481 cv
732.195 526.751 733.155 526.871 734.115 526.871 cv
735.375 526.871 736.365 526.661 737.055 526.241 cv
737.715 525.821 738.075 525.191 738.075 524.381 cv
738.075 523.661 737.805 523.091 737.325 522.701 cv
736.845 522.311 735.765 521.921 734.085 521.561 cv
733.155 521.351 li
731.475 520.991 730.245 520.451 729.525 519.731 cv
728.775 519.011 728.415 518.021 728.415 516.731 cv
728.415 515.201 728.955 514.001 730.035 513.161 cv
731.115 512.321 732.675 511.901 734.715 511.901 cv
735.705 511.901 736.635 511.991 737.535 512.141 cv
738.405 512.291 739.215 512.501 739.965 512.771 cv
f
747.795 507.641 mo
747.795 512.291 li
753.345 512.291 li
753.345 514.391 li
747.795 514.391 li
747.795 523.301 li
747.795 524.651 747.975 525.521 748.335 525.881 cv
748.695 526.271 749.445 526.451 750.585 526.451 cv
753.345 526.451 li
753.345 528.701 li
750.585 528.701 li
748.485 528.701 747.045 528.311 746.265 527.531 cv
745.485 526.751 745.095 525.341 745.095 523.301 cv
745.095 514.391 li
743.115 514.391 li
743.115 512.291 li
745.095 512.291 li
745.095 507.641 li
747.795 507.641 li
f
756.885 512.291 mo
759.585 512.291 li
759.585 528.701 li
756.885 528.701 li
756.885 512.291 li
756.885 505.901 mo
759.585 505.901 li
759.585 509.321 li
756.885 509.321 li
756.885 505.901 li
f
778.875 518.801 mo
778.875 528.701 li
776.175 528.701 li
776.175 518.891 li
776.175 517.331 775.845 516.191 775.245 515.411 cv
774.645 514.631 773.745 514.241 772.545 514.241 cv
771.075 514.241 769.935 514.721 769.095 515.651 cv
768.255 516.581 767.835 517.841 767.835 519.431 cv
767.835 528.701 li
765.135 528.701 li
765.135 512.291 li
767.835 512.291 li
767.835 514.841 li
768.465 513.881 769.215 513.131 770.115 512.651 cv
770.985 512.171 772.005 511.901 773.145 511.901 cv
775.005 511.901 776.445 512.501 777.405 513.671 cv
778.365 514.841 778.875 516.551 778.875 518.801 cv
f
795.045 520.301 mo
795.045 518.381 794.625 516.851 793.845 515.771 cv
793.035 514.691 791.895 514.151 790.455 514.151 cv
789.015 514.151 787.875 514.691 787.065 515.771 cv
786.255 516.851 785.865 518.381 785.865 520.301 cv
785.865 522.251 786.255 523.751 787.065 524.831 cv
787.875 525.911 789.015 526.451 790.455 526.451 cv
791.895 526.451 793.035 525.911 793.845 524.831 cv
794.625 523.751 795.045 522.251 795.045 520.301 cv
797.745 526.661 mo
797.745 529.421 797.115 531.491 795.885 532.871 cv
794.625 534.221 792.735 534.911 790.185 534.911 cv
789.225 534.911 788.355 534.821 787.515 534.701 cv
786.675 534.551 785.835 534.341 785.055 534.041 cv
785.055 531.431 li
785.835 531.851 786.615 532.151 787.395 532.361 cv
788.175 532.571 788.955 532.691 789.765 532.691 cv
791.505 532.691 792.825 532.211 793.725 531.311 cv
794.595 530.381 795.045 529.001 795.045 527.141 cv
795.045 525.821 li
794.475 526.781 793.755 527.501 792.885 527.981 cv
792.015 528.461 790.995 528.701 789.795 528.701 cv
787.755 528.701 786.135 527.951 784.905 526.421 cv
783.675 524.891 783.075 522.851 783.075 520.301 cv
783.075 517.781 783.675 515.741 784.905 514.211 cv
786.135 512.681 787.755 511.901 789.795 511.901 cv
790.995 511.901 792.015 512.141 792.885 512.621 cv
793.755 513.101 794.475 513.821 795.045 514.781 cv
795.045 512.291 li
797.745 512.291 li
797.745 526.661 li
f
803.985 524.981 mo
807.075 524.981 li
807.075 527.501 li
804.675 532.151 li
802.785 532.151 li
803.985 527.501 li
803.985 524.981 li
f
835.604 507.551 mo
835.604 510.431 li
834.464 509.891 833.414 509.501 832.424 509.231 cv
831.404 508.991 830.444 508.841 829.544 508.841 cv
827.924 508.841 826.664 509.171 825.794 509.771 cv
824.924 510.401 824.504 511.301 824.504 512.441 cv
824.504 513.401 824.774 514.151 825.374 514.631 cv
825.944 515.141 827.054 515.531 828.674 515.831 cv
830.474 516.191 li
832.664 516.611 834.284 517.361 835.334 518.411 cv
836.384 519.491 836.924 520.901 836.924 522.671 cv
836.924 524.801 836.204 526.391 834.794 527.471 cv
833.354 528.551 831.284 529.091 828.554 529.091 cv
827.504 529.091 826.394 528.971 825.224 528.761 cv
824.054 528.551 822.854 528.221 821.624 527.741 cv
821.624 524.681 li
822.824 525.371 823.994 525.881 825.134 526.211 cv
826.274 526.571 827.414 526.721 828.554 526.721 cv
830.234 526.721 831.524 526.391 832.454 525.731 cv
833.354 525.071 833.834 524.141 833.834 522.881 cv
833.834 521.801 833.504 520.961 832.844 520.361 cv
832.184 519.761 831.104 519.311 829.604 519.011 cv
827.804 518.651 li
825.584 518.231 823.994 517.541 823.004 516.581 cv
822.014 515.651 821.534 514.361 821.534 512.681 cv
821.534 510.761 822.194 509.231 823.574 508.121 cv
824.924 507.011 826.814 506.441 829.214 506.441 cv
830.234 506.441 831.254 506.531 832.334 506.711 cv
833.384 506.891 834.464 507.191 835.604 507.551 cv
f
841.424 512.291 mo
844.124 512.291 li
844.124 528.701 li
841.424 528.701 li
841.424 512.291 li
841.424 505.901 mo
844.124 505.901 li
844.124 509.321 li
841.424 509.321 li
841.424 505.901 li
f
860.564 520.301 mo
860.564 518.381 860.144 516.851 859.364 515.771 cv
858.554 514.691 857.414 514.151 855.974 514.151 cv
854.534 514.151 853.394 514.691 852.584 515.771 cv
851.774 516.851 851.384 518.381 851.384 520.301 cv
851.384 522.251 851.774 523.751 852.584 524.831 cv
853.394 525.911 854.534 526.451 855.974 526.451 cv
857.414 526.451 858.554 525.911 859.364 524.831 cv
860.144 523.751 860.564 522.251 860.564 520.301 cv
863.264 526.661 mo
863.264 529.421 862.634 531.491 861.404 532.871 cv
860.144 534.221 858.254 534.911 855.704 534.911 cv
854.744 534.911 853.874 534.821 853.034 534.701 cv
852.194 534.551 851.354 534.341 850.574 534.041 cv
850.574 531.431 li
851.354 531.851 852.134 532.151 852.914 532.361 cv
853.694 532.571 854.474 532.691 855.284 532.691 cv
857.024 532.691 858.344 532.211 859.244 531.311 cv
860.114 530.381 860.564 529.001 860.564 527.141 cv
860.564 525.821 li
859.994 526.781 859.274 527.501 858.404 527.981 cv
857.534 528.461 856.514 528.701 855.314 528.701 cv
853.274 528.701 851.654 527.951 850.424 526.421 cv
849.194 524.891 848.594 522.851 848.594 520.301 cv
848.594 517.781 849.194 515.741 850.424 514.211 cv
851.654 512.681 853.274 511.901 855.314 511.901 cv
856.514 511.901 857.534 512.141 858.404 512.621 cv
859.274 513.101 859.994 513.821 860.564 514.781 cv
860.564 512.291 li
863.264 512.291 li
863.264 526.661 li
f
881.594 515.441 mo
882.254 514.241 883.064 513.371 883.994 512.771 cv
884.924 512.201 886.034 511.901 887.324 511.901 cv
889.004 511.901 890.324 512.501 891.254 513.701 cv
892.184 514.901 892.664 516.611 892.664 518.801 cv
892.664 528.701 li
889.964 528.701 li
889.964 518.891 li
889.964 517.331 889.664 516.161 889.124 515.381 cv
888.554 514.631 887.714 514.241 886.574 514.241 cv
885.164 514.241 884.054 514.721 883.244 515.651 cv
882.434 516.581 882.044 517.841 882.044 519.431 cv
882.044 528.701 li
879.344 528.701 li
879.344 518.891 li
879.344 517.331 879.044 516.161 878.504 515.381 cv
877.934 514.631 877.064 514.241 875.924 514.241 cv
874.544 514.241 873.434 514.721 872.624 515.651 cv
871.814 516.581 871.424 517.841 871.424 519.431 cv
871.424 528.701 li
868.724 528.701 li
868.724 512.291 li
871.424 512.291 li
871.424 514.841 li
872.024 513.851 872.774 513.101 873.644 512.621 cv
874.484 512.141 875.504 511.901 876.704 511.901 cv
877.904 511.901 878.894 512.201 879.734 512.801 cv
880.574 513.401 881.174 514.301 881.594 515.441 cv
f
904.394 514.181 mo
902.954 514.181 901.814 514.751 900.974 515.891 cv
900.134 517.031 899.714 518.561 899.714 520.511 cv
899.714 522.491 900.104 524.021 900.944 525.161 cv
901.784 526.301 902.924 526.841 904.394 526.841 cv
905.834 526.841 906.974 526.301 907.814 525.161 cv
908.654 524.021 909.074 522.491 909.074 520.511 cv
909.074 518.591 908.654 517.031 907.814 515.891 cv
906.974 514.751 905.834 514.181 904.394 514.181 cv
904.394 511.901 mo
906.734 511.901 908.564 512.681 909.914 514.181 cv
911.234 515.711 911.924 517.811 911.924 520.511 cv
911.924 523.211 911.234 525.311 909.914 526.811 cv
908.564 528.341 906.734 529.091 904.394 529.091 cv
902.024 529.091 900.164 528.341 898.844 526.811 cv
897.524 525.311 896.864 523.211 896.864 520.511 cv
896.864 517.811 897.524 515.711 898.844 514.181 cv
900.164 512.681 902.024 511.901 904.394 511.901 cv
f
916.394 512.291 mo
919.094 512.291 li
919.094 528.701 li
916.394 528.701 li
916.394 512.291 li
916.394 505.901 mo
919.094 505.901 li
919.094 509.321 li
916.394 509.321 li
916.394 505.901 li
f
935.534 514.781 mo
935.534 505.901 li
938.234 505.901 li
938.234 528.701 li
935.534 528.701 li
935.534 526.241 li
934.964 527.231 934.244 527.951 933.374 528.401 cv
932.504 528.851 931.484 529.091 930.284 529.091 cv
928.304 529.091 926.684 528.311 925.424 526.751 cv
924.164 525.191 923.564 523.091 923.564 520.511 cv
923.564 517.931 924.164 515.861 925.424 514.271 cv
926.684 512.711 928.304 511.901 930.284 511.901 cv
931.484 511.901 932.504 512.141 933.374 512.621 cv
934.244 513.101 934.964 513.821 935.534 514.781 cv
926.354 520.511 mo
926.354 522.491 926.744 524.051 927.554 525.191 cv
928.364 526.331 929.504 526.871 930.944 526.871 cv
932.354 526.871 933.464 526.331 934.304 525.191 cv
935.114 524.051 935.534 522.491 935.534 520.511 cv
935.534 518.531 935.114 517.001 934.304 515.861 cv
933.464 514.721 932.354 514.151 930.944 514.151 cv
929.504 514.151 928.364 514.721 927.554 515.861 cv
926.744 517.001 926.354 518.531 926.354 520.511 cv
f
943.364 505.931 mo
945.704 505.931 li
947.144 508.241 948.254 510.491 948.974 512.711 cv
949.694 514.931 950.084 517.121 950.084 519.281 cv
950.084 521.471 949.694 523.661 948.974 525.881 cv
948.254 528.101 947.144 530.321 945.704 532.631 cv
943.364 532.631 li
944.654 530.381 945.614 528.191 946.274 525.971 cv
946.904 523.781 947.234 521.561 947.234 519.281 cv
947.234 517.031 946.904 514.811 946.274 512.621 cv
945.614 510.431 944.654 508.211 943.364 505.931 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
