%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SSDBNIsigmoid.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/12, 13:18:09
%%BoundingBox: 0 0 1154 599
%%HiResBoundingBox: 0 0 1153.5428 598.9195
%%CropBox: 0 0 1153.5428 598.9195
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-12T13:17:05+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-12T13:18:02+08:00"
   xmp:MetadataDate="2019-06-12T13:18:02+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:630ac865-3921-4d12-b759-b1cfa052db66"
   xmpMM:InstanceID="uuid:44cdf00c-0d37-4e68-8149-7aa6e1d5a9a5"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -598.919 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
6.10352e-5 0 mo
6.10352e-5 598.919 li
1153.54 598.919 li
1153.54 0 li
cp
clp
gsave
-.511711 599.162 mo
1154.49 599.162 li
1154.49 -.83818 li
-.511711 -.83818 li
-.511711 599.162 li
clp
-101.512 620.162 mo
1280.89 620.162 li
1280.89 -77.5182 li
-101.512 -77.5182 li
-101.512 620.162 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
71.2883 543.417 mo
1142.65 543.417 li
1142.65 6.20364 li
71.2883 6.20364 li
71.2883 543.417 li
f
119.986 543.417 mo
119.986 546.917 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
119.986 543.417 mo
119.986 546.917 li
@
119.987 552.34 mo
118.967 552.34 118.207 552.84 117.687 553.84 cv
117.167 554.84 116.927 556.34 116.927 558.34 cv
116.927 560.34 117.167 561.84 117.687 562.84 cv
118.207 563.84 118.967 564.34 119.987 564.34 cv
121.007 564.34 121.767 563.84 122.287 562.84 cv
122.787 561.84 123.047 560.34 123.047 558.34 cv
123.047 556.34 122.787 554.84 122.287 553.84 cv
121.767 552.84 121.007 552.34 119.987 552.34 cv
119.987 550.78 mo
121.607 550.78 122.847 551.44 123.727 552.72 cv
124.587 554.02 125.027 555.9 125.027 558.34 cv
125.027 560.8 124.587 562.68 123.727 563.96 cv
122.847 565.24 121.607 565.88 119.987 565.88 cv
118.347 565.88 117.087 565.24 116.227 563.96 cv
115.367 562.68 114.947 560.8 114.947 558.34 cv
114.947 555.9 115.367 554.02 116.227 552.72 cv
117.087 551.44 118.347 550.78 119.987 550.78 cv
f
316.747 543.417 mo
316.747 546.917 li
f
316.747 543.417 mo
316.747 546.917 li
@
301.509 563.96 mo
308.389 563.96 li
308.389 565.62 li
299.129 565.62 li
299.129 563.96 li
299.869 563.2 300.889 562.16 302.189 560.84 cv
303.469 559.54 304.289 558.7 304.629 558.32 cv
305.269 557.62 305.709 557.02 305.949 556.52 cv
306.189 556.04 306.329 555.54 306.329 555.06 cv
306.329 554.3 306.049 553.66 305.509 553.18 cv
304.969 552.7 304.269 552.44 303.389 552.44 cv
302.769 552.44 302.109 552.56 301.429 552.76 cv
300.749 552.98 300.009 553.3 299.229 553.74 cv
299.229 551.74 li
300.029 551.42 300.769 551.18 301.449 551.02 cv
302.129 550.86 302.769 550.78 303.349 550.78 cv
304.849 550.78 306.049 551.16 306.949 551.92 cv
307.849 552.68 308.309 553.68 308.309 554.94 cv
308.309 555.54 308.189 556.12 307.969 556.64 cv
307.749 557.18 307.349 557.82 306.749 558.54 cv
306.589 558.74 306.069 559.28 305.189 560.18 cv
304.309 561.08 303.089 562.34 301.509 563.96 cv
f
316.749 552.34 mo
315.729 552.34 314.969 552.84 314.449 553.84 cv
313.929 554.84 313.689 556.34 313.689 558.34 cv
313.689 560.34 313.929 561.84 314.449 562.84 cv
314.969 563.84 315.729 564.34 316.749 564.34 cv
317.769 564.34 318.529 563.84 319.049 562.84 cv
319.549 561.84 319.809 560.34 319.809 558.34 cv
319.809 556.34 319.549 554.84 319.049 553.84 cv
318.529 552.84 317.769 552.34 316.749 552.34 cv
316.749 550.78 mo
318.369 550.78 319.609 551.44 320.489 552.72 cv
321.349 554.02 321.789 555.9 321.789 558.34 cv
321.789 560.8 321.349 562.68 320.489 563.96 cv
319.609 565.24 318.369 565.88 316.749 565.88 cv
315.109 565.88 313.849 565.24 312.989 563.96 cv
312.129 562.68 311.709 560.8 311.709 558.34 cv
311.709 555.9 312.129 554.02 312.989 552.72 cv
313.849 551.44 315.109 550.78 316.749 550.78 cv
f
329.469 552.34 mo
328.449 552.34 327.689 552.84 327.169 553.84 cv
326.649 554.84 326.409 556.34 326.409 558.34 cv
326.409 560.34 326.649 561.84 327.169 562.84 cv
327.689 563.84 328.449 564.34 329.469 564.34 cv
330.489 564.34 331.249 563.84 331.769 562.84 cv
332.269 561.84 332.529 560.34 332.529 558.34 cv
332.529 556.34 332.269 554.84 331.769 553.84 cv
331.249 552.84 330.489 552.34 329.469 552.34 cv
329.469 550.78 mo
331.089 550.78 332.329 551.44 333.209 552.72 cv
334.069 554.02 334.509 555.9 334.509 558.34 cv
334.509 560.8 334.069 562.68 333.209 563.96 cv
332.329 565.24 331.089 565.88 329.469 565.88 cv
327.829 565.88 326.569 565.24 325.709 563.96 cv
324.849 562.68 324.429 560.8 324.429 558.34 cv
324.429 555.9 324.849 554.02 325.709 552.72 cv
326.569 551.44 327.829 550.78 329.469 550.78 cv
f
513.507 543.417 mo
513.507 546.917 li
f
513.507 543.417 mo
513.507 546.917 li
@
501.989 552.76 mo
497.009 560.54 li
501.989 560.54 li
501.989 552.76 li
501.469 551.04 mo
503.949 551.04 li
503.949 560.54 li
506.029 560.54 li
506.029 562.18 li
503.949 562.18 li
503.949 565.62 li
501.989 565.62 li
501.989 562.18 li
495.409 562.18 li
495.409 560.28 li
501.469 551.04 li
f
513.509 552.34 mo
512.489 552.34 511.729 552.84 511.209 553.84 cv
510.689 554.84 510.449 556.34 510.449 558.34 cv
510.449 560.34 510.689 561.84 511.209 562.84 cv
511.729 563.84 512.489 564.34 513.509 564.34 cv
514.529 564.34 515.289 563.84 515.809 562.84 cv
516.309 561.84 516.569 560.34 516.569 558.34 cv
516.569 556.34 516.309 554.84 515.809 553.84 cv
515.289 552.84 514.529 552.34 513.509 552.34 cv
513.509 550.78 mo
515.129 550.78 516.369 551.44 517.249 552.72 cv
518.109 554.02 518.549 555.9 518.549 558.34 cv
518.549 560.8 518.109 562.68 517.249 563.96 cv
516.369 565.24 515.129 565.88 513.509 565.88 cv
511.869 565.88 510.609 565.24 509.749 563.96 cv
508.889 562.68 508.469 560.8 508.469 558.34 cv
508.469 555.9 508.889 554.02 509.749 552.72 cv
510.609 551.44 511.869 550.78 513.509 550.78 cv
f
526.229 552.34 mo
525.209 552.34 524.449 552.84 523.929 553.84 cv
523.409 554.84 523.169 556.34 523.169 558.34 cv
523.169 560.34 523.409 561.84 523.929 562.84 cv
524.449 563.84 525.209 564.34 526.229 564.34 cv
527.249 564.34 528.009 563.84 528.529 562.84 cv
529.029 561.84 529.289 560.34 529.289 558.34 cv
529.289 556.34 529.029 554.84 528.529 553.84 cv
528.009 552.84 527.249 552.34 526.229 552.34 cv
526.229 550.78 mo
527.849 550.78 529.089 551.44 529.969 552.72 cv
530.829 554.02 531.269 555.9 531.269 558.34 cv
531.269 560.8 530.829 562.68 529.969 563.96 cv
529.089 565.24 527.849 565.88 526.229 565.88 cv
524.589 565.88 523.329 565.24 522.469 563.96 cv
521.609 562.68 521.189 560.8 521.189 558.34 cv
521.189 555.9 521.609 554.02 522.469 552.72 cv
523.329 551.44 524.589 550.78 526.229 550.78 cv
f
710.267 543.417 mo
710.267 546.917 li
f
710.267 543.417 mo
710.267 546.917 li
@
697.789 557.54 mo
696.909 557.54 696.209 557.86 695.689 558.46 cv
695.169 559.06 694.909 559.9 694.909 560.94 cv
694.909 562 695.169 562.84 695.689 563.44 cv
696.209 564.04 696.909 564.34 697.789 564.34 cv
698.669 564.34 699.369 564.04 699.889 563.44 cv
700.409 562.84 700.669 562 700.669 560.94 cv
700.669 559.9 700.409 559.06 699.889 558.46 cv
699.369 557.86 698.669 557.54 697.789 557.54 cv
701.709 551.36 mo
701.709 553.16 li
701.209 552.92 700.709 552.74 700.209 552.62 cv
699.689 552.5 699.189 552.44 698.709 552.44 cv
697.389 552.44 696.389 552.88 695.709 553.76 cv
695.029 554.64 694.629 555.98 694.549 557.74 cv
694.929 557.18 695.409 556.74 695.989 556.44 cv
696.569 556.14 697.209 555.98 697.909 555.98 cv
699.369 555.98 700.529 556.44 701.369 557.32 cv
702.209 558.2 702.649 559.42 702.649 560.94 cv
702.649 562.44 702.189 563.64 701.309 564.54 cv
700.429 565.44 699.249 565.88 697.789 565.88 cv
696.109 565.88 694.809 565.24 693.929 563.96 cv
693.029 562.68 692.589 560.8 692.589 558.34 cv
692.589 556.04 693.129 554.2 694.229 552.84 cv
695.309 551.48 696.789 550.78 698.629 550.78 cv
699.109 550.78 699.609 550.84 700.129 550.92 cv
700.629 551.02 701.149 551.16 701.709 551.36 cv
f
710.269 552.34 mo
709.249 552.34 708.489 552.84 707.969 553.84 cv
707.449 554.84 707.209 556.34 707.209 558.34 cv
707.209 560.34 707.449 561.84 707.969 562.84 cv
708.489 563.84 709.249 564.34 710.269 564.34 cv
711.289 564.34 712.049 563.84 712.569 562.84 cv
713.069 561.84 713.329 560.34 713.329 558.34 cv
713.329 556.34 713.069 554.84 712.569 553.84 cv
712.049 552.84 711.289 552.34 710.269 552.34 cv
710.269 550.78 mo
711.889 550.78 713.129 551.44 714.009 552.72 cv
714.869 554.02 715.309 555.9 715.309 558.34 cv
715.309 560.8 714.869 562.68 714.009 563.96 cv
713.129 565.24 711.889 565.88 710.269 565.88 cv
708.629 565.88 707.369 565.24 706.509 563.96 cv
705.649 562.68 705.229 560.8 705.229 558.34 cv
705.229 555.9 705.649 554.02 706.509 552.72 cv
707.369 551.44 708.629 550.78 710.269 550.78 cv
f
722.989 552.34 mo
721.969 552.34 721.209 552.84 720.689 553.84 cv
720.169 554.84 719.929 556.34 719.929 558.34 cv
719.929 560.34 720.169 561.84 720.689 562.84 cv
721.209 563.84 721.969 564.34 722.989 564.34 cv
724.009 564.34 724.769 563.84 725.289 562.84 cv
725.789 561.84 726.049 560.34 726.049 558.34 cv
726.049 556.34 725.789 554.84 725.289 553.84 cv
724.769 552.84 724.009 552.34 722.989 552.34 cv
722.989 550.78 mo
724.609 550.78 725.849 551.44 726.729 552.72 cv
727.589 554.02 728.029 555.9 728.029 558.34 cv
728.029 560.8 727.589 562.68 726.729 563.96 cv
725.849 565.24 724.609 565.88 722.989 565.88 cv
721.349 565.88 720.089 565.24 719.229 563.96 cv
718.369 562.68 717.949 560.8 717.949 558.34 cv
717.949 555.9 718.369 554.02 719.229 552.72 cv
720.089 551.44 721.349 550.78 722.989 550.78 cv
f
907.028 543.417 mo
907.028 546.917 li
f
907.028 543.417 mo
907.028 546.917 li
@
894.31 558.7 mo
893.37 558.7 892.63 558.96 892.09 559.46 cv
891.55 559.96 891.29 560.64 891.29 561.52 cv
891.29 562.4 891.55 563.1 892.09 563.6 cv
892.63 564.1 893.37 564.34 894.31 564.34 cv
895.23 564.34 895.97 564.1 896.51 563.58 cv
897.05 563.08 897.33 562.4 897.33 561.52 cv
897.33 560.64 897.05 559.96 896.53 559.46 cv
895.99 558.96 895.25 558.7 894.31 558.7 cv
892.33 557.86 mo
891.49 557.66 890.83 557.26 890.35 556.68 cv
889.87 556.1 889.65 555.4 889.65 554.56 cv
889.65 553.4 890.05 552.48 890.89 551.8 cv
891.71 551.12 892.85 550.78 894.31 550.78 cv
895.75 550.78 896.89 551.12 897.73 551.8 cv
898.55 552.48 898.97 553.4 898.97 554.56 cv
898.97 555.4 898.73 556.1 898.25 556.68 cv
897.77 557.26 897.13 557.66 896.29 557.86 cv
897.23 558.08 897.97 558.52 898.51 559.16 cv
899.03 559.8 899.31 560.6 899.31 561.52 cv
899.31 562.94 898.87 564.02 898.01 564.76 cv
897.13 565.52 895.91 565.88 894.31 565.88 cv
892.69 565.88 891.45 565.52 890.59 564.76 cv
889.73 564.02 889.31 562.94 889.31 561.52 cv
889.31 560.6 889.57 559.8 890.11 559.16 cv
890.63 558.52 891.37 558.08 892.33 557.86 cv
891.61 554.74 mo
891.61 555.5 891.83 556.1 892.31 556.52 cv
892.79 556.94 893.45 557.14 894.31 557.14 cv
895.15 557.14 895.81 556.94 896.29 556.52 cv
896.77 556.1 897.01 555.5 897.01 554.74 cv
897.01 553.98 896.77 553.4 896.29 552.98 cv
895.81 552.56 895.15 552.34 894.31 552.34 cv
893.45 552.34 892.79 552.56 892.31 552.98 cv
891.83 553.4 891.61 553.98 891.61 554.74 cv
f
907.03 552.34 mo
906.01 552.34 905.25 552.84 904.73 553.84 cv
904.21 554.84 903.97 556.34 903.97 558.34 cv
903.97 560.34 904.21 561.84 904.73 562.84 cv
905.25 563.84 906.01 564.34 907.03 564.34 cv
908.05 564.34 908.81 563.84 909.33 562.84 cv
909.83 561.84 910.09 560.34 910.09 558.34 cv
910.09 556.34 909.83 554.84 909.33 553.84 cv
908.81 552.84 908.05 552.34 907.03 552.34 cv
907.03 550.78 mo
908.65 550.78 909.89 551.44 910.77 552.72 cv
911.63 554.02 912.07 555.9 912.07 558.34 cv
912.07 560.8 911.63 562.68 910.77 563.96 cv
909.89 565.24 908.65 565.88 907.03 565.88 cv
905.39 565.88 904.13 565.24 903.27 563.96 cv
902.41 562.68 901.99 560.8 901.99 558.34 cv
901.99 555.9 902.41 554.02 903.27 552.72 cv
904.13 551.44 905.39 550.78 907.03 550.78 cv
f
919.75 552.34 mo
918.73 552.34 917.97 552.84 917.45 553.84 cv
916.93 554.84 916.69 556.34 916.69 558.34 cv
916.69 560.34 916.93 561.84 917.45 562.84 cv
917.97 563.84 918.73 564.34 919.75 564.34 cv
920.77 564.34 921.53 563.84 922.05 562.84 cv
922.55 561.84 922.81 560.34 922.81 558.34 cv
922.81 556.34 922.55 554.84 922.05 553.84 cv
921.53 552.84 920.77 552.34 919.75 552.34 cv
919.75 550.78 mo
921.37 550.78 922.61 551.44 923.49 552.72 cv
924.35 554.02 924.79 555.9 924.79 558.34 cv
924.79 560.8 924.35 562.68 923.49 563.96 cv
922.61 565.24 921.37 565.88 919.75 565.88 cv
918.11 565.88 916.85 565.24 915.99 563.96 cv
915.13 562.68 914.71 560.8 914.71 558.34 cv
914.71 555.9 915.13 554.02 915.99 552.72 cv
916.85 551.44 918.11 550.78 919.75 550.78 cv
f
1103.79 543.417 mo
1103.79 546.917 li
f
1103.79 543.417 mo
1103.79 546.917 li
@
1080.83 563.96 mo
1084.05 563.96 li
1084.05 552.84 li
1080.55 553.54 li
1080.55 551.74 li
1084.03 551.04 li
1086.01 551.04 li
1086.01 563.96 li
1089.23 563.96 li
1089.23 565.62 li
1080.83 565.62 li
1080.83 563.96 li
f
1097.43 552.34 mo
1096.41 552.34 1095.65 552.84 1095.13 553.84 cv
1094.61 554.84 1094.37 556.34 1094.37 558.34 cv
1094.37 560.34 1094.61 561.84 1095.13 562.84 cv
1095.65 563.84 1096.41 564.34 1097.43 564.34 cv
1098.45 564.34 1099.21 563.84 1099.73 562.84 cv
1100.23 561.84 1100.49 560.34 1100.49 558.34 cv
1100.49 556.34 1100.23 554.84 1099.73 553.84 cv
1099.21 552.84 1098.45 552.34 1097.43 552.34 cv
1097.43 550.78 mo
1099.05 550.78 1100.29 551.44 1101.17 552.72 cv
1102.03 554.02 1102.47 555.9 1102.47 558.34 cv
1102.47 560.8 1102.03 562.68 1101.17 563.96 cv
1100.29 565.24 1099.05 565.88 1097.43 565.88 cv
1095.79 565.88 1094.53 565.24 1093.67 563.96 cv
1092.81 562.68 1092.39 560.8 1092.39 558.34 cv
1092.39 555.9 1092.81 554.02 1093.67 552.72 cv
1094.53 551.44 1095.79 550.78 1097.43 550.78 cv
f
1110.15 552.34 mo
1109.13 552.34 1108.37 552.84 1107.85 553.84 cv
1107.33 554.84 1107.09 556.34 1107.09 558.34 cv
1107.09 560.34 1107.33 561.84 1107.85 562.84 cv
1108.37 563.84 1109.13 564.34 1110.15 564.34 cv
1111.17 564.34 1111.93 563.84 1112.45 562.84 cv
1112.95 561.84 1113.21 560.34 1113.21 558.34 cv
1113.21 556.34 1112.95 554.84 1112.45 553.84 cv
1111.93 552.84 1111.17 552.34 1110.15 552.34 cv
1110.15 550.78 mo
1111.77 550.78 1113.01 551.44 1113.89 552.72 cv
1114.75 554.02 1115.19 555.9 1115.19 558.34 cv
1115.19 560.8 1114.75 562.68 1113.89 563.96 cv
1113.01 565.24 1111.77 565.88 1110.15 565.88 cv
1108.51 565.88 1107.25 565.24 1106.39 563.96 cv
1105.53 562.68 1105.11 560.8 1105.11 558.34 cv
1105.11 555.9 1105.53 554.02 1106.39 552.72 cv
1107.25 551.44 1108.51 550.78 1110.15 550.78 cv
f
1122.87 552.34 mo
1121.85 552.34 1121.09 552.84 1120.57 553.84 cv
1120.05 554.84 1119.81 556.34 1119.81 558.34 cv
1119.81 560.34 1120.05 561.84 1120.57 562.84 cv
1121.09 563.84 1121.85 564.34 1122.87 564.34 cv
1123.89 564.34 1124.65 563.84 1125.17 562.84 cv
1125.67 561.84 1125.93 560.34 1125.93 558.34 cv
1125.93 556.34 1125.67 554.84 1125.17 553.84 cv
1124.65 552.84 1123.89 552.34 1122.87 552.34 cv
1122.87 550.78 mo
1124.49 550.78 1125.73 551.44 1126.61 552.72 cv
1127.47 554.02 1127.91 555.9 1127.91 558.34 cv
1127.91 560.8 1127.47 562.68 1126.61 563.96 cv
1125.73 565.24 1124.49 565.88 1122.87 565.88 cv
1121.23 565.88 1119.97 565.24 1119.11 563.96 cv
1118.25 562.68 1117.83 560.8 1117.83 558.34 cv
1117.83 555.9 1118.25 554.02 1119.11 552.72 cv
1119.97 551.44 1121.23 550.78 1122.87 550.78 cv
f
578.303 574.4 mo
587.523 574.4 li
587.523 576.06 li
580.283 576.06 li
580.283 580.38 li
587.223 580.38 li
587.223 582.04 li
580.283 582.04 li
580.283 587.32 li
587.703 587.32 li
587.703 588.98 li
578.303 588.98 li
578.303 574.4 li
f
592.603 587.34 mo
592.603 593.12 li
590.803 593.12 li
590.803 578.04 li
592.603 578.04 li
592.603 579.7 li
592.963 579.06 593.443 578.58 594.023 578.26 cv
594.603 577.94 595.303 577.78 596.103 577.78 cv
597.423 577.78 598.503 578.32 599.343 579.36 cv
600.163 580.42 600.583 581.8 600.583 583.52 cv
600.583 585.24 600.163 586.64 599.343 587.68 cv
598.503 588.72 597.423 589.24 596.103 589.24 cv
595.303 589.24 594.603 589.08 594.023 588.78 cv
593.443 588.48 592.963 588 592.603 587.34 cv
598.723 583.52 mo
598.723 582.2 598.443 581.18 597.903 580.42 cv
597.343 579.66 596.603 579.28 595.663 579.28 cv
594.703 579.28 593.963 579.66 593.423 580.42 cv
592.863 581.18 592.603 582.2 592.603 583.52 cv
592.603 584.84 592.863 585.88 593.423 586.64 cv
593.963 587.4 594.703 587.76 595.663 587.76 cv
596.603 587.76 597.343 587.4 597.903 586.64 cv
598.443 585.88 598.723 584.84 598.723 583.52 cv
f
607.803 579.3 mo
606.843 579.3 606.083 579.68 605.523 580.44 cv
604.963 581.2 604.683 582.22 604.683 583.52 cv
604.683 584.84 604.943 585.86 605.503 586.62 cv
606.063 587.38 606.823 587.74 607.803 587.74 cv
608.763 587.74 609.523 587.38 610.083 586.62 cv
610.643 585.86 610.923 584.84 610.923 583.52 cv
610.923 582.24 610.643 581.2 610.083 580.44 cv
609.523 579.68 608.763 579.3 607.803 579.3 cv
607.803 577.78 mo
609.363 577.78 610.583 578.3 611.483 579.3 cv
612.363 580.32 612.823 581.72 612.823 583.52 cv
612.823 585.32 612.363 586.72 611.483 587.72 cv
610.583 588.74 609.363 589.24 607.803 589.24 cv
606.223 589.24 604.983 588.74 604.103 587.72 cv
603.223 586.72 602.783 585.32 602.783 583.52 cv
602.783 581.72 603.223 580.32 604.103 579.3 cv
604.983 578.3 606.223 577.78 607.803 577.78 cv
f
623.683 578.46 mo
623.683 580.14 li
623.163 579.86 622.663 579.66 622.143 579.52 cv
621.623 579.38 621.123 579.3 620.603 579.3 cv
619.443 579.3 618.523 579.68 617.883 580.42 cv
617.243 581.16 616.923 582.2 616.923 583.52 cv
616.923 584.86 617.243 585.9 617.883 586.64 cv
618.523 587.38 619.443 587.74 620.603 587.74 cv
621.123 587.74 621.623 587.68 622.143 587.54 cv
622.663 587.4 623.163 587.18 623.683 586.9 cv
623.683 588.56 li
623.163 588.8 622.643 588.98 622.123 589.08 cv
621.583 589.18 621.003 589.24 620.403 589.24 cv
618.763 589.24 617.443 588.74 616.483 587.7 cv
615.503 586.68 615.023 585.28 615.023 583.52 cv
615.023 581.74 615.503 580.34 616.483 579.32 cv
617.463 578.3 618.803 577.78 620.523 577.78 cv
621.083 577.78 621.623 577.84 622.143 577.96 cv
622.663 578.08 623.183 578.24 623.683 578.46 cv
f
635.903 582.38 mo
635.903 588.98 li
634.103 588.98 li
634.103 582.44 li
634.103 581.4 633.883 580.64 633.483 580.12 cv
633.083 579.6 632.483 579.34 631.683 579.34 cv
630.703 579.34 629.943 579.66 629.383 580.28 cv
628.823 580.9 628.543 581.74 628.543 582.8 cv
628.543 588.98 li
626.743 588.98 li
626.743 573.78 li
628.543 573.78 li
628.543 579.74 li
628.963 579.1 629.463 578.6 630.063 578.28 cv
630.643 577.96 631.323 577.78 632.083 577.78 cv
633.323 577.78 634.283 578.18 634.923 578.96 cv
635.563 579.74 635.903 580.88 635.903 582.38 cv
f
71.2883 505.471 mo
67.7883 505.471 li
f
71.2883 505.471 mo
67.7883 505.471 li
@
38.8514 499.793 mo
37.8314 499.793 37.0714 500.293 36.5514 501.293 cv
36.0314 502.293 35.7914 503.793 35.7914 505.793 cv
35.7914 507.793 36.0314 509.293 36.5514 510.293 cv
37.0714 511.293 37.8314 511.793 38.8514 511.793 cv
39.8714 511.793 40.6314 511.293 41.1514 510.293 cv
41.6514 509.293 41.9114 507.793 41.9114 505.793 cv
41.9114 503.793 41.6514 502.293 41.1514 501.293 cv
40.6314 500.293 39.8714 499.793 38.8514 499.793 cv
38.8514 498.233 mo
40.4714 498.233 41.7114 498.893 42.5914 500.173 cv
43.4514 501.473 43.8914 503.353 43.8914 505.793 cv
43.8914 508.253 43.4514 510.133 42.5914 511.413 cv
41.7114 512.693 40.4714 513.333 38.8514 513.333 cv
37.2114 513.333 35.9514 512.693 35.0914 511.413 cv
34.2314 510.133 33.8114 508.253 33.8114 505.793 cv
33.8114 503.353 34.2314 501.473 35.0914 500.173 cv
35.9514 498.893 37.2114 498.233 38.8514 498.233 cv
f
47.3514 510.592 mo
49.4114 510.592 li
49.4114 513.073 li
47.3514 513.073 li
47.3514 510.592 li
f
55.4113 511.413 mo
62.2913 511.413 li
62.2913 513.073 li
53.0313 513.073 li
53.0313 511.413 li
53.7713 510.652 54.7913 509.613 56.0913 508.293 cv
57.3713 506.993 58.1913 506.152 58.5313 505.773 cv
59.1713 505.073 59.6113 504.473 59.8513 503.973 cv
60.0913 503.493 60.2313 502.993 60.2313 502.513 cv
60.2313 501.753 59.9513 501.113 59.4113 500.633 cv
58.8713 500.152 58.1713 499.893 57.2913 499.893 cv
56.6713 499.893 56.0113 500.013 55.3313 500.213 cv
54.6513 500.432 53.9113 500.753 53.1313 501.193 cv
53.1313 499.193 li
53.9313 498.872 54.6713 498.633 55.3513 498.473 cv
56.0313 498.313 56.6713 498.233 57.2513 498.233 cv
58.7513 498.233 59.9513 498.613 60.8513 499.372 cv
61.7513 500.133 62.2113 501.133 62.2113 502.393 cv
62.2113 502.993 62.0913 503.573 61.8713 504.092 cv
61.6513 504.633 61.2513 505.273 60.6513 505.993 cv
60.4913 506.193 59.9713 506.733 59.0913 507.633 cv
58.2113 508.533 56.9913 509.793 55.4113 511.413 cv
f
71.2883 445.26 mo
67.7883 445.26 li
f
71.2883 445.26 mo
67.7883 445.26 li
@
38.8514 439.582 mo
37.8314 439.582 37.0714 440.082 36.5514 441.082 cv
36.0314 442.082 35.7914 443.582 35.7914 445.582 cv
35.7914 447.582 36.0314 449.082 36.5514 450.082 cv
37.0714 451.082 37.8314 451.582 38.8514 451.582 cv
39.8714 451.582 40.6314 451.082 41.1514 450.082 cv
41.6514 449.082 41.9114 447.582 41.9114 445.582 cv
41.9114 443.582 41.6514 442.082 41.1514 441.082 cv
40.6314 440.082 39.8714 439.582 38.8514 439.582 cv
38.8514 438.022 mo
40.4714 438.022 41.7114 438.682 42.5914 439.962 cv
43.4514 441.262 43.8914 443.142 43.8914 445.582 cv
43.8914 448.042 43.4514 449.922 42.5914 451.202 cv
41.7114 452.482 40.4714 453.122 38.8514 453.122 cv
37.2114 453.122 35.9514 452.482 35.0914 451.202 cv
34.2314 449.922 33.8114 448.042 33.8114 445.582 cv
33.8114 443.142 34.2314 441.262 35.0914 439.962 cv
35.9514 438.682 37.2114 438.022 38.8514 438.022 cv
f
47.3514 450.382 mo
49.4114 450.382 li
49.4114 452.862 li
47.3514 452.862 li
47.3514 450.382 li
f
59.6913 445.002 mo
60.6313 445.202 61.3713 445.622 61.8913 446.262 cv
62.4113 446.902 62.6913 447.702 62.6913 448.622 cv
62.6913 450.062 62.1913 451.182 61.2113 451.962 cv
60.2113 452.742 58.8113 453.122 56.9913 453.122 cv
56.3713 453.122 55.7313 453.062 55.0913 452.942 cv
54.4513 452.842 53.7713 452.662 53.0913 452.422 cv
53.0913 450.522 li
53.6313 450.842 54.2313 451.082 54.8913 451.242 cv
55.5313 451.402 56.2113 451.482 56.9313 451.482 cv
58.1713 451.482 59.1113 451.242 59.7513 450.762 cv
60.3913 450.282 60.7313 449.562 60.7313 448.622 cv
60.7313 447.782 60.4313 447.102 59.8313 446.622 cv
59.2313 446.142 58.3913 445.882 57.3113 445.882 cv
55.6113 445.882 li
55.6113 444.262 li
57.3913 444.262 li
58.3513 444.262 59.0913 444.082 59.6113 443.682 cv
60.1313 443.302 60.3913 442.742 60.3913 442.002 cv
60.3913 441.262 60.1113 440.682 59.5913 440.282 cv
59.0513 439.882 58.2913 439.682 57.3113 439.682 cv
56.7713 439.682 56.1913 439.742 55.5713 439.862 cv
54.9513 439.982 54.2713 440.162 53.5313 440.402 cv
53.5313 438.642 li
54.2713 438.442 54.9713 438.282 55.6313 438.182 cv
56.2713 438.082 56.8913 438.022 57.4913 438.022 cv
58.9713 438.022 60.1513 438.362 61.0313 439.042 cv
61.9113 439.722 62.3513 440.642 62.3513 441.802 cv
62.3513 442.602 62.1113 443.282 61.6513 443.842 cv
61.1913 444.402 60.5313 444.802 59.6913 445.002 cv
f
71.2883 385.049 mo
67.7883 385.049 li
f
71.2883 385.049 mo
67.7883 385.049 li
@
38.8514 379.371 mo
37.8314 379.371 37.0714 379.871 36.5514 380.871 cv
36.0314 381.871 35.7914 383.371 35.7914 385.371 cv
35.7914 387.371 36.0314 388.871 36.5514 389.871 cv
37.0714 390.871 37.8314 391.371 38.8514 391.371 cv
39.8714 391.371 40.6314 390.871 41.1514 389.871 cv
41.6514 388.871 41.9114 387.371 41.9114 385.371 cv
41.9114 383.371 41.6514 381.871 41.1514 380.871 cv
40.6314 379.871 39.8714 379.371 38.8514 379.371 cv
38.8514 377.811 mo
40.4714 377.811 41.7114 378.471 42.5914 379.751 cv
43.4514 381.051 43.8914 382.931 43.8914 385.371 cv
43.8914 387.831 43.4514 389.711 42.5914 390.991 cv
41.7114 392.271 40.4714 392.911 38.8514 392.911 cv
37.2114 392.911 35.9514 392.271 35.0914 390.991 cv
34.2314 389.711 33.8114 387.831 33.8114 385.371 cv
33.8114 382.931 34.2314 381.051 35.0914 379.751 cv
35.9514 378.471 37.2114 377.811 38.8514 377.811 cv
f
47.3514 390.171 mo
49.4114 390.171 li
49.4114 392.651 li
47.3514 392.651 li
47.3514 390.171 li
f
59.1313 379.791 mo
54.1513 387.571 li
59.1313 387.571 li
59.1313 379.791 li
58.6113 378.071 mo
61.0913 378.071 li
61.0913 387.571 li
63.1713 387.571 li
63.1713 389.211 li
61.0913 389.211 li
61.0913 392.651 li
59.1313 392.651 li
59.1313 389.211 li
52.5513 389.211 li
52.5513 387.311 li
58.6113 378.071 li
f
71.2883 324.839 mo
67.7883 324.839 li
f
71.2883 324.839 mo
67.7883 324.839 li
@
38.8514 319.16 mo
37.8314 319.16 37.0714 319.66 36.5514 320.66 cv
36.0314 321.66 35.7914 323.16 35.7914 325.16 cv
35.7914 327.16 36.0314 328.66 36.5514 329.66 cv
37.0714 330.66 37.8314 331.16 38.8514 331.16 cv
39.8714 331.16 40.6314 330.66 41.1514 329.66 cv
41.6514 328.66 41.9114 327.16 41.9114 325.16 cv
41.9114 323.16 41.6514 321.66 41.1514 320.66 cv
40.6314 319.66 39.8714 319.16 38.8514 319.16 cv
38.8514 317.6 mo
40.4714 317.6 41.7114 318.26 42.5914 319.54 cv
43.4514 320.84 43.8914 322.72 43.8914 325.16 cv
43.8914 327.62 43.4514 329.5 42.5914 330.78 cv
41.7114 332.06 40.4714 332.7 38.8514 332.7 cv
37.2114 332.7 35.9514 332.06 35.0914 330.78 cv
34.2314 329.5 33.8114 327.62 33.8114 325.16 cv
33.8114 322.72 34.2314 320.84 35.0914 319.54 cv
35.9514 318.26 37.2114 317.6 38.8514 317.6 cv
f
47.3514 329.96 mo
49.4114 329.96 li
49.4114 332.44 li
47.3514 332.44 li
47.3514 329.96 li
f
53.7313 317.86 mo
61.4713 317.86 li
61.4713 319.52 li
55.5313 319.52 li
55.5313 323.1 li
55.8113 323 56.1113 322.92 56.3913 322.88 cv
56.6713 322.84 56.9713 322.8 57.2513 322.8 cv
58.8713 322.8 60.1513 323.26 61.1113 324.14 cv
62.0713 325.04 62.5513 326.24 62.5513 327.76 cv
62.5513 329.34 62.0513 330.56 61.0713 331.42 cv
60.0913 332.28 58.7113 332.7 56.9513 332.7 cv
56.3313 332.7 55.7113 332.64 55.0713 332.56 cv
54.4313 332.46 53.7913 332.32 53.1113 332.1 cv
53.1113 330.12 li
53.6913 330.44 54.2913 330.68 54.9313 330.84 cv
55.5513 331 56.2113 331.06 56.9113 331.06 cv
58.0313 331.06 58.9313 330.78 59.5913 330.18 cv
60.2313 329.58 60.5713 328.78 60.5713 327.76 cv
60.5713 326.76 60.2313 325.96 59.5913 325.36 cv
58.9313 324.76 58.0313 324.46 56.9113 324.46 cv
56.3913 324.46 55.8513 324.52 55.3313 324.64 cv
54.8113 324.76 54.2713 324.94 53.7313 325.18 cv
53.7313 317.86 li
f
71.2883 264.628 mo
67.7883 264.628 li
f
71.2883 264.628 mo
67.7883 264.628 li
@
38.8514 258.95 mo
37.8314 258.95 37.0714 259.45 36.5514 260.45 cv
36.0314 261.45 35.7914 262.95 35.7914 264.95 cv
35.7914 266.95 36.0314 268.45 36.5514 269.45 cv
37.0714 270.45 37.8314 270.95 38.8514 270.95 cv
39.8714 270.95 40.6314 270.45 41.1514 269.45 cv
41.6514 268.45 41.9114 266.95 41.9114 264.95 cv
41.9114 262.95 41.6514 261.45 41.1514 260.45 cv
40.6314 259.45 39.8714 258.95 38.8514 258.95 cv
38.8514 257.39 mo
40.4714 257.39 41.7114 258.05 42.5914 259.33 cv
43.4514 260.63 43.8914 262.51 43.8914 264.95 cv
43.8914 267.41 43.4514 269.29 42.5914 270.57 cv
41.7114 271.85 40.4714 272.49 38.8514 272.49 cv
37.2114 272.49 35.9514 271.85 35.0914 270.57 cv
34.2314 269.29 33.8114 267.41 33.8114 264.95 cv
33.8114 262.51 34.2314 260.63 35.0914 259.33 cv
35.9514 258.05 37.2114 257.39 38.8514 257.39 cv
f
47.3514 269.75 mo
49.4114 269.75 li
49.4114 272.23 li
47.3514 272.23 li
47.3514 269.75 li
f
58.1713 264.15 mo
57.2913 264.15 56.5913 264.47 56.0713 265.07 cv
55.5513 265.67 55.2913 266.51 55.2913 267.55 cv
55.2913 268.61 55.5513 269.45 56.0713 270.05 cv
56.5913 270.65 57.2913 270.95 58.1713 270.95 cv
59.0513 270.95 59.7513 270.65 60.2713 270.05 cv
60.7913 269.45 61.0513 268.61 61.0513 267.55 cv
61.0513 266.51 60.7913 265.67 60.2713 265.07 cv
59.7513 264.47 59.0513 264.15 58.1713 264.15 cv
62.0913 257.97 mo
62.0913 259.77 li
61.5913 259.53 61.0913 259.35 60.5913 259.23 cv
60.0713 259.11 59.5713 259.05 59.0913 259.05 cv
57.7713 259.05 56.7713 259.49 56.0913 260.37 cv
55.4113 261.25 55.0113 262.59 54.9313 264.35 cv
55.3113 263.79 55.7913 263.35 56.3713 263.05 cv
56.9513 262.75 57.5913 262.59 58.2913 262.59 cv
59.7513 262.59 60.9113 263.05 61.7513 263.93 cv
62.5913 264.81 63.0313 266.03 63.0313 267.55 cv
63.0313 269.05 62.5713 270.25 61.6913 271.15 cv
60.8113 272.05 59.6313 272.49 58.1713 272.49 cv
56.4913 272.49 55.1913 271.85 54.3113 270.57 cv
53.4113 269.29 52.9713 267.41 52.9713 264.95 cv
52.9713 262.65 53.5113 260.81 54.6113 259.45 cv
55.6913 258.09 57.1713 257.39 59.0113 257.39 cv
59.4913 257.39 59.9913 257.45 60.5113 257.53 cv
61.0113 257.63 61.5313 257.77 62.0913 257.97 cv
f
71.2883 204.417 mo
67.7883 204.417 li
f
71.2883 204.417 mo
67.7883 204.417 li
@
38.8514 198.739 mo
37.8314 198.739 37.0714 199.239 36.5514 200.239 cv
36.0314 201.239 35.7914 202.739 35.7914 204.739 cv
35.7914 206.739 36.0314 208.239 36.5514 209.239 cv
37.0714 210.239 37.8314 210.739 38.8514 210.739 cv
39.8714 210.739 40.6314 210.239 41.1514 209.239 cv
41.6514 208.239 41.9114 206.739 41.9114 204.739 cv
41.9114 202.739 41.6514 201.239 41.1514 200.239 cv
40.6314 199.239 39.8714 198.739 38.8514 198.739 cv
38.8514 197.179 mo
40.4714 197.179 41.7114 197.839 42.5914 199.119 cv
43.4514 200.419 43.8914 202.299 43.8914 204.739 cv
43.8914 207.199 43.4514 209.079 42.5914 210.359 cv
41.7114 211.639 40.4714 212.279 38.8514 212.279 cv
37.2114 212.279 35.9514 211.639 35.0914 210.359 cv
34.2314 209.079 33.8114 207.199 33.8114 204.739 cv
33.8114 202.299 34.2314 200.419 35.0914 199.119 cv
35.9514 197.839 37.2114 197.179 38.8514 197.179 cv
f
47.3514 209.539 mo
49.4114 209.539 li
49.4114 212.019 li
47.3514 212.019 li
47.3514 209.539 li
f
53.2113 197.439 mo
62.5913 197.439 li
62.5913 198.279 li
57.2913 212.019 li
55.2313 212.019 li
60.2113 199.099 li
53.2113 199.099 li
53.2113 197.439 li
f
71.2883 144.207 mo
67.7883 144.207 li
f
71.2883 144.207 mo
67.7883 144.207 li
@
38.8514 138.528 mo
37.8314 138.528 37.0714 139.028 36.5514 140.028 cv
36.0314 141.028 35.7914 142.528 35.7914 144.528 cv
35.7914 146.528 36.0314 148.028 36.5514 149.028 cv
37.0714 150.028 37.8314 150.528 38.8514 150.528 cv
39.8714 150.528 40.6314 150.028 41.1514 149.028 cv
41.6514 148.028 41.9114 146.528 41.9114 144.528 cv
41.9114 142.528 41.6514 141.028 41.1514 140.028 cv
40.6314 139.028 39.8714 138.528 38.8514 138.528 cv
38.8514 136.968 mo
40.4714 136.968 41.7114 137.628 42.5914 138.908 cv
43.4514 140.208 43.8914 142.088 43.8914 144.528 cv
43.8914 146.988 43.4514 148.868 42.5914 150.148 cv
41.7114 151.428 40.4714 152.068 38.8514 152.068 cv
37.2114 152.068 35.9514 151.428 35.0914 150.148 cv
34.2314 148.868 33.8114 146.988 33.8114 144.528 cv
33.8114 142.088 34.2314 140.208 35.0914 138.908 cv
35.9514 137.628 37.2114 136.968 38.8514 136.968 cv
f
47.3514 149.328 mo
49.4114 149.328 li
49.4114 151.808 li
47.3514 151.808 li
47.3514 149.328 li
f
57.9313 144.888 mo
56.9913 144.888 56.2513 145.148 55.7113 145.648 cv
55.1713 146.148 54.9113 146.828 54.9113 147.708 cv
54.9113 148.588 55.1713 149.288 55.7113 149.788 cv
56.2513 150.288 56.9913 150.528 57.9313 150.528 cv
58.8513 150.528 59.5913 150.288 60.1313 149.768 cv
60.6713 149.268 60.9513 148.588 60.9513 147.708 cv
60.9513 146.828 60.6713 146.148 60.1513 145.648 cv
59.6113 145.148 58.8713 144.888 57.9313 144.888 cv
55.9513 144.048 mo
55.1113 143.848 54.4513 143.448 53.9713 142.868 cv
53.4913 142.288 53.2713 141.588 53.2713 140.748 cv
53.2713 139.588 53.6713 138.668 54.5113 137.988 cv
55.3313 137.308 56.4713 136.968 57.9313 136.968 cv
59.3713 136.968 60.5113 137.308 61.3513 137.988 cv
62.1713 138.668 62.5913 139.588 62.5913 140.748 cv
62.5913 141.588 62.3513 142.288 61.8713 142.868 cv
61.3913 143.448 60.7513 143.848 59.9113 144.048 cv
60.8513 144.268 61.5913 144.708 62.1313 145.348 cv
62.6513 145.988 62.9313 146.788 62.9313 147.708 cv
62.9313 149.128 62.4913 150.208 61.6313 150.948 cv
60.7513 151.708 59.5313 152.068 57.9313 152.068 cv
56.3113 152.068 55.0713 151.708 54.2113 150.948 cv
53.3513 150.208 52.9313 149.128 52.9313 147.708 cv
52.9313 146.788 53.1913 145.988 53.7313 145.348 cv
54.2513 144.708 54.9913 144.268 55.9513 144.048 cv
55.2313 140.928 mo
55.2313 141.688 55.4513 142.288 55.9313 142.708 cv
56.4113 143.128 57.0713 143.328 57.9313 143.328 cv
58.7713 143.328 59.4313 143.128 59.9113 142.708 cv
60.3913 142.288 60.6313 141.688 60.6313 140.928 cv
60.6313 140.168 60.3913 139.588 59.9113 139.168 cv
59.4313 138.748 58.7713 138.528 57.9313 138.528 cv
57.0713 138.528 56.4113 138.748 55.9313 139.168 cv
55.4513 139.588 55.2313 140.168 55.2313 140.928 cv
f
71.2883 83.9958 mo
67.7883 83.9958 li
f
71.2883 83.9958 mo
67.7883 83.9958 li
@
38.8514 78.3174 mo
37.8314 78.3174 37.0714 78.8174 36.5514 79.8174 cv
36.0314 80.8174 35.7914 82.3174 35.7914 84.3174 cv
35.7914 86.3174 36.0314 87.8174 36.5514 88.8174 cv
37.0714 89.8174 37.8314 90.3174 38.8514 90.3174 cv
39.8714 90.3174 40.6314 89.8174 41.1514 88.8174 cv
41.6514 87.8174 41.9114 86.3174 41.9114 84.3174 cv
41.9114 82.3174 41.6514 80.8174 41.1514 79.8174 cv
40.6314 78.8174 39.8714 78.3174 38.8514 78.3174 cv
38.8514 76.7573 mo
40.4714 76.7573 41.7114 77.4174 42.5914 78.6973 cv
43.4514 79.9974 43.8914 81.8773 43.8914 84.3174 cv
43.8914 86.7774 43.4514 88.6573 42.5914 89.9373 cv
41.7114 91.2174 40.4714 91.8574 38.8514 91.8574 cv
37.2114 91.8574 35.9514 91.2174 35.0914 89.9373 cv
34.2314 88.6573 33.8114 86.7774 33.8114 84.3174 cv
33.8114 81.8773 34.2314 79.9974 35.0914 78.6973 cv
35.9514 77.4174 37.2114 76.7573 38.8514 76.7573 cv
f
47.3514 89.1173 mo
49.4114 89.1173 li
49.4114 91.5974 li
47.3514 91.5974 li
47.3514 89.1173 li
f
53.7713 91.2973 mo
53.7713 89.4974 li
54.2513 89.7374 54.7513 89.9174 55.2713 90.0374 cv
55.7713 90.1573 56.2713 90.2174 56.7713 90.2174 cv
58.0513 90.2174 59.0513 89.7973 59.7313 88.9174 cv
60.4113 88.0374 60.8113 86.7174 60.9313 84.9174 cv
60.5313 85.4773 60.0513 85.9174 59.4913 86.2174 cv
58.9113 86.5173 58.2713 86.6573 57.5713 86.6573 cv
56.0913 86.6573 54.9313 86.2174 54.0913 85.3373 cv
53.2513 84.4574 52.8313 83.2574 52.8313 81.7173 cv
52.8313 80.2374 53.2713 79.0374 54.1513 78.1173 cv
55.0313 77.2173 56.2113 76.7573 57.6913 76.7573 cv
59.3713 76.7573 60.6713 77.4174 61.5513 78.6973 cv
62.4313 79.9974 62.8913 81.8773 62.8913 84.3174 cv
62.8913 86.6374 62.3313 88.4574 61.2513 89.8174 cv
60.1513 91.1774 58.6913 91.8574 56.8513 91.8574 cv
56.3513 91.8574 55.8513 91.7973 55.3513 91.7174 cv
54.8313 91.6374 54.3113 91.4974 53.7713 91.2973 cv
57.6913 85.1173 mo
58.5713 85.1173 59.2713 84.8174 59.7913 84.2174 cv
60.3113 83.6173 60.5713 82.7774 60.5713 81.7173 cv
60.5713 80.6774 60.3113 79.8373 59.7913 79.2374 cv
59.2713 78.6374 58.5713 78.3174 57.6913 78.3174 cv
56.8113 78.3174 56.1113 78.6374 55.5913 79.2374 cv
55.0713 79.8373 54.8113 80.6774 54.8113 81.7173 cv
54.8113 82.7774 55.0713 83.6173 55.5913 84.2174 cv
56.1113 84.8174 56.8113 85.1173 57.6913 85.1173 cv
f
71.2883 23.785 mo
67.7883 23.785 li
f
71.2883 23.785 mo
67.7883 23.785 li
@
34.9714 29.7266 mo
38.1914 29.7266 li
38.1914 18.6066 li
34.6914 19.3066 li
34.6914 17.5066 li
38.1714 16.8066 li
40.1514 16.8066 li
40.1514 29.7266 li
43.3714 29.7266 li
43.3714 31.3866 li
34.9714 31.3866 li
34.9714 29.7266 li
f
47.3514 28.9066 mo
49.4114 28.9066 li
49.4114 31.3866 li
47.3514 31.3866 li
47.3514 28.9066 li
f
57.9313 18.1066 mo
56.9113 18.1066 56.1513 18.6066 55.6313 19.6066 cv
55.1113 20.6066 54.8713 22.1066 54.8713 24.1066 cv
54.8713 26.1066 55.1113 27.6066 55.6313 28.6066 cv
56.1513 29.6066 56.9113 30.1066 57.9313 30.1066 cv
58.9513 30.1066 59.7113 29.6066 60.2313 28.6066 cv
60.7313 27.6066 60.9913 26.1066 60.9913 24.1066 cv
60.9913 22.1066 60.7313 20.6066 60.2313 19.6066 cv
59.7113 18.6066 58.9513 18.1066 57.9313 18.1066 cv
57.9313 16.5466 mo
59.5513 16.5466 60.7913 17.2066 61.6713 18.4866 cv
62.5313 19.7866 62.9713 21.6666 62.9713 24.1066 cv
62.9713 26.5666 62.5313 28.4466 61.6713 29.7266 cv
60.7913 31.0066 59.5513 31.6466 57.9313 31.6466 cv
56.2913 31.6466 55.0313 31.0066 54.1713 29.7266 cv
53.3113 28.4466 52.8913 26.5666 52.8913 24.1066 cv
52.8913 21.6666 53.3113 19.7866 54.1713 18.4866 cv
55.0313 17.2066 56.2913 16.5466 57.9313 16.5466 cv
f
11.6952 340.134 mo
18.9552 342.814 li
18.9552 337.454 li
11.6952 340.134 li
9.75516 341.254 mo
9.75516 339.014 li
24.3352 333.454 li
24.3352 335.514 li
20.5952 336.834 li
20.5952 343.414 li
24.3352 344.734 li
24.3352 346.814 li
9.75516 341.254 li
f
13.8152 323.534 mo
15.4952 323.534 li
15.2152 324.054 15.0152 324.554 14.8752 325.074 cv
14.7352 325.594 14.6552 326.094 14.6552 326.614 cv
14.6552 327.774 15.0352 328.694 15.7752 329.334 cv
16.5152 329.974 17.5552 330.294 18.8752 330.294 cv
20.2152 330.294 21.2552 329.974 21.9952 329.334 cv
22.7352 328.694 23.0952 327.774 23.0952 326.614 cv
23.0952 326.094 23.0352 325.594 22.8952 325.074 cv
22.7552 324.554 22.5352 324.054 22.2552 323.534 cv
23.9152 323.534 li
24.1552 324.054 24.3352 324.574 24.4352 325.094 cv
24.5352 325.634 24.5952 326.214 24.5952 326.814 cv
24.5952 328.454 24.0952 329.774 23.0552 330.734 cv
22.0352 331.714 20.6352 332.194 18.8752 332.194 cv
17.0952 332.194 15.6952 331.714 14.6752 330.734 cv
13.6552 329.754 13.1352 328.414 13.1352 326.694 cv
13.1352 326.134 13.1952 325.594 13.3152 325.074 cv
13.4352 324.554 13.5952 324.034 13.8152 323.534 cv
f
13.8152 312.534 mo
15.4952 312.534 li
15.2152 313.054 15.0152 313.554 14.8752 314.074 cv
14.7352 314.594 14.6552 315.094 14.6552 315.614 cv
14.6552 316.774 15.0352 317.694 15.7752 318.334 cv
16.5152 318.974 17.5552 319.294 18.8752 319.294 cv
20.2152 319.294 21.2552 318.974 21.9952 318.334 cv
22.7352 317.694 23.0952 316.774 23.0952 315.614 cv
23.0952 315.094 23.0352 314.594 22.8952 314.074 cv
22.7552 313.554 22.5352 313.054 22.2552 312.534 cv
23.9152 312.534 li
24.1552 313.054 24.3352 313.574 24.4352 314.094 cv
24.5352 314.634 24.5952 315.214 24.5952 315.814 cv
24.5952 317.454 24.0952 318.774 23.0552 319.734 cv
22.0352 320.714 20.6352 321.194 18.8752 321.194 cv
17.0952 321.194 15.6952 320.714 14.6752 319.734 cv
13.6552 318.754 13.1352 317.414 13.1352 315.694 cv
13.1352 315.134 13.1952 314.594 13.3152 314.074 cv
13.4352 313.554 13.5952 313.034 13.8152 312.534 cv
f
20.0152 309.594 mo
13.3952 309.594 li
13.3952 307.794 li
19.9552 307.794 li
20.9952 307.794 21.7552 307.594 22.2752 307.194 cv
22.7952 306.794 23.0552 306.194 23.0552 305.374 cv
23.0552 304.414 22.7552 303.634 22.1352 303.074 cv
21.5152 302.514 20.6752 302.234 19.5952 302.234 cv
13.3952 302.234 li
13.3952 300.434 li
24.3352 300.434 li
24.3352 302.234 li
22.6552 302.234 li
23.3352 302.674 23.8152 303.194 24.1352 303.754 cv
24.4352 304.334 24.5952 304.994 24.5952 305.754 cv
24.5952 307.014 24.2152 307.974 23.4352 308.614 cv
22.6752 309.274 21.5352 309.594 20.0152 309.594 cv
13.1352 305.074 mo
13.1352 305.074 li
f
15.0752 290.394 mo
14.9552 290.594 14.8752 290.814 14.8152 291.054 cv
14.7752 291.294 14.7352 291.554 14.7352 291.834 cv
14.7352 292.854 15.0752 293.634 15.7352 294.174 cv
16.3952 294.734 17.3352 294.994 18.5752 294.994 cv
24.3352 294.994 li
24.3352 296.794 li
13.3952 296.794 li
13.3952 294.994 li
15.0952 294.994 li
14.4352 294.634 13.9352 294.134 13.6152 293.534 cv
13.2952 292.934 13.1352 292.194 13.1352 291.314 cv
13.1352 291.194 13.1552 291.054 13.1552 290.894 cv
13.1752 290.754 13.1952 290.594 13.2352 290.394 cv
15.0752 290.394 li
f
18.8352 283.534 mo
18.8352 284.994 19.0152 285.994 19.3352 286.554 cv
19.6752 287.114 20.2352 287.394 21.0352 287.394 cv
21.6752 287.394 22.1952 287.194 22.5552 286.774 cv
22.9352 286.354 23.1152 285.774 23.1152 285.054 cv
23.1152 284.054 22.7752 283.254 22.0552 282.654 cv
21.3552 282.054 20.4152 281.754 19.2352 281.754 cv
18.8352 281.754 li
18.8352 283.534 li
18.0952 279.954 mo
24.3352 279.954 li
24.3352 281.754 li
22.6752 281.754 li
23.3552 282.174 23.8352 282.694 24.1352 283.294 cv
24.4352 283.894 24.5952 284.654 24.5952 285.534 cv
24.5952 286.654 24.2952 287.554 23.6752 288.214 cv
23.0552 288.874 22.2152 289.194 21.1552 289.194 cv
19.9352 289.194 19.0152 288.794 18.3752 287.954 cv
17.7552 287.134 17.4352 285.914 17.4352 284.274 cv
17.4352 281.754 li
17.2552 281.754 li
16.4352 281.754 15.7952 282.034 15.3352 282.574 cv
14.8952 283.114 14.6552 283.874 14.6552 284.854 cv
14.6552 285.494 14.7352 286.094 14.8952 286.694 cv
15.0552 287.294 15.2752 287.854 15.5552 288.394 cv
13.8952 288.394 li
13.6552 287.754 13.4552 287.114 13.3352 286.494 cv
13.2152 285.874 13.1352 285.274 13.1352 284.674 cv
13.1352 283.094 13.5552 281.914 14.3752 281.134 cv
15.1952 280.354 16.4352 279.954 18.0952 279.954 cv
f
13.8152 268.374 mo
15.4952 268.374 li
15.2152 268.894 15.0152 269.394 14.8752 269.914 cv
14.7352 270.434 14.6552 270.934 14.6552 271.454 cv
14.6552 272.614 15.0352 273.534 15.7752 274.174 cv
16.5152 274.814 17.5552 275.134 18.8752 275.134 cv
20.2152 275.134 21.2552 274.814 21.9952 274.174 cv
22.7352 273.534 23.0952 272.614 23.0952 271.454 cv
23.0952 270.934 23.0352 270.434 22.8952 269.914 cv
22.7552 269.394 22.5352 268.894 22.2552 268.374 cv
23.9152 268.374 li
24.1552 268.894 24.3352 269.414 24.4352 269.934 cv
24.5352 270.474 24.5952 271.054 24.5952 271.654 cv
24.5952 273.294 24.0952 274.614 23.0552 275.574 cv
22.0352 276.554 20.6352 277.034 18.8752 277.034 cv
17.0952 277.034 15.6952 276.554 14.6752 275.574 cv
13.6552 274.594 13.1352 273.254 13.1352 271.534 cv
13.1352 270.974 13.1952 270.434 13.3152 269.914 cv
13.4352 269.394 13.5952 268.874 13.8152 268.374 cv
f
25.3352 260.694 mo
26.6152 261.214 27.4752 261.714 27.8752 262.194 cv
28.2752 262.674 28.4752 263.314 28.4752 264.114 cv
28.4752 265.554 li
26.9752 265.554 li
26.9752 264.494 li
26.9752 264.014 26.8552 263.634 26.6152 263.354 cv
26.3752 263.074 25.8352 262.774 24.9552 262.434 cv
24.1552 262.114 li
13.3952 266.534 li
13.3952 264.634 li
21.9552 261.214 li
13.3952 257.794 li
13.3952 255.894 li
25.3352 260.694 li
f
17.4952 240.054 mo
17.6552 239.634 17.9552 239.214 18.4152 238.814 cv
18.8952 238.414 19.5352 238.014 20.3552 237.614 cv
24.3352 235.614 li
24.3352 237.734 li
20.5952 239.594 li
19.6352 240.074 18.9752 240.554 18.6552 240.994 cv
18.3352 241.454 18.1752 242.074 18.1752 242.854 cv
18.1752 244.994 li
24.3352 244.994 li
24.3352 246.974 li
9.75516 246.974 li
9.75516 242.514 li
9.75516 240.854 10.1152 239.614 10.7952 238.794 cv
11.4952 237.974 12.5552 237.554 13.9552 237.554 cv
14.8752 237.554 15.6552 237.774 16.2552 238.194 cv
16.8552 238.634 17.2752 239.254 17.4952 240.054 cv
11.3752 244.994 mo
16.5552 244.994 li
16.5552 242.514 li
16.5552 241.574 16.3352 240.854 15.8952 240.374 cv
15.4552 239.894 14.8152 239.634 13.9552 239.634 cv
13.1152 239.634 12.4752 239.894 12.0352 240.374 cv
11.5952 240.854 11.3752 241.574 11.3752 242.514 cv
11.3752 244.994 li
f
18.8352 228.174 mo
18.8352 229.634 19.0152 230.634 19.3352 231.194 cv
19.6752 231.754 20.2352 232.034 21.0352 232.034 cv
21.6752 232.034 22.1952 231.834 22.5552 231.414 cv
22.9352 230.994 23.1152 230.414 23.1152 229.694 cv
23.1152 228.694 22.7752 227.894 22.0552 227.294 cv
21.3552 226.694 20.4152 226.394 19.2352 226.394 cv
18.8352 226.394 li
18.8352 228.174 li
18.0952 224.594 mo
24.3352 224.594 li
24.3352 226.394 li
22.6752 226.394 li
23.3552 226.814 23.8352 227.334 24.1352 227.934 cv
24.4352 228.534 24.5952 229.294 24.5952 230.174 cv
24.5952 231.294 24.2952 232.194 23.6752 232.854 cv
23.0552 233.514 22.2152 233.834 21.1552 233.834 cv
19.9352 233.834 19.0152 233.434 18.3752 232.594 cv
17.7552 231.774 17.4352 230.554 17.4352 228.914 cv
17.4352 226.394 li
17.2552 226.394 li
16.4352 226.394 15.7952 226.674 15.3352 227.214 cv
14.8952 227.754 14.6552 228.514 14.6552 229.494 cv
14.6552 230.134 14.7352 230.734 14.8952 231.334 cv
15.0552 231.934 15.2752 232.494 15.5552 233.034 cv
13.8952 233.034 li
13.6552 232.394 13.4552 231.754 13.3352 231.134 cv
13.2152 230.514 13.1352 229.914 13.1352 229.314 cv
13.1352 227.734 13.5552 226.554 14.3752 225.774 cv
15.1952 224.994 16.4352 224.594 18.0952 224.594 cv
f
10.2952 219.114 mo
13.3952 219.114 li
13.3952 215.414 li
14.7952 215.414 li
14.7952 219.114 li
20.7352 219.114 li
21.6352 219.114 22.2152 218.994 22.4552 218.754 cv
22.7152 218.514 22.8352 218.014 22.8352 217.254 cv
22.8352 215.414 li
24.3352 215.414 li
24.3352 217.254 li
24.3352 218.654 24.0752 219.614 23.5552 220.134 cv
23.0352 220.654 22.0952 220.914 20.7352 220.914 cv
14.7952 220.914 li
14.7952 222.234 li
13.3952 222.234 li
13.3952 220.914 li
10.2952 220.914 li
10.2952 219.114 li
f
18.4152 203.694 mo
19.2952 203.694 li
19.2952 211.954 li
20.5352 211.874 21.4952 211.514 22.1352 210.834 cv
22.7752 210.174 23.0952 209.254 23.0952 208.054 cv
23.0952 207.374 23.0152 206.694 22.8552 206.054 cv
22.6952 205.414 22.4352 204.754 22.0752 204.114 cv
23.7752 204.114 li
24.0552 204.754 24.2752 205.414 24.3952 206.094 cv
24.5152 206.774 24.5952 207.474 24.5952 208.154 cv
24.5952 209.914 24.0952 211.294 23.0952 212.314 cv
22.0952 213.334 20.7152 213.834 18.9752 213.834 cv
17.1952 213.834 15.7752 213.354 14.7152 212.394 cv
13.6752 211.434 13.1352 210.114 13.1352 208.474 cv
13.1352 206.994 13.6152 205.834 14.5552 204.974 cv
15.5152 204.134 16.7952 203.694 18.4152 203.694 cv
17.8952 205.494 mo
16.9152 205.514 16.1352 205.794 15.5352 206.314 cv
14.9552 206.854 14.6552 207.574 14.6552 208.454 cv
14.6552 209.454 14.9552 210.254 15.5152 210.854 cv
16.0752 211.454 16.8752 211.814 17.8952 211.894 cv
17.8952 205.494 li
f
1.5 lw
2 lc
119.986 512.736 mo
129.824 396.623 li
139.662 345.377 li
149.501 315.633 li
159.339 300.366 li
169.177 283.829 li
179.015 263.544 li
188.853 248.759 li
198.691 232.275 li
208.529 216.138 li
218.367 199.948 li
228.205 182.996 li
238.043 168.371 li
247.881 149.84 li
257.719 135.135 li
267.557 116.349 li
277.395 105.257 li
287.233 95.5563 li
297.071 87.2606 li
306.909 81.9085 li
316.747 77.6402 li
326.585 72.3015 li
336.423 68.903 li
346.261 66.0664 li
356.099 63.4706 li
365.937 61.1559 li
375.775 60.0854 li
385.613 58.0249 li
395.451 54.827 li
405.289 53.8904 li
415.127 51.6426 li
424.965 50.4785 li
434.803 49.2074 li
444.641 47.8292 li
454.479 46.2771 li
464.317 45.675 li
474.155 45.6616 li
483.993 45.0595 li
493.831 43.106 li
503.669 43.1863 li
513.507 42.9187 li
523.345 42.9722 li
533.183 42.1426 li
543.021 41.487 li
552.859 41.4469 li
562.697 41.942 li
572.535 39.7208 li
582.373 39.9081 li
592.211 39.9885 li
602.049 39.8814 li
611.887 39.4399 li
621.725 39.6941 li
631.563 39.6673 li
641.401 39.2927 li
651.239 39.0652 li
661.077 39.5469 li
670.915 39.4265 li
680.753 40.042 li
690.591 38.3561 li
700.429 38.7842 li
710.267 38.4765 li
720.105 38.6772 li
729.943 39.1053 li
739.781 38.3962 li
749.62 38.3828 li
759.458 37.192 li
769.296 37.1117 li
779.134 34.5695 li
788.972 34.4625 li
798.81 34.4089 li
808.648 34.3152 li
818.486 34.3019 li
828.324 34.2885 li
838.162 34.2751 li
848 34.2484 li
857.838 34.1948 li
867.676 34.1948 li
877.514 34.1948 li
887.352 34.1413 li
897.19 34.1413 li
907.028 34.1146 li
916.866 34.061 li
926.704 34.0477 li
936.542 34.0477 li
946.38 34.061 li
956.218 33.9673 li
966.056 33.954 li
975.894 33.9406 li
985.732 33.9272 li
995.57 33.9005 li
1005.41 33.8737 li
1015.25 33.8604 li
1025.08 33.8336 li
1034.92 33.8202 li
1044.76 33.7934 li
1054.6 33.7934 li
1064.44 33.7667 li
1074.27 33.7265 li
1084.11 33.7131 li
1093.95 33.673 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
119.986 518.998 mo
129.824 411.281 li
139.662 358.396 li
149.501 327.147 li
159.339 311.432 li
169.177 293.89 li
179.015 273.82 li
188.853 257.122 li
198.691 241.146 li
208.529 221.758 li
218.367 206.163 li
228.205 189.806 li
238.043 173.128 li
247.881 154.944 li
257.719 138.567 li
267.557 119.239 li
277.395 108.502 li
287.233 99.0284 li
297.071 90.3982 li
306.909 84.1162 li
316.747 80.2427 li
326.585 75.4258 li
336.423 71.6325 li
346.261 68.9632 li
356.099 66.5547 li
365.937 65.1498 li
375.775 63.7249 li
385.613 61.4569 li
395.451 59.1087 li
405.289 58.6471 li
415.127 56.058 li
424.965 55.195 li
434.803 54.1714 li
444.641 53.2482 li
454.479 51.9035 li
464.317 51.181 li
474.155 51.2612 li
483.993 50.92 li
493.831 48.8729 li
503.669 48.8327 li
513.507 48.8929 li
523.345 49.0936 li
533.183 48.2106 li
543.021 47.6887 li
552.859 47.468 li
562.697 48.331 li
572.535 46.4644 li
582.373 46.3641 li
592.211 46.1634 li
602.049 46.4243 li
611.887 45.9426 li
621.725 46.2637 li
631.563 46.4042 li
641.401 46.2838 li
651.239 46.1634 li
661.077 46.6049 li
670.915 46.344 li
680.753 46.7655 li
690.591 45.0796 li
700.429 45.6215 li
710.267 45.1398 li
720.105 45.782 li
729.943 46.1433 li
739.781 45.3004 li
749.62 45.3004 li
759.458 44.0159 li
769.296 43.9757 li
779.134 41.9687 li
788.972 42.1694 li
798.81 42.1092 li
808.648 42.0289 li
818.486 41.9286 li
828.324 41.9687 li
838.162 41.8884 li
848 41.8282 li
857.838 41.9085 li
867.676 41.8282 li
877.514 41.8282 li
887.352 41.8282 li
897.19 41.7881 li
907.028 41.7278 li
916.866 41.6677 li
926.704 41.6677 li
936.542 41.6074 li
946.38 41.5873 li
956.218 41.5873 li
966.056 41.6275 li
975.894 41.6476 li
985.732 41.7078 li
995.57 41.6677 li
1005.41 41.6275 li
1015.25 41.6275 li
1025.08 41.6275 li
1034.92 41.6275 li
1044.76 41.6275 li
1054.6 41.6275 li
1064.44 41.6476 li
1074.27 41.7078 li
1084.11 41.7278 li
1093.95 41.7881 li
@
gsave
116.486 522.498 mo
123.486 522.498 li
123.486 515.498 li
116.486 515.498 li
116.486 522.498 li
clp
116.986 521.998 mo
122.986 515.998 li
116.986 515.998 mo
122.986 521.998 li
f
1 lw
0 lc
116.986 521.998 mo
122.986 515.998 li
116.986 515.998 mo
122.986 521.998 li
@
grestore
gsave
126.324 414.781 mo
133.324 414.781 li
133.324 407.781 li
126.324 407.781 li
126.324 414.781 li
clp
126.824 414.281 mo
132.824 408.281 li
126.824 408.281 mo
132.824 414.281 li
f
1 lw
0 lc
126.824 414.281 mo
132.824 408.281 li
126.824 408.281 mo
132.824 414.281 li
@
grestore
gsave
136.163 361.896 mo
143.162 361.896 li
143.162 354.896 li
136.163 354.896 li
136.163 361.896 li
clp
136.662 361.396 mo
142.662 355.396 li
136.662 355.396 mo
142.662 361.396 li
f
1 lw
0 lc
136.662 361.396 mo
142.662 355.396 li
136.662 355.396 mo
142.662 361.396 li
@
grestore
gsave
146.001 330.647 mo
153.001 330.647 li
153.001 323.647 li
146.001 323.647 li
146.001 330.647 li
clp
146.501 330.147 mo
152.501 324.147 li
146.501 324.147 mo
152.501 330.147 li
f
1 lw
0 lc
146.501 330.147 mo
152.501 324.147 li
146.501 324.147 mo
152.501 330.147 li
@
grestore
gsave
155.839 314.932 mo
162.839 314.932 li
162.839 307.932 li
155.839 307.932 li
155.839 314.932 li
clp
156.339 314.432 mo
162.339 308.432 li
156.339 308.432 mo
162.339 314.432 li
f
1 lw
0 lc
156.339 314.432 mo
162.339 308.432 li
156.339 308.432 mo
162.339 314.432 li
@
grestore
gsave
165.677 297.391 mo
172.677 297.391 li
172.677 290.39 li
165.677 290.39 li
165.677 297.391 li
clp
166.177 296.89 mo
172.177 290.89 li
166.177 290.89 mo
172.177 296.89 li
f
1 lw
0 lc
166.177 296.89 mo
172.177 290.89 li
166.177 290.89 mo
172.177 296.89 li
@
grestore
gsave
175.514 277.32 mo
182.515 277.32 li
182.515 270.32 li
175.514 270.32 li
175.514 277.32 li
clp
176.015 276.82 mo
182.015 270.82 li
176.015 270.82 mo
182.015 276.82 li
f
1 lw
0 lc
176.015 276.82 mo
182.015 270.82 li
176.015 270.82 mo
182.015 276.82 li
@
grestore
gsave
185.352 260.622 mo
192.352 260.622 li
192.352 253.622 li
185.352 253.622 li
185.352 260.622 li
clp
185.853 260.122 mo
191.853 254.122 li
185.853 254.122 mo
191.853 260.122 li
f
1 lw
0 lc
185.853 260.122 mo
191.853 254.122 li
185.853 254.122 mo
191.853 260.122 li
@
grestore
gsave
195.191 244.646 mo
202.19 244.646 li
202.19 237.646 li
195.191 237.646 li
195.191 244.646 li
clp
195.691 244.146 mo
201.691 238.146 li
195.691 238.146 mo
201.691 244.146 li
f
1 lw
0 lc
195.691 244.146 mo
201.691 238.146 li
195.691 238.146 mo
201.691 244.146 li
@
grestore
gsave
205.029 225.258 mo
212.029 225.258 li
212.029 218.258 li
205.029 218.258 li
205.029 225.258 li
clp
205.529 224.758 mo
211.529 218.758 li
205.529 218.758 mo
211.529 224.758 li
f
1 lw
0 lc
205.529 224.758 mo
211.529 218.758 li
205.529 218.758 mo
211.529 224.758 li
@
grestore
gsave
214.867 209.663 mo
221.867 209.663 li
221.867 202.663 li
214.867 202.663 li
214.867 209.663 li
clp
215.367 209.163 mo
221.367 203.163 li
215.367 203.163 mo
221.367 209.163 li
f
1 lw
0 lc
215.367 209.163 mo
221.367 203.163 li
215.367 203.163 mo
221.367 209.163 li
@
grestore
gsave
224.705 193.306 mo
231.705 193.306 li
231.705 186.306 li
224.705 186.306 li
224.705 193.306 li
clp
225.205 192.806 mo
231.205 186.806 li
225.205 186.806 mo
231.205 192.806 li
f
1 lw
0 lc
225.205 192.806 mo
231.205 186.806 li
225.205 186.806 mo
231.205 192.806 li
@
grestore
gsave
234.543 176.628 mo
241.543 176.628 li
241.543 169.628 li
234.543 169.628 li
234.543 176.628 li
clp
235.043 176.128 mo
241.043 170.128 li
235.043 170.128 mo
241.043 176.128 li
f
1 lw
0 lc
235.043 176.128 mo
241.043 170.128 li
235.043 170.128 mo
241.043 176.128 li
@
grestore
gsave
244.38 158.444 mo
251.381 158.444 li
251.381 151.444 li
244.38 151.444 li
244.38 158.444 li
clp
244.881 157.944 mo
250.881 151.944 li
244.881 151.944 mo
250.881 157.944 li
f
1 lw
0 lc
244.881 157.944 mo
250.881 151.944 li
244.881 151.944 mo
250.881 157.944 li
@
grestore
gsave
254.219 142.067 mo
261.219 142.067 li
261.219 135.067 li
254.219 135.067 li
254.219 142.067 li
clp
254.719 141.567 mo
260.719 135.567 li
254.719 135.567 mo
260.719 141.567 li
f
1 lw
0 lc
254.719 141.567 mo
260.719 135.567 li
254.719 135.567 mo
260.719 141.567 li
@
grestore
gsave
264.057 122.739 mo
271.057 122.739 li
271.057 115.739 li
264.057 115.739 li
264.057 122.739 li
clp
264.557 122.239 mo
270.557 116.239 li
264.557 116.239 mo
270.557 122.239 li
f
1 lw
0 lc
264.557 122.239 mo
270.557 116.239 li
264.557 116.239 mo
270.557 122.239 li
@
grestore
gsave
273.895 112.002 mo
280.895 112.002 li
280.895 105.002 li
273.895 105.002 li
273.895 112.002 li
clp
274.395 111.502 mo
280.395 105.502 li
274.395 105.502 mo
280.395 111.502 li
f
1 lw
0 lc
274.395 111.502 mo
280.395 105.502 li
274.395 105.502 mo
280.395 111.502 li
@
grestore
gsave
283.733 102.529 mo
290.733 102.529 li
290.733 95.5283 li
283.733 95.5283 li
283.733 102.529 li
clp
284.233 102.028 mo
290.233 96.0284 li
284.233 96.0284 mo
290.233 102.028 li
f
1 lw
0 lc
284.233 102.028 mo
290.233 96.0284 li
284.233 96.0284 mo
290.233 102.028 li
@
grestore
gsave
293.571 93.8983 mo
300.571 93.8983 li
300.571 86.8984 li
293.571 86.8984 li
293.571 93.8983 li
clp
294.071 93.3983 mo
300.071 87.3983 li
294.071 87.3983 mo
300.071 93.3983 li
f
1 lw
0 lc
294.071 93.3983 mo
300.071 87.3983 li
294.071 87.3983 mo
300.071 93.3983 li
@
grestore
gsave
303.409 87.6161 mo
310.409 87.6161 li
310.409 80.6162 li
303.409 80.6162 li
303.409 87.6161 li
clp
303.909 87.1163 mo
309.909 81.1163 li
303.909 81.1163 mo
309.909 87.1163 li
f
1 lw
0 lc
303.909 87.1163 mo
309.909 81.1163 li
303.909 81.1163 mo
309.909 87.1163 li
@
grestore
gsave
313.247 83.7426 mo
320.247 83.7426 li
320.247 76.7426 li
313.247 76.7426 li
313.247 83.7426 li
clp
313.747 83.2427 mo
319.747 77.2427 li
313.747 77.2427 mo
319.747 83.2427 li
f
1 lw
0 lc
313.747 83.2427 mo
319.747 77.2427 li
313.747 77.2427 mo
319.747 83.2427 li
@
grestore
gsave
323.085 78.926 mo
330.085 78.926 li
330.085 71.926 li
323.085 71.926 li
323.085 78.926 li
clp
323.585 78.4259 mo
329.585 72.4259 li
323.585 72.4259 mo
329.585 78.4259 li
f
1 lw
0 lc
323.585 78.4259 mo
329.585 72.4259 li
323.585 72.4259 mo
329.585 78.4259 li
@
grestore
gsave
332.923 75.1327 mo
339.923 75.1327 li
339.923 68.1328 li
332.923 68.1328 li
332.923 75.1327 li
clp
333.423 74.6326 mo
339.423 68.6326 li
333.423 68.6326 mo
339.423 74.6326 li
f
1 lw
0 lc
333.423 74.6326 mo
339.423 68.6326 li
333.423 68.6326 mo
339.423 74.6326 li
@
grestore
gsave
342.761 72.4631 mo
349.761 72.4631 li
349.761 65.4632 li
342.761 65.4632 li
342.761 72.4631 li
clp
343.261 71.9633 mo
349.261 65.9633 li
343.261 65.9633 mo
349.261 71.9633 li
f
1 lw
0 lc
343.261 71.9633 mo
349.261 65.9633 li
343.261 65.9633 mo
349.261 71.9633 li
@
grestore
gsave
352.599 70.0548 mo
359.599 70.0548 li
359.599 63.0549 li
352.599 63.0549 li
352.599 70.0548 li
clp
353.099 69.5548 mo
359.099 63.5548 li
353.099 63.5548 mo
359.099 69.5548 li
f
1 lw
0 lc
353.099 69.5548 mo
359.099 63.5548 li
353.099 63.5548 mo
359.099 69.5548 li
@
grestore
gsave
362.437 68.6498 mo
369.437 68.6498 li
369.437 61.6498 li
362.437 61.6498 li
362.437 68.6498 li
clp
362.937 68.1499 mo
368.937 62.1499 li
362.937 62.1499 mo
368.937 68.1499 li
f
1 lw
0 lc
362.937 68.1499 mo
368.937 62.1499 li
362.937 62.1499 mo
368.937 68.1499 li
@
grestore
gsave
372.275 67.225 mo
379.275 67.225 li
379.275 60.2251 li
372.275 60.2251 li
372.275 67.225 li
clp
372.775 66.7249 mo
378.775 60.7249 li
372.775 60.7249 mo
378.775 66.7249 li
f
1 lw
0 lc
372.775 66.7249 mo
378.775 60.7249 li
372.775 60.7249 mo
378.775 66.7249 li
@
grestore
gsave
382.113 64.9569 mo
389.113 64.9569 li
389.113 57.9569 li
382.113 57.9569 li
382.113 64.9569 li
clp
382.613 64.457 mo
388.613 58.457 li
382.613 58.457 mo
388.613 64.457 li
f
1 lw
0 lc
382.613 64.457 mo
388.613 58.457 li
382.613 58.457 mo
388.613 64.457 li
@
grestore
gsave
391.951 62.6088 mo
398.951 62.6088 li
398.951 55.6089 li
391.951 55.6089 li
391.951 62.6088 li
clp
392.451 62.1088 mo
398.451 56.1088 li
392.451 56.1088 mo
398.451 62.1088 li
f
1 lw
0 lc
392.451 62.1088 mo
398.451 56.1088 li
392.451 56.1088 mo
398.451 62.1088 li
@
grestore
gsave
401.789 62.1471 mo
408.789 62.1471 li
408.789 55.1472 li
401.789 55.1472 li
401.789 62.1471 li
clp
402.289 61.6472 mo
408.289 55.6472 li
402.289 55.6472 mo
408.289 61.6472 li
f
1 lw
0 lc
402.289 61.6472 mo
408.289 55.6472 li
402.289 55.6472 mo
408.289 61.6472 li
@
grestore
gsave
411.627 59.5582 mo
418.627 59.5582 li
418.627 52.5583 li
411.627 52.5583 li
411.627 59.5582 li
clp
412.127 59.0581 mo
418.127 53.0581 li
412.127 53.0581 mo
418.127 59.0581 li
f
1 lw
0 lc
412.127 59.0581 mo
418.127 53.0581 li
412.127 53.0581 mo
418.127 59.0581 li
@
grestore
gsave
421.465 58.6951 mo
428.465 58.6951 li
428.465 51.6952 li
421.465 51.6952 li
421.465 58.6951 li
clp
421.965 58.1951 mo
427.965 52.1951 li
421.965 52.1951 mo
427.965 58.1951 li
f
1 lw
0 lc
421.965 58.1951 mo
427.965 52.1951 li
421.965 52.1951 mo
427.965 58.1951 li
@
grestore
gsave
431.303 57.6714 mo
438.303 57.6714 li
438.303 50.6715 li
431.303 50.6715 li
431.303 57.6714 li
clp
431.803 57.1715 mo
437.803 51.1715 li
431.803 51.1715 mo
437.803 57.1715 li
f
1 lw
0 lc
431.803 57.1715 mo
437.803 51.1715 li
431.803 51.1715 mo
437.803 57.1715 li
@
grestore
gsave
441.141 56.7485 mo
448.141 56.7485 li
448.141 49.7482 li
441.141 49.7482 li
441.141 56.7485 li
clp
441.641 56.2483 mo
447.641 50.2483 li
441.641 50.2483 mo
447.641 56.2483 li
f
1 lw
0 lc
441.641 56.2483 mo
447.641 50.2483 li
441.641 50.2483 mo
447.641 56.2483 li
@
grestore
gsave
450.979 55.4036 mo
457.979 55.4036 li
457.979 48.4037 li
450.979 48.4037 li
450.979 55.4036 li
clp
451.479 54.9036 mo
457.479 48.9036 li
451.479 48.9036 mo
457.479 54.9036 li
f
1 lw
0 lc
451.479 54.9036 mo
457.479 48.9036 li
451.479 48.9036 mo
457.479 54.9036 li
@
grestore
gsave
460.817 54.681 mo
467.817 54.681 li
467.817 47.6811 li
460.817 47.6811 li
460.817 54.681 li
clp
461.317 54.181 mo
467.317 48.181 li
461.317 48.181 mo
467.317 54.181 li
f
1 lw
0 lc
461.317 54.181 mo
467.317 48.181 li
461.317 48.181 mo
467.317 54.181 li
@
grestore
gsave
470.655 54.7613 mo
477.655 54.7613 li
477.655 47.7614 li
470.655 47.7614 li
470.655 54.7613 li
clp
471.155 54.2613 mo
477.155 48.2613 li
471.155 48.2613 mo
477.155 54.2613 li
f
1 lw
0 lc
471.155 54.2613 mo
477.155 48.2613 li
471.155 48.2613 mo
477.155 54.2613 li
@
grestore
gsave
480.493 54.4201 mo
487.493 54.4201 li
487.493 47.4202 li
480.493 47.4202 li
480.493 54.4201 li
clp
480.993 53.9201 mo
486.993 47.9201 li
480.993 47.9201 mo
486.993 53.9201 li
f
1 lw
0 lc
480.993 53.9201 mo
486.993 47.9201 li
480.993 47.9201 mo
486.993 53.9201 li
@
grestore
gsave
490.331 52.3728 mo
497.331 52.3728 li
497.331 45.3728 li
490.331 45.3728 li
490.331 52.3728 li
clp
490.831 51.8729 mo
496.831 45.8729 li
490.831 45.8729 mo
496.831 51.8729 li
f
1 lw
0 lc
490.831 51.8729 mo
496.831 45.8729 li
490.831 45.8729 mo
496.831 51.8729 li
@
grestore
gsave
500.169 52.3326 mo
507.169 52.3326 li
507.169 45.3327 li
500.169 45.3327 li
500.169 52.3326 li
clp
500.669 51.8328 mo
506.669 45.8328 li
500.669 45.8328 mo
506.669 51.8328 li
f
1 lw
0 lc
500.669 51.8328 mo
506.669 45.8328 li
500.669 45.8328 mo
506.669 51.8328 li
@
grestore
gsave
510.007 52.3928 mo
517.007 52.3928 li
517.007 45.3929 li
510.007 45.3929 li
510.007 52.3928 li
clp
510.507 51.8929 mo
516.507 45.8929 li
510.507 45.8929 mo
516.507 51.8929 li
f
1 lw
0 lc
510.507 51.8929 mo
516.507 45.8929 li
510.507 45.8929 mo
516.507 51.8929 li
@
grestore
gsave
519.845 52.5936 mo
526.845 52.5936 li
526.845 45.5936 li
519.845 45.5936 li
519.845 52.5936 li
clp
520.345 52.0936 mo
526.345 46.0936 li
520.345 46.0936 mo
526.345 52.0936 li
f
1 lw
0 lc
520.345 52.0936 mo
526.345 46.0936 li
520.345 46.0936 mo
526.345 52.0936 li
@
grestore
gsave
529.683 51.7104 mo
536.683 51.7104 li
536.683 44.7104 li
529.683 44.7104 li
529.683 51.7104 li
clp
530.183 51.2105 mo
536.183 45.2105 li
530.183 45.2105 mo
536.183 51.2105 li
f
1 lw
0 lc
530.183 51.2105 mo
536.183 45.2105 li
530.183 45.2105 mo
536.183 51.2105 li
@
grestore
gsave
539.521 51.1885 mo
546.521 51.1885 li
546.521 44.1886 li
539.521 44.1886 li
539.521 51.1885 li
clp
540.021 50.6887 mo
546.021 44.6887 li
540.021 44.6887 mo
546.021 50.6887 li
f
1 lw
0 lc
540.021 50.6887 mo
546.021 44.6887 li
540.021 44.6887 mo
546.021 50.6887 li
@
grestore
gsave
549.359 50.9681 mo
556.359 50.9681 li
556.359 43.9678 li
549.359 43.9678 li
549.359 50.9681 li
clp
549.859 50.4679 mo
555.859 44.4679 li
549.859 44.4679 mo
555.859 50.4679 li
f
1 lw
0 lc
549.859 50.4679 mo
555.859 44.4679 li
549.859 44.4679 mo
555.859 50.4679 li
@
grestore
gsave
559.197 51.8308 mo
566.197 51.8308 li
566.197 44.8309 li
559.197 44.8309 li
559.197 51.8308 li
clp
559.697 51.3309 mo
565.697 45.3309 li
559.697 45.3309 mo
565.697 51.3309 li
f
1 lw
0 lc
559.697 51.3309 mo
565.697 45.3309 li
559.697 45.3309 mo
565.697 51.3309 li
@
grestore
gsave
569.035 49.9645 mo
576.035 49.9645 li
576.035 42.9645 li
569.035 42.9645 li
569.035 49.9645 li
clp
569.535 49.4644 mo
575.535 43.4644 li
569.535 43.4644 mo
575.535 49.4644 li
f
1 lw
0 lc
569.535 49.4644 mo
575.535 43.4644 li
569.535 43.4644 mo
575.535 49.4644 li
@
grestore
gsave
578.873 49.8641 mo
585.873 49.8641 li
585.873 42.8642 li
578.873 42.8642 li
578.873 49.8641 li
clp
579.373 49.3641 mo
585.373 43.3641 li
579.373 43.3641 mo
585.373 49.3641 li
f
1 lw
0 lc
579.373 49.3641 mo
585.373 43.3641 li
579.373 43.3641 mo
585.373 49.3641 li
@
grestore
gsave
588.711 49.6634 mo
595.711 49.6634 li
595.711 42.6634 li
588.711 42.6634 li
588.711 49.6634 li
clp
589.211 49.1634 mo
595.211 43.1634 li
589.211 43.1634 mo
595.211 49.1634 li
f
1 lw
0 lc
589.211 49.1634 mo
595.211 43.1634 li
589.211 43.1634 mo
595.211 49.1634 li
@
grestore
gsave
598.549 49.9243 mo
605.549 49.9243 li
605.549 42.9244 li
598.549 42.9244 li
598.549 49.9243 li
clp
599.049 49.4243 mo
605.049 43.4243 li
599.049 43.4243 mo
605.049 49.4243 li
f
1 lw
0 lc
599.049 49.4243 mo
605.049 43.4243 li
599.049 43.4243 mo
605.049 49.4243 li
@
grestore
gsave
608.387 49.4426 mo
615.387 49.4426 li
615.387 42.4426 li
608.387 42.4426 li
608.387 49.4426 li
clp
608.887 48.9426 mo
614.887 42.9426 li
608.887 42.9426 mo
614.887 48.9426 li
f
1 lw
0 lc
608.887 48.9426 mo
614.887 42.9426 li
608.887 42.9426 mo
614.887 48.9426 li
@
grestore
gsave
618.225 49.7637 mo
625.225 49.7637 li
625.225 42.7638 li
618.225 42.7638 li
618.225 49.7637 li
clp
618.725 49.2637 mo
624.725 43.2637 li
618.725 43.2637 mo
624.725 49.2637 li
f
1 lw
0 lc
618.725 49.2637 mo
624.725 43.2637 li
618.725 43.2637 mo
624.725 49.2637 li
@
grestore
gsave
628.063 49.9042 mo
635.063 49.9042 li
635.063 42.9043 li
628.063 42.9043 li
628.063 49.9042 li
clp
628.563 49.4042 mo
634.563 43.4042 li
628.563 43.4042 mo
634.563 49.4042 li
f
1 lw
0 lc
628.563 49.4042 mo
634.563 43.4042 li
628.563 43.4042 mo
634.563 49.4042 li
@
grestore
gsave
637.901 49.7838 mo
644.901 49.7838 li
644.901 42.7839 li
637.901 42.7839 li
637.901 49.7838 li
clp
638.401 49.2838 mo
644.401 43.2838 li
638.401 43.2838 mo
644.401 49.2838 li
f
1 lw
0 lc
638.401 49.2838 mo
644.401 43.2838 li
638.401 43.2838 mo
644.401 49.2838 li
@
grestore
gsave
647.739 49.6634 mo
654.739 49.6634 li
654.739 42.6634 li
647.739 42.6634 li
647.739 49.6634 li
clp
648.239 49.1634 mo
654.239 43.1634 li
648.239 43.1634 mo
654.239 49.1634 li
f
1 lw
0 lc
648.239 49.1634 mo
654.239 43.1634 li
648.239 43.1634 mo
654.239 49.1634 li
@
grestore
gsave
657.577 50.105 mo
664.577 50.105 li
664.577 43.105 li
657.577 43.105 li
657.577 50.105 li
clp
658.077 49.6049 mo
664.077 43.6049 li
658.077 43.6049 mo
664.077 49.6049 li
f
1 lw
0 lc
658.077 49.6049 mo
664.077 43.6049 li
658.077 43.6049 mo
664.077 49.6049 li
@
grestore
gsave
667.415 49.844 mo
674.415 49.844 li
674.415 42.8441 li
667.415 42.8441 li
667.415 49.844 li
clp
667.915 49.344 mo
673.915 43.344 li
667.915 43.344 mo
673.915 49.344 li
f
1 lw
0 lc
667.915 49.344 mo
673.915 43.344 li
667.915 43.344 mo
673.915 49.344 li
@
grestore
gsave
677.253 50.2655 mo
684.253 50.2655 li
684.253 43.2656 li
677.253 43.2656 li
677.253 50.2655 li
clp
677.753 49.7654 mo
683.753 43.7654 li
677.753 43.7654 mo
683.753 49.7654 li
f
1 lw
0 lc
677.753 49.7654 mo
683.753 43.7654 li
677.753 43.7654 mo
683.753 49.7654 li
@
grestore
gsave
687.091 48.5795 mo
694.091 48.5795 li
694.091 41.5795 li
687.091 41.5795 li
687.091 48.5795 li
clp
687.591 48.0795 mo
693.591 42.0795 li
687.591 42.0795 mo
693.591 48.0795 li
f
1 lw
0 lc
687.591 48.0795 mo
693.591 42.0795 li
687.591 42.0795 mo
693.591 48.0795 li
@
grestore
gsave
696.929 49.1214 mo
703.929 49.1214 li
703.929 42.1215 li
696.929 42.1215 li
696.929 49.1214 li
clp
697.429 48.6214 mo
703.429 42.6214 li
697.429 42.6214 mo
703.429 48.6214 li
f
1 lw
0 lc
697.429 48.6214 mo
703.429 42.6214 li
697.429 42.6214 mo
703.429 48.6214 li
@
grestore
gsave
706.767 48.6397 mo
713.767 48.6397 li
713.767 41.6398 li
706.767 41.6398 li
706.767 48.6397 li
clp
707.267 48.1397 mo
713.267 42.1397 li
707.267 42.1397 mo
713.267 48.1397 li
f
1 lw
0 lc
707.267 48.1397 mo
713.267 42.1397 li
707.267 42.1397 mo
713.267 48.1397 li
@
grestore
gsave
716.605 49.282 mo
723.605 49.282 li
723.605 42.2821 li
716.605 42.2821 li
716.605 49.282 li
clp
717.105 48.782 mo
723.105 42.782 li
717.105 42.782 mo
723.105 48.782 li
f
1 lw
0 lc
717.105 48.782 mo
723.105 42.782 li
717.105 42.782 mo
723.105 48.782 li
@
grestore
gsave
726.443 49.6433 mo
733.443 49.6433 li
733.443 42.6434 li
726.443 42.6434 li
726.443 49.6433 li
clp
726.943 49.1432 mo
732.943 43.1432 li
726.943 43.1432 mo
732.943 49.1432 li
f
1 lw
0 lc
726.943 49.1432 mo
732.943 43.1432 li
726.943 43.1432 mo
732.943 49.1432 li
@
grestore
gsave
736.281 48.8003 mo
743.281 48.8003 li
743.281 41.8003 li
736.281 41.8003 li
736.281 48.8003 li
clp
736.781 48.3003 mo
742.781 42.3003 li
736.781 42.3003 mo
742.781 48.3003 li
f
1 lw
0 lc
736.781 48.3003 mo
742.781 42.3003 li
736.781 42.3003 mo
742.781 48.3003 li
@
grestore
gsave
746.119 48.8003 mo
753.12 48.8003 li
753.12 41.8003 li
746.119 41.8003 li
746.119 48.8003 li
clp
746.619 48.3003 mo
752.619 42.3003 li
746.619 42.3003 mo
752.619 48.3003 li
f
1 lw
0 lc
746.619 48.3003 mo
752.619 42.3003 li
746.619 42.3003 mo
752.619 48.3003 li
@
grestore
gsave
755.957 47.5157 mo
762.957 47.5157 li
762.957 40.5157 li
755.957 40.5157 li
755.957 47.5157 li
clp
756.457 47.0158 mo
762.457 41.0158 li
756.457 41.0158 mo
762.457 47.0158 li
f
1 lw
0 lc
756.457 47.0158 mo
762.457 41.0158 li
756.457 41.0158 mo
762.457 47.0158 li
@
grestore
gsave
765.795 47.4755 mo
772.795 47.4755 li
772.795 40.4756 li
765.795 40.4756 li
765.795 47.4755 li
clp
766.295 46.9756 mo
772.295 40.9756 li
766.295 40.9756 mo
772.295 46.9756 li
f
1 lw
0 lc
766.295 46.9756 mo
772.295 40.9756 li
766.295 40.9756 mo
772.295 46.9756 li
@
grestore
gsave
775.633 45.4687 mo
782.633 45.4687 li
782.633 38.4687 li
775.633 38.4687 li
775.633 45.4687 li
clp
776.133 44.9686 mo
782.133 38.9686 li
776.133 38.9686 mo
782.133 44.9686 li
f
1 lw
0 lc
776.133 44.9686 mo
782.133 38.9686 li
776.133 38.9686 mo
782.133 44.9686 li
@
grestore
gsave
785.471 45.6694 mo
792.471 45.6694 li
792.471 38.6694 li
785.471 38.6694 li
785.471 45.6694 li
clp
785.971 45.1693 mo
791.971 39.1693 li
785.971 39.1693 mo
791.971 45.1693 li
f
1 lw
0 lc
785.971 45.1693 mo
791.971 39.1693 li
785.971 39.1693 mo
791.971 45.1693 li
@
grestore
gsave
795.31 45.6092 mo
802.309 45.6092 li
802.309 38.6092 li
795.31 38.6092 li
795.31 45.6092 li
clp
795.809 45.1091 mo
801.809 39.1091 li
795.809 39.1091 mo
801.809 45.1091 li
f
1 lw
0 lc
795.809 45.1091 mo
801.809 39.1091 li
795.809 39.1091 mo
801.809 45.1091 li
@
grestore
gsave
805.148 45.5289 mo
812.148 45.5289 li
812.148 38.5289 li
805.148 38.5289 li
805.148 45.5289 li
clp
805.647 45.0289 mo
811.647 39.0289 li
805.647 39.0289 mo
811.647 45.0289 li
f
1 lw
0 lc
805.647 45.0289 mo
811.647 39.0289 li
805.647 39.0289 mo
811.647 45.0289 li
@
grestore
gsave
814.985 45.4285 mo
821.986 45.4285 li
821.986 38.4286 li
814.985 38.4286 li
814.985 45.4285 li
clp
815.485 44.9285 mo
821.485 38.9285 li
815.485 38.9285 mo
821.485 44.9285 li
f
1 lw
0 lc
815.485 44.9285 mo
821.485 38.9285 li
815.485 38.9285 mo
821.485 44.9285 li
@
grestore
gsave
824.823 45.4687 mo
831.823 45.4687 li
831.823 38.4687 li
824.823 38.4687 li
824.823 45.4687 li
clp
825.323 44.9687 mo
831.323 38.9687 li
825.323 38.9687 mo
831.323 44.9687 li
f
1 lw
0 lc
825.323 44.9687 mo
831.323 38.9687 li
825.323 38.9687 mo
831.323 44.9687 li
@
grestore
gsave
834.661 45.3884 mo
841.661 45.3884 li
841.661 38.3884 li
834.661 38.3884 li
834.661 45.3884 li
clp
835.161 44.8884 mo
841.161 38.8884 li
835.161 38.8884 mo
841.161 44.8884 li
f
1 lw
0 lc
835.161 44.8884 mo
841.161 38.8884 li
835.161 38.8884 mo
841.161 44.8884 li
@
grestore
gsave
844.499 45.3282 mo
851.499 45.3282 li
851.499 38.3282 li
844.499 38.3282 li
844.499 45.3282 li
clp
844.999 44.8282 mo
850.999 38.8282 li
844.999 38.8282 mo
850.999 44.8282 li
f
1 lw
0 lc
844.999 44.8282 mo
850.999 38.8282 li
844.999 38.8282 mo
850.999 44.8282 li
@
grestore
gsave
854.338 45.4085 mo
861.337 45.4085 li
861.337 38.4085 li
854.338 38.4085 li
854.338 45.4085 li
clp
854.837 44.9085 mo
860.837 38.9085 li
854.837 38.9085 mo
860.837 44.9085 li
f
1 lw
0 lc
854.837 44.9085 mo
860.837 38.9085 li
854.837 38.9085 mo
860.837 44.9085 li
@
grestore
gsave
864.176 45.3282 mo
871.176 45.3282 li
871.176 38.3282 li
864.176 38.3282 li
864.176 45.3282 li
clp
864.675 44.8282 mo
870.675 38.8282 li
864.675 38.8282 mo
870.675 44.8282 li
f
1 lw
0 lc
864.675 44.8282 mo
870.675 38.8282 li
864.675 38.8282 mo
870.675 44.8282 li
@
grestore
gsave
874.014 45.3282 mo
881.014 45.3282 li
881.014 38.3282 li
874.014 38.3282 li
874.014 45.3282 li
clp
874.513 44.8282 mo
880.513 38.8282 li
874.513 38.8282 mo
880.513 44.8282 li
f
1 lw
0 lc
874.513 44.8282 mo
880.513 38.8282 li
874.513 38.8282 mo
880.513 44.8282 li
@
grestore
gsave
883.851 45.3282 mo
890.852 45.3282 li
890.852 38.3282 li
883.851 38.3282 li
883.851 45.3282 li
clp
884.352 44.8282 mo
890.352 38.8282 li
884.352 38.8282 mo
890.352 44.8282 li
f
1 lw
0 lc
884.352 44.8282 mo
890.352 38.8282 li
884.352 38.8282 mo
890.352 44.8282 li
@
grestore
gsave
893.689 45.288 mo
900.689 45.288 li
900.689 38.2881 li
893.689 38.2881 li
893.689 45.288 li
clp
894.19 44.7881 mo
900.19 38.7881 li
894.19 38.7881 mo
900.19 44.7881 li
f
1 lw
0 lc
894.19 44.7881 mo
900.19 38.7881 li
894.19 38.7881 mo
900.19 44.7881 li
@
grestore
gsave
903.527 45.2278 mo
910.527 45.2278 li
910.527 38.2279 li
903.527 38.2279 li
903.527 45.2278 li
clp
904.028 44.7279 mo
910.028 38.7279 li
904.028 38.7279 mo
910.028 44.7279 li
f
1 lw
0 lc
904.028 44.7279 mo
910.028 38.7279 li
904.028 38.7279 mo
910.028 44.7279 li
@
grestore
gsave
913.366 45.1676 mo
920.365 45.1676 li
920.365 38.1676 li
913.366 38.1676 li
913.366 45.1676 li
clp
913.866 44.6677 mo
919.866 38.6677 li
913.866 38.6677 mo
919.866 44.6677 li
f
1 lw
0 lc
913.866 44.6677 mo
919.866 38.6677 li
913.866 38.6677 mo
919.866 44.6677 li
@
grestore
gsave
923.204 45.1676 mo
930.204 45.1676 li
930.204 38.1676 li
923.204 38.1676 li
923.204 45.1676 li
clp
923.704 44.6677 mo
929.704 38.6677 li
923.704 38.6677 mo
929.704 44.6677 li
f
1 lw
0 lc
923.704 44.6677 mo
929.704 38.6677 li
923.704 38.6677 mo
929.704 44.6677 li
@
grestore
gsave
933.042 45.1074 mo
940.042 45.1074 li
940.042 38.1074 li
933.042 38.1074 li
933.042 45.1074 li
clp
933.542 44.6075 mo
939.542 38.6075 li
933.542 38.6075 mo
939.542 44.6075 li
f
1 lw
0 lc
933.542 44.6075 mo
939.542 38.6075 li
933.542 38.6075 mo
939.542 44.6075 li
@
grestore
gsave
942.88 45.0873 mo
949.88 45.0873 li
949.88 38.0874 li
942.88 38.0874 li
942.88 45.0873 li
clp
943.38 44.5875 mo
949.38 38.5875 li
943.38 38.5875 mo
949.38 44.5875 li
f
1 lw
0 lc
943.38 44.5875 mo
949.38 38.5875 li
943.38 38.5875 mo
949.38 44.5875 li
@
grestore
gsave
952.718 45.0873 mo
959.718 45.0873 li
959.718 38.0874 li
952.718 38.0874 li
952.718 45.0873 li
clp
953.218 44.5875 mo
959.218 38.5875 li
953.218 38.5875 mo
959.218 44.5875 li
f
1 lw
0 lc
953.218 44.5875 mo
959.218 38.5875 li
953.218 38.5875 mo
959.218 44.5875 li
@
grestore
gsave
962.556 45.1278 mo
969.556 45.1278 li
969.556 38.1275 li
962.556 38.1275 li
962.556 45.1278 li
clp
963.056 44.6276 mo
969.056 38.6276 li
963.056 38.6276 mo
969.056 44.6276 li
f
1 lw
0 lc
963.056 44.6276 mo
969.056 38.6276 li
963.056 38.6276 mo
969.056 44.6276 li
@
grestore
gsave
972.394 45.1479 mo
979.394 45.1479 li
979.394 38.1476 li
972.394 38.1476 li
972.394 45.1479 li
clp
972.894 44.6477 mo
978.894 38.6477 li
972.894 38.6477 mo
978.894 44.6477 li
f
1 lw
0 lc
972.894 44.6477 mo
978.894 38.6477 li
972.894 38.6477 mo
978.894 44.6477 li
@
grestore
gsave
982.232 45.2077 mo
989.232 45.2077 li
989.232 38.2078 li
982.232 38.2078 li
982.232 45.2077 li
clp
982.732 44.7079 mo
988.732 38.7079 li
982.732 38.7079 mo
988.732 44.7079 li
f
1 lw
0 lc
982.732 44.7079 mo
988.732 38.7079 li
982.732 38.7079 mo
988.732 44.7079 li
@
grestore
gsave
992.07 45.1676 mo
999.07 45.1676 li
999.07 38.1676 li
992.07 38.1676 li
992.07 45.1676 li
clp
992.57 44.6677 mo
998.57 38.6677 li
992.57 38.6677 mo
998.57 44.6677 li
f
1 lw
0 lc
992.57 44.6677 mo
998.57 38.6677 li
992.57 38.6677 mo
998.57 44.6677 li
@
grestore
gsave
1001.91 45.1274 mo
1008.91 45.1274 li
1008.91 38.1275 li
1001.91 38.1275 li
1001.91 45.1274 li
clp
1002.41 44.6276 mo
1008.41 38.6276 li
1002.41 38.6276 mo
1008.41 44.6276 li
f
1 lw
0 lc
1002.41 44.6276 mo
1008.41 38.6276 li
1002.41 38.6276 mo
1008.41 44.6276 li
@
grestore
gsave
1011.75 45.1274 mo
1018.75 45.1274 li
1018.75 38.1275 li
1011.75 38.1275 li
1011.75 45.1274 li
clp
1012.25 44.6276 mo
1018.25 38.6276 li
1012.25 38.6276 mo
1018.25 44.6276 li
f
1 lw
0 lc
1012.25 44.6276 mo
1018.25 38.6276 li
1012.25 38.6276 mo
1018.25 44.6276 li
@
grestore
gsave
1021.58 45.1274 mo
1028.58 45.1274 li
1028.58 38.1275 li
1021.58 38.1275 li
1021.58 45.1274 li
clp
1022.08 44.6276 mo
1028.08 38.6276 li
1022.08 38.6276 mo
1028.08 44.6276 li
f
1 lw
0 lc
1022.08 44.6276 mo
1028.08 38.6276 li
1022.08 38.6276 mo
1028.08 44.6276 li
@
grestore
gsave
1031.42 45.1274 mo
1038.42 45.1274 li
1038.42 38.1275 li
1031.42 38.1275 li
1031.42 45.1274 li
clp
1031.92 44.6276 mo
1037.92 38.6276 li
1031.92 38.6276 mo
1037.92 44.6276 li
f
1 lw
0 lc
1031.92 44.6276 mo
1037.92 38.6276 li
1031.92 38.6276 mo
1037.92 44.6276 li
@
grestore
gsave
1041.26 45.1274 mo
1048.26 45.1274 li
1048.26 38.1275 li
1041.26 38.1275 li
1041.26 45.1274 li
clp
1041.76 44.6276 mo
1047.76 38.6276 li
1041.76 38.6276 mo
1047.76 44.6276 li
f
1 lw
0 lc
1041.76 44.6276 mo
1047.76 38.6276 li
1041.76 38.6276 mo
1047.76 44.6276 li
@
grestore
gsave
1051.1 45.1274 mo
1058.1 45.1274 li
1058.1 38.1275 li
1051.1 38.1275 li
1051.1 45.1274 li
clp
1051.6 44.6276 mo
1057.6 38.6276 li
1051.6 38.6276 mo
1057.6 44.6276 li
f
1 lw
0 lc
1051.6 44.6276 mo
1057.6 38.6276 li
1051.6 38.6276 mo
1057.6 44.6276 li
@
grestore
gsave
1060.94 45.1475 mo
1067.94 45.1475 li
1067.94 38.1476 li
1060.94 38.1476 li
1060.94 45.1475 li
clp
1061.44 44.6476 mo
1067.44 38.6476 li
1061.44 38.6476 mo
1067.44 44.6476 li
f
1 lw
0 lc
1061.44 44.6476 mo
1067.44 38.6476 li
1061.44 38.6476 mo
1067.44 44.6476 li
@
grestore
gsave
1070.77 45.2077 mo
1077.77 45.2077 li
1077.77 38.2078 li
1070.77 38.2078 li
1070.77 45.2077 li
clp
1071.27 44.7078 mo
1077.27 38.7078 li
1071.27 38.7078 mo
1077.27 44.7078 li
f
1 lw
0 lc
1071.27 44.7078 mo
1077.27 38.7078 li
1071.27 38.7078 mo
1077.27 44.7078 li
@
grestore
gsave
1080.61 45.2278 mo
1087.61 45.2278 li
1087.61 38.2279 li
1080.61 38.2279 li
1080.61 45.2278 li
clp
1081.11 44.7279 mo
1087.11 38.7279 li
1081.11 38.7279 mo
1087.11 44.7279 li
f
1 lw
0 lc
1081.11 44.7279 mo
1087.11 38.7279 li
1081.11 38.7279 mo
1087.11 44.7279 li
@
grestore
gsave
1090.45 45.288 mo
1097.45 45.288 li
1097.45 38.2881 li
1090.45 38.2881 li
1090.45 45.288 li
clp
1090.95 44.7881 mo
1096.95 38.7881 li
1090.95 38.7881 mo
1096.95 44.7881 li
f
1 lw
0 lc
1090.95 44.7881 mo
1096.95 38.7881 li
1090.95 38.7881 mo
1096.95 44.7881 li
@
grestore
119.986 503.825 mo
129.824 386.321 li
139.662 337.911 li
149.501 284.805 li
159.339 253.616 li
169.177 231.806 li
179.015 203.267 li
188.853 172.479 li
198.691 152.85 li
208.529 138.453 li
218.367 120.457 li
228.205 108.482 li
238.043 97.0147 li
247.881 91.4352 li
257.719 84.6247 li
267.557 79.0853 li
277.395 75.5396 li
287.233 73.3719 li
297.071 70.9234 li
306.909 69.1438 li
316.747 67.2572 li
326.585 65.0227 li
336.423 62.7481 li
346.261 60.0186 li
356.099 57.2622 li
365.937 55.0545 li
375.775 52.9672 li
385.613 51.482 li
395.451 49.7827 li
405.289 48.0968 li
415.127 47.1067 li
424.965 46.0764 li
434.803 45.0863 li
444.641 44.3638 li
454.479 43.3736 li
464.317 42.7581 li
474.155 42.2095 li
483.993 41.8483 li
493.831 41.2863 li
503.669 40.5236 li
513.507 40.0821 li
523.345 39.8279 li
533.183 39.3328 li
543.021 38.7976 li
552.859 38.3427 li
562.697 37.8476 li
572.535 37.5667 li
582.373 37.3258 li
592.211 37.0181 li
602.049 36.6166 li
611.887 36.2955 li
621.725 36.1483 li
631.563 35.8941 li
641.401 35.9476 li
651.239 35.7737 li
661.077 35.8406 li
670.915 36.3758 li
680.753 36.3892 li
690.591 36.3089 li
700.429 36.4695 li
710.267 36.4561 li
720.105 36.2286 li
729.943 35.8807 li
739.781 35.6801 li
749.62 35.5596 li
759.458 35.5328 li
769.296 35.3589 li
779.134 31.5857 li
788.972 31.4653 li
798.81 31.4385 li
808.648 31.4251 li
818.486 31.3716 li
828.324 31.385 li
838.162 31.3047 li
848 31.3582 li
857.838 31.2913 li
867.676 31.278 li
877.514 31.2244 li
887.352 31.1575 li
897.19 31.1308 li
907.028 31.1308 li
916.866 31.0773 li
926.704 30.9702 li
936.542 30.9167 li
946.38 30.8765 li
956.218 30.8096 li
966.056 30.823 li
975.894 30.8096 li
985.732 30.7829 li
995.57 30.7829 li
1005.41 30.7829 li
1015.25 30.7695 li
1025.08 30.7829 li
1034.92 30.7963 li
1044.76 30.7963 li
1054.6 30.7427 li
1064.44 30.6892 li
1074.27 30.6892 li
1084.11 30.6625 li
1093.95 30.6223 li
1 /0 /CSD get_res sepcs
1 sep
@
119.986 510.729 mo
129.824 393.559 li
139.662 344.186 li
149.501 289.515 li
159.339 257.824 li
169.177 235.988 li
179.015 207.368 li
188.853 176.62 li
198.691 156.449 li
208.529 140.975 li
218.367 123.012 li
228.205 111.151 li
238.043 100.413 li
247.881 94.7133 li
257.719 89.1137 li
267.557 83.2532 li
277.395 80.3832 li
287.233 78.0751 li
297.071 75.4659 li
306.909 73.1779 li
316.747 71.1308 li
326.585 69.0034 li
336.423 66.8959 li
346.261 64.8688 li
356.099 62.34 li
365.937 60.4534 li
375.775 58.8478 li
385.613 57.463 li
395.451 55.777 li
405.289 54.1112 li
415.127 53.0475 li
424.965 52.0841 li
434.803 51.2813 li
444.641 50.4785 li
454.479 49.6556 li
464.317 48.9531 li
474.155 48.6722 li
483.993 48.5116 li
493.831 48.05 li
503.669 47.5683 li
513.507 47.3877 li
523.345 46.9461 li
533.183 46.3842 li
543.021 46.1031 li
552.859 45.7419 li
562.697 45.3606 li
572.535 45.2603 li
582.373 44.7183 li
592.211 44.4373 li
602.049 44.0159 li
611.887 43.775 li
621.725 43.5944 li
631.563 43.494 li
641.401 43.5141 li
651.239 43.3134 li
661.077 43.8353 li
670.915 44.2969 li
680.753 44.3169 li
690.591 44.4775 li
700.429 44.5979 li
710.267 44.3972 li
720.105 44.4775 li
729.943 44.2567 li
739.781 44.0159 li
749.62 44.0359 li
759.458 43.9356 li
769.296 43.8553 li
779.134 40.5638 li
788.972 40.3832 li
798.81 40.2628 li
808.648 40.2828 li
818.486 40.2828 li
828.324 40.2628 li
838.162 40.2828 li
848 40.2628 li
857.838 40.1624 li
867.676 40.1624 li
877.514 40.2025 li
887.352 40.1624 li
897.19 40.1624 li
907.028 40.1223 li
916.866 40.0821 li
926.704 40.0219 li
936.542 40.0821 li
946.38 40.1022 li
956.218 40.0219 li
966.056 39.9617 li
975.894 39.9617 li
985.732 40.0018 li
995.57 39.9818 li
1005.41 39.9416 li
1015.25 39.9416 li
1025.08 39.9416 li
1034.92 39.9216 li
1044.76 39.9216 li
1054.6 39.9015 li
1064.44 39.8814 li
1074.27 39.9216 li
1084.11 39.9015 li
1093.95 40.0018 li
@
gsave
116.486 514.229 mo
123.486 514.229 li
123.486 507.229 li
116.486 507.229 li
116.486 514.229 li
clp
116.986 513.729 mo
122.986 507.729 li
116.986 507.729 mo
122.986 513.729 li
f
1 lw
0 lc
116.986 513.729 mo
122.986 507.729 li
116.986 507.729 mo
122.986 513.729 li
@
grestore
gsave
126.324 397.059 mo
133.324 397.059 li
133.324 390.059 li
126.324 390.059 li
126.324 397.059 li
clp
126.824 396.559 mo
132.824 390.559 li
126.824 390.559 mo
132.824 396.559 li
f
1 lw
0 lc
126.824 396.559 mo
132.824 390.559 li
126.824 390.559 mo
132.824 396.559 li
@
grestore
gsave
136.163 347.687 mo
143.162 347.687 li
143.162 340.687 li
136.163 340.687 li
136.163 347.687 li
clp
136.662 347.186 mo
142.662 341.186 li
136.662 341.186 mo
142.662 347.186 li
f
1 lw
0 lc
136.662 347.186 mo
142.662 341.186 li
136.662 341.186 mo
142.662 347.186 li
@
grestore
gsave
146.001 293.015 mo
153.001 293.015 li
153.001 286.015 li
146.001 286.015 li
146.001 293.015 li
clp
146.501 292.515 mo
152.501 286.515 li
146.501 286.515 mo
152.501 292.515 li
f
1 lw
0 lc
146.501 292.515 mo
152.501 286.515 li
146.501 286.515 mo
152.501 292.515 li
@
grestore
gsave
155.839 261.324 mo
162.839 261.324 li
162.839 254.324 li
155.839 254.324 li
155.839 261.324 li
clp
156.339 260.824 mo
162.339 254.824 li
156.339 254.824 mo
162.339 260.824 li
f
1 lw
0 lc
156.339 260.824 mo
162.339 254.824 li
156.339 254.824 mo
162.339 260.824 li
@
grestore
gsave
165.677 239.488 mo
172.677 239.488 li
172.677 232.488 li
165.677 232.488 li
165.677 239.488 li
clp
166.177 238.988 mo
172.177 232.988 li
166.177 232.988 mo
172.177 238.988 li
f
1 lw
0 lc
166.177 238.988 mo
172.177 232.988 li
166.177 232.988 mo
172.177 238.988 li
@
grestore
gsave
175.514 210.868 mo
182.515 210.868 li
182.515 203.868 li
175.514 203.868 li
175.514 210.868 li
clp
176.015 210.368 mo
182.015 204.368 li
176.015 204.368 mo
182.015 210.368 li
f
1 lw
0 lc
176.015 210.368 mo
182.015 204.368 li
176.015 204.368 mo
182.015 210.368 li
@
grestore
gsave
185.352 180.12 mo
192.352 180.12 li
192.352 173.12 li
185.352 173.12 li
185.352 180.12 li
clp
185.853 179.62 mo
191.853 173.62 li
185.853 173.62 mo
191.853 179.62 li
f
1 lw
0 lc
185.853 179.62 mo
191.853 173.62 li
185.853 173.62 mo
191.853 179.62 li
@
grestore
gsave
195.191 159.949 mo
202.19 159.949 li
202.19 152.95 li
195.191 152.95 li
195.191 159.949 li
clp
195.691 159.449 mo
201.691 153.449 li
195.691 153.449 mo
201.691 159.449 li
f
1 lw
0 lc
195.691 159.449 mo
201.691 153.449 li
195.691 153.449 mo
201.691 159.449 li
@
grestore
gsave
205.029 144.475 mo
212.029 144.475 li
212.029 137.475 li
205.029 137.475 li
205.029 144.475 li
clp
205.529 143.975 mo
211.529 137.975 li
205.529 137.975 mo
211.529 143.975 li
f
1 lw
0 lc
205.529 143.975 mo
211.529 137.975 li
205.529 137.975 mo
211.529 143.975 li
@
grestore
gsave
214.867 126.512 mo
221.867 126.512 li
221.867 119.512 li
214.867 119.512 li
214.867 126.512 li
clp
215.367 126.012 mo
221.367 120.012 li
215.367 120.012 mo
221.367 126.012 li
f
1 lw
0 lc
215.367 126.012 mo
221.367 120.012 li
215.367 120.012 mo
221.367 126.012 li
@
grestore
gsave
224.705 114.651 mo
231.705 114.651 li
231.705 107.651 li
224.705 107.651 li
224.705 114.651 li
clp
225.205 114.151 mo
231.205 108.151 li
225.205 108.151 mo
231.205 114.151 li
f
1 lw
0 lc
225.205 114.151 mo
231.205 108.151 li
225.205 108.151 mo
231.205 114.151 li
@
grestore
gsave
234.543 103.913 mo
241.543 103.913 li
241.543 96.9133 li
234.543 96.9133 li
234.543 103.913 li
clp
235.043 103.413 mo
241.043 97.4133 li
235.043 97.4133 mo
241.043 103.413 li
f
1 lw
0 lc
235.043 103.413 mo
241.043 97.4133 li
235.043 97.4133 mo
241.043 103.413 li
@
grestore
gsave
244.38 98.2135 mo
251.381 98.2135 li
251.381 91.2132 li
244.38 91.2132 li
244.38 98.2135 li
clp
244.881 97.7133 mo
250.881 91.7133 li
244.881 91.7133 mo
250.881 97.7133 li
f
1 lw
0 lc
244.881 97.7133 mo
250.881 91.7133 li
244.881 91.7133 mo
250.881 97.7133 li
@
grestore
gsave
254.219 92.6137 mo
261.219 92.6137 li
261.219 85.6138 li
254.219 85.6138 li
254.219 92.6137 li
clp
254.719 92.1137 mo
260.719 86.1137 li
254.719 86.1137 mo
260.719 92.1137 li
f
1 lw
0 lc
254.719 92.1137 mo
260.719 86.1137 li
254.719 86.1137 mo
260.719 92.1137 li
@
grestore
gsave
264.057 86.753 mo
271.057 86.753 li
271.057 79.7531 li
264.057 79.7531 li
264.057 86.753 li
clp
264.557 86.2532 mo
270.557 80.2532 li
264.557 80.2532 mo
270.557 86.2532 li
f
1 lw
0 lc
264.557 86.2532 mo
270.557 80.2532 li
264.557 80.2532 mo
270.557 86.2532 li
@
grestore
gsave
273.895 83.8831 mo
280.895 83.8831 li
280.895 76.8831 li
273.895 76.8831 li
273.895 83.8831 li
clp
274.395 83.3831 mo
280.395 77.3831 li
274.395 77.3831 mo
280.395 83.3831 li
f
1 lw
0 lc
274.395 83.3831 mo
280.395 77.3831 li
274.395 77.3831 mo
280.395 83.3831 li
@
grestore
gsave
283.733 81.5751 mo
290.733 81.5751 li
290.733 74.5748 li
283.733 74.5748 li
283.733 81.5751 li
clp
284.233 81.075 mo
290.233 75.075 li
284.233 75.075 mo
290.233 81.075 li
f
1 lw
0 lc
284.233 81.075 mo
290.233 75.075 li
284.233 75.075 mo
290.233 81.075 li
@
grestore
gsave
293.571 78.9658 mo
300.571 78.9658 li
300.571 71.9658 li
293.571 71.9658 li
293.571 78.9658 li
clp
294.071 78.4659 mo
300.071 72.4659 li
294.071 72.4659 mo
300.071 78.4659 li
f
1 lw
0 lc
294.071 78.4659 mo
300.071 72.4659 li
294.071 72.4659 mo
300.071 78.4659 li
@
grestore
gsave
303.409 76.6779 mo
310.409 76.6779 li
310.409 69.678 li
303.409 69.678 li
303.409 76.6779 li
clp
303.909 76.1779 mo
309.909 70.1779 li
303.909 70.1779 mo
309.909 76.1779 li
f
1 lw
0 lc
303.909 76.1779 mo
309.909 70.1779 li
303.909 70.1779 mo
309.909 76.1779 li
@
grestore
gsave
313.247 74.6306 mo
320.247 74.6306 li
320.247 67.6306 li
313.247 67.6306 li
313.247 74.6306 li
clp
313.747 74.1307 mo
319.747 68.1307 li
313.747 68.1307 mo
319.747 74.1307 li
f
1 lw
0 lc
313.747 74.1307 mo
319.747 68.1307 li
313.747 68.1307 mo
319.747 74.1307 li
@
grestore
gsave
323.085 72.5033 mo
330.085 72.5033 li
330.085 65.5033 li
323.085 65.5033 li
323.085 72.5033 li
clp
323.585 72.0032 mo
329.585 66.0032 li
323.585 66.0032 mo
329.585 72.0032 li
f
1 lw
0 lc
323.585 72.0032 mo
329.585 66.0032 li
323.585 66.0032 mo
329.585 72.0032 li
@
grestore
gsave
332.923 70.3957 mo
339.923 70.3957 li
339.923 63.3958 li
332.923 63.3958 li
332.923 70.3957 li
clp
333.423 69.8959 mo
339.423 63.8959 li
333.423 63.8959 mo
339.423 69.8959 li
f
1 lw
0 lc
333.423 69.8959 mo
339.423 63.8959 li
333.423 63.8959 mo
339.423 69.8959 li
@
grestore
gsave
342.761 68.3688 mo
349.761 68.3688 li
349.761 61.3688 li
342.761 61.3688 li
342.761 68.3688 li
clp
343.261 67.8688 mo
349.261 61.8688 li
343.261 61.8688 mo
349.261 67.8688 li
f
1 lw
0 lc
343.261 67.8688 mo
349.261 61.8688 li
343.261 61.8688 mo
349.261 67.8688 li
@
grestore
gsave
352.599 65.84 mo
359.599 65.84 li
359.599 58.8398 li
352.599 58.8398 li
352.599 65.84 li
clp
353.099 65.3399 mo
359.099 59.3399 li
353.099 59.3399 mo
359.099 65.3399 li
f
1 lw
0 lc
353.099 65.3399 mo
359.099 59.3399 li
353.099 59.3399 mo
359.099 65.3399 li
@
grestore
gsave
362.437 63.9533 mo
369.437 63.9533 li
369.437 56.9533 li
362.437 56.9533 li
362.437 63.9533 li
clp
362.937 63.4533 mo
368.937 57.4533 li
362.937 57.4533 mo
368.937 63.4533 li
f
1 lw
0 lc
362.937 63.4533 mo
368.937 57.4533 li
362.937 57.4533 mo
368.937 63.4533 li
@
grestore
gsave
372.275 62.3479 mo
379.275 62.3479 li
379.275 55.3476 li
372.275 55.3476 li
372.275 62.3479 li
clp
372.775 61.8477 mo
378.775 55.8477 li
372.775 55.8477 mo
378.775 61.8477 li
f
1 lw
0 lc
372.775 61.8477 mo
378.775 55.8477 li
372.775 55.8477 mo
378.775 61.8477 li
@
grestore
gsave
382.113 60.9629 mo
389.113 60.9629 li
389.113 53.9629 li
382.113 53.9629 li
382.113 60.9629 li
clp
382.613 60.4629 mo
388.613 54.4629 li
382.613 54.4629 mo
388.613 60.4629 li
f
1 lw
0 lc
382.613 60.4629 mo
388.613 54.4629 li
382.613 54.4629 mo
388.613 60.4629 li
@
grestore
gsave
391.951 59.2768 mo
398.951 59.2768 li
398.951 52.2769 li
391.951 52.2769 li
391.951 59.2768 li
clp
392.451 58.777 mo
398.451 52.777 li
392.451 52.777 mo
398.451 58.777 li
f
1 lw
0 lc
392.451 58.777 mo
398.451 52.777 li
392.451 52.777 mo
398.451 58.777 li
@
grestore
gsave
401.789 57.6112 mo
408.789 57.6112 li
408.789 50.6113 li
401.789 50.6113 li
401.789 57.6112 li
clp
402.289 57.1111 mo
408.289 51.1111 li
402.289 51.1111 mo
408.289 57.1111 li
f
1 lw
0 lc
402.289 57.1111 mo
408.289 51.1111 li
402.289 51.1111 mo
408.289 57.1111 li
@
grestore
gsave
411.627 56.5474 mo
418.627 56.5474 li
418.627 49.5475 li
411.627 49.5475 li
411.627 56.5474 li
clp
412.127 56.0474 mo
418.127 50.0474 li
412.127 50.0474 mo
418.127 56.0474 li
f
1 lw
0 lc
412.127 56.0474 mo
418.127 50.0474 li
412.127 50.0474 mo
418.127 56.0474 li
@
grestore
gsave
421.465 55.5839 mo
428.465 55.5839 li
428.465 48.584 li
421.465 48.584 li
421.465 55.5839 li
clp
421.965 55.084 mo
427.965 49.084 li
421.965 49.084 mo
427.965 55.084 li
f
1 lw
0 lc
421.965 55.084 mo
427.965 49.084 li
421.965 49.084 mo
427.965 55.084 li
@
grestore
gsave
431.303 54.7814 mo
438.303 54.7814 li
438.303 47.7811 li
431.303 47.7811 li
431.303 54.7814 li
clp
431.803 54.2813 mo
437.803 48.2813 li
431.803 48.2813 mo
437.803 54.2813 li
f
1 lw
0 lc
431.803 54.2813 mo
437.803 48.2813 li
431.803 48.2813 mo
437.803 54.2813 li
@
grestore
gsave
441.141 53.9785 mo
448.141 53.9785 li
448.141 46.9786 li
441.141 46.9786 li
441.141 53.9785 li
clp
441.641 53.4785 mo
447.641 47.4785 li
441.641 47.4785 mo
447.641 53.4785 li
f
1 lw
0 lc
441.641 53.4785 mo
447.641 47.4785 li
441.641 47.4785 mo
447.641 53.4785 li
@
grestore
gsave
450.979 53.1556 mo
457.979 53.1556 li
457.979 46.1556 li
450.979 46.1556 li
450.979 53.1556 li
clp
451.479 52.6556 mo
457.479 46.6556 li
451.479 46.6556 mo
457.479 52.6556 li
f
1 lw
0 lc
451.479 52.6556 mo
457.479 46.6556 li
451.479 46.6556 mo
457.479 52.6556 li
@
grestore
gsave
460.817 52.453 mo
467.817 52.453 li
467.817 45.4531 li
460.817 45.4531 li
460.817 52.453 li
clp
461.317 51.9531 mo
467.317 45.9531 li
461.317 45.9531 mo
467.317 51.9531 li
f
1 lw
0 lc
461.317 51.9531 mo
467.317 45.9531 li
461.317 45.9531 mo
467.317 51.9531 li
@
grestore
gsave
470.655 52.172 mo
477.655 52.172 li
477.655 45.1721 li
470.655 45.1721 li
470.655 52.172 li
clp
471.155 51.6721 mo
477.155 45.6721 li
471.155 45.6721 mo
477.155 51.6721 li
f
1 lw
0 lc
471.155 51.6721 mo
477.155 45.6721 li
471.155 45.6721 mo
477.155 51.6721 li
@
grestore
gsave
480.493 52.0115 mo
487.493 52.0115 li
487.493 45.0115 li
480.493 45.0115 li
480.493 52.0115 li
clp
480.993 51.5115 mo
486.993 45.5115 li
480.993 45.5115 mo
486.993 51.5115 li
f
1 lw
0 lc
480.993 51.5115 mo
486.993 45.5115 li
480.993 45.5115 mo
486.993 51.5115 li
@
grestore
gsave
490.331 51.5498 mo
497.331 51.5498 li
497.331 44.5499 li
490.331 44.5499 li
490.331 51.5498 li
clp
490.831 51.0499 mo
496.831 45.0499 li
490.831 45.0499 mo
496.831 51.0499 li
f
1 lw
0 lc
490.831 51.0499 mo
496.831 45.0499 li
490.831 45.0499 mo
496.831 51.0499 li
@
grestore
gsave
500.169 51.0681 mo
507.169 51.0681 li
507.169 44.0681 li
500.169 44.0681 li
500.169 51.0681 li
clp
500.669 50.5682 mo
506.669 44.5682 li
500.669 44.5682 mo
506.669 50.5682 li
f
1 lw
0 lc
500.669 50.5682 mo
506.669 44.5682 li
500.669 44.5682 mo
506.669 50.5682 li
@
grestore
gsave
510.007 50.8878 mo
517.007 50.8878 li
517.007 43.8875 li
510.007 43.8875 li
510.007 50.8878 li
clp
510.507 50.3876 mo
516.507 44.3876 li
510.507 44.3876 mo
516.507 50.3876 li
f
1 lw
0 lc
510.507 50.3876 mo
516.507 44.3876 li
510.507 44.3876 mo
516.507 50.3876 li
@
grestore
gsave
519.845 50.4462 mo
526.845 50.4462 li
526.845 43.4462 li
519.845 43.4462 li
519.845 50.4462 li
clp
520.345 49.9461 mo
526.345 43.9461 li
520.345 43.9461 mo
526.345 49.9461 li
f
1 lw
0 lc
520.345 49.9461 mo
526.345 43.9461 li
520.345 43.9461 mo
526.345 49.9461 li
@
grestore
gsave
529.683 49.8842 mo
536.683 49.8842 li
536.683 42.8842 li
529.683 42.8842 li
529.683 49.8842 li
clp
530.183 49.3842 mo
536.183 43.3842 li
530.183 43.3842 mo
536.183 49.3842 li
f
1 lw
0 lc
530.183 49.3842 mo
536.183 43.3842 li
530.183 43.3842 mo
536.183 49.3842 li
@
grestore
gsave
539.521 49.6032 mo
546.521 49.6032 li
546.521 42.6032 li
539.521 42.6032 li
539.521 49.6032 li
clp
540.021 49.1031 mo
546.021 43.1031 li
540.021 43.1031 mo
546.021 49.1031 li
f
1 lw
0 lc
540.021 49.1031 mo
546.021 43.1031 li
540.021 43.1031 mo
546.021 49.1031 li
@
grestore
gsave
549.359 49.2419 mo
556.359 49.2419 li
556.359 42.2419 li
549.359 42.2419 li
549.359 49.2419 li
clp
549.859 48.7419 mo
555.859 42.7419 li
549.859 42.7419 mo
555.859 48.7419 li
f
1 lw
0 lc
549.859 48.7419 mo
555.859 42.7419 li
549.859 42.7419 mo
555.859 48.7419 li
@
grestore
gsave
559.197 48.8605 mo
566.197 48.8605 li
566.197 41.8606 li
559.197 41.8606 li
559.197 48.8605 li
clp
559.697 48.3605 mo
565.697 42.3605 li
559.697 42.3605 mo
565.697 48.3605 li
f
1 lw
0 lc
559.697 48.3605 mo
565.697 42.3605 li
559.697 42.3605 mo
565.697 48.3605 li
@
grestore
gsave
569.035 48.7601 mo
576.035 48.7601 li
576.035 41.7602 li
569.035 41.7602 li
569.035 48.7601 li
clp
569.535 48.2602 mo
575.535 42.2602 li
569.535 42.2602 mo
575.535 48.2602 li
f
1 lw
0 lc
569.535 48.2602 mo
575.535 42.2602 li
569.535 42.2602 mo
575.535 48.2602 li
@
grestore
gsave
578.873 48.2182 mo
585.873 48.2182 li
585.873 41.2183 li
578.873 41.2183 li
578.873 48.2182 li
clp
579.373 47.7183 mo
585.373 41.7183 li
579.373 41.7183 mo
585.373 47.7183 li
f
1 lw
0 lc
579.373 47.7183 mo
585.373 41.7183 li
579.373 41.7183 mo
585.373 47.7183 li
@
grestore
gsave
588.711 47.9372 mo
595.711 47.9372 li
595.711 40.9372 li
588.711 40.9372 li
588.711 47.9372 li
clp
589.211 47.4373 mo
595.211 41.4373 li
589.211 41.4373 mo
595.211 47.4373 li
f
1 lw
0 lc
589.211 47.4373 mo
595.211 41.4373 li
589.211 41.4373 mo
595.211 47.4373 li
@
grestore
gsave
598.549 47.516 mo
605.549 47.516 li
605.549 40.5157 li
598.549 40.5157 li
598.549 47.516 li
clp
599.049 47.0159 mo
605.049 41.0159 li
599.049 41.0159 mo
605.049 47.0159 li
f
1 lw
0 lc
599.049 47.0159 mo
605.049 41.0159 li
599.049 41.0159 mo
605.049 47.0159 li
@
grestore
gsave
608.387 47.2752 mo
615.387 47.2752 li
615.387 40.2749 li
608.387 40.2749 li
608.387 47.2752 li
clp
608.887 46.775 mo
614.887 40.775 li
608.887 40.775 mo
614.887 46.775 li
f
1 lw
0 lc
608.887 46.775 mo
614.887 40.775 li
608.887 40.775 mo
614.887 46.775 li
@
grestore
gsave
618.225 47.0945 mo
625.225 47.0945 li
625.225 40.0946 li
618.225 40.0946 li
618.225 47.0945 li
clp
618.725 46.5944 mo
624.725 40.5944 li
618.725 40.5944 mo
624.725 46.5944 li
f
1 lw
0 lc
618.725 46.5944 mo
624.725 40.5944 li
618.725 40.5944 mo
624.725 46.5944 li
@
grestore
gsave
628.063 46.9941 mo
635.063 46.9941 li
635.063 39.9942 li
628.063 39.9942 li
628.063 46.9941 li
clp
628.563 46.4941 mo
634.563 40.4941 li
628.563 40.4941 mo
634.563 46.4941 li
f
1 lw
0 lc
628.563 46.4941 mo
634.563 40.4941 li
628.563 40.4941 mo
634.563 46.4941 li
@
grestore
gsave
637.901 47.0142 mo
644.901 47.0142 li
644.901 40.0143 li
637.901 40.0143 li
637.901 47.0142 li
clp
638.401 46.5142 mo
644.401 40.5142 li
638.401 40.5142 mo
644.401 46.5142 li
f
1 lw
0 lc
638.401 46.5142 mo
644.401 40.5142 li
638.401 40.5142 mo
644.401 46.5142 li
@
grestore
gsave
647.739 46.8135 mo
654.739 46.8135 li
654.739 39.8136 li
647.739 39.8136 li
647.739 46.8135 li
clp
648.239 46.3135 mo
654.239 40.3135 li
648.239 40.3135 mo
654.239 46.3135 li
f
1 lw
0 lc
648.239 46.3135 mo
654.239 40.3135 li
648.239 40.3135 mo
654.239 46.3135 li
@
grestore
gsave
657.577 47.3354 mo
664.577 47.3354 li
664.577 40.3354 li
657.577 40.3354 li
657.577 47.3354 li
clp
658.077 46.8353 mo
664.077 40.8353 li
658.077 40.8353 mo
664.077 46.8353 li
f
1 lw
0 lc
658.077 46.8353 mo
664.077 40.8353 li
658.077 40.8353 mo
664.077 46.8353 li
@
grestore
gsave
667.415 47.797 mo
674.415 47.797 li
674.415 40.7971 li
667.415 40.7971 li
667.415 47.797 li
clp
667.915 47.2969 mo
673.915 41.2969 li
667.915 41.2969 mo
673.915 47.2969 li
f
1 lw
0 lc
667.915 47.2969 mo
673.915 41.2969 li
667.915 41.2969 mo
673.915 47.2969 li
@
grestore
gsave
677.253 47.8171 mo
684.253 47.8171 li
684.253 40.8172 li
677.253 40.8172 li
677.253 47.8171 li
clp
677.753 47.317 mo
683.753 41.317 li
677.753 41.317 mo
683.753 47.317 li
f
1 lw
0 lc
677.753 47.317 mo
683.753 41.317 li
677.753 41.317 mo
683.753 47.317 li
@
grestore
gsave
687.091 47.9777 mo
694.091 47.9777 li
694.091 40.9777 li
687.091 40.9777 li
687.091 47.9777 li
clp
687.591 47.4776 mo
693.591 41.4776 li
687.591 41.4776 mo
693.591 47.4776 li
f
1 lw
0 lc
687.591 47.4776 mo
693.591 41.4776 li
687.591 41.4776 mo
693.591 47.4776 li
@
grestore
gsave
696.929 48.0981 mo
703.929 48.0981 li
703.929 41.0982 li
696.929 41.0982 li
696.929 48.0981 li
clp
697.429 47.598 mo
703.429 41.598 li
697.429 41.598 mo
703.429 47.598 li
f
1 lw
0 lc
697.429 47.598 mo
703.429 41.598 li
697.429 41.598 mo
703.429 47.598 li
@
grestore
gsave
706.767 47.8974 mo
713.767 47.8974 li
713.767 40.8974 li
706.767 40.8974 li
706.767 47.8974 li
clp
707.267 47.3973 mo
713.267 41.3973 li
707.267 41.3973 mo
713.267 47.3973 li
f
1 lw
0 lc
707.267 47.3973 mo
713.267 41.3973 li
707.267 41.3973 mo
713.267 47.3973 li
@
grestore
gsave
716.605 47.9777 mo
723.605 47.9777 li
723.605 40.9777 li
716.605 40.9777 li
716.605 47.9777 li
clp
717.105 47.4776 mo
723.105 41.4776 li
717.105 41.4776 mo
723.105 47.4776 li
f
1 lw
0 lc
717.105 47.4776 mo
723.105 41.4776 li
717.105 41.4776 mo
723.105 47.4776 li
@
grestore
gsave
726.443 47.7569 mo
733.443 47.7569 li
733.443 40.7569 li
726.443 40.7569 li
726.443 47.7569 li
clp
726.943 47.2568 mo
732.943 41.2568 li
726.943 41.2568 mo
732.943 47.2568 li
f
1 lw
0 lc
726.943 47.2568 mo
732.943 41.2568 li
726.943 41.2568 mo
732.943 47.2568 li
@
grestore
gsave
736.281 47.516 mo
743.281 47.516 li
743.281 40.5161 li
736.281 40.5161 li
736.281 47.516 li
clp
736.781 47.016 mo
742.781 41.016 li
736.781 41.016 mo
742.781 47.016 li
f
1 lw
0 lc
736.781 47.016 mo
742.781 41.016 li
736.781 41.016 mo
742.781 47.016 li
@
grestore
gsave
746.119 47.5361 mo
753.12 47.5361 li
753.12 40.5361 li
746.119 40.5361 li
746.119 47.5361 li
clp
746.619 47.0361 mo
752.619 41.0361 li
746.619 41.0361 mo
752.619 47.0361 li
f
1 lw
0 lc
746.619 47.0361 mo
752.619 41.0361 li
746.619 41.0361 mo
752.619 47.0361 li
@
grestore
gsave
755.957 47.4357 mo
762.957 47.4357 li
762.957 40.4358 li
755.957 40.4358 li
755.957 47.4357 li
clp
756.457 46.9357 mo
762.457 40.9357 li
756.457 40.9357 mo
762.457 46.9357 li
f
1 lw
0 lc
756.457 46.9357 mo
762.457 40.9357 li
756.457 40.9357 mo
762.457 46.9357 li
@
grestore
gsave
765.795 47.3554 mo
772.795 47.3554 li
772.795 40.3555 li
765.795 40.3555 li
765.795 47.3554 li
clp
766.295 46.8555 mo
772.295 40.8555 li
766.295 40.8555 mo
772.295 46.8555 li
f
1 lw
0 lc
766.295 46.8555 mo
772.295 40.8555 li
766.295 40.8555 mo
772.295 46.8555 li
@
grestore
gsave
775.633 44.064 mo
782.633 44.064 li
782.633 37.064 li
775.633 37.064 li
775.633 44.064 li
clp
776.133 43.564 mo
782.133 37.564 li
776.133 37.564 mo
782.133 43.564 li
f
1 lw
0 lc
776.133 43.564 mo
782.133 37.564 li
776.133 37.564 mo
782.133 43.564 li
@
grestore
gsave
785.471 43.8833 mo
792.471 43.8833 li
792.471 36.8834 li
785.471 36.8834 li
785.471 43.8833 li
clp
785.971 43.3834 mo
791.971 37.3834 li
785.971 37.3834 mo
791.971 43.3834 li
f
1 lw
0 lc
785.971 43.3834 mo
791.971 37.3834 li
785.971 37.3834 mo
791.971 43.3834 li
@
grestore
gsave
795.31 43.7629 mo
802.309 43.7629 li
802.309 36.763 li
795.31 36.763 li
795.31 43.7629 li
clp
795.809 43.2629 mo
801.809 37.2629 li
795.809 37.2629 mo
801.809 43.2629 li
f
1 lw
0 lc
795.809 43.2629 mo
801.809 37.2629 li
795.809 37.2629 mo
801.809 43.2629 li
@
grestore
gsave
805.148 43.783 mo
812.148 43.783 li
812.148 36.783 li
805.148 36.783 li
805.148 43.783 li
clp
805.647 43.283 mo
811.647 37.283 li
805.647 37.283 mo
811.647 43.283 li
f
1 lw
0 lc
805.647 43.283 mo
811.647 37.283 li
805.647 37.283 mo
811.647 43.283 li
@
grestore
gsave
814.985 43.783 mo
821.986 43.783 li
821.986 36.783 li
814.985 36.783 li
814.985 43.783 li
clp
815.485 43.283 mo
821.485 37.283 li
815.485 37.283 mo
821.485 43.283 li
f
1 lw
0 lc
815.485 43.283 mo
821.485 37.283 li
815.485 37.283 mo
821.485 43.283 li
@
grestore
gsave
824.823 43.7629 mo
831.823 43.7629 li
831.823 36.763 li
824.823 36.763 li
824.823 43.7629 li
clp
825.323 43.2629 mo
831.323 37.2629 li
825.323 37.2629 mo
831.323 43.2629 li
f
1 lw
0 lc
825.323 43.2629 mo
831.323 37.2629 li
825.323 37.2629 mo
831.323 43.2629 li
@
grestore
gsave
834.661 43.783 mo
841.661 43.783 li
841.661 36.783 li
834.661 36.783 li
834.661 43.783 li
clp
835.161 43.283 mo
841.161 37.283 li
835.161 37.283 mo
841.161 43.283 li
f
1 lw
0 lc
835.161 43.283 mo
841.161 37.283 li
835.161 37.283 mo
841.161 43.283 li
@
grestore
gsave
844.499 43.7629 mo
851.499 43.7629 li
851.499 36.763 li
844.499 36.763 li
844.499 43.7629 li
clp
844.999 43.2629 mo
850.999 37.2629 li
844.999 37.2629 mo
850.999 43.2629 li
f
1 lw
0 lc
844.999 43.2629 mo
850.999 37.2629 li
844.999 37.2629 mo
850.999 43.2629 li
@
grestore
gsave
854.338 43.6625 mo
861.337 43.6625 li
861.337 36.6626 li
854.338 36.6626 li
854.338 43.6625 li
clp
854.837 43.1626 mo
860.837 37.1626 li
854.837 37.1626 mo
860.837 43.1626 li
f
1 lw
0 lc
854.837 43.1626 mo
860.837 37.1626 li
854.837 37.1626 mo
860.837 43.1626 li
@
grestore
gsave
864.176 43.6625 mo
871.176 43.6625 li
871.176 36.6626 li
864.176 36.6626 li
864.176 43.6625 li
clp
864.675 43.1626 mo
870.675 37.1626 li
864.675 37.1626 mo
870.675 43.1626 li
f
1 lw
0 lc
864.675 43.1626 mo
870.675 37.1626 li
864.675 37.1626 mo
870.675 43.1626 li
@
grestore
gsave
874.014 43.7027 mo
881.014 43.7027 li
881.014 36.7027 li
874.014 36.7027 li
874.014 43.7027 li
clp
874.513 43.2028 mo
880.513 37.2028 li
874.513 37.2028 mo
880.513 43.2028 li
f
1 lw
0 lc
874.513 43.2028 mo
880.513 37.2028 li
874.513 37.2028 mo
880.513 43.2028 li
@
grestore
gsave
883.851 43.6625 mo
890.852 43.6625 li
890.852 36.6626 li
883.851 36.6626 li
883.851 43.6625 li
clp
884.352 43.1626 mo
890.352 37.1626 li
884.352 37.1626 mo
890.352 43.1626 li
f
1 lw
0 lc
884.352 43.1626 mo
890.352 37.1626 li
884.352 37.1626 mo
890.352 43.1626 li
@
grestore
gsave
893.689 43.6625 mo
900.689 43.6625 li
900.689 36.6626 li
893.689 36.6626 li
893.689 43.6625 li
clp
894.19 43.1626 mo
900.19 37.1626 li
894.19 37.1626 mo
900.19 43.1626 li
f
1 lw
0 lc
894.19 43.1626 mo
900.19 37.1626 li
894.19 37.1626 mo
900.19 43.1626 li
@
grestore
gsave
903.527 43.6224 mo
910.527 43.6224 li
910.527 36.6224 li
903.527 36.6224 li
903.527 43.6224 li
clp
904.028 43.1224 mo
910.028 37.1224 li
904.028 37.1224 mo
910.028 43.1224 li
f
1 lw
0 lc
904.028 43.1224 mo
910.028 37.1224 li
904.028 37.1224 mo
910.028 43.1224 li
@
grestore
gsave
913.366 43.5823 mo
920.365 43.5823 li
920.365 36.5823 li
913.366 36.5823 li
913.366 43.5823 li
clp
913.866 43.0823 mo
919.866 37.0823 li
913.866 37.0823 mo
919.866 43.0823 li
f
1 lw
0 lc
913.866 43.0823 mo
919.866 37.0823 li
913.866 37.0823 mo
919.866 43.0823 li
@
grestore
gsave
923.204 43.522 mo
930.204 43.522 li
930.204 36.5221 li
923.204 36.5221 li
923.204 43.522 li
clp
923.704 43.0221 mo
929.704 37.0221 li
923.704 37.0221 mo
929.704 43.0221 li
f
1 lw
0 lc
923.704 43.0221 mo
929.704 37.0221 li
923.704 37.0221 mo
929.704 43.0221 li
@
grestore
gsave
933.042 43.5823 mo
940.042 43.5823 li
940.042 36.5823 li
933.042 36.5823 li
933.042 43.5823 li
clp
933.542 43.0823 mo
939.542 37.0823 li
933.542 37.0823 mo
939.542 43.0823 li
f
1 lw
0 lc
933.542 43.0823 mo
939.542 37.0823 li
933.542 37.0823 mo
939.542 43.0823 li
@
grestore
gsave
942.88 43.6023 mo
949.88 43.6023 li
949.88 36.6024 li
942.88 36.6024 li
942.88 43.6023 li
clp
943.38 43.1024 mo
949.38 37.1024 li
943.38 37.1024 mo
949.38 43.1024 li
f
1 lw
0 lc
943.38 43.1024 mo
949.38 37.1024 li
943.38 37.1024 mo
949.38 43.1024 li
@
grestore
gsave
952.718 43.522 mo
959.718 43.522 li
959.718 36.5221 li
952.718 36.5221 li
952.718 43.522 li
clp
953.218 43.0221 mo
959.218 37.0221 li
953.218 37.0221 mo
959.218 43.0221 li
f
1 lw
0 lc
953.218 43.0221 mo
959.218 37.0221 li
953.218 37.0221 mo
959.218 43.0221 li
@
grestore
gsave
962.556 43.4618 mo
969.556 43.4618 li
969.556 36.4619 li
962.556 36.4619 li
962.556 43.4618 li
clp
963.056 42.9619 mo
969.056 36.9619 li
963.056 36.9619 mo
969.056 42.9619 li
f
1 lw
0 lc
963.056 42.9619 mo
969.056 36.9619 li
963.056 36.9619 mo
969.056 42.9619 li
@
grestore
gsave
972.394 43.4618 mo
979.394 43.4618 li
979.394 36.4619 li
972.394 36.4619 li
972.394 43.4618 li
clp
972.894 42.9619 mo
978.894 36.9619 li
972.894 36.9619 mo
978.894 42.9619 li
f
1 lw
0 lc
972.894 42.9619 mo
978.894 36.9619 li
972.894 36.9619 mo
978.894 42.9619 li
@
grestore
gsave
982.232 43.502 mo
989.232 43.502 li
989.232 36.502 li
982.232 36.502 li
982.232 43.502 li
clp
982.732 43.0021 mo
988.732 37.0021 li
982.732 37.0021 mo
988.732 43.0021 li
f
1 lw
0 lc
982.732 43.0021 mo
988.732 37.0021 li
982.732 37.0021 mo
988.732 43.0021 li
@
grestore
gsave
992.07 43.4819 mo
999.07 43.4819 li
999.07 36.4819 li
992.07 36.4819 li
992.07 43.4819 li
clp
992.57 42.982 mo
998.57 36.982 li
992.57 36.982 mo
998.57 42.982 li
f
1 lw
0 lc
992.57 42.982 mo
998.57 36.982 li
992.57 36.982 mo
998.57 42.982 li
@
grestore
gsave
1001.91 43.4417 mo
1008.91 43.4417 li
1008.91 36.4418 li
1001.91 36.4418 li
1001.91 43.4417 li
clp
1002.41 42.9418 mo
1008.41 36.9418 li
1002.41 36.9418 mo
1008.41 42.9418 li
f
1 lw
0 lc
1002.41 42.9418 mo
1008.41 36.9418 li
1002.41 36.9418 mo
1008.41 42.9418 li
@
grestore
gsave
1011.75 43.4417 mo
1018.75 43.4417 li
1018.75 36.4418 li
1011.75 36.4418 li
1011.75 43.4417 li
clp
1012.25 42.9418 mo
1018.25 36.9418 li
1012.25 36.9418 mo
1018.25 42.9418 li
f
1 lw
0 lc
1012.25 42.9418 mo
1018.25 36.9418 li
1012.25 36.9418 mo
1018.25 42.9418 li
@
grestore
gsave
1021.58 43.4417 mo
1028.58 43.4417 li
1028.58 36.4418 li
1021.58 36.4418 li
1021.58 43.4417 li
clp
1022.08 42.9418 mo
1028.08 36.9418 li
1022.08 36.9418 mo
1028.08 42.9418 li
f
1 lw
0 lc
1022.08 42.9418 mo
1028.08 36.9418 li
1022.08 36.9418 mo
1028.08 42.9418 li
@
grestore
gsave
1031.42 43.4217 mo
1038.42 43.4217 li
1038.42 36.4217 li
1031.42 36.4217 li
1031.42 43.4217 li
clp
1031.92 42.9218 mo
1037.92 36.9218 li
1031.92 36.9218 mo
1037.92 42.9218 li
f
1 lw
0 lc
1031.92 42.9218 mo
1037.92 36.9218 li
1031.92 36.9218 mo
1037.92 42.9218 li
@
grestore
gsave
1041.26 43.4217 mo
1048.26 43.4217 li
1048.26 36.4217 li
1041.26 36.4217 li
1041.26 43.4217 li
clp
1041.76 42.9218 mo
1047.76 36.9218 li
1041.76 36.9218 mo
1047.76 42.9218 li
f
1 lw
0 lc
1041.76 42.9218 mo
1047.76 36.9218 li
1041.76 36.9218 mo
1047.76 42.9218 li
@
grestore
gsave
1051.1 43.4016 mo
1058.1 43.4016 li
1058.1 36.4017 li
1051.1 36.4017 li
1051.1 43.4016 li
clp
1051.6 42.9017 mo
1057.6 36.9017 li
1051.6 36.9017 mo
1057.6 42.9017 li
f
1 lw
0 lc
1051.6 42.9017 mo
1057.6 36.9017 li
1051.6 36.9017 mo
1057.6 42.9017 li
@
grestore
gsave
1060.94 43.3815 mo
1067.94 43.3815 li
1067.94 36.3816 li
1060.94 36.3816 li
1060.94 43.3815 li
clp
1061.44 42.8816 mo
1067.44 36.8816 li
1061.44 36.8816 mo
1067.44 42.8816 li
f
1 lw
0 lc
1061.44 42.8816 mo
1067.44 36.8816 li
1061.44 36.8816 mo
1067.44 42.8816 li
@
grestore
gsave
1070.77 43.4217 mo
1077.77 43.4217 li
1077.77 36.4217 li
1070.77 36.4217 li
1070.77 43.4217 li
clp
1071.27 42.9218 mo
1077.27 36.9218 li
1071.27 36.9218 mo
1077.27 42.9218 li
f
1 lw
0 lc
1071.27 42.9218 mo
1077.27 36.9218 li
1071.27 36.9218 mo
1077.27 42.9218 li
@
grestore
gsave
1080.61 43.4016 mo
1087.61 43.4016 li
1087.61 36.4017 li
1080.61 36.4017 li
1080.61 43.4016 li
clp
1081.11 42.9017 mo
1087.11 36.9017 li
1081.11 36.9017 mo
1087.11 42.9017 li
f
1 lw
0 lc
1081.11 42.9017 mo
1087.11 36.9017 li
1081.11 36.9017 mo
1087.11 42.9017 li
@
grestore
gsave
1090.45 43.502 mo
1097.45 43.502 li
1097.45 36.502 li
1090.45 36.502 li
1090.45 43.502 li
clp
1090.95 43.002 mo
1096.95 37.002 li
1090.95 37.002 mo
1096.95 43.002 li
f
1 lw
0 lc
1090.95 43.002 mo
1096.95 37.002 li
1090.95 37.002 mo
1096.95 43.002 li
@
grestore
.8 lw
0 lj
71.2883 543.417 mo
71.2883 6.20355 li
@
1142.65 543.417 mo
1142.65 6.20355 li
@
71.2883 543.417 mo
1142.65 543.417 li
@
71.2883 6.20355 mo
1142.65 6.20355 li
@
gsave
1135.65 537.917 mo
833.086 537.917 li
832.496 537.915 832.149 537.773 831.939 537.563 cv
831.73 537.354 831.588 537.007 831.586 536.417 cv
831.586 439.979 li
831.588 439.39 831.73 439.042 831.939 438.833 cv
832.149 438.624 832.496 438.481 833.086 438.48 cv
1135.65 438.48 li
1136.24 438.481 1136.59 438.624 1136.79 438.833 cv
1137 439.042 1137.15 439.39 1137.15 439.979 cv
1137.15 536.417 li
1137.15 537.007 1137 537.354 1136.79 537.563 cv
1136.59 537.773 1136.24 537.915 1135.65 537.917 cv
clp
831.586 438.48 mo
1137.15 438.48 li
1137.15 537.917 li
831.586 537.917 li
cp
0 0 0 0 cmyk
f
grestore
1135.66 538.917 mo
1135.66 538.917 1135.65 538.917 1135.65 538.917 cv
833.086 538.917 li
833.082 538.917 833.079 538.917 833.076 538.917 cv
832.336 538.917 831.688 538.726 831.232 538.271 cv
830.775 537.813 830.584 537.161 830.586 536.417 cv
830.586 439.979 li
830.584 439.236 830.775 438.583 831.232 438.126 cv
831.688 437.671 832.337 437.479 833.076 437.479 cv
833.079 437.479 833.082 437.479 833.086 437.479 cv
1135.65 437.479 li
1135.65 437.479 1135.66 437.479 1135.66 437.479 cv
1136.4 437.479 1137.05 437.671 1137.5 438.126 cv
1137.96 438.583 1138.15 439.236 1138.15 439.979 cv
1138.15 536.417 li
1138.15 537.161 1137.96 537.813 1137.5 538.271 cv
1137.05 538.726 1136.4 538.917 1135.66 538.917 cv
833.086 537.917 mo
1135.65 537.917 li
1136.24 537.915 1136.59 537.773 1136.79 537.563 cv
1137 537.354 1137.15 537.007 1137.15 536.417 cv
1137.15 439.979 li
1137.15 439.39 1137 439.042 1136.79 438.833 cv
1136.59 438.624 1136.24 438.481 1135.65 438.48 cv
833.086 438.48 li
832.496 438.481 832.149 438.624 831.939 438.833 cv
831.73 439.042 831.588 439.39 831.586 439.979 cv
831.586 536.417 li
831.588 537.007 831.73 537.354 831.939 537.563 cv
832.149 537.773 832.496 537.915 833.086 537.917 cv
833.086 537.917 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
835.086 453.683 mo
855.086 453.683 li
0 1 1 0 cmyk
@
873.786 443.083 mo
873.786 445.003 li
873.026 444.643 872.326 444.383 871.666 444.203 cv
870.986 444.043 870.346 443.943 869.746 443.943 cv
868.666 443.943 867.826 444.163 867.246 444.563 cv
866.666 444.983 866.386 445.583 866.386 446.343 cv
866.386 446.983 866.566 447.483 866.966 447.803 cv
867.346 448.143 868.086 448.403 869.166 448.603 cv
870.366 448.843 li
871.826 449.123 872.906 449.623 873.606 450.323 cv
874.306 451.043 874.666 451.983 874.666 453.163 cv
874.666 454.583 874.186 455.643 873.246 456.363 cv
872.286 457.083 870.906 457.443 869.086 457.443 cv
868.386 457.443 867.646 457.363 866.866 457.223 cv
866.086 457.083 865.286 456.863 864.466 456.543 cv
864.466 454.503 li
865.266 454.963 866.046 455.303 866.806 455.523 cv
867.566 455.763 868.326 455.863 869.086 455.863 cv
870.206 455.863 871.066 455.643 871.686 455.203 cv
872.286 454.763 872.606 454.143 872.606 453.303 cv
872.606 452.583 872.386 452.023 871.946 451.623 cv
871.506 451.223 870.786 450.923 869.786 450.723 cv
868.586 450.483 li
867.106 450.203 866.046 449.743 865.386 449.103 cv
864.726 448.483 864.406 447.623 864.406 446.503 cv
864.406 445.223 864.846 444.203 865.766 443.463 cv
866.666 442.723 867.926 442.343 869.526 442.343 cv
870.206 442.343 870.886 442.403 871.606 442.523 cv
872.306 442.643 873.026 442.843 873.786 443.083 cv
1 /0 /CSD get_res sepcs
1 sep
f
886.486 443.083 mo
886.486 445.003 li
885.726 444.643 885.026 444.383 884.366 444.203 cv
883.686 444.043 883.046 443.943 882.446 443.943 cv
881.366 443.943 880.526 444.163 879.946 444.563 cv
879.366 444.983 879.086 445.583 879.086 446.343 cv
879.086 446.983 879.266 447.483 879.666 447.803 cv
880.046 448.143 880.786 448.403 881.866 448.603 cv
883.066 448.843 li
884.526 449.123 885.606 449.623 886.306 450.323 cv
887.006 451.043 887.366 451.983 887.366 453.163 cv
887.366 454.583 886.886 455.643 885.946 456.363 cv
884.986 457.083 883.606 457.443 881.786 457.443 cv
881.086 457.443 880.346 457.363 879.566 457.223 cv
878.786 457.083 877.986 456.863 877.166 456.543 cv
877.166 454.503 li
877.966 454.963 878.746 455.303 879.506 455.523 cv
880.266 455.763 881.026 455.863 881.786 455.863 cv
882.906 455.863 883.766 455.643 884.386 455.203 cv
884.986 454.763 885.306 454.143 885.306 453.303 cv
885.306 452.583 885.086 452.023 884.646 451.623 cv
884.206 451.223 883.486 450.923 882.486 450.723 cv
881.286 450.483 li
879.806 450.203 878.746 449.743 878.086 449.103 cv
877.426 448.483 877.106 447.623 877.106 446.503 cv
877.106 445.223 877.546 444.203 878.466 443.463 cv
879.366 442.723 880.626 442.343 882.226 442.343 cv
882.906 442.343 883.586 442.403 884.306 442.523 cv
885.006 442.643 885.726 442.843 886.486 443.083 cv
f
892.426 444.223 mo
892.426 455.563 li
894.806 455.563 li
896.806 455.563 898.286 455.123 899.226 454.203 cv
900.146 453.283 900.626 451.843 900.626 449.883 cv
900.626 447.923 900.146 446.503 899.226 445.583 cv
898.286 444.683 896.806 444.223 894.806 444.223 cv
892.426 444.223 li
890.446 442.603 mo
894.506 442.603 li
897.326 442.603 899.406 443.203 900.726 444.363 cv
902.046 445.543 902.706 447.383 902.706 449.883 cv
902.706 452.403 902.026 454.243 900.706 455.423 cv
899.386 456.603 897.306 457.183 894.506 457.183 cv
890.446 457.183 li
890.446 442.603 li
f
907.826 450.223 mo
907.826 455.563 li
910.986 455.563 li
912.046 455.563 912.826 455.343 913.346 454.903 cv
913.846 454.463 914.106 453.803 914.106 452.883 cv
914.106 451.983 913.846 451.323 913.346 450.883 cv
912.826 450.443 912.046 450.223 910.986 450.223 cv
907.826 450.223 li
907.826 444.223 mo
907.826 448.623 li
910.746 448.623 li
911.706 448.623 912.406 448.443 912.886 448.083 cv
913.366 447.723 913.606 447.183 913.606 446.423 cv
913.606 445.703 913.366 445.143 912.886 444.783 cv
912.406 444.423 911.706 444.223 910.746 444.223 cv
907.826 444.223 li
905.846 442.603 mo
910.886 442.603 li
912.386 442.603 913.546 442.923 914.366 443.543 cv
915.166 444.183 915.586 445.063 915.586 446.203 cv
915.586 447.103 915.366 447.823 914.946 448.343 cv
914.526 448.863 913.926 449.203 913.126 449.323 cv
914.086 449.543 914.846 449.983 915.386 450.643 cv
915.906 451.303 916.186 452.123 916.186 453.103 cv
916.186 454.423 915.726 455.423 914.846 456.123 cv
913.966 456.843 912.706 457.183 911.086 457.183 cv
905.846 457.183 li
905.846 442.603 li
f
919.566 442.603 mo
922.226 442.603 li
928.686 454.803 li
928.686 442.603 li
930.606 442.603 li
930.606 457.183 li
927.946 457.183 li
921.486 444.983 li
921.486 457.183 li
919.566 457.183 li
919.566 442.603 li
f
945.125 442.003 mo
944.245 443.523 943.606 445.003 943.186 446.463 cv
942.745 447.923 942.546 449.403 942.546 450.903 cv
942.546 452.423 942.745 453.903 943.186 455.363 cv
943.606 456.843 944.245 458.303 945.125 459.803 cv
943.566 459.803 li
942.586 458.263 941.846 456.783 941.365 455.303 cv
940.885 453.823 940.646 452.363 940.646 450.903 cv
940.646 449.463 940.885 448.003 941.365 446.523 cv
941.846 445.043 942.566 443.543 943.566 442.003 cv
945.125 442.003 li
f
946.686 442.603 mo
959.006 442.603 li
959.006 444.263 li
953.826 444.263 li
953.826 457.183 li
951.846 457.183 li
951.846 444.263 li
946.686 444.263 li
946.686 442.603 li
f
967.165 447.923 mo
966.965 447.803 966.745 447.723 966.505 447.663 cv
966.265 447.623 966.005 447.583 965.725 447.583 cv
964.705 447.583 963.925 447.923 963.385 448.583 cv
962.825 449.243 962.565 450.183 962.565 451.423 cv
962.565 457.183 li
960.765 457.183 li
960.765 446.243 li
962.565 446.243 li
962.565 447.943 li
962.925 447.283 963.425 446.783 964.025 446.463 cv
964.625 446.143 965.365 445.983 966.245 445.983 cv
966.365 445.983 966.505 446.003 966.665 446.003 cv
966.805 446.023 966.965 446.043 967.165 446.083 cv
967.165 447.923 li
f
974.025 451.683 mo
972.565 451.683 971.565 451.863 971.005 452.183 cv
970.445 452.523 970.165 453.083 970.165 453.883 cv
970.165 454.523 970.365 455.043 970.785 455.403 cv
971.205 455.783 971.785 455.963 972.505 455.963 cv
973.505 455.963 974.305 455.623 974.905 454.903 cv
975.505 454.203 975.805 453.263 975.805 452.083 cv
975.805 451.683 li
974.025 451.683 li
977.605 450.943 mo
977.605 457.183 li
975.805 457.183 li
975.805 455.523 li
975.385 456.203 974.865 456.683 974.265 456.983 cv
973.665 457.283 972.905 457.443 972.025 457.443 cv
970.905 457.443 970.005 457.143 969.345 456.523 cv
968.685 455.903 968.365 455.063 968.365 454.003 cv
968.365 452.783 968.765 451.863 969.605 451.223 cv
970.425 450.603 971.645 450.283 973.285 450.283 cv
975.805 450.283 li
975.805 450.103 li
975.805 449.283 975.525 448.643 974.985 448.183 cv
974.445 447.743 973.685 447.503 972.705 447.503 cv
972.065 447.503 971.465 447.583 970.865 447.743 cv
970.265 447.903 969.705 448.123 969.165 448.403 cv
969.165 446.743 li
969.805 446.503 970.445 446.303 971.065 446.183 cv
971.685 446.063 972.285 445.983 972.885 445.983 cv
974.465 445.983 975.645 446.403 976.425 447.223 cv
977.205 448.043 977.605 449.283 977.605 450.943 cv
f
981.306 446.243 mo
983.106 446.243 li
983.106 457.183 li
981.306 457.183 li
981.306 446.243 li
981.306 441.983 mo
983.106 441.983 li
983.106 444.263 li
981.306 444.263 li
981.306 441.983 li
f
995.965 450.583 mo
995.965 457.183 li
994.166 457.183 li
994.166 450.643 li
994.166 449.603 993.945 448.843 993.546 448.323 cv
993.146 447.803 992.546 447.543 991.745 447.543 cv
990.766 447.543 990.005 447.863 989.445 448.483 cv
988.885 449.103 988.605 449.943 988.605 451.003 cv
988.605 457.183 li
986.805 457.183 li
986.805 446.243 li
988.605 446.243 li
988.605 447.943 li
989.026 447.303 989.526 446.803 990.125 446.483 cv
990.705 446.163 991.385 445.983 992.146 445.983 cv
993.385 445.983 994.345 446.383 994.985 447.163 cv
995.625 447.943 995.965 449.083 995.965 450.583 cv
f
999.546 446.243 mo
1001.35 446.243 li
1001.35 457.183 li
999.546 457.183 li
999.546 446.243 li
999.546 441.983 mo
1001.35 441.983 li
1001.35 444.263 li
999.546 444.263 li
999.546 441.983 li
f
1014.21 450.583 mo
1014.21 457.183 li
1012.41 457.183 li
1012.41 450.643 li
1012.41 449.603 1012.19 448.843 1011.79 448.323 cv
1011.39 447.803 1010.79 447.543 1009.99 447.543 cv
1009.01 447.543 1008.25 447.863 1007.69 448.483 cv
1007.13 449.103 1006.85 449.943 1006.85 451.003 cv
1006.85 457.183 li
1005.05 457.183 li
1005.05 446.243 li
1006.85 446.243 li
1006.85 447.943 li
1007.27 447.303 1007.77 446.803 1008.37 446.483 cv
1008.95 446.163 1009.63 445.983 1010.39 445.983 cv
1011.63 445.983 1012.59 446.383 1013.23 447.163 cv
1013.87 447.943 1014.21 449.083 1014.21 450.583 cv
f
1024.99 451.583 mo
1024.99 450.303 1024.71 449.283 1024.19 448.563 cv
1023.65 447.843 1022.89 447.483 1021.93 447.483 cv
1020.97 447.483 1020.21 447.843 1019.67 448.563 cv
1019.13 449.283 1018.87 450.303 1018.87 451.583 cv
1018.87 452.883 1019.13 453.883 1019.67 454.603 cv
1020.21 455.323 1020.97 455.683 1021.93 455.683 cv
1022.89 455.683 1023.65 455.323 1024.19 454.603 cv
1024.71 453.883 1024.99 452.883 1024.99 451.583 cv
1026.79 455.823 mo
1026.79 457.663 1026.37 459.043 1025.55 459.963 cv
1024.71 460.863 1023.45 461.323 1021.75 461.323 cv
1021.11 461.323 1020.53 461.263 1019.97 461.183 cv
1019.41 461.083 1018.85 460.943 1018.33 460.743 cv
1018.33 459.003 li
1018.85 459.283 1019.37 459.483 1019.89 459.623 cv
1020.41 459.763 1020.93 459.843 1021.47 459.843 cv
1022.63 459.843 1023.51 459.523 1024.11 458.923 cv
1024.69 458.303 1024.99 457.383 1024.99 456.143 cv
1024.99 455.263 li
1024.61 455.903 1024.13 456.383 1023.55 456.703 cv
1022.97 457.023 1022.29 457.183 1021.49 457.183 cv
1020.13 457.183 1019.05 456.683 1018.23 455.663 cv
1017.41 454.643 1017.01 453.283 1017.01 451.583 cv
1017.01 449.903 1017.41 448.543 1018.23 447.523 cv
1019.05 446.503 1020.13 445.983 1021.49 445.983 cv
1022.29 445.983 1022.97 446.143 1023.55 446.463 cv
1024.13 446.783 1024.61 447.263 1024.99 447.903 cv
1024.99 446.243 li
1026.79 446.243 li
1026.79 455.823 li
f
1030.95 454.703 mo
1033.01 454.703 li
1033.01 456.383 li
1031.41 459.483 li
1030.15 459.483 li
1030.95 456.383 li
1030.95 454.703 li
f
1052.03 443.083 mo
1052.03 445.003 li
1051.27 444.643 1050.57 444.383 1049.91 444.203 cv
1049.23 444.043 1048.59 443.943 1047.99 443.943 cv
1046.91 443.943 1046.07 444.163 1045.49 444.563 cv
1044.91 444.983 1044.63 445.583 1044.63 446.343 cv
1044.63 446.983 1044.81 447.483 1045.21 447.803 cv
1045.59 448.143 1046.33 448.403 1047.41 448.603 cv
1048.61 448.843 li
1050.07 449.123 1051.15 449.623 1051.85 450.323 cv
1052.55 451.043 1052.91 451.983 1052.91 453.163 cv
1052.91 454.583 1052.43 455.643 1051.49 456.363 cv
1050.53 457.083 1049.15 457.443 1047.33 457.443 cv
1046.63 457.443 1045.89 457.363 1045.11 457.223 cv
1044.33 457.083 1043.53 456.863 1042.71 456.543 cv
1042.71 454.503 li
1043.51 454.963 1044.29 455.303 1045.05 455.523 cv
1045.81 455.763 1046.57 455.863 1047.33 455.863 cv
1048.45 455.863 1049.31 455.643 1049.93 455.203 cv
1050.53 454.763 1050.85 454.143 1050.85 453.303 cv
1050.85 452.583 1050.63 452.023 1050.19 451.623 cv
1049.75 451.223 1049.03 450.923 1048.03 450.723 cv
1046.83 450.483 li
1045.35 450.203 1044.29 449.743 1043.63 449.103 cv
1042.97 448.483 1042.65 447.623 1042.65 446.503 cv
1042.65 445.223 1043.09 444.203 1044.01 443.463 cv
1044.91 442.723 1046.17 442.343 1047.77 442.343 cv
1048.45 442.343 1049.13 442.403 1049.85 442.523 cv
1050.55 442.643 1051.27 442.843 1052.03 443.083 cv
f
1055.91 446.243 mo
1057.71 446.243 li
1057.71 457.183 li
1055.91 457.183 li
1055.91 446.243 li
1055.91 441.983 mo
1057.71 441.983 li
1057.71 444.263 li
1055.91 444.263 li
1055.91 441.983 li
f
1068.67 451.583 mo
1068.67 450.303 1068.39 449.283 1067.87 448.563 cv
1067.33 447.843 1066.57 447.483 1065.61 447.483 cv
1064.65 447.483 1063.89 447.843 1063.35 448.563 cv
1062.81 449.283 1062.55 450.303 1062.55 451.583 cv
1062.55 452.883 1062.81 453.883 1063.35 454.603 cv
1063.89 455.323 1064.65 455.683 1065.61 455.683 cv
1066.57 455.683 1067.33 455.323 1067.87 454.603 cv
1068.39 453.883 1068.67 452.883 1068.67 451.583 cv
1070.47 455.823 mo
1070.47 457.663 1070.05 459.043 1069.23 459.963 cv
1068.39 460.863 1067.13 461.323 1065.43 461.323 cv
1064.79 461.323 1064.21 461.263 1063.65 461.183 cv
1063.09 461.083 1062.53 460.943 1062.01 460.743 cv
1062.01 459.003 li
1062.53 459.283 1063.05 459.483 1063.57 459.623 cv
1064.09 459.763 1064.61 459.843 1065.15 459.843 cv
1066.31 459.843 1067.19 459.523 1067.79 458.923 cv
1068.37 458.303 1068.67 457.383 1068.67 456.143 cv
1068.67 455.263 li
1068.29 455.903 1067.81 456.383 1067.23 456.703 cv
1066.65 457.023 1065.97 457.183 1065.17 457.183 cv
1063.81 457.183 1062.73 456.683 1061.91 455.663 cv
1061.09 454.643 1060.69 453.283 1060.69 451.583 cv
1060.69 449.903 1061.09 448.543 1061.91 447.523 cv
1062.73 446.503 1063.81 445.983 1065.17 445.983 cv
1065.97 445.983 1066.65 446.143 1067.23 446.463 cv
1067.81 446.783 1068.29 447.263 1068.67 447.903 cv
1068.67 446.243 li
1070.47 446.243 li
1070.47 455.823 li
f
1082.68 448.343 mo
1083.12 447.543 1083.66 446.963 1084.28 446.563 cv
1084.9 446.183 1085.64 445.983 1086.5 445.983 cv
1087.62 445.983 1088.5 446.383 1089.12 447.183 cv
1089.74 447.983 1090.06 449.123 1090.06 450.583 cv
1090.06 457.183 li
1088.26 457.183 li
1088.26 450.643 li
1088.26 449.603 1088.06 448.823 1087.7 448.303 cv
1087.32 447.803 1086.76 447.543 1086 447.543 cv
1085.06 447.543 1084.32 447.863 1083.78 448.483 cv
1083.24 449.103 1082.98 449.943 1082.98 451.003 cv
1082.98 457.183 li
1081.18 457.183 li
1081.18 450.643 li
1081.18 449.603 1080.98 448.823 1080.62 448.303 cv
1080.24 447.803 1079.66 447.543 1078.9 447.543 cv
1077.98 447.543 1077.24 447.863 1076.7 448.483 cv
1076.16 449.103 1075.9 449.943 1075.9 451.003 cv
1075.9 457.183 li
1074.1 457.183 li
1074.1 446.243 li
1075.9 446.243 li
1075.9 447.943 li
1076.3 447.283 1076.8 446.783 1077.38 446.463 cv
1077.94 446.143 1078.62 445.983 1079.42 445.983 cv
1080.22 445.983 1080.88 446.183 1081.44 446.583 cv
1082 446.983 1082.4 447.583 1082.68 448.343 cv
f
1097.88 447.503 mo
1096.92 447.503 1096.16 447.883 1095.6 448.643 cv
1095.04 449.403 1094.76 450.423 1094.76 451.723 cv
1094.76 453.043 1095.02 454.063 1095.58 454.823 cv
1096.14 455.583 1096.9 455.943 1097.88 455.943 cv
1098.84 455.943 1099.6 455.583 1100.16 454.823 cv
1100.72 454.063 1101 453.043 1101 451.723 cv
1101 450.443 1100.72 449.403 1100.16 448.643 cv
1099.6 447.883 1098.84 447.503 1097.88 447.503 cv
1097.88 445.983 mo
1099.44 445.983 1100.66 446.503 1101.56 447.503 cv
1102.44 448.523 1102.9 449.923 1102.9 451.723 cv
1102.9 453.523 1102.44 454.923 1101.56 455.923 cv
1100.66 456.943 1099.44 457.443 1097.88 457.443 cv
1096.3 457.443 1095.06 456.943 1094.18 455.923 cv
1093.3 454.923 1092.86 453.523 1092.86 451.723 cv
1092.86 449.923 1093.3 448.523 1094.18 447.503 cv
1095.06 446.503 1096.3 445.983 1097.88 445.983 cv
f
1105.88 446.243 mo
1107.68 446.243 li
1107.68 457.183 li
1105.88 457.183 li
1105.88 446.243 li
1105.88 441.983 mo
1107.68 441.983 li
1107.68 444.263 li
1105.88 444.263 li
1105.88 441.983 li
f
1118.64 447.903 mo
1118.64 441.983 li
1120.44 441.983 li
1120.44 457.183 li
1118.64 457.183 li
1118.64 455.543 li
1118.26 456.203 1117.78 456.683 1117.2 456.983 cv
1116.63 457.283 1115.94 457.443 1115.14 457.443 cv
1113.82 457.443 1112.74 456.923 1111.9 455.883 cv
1111.06 454.843 1110.66 453.443 1110.66 451.723 cv
1110.66 450.003 1111.06 448.623 1111.9 447.563 cv
1112.74 446.523 1113.82 445.983 1115.14 445.983 cv
1115.94 445.983 1116.63 446.143 1117.2 446.463 cv
1117.78 446.783 1118.26 447.263 1118.64 447.903 cv
1112.52 451.723 mo
1112.52 453.043 1112.78 454.083 1113.32 454.843 cv
1113.86 455.603 1114.63 455.963 1115.58 455.963 cv
1116.52 455.963 1117.26 455.603 1117.82 454.843 cv
1118.36 454.083 1118.64 453.043 1118.64 451.723 cv
1118.64 450.403 1118.36 449.383 1117.82 448.623 cv
1117.26 447.863 1116.52 447.483 1115.58 447.483 cv
1114.63 447.483 1113.86 447.863 1113.32 448.623 cv
1112.78 449.383 1112.52 450.403 1112.52 451.723 cv
f
1123.86 442.003 mo
1125.42 442.003 li
1126.38 443.543 1127.12 445.043 1127.6 446.523 cv
1128.08 448.003 1128.34 449.463 1128.34 450.903 cv
1128.34 452.363 1128.08 453.823 1127.6 455.303 cv
1127.12 456.783 1126.38 458.263 1125.42 459.803 cv
1123.86 459.803 li
1124.72 458.303 1125.36 456.843 1125.8 455.363 cv
1126.22 453.903 1126.44 452.423 1126.44 450.903 cv
1126.44 449.403 1126.22 447.923 1125.8 446.463 cv
1125.36 445.003 1124.72 443.523 1123.86 442.003 cv
f
835.086 478.042 mo
855.086 478.042 li
0 1 1 0 cmyk
@
842.086 481.042 mo
848.086 475.042 li
842.086 475.042 mo
848.086 481.042 li
f
1 lw
0 lc
842.086 481.042 mo
848.086 475.042 li
842.086 475.042 mo
848.086 481.042 li
@
873.786 467.442 mo
873.786 469.362 li
873.026 469.002 872.326 468.742 871.666 468.562 cv
870.986 468.402 870.346 468.302 869.746 468.302 cv
868.666 468.302 867.826 468.522 867.246 468.922 cv
866.666 469.342 866.386 469.942 866.386 470.702 cv
866.386 471.342 866.566 471.842 866.966 472.162 cv
867.346 472.502 868.086 472.762 869.166 472.962 cv
870.366 473.202 li
871.826 473.482 872.906 473.982 873.606 474.682 cv
874.306 475.402 874.666 476.342 874.666 477.522 cv
874.666 478.942 874.186 480.002 873.246 480.722 cv
872.286 481.442 870.906 481.802 869.086 481.802 cv
868.386 481.802 867.646 481.722 866.866 481.582 cv
866.086 481.442 865.286 481.222 864.466 480.902 cv
864.466 478.862 li
865.266 479.322 866.046 479.662 866.806 479.882 cv
867.566 480.122 868.326 480.222 869.086 480.222 cv
870.206 480.222 871.066 480.002 871.686 479.562 cv
872.286 479.122 872.606 478.502 872.606 477.662 cv
872.606 476.942 872.386 476.382 871.946 475.982 cv
871.506 475.582 870.786 475.282 869.786 475.082 cv
868.586 474.842 li
867.106 474.562 866.046 474.102 865.386 473.462 cv
864.726 472.842 864.406 471.982 864.406 470.862 cv
864.406 469.582 864.846 468.562 865.766 467.822 cv
866.666 467.082 867.926 466.702 869.526 466.702 cv
870.206 466.702 870.886 466.762 871.606 466.882 cv
872.306 467.002 873.026 467.202 873.786 467.442 cv
1 /0 /CSD get_res sepcs
1 sep
f
886.486 467.442 mo
886.486 469.362 li
885.726 469.002 885.026 468.742 884.366 468.562 cv
883.686 468.402 883.046 468.302 882.446 468.302 cv
881.366 468.302 880.526 468.522 879.946 468.922 cv
879.366 469.342 879.086 469.942 879.086 470.702 cv
879.086 471.342 879.266 471.842 879.666 472.162 cv
880.046 472.502 880.786 472.762 881.866 472.962 cv
883.066 473.202 li
884.526 473.482 885.606 473.982 886.306 474.682 cv
887.006 475.402 887.366 476.342 887.366 477.522 cv
887.366 478.942 886.886 480.002 885.946 480.722 cv
884.986 481.442 883.606 481.802 881.786 481.802 cv
881.086 481.802 880.346 481.722 879.566 481.582 cv
878.786 481.442 877.986 481.222 877.166 480.902 cv
877.166 478.862 li
877.966 479.322 878.746 479.662 879.506 479.882 cv
880.266 480.122 881.026 480.222 881.786 480.222 cv
882.906 480.222 883.766 480.002 884.386 479.562 cv
884.986 479.122 885.306 478.502 885.306 477.662 cv
885.306 476.942 885.086 476.382 884.646 475.982 cv
884.206 475.582 883.486 475.282 882.486 475.082 cv
881.286 474.842 li
879.806 474.562 878.746 474.102 878.086 473.462 cv
877.426 472.842 877.106 471.982 877.106 470.862 cv
877.106 469.582 877.546 468.562 878.466 467.822 cv
879.366 467.082 880.626 466.702 882.226 466.702 cv
882.906 466.702 883.586 466.762 884.306 466.882 cv
885.006 467.002 885.726 467.202 886.486 467.442 cv
f
892.426 468.582 mo
892.426 479.922 li
894.806 479.922 li
896.806 479.922 898.286 479.482 899.226 478.562 cv
900.146 477.642 900.626 476.202 900.626 474.242 cv
900.626 472.282 900.146 470.862 899.226 469.942 cv
898.286 469.042 896.806 468.582 894.806 468.582 cv
892.426 468.582 li
890.446 466.962 mo
894.506 466.962 li
897.326 466.962 899.406 467.562 900.726 468.722 cv
902.046 469.902 902.706 471.742 902.706 474.242 cv
902.706 476.762 902.026 478.602 900.706 479.782 cv
899.386 480.962 897.306 481.542 894.506 481.542 cv
890.446 481.542 li
890.446 466.962 li
f
907.826 474.582 mo
907.826 479.922 li
910.986 479.922 li
912.046 479.922 912.826 479.702 913.346 479.262 cv
913.846 478.822 914.106 478.162 914.106 477.242 cv
914.106 476.342 913.846 475.682 913.346 475.242 cv
912.826 474.802 912.046 474.582 910.986 474.582 cv
907.826 474.582 li
907.826 468.582 mo
907.826 472.982 li
910.746 472.982 li
911.706 472.982 912.406 472.802 912.886 472.442 cv
913.366 472.082 913.606 471.542 913.606 470.782 cv
913.606 470.062 913.366 469.502 912.886 469.142 cv
912.406 468.782 911.706 468.582 910.746 468.582 cv
907.826 468.582 li
905.846 466.962 mo
910.886 466.962 li
912.386 466.962 913.546 467.282 914.366 467.902 cv
915.166 468.542 915.586 469.422 915.586 470.562 cv
915.586 471.462 915.366 472.182 914.946 472.702 cv
914.526 473.222 913.926 473.562 913.126 473.682 cv
914.086 473.902 914.846 474.342 915.386 475.002 cv
915.906 475.662 916.186 476.482 916.186 477.462 cv
916.186 478.782 915.726 479.782 914.846 480.482 cv
913.966 481.202 912.706 481.542 911.086 481.542 cv
905.846 481.542 li
905.846 466.962 li
f
919.566 466.962 mo
922.226 466.962 li
928.686 479.162 li
928.686 466.962 li
930.606 466.962 li
930.606 481.542 li
927.946 481.542 li
921.486 469.342 li
921.486 481.542 li
919.566 481.542 li
919.566 466.962 li
f
945.125 466.362 mo
944.245 467.882 943.606 469.362 943.186 470.822 cv
942.745 472.282 942.546 473.762 942.546 475.262 cv
942.546 476.782 942.745 478.262 943.186 479.722 cv
943.606 481.202 944.245 482.662 945.125 484.162 cv
943.566 484.162 li
942.586 482.622 941.846 481.142 941.365 479.662 cv
940.885 478.182 940.646 476.722 940.646 475.262 cv
940.646 473.822 940.885 472.362 941.365 470.882 cv
941.846 469.402 942.566 467.902 943.566 466.362 cv
945.125 466.362 li
f
946.686 466.962 mo
959.006 466.962 li
959.006 468.622 li
953.826 468.622 li
953.826 481.542 li
951.846 481.542 li
951.846 468.622 li
946.686 468.622 li
946.686 466.962 li
f
970.185 475.622 mo
970.185 476.502 li
961.925 476.502 li
962.005 477.742 962.365 478.702 963.045 479.342 cv
963.705 479.982 964.625 480.302 965.825 480.302 cv
966.505 480.302 967.185 480.222 967.825 480.062 cv
968.465 479.902 969.125 479.642 969.765 479.282 cv
969.765 480.982 li
969.125 481.262 968.465 481.482 967.785 481.602 cv
967.105 481.722 966.405 481.802 965.725 481.802 cv
963.965 481.802 962.585 481.302 961.565 480.302 cv
960.545 479.302 960.045 477.922 960.045 476.182 cv
960.045 474.402 960.525 472.982 961.485 471.922 cv
962.445 470.882 963.765 470.342 965.405 470.342 cv
966.885 470.342 968.045 470.822 968.905 471.762 cv
969.745 472.722 970.185 474.002 970.185 475.622 cv
968.385 475.102 mo
968.365 474.122 968.085 473.342 967.565 472.742 cv
967.025 472.162 966.305 471.862 965.425 471.862 cv
964.425 471.862 963.625 472.162 963.025 472.722 cv
962.425 473.282 962.065 474.082 961.985 475.102 cv
968.385 475.102 li
f
980.106 470.922 mo
980.106 472.622 li
979.586 472.382 979.066 472.182 978.526 472.042 cv
977.966 471.922 977.406 471.842 976.826 471.842 cv
975.926 471.842 975.246 471.982 974.806 472.262 cv
974.366 472.542 974.146 472.942 974.146 473.482 cv
974.146 473.902 974.306 474.222 974.626 474.462 cv
974.946 474.702 975.586 474.942 976.546 475.142 cv
977.166 475.282 li
978.446 475.562 979.346 475.962 979.886 476.442 cv
980.406 476.942 980.686 477.642 980.686 478.522 cv
980.686 479.542 980.286 480.342 979.486 480.922 cv
978.686 481.522 977.566 481.802 976.166 481.802 cv
975.566 481.802 974.966 481.742 974.326 481.642 cv
973.686 481.542 973.026 481.382 972.326 481.142 cv
972.326 479.282 li
972.986 479.642 973.646 479.902 974.286 480.062 cv
974.926 480.242 975.566 480.322 976.206 480.322 cv
977.046 480.322 977.706 480.182 978.166 479.902 cv
978.606 479.622 978.846 479.202 978.846 478.662 cv
978.846 478.182 978.666 477.802 978.346 477.542 cv
978.026 477.282 977.306 477.022 976.186 476.782 cv
975.566 476.642 li
974.446 476.402 973.626 476.042 973.146 475.562 cv
972.646 475.082 972.406 474.422 972.406 473.562 cv
972.406 472.542 972.766 471.742 973.486 471.182 cv
974.206 470.622 975.246 470.342 976.606 470.342 cv
977.266 470.342 977.886 470.402 978.486 470.502 cv
979.066 470.602 979.606 470.742 980.106 470.922 cv
f
985.326 467.502 mo
985.326 470.602 li
989.026 470.602 li
989.026 472.002 li
985.326 472.002 li
985.326 477.942 li
985.326 478.842 985.446 479.422 985.686 479.662 cv
985.926 479.922 986.426 480.042 987.186 480.042 cv
989.026 480.042 li
989.026 481.542 li
987.186 481.542 li
985.786 481.542 984.826 481.282 984.306 480.762 cv
983.786 480.242 983.526 479.302 983.526 477.942 cv
983.526 472.002 li
982.206 472.002 li
982.206 470.602 li
983.526 470.602 li
983.526 467.502 li
985.326 467.502 li
f
991.385 470.602 mo
993.185 470.602 li
993.185 481.542 li
991.385 481.542 li
991.385 470.602 li
991.385 466.342 mo
993.185 466.342 li
993.185 468.622 li
991.385 468.622 li
991.385 466.342 li
f
1006.05 474.942 mo
1006.05 481.542 li
1004.25 481.542 li
1004.25 475.002 li
1004.25 473.962 1004.03 473.202 1003.63 472.682 cv
1003.23 472.162 1002.63 471.902 1001.83 471.902 cv
1000.85 471.902 1000.09 472.222 999.525 472.842 cv
998.965 473.462 998.685 474.302 998.685 475.362 cv
998.685 481.542 li
996.885 481.542 li
996.885 470.602 li
998.685 470.602 li
998.685 472.302 li
999.105 471.662 999.605 471.162 1000.21 470.842 cv
1000.79 470.522 1001.47 470.342 1002.23 470.342 cv
1003.47 470.342 1004.43 470.742 1005.07 471.522 cv
1005.71 472.302 1006.05 473.442 1006.05 474.942 cv
f
1016.83 475.942 mo
1016.83 474.662 1016.55 473.642 1016.03 472.922 cv
1015.49 472.202 1014.73 471.842 1013.77 471.842 cv
1012.81 471.842 1012.05 472.202 1011.51 472.922 cv
1010.97 473.642 1010.71 474.662 1010.71 475.942 cv
1010.71 477.242 1010.97 478.242 1011.51 478.962 cv
1012.05 479.682 1012.81 480.042 1013.77 480.042 cv
1014.73 480.042 1015.49 479.682 1016.03 478.962 cv
1016.55 478.242 1016.83 477.242 1016.83 475.942 cv
1018.63 480.182 mo
1018.63 482.022 1018.21 483.402 1017.39 484.322 cv
1016.55 485.222 1015.29 485.682 1013.59 485.682 cv
1012.95 485.682 1012.37 485.622 1011.81 485.542 cv
1011.25 485.442 1010.69 485.302 1010.17 485.102 cv
1010.17 483.362 li
1010.69 483.642 1011.21 483.842 1011.73 483.982 cv
1012.25 484.122 1012.77 484.202 1013.31 484.202 cv
1014.47 484.202 1015.35 483.882 1015.95 483.282 cv
1016.53 482.662 1016.83 481.742 1016.83 480.502 cv
1016.83 479.622 li
1016.45 480.262 1015.97 480.742 1015.39 481.062 cv
1014.81 481.382 1014.13 481.542 1013.33 481.542 cv
1011.97 481.542 1010.89 481.042 1010.07 480.022 cv
1009.25 479.002 1008.85 477.642 1008.85 475.942 cv
1008.85 474.262 1009.25 472.902 1010.07 471.882 cv
1010.89 470.862 1011.97 470.342 1013.33 470.342 cv
1014.13 470.342 1014.81 470.502 1015.39 470.822 cv
1015.97 471.142 1016.45 471.622 1016.83 472.262 cv
1016.83 470.602 li
1018.63 470.602 li
1018.63 480.182 li
f
1022.79 479.062 mo
1024.85 479.062 li
1024.85 480.742 li
1023.25 483.842 li
1021.99 483.842 li
1022.79 480.742 li
1022.79 479.062 li
f
1043.86 467.442 mo
1043.86 469.362 li
1043.1 469.002 1042.41 468.742 1041.74 468.562 cv
1041.07 468.402 1040.43 468.302 1039.83 468.302 cv
1038.74 468.302 1037.91 468.522 1037.33 468.922 cv
1036.74 469.342 1036.47 469.942 1036.47 470.702 cv
1036.47 471.342 1036.65 471.842 1037.05 472.162 cv
1037.43 472.502 1038.17 472.762 1039.24 472.962 cv
1040.45 473.202 li
1041.91 473.482 1042.98 473.982 1043.69 474.682 cv
1044.39 475.402 1044.74 476.342 1044.74 477.522 cv
1044.74 478.942 1044.27 480.002 1043.33 480.722 cv
1042.36 481.442 1040.98 481.802 1039.17 481.802 cv
1038.47 481.802 1037.73 481.722 1036.95 481.582 cv
1036.17 481.442 1035.36 481.222 1034.55 480.902 cv
1034.55 478.862 li
1035.35 479.322 1036.13 479.662 1036.89 479.882 cv
1037.65 480.122 1038.41 480.222 1039.17 480.222 cv
1040.29 480.222 1041.15 480.002 1041.77 479.562 cv
1042.36 479.122 1042.69 478.502 1042.69 477.662 cv
1042.69 476.942 1042.47 476.382 1042.03 475.982 cv
1041.59 475.582 1040.86 475.282 1039.86 475.082 cv
1038.67 474.842 li
1037.19 474.562 1036.13 474.102 1035.47 473.462 cv
1034.81 472.842 1034.48 471.982 1034.48 470.862 cv
1034.48 469.582 1034.93 468.562 1035.85 467.822 cv
1036.74 467.082 1038.01 466.702 1039.6 466.702 cv
1040.29 466.702 1040.97 466.762 1041.69 466.882 cv
1042.39 467.002 1043.1 467.202 1043.86 467.442 cv
f
1047.74 470.602 mo
1049.55 470.602 li
1049.55 481.542 li
1047.74 481.542 li
1047.74 470.602 li
1047.74 466.342 mo
1049.55 466.342 li
1049.55 468.622 li
1047.74 468.622 li
1047.74 466.342 li
f
1060.51 475.942 mo
1060.51 474.662 1060.23 473.642 1059.71 472.922 cv
1059.17 472.202 1058.41 471.842 1057.45 471.842 cv
1056.49 471.842 1055.73 472.202 1055.19 472.922 cv
1054.65 473.642 1054.39 474.662 1054.39 475.942 cv
1054.39 477.242 1054.65 478.242 1055.19 478.962 cv
1055.73 479.682 1056.49 480.042 1057.45 480.042 cv
1058.41 480.042 1059.17 479.682 1059.71 478.962 cv
1060.23 478.242 1060.51 477.242 1060.51 475.942 cv
1062.31 480.182 mo
1062.31 482.022 1061.89 483.402 1061.07 484.322 cv
1060.23 485.222 1058.97 485.682 1057.27 485.682 cv
1056.63 485.682 1056.05 485.622 1055.49 485.542 cv
1054.93 485.442 1054.36 485.302 1053.85 485.102 cv
1053.85 483.362 li
1054.36 483.642 1054.89 483.842 1055.41 483.982 cv
1055.93 484.122 1056.45 484.202 1056.99 484.202 cv
1058.15 484.202 1059.03 483.882 1059.63 483.282 cv
1060.21 482.662 1060.51 481.742 1060.51 480.502 cv
1060.51 479.622 li
1060.13 480.262 1059.65 480.742 1059.07 481.062 cv
1058.49 481.382 1057.81 481.542 1057.01 481.542 cv
1055.65 481.542 1054.57 481.042 1053.74 480.022 cv
1052.93 479.002 1052.53 477.642 1052.53 475.942 cv
1052.53 474.262 1052.93 472.902 1053.74 471.882 cv
1054.57 470.862 1055.65 470.342 1057.01 470.342 cv
1057.81 470.342 1058.49 470.502 1059.07 470.822 cv
1059.65 471.142 1060.13 471.622 1060.51 472.262 cv
1060.51 470.602 li
1062.31 470.602 li
1062.31 480.182 li
f
1074.52 472.702 mo
1074.96 471.902 1075.5 471.322 1076.12 470.922 cv
1076.74 470.542 1077.48 470.342 1078.34 470.342 cv
1079.46 470.342 1080.34 470.742 1080.96 471.542 cv
1081.58 472.342 1081.9 473.482 1081.9 474.942 cv
1081.9 481.542 li
1080.1 481.542 li
1080.1 475.002 li
1080.1 473.962 1079.9 473.182 1079.54 472.662 cv
1079.16 472.162 1078.6 471.902 1077.84 471.902 cv
1076.9 471.902 1076.16 472.222 1075.62 472.842 cv
1075.08 473.462 1074.82 474.302 1074.82 475.362 cv
1074.82 481.542 li
1073.02 481.542 li
1073.02 475.002 li
1073.02 473.962 1072.82 473.182 1072.46 472.662 cv
1072.08 472.162 1071.5 471.902 1070.74 471.902 cv
1069.82 471.902 1069.08 472.222 1068.54 472.842 cv
1068 473.462 1067.74 474.302 1067.74 475.362 cv
1067.74 481.542 li
1065.94 481.542 li
1065.94 470.602 li
1067.74 470.602 li
1067.74 472.302 li
1068.14 471.642 1068.64 471.142 1069.22 470.822 cv
1069.78 470.502 1070.46 470.342 1071.26 470.342 cv
1072.06 470.342 1072.72 470.542 1073.28 470.942 cv
1073.84 471.342 1074.24 471.942 1074.52 472.702 cv
f
1089.72 471.862 mo
1088.76 471.862 1088 472.242 1087.44 473.002 cv
1086.88 473.762 1086.6 474.782 1086.6 476.082 cv
1086.6 477.402 1086.86 478.422 1087.42 479.182 cv
1087.98 479.942 1088.74 480.302 1089.72 480.302 cv
1090.68 480.302 1091.44 479.942 1092 479.182 cv
1092.56 478.422 1092.84 477.402 1092.84 476.082 cv
1092.84 474.802 1092.56 473.762 1092 473.002 cv
1091.44 472.242 1090.68 471.862 1089.72 471.862 cv
1089.72 470.342 mo
1091.28 470.342 1092.5 470.862 1093.4 471.862 cv
1094.28 472.882 1094.74 474.282 1094.74 476.082 cv
1094.74 477.882 1094.28 479.282 1093.4 480.282 cv
1092.5 481.302 1091.28 481.802 1089.72 481.802 cv
1088.14 481.802 1086.9 481.302 1086.02 480.282 cv
1085.14 479.282 1084.7 477.882 1084.7 476.082 cv
1084.7 474.282 1085.14 472.882 1086.02 471.862 cv
1086.9 470.862 1088.14 470.342 1089.72 470.342 cv
f
1097.72 470.602 mo
1099.52 470.602 li
1099.52 481.542 li
1097.72 481.542 li
1097.72 470.602 li
1097.72 466.342 mo
1099.52 466.342 li
1099.52 468.622 li
1097.72 468.622 li
1097.72 466.342 li
f
1110.48 472.262 mo
1110.48 466.342 li
1112.28 466.342 li
1112.28 481.542 li
1110.48 481.542 li
1110.48 479.902 li
1110.1 480.562 1109.62 481.042 1109.04 481.342 cv
1108.46 481.642 1107.78 481.802 1106.98 481.802 cv
1105.66 481.802 1104.58 481.282 1103.74 480.242 cv
1102.9 479.202 1102.5 477.802 1102.5 476.082 cv
1102.5 474.362 1102.9 472.982 1103.74 471.922 cv
1104.58 470.882 1105.66 470.342 1106.98 470.342 cv
1107.78 470.342 1108.46 470.502 1109.04 470.822 cv
1109.62 471.142 1110.1 471.622 1110.48 472.262 cv
1104.36 476.082 mo
1104.36 477.402 1104.62 478.442 1105.16 479.202 cv
1105.7 479.962 1106.46 480.322 1107.42 480.322 cv
1108.36 480.322 1109.1 479.962 1109.66 479.202 cv
1110.2 478.442 1110.48 477.402 1110.48 476.082 cv
1110.48 474.762 1110.2 473.742 1109.66 472.982 cv
1109.1 472.222 1108.36 471.842 1107.42 471.842 cv
1106.46 471.842 1105.7 472.222 1105.16 472.982 cv
1104.62 473.742 1104.36 474.762 1104.36 476.082 cv
f
1115.7 466.362 mo
1117.26 466.362 li
1118.22 467.902 1118.96 469.402 1119.44 470.882 cv
1119.92 472.362 1120.18 473.822 1120.18 475.262 cv
1120.18 476.722 1119.92 478.182 1119.44 479.662 cv
1118.96 481.142 1118.22 482.622 1117.26 484.162 cv
1115.7 484.162 li
1116.56 482.662 1117.2 481.202 1117.64 479.722 cv
1118.06 478.262 1118.28 476.782 1118.28 475.262 cv
1118.28 473.762 1118.06 472.282 1117.64 470.822 cv
1117.2 469.362 1116.56 467.882 1115.7 466.362 cv
f
1.5 lw
2 lc
835.086 502.401 mo
855.086 502.401 li
@
873.786 491.801 mo
873.786 493.721 li
873.026 493.361 872.326 493.102 871.666 492.921 cv
870.986 492.761 870.346 492.661 869.746 492.661 cv
868.666 492.661 867.826 492.882 867.246 493.281 cv
866.666 493.701 866.386 494.301 866.386 495.061 cv
866.386 495.701 866.566 496.201 866.966 496.521 cv
867.346 496.861 868.086 497.121 869.166 497.322 cv
870.366 497.561 li
871.826 497.841 872.906 498.341 873.606 499.042 cv
874.306 499.761 874.666 500.701 874.666 501.882 cv
874.666 503.301 874.186 504.361 873.246 505.081 cv
872.286 505.801 870.906 506.161 869.086 506.161 cv
868.386 506.161 867.646 506.081 866.866 505.941 cv
866.086 505.801 865.286 505.581 864.466 505.261 cv
864.466 503.221 li
865.266 503.681 866.046 504.021 866.806 504.241 cv
867.566 504.481 868.326 504.581 869.086 504.581 cv
870.206 504.581 871.066 504.361 871.686 503.921 cv
872.286 503.481 872.606 502.861 872.606 502.021 cv
872.606 501.301 872.386 500.741 871.946 500.341 cv
871.506 499.941 870.786 499.641 869.786 499.441 cv
868.586 499.201 li
867.106 498.921 866.046 498.461 865.386 497.822 cv
864.726 497.201 864.406 496.341 864.406 495.221 cv
864.406 493.941 864.846 492.921 865.766 492.181 cv
866.666 491.441 867.926 491.061 869.526 491.061 cv
870.206 491.061 870.886 491.121 871.606 491.241 cv
872.306 491.361 873.026 491.561 873.786 491.801 cv
f
886.486 491.801 mo
886.486 493.721 li
885.726 493.361 885.026 493.102 884.366 492.921 cv
883.686 492.761 883.046 492.661 882.446 492.661 cv
881.366 492.661 880.526 492.882 879.946 493.281 cv
879.366 493.701 879.086 494.301 879.086 495.061 cv
879.086 495.701 879.266 496.201 879.666 496.521 cv
880.046 496.861 880.786 497.121 881.866 497.322 cv
883.066 497.561 li
884.526 497.841 885.606 498.341 886.306 499.042 cv
887.006 499.761 887.366 500.701 887.366 501.882 cv
887.366 503.301 886.886 504.361 885.946 505.081 cv
884.986 505.801 883.606 506.161 881.786 506.161 cv
881.086 506.161 880.346 506.081 879.566 505.941 cv
878.786 505.801 877.986 505.581 877.166 505.261 cv
877.166 503.221 li
877.966 503.681 878.746 504.021 879.506 504.241 cv
880.266 504.481 881.026 504.581 881.786 504.581 cv
882.906 504.581 883.766 504.361 884.386 503.921 cv
884.986 503.481 885.306 502.861 885.306 502.021 cv
885.306 501.301 885.086 500.741 884.646 500.341 cv
884.206 499.941 883.486 499.641 882.486 499.441 cv
881.286 499.201 li
879.806 498.921 878.746 498.461 878.086 497.822 cv
877.426 497.201 877.106 496.341 877.106 495.221 cv
877.106 493.941 877.546 492.921 878.466 492.181 cv
879.366 491.441 880.626 491.061 882.226 491.061 cv
882.906 491.061 883.586 491.121 884.306 491.241 cv
885.006 491.361 885.726 491.561 886.486 491.801 cv
f
892.426 492.941 mo
892.426 504.281 li
894.806 504.281 li
896.806 504.281 898.286 503.841 899.226 502.921 cv
900.146 502.001 900.626 500.561 900.626 498.602 cv
900.626 496.641 900.146 495.221 899.226 494.301 cv
898.286 493.401 896.806 492.941 894.806 492.941 cv
892.426 492.941 li
890.446 491.322 mo
894.506 491.322 li
897.326 491.322 899.406 491.921 900.726 493.081 cv
902.046 494.261 902.706 496.102 902.706 498.602 cv
902.706 501.121 902.026 502.961 900.706 504.141 cv
899.386 505.322 897.306 505.901 894.506 505.901 cv
890.446 505.901 li
890.446 491.322 li
f
907.826 498.941 mo
907.826 504.281 li
910.986 504.281 li
912.046 504.281 912.826 504.061 913.346 503.621 cv
913.846 503.181 914.106 502.521 914.106 501.602 cv
914.106 500.701 913.846 500.042 913.346 499.602 cv
912.826 499.161 912.046 498.941 910.986 498.941 cv
907.826 498.941 li
907.826 492.941 mo
907.826 497.341 li
910.746 497.341 li
911.706 497.341 912.406 497.161 912.886 496.801 cv
913.366 496.441 913.606 495.901 913.606 495.141 cv
913.606 494.421 913.366 493.861 912.886 493.501 cv
912.406 493.141 911.706 492.941 910.746 492.941 cv
907.826 492.941 li
905.846 491.322 mo
910.886 491.322 li
912.386 491.322 913.546 491.641 914.366 492.261 cv
915.166 492.901 915.586 493.781 915.586 494.921 cv
915.586 495.822 915.366 496.542 914.946 497.061 cv
914.526 497.581 913.926 497.921 913.126 498.042 cv
914.086 498.261 914.846 498.701 915.386 499.361 cv
915.906 500.021 916.186 500.841 916.186 501.822 cv
916.186 503.141 915.726 504.141 914.846 504.841 cv
913.966 505.561 912.706 505.901 911.086 505.901 cv
905.846 505.901 li
905.846 491.322 li
f
919.566 491.322 mo
922.226 491.322 li
928.686 503.521 li
928.686 491.322 li
930.606 491.322 li
930.606 505.901 li
927.946 505.901 li
921.486 493.701 li
921.486 505.901 li
919.566 505.901 li
919.566 491.322 li
f
945.125 490.721 mo
944.245 492.241 943.606 493.721 943.186 495.181 cv
942.745 496.641 942.546 498.121 942.546 499.621 cv
942.546 501.141 942.745 502.621 943.186 504.081 cv
943.606 505.561 944.245 507.021 945.125 508.521 cv
943.566 508.521 li
942.586 506.981 941.846 505.501 941.365 504.021 cv
940.885 502.542 940.646 501.081 940.646 499.621 cv
940.646 498.181 940.885 496.721 941.365 495.241 cv
941.846 493.761 942.566 492.261 943.566 490.721 cv
945.125 490.721 li
f
946.686 491.322 mo
959.006 491.322 li
959.006 492.981 li
953.826 492.981 li
953.826 505.901 li
951.846 505.901 li
951.846 492.981 li
946.686 492.981 li
946.686 491.322 li
f
967.165 496.641 mo
966.965 496.521 966.745 496.441 966.505 496.382 cv
966.265 496.341 966.005 496.301 965.725 496.301 cv
964.705 496.301 963.925 496.641 963.385 497.301 cv
962.825 497.961 962.565 498.901 962.565 500.141 cv
962.565 505.901 li
960.765 505.901 li
960.765 494.961 li
962.565 494.961 li
962.565 496.661 li
962.925 496.001 963.425 495.501 964.025 495.181 cv
964.625 494.861 965.365 494.701 966.245 494.701 cv
966.365 494.701 966.505 494.721 966.665 494.721 cv
966.805 494.741 966.965 494.761 967.165 494.801 cv
967.165 496.641 li
f
974.025 500.401 mo
972.565 500.401 971.565 500.581 971.005 500.901 cv
970.445 501.241 970.165 501.801 970.165 502.602 cv
970.165 503.241 970.365 503.761 970.785 504.121 cv
971.205 504.501 971.785 504.681 972.505 504.681 cv
973.505 504.681 974.305 504.341 974.905 503.621 cv
975.505 502.921 975.805 501.981 975.805 500.801 cv
975.805 500.401 li
974.025 500.401 li
977.605 499.661 mo
977.605 505.901 li
975.805 505.901 li
975.805 504.241 li
975.385 504.921 974.865 505.401 974.265 505.701 cv
973.665 506.001 972.905 506.161 972.025 506.161 cv
970.905 506.161 970.005 505.861 969.345 505.241 cv
968.685 504.621 968.365 503.781 968.365 502.721 cv
968.365 501.501 968.765 500.581 969.605 499.941 cv
970.425 499.322 971.645 499.001 973.285 499.001 cv
975.805 499.001 li
975.805 498.822 li
975.805 498.001 975.525 497.361 974.985 496.901 cv
974.445 496.461 973.685 496.221 972.705 496.221 cv
972.065 496.221 971.465 496.301 970.865 496.461 cv
970.265 496.621 969.705 496.841 969.165 497.121 cv
969.165 495.461 li
969.805 495.221 970.445 495.021 971.065 494.901 cv
971.685 494.781 972.285 494.701 972.885 494.701 cv
974.465 494.701 975.645 495.121 976.425 495.941 cv
977.205 496.761 977.605 498.001 977.605 499.661 cv
f
981.306 494.961 mo
983.106 494.961 li
983.106 505.901 li
981.306 505.901 li
981.306 494.961 li
981.306 490.701 mo
983.106 490.701 li
983.106 492.981 li
981.306 492.981 li
981.306 490.701 li
f
995.965 499.301 mo
995.965 505.901 li
994.166 505.901 li
994.166 499.361 li
994.166 498.322 993.945 497.561 993.546 497.042 cv
993.146 496.521 992.546 496.261 991.745 496.261 cv
990.766 496.261 990.005 496.581 989.445 497.201 cv
988.885 497.822 988.605 498.661 988.605 499.721 cv
988.605 505.901 li
986.805 505.901 li
986.805 494.961 li
988.605 494.961 li
988.605 496.661 li
989.026 496.021 989.526 495.521 990.125 495.201 cv
990.705 494.882 991.385 494.701 992.146 494.701 cv
993.385 494.701 994.345 495.102 994.985 495.882 cv
995.625 496.661 995.965 497.801 995.965 499.301 cv
f
999.546 494.961 mo
1001.35 494.961 li
1001.35 505.901 li
999.546 505.901 li
999.546 494.961 li
999.546 490.701 mo
1001.35 490.701 li
1001.35 492.981 li
999.546 492.981 li
999.546 490.701 li
f
1014.21 499.301 mo
1014.21 505.901 li
1012.41 505.901 li
1012.41 499.361 li
1012.41 498.322 1012.19 497.561 1011.79 497.042 cv
1011.39 496.521 1010.79 496.261 1009.99 496.261 cv
1009.01 496.261 1008.25 496.581 1007.69 497.201 cv
1007.13 497.822 1006.85 498.661 1006.85 499.721 cv
1006.85 505.901 li
1005.05 505.901 li
1005.05 494.961 li
1006.85 494.961 li
1006.85 496.661 li
1007.27 496.021 1007.77 495.521 1008.37 495.201 cv
1008.95 494.882 1009.63 494.701 1010.39 494.701 cv
1011.63 494.701 1012.59 495.102 1013.23 495.882 cv
1013.87 496.661 1014.21 497.801 1014.21 499.301 cv
f
1024.99 500.301 mo
1024.99 499.021 1024.71 498.001 1024.19 497.281 cv
1023.65 496.561 1022.89 496.201 1021.93 496.201 cv
1020.97 496.201 1020.21 496.561 1019.67 497.281 cv
1019.13 498.001 1018.87 499.021 1018.87 500.301 cv
1018.87 501.602 1019.13 502.602 1019.67 503.322 cv
1020.21 504.042 1020.97 504.401 1021.93 504.401 cv
1022.89 504.401 1023.65 504.042 1024.19 503.322 cv
1024.71 502.602 1024.99 501.602 1024.99 500.301 cv
1026.79 504.542 mo
1026.79 506.382 1026.37 507.761 1025.55 508.681 cv
1024.71 509.581 1023.45 510.042 1021.75 510.042 cv
1021.11 510.042 1020.53 509.981 1019.97 509.901 cv
1019.41 509.801 1018.85 509.661 1018.33 509.461 cv
1018.33 507.721 li
1018.85 508.001 1019.37 508.201 1019.89 508.341 cv
1020.41 508.481 1020.93 508.561 1021.47 508.561 cv
1022.63 508.561 1023.51 508.241 1024.11 507.641 cv
1024.69 507.021 1024.99 506.102 1024.99 504.861 cv
1024.99 503.981 li
1024.61 504.621 1024.13 505.102 1023.55 505.421 cv
1022.97 505.741 1022.29 505.901 1021.49 505.901 cv
1020.13 505.901 1019.05 505.401 1018.23 504.382 cv
1017.41 503.361 1017.01 502.001 1017.01 500.301 cv
1017.01 498.621 1017.41 497.261 1018.23 496.241 cv
1019.05 495.221 1020.13 494.701 1021.49 494.701 cv
1022.29 494.701 1022.97 494.861 1023.55 495.181 cv
1024.13 495.501 1024.61 495.981 1024.99 496.621 cv
1024.99 494.961 li
1026.79 494.961 li
1026.79 504.542 li
f
1030.95 503.421 mo
1033.01 503.421 li
1033.01 505.102 li
1031.41 508.201 li
1030.15 508.201 li
1030.95 505.102 li
1030.95 503.421 li
f
1043.29 491.322 mo
1045.27 491.322 li
1045.27 505.901 li
1043.29 505.901 li
1043.29 491.322 li
f
1056.09 495.281 mo
1056.09 496.981 li
1055.57 496.741 1055.05 496.542 1054.51 496.401 cv
1053.95 496.281 1053.39 496.201 1052.81 496.201 cv
1051.91 496.201 1051.23 496.341 1050.79 496.621 cv
1050.35 496.901 1050.13 497.301 1050.13 497.841 cv
1050.13 498.261 1050.29 498.581 1050.61 498.822 cv
1050.93 499.061 1051.57 499.301 1052.53 499.501 cv
1053.15 499.641 li
1054.43 499.921 1055.33 500.322 1055.87 500.801 cv
1056.39 501.301 1056.67 502.001 1056.67 502.882 cv
1056.67 503.901 1056.27 504.701 1055.47 505.281 cv
1054.67 505.882 1053.55 506.161 1052.15 506.161 cv
1051.55 506.161 1050.95 506.102 1050.31 506.001 cv
1049.67 505.901 1049.01 505.741 1048.31 505.501 cv
1048.31 503.641 li
1048.97 504.001 1049.63 504.261 1050.27 504.421 cv
1050.91 504.602 1051.55 504.681 1052.19 504.681 cv
1053.03 504.681 1053.69 504.542 1054.15 504.261 cv
1054.59 503.981 1054.83 503.561 1054.83 503.021 cv
1054.83 502.542 1054.65 502.161 1054.33 501.901 cv
1054.01 501.641 1053.29 501.382 1052.17 501.141 cv
1051.55 501.001 li
1050.43 500.761 1049.61 500.401 1049.13 499.921 cv
1048.63 499.441 1048.39 498.781 1048.39 497.921 cv
1048.39 496.901 1048.75 496.102 1049.47 495.542 cv
1050.19 494.981 1051.23 494.701 1052.59 494.701 cv
1053.25 494.701 1053.87 494.761 1054.47 494.861 cv
1055.05 494.961 1055.59 495.102 1056.09 495.281 cv
f
1059.53 494.961 mo
1061.33 494.961 li
1061.33 505.901 li
1059.53 505.901 li
1059.53 494.961 li
1059.53 490.701 mo
1061.33 490.701 li
1061.33 492.981 li
1059.53 492.981 li
1059.53 490.701 li
f
1072.29 500.301 mo
1072.29 499.021 1072.01 498.001 1071.49 497.281 cv
1070.95 496.561 1070.19 496.201 1069.23 496.201 cv
1068.27 496.201 1067.51 496.561 1066.97 497.281 cv
1066.43 498.001 1066.17 499.021 1066.17 500.301 cv
1066.17 501.602 1066.43 502.602 1066.97 503.322 cv
1067.51 504.042 1068.27 504.401 1069.23 504.401 cv
1070.19 504.401 1070.95 504.042 1071.49 503.322 cv
1072.01 502.602 1072.29 501.602 1072.29 500.301 cv
1074.09 504.542 mo
1074.09 506.382 1073.67 507.761 1072.85 508.681 cv
1072.01 509.581 1070.75 510.042 1069.05 510.042 cv
1068.41 510.042 1067.83 509.981 1067.27 509.901 cv
1066.71 509.801 1066.15 509.661 1065.63 509.461 cv
1065.63 507.721 li
1066.15 508.001 1066.67 508.201 1067.19 508.341 cv
1067.71 508.481 1068.23 508.561 1068.77 508.561 cv
1069.93 508.561 1070.81 508.241 1071.41 507.641 cv
1071.99 507.021 1072.29 506.102 1072.29 504.861 cv
1072.29 503.981 li
1071.91 504.621 1071.43 505.102 1070.85 505.421 cv
1070.27 505.741 1069.59 505.901 1068.79 505.901 cv
1067.43 505.901 1066.35 505.401 1065.53 504.382 cv
1064.71 503.361 1064.31 502.001 1064.31 500.301 cv
1064.31 498.621 1064.71 497.261 1065.53 496.241 cv
1066.35 495.221 1067.43 494.701 1068.79 494.701 cv
1069.59 494.701 1070.27 494.861 1070.85 495.181 cv
1071.43 495.501 1071.91 495.981 1072.29 496.621 cv
1072.29 494.961 li
1074.09 494.961 li
1074.09 504.542 li
f
1086.31 497.061 mo
1086.74 496.261 1087.29 495.681 1087.91 495.281 cv
1088.53 494.901 1089.27 494.701 1090.13 494.701 cv
1091.24 494.701 1092.13 495.102 1092.74 495.901 cv
1093.36 496.701 1093.69 497.841 1093.69 499.301 cv
1093.69 505.901 li
1091.89 505.901 li
1091.89 499.361 li
1091.89 498.322 1091.69 497.542 1091.33 497.021 cv
1090.95 496.521 1090.39 496.261 1089.63 496.261 cv
1088.69 496.261 1087.95 496.581 1087.41 497.201 cv
1086.86 497.822 1086.6 498.661 1086.6 499.721 cv
1086.6 505.901 li
1084.81 505.901 li
1084.81 499.361 li
1084.81 498.322 1084.6 497.542 1084.24 497.021 cv
1083.86 496.521 1083.29 496.261 1082.53 496.261 cv
1081.6 496.261 1080.86 496.581 1080.33 497.201 cv
1079.79 497.822 1079.53 498.661 1079.53 499.721 cv
1079.53 505.901 li
1077.72 505.901 li
1077.72 494.961 li
1079.53 494.961 li
1079.53 496.661 li
1079.93 496.001 1080.43 495.501 1081.01 495.181 cv
1081.57 494.861 1082.24 494.701 1083.05 494.701 cv
1083.84 494.701 1084.51 494.901 1085.07 495.301 cv
1085.63 495.701 1086.03 496.301 1086.31 497.061 cv
f
1101.51 496.221 mo
1100.55 496.221 1099.79 496.602 1099.22 497.361 cv
1098.67 498.121 1098.39 499.141 1098.39 500.441 cv
1098.39 501.761 1098.65 502.781 1099.2 503.542 cv
1099.77 504.301 1100.53 504.661 1101.51 504.661 cv
1102.46 504.661 1103.22 504.301 1103.79 503.542 cv
1104.34 502.781 1104.63 501.761 1104.63 500.441 cv
1104.63 499.161 1104.34 498.121 1103.79 497.361 cv
1103.22 496.602 1102.46 496.221 1101.51 496.221 cv
1101.51 494.701 mo
1103.07 494.701 1104.29 495.221 1105.19 496.221 cv
1106.07 497.241 1106.53 498.641 1106.53 500.441 cv
1106.53 502.241 1106.07 503.641 1105.19 504.641 cv
1104.29 505.661 1103.07 506.161 1101.51 506.161 cv
1099.93 506.161 1098.69 505.661 1097.81 504.641 cv
1096.93 503.641 1096.48 502.241 1096.48 500.441 cv
1096.48 498.641 1096.93 497.241 1097.81 496.221 cv
1098.69 495.221 1099.93 494.701 1101.51 494.701 cv
f
1109.51 494.961 mo
1111.31 494.961 li
1111.31 505.901 li
1109.51 505.901 li
1109.51 494.961 li
1109.51 490.701 mo
1111.31 490.701 li
1111.31 492.981 li
1109.51 492.981 li
1109.51 490.701 li
f
1122.26 496.621 mo
1122.26 490.701 li
1124.06 490.701 li
1124.06 505.901 li
1122.26 505.901 li
1122.26 504.261 li
1121.88 504.921 1121.4 505.401 1120.82 505.701 cv
1120.24 506.001 1119.56 506.161 1118.76 506.161 cv
1117.44 506.161 1116.36 505.641 1115.52 504.602 cv
1114.68 503.561 1114.28 502.161 1114.28 500.441 cv
1114.28 498.721 1114.68 497.341 1115.52 496.281 cv
1116.36 495.241 1117.44 494.701 1118.76 494.701 cv
1119.56 494.701 1120.24 494.861 1120.82 495.181 cv
1121.4 495.501 1121.88 495.981 1122.26 496.621 cv
1116.14 500.441 mo
1116.14 501.761 1116.4 502.801 1116.94 503.561 cv
1117.48 504.322 1118.24 504.681 1119.2 504.681 cv
1120.14 504.681 1120.88 504.322 1121.44 503.561 cv
1121.98 502.801 1122.26 501.761 1122.26 500.441 cv
1122.26 499.121 1121.98 498.102 1121.44 497.341 cv
1120.88 496.581 1120.14 496.201 1119.2 496.201 cv
1118.24 496.201 1117.48 496.581 1116.94 497.341 cv
1116.4 498.102 1116.14 499.121 1116.14 500.441 cv
f
1127.48 490.721 mo
1129.04 490.721 li
1130 492.261 1130.74 493.761 1131.22 495.241 cv
1131.7 496.721 1131.96 498.181 1131.96 499.621 cv
1131.96 501.081 1131.7 502.542 1131.22 504.021 cv
1130.74 505.501 1130 506.981 1129.04 508.521 cv
1127.48 508.521 li
1128.34 507.021 1128.98 505.561 1129.42 504.081 cv
1129.84 502.621 1130.06 501.141 1130.06 499.621 cv
1130.06 498.121 1129.84 496.641 1129.42 495.181 cv
1128.98 493.721 1128.34 492.241 1127.48 490.721 cv
f
835.086 526.761 mo
855.086 526.761 li
@
842.086 529.761 mo
848.086 523.761 li
842.086 523.761 mo
848.086 529.761 li
f
1 lw
0 lc
842.086 529.761 mo
848.086 523.761 li
842.086 523.761 mo
848.086 529.761 li
@
873.786 516.161 mo
873.786 518.081 li
873.026 517.721 872.326 517.461 871.666 517.281 cv
870.986 517.121 870.346 517.021 869.746 517.021 cv
868.666 517.021 867.826 517.241 867.246 517.641 cv
866.666 518.061 866.386 518.661 866.386 519.421 cv
866.386 520.061 866.566 520.561 866.966 520.881 cv
867.346 521.221 868.086 521.481 869.166 521.681 cv
870.366 521.921 li
871.826 522.201 872.906 522.701 873.606 523.401 cv
874.306 524.121 874.666 525.061 874.666 526.241 cv
874.666 527.661 874.186 528.721 873.246 529.441 cv
872.286 530.161 870.906 530.521 869.086 530.521 cv
868.386 530.521 867.646 530.441 866.866 530.301 cv
866.086 530.161 865.286 529.941 864.466 529.621 cv
864.466 527.581 li
865.266 528.041 866.046 528.381 866.806 528.601 cv
867.566 528.841 868.326 528.941 869.086 528.941 cv
870.206 528.941 871.066 528.721 871.686 528.281 cv
872.286 527.841 872.606 527.221 872.606 526.381 cv
872.606 525.661 872.386 525.101 871.946 524.701 cv
871.506 524.301 870.786 524.001 869.786 523.801 cv
868.586 523.561 li
867.106 523.281 866.046 522.821 865.386 522.181 cv
864.726 521.561 864.406 520.701 864.406 519.581 cv
864.406 518.301 864.846 517.281 865.766 516.541 cv
866.666 515.801 867.926 515.421 869.526 515.421 cv
870.206 515.421 870.886 515.481 871.606 515.601 cv
872.306 515.721 873.026 515.921 873.786 516.161 cv
f
886.486 516.161 mo
886.486 518.081 li
885.726 517.721 885.026 517.461 884.366 517.281 cv
883.686 517.121 883.046 517.021 882.446 517.021 cv
881.366 517.021 880.526 517.241 879.946 517.641 cv
879.366 518.061 879.086 518.661 879.086 519.421 cv
879.086 520.061 879.266 520.561 879.666 520.881 cv
880.046 521.221 880.786 521.481 881.866 521.681 cv
883.066 521.921 li
884.526 522.201 885.606 522.701 886.306 523.401 cv
887.006 524.121 887.366 525.061 887.366 526.241 cv
887.366 527.661 886.886 528.721 885.946 529.441 cv
884.986 530.161 883.606 530.521 881.786 530.521 cv
881.086 530.521 880.346 530.441 879.566 530.301 cv
878.786 530.161 877.986 529.941 877.166 529.621 cv
877.166 527.581 li
877.966 528.041 878.746 528.381 879.506 528.601 cv
880.266 528.841 881.026 528.941 881.786 528.941 cv
882.906 528.941 883.766 528.721 884.386 528.281 cv
884.986 527.841 885.306 527.221 885.306 526.381 cv
885.306 525.661 885.086 525.101 884.646 524.701 cv
884.206 524.301 883.486 524.001 882.486 523.801 cv
881.286 523.561 li
879.806 523.281 878.746 522.821 878.086 522.181 cv
877.426 521.561 877.106 520.701 877.106 519.581 cv
877.106 518.301 877.546 517.281 878.466 516.541 cv
879.366 515.801 880.626 515.421 882.226 515.421 cv
882.906 515.421 883.586 515.481 884.306 515.601 cv
885.006 515.721 885.726 515.921 886.486 516.161 cv
f
892.426 517.301 mo
892.426 528.641 li
894.806 528.641 li
896.806 528.641 898.286 528.201 899.226 527.281 cv
900.146 526.361 900.626 524.921 900.626 522.961 cv
900.626 521.001 900.146 519.581 899.226 518.661 cv
898.286 517.761 896.806 517.301 894.806 517.301 cv
892.426 517.301 li
890.446 515.681 mo
894.506 515.681 li
897.326 515.681 899.406 516.281 900.726 517.441 cv
902.046 518.621 902.706 520.461 902.706 522.961 cv
902.706 525.481 902.026 527.321 900.706 528.501 cv
899.386 529.681 897.306 530.261 894.506 530.261 cv
890.446 530.261 li
890.446 515.681 li
f
907.826 523.301 mo
907.826 528.641 li
910.986 528.641 li
912.046 528.641 912.826 528.421 913.346 527.981 cv
913.846 527.541 914.106 526.881 914.106 525.961 cv
914.106 525.061 913.846 524.401 913.346 523.961 cv
912.826 523.521 912.046 523.301 910.986 523.301 cv
907.826 523.301 li
907.826 517.301 mo
907.826 521.701 li
910.746 521.701 li
911.706 521.701 912.406 521.521 912.886 521.161 cv
913.366 520.801 913.606 520.261 913.606 519.501 cv
913.606 518.781 913.366 518.221 912.886 517.861 cv
912.406 517.501 911.706 517.301 910.746 517.301 cv
907.826 517.301 li
905.846 515.681 mo
910.886 515.681 li
912.386 515.681 913.546 516.001 914.366 516.621 cv
915.166 517.261 915.586 518.141 915.586 519.281 cv
915.586 520.181 915.366 520.901 914.946 521.421 cv
914.526 521.941 913.926 522.281 913.126 522.401 cv
914.086 522.621 914.846 523.061 915.386 523.721 cv
915.906 524.381 916.186 525.201 916.186 526.181 cv
916.186 527.501 915.726 528.501 914.846 529.201 cv
913.966 529.921 912.706 530.261 911.086 530.261 cv
905.846 530.261 li
905.846 515.681 li
f
919.566 515.681 mo
922.226 515.681 li
928.686 527.881 li
928.686 515.681 li
930.606 515.681 li
930.606 530.261 li
927.946 530.261 li
921.486 518.061 li
921.486 530.261 li
919.566 530.261 li
919.566 515.681 li
f
945.125 515.081 mo
944.245 516.601 943.606 518.081 943.186 519.541 cv
942.745 521.001 942.546 522.481 942.546 523.981 cv
942.546 525.501 942.745 526.981 943.186 528.441 cv
943.606 529.921 944.245 531.381 945.125 532.881 cv
943.566 532.881 li
942.586 531.341 941.846 529.861 941.365 528.381 cv
940.885 526.901 940.646 525.441 940.646 523.981 cv
940.646 522.541 940.885 521.081 941.365 519.601 cv
941.846 518.121 942.566 516.621 943.566 515.081 cv
945.125 515.081 li
f
946.686 515.681 mo
959.006 515.681 li
959.006 517.341 li
953.826 517.341 li
953.826 530.261 li
951.846 530.261 li
951.846 517.341 li
946.686 517.341 li
946.686 515.681 li
f
970.185 524.341 mo
970.185 525.221 li
961.925 525.221 li
962.005 526.461 962.365 527.421 963.045 528.061 cv
963.705 528.701 964.625 529.021 965.825 529.021 cv
966.505 529.021 967.185 528.941 967.825 528.781 cv
968.465 528.621 969.125 528.361 969.765 528.001 cv
969.765 529.701 li
969.125 529.981 968.465 530.201 967.785 530.321 cv
967.105 530.441 966.405 530.521 965.725 530.521 cv
963.965 530.521 962.585 530.021 961.565 529.021 cv
960.545 528.021 960.045 526.641 960.045 524.901 cv
960.045 523.121 960.525 521.701 961.485 520.641 cv
962.445 519.601 963.765 519.061 965.405 519.061 cv
966.885 519.061 968.045 519.541 968.905 520.481 cv
969.745 521.441 970.185 522.721 970.185 524.341 cv
968.385 523.821 mo
968.365 522.841 968.085 522.061 967.565 521.461 cv
967.025 520.881 966.305 520.581 965.425 520.581 cv
964.425 520.581 963.625 520.881 963.025 521.441 cv
962.425 522.001 962.065 522.801 961.985 523.821 cv
968.385 523.821 li
f
980.106 519.641 mo
980.106 521.341 li
979.586 521.101 979.066 520.901 978.526 520.761 cv
977.966 520.641 977.406 520.561 976.826 520.561 cv
975.926 520.561 975.246 520.701 974.806 520.981 cv
974.366 521.261 974.146 521.661 974.146 522.201 cv
974.146 522.621 974.306 522.941 974.626 523.181 cv
974.946 523.421 975.586 523.661 976.546 523.861 cv
977.166 524.001 li
978.446 524.281 979.346 524.681 979.886 525.161 cv
980.406 525.661 980.686 526.361 980.686 527.241 cv
980.686 528.261 980.286 529.061 979.486 529.641 cv
978.686 530.241 977.566 530.521 976.166 530.521 cv
975.566 530.521 974.966 530.461 974.326 530.361 cv
973.686 530.261 973.026 530.101 972.326 529.861 cv
972.326 528.001 li
972.986 528.361 973.646 528.621 974.286 528.781 cv
974.926 528.961 975.566 529.041 976.206 529.041 cv
977.046 529.041 977.706 528.901 978.166 528.621 cv
978.606 528.341 978.846 527.921 978.846 527.381 cv
978.846 526.901 978.666 526.521 978.346 526.261 cv
978.026 526.001 977.306 525.741 976.186 525.501 cv
975.566 525.361 li
974.446 525.121 973.626 524.761 973.146 524.281 cv
972.646 523.801 972.406 523.141 972.406 522.281 cv
972.406 521.261 972.766 520.461 973.486 519.901 cv
974.206 519.341 975.246 519.061 976.606 519.061 cv
977.266 519.061 977.886 519.121 978.486 519.221 cv
979.066 519.321 979.606 519.461 980.106 519.641 cv
f
985.326 516.221 mo
985.326 519.321 li
989.026 519.321 li
989.026 520.721 li
985.326 520.721 li
985.326 526.661 li
985.326 527.561 985.446 528.141 985.686 528.381 cv
985.926 528.641 986.426 528.761 987.186 528.761 cv
989.026 528.761 li
989.026 530.261 li
987.186 530.261 li
985.786 530.261 984.826 530.001 984.306 529.481 cv
983.786 528.961 983.526 528.021 983.526 526.661 cv
983.526 520.721 li
982.206 520.721 li
982.206 519.321 li
983.526 519.321 li
983.526 516.221 li
985.326 516.221 li
f
991.385 519.321 mo
993.185 519.321 li
993.185 530.261 li
991.385 530.261 li
991.385 519.321 li
991.385 515.061 mo
993.185 515.061 li
993.185 517.341 li
991.385 517.341 li
991.385 515.061 li
f
1006.05 523.661 mo
1006.05 530.261 li
1004.25 530.261 li
1004.25 523.721 li
1004.25 522.681 1004.03 521.921 1003.63 521.401 cv
1003.23 520.881 1002.63 520.621 1001.83 520.621 cv
1000.85 520.621 1000.09 520.941 999.525 521.561 cv
998.965 522.181 998.685 523.021 998.685 524.081 cv
998.685 530.261 li
996.885 530.261 li
996.885 519.321 li
998.685 519.321 li
998.685 521.021 li
999.105 520.381 999.605 519.881 1000.21 519.561 cv
1000.79 519.241 1001.47 519.061 1002.23 519.061 cv
1003.47 519.061 1004.43 519.461 1005.07 520.241 cv
1005.71 521.021 1006.05 522.161 1006.05 523.661 cv
f
1016.83 524.661 mo
1016.83 523.381 1016.55 522.361 1016.03 521.641 cv
1015.49 520.921 1014.73 520.561 1013.77 520.561 cv
1012.81 520.561 1012.05 520.921 1011.51 521.641 cv
1010.97 522.361 1010.71 523.381 1010.71 524.661 cv
1010.71 525.961 1010.97 526.961 1011.51 527.681 cv
1012.05 528.401 1012.81 528.761 1013.77 528.761 cv
1014.73 528.761 1015.49 528.401 1016.03 527.681 cv
1016.55 526.961 1016.83 525.961 1016.83 524.661 cv
1018.63 528.901 mo
1018.63 530.741 1018.21 532.121 1017.39 533.041 cv
1016.55 533.941 1015.29 534.401 1013.59 534.401 cv
1012.95 534.401 1012.37 534.341 1011.81 534.261 cv
1011.25 534.161 1010.69 534.021 1010.17 533.821 cv
1010.17 532.081 li
1010.69 532.361 1011.21 532.561 1011.73 532.701 cv
1012.25 532.841 1012.77 532.921 1013.31 532.921 cv
1014.47 532.921 1015.35 532.601 1015.95 532.001 cv
1016.53 531.381 1016.83 530.461 1016.83 529.221 cv
1016.83 528.341 li
1016.45 528.981 1015.97 529.461 1015.39 529.781 cv
1014.81 530.101 1014.13 530.261 1013.33 530.261 cv
1011.97 530.261 1010.89 529.761 1010.07 528.741 cv
1009.25 527.721 1008.85 526.361 1008.85 524.661 cv
1008.85 522.981 1009.25 521.621 1010.07 520.601 cv
1010.89 519.581 1011.97 519.061 1013.33 519.061 cv
1014.13 519.061 1014.81 519.221 1015.39 519.541 cv
1015.97 519.861 1016.45 520.341 1016.83 520.981 cv
1016.83 519.321 li
1018.63 519.321 li
1018.63 528.901 li
f
1022.79 527.781 mo
1024.85 527.781 li
1024.85 529.461 li
1023.25 532.561 li
1021.99 532.561 li
1022.79 529.461 li
1022.79 527.781 li
f
1035.13 515.681 mo
1037.1 515.681 li
1037.1 530.261 li
1035.13 530.261 li
1035.13 515.681 li
f
1047.93 519.641 mo
1047.93 521.341 li
1047.41 521.101 1046.89 520.901 1046.35 520.761 cv
1045.79 520.641 1045.23 520.561 1044.65 520.561 cv
1043.75 520.561 1043.07 520.701 1042.63 520.981 cv
1042.19 521.261 1041.97 521.661 1041.97 522.201 cv
1041.97 522.621 1042.13 522.941 1042.45 523.181 cv
1042.77 523.421 1043.41 523.661 1044.37 523.861 cv
1044.99 524.001 li
1046.27 524.281 1047.17 524.681 1047.71 525.161 cv
1048.23 525.661 1048.51 526.361 1048.51 527.241 cv
1048.51 528.261 1048.11 529.061 1047.31 529.641 cv
1046.51 530.241 1045.39 530.521 1043.99 530.521 cv
1043.39 530.521 1042.79 530.461 1042.15 530.361 cv
1041.51 530.261 1040.85 530.101 1040.15 529.861 cv
1040.15 528.001 li
1040.81 528.361 1041.47 528.621 1042.11 528.781 cv
1042.75 528.961 1043.39 529.041 1044.03 529.041 cv
1044.87 529.041 1045.53 528.901 1045.99 528.621 cv
1046.43 528.341 1046.67 527.921 1046.67 527.381 cv
1046.67 526.901 1046.49 526.521 1046.17 526.261 cv
1045.85 526.001 1045.13 525.741 1044.01 525.501 cv
1043.39 525.361 li
1042.27 525.121 1041.45 524.761 1040.97 524.281 cv
1040.47 523.801 1040.23 523.141 1040.23 522.281 cv
1040.23 521.261 1040.59 520.461 1041.31 519.901 cv
1042.03 519.341 1043.07 519.061 1044.43 519.061 cv
1045.09 519.061 1045.71 519.121 1046.31 519.221 cv
1046.89 519.321 1047.43 519.461 1047.93 519.641 cv
f
1051.36 519.321 mo
1053.17 519.321 li
1053.17 530.261 li
1051.36 530.261 li
1051.36 519.321 li
1051.36 515.061 mo
1053.17 515.061 li
1053.17 517.341 li
1051.36 517.341 li
1051.36 515.061 li
f
1064.12 524.661 mo
1064.12 523.381 1063.84 522.361 1063.32 521.641 cv
1062.78 520.921 1062.02 520.561 1061.06 520.561 cv
1060.1 520.561 1059.34 520.921 1058.8 521.641 cv
1058.26 522.361 1058 523.381 1058 524.661 cv
1058 525.961 1058.26 526.961 1058.8 527.681 cv
1059.34 528.401 1060.1 528.761 1061.06 528.761 cv
1062.02 528.761 1062.78 528.401 1063.32 527.681 cv
1063.84 526.961 1064.12 525.961 1064.12 524.661 cv
1065.92 528.901 mo
1065.92 530.741 1065.5 532.121 1064.68 533.041 cv
1063.84 533.941 1062.58 534.401 1060.88 534.401 cv
1060.24 534.401 1059.66 534.341 1059.1 534.261 cv
1058.54 534.161 1057.98 534.021 1057.46 533.821 cv
1057.46 532.081 li
1057.98 532.361 1058.5 532.561 1059.02 532.701 cv
1059.54 532.841 1060.06 532.921 1060.6 532.921 cv
1061.76 532.921 1062.64 532.601 1063.24 532.001 cv
1063.82 531.381 1064.12 530.461 1064.12 529.221 cv
1064.12 528.341 li
1063.74 528.981 1063.26 529.461 1062.68 529.781 cv
1062.1 530.101 1061.42 530.261 1060.62 530.261 cv
1059.26 530.261 1058.18 529.761 1057.36 528.741 cv
1056.54 527.721 1056.14 526.361 1056.14 524.661 cv
1056.14 522.981 1056.54 521.621 1057.36 520.601 cv
1058.18 519.581 1059.26 519.061 1060.62 519.061 cv
1061.42 519.061 1062.1 519.221 1062.68 519.541 cv
1063.26 519.861 1063.74 520.341 1064.12 520.981 cv
1064.12 519.321 li
1065.92 519.321 li
1065.92 528.901 li
f
1078.14 521.421 mo
1078.58 520.621 1079.12 520.041 1079.74 519.641 cv
1080.36 519.261 1081.1 519.061 1081.96 519.061 cv
1083.08 519.061 1083.96 519.461 1084.58 520.261 cv
1085.2 521.061 1085.52 522.201 1085.52 523.661 cv
1085.52 530.261 li
1083.72 530.261 li
1083.72 523.721 li
1083.72 522.681 1083.52 521.901 1083.16 521.381 cv
1082.78 520.881 1082.22 520.621 1081.46 520.621 cv
1080.52 520.621 1079.78 520.941 1079.24 521.561 cv
1078.7 522.181 1078.44 523.021 1078.44 524.081 cv
1078.44 530.261 li
1076.64 530.261 li
1076.64 523.721 li
1076.64 522.681 1076.44 521.901 1076.08 521.381 cv
1075.7 520.881 1075.12 520.621 1074.36 520.621 cv
1073.44 520.621 1072.7 520.941 1072.16 521.561 cv
1071.62 522.181 1071.36 523.021 1071.36 524.081 cv
1071.36 530.261 li
1069.56 530.261 li
1069.56 519.321 li
1071.36 519.321 li
1071.36 521.021 li
1071.76 520.361 1072.26 519.861 1072.84 519.541 cv
1073.4 519.221 1074.08 519.061 1074.88 519.061 cv
1075.68 519.061 1076.34 519.261 1076.9 519.661 cv
1077.46 520.061 1077.86 520.661 1078.14 521.421 cv
f
1093.34 520.581 mo
1092.38 520.581 1091.62 520.961 1091.06 521.721 cv
1090.5 522.481 1090.22 523.501 1090.22 524.801 cv
1090.22 526.121 1090.48 527.141 1091.04 527.901 cv
1091.6 528.661 1092.36 529.021 1093.34 529.021 cv
1094.3 529.021 1095.06 528.661 1095.62 527.901 cv
1096.18 527.141 1096.46 526.121 1096.46 524.801 cv
1096.46 523.521 1096.18 522.481 1095.62 521.721 cv
1095.06 520.961 1094.3 520.581 1093.34 520.581 cv
1093.34 519.061 mo
1094.9 519.061 1096.12 519.581 1097.02 520.581 cv
1097.9 521.601 1098.36 523.001 1098.36 524.801 cv
1098.36 526.601 1097.9 528.001 1097.02 529.001 cv
1096.12 530.021 1094.9 530.521 1093.34 530.521 cv
1091.76 530.521 1090.52 530.021 1089.64 529.001 cv
1088.76 528.001 1088.32 526.601 1088.32 524.801 cv
1088.32 523.001 1088.76 521.601 1089.64 520.581 cv
1090.52 519.581 1091.76 519.061 1093.34 519.061 cv
f
1101.34 519.321 mo
1103.14 519.321 li
1103.14 530.261 li
1101.34 530.261 li
1101.34 519.321 li
1101.34 515.061 mo
1103.14 515.061 li
1103.14 517.341 li
1101.34 517.341 li
1101.34 515.061 li
f
1114.1 520.981 mo
1114.1 515.061 li
1115.9 515.061 li
1115.9 530.261 li
1114.1 530.261 li
1114.1 528.621 li
1113.72 529.281 1113.24 529.761 1112.66 530.061 cv
1112.08 530.361 1111.4 530.521 1110.6 530.521 cv
1109.28 530.521 1108.2 530.001 1107.36 528.961 cv
1106.52 527.921 1106.12 526.521 1106.12 524.801 cv
1106.12 523.081 1106.52 521.701 1107.36 520.641 cv
1108.2 519.601 1109.28 519.061 1110.6 519.061 cv
1111.4 519.061 1112.08 519.221 1112.66 519.541 cv
1113.24 519.861 1113.72 520.341 1114.1 520.981 cv
1107.98 524.801 mo
1107.98 526.121 1108.24 527.161 1108.78 527.921 cv
1109.32 528.681 1110.08 529.041 1111.04 529.041 cv
1111.98 529.041 1112.72 528.681 1113.28 527.921 cv
1113.82 527.161 1114.1 526.121 1114.1 524.801 cv
1114.1 523.481 1113.82 522.461 1113.28 521.701 cv
1112.72 520.941 1111.98 520.561 1111.04 520.561 cv
1110.08 520.561 1109.32 520.941 1108.78 521.701 cv
1108.24 522.461 1107.98 523.481 1107.98 524.801 cv
f
1119.32 515.081 mo
1120.88 515.081 li
1121.84 516.621 1122.58 518.121 1123.06 519.601 cv
1123.54 521.081 1123.8 522.541 1123.8 523.981 cv
1123.8 525.441 1123.54 526.901 1123.06 528.381 cv
1122.58 529.861 1121.84 531.341 1120.88 532.881 cv
1119.32 532.881 li
1120.18 531.381 1120.82 529.921 1121.26 528.441 cv
1121.68 526.981 1121.9 525.501 1121.9 523.981 cv
1121.9 522.481 1121.68 521.001 1121.26 519.541 cv
1120.82 518.081 1120.18 516.601 1119.32 515.081 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
