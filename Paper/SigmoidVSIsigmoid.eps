%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SigmoidVSIsigmoid-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/12, 9:16:37
%%BoundingBox: 0 0 1157 601
%%HiResBoundingBox: 0 0 1157 601
%%CropBox: 0 0 1157 601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-12T08:45:16+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-12T09:16:30+08:00"
   xmp:MetadataDate="2019-06-12T09:16:30+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:e7ed0174-cf1a-45f6-8e48-b1b3a553e3da"
   xmpMM:InstanceID="uuid:76e9ffe3-703b-4051-ab6c-23715b028699"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -601 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 601 li
1157 601 li
1157 0 li
cp
clp
gsave
7.62939e-6 601.68 mo
1157 601.68 li
1157 -.320114 li
7.62939e-6 -.320114 li
7.62939e-6 601.68 li
clp
-101 620.68 mo
1281.4 620.68 li
1281.4 -77.0001 li
-101 -77.0001 li
-101 620.68 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
71.8001 543.935 mo
1143.16 543.935 li
1143.16 6.72171 li
71.8001 6.72171 li
71.8001 543.935 li
f
120.498 543.935 mo
120.498 547.435 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
120.498 543.935 mo
120.498 547.435 li
@
120.499 552.858 mo
119.479 552.858 118.719 553.358 118.199 554.358 cv
117.679 555.358 117.439 556.858 117.439 558.858 cv
117.439 560.858 117.679 562.358 118.199 563.358 cv
118.719 564.358 119.479 564.858 120.499 564.858 cv
121.519 564.858 122.279 564.358 122.799 563.358 cv
123.299 562.358 123.559 560.858 123.559 558.858 cv
123.559 556.858 123.299 555.358 122.799 554.358 cv
122.279 553.358 121.519 552.858 120.499 552.858 cv
120.499 551.298 mo
122.119 551.298 123.359 551.958 124.239 553.238 cv
125.099 554.538 125.539 556.418 125.539 558.858 cv
125.539 561.318 125.099 563.198 124.239 564.478 cv
123.359 565.758 122.119 566.398 120.499 566.398 cv
118.859 566.398 117.599 565.758 116.739 564.478 cv
115.879 563.198 115.459 561.318 115.459 558.858 cv
115.459 556.418 115.879 554.538 116.739 553.238 cv
117.599 551.958 118.859 551.298 120.499 551.298 cv
f
317.259 543.935 mo
317.259 547.435 li
f
317.259 543.935 mo
317.259 547.435 li
@
302.02 564.478 mo
308.9 564.478 li
308.9 566.138 li
299.64 566.138 li
299.64 564.478 li
300.38 563.718 301.4 562.678 302.7 561.358 cv
303.98 560.058 304.8 559.218 305.14 558.838 cv
305.78 558.138 306.22 557.538 306.46 557.038 cv
306.7 556.558 306.84 556.058 306.84 555.578 cv
306.84 554.818 306.56 554.178 306.02 553.698 cv
305.48 553.218 304.78 552.958 303.9 552.958 cv
303.28 552.958 302.62 553.078 301.94 553.278 cv
301.26 553.498 300.52 553.818 299.74 554.258 cv
299.74 552.258 li
300.54 551.938 301.28 551.698 301.96 551.538 cv
302.64 551.378 303.28 551.298 303.86 551.298 cv
305.36 551.298 306.56 551.678 307.46 552.438 cv
308.36 553.198 308.82 554.198 308.82 555.458 cv
308.82 556.058 308.7 556.638 308.48 557.158 cv
308.26 557.698 307.86 558.338 307.26 559.058 cv
307.1 559.258 306.58 559.798 305.7 560.698 cv
304.82 561.598 303.6 562.858 302.02 564.478 cv
f
317.26 552.858 mo
316.24 552.858 315.48 553.358 314.96 554.358 cv
314.44 555.358 314.2 556.858 314.2 558.858 cv
314.2 560.858 314.44 562.358 314.96 563.358 cv
315.48 564.358 316.24 564.858 317.26 564.858 cv
318.28 564.858 319.04 564.358 319.56 563.358 cv
320.06 562.358 320.32 560.858 320.32 558.858 cv
320.32 556.858 320.06 555.358 319.56 554.358 cv
319.04 553.358 318.28 552.858 317.26 552.858 cv
317.26 551.298 mo
318.88 551.298 320.12 551.958 321 553.238 cv
321.86 554.538 322.3 556.418 322.3 558.858 cv
322.3 561.318 321.86 563.198 321 564.478 cv
320.12 565.758 318.88 566.398 317.26 566.398 cv
315.62 566.398 314.36 565.758 313.5 564.478 cv
312.64 563.198 312.22 561.318 312.22 558.858 cv
312.22 556.418 312.64 554.538 313.5 553.238 cv
314.36 551.958 315.62 551.298 317.26 551.298 cv
f
329.98 552.858 mo
328.96 552.858 328.2 553.358 327.68 554.358 cv
327.16 555.358 326.92 556.858 326.92 558.858 cv
326.92 560.858 327.16 562.358 327.68 563.358 cv
328.2 564.358 328.96 564.858 329.98 564.858 cv
331 564.858 331.76 564.358 332.28 563.358 cv
332.78 562.358 333.04 560.858 333.04 558.858 cv
333.04 556.858 332.78 555.358 332.28 554.358 cv
331.76 553.358 331 552.858 329.98 552.858 cv
329.98 551.298 mo
331.6 551.298 332.84 551.958 333.72 553.238 cv
334.58 554.538 335.02 556.418 335.02 558.858 cv
335.02 561.318 334.58 563.198 333.72 564.478 cv
332.84 565.758 331.6 566.398 329.98 566.398 cv
328.34 566.398 327.08 565.758 326.22 564.478 cv
325.36 563.198 324.94 561.318 324.94 558.858 cv
324.94 556.418 325.36 554.538 326.22 553.238 cv
327.08 551.958 328.34 551.298 329.98 551.298 cv
f
514.019 543.935 mo
514.019 547.435 li
f
514.019 543.935 mo
514.019 547.435 li
@
502.501 553.278 mo
497.521 561.058 li
502.501 561.058 li
502.501 553.278 li
501.981 551.558 mo
504.461 551.558 li
504.461 561.058 li
506.541 561.058 li
506.541 562.698 li
504.461 562.698 li
504.461 566.138 li
502.501 566.138 li
502.501 562.698 li
495.921 562.698 li
495.921 560.798 li
501.981 551.558 li
f
514.021 552.858 mo
513.001 552.858 512.241 553.358 511.721 554.358 cv
511.201 555.358 510.961 556.858 510.961 558.858 cv
510.961 560.858 511.201 562.358 511.721 563.358 cv
512.241 564.358 513.001 564.858 514.021 564.858 cv
515.041 564.858 515.801 564.358 516.321 563.358 cv
516.821 562.358 517.081 560.858 517.081 558.858 cv
517.081 556.858 516.821 555.358 516.321 554.358 cv
515.801 553.358 515.041 552.858 514.021 552.858 cv
514.021 551.298 mo
515.641 551.298 516.881 551.958 517.761 553.238 cv
518.621 554.538 519.061 556.418 519.061 558.858 cv
519.061 561.318 518.621 563.198 517.761 564.478 cv
516.881 565.758 515.641 566.398 514.021 566.398 cv
512.381 566.398 511.121 565.758 510.261 564.478 cv
509.401 563.198 508.981 561.318 508.981 558.858 cv
508.981 556.418 509.401 554.538 510.261 553.238 cv
511.121 551.958 512.381 551.298 514.021 551.298 cv
f
526.741 552.858 mo
525.721 552.858 524.961 553.358 524.441 554.358 cv
523.921 555.358 523.681 556.858 523.681 558.858 cv
523.681 560.858 523.921 562.358 524.441 563.358 cv
524.961 564.358 525.721 564.858 526.741 564.858 cv
527.761 564.858 528.521 564.358 529.041 563.358 cv
529.541 562.358 529.801 560.858 529.801 558.858 cv
529.801 556.858 529.541 555.358 529.041 554.358 cv
528.521 553.358 527.761 552.858 526.741 552.858 cv
526.741 551.298 mo
528.361 551.298 529.601 551.958 530.481 553.238 cv
531.341 554.538 531.781 556.418 531.781 558.858 cv
531.781 561.318 531.341 563.198 530.481 564.478 cv
529.601 565.758 528.361 566.398 526.741 566.398 cv
525.101 566.398 523.841 565.758 522.981 564.478 cv
522.121 563.198 521.701 561.318 521.701 558.858 cv
521.701 556.418 522.121 554.538 522.981 553.238 cv
523.841 551.958 525.101 551.298 526.741 551.298 cv
f
710.779 543.935 mo
710.779 547.435 li
f
710.779 543.935 mo
710.779 547.435 li
@
698.301 558.058 mo
697.421 558.058 696.721 558.378 696.201 558.978 cv
695.681 559.578 695.421 560.418 695.421 561.458 cv
695.421 562.518 695.681 563.358 696.201 563.958 cv
696.721 564.558 697.421 564.858 698.301 564.858 cv
699.181 564.858 699.881 564.558 700.401 563.958 cv
700.921 563.358 701.181 562.518 701.181 561.458 cv
701.181 560.418 700.921 559.578 700.401 558.978 cv
699.881 558.378 699.181 558.058 698.301 558.058 cv
702.221 551.878 mo
702.221 553.678 li
701.721 553.438 701.221 553.258 700.721 553.138 cv
700.201 553.018 699.701 552.958 699.221 552.958 cv
697.901 552.958 696.901 553.398 696.221 554.278 cv
695.541 555.158 695.141 556.498 695.061 558.258 cv
695.441 557.698 695.921 557.258 696.501 556.958 cv
697.081 556.658 697.721 556.498 698.421 556.498 cv
699.881 556.498 701.041 556.958 701.881 557.838 cv
702.721 558.718 703.161 559.938 703.161 561.458 cv
703.161 562.958 702.701 564.158 701.821 565.058 cv
700.941 565.958 699.761 566.398 698.301 566.398 cv
696.621 566.398 695.321 565.758 694.441 564.478 cv
693.541 563.198 693.101 561.318 693.101 558.858 cv
693.101 556.558 693.641 554.718 694.741 553.358 cv
695.821 551.998 697.301 551.298 699.141 551.298 cv
699.621 551.298 700.121 551.358 700.641 551.438 cv
701.141 551.538 701.661 551.678 702.221 551.878 cv
f
710.781 552.858 mo
709.761 552.858 709.001 553.358 708.481 554.358 cv
707.961 555.358 707.721 556.858 707.721 558.858 cv
707.721 560.858 707.961 562.358 708.481 563.358 cv
709.001 564.358 709.761 564.858 710.781 564.858 cv
711.801 564.858 712.561 564.358 713.081 563.358 cv
713.581 562.358 713.841 560.858 713.841 558.858 cv
713.841 556.858 713.581 555.358 713.081 554.358 cv
712.561 553.358 711.801 552.858 710.781 552.858 cv
710.781 551.298 mo
712.401 551.298 713.641 551.958 714.521 553.238 cv
715.381 554.538 715.821 556.418 715.821 558.858 cv
715.821 561.318 715.381 563.198 714.521 564.478 cv
713.641 565.758 712.401 566.398 710.781 566.398 cv
709.141 566.398 707.881 565.758 707.021 564.478 cv
706.161 563.198 705.741 561.318 705.741 558.858 cv
705.741 556.418 706.161 554.538 707.021 553.238 cv
707.881 551.958 709.141 551.298 710.781 551.298 cv
f
723.501 552.858 mo
722.481 552.858 721.721 553.358 721.201 554.358 cv
720.681 555.358 720.441 556.858 720.441 558.858 cv
720.441 560.858 720.681 562.358 721.201 563.358 cv
721.721 564.358 722.481 564.858 723.501 564.858 cv
724.521 564.858 725.281 564.358 725.801 563.358 cv
726.301 562.358 726.561 560.858 726.561 558.858 cv
726.561 556.858 726.301 555.358 725.801 554.358 cv
725.281 553.358 724.521 552.858 723.501 552.858 cv
723.501 551.298 mo
725.121 551.298 726.361 551.958 727.241 553.238 cv
728.101 554.538 728.541 556.418 728.541 558.858 cv
728.541 561.318 728.101 563.198 727.241 564.478 cv
726.361 565.758 725.121 566.398 723.501 566.398 cv
721.861 566.398 720.601 565.758 719.741 564.478 cv
718.881 563.198 718.461 561.318 718.461 558.858 cv
718.461 556.418 718.881 554.538 719.741 553.238 cv
720.601 551.958 721.861 551.298 723.501 551.298 cv
f
907.539 543.935 mo
907.539 547.435 li
f
907.539 543.935 mo
907.539 547.435 li
@
894.821 559.218 mo
893.881 559.218 893.141 559.478 892.601 559.978 cv
892.061 560.478 891.801 561.158 891.801 562.038 cv
891.801 562.918 892.061 563.618 892.601 564.118 cv
893.141 564.618 893.881 564.858 894.821 564.858 cv
895.741 564.858 896.481 564.618 897.021 564.098 cv
897.561 563.598 897.841 562.918 897.841 562.038 cv
897.841 561.158 897.561 560.478 897.041 559.978 cv
896.501 559.478 895.761 559.218 894.821 559.218 cv
892.841 558.378 mo
892.001 558.178 891.341 557.778 890.861 557.198 cv
890.381 556.618 890.161 555.918 890.161 555.078 cv
890.161 553.918 890.561 552.998 891.401 552.318 cv
892.221 551.638 893.361 551.298 894.821 551.298 cv
896.261 551.298 897.401 551.638 898.241 552.318 cv
899.061 552.998 899.481 553.918 899.481 555.078 cv
899.481 555.918 899.241 556.618 898.761 557.198 cv
898.281 557.778 897.641 558.178 896.801 558.378 cv
897.741 558.598 898.481 559.038 899.021 559.678 cv
899.541 560.318 899.821 561.118 899.821 562.038 cv
899.821 563.458 899.381 564.538 898.521 565.278 cv
897.641 566.038 896.421 566.398 894.821 566.398 cv
893.201 566.398 891.961 566.038 891.101 565.278 cv
890.241 564.538 889.821 563.458 889.821 562.038 cv
889.821 561.118 890.081 560.318 890.621 559.678 cv
891.141 559.038 891.881 558.598 892.841 558.378 cv
892.121 555.258 mo
892.121 556.018 892.341 556.618 892.821 557.038 cv
893.301 557.458 893.961 557.658 894.821 557.658 cv
895.661 557.658 896.321 557.458 896.801 557.038 cv
897.281 556.618 897.521 556.018 897.521 555.258 cv
897.521 554.498 897.281 553.918 896.801 553.498 cv
896.321 553.078 895.661 552.858 894.821 552.858 cv
893.961 552.858 893.301 553.078 892.821 553.498 cv
892.341 553.918 892.121 554.498 892.121 555.258 cv
f
907.541 552.858 mo
906.521 552.858 905.761 553.358 905.241 554.358 cv
904.721 555.358 904.481 556.858 904.481 558.858 cv
904.481 560.858 904.721 562.358 905.241 563.358 cv
905.761 564.358 906.521 564.858 907.541 564.858 cv
908.561 564.858 909.321 564.358 909.841 563.358 cv
910.341 562.358 910.601 560.858 910.601 558.858 cv
910.601 556.858 910.341 555.358 909.841 554.358 cv
909.321 553.358 908.561 552.858 907.541 552.858 cv
907.541 551.298 mo
909.161 551.298 910.401 551.958 911.281 553.238 cv
912.141 554.538 912.581 556.418 912.581 558.858 cv
912.581 561.318 912.141 563.198 911.281 564.478 cv
910.401 565.758 909.161 566.398 907.541 566.398 cv
905.901 566.398 904.641 565.758 903.781 564.478 cv
902.921 563.198 902.501 561.318 902.501 558.858 cv
902.501 556.418 902.921 554.538 903.781 553.238 cv
904.641 551.958 905.901 551.298 907.541 551.298 cv
f
920.261 552.858 mo
919.241 552.858 918.481 553.358 917.961 554.358 cv
917.441 555.358 917.201 556.858 917.201 558.858 cv
917.201 560.858 917.441 562.358 917.961 563.358 cv
918.481 564.358 919.241 564.858 920.261 564.858 cv
921.281 564.858 922.041 564.358 922.561 563.358 cv
923.061 562.358 923.321 560.858 923.321 558.858 cv
923.321 556.858 923.061 555.358 922.561 554.358 cv
922.041 553.358 921.281 552.858 920.261 552.858 cv
920.261 551.298 mo
921.881 551.298 923.121 551.958 924.001 553.238 cv
924.861 554.538 925.301 556.418 925.301 558.858 cv
925.301 561.318 924.861 563.198 924.001 564.478 cv
923.121 565.758 921.881 566.398 920.261 566.398 cv
918.621 566.398 917.361 565.758 916.501 564.478 cv
915.641 563.198 915.221 561.318 915.221 558.858 cv
915.221 556.418 915.641 554.538 916.501 553.238 cv
917.361 551.958 918.621 551.298 920.261 551.298 cv
f
1104.3 543.935 mo
1104.3 547.435 li
f
1104.3 543.935 mo
1104.3 547.435 li
@
1081.34 564.478 mo
1084.56 564.478 li
1084.56 553.358 li
1081.06 554.058 li
1081.06 552.258 li
1084.54 551.558 li
1086.52 551.558 li
1086.52 564.478 li
1089.74 564.478 li
1089.74 566.138 li
1081.34 566.138 li
1081.34 564.478 li
f
1097.94 552.858 mo
1096.92 552.858 1096.16 553.358 1095.64 554.358 cv
1095.12 555.358 1094.88 556.858 1094.88 558.858 cv
1094.88 560.858 1095.12 562.358 1095.64 563.358 cv
1096.16 564.358 1096.92 564.858 1097.94 564.858 cv
1098.96 564.858 1099.72 564.358 1100.24 563.358 cv
1100.74 562.358 1101 560.858 1101 558.858 cv
1101 556.858 1100.74 555.358 1100.24 554.358 cv
1099.72 553.358 1098.96 552.858 1097.94 552.858 cv
1097.94 551.298 mo
1099.56 551.298 1100.8 551.958 1101.68 553.238 cv
1102.54 554.538 1102.98 556.418 1102.98 558.858 cv
1102.98 561.318 1102.54 563.198 1101.68 564.478 cv
1100.8 565.758 1099.56 566.398 1097.94 566.398 cv
1096.3 566.398 1095.04 565.758 1094.18 564.478 cv
1093.32 563.198 1092.9 561.318 1092.9 558.858 cv
1092.9 556.418 1093.32 554.538 1094.18 553.238 cv
1095.04 551.958 1096.3 551.298 1097.94 551.298 cv
f
1110.66 552.858 mo
1109.64 552.858 1108.88 553.358 1108.36 554.358 cv
1107.84 555.358 1107.6 556.858 1107.6 558.858 cv
1107.6 560.858 1107.84 562.358 1108.36 563.358 cv
1108.88 564.358 1109.64 564.858 1110.66 564.858 cv
1111.68 564.858 1112.44 564.358 1112.96 563.358 cv
1113.46 562.358 1113.72 560.858 1113.72 558.858 cv
1113.72 556.858 1113.46 555.358 1112.96 554.358 cv
1112.44 553.358 1111.68 552.858 1110.66 552.858 cv
1110.66 551.298 mo
1112.28 551.298 1113.52 551.958 1114.4 553.238 cv
1115.26 554.538 1115.7 556.418 1115.7 558.858 cv
1115.7 561.318 1115.26 563.198 1114.4 564.478 cv
1113.52 565.758 1112.28 566.398 1110.66 566.398 cv
1109.02 566.398 1107.76 565.758 1106.9 564.478 cv
1106.04 563.198 1105.62 561.318 1105.62 558.858 cv
1105.62 556.418 1106.04 554.538 1106.9 553.238 cv
1107.76 551.958 1109.02 551.298 1110.66 551.298 cv
f
1123.38 552.858 mo
1122.36 552.858 1121.6 553.358 1121.08 554.358 cv
1120.56 555.358 1120.32 556.858 1120.32 558.858 cv
1120.32 560.858 1120.56 562.358 1121.08 563.358 cv
1121.6 564.358 1122.36 564.858 1123.38 564.858 cv
1124.4 564.858 1125.16 564.358 1125.68 563.358 cv
1126.18 562.358 1126.44 560.858 1126.44 558.858 cv
1126.44 556.858 1126.18 555.358 1125.68 554.358 cv
1125.16 553.358 1124.4 552.858 1123.38 552.858 cv
1123.38 551.298 mo
1125 551.298 1126.24 551.958 1127.12 553.238 cv
1127.98 554.538 1128.42 556.418 1128.42 558.858 cv
1128.42 561.318 1127.98 563.198 1127.12 564.478 cv
1126.24 565.758 1125 566.398 1123.38 566.398 cv
1121.74 566.398 1120.48 565.758 1119.62 564.478 cv
1118.76 563.198 1118.34 561.318 1118.34 558.858 cv
1118.34 556.418 1118.76 554.538 1119.62 553.238 cv
1120.48 551.958 1121.74 551.298 1123.38 551.298 cv
f
578.815 574.918 mo
588.035 574.918 li
588.035 576.578 li
580.795 576.578 li
580.795 580.898 li
587.735 580.898 li
587.735 582.558 li
580.795 582.558 li
580.795 587.838 li
588.215 587.838 li
588.215 589.498 li
578.815 589.498 li
578.815 574.918 li
f
593.115 587.858 mo
593.115 593.638 li
591.315 593.638 li
591.315 578.558 li
593.115 578.558 li
593.115 580.218 li
593.475 579.578 593.955 579.098 594.535 578.778 cv
595.115 578.458 595.815 578.298 596.615 578.298 cv
597.935 578.298 599.015 578.838 599.855 579.878 cv
600.675 580.938 601.095 582.318 601.095 584.038 cv
601.095 585.758 600.675 587.158 599.855 588.198 cv
599.015 589.238 597.935 589.758 596.615 589.758 cv
595.815 589.758 595.115 589.598 594.535 589.298 cv
593.955 588.998 593.475 588.518 593.115 587.858 cv
599.235 584.038 mo
599.235 582.718 598.955 581.698 598.415 580.938 cv
597.855 580.178 597.115 579.798 596.175 579.798 cv
595.215 579.798 594.475 580.178 593.935 580.938 cv
593.375 581.698 593.115 582.718 593.115 584.038 cv
593.115 585.358 593.375 586.398 593.935 587.158 cv
594.475 587.918 595.215 588.278 596.175 588.278 cv
597.115 588.278 597.855 587.918 598.415 587.158 cv
598.955 586.398 599.235 585.358 599.235 584.038 cv
f
608.315 579.818 mo
607.355 579.818 606.595 580.198 606.035 580.958 cv
605.475 581.718 605.195 582.738 605.195 584.038 cv
605.195 585.358 605.455 586.378 606.015 587.138 cv
606.575 587.898 607.335 588.258 608.315 588.258 cv
609.275 588.258 610.035 587.898 610.595 587.138 cv
611.155 586.378 611.435 585.358 611.435 584.038 cv
611.435 582.758 611.155 581.718 610.595 580.958 cv
610.035 580.198 609.275 579.818 608.315 579.818 cv
608.315 578.298 mo
609.875 578.298 611.095 578.818 611.995 579.818 cv
612.875 580.838 613.335 582.238 613.335 584.038 cv
613.335 585.838 612.875 587.238 611.995 588.238 cv
611.095 589.258 609.875 589.758 608.315 589.758 cv
606.735 589.758 605.495 589.258 604.615 588.238 cv
603.735 587.238 603.295 585.838 603.295 584.038 cv
603.295 582.238 603.735 580.838 604.615 579.818 cv
605.495 578.818 606.735 578.298 608.315 578.298 cv
f
624.195 578.978 mo
624.195 580.658 li
623.675 580.378 623.175 580.178 622.655 580.038 cv
622.135 579.898 621.635 579.818 621.115 579.818 cv
619.955 579.818 619.035 580.198 618.395 580.938 cv
617.755 581.678 617.435 582.718 617.435 584.038 cv
617.435 585.378 617.755 586.418 618.395 587.158 cv
619.035 587.898 619.955 588.258 621.115 588.258 cv
621.635 588.258 622.135 588.198 622.655 588.058 cv
623.175 587.918 623.675 587.698 624.195 587.418 cv
624.195 589.078 li
623.675 589.318 623.155 589.498 622.635 589.598 cv
622.095 589.698 621.515 589.758 620.915 589.758 cv
619.275 589.758 617.955 589.258 616.995 588.218 cv
616.015 587.198 615.535 585.798 615.535 584.038 cv
615.535 582.258 616.015 580.858 616.995 579.838 cv
617.975 578.818 619.315 578.298 621.035 578.298 cv
621.595 578.298 622.135 578.358 622.655 578.478 cv
623.175 578.598 623.695 578.758 624.195 578.978 cv
f
636.415 582.898 mo
636.415 589.498 li
634.615 589.498 li
634.615 582.958 li
634.615 581.918 634.395 581.158 633.995 580.638 cv
633.595 580.118 632.995 579.858 632.195 579.858 cv
631.215 579.858 630.455 580.178 629.895 580.798 cv
629.335 581.418 629.055 582.258 629.055 583.318 cv
629.055 589.498 li
627.255 589.498 li
627.255 574.298 li
629.055 574.298 li
629.055 580.258 li
629.475 579.618 629.975 579.118 630.575 578.798 cv
631.155 578.478 631.835 578.298 632.595 578.298 cv
633.835 578.298 634.795 578.698 635.435 579.478 cv
636.075 580.258 636.415 581.398 636.415 582.898 cv
f
71.8 512.714 mo
68.3 512.714 li
f
71.8 512.714 mo
68.3 512.714 li
@
39.3631 507.036 mo
38.3431 507.036 37.5831 507.536 37.0631 508.536 cv
36.5431 509.536 36.3031 511.036 36.3031 513.036 cv
36.3031 515.036 36.5431 516.536 37.0631 517.536 cv
37.5831 518.536 38.3431 519.036 39.3631 519.036 cv
40.3831 519.036 41.1431 518.536 41.6631 517.536 cv
42.1631 516.536 42.4231 515.036 42.4231 513.036 cv
42.4231 511.036 42.1631 509.536 41.6631 508.536 cv
41.1431 507.536 40.3831 507.036 39.3631 507.036 cv
39.3631 505.476 mo
40.9831 505.476 42.2231 506.136 43.1031 507.416 cv
43.9631 508.716 44.4031 510.596 44.4031 513.036 cv
44.4031 515.496 43.9631 517.376 43.1031 518.656 cv
42.2231 519.936 40.9831 520.576 39.3631 520.576 cv
37.7231 520.576 36.4631 519.936 35.6031 518.656 cv
34.7431 517.376 34.3231 515.496 34.3231 513.036 cv
34.3231 510.596 34.7431 508.716 35.6031 507.416 cv
36.4631 506.136 37.7231 505.476 39.3631 505.476 cv
f
47.8632 517.836 mo
49.9232 517.836 li
49.9232 520.316 li
47.8632 520.316 li
47.8632 517.836 li
f
55.923 518.656 mo
62.803 518.656 li
62.803 520.316 li
53.543 520.316 li
53.543 518.656 li
54.283 517.896 55.303 516.856 56.603 515.536 cv
57.883 514.236 58.703 513.396 59.043 513.016 cv
59.683 512.316 60.123 511.716 60.363 511.216 cv
60.603 510.736 60.743 510.236 60.743 509.756 cv
60.743 508.996 60.463 508.356 59.923 507.876 cv
59.383 507.396 58.683 507.136 57.803 507.136 cv
57.183 507.136 56.523 507.256 55.843 507.456 cv
55.163 507.676 54.423 507.996 53.643 508.436 cv
53.643 506.436 li
54.443 506.116 55.183 505.876 55.863 505.716 cv
56.543 505.556 57.183 505.476 57.763 505.476 cv
59.263 505.476 60.463 505.856 61.363 506.616 cv
62.263 507.376 62.723 508.376 62.723 509.636 cv
62.723 510.236 62.603 510.816 62.383 511.336 cv
62.163 511.876 61.763 512.516 61.163 513.236 cv
61.003 513.436 60.483 513.976 59.603 514.876 cv
58.723 515.776 57.503 517.036 55.923 518.656 cv
f
71.8 451.616 mo
68.3 451.616 li
f
71.8 451.616 mo
68.3 451.616 li
@
39.3631 445.938 mo
38.3431 445.938 37.5831 446.438 37.0631 447.438 cv
36.5431 448.438 36.3031 449.938 36.3031 451.938 cv
36.3031 453.938 36.5431 455.438 37.0631 456.438 cv
37.5831 457.438 38.3431 457.938 39.3631 457.938 cv
40.3831 457.938 41.1431 457.438 41.6631 456.438 cv
42.1631 455.438 42.4231 453.938 42.4231 451.938 cv
42.4231 449.938 42.1631 448.438 41.6631 447.438 cv
41.1431 446.438 40.3831 445.938 39.3631 445.938 cv
39.3631 444.378 mo
40.9831 444.378 42.2231 445.038 43.1031 446.318 cv
43.9631 447.618 44.4031 449.498 44.4031 451.938 cv
44.4031 454.398 43.9631 456.278 43.1031 457.558 cv
42.2231 458.838 40.9831 459.478 39.3631 459.478 cv
37.7231 459.478 36.4631 458.838 35.6031 457.558 cv
34.7431 456.278 34.3231 454.398 34.3231 451.938 cv
34.3231 449.498 34.7431 447.618 35.6031 446.318 cv
36.4631 445.038 37.7231 444.378 39.3631 444.378 cv
f
47.8632 456.738 mo
49.9232 456.738 li
49.9232 459.218 li
47.8632 459.218 li
47.8632 456.738 li
f
60.203 451.358 mo
61.143 451.558 61.883 451.978 62.403 452.618 cv
62.923 453.258 63.203 454.058 63.203 454.978 cv
63.203 456.418 62.703 457.538 61.723 458.318 cv
60.723 459.098 59.323 459.478 57.503 459.478 cv
56.883 459.478 56.243 459.418 55.603 459.298 cv
54.963 459.198 54.283 459.018 53.603 458.778 cv
53.603 456.878 li
54.143 457.198 54.743 457.438 55.403 457.598 cv
56.043 457.758 56.723 457.838 57.443 457.838 cv
58.683 457.838 59.623 457.598 60.263 457.118 cv
60.903 456.638 61.243 455.918 61.243 454.978 cv
61.243 454.138 60.943 453.458 60.343 452.978 cv
59.743 452.498 58.903 452.238 57.823 452.238 cv
56.123 452.238 li
56.123 450.618 li
57.903 450.618 li
58.863 450.618 59.603 450.438 60.123 450.038 cv
60.643 449.658 60.903 449.098 60.903 448.358 cv
60.903 447.618 60.623 447.038 60.103 446.638 cv
59.563 446.238 58.803 446.038 57.823 446.038 cv
57.283 446.038 56.703 446.098 56.083 446.218 cv
55.463 446.338 54.783 446.518 54.043 446.758 cv
54.043 444.998 li
54.783 444.798 55.483 444.638 56.143 444.538 cv
56.783 444.438 57.403 444.378 58.003 444.378 cv
59.483 444.378 60.663 444.718 61.543 445.398 cv
62.423 446.078 62.863 446.998 62.863 448.158 cv
62.863 448.958 62.623 449.638 62.163 450.198 cv
61.703 450.758 61.043 451.158 60.203 451.358 cv
f
71.8 390.518 mo
68.3 390.518 li
f
71.8 390.518 mo
68.3 390.518 li
@
39.3631 384.84 mo
38.3431 384.84 37.5831 385.34 37.0631 386.34 cv
36.5431 387.34 36.3031 388.84 36.3031 390.84 cv
36.3031 392.84 36.5431 394.34 37.0631 395.34 cv
37.5831 396.34 38.3431 396.84 39.3631 396.84 cv
40.3831 396.84 41.1431 396.34 41.6631 395.34 cv
42.1631 394.34 42.4231 392.84 42.4231 390.84 cv
42.4231 388.84 42.1631 387.34 41.6631 386.34 cv
41.1431 385.34 40.3831 384.84 39.3631 384.84 cv
39.3631 383.28 mo
40.9831 383.28 42.2231 383.94 43.1031 385.22 cv
43.9631 386.52 44.4031 388.4 44.4031 390.84 cv
44.4031 393.3 43.9631 395.18 43.1031 396.46 cv
42.2231 397.74 40.9831 398.38 39.3631 398.38 cv
37.7231 398.38 36.4631 397.74 35.6031 396.46 cv
34.7431 395.18 34.3231 393.3 34.3231 390.84 cv
34.3231 388.4 34.7431 386.52 35.6031 385.22 cv
36.4631 383.94 37.7231 383.28 39.3631 383.28 cv
f
47.8632 395.64 mo
49.9232 395.64 li
49.9232 398.12 li
47.8632 398.12 li
47.8632 395.64 li
f
59.643 385.26 mo
54.663 393.04 li
59.643 393.04 li
59.643 385.26 li
59.123 383.54 mo
61.603 383.54 li
61.603 393.04 li
63.683 393.04 li
63.683 394.68 li
61.603 394.68 li
61.603 398.12 li
59.643 398.12 li
59.643 394.68 li
53.063 394.68 li
53.063 392.78 li
59.123 383.54 li
f
71.8 329.42 mo
68.3 329.42 li
f
71.8 329.42 mo
68.3 329.42 li
@
39.3631 323.742 mo
38.3431 323.742 37.5831 324.242 37.0631 325.242 cv
36.5431 326.242 36.3031 327.742 36.3031 329.742 cv
36.3031 331.742 36.5431 333.242 37.0631 334.242 cv
37.5831 335.242 38.3431 335.742 39.3631 335.742 cv
40.3831 335.742 41.1431 335.242 41.6631 334.242 cv
42.1631 333.242 42.4231 331.742 42.4231 329.742 cv
42.4231 327.742 42.1631 326.242 41.6631 325.242 cv
41.1431 324.242 40.3831 323.742 39.3631 323.742 cv
39.3631 322.182 mo
40.9831 322.182 42.2231 322.842 43.1031 324.122 cv
43.9631 325.422 44.4031 327.302 44.4031 329.742 cv
44.4031 332.202 43.9631 334.082 43.1031 335.362 cv
42.2231 336.642 40.9831 337.282 39.3631 337.282 cv
37.7231 337.282 36.4631 336.642 35.6031 335.362 cv
34.7431 334.082 34.3231 332.202 34.3231 329.742 cv
34.3231 327.302 34.7431 325.422 35.6031 324.122 cv
36.4631 322.842 37.7231 322.182 39.3631 322.182 cv
f
47.8632 334.542 mo
49.9232 334.542 li
49.9232 337.022 li
47.8632 337.022 li
47.8632 334.542 li
f
54.243 322.442 mo
61.983 322.442 li
61.983 324.102 li
56.043 324.102 li
56.043 327.682 li
56.323 327.582 56.623 327.502 56.903 327.462 cv
57.183 327.422 57.483 327.382 57.763 327.382 cv
59.383 327.382 60.663 327.842 61.623 328.722 cv
62.583 329.622 63.063 330.822 63.063 332.342 cv
63.063 333.922 62.563 335.142 61.583 336.002 cv
60.603 336.862 59.223 337.282 57.463 337.282 cv
56.843 337.282 56.223 337.222 55.583 337.142 cv
54.943 337.042 54.303 336.902 53.623 336.682 cv
53.623 334.702 li
54.203 335.022 54.803 335.262 55.443 335.422 cv
56.063 335.582 56.723 335.642 57.423 335.642 cv
58.543 335.642 59.443 335.362 60.103 334.762 cv
60.743 334.162 61.083 333.362 61.083 332.342 cv
61.083 331.342 60.743 330.542 60.103 329.942 cv
59.443 329.342 58.543 329.042 57.423 329.042 cv
56.903 329.042 56.363 329.102 55.843 329.222 cv
55.323 329.342 54.783 329.522 54.243 329.762 cv
54.243 322.442 li
f
71.8 268.323 mo
68.3 268.323 li
f
71.8 268.323 mo
68.3 268.323 li
@
39.3631 262.644 mo
38.3431 262.644 37.5831 263.144 37.0631 264.144 cv
36.5431 265.144 36.3031 266.644 36.3031 268.644 cv
36.3031 270.644 36.5431 272.144 37.0631 273.144 cv
37.5831 274.144 38.3431 274.644 39.3631 274.644 cv
40.3831 274.644 41.1431 274.144 41.6631 273.144 cv
42.1631 272.144 42.4231 270.644 42.4231 268.644 cv
42.4231 266.644 42.1631 265.144 41.6631 264.144 cv
41.1431 263.144 40.3831 262.644 39.3631 262.644 cv
39.3631 261.084 mo
40.9831 261.084 42.2231 261.744 43.1031 263.024 cv
43.9631 264.324 44.4031 266.204 44.4031 268.644 cv
44.4031 271.104 43.9631 272.984 43.1031 274.264 cv
42.2231 275.544 40.9831 276.184 39.3631 276.184 cv
37.7231 276.184 36.4631 275.544 35.6031 274.264 cv
34.7431 272.984 34.3231 271.104 34.3231 268.644 cv
34.3231 266.204 34.7431 264.324 35.6031 263.024 cv
36.4631 261.744 37.7231 261.084 39.3631 261.084 cv
f
47.8632 273.444 mo
49.9232 273.444 li
49.9232 275.924 li
47.8632 275.924 li
47.8632 273.444 li
f
58.683 267.844 mo
57.803 267.844 57.103 268.164 56.583 268.764 cv
56.063 269.364 55.803 270.204 55.803 271.244 cv
55.803 272.304 56.063 273.144 56.583 273.744 cv
57.103 274.344 57.803 274.644 58.683 274.644 cv
59.563 274.644 60.263 274.344 60.783 273.744 cv
61.303 273.144 61.563 272.304 61.563 271.244 cv
61.563 270.204 61.303 269.364 60.783 268.764 cv
60.263 268.164 59.563 267.844 58.683 267.844 cv
62.603 261.664 mo
62.603 263.464 li
62.103 263.224 61.603 263.044 61.103 262.924 cv
60.583 262.804 60.083 262.744 59.603 262.744 cv
58.283 262.744 57.283 263.184 56.603 264.064 cv
55.923 264.944 55.523 266.284 55.443 268.044 cv
55.823 267.484 56.303 267.044 56.883 266.744 cv
57.463 266.444 58.103 266.284 58.803 266.284 cv
60.263 266.284 61.423 266.744 62.263 267.624 cv
63.103 268.504 63.543 269.724 63.543 271.244 cv
63.543 272.744 63.083 273.944 62.203 274.844 cv
61.323 275.744 60.143 276.184 58.683 276.184 cv
57.003 276.184 55.703 275.544 54.823 274.264 cv
53.923 272.984 53.483 271.104 53.483 268.644 cv
53.483 266.344 54.023 264.504 55.123 263.144 cv
56.203 261.784 57.683 261.084 59.523 261.084 cv
60.003 261.084 60.503 261.144 61.023 261.224 cv
61.523 261.324 62.043 261.464 62.603 261.664 cv
f
71.8 207.225 mo
68.3 207.225 li
f
71.8 207.225 mo
68.3 207.225 li
@
39.3631 201.546 mo
38.3431 201.546 37.5831 202.046 37.0631 203.046 cv
36.5431 204.046 36.3031 205.546 36.3031 207.546 cv
36.3031 209.546 36.5431 211.046 37.0631 212.046 cv
37.5831 213.046 38.3431 213.546 39.3631 213.546 cv
40.3831 213.546 41.1431 213.046 41.6631 212.046 cv
42.1631 211.046 42.4231 209.546 42.4231 207.546 cv
42.4231 205.546 42.1631 204.046 41.6631 203.046 cv
41.1431 202.046 40.3831 201.546 39.3631 201.546 cv
39.3631 199.986 mo
40.9831 199.986 42.2231 200.646 43.1031 201.926 cv
43.9631 203.226 44.4031 205.106 44.4031 207.546 cv
44.4031 210.006 43.9631 211.886 43.1031 213.166 cv
42.2231 214.446 40.9831 215.086 39.3631 215.086 cv
37.7231 215.086 36.4631 214.446 35.6031 213.166 cv
34.7431 211.886 34.3231 210.006 34.3231 207.546 cv
34.3231 205.106 34.7431 203.226 35.6031 201.926 cv
36.4631 200.646 37.7231 199.986 39.3631 199.986 cv
f
47.8632 212.346 mo
49.9232 212.346 li
49.9232 214.826 li
47.8632 214.826 li
47.8632 212.346 li
f
53.723 200.246 mo
63.103 200.246 li
63.103 201.086 li
57.803 214.826 li
55.743 214.826 li
60.723 201.906 li
53.723 201.906 li
53.723 200.246 li
f
71.8 146.127 mo
68.3 146.127 li
f
71.8 146.127 mo
68.3 146.127 li
@
39.3631 140.448 mo
38.3431 140.448 37.5831 140.948 37.0631 141.948 cv
36.5431 142.948 36.3031 144.448 36.3031 146.448 cv
36.3031 148.448 36.5431 149.948 37.0631 150.948 cv
37.5831 151.948 38.3431 152.448 39.3631 152.448 cv
40.3831 152.448 41.1431 151.948 41.6631 150.948 cv
42.1631 149.948 42.4231 148.448 42.4231 146.448 cv
42.4231 144.448 42.1631 142.948 41.6631 141.948 cv
41.1431 140.948 40.3831 140.448 39.3631 140.448 cv
39.3631 138.888 mo
40.9831 138.888 42.2231 139.548 43.1031 140.828 cv
43.9631 142.128 44.4031 144.008 44.4031 146.448 cv
44.4031 148.908 43.9631 150.788 43.1031 152.068 cv
42.2231 153.348 40.9831 153.988 39.3631 153.988 cv
37.7231 153.988 36.4631 153.348 35.6031 152.068 cv
34.7431 150.788 34.3231 148.908 34.3231 146.448 cv
34.3231 144.008 34.7431 142.128 35.6031 140.828 cv
36.4631 139.548 37.7231 138.888 39.3631 138.888 cv
f
47.8632 151.248 mo
49.9232 151.248 li
49.9232 153.728 li
47.8632 153.728 li
47.8632 151.248 li
f
58.443 146.808 mo
57.503 146.808 56.763 147.068 56.223 147.568 cv
55.683 148.068 55.423 148.748 55.423 149.628 cv
55.423 150.508 55.683 151.208 56.223 151.708 cv
56.763 152.208 57.503 152.448 58.443 152.448 cv
59.363 152.448 60.103 152.208 60.643 151.688 cv
61.183 151.188 61.463 150.508 61.463 149.628 cv
61.463 148.748 61.183 148.068 60.663 147.568 cv
60.123 147.068 59.383 146.808 58.443 146.808 cv
56.463 145.968 mo
55.623 145.768 54.963 145.368 54.483 144.788 cv
54.003 144.208 53.783 143.508 53.783 142.668 cv
53.783 141.508 54.183 140.588 55.023 139.908 cv
55.843 139.228 56.983 138.888 58.443 138.888 cv
59.883 138.888 61.023 139.228 61.863 139.908 cv
62.683 140.588 63.103 141.508 63.103 142.668 cv
63.103 143.508 62.863 144.208 62.383 144.788 cv
61.903 145.368 61.263 145.768 60.423 145.968 cv
61.363 146.188 62.103 146.628 62.643 147.268 cv
63.163 147.908 63.443 148.708 63.443 149.628 cv
63.443 151.048 63.003 152.128 62.143 152.868 cv
61.263 153.628 60.043 153.988 58.443 153.988 cv
56.823 153.988 55.583 153.628 54.723 152.868 cv
53.863 152.128 53.443 151.048 53.443 149.628 cv
53.443 148.708 53.703 147.908 54.243 147.268 cv
54.763 146.628 55.503 146.188 56.463 145.968 cv
55.743 142.848 mo
55.743 143.608 55.963 144.208 56.443 144.628 cv
56.923 145.048 57.583 145.248 58.443 145.248 cv
59.283 145.248 59.943 145.048 60.423 144.628 cv
60.903 144.208 61.143 143.608 61.143 142.848 cv
61.143 142.088 60.903 141.508 60.423 141.088 cv
59.943 140.668 59.283 140.448 58.443 140.448 cv
57.583 140.448 56.923 140.668 56.443 141.088 cv
55.963 141.508 55.743 142.088 55.743 142.848 cv
f
71.8 85.0287 mo
68.3 85.0287 li
f
71.8 85.0287 mo
68.3 85.0287 li
@
39.3631 79.3503 mo
38.3431 79.3503 37.5831 79.8503 37.0631 80.8503 cv
36.5431 81.8503 36.3031 83.3503 36.3031 85.3503 cv
36.3031 87.3503 36.5431 88.8503 37.0631 89.8503 cv
37.5831 90.8503 38.3431 91.3503 39.3631 91.3503 cv
40.3831 91.3503 41.1431 90.8503 41.6631 89.8503 cv
42.1631 88.8503 42.4231 87.3503 42.4231 85.3503 cv
42.4231 83.3503 42.1631 81.8503 41.6631 80.8503 cv
41.1431 79.8503 40.3831 79.3503 39.3631 79.3503 cv
39.3631 77.7903 mo
40.9831 77.7903 42.2231 78.4503 43.1031 79.7303 cv
43.9631 81.0303 44.4031 82.9103 44.4031 85.3503 cv
44.4031 87.8103 43.9631 89.6903 43.1031 90.9703 cv
42.2231 92.2503 40.9831 92.8903 39.3631 92.8903 cv
37.7231 92.8903 36.4631 92.2503 35.6031 90.9703 cv
34.7431 89.6903 34.3231 87.8103 34.3231 85.3503 cv
34.3231 82.9103 34.7431 81.0303 35.6031 79.7303 cv
36.4631 78.4503 37.7231 77.7903 39.3631 77.7903 cv
f
47.8632 90.1503 mo
49.9232 90.1503 li
49.9232 92.6303 li
47.8632 92.6303 li
47.8632 90.1503 li
f
54.283 92.3303 mo
54.283 90.5303 li
54.763 90.7703 55.263 90.9503 55.783 91.0703 cv
56.283 91.1903 56.783 91.2503 57.283 91.2503 cv
58.563 91.2503 59.563 90.8303 60.243 89.9503 cv
60.923 89.0703 61.323 87.7503 61.443 85.9503 cv
61.043 86.5103 60.563 86.9503 60.003 87.2503 cv
59.423 87.5503 58.783 87.6903 58.083 87.6903 cv
56.603 87.6903 55.443 87.2503 54.603 86.3703 cv
53.763 85.4903 53.343 84.2903 53.343 82.7503 cv
53.343 81.2703 53.783 80.0703 54.663 79.1503 cv
55.543 78.2503 56.723 77.7903 58.203 77.7903 cv
59.883 77.7903 61.183 78.4503 62.063 79.7303 cv
62.943 81.0303 63.403 82.9103 63.403 85.3503 cv
63.403 87.6703 62.843 89.4903 61.763 90.8503 cv
60.663 92.2103 59.203 92.8903 57.363 92.8903 cv
56.863 92.8903 56.363 92.8303 55.863 92.7503 cv
55.343 92.6703 54.823 92.5303 54.283 92.3303 cv
58.203 86.1503 mo
59.083 86.1503 59.783 85.8503 60.303 85.2503 cv
60.823 84.6503 61.083 83.8103 61.083 82.7503 cv
61.083 81.7103 60.823 80.8703 60.303 80.2703 cv
59.783 79.6703 59.083 79.3503 58.203 79.3503 cv
57.323 79.3503 56.623 79.6703 56.103 80.2703 cv
55.583 80.8703 55.323 81.7103 55.323 82.7503 cv
55.323 83.8103 55.583 84.6503 56.103 85.2503 cv
56.623 85.8503 57.323 86.1503 58.203 86.1503 cv
f
71.8 23.9308 mo
68.3 23.9308 li
f
71.8 23.9308 mo
68.3 23.9308 li
@
35.4831 29.8724 mo
38.7031 29.8724 li
38.7031 18.7524 li
35.2031 19.4524 li
35.2031 17.6524 li
38.6831 16.9524 li
40.6631 16.9524 li
40.6631 29.8724 li
43.8831 29.8724 li
43.8831 31.5324 li
35.4831 31.5324 li
35.4831 29.8724 li
f
47.8632 29.0524 mo
49.9232 29.0524 li
49.9232 31.5324 li
47.8632 31.5324 li
47.8632 29.0524 li
f
58.443 18.2524 mo
57.423 18.2524 56.663 18.7524 56.143 19.7524 cv
55.623 20.7524 55.383 22.2524 55.383 24.2524 cv
55.383 26.2524 55.623 27.7524 56.143 28.7524 cv
56.663 29.7524 57.423 30.2524 58.443 30.2524 cv
59.463 30.2524 60.223 29.7524 60.743 28.7524 cv
61.243 27.7524 61.503 26.2524 61.503 24.2524 cv
61.503 22.2524 61.243 20.7524 60.743 19.7524 cv
60.223 18.7524 59.463 18.2524 58.443 18.2524 cv
58.443 16.6924 mo
60.063 16.6924 61.303 17.3524 62.183 18.6324 cv
63.043 19.9324 63.483 21.8124 63.483 24.2524 cv
63.483 26.7124 63.043 28.5924 62.183 29.8724 cv
61.303 31.1524 60.063 31.7924 58.443 31.7924 cv
56.803 31.7924 55.543 31.1524 54.683 29.8724 cv
53.823 28.5924 53.403 26.7124 53.403 24.2524 cv
53.403 21.8124 53.823 19.9324 54.683 18.6324 cv
55.543 17.3524 56.803 16.6924 58.443 16.6924 cv
f
12.2069 340.652 mo
19.4669 343.332 li
19.4669 337.972 li
12.2069 340.652 li
10.2669 341.772 mo
10.2669 339.532 li
24.8469 333.972 li
24.8469 336.032 li
21.1069 337.352 li
21.1069 343.932 li
24.8469 345.252 li
24.8469 347.332 li
10.2669 341.772 li
f
14.3269 324.052 mo
16.0069 324.052 li
15.7269 324.572 15.5269 325.072 15.3869 325.592 cv
15.2469 326.112 15.1669 326.612 15.1669 327.132 cv
15.1669 328.292 15.5469 329.212 16.2869 329.852 cv
17.0269 330.492 18.0669 330.812 19.3869 330.812 cv
20.7269 330.812 21.7669 330.492 22.5069 329.852 cv
23.2469 329.212 23.6069 328.292 23.6069 327.132 cv
23.6069 326.612 23.5469 326.112 23.4069 325.592 cv
23.2669 325.072 23.0469 324.572 22.7669 324.052 cv
24.4269 324.052 li
24.6669 324.572 24.8469 325.092 24.9469 325.612 cv
25.0469 326.152 25.1069 326.732 25.1069 327.332 cv
25.1069 328.972 24.6069 330.292 23.5669 331.252 cv
22.5469 332.232 21.1469 332.712 19.3869 332.712 cv
17.6069 332.712 16.2069 332.232 15.1869 331.252 cv
14.1669 330.272 13.6469 328.932 13.6469 327.212 cv
13.6469 326.652 13.7069 326.112 13.8269 325.592 cv
13.9469 325.072 14.1069 324.552 14.3269 324.052 cv
f
14.3269 313.052 mo
16.0069 313.052 li
15.7269 313.572 15.5269 314.072 15.3869 314.592 cv
15.2469 315.112 15.1669 315.612 15.1669 316.132 cv
15.1669 317.292 15.5469 318.212 16.2869 318.852 cv
17.0269 319.492 18.0669 319.812 19.3869 319.812 cv
20.7269 319.812 21.7669 319.492 22.5069 318.852 cv
23.2469 318.212 23.6069 317.292 23.6069 316.132 cv
23.6069 315.612 23.5469 315.112 23.4069 314.592 cv
23.2669 314.072 23.0469 313.572 22.7669 313.052 cv
24.4269 313.052 li
24.6669 313.572 24.8469 314.092 24.9469 314.612 cv
25.0469 315.152 25.1069 315.732 25.1069 316.332 cv
25.1069 317.972 24.6069 319.292 23.5669 320.252 cv
22.5469 321.232 21.1469 321.712 19.3869 321.712 cv
17.6069 321.712 16.2069 321.232 15.1869 320.252 cv
14.1669 319.272 13.6469 317.932 13.6469 316.212 cv
13.6469 315.652 13.7069 315.112 13.8269 314.592 cv
13.9469 314.072 14.1069 313.552 14.3269 313.052 cv
f
20.5269 310.112 mo
13.9069 310.112 li
13.9069 308.312 li
20.4669 308.312 li
21.5069 308.312 22.2669 308.112 22.7869 307.712 cv
23.3069 307.312 23.5669 306.712 23.5669 305.892 cv
23.5669 304.932 23.2669 304.152 22.6469 303.592 cv
22.0269 303.032 21.1869 302.752 20.1069 302.752 cv
13.9069 302.752 li
13.9069 300.952 li
24.8469 300.952 li
24.8469 302.752 li
23.1669 302.752 li
23.8469 303.192 24.3269 303.712 24.6469 304.272 cv
24.9469 304.852 25.1069 305.512 25.1069 306.272 cv
25.1069 307.532 24.7269 308.492 23.9469 309.132 cv
23.1869 309.792 22.0469 310.112 20.5269 310.112 cv
13.6469 305.592 mo
13.6469 305.592 li
f
15.5869 290.912 mo
15.4669 291.112 15.3869 291.332 15.3269 291.572 cv
15.2869 291.812 15.2469 292.072 15.2469 292.352 cv
15.2469 293.372 15.5869 294.152 16.2469 294.692 cv
16.9069 295.252 17.8469 295.512 19.0869 295.512 cv
24.8469 295.512 li
24.8469 297.312 li
13.9069 297.312 li
13.9069 295.512 li
15.6069 295.512 li
14.9469 295.152 14.4469 294.652 14.1269 294.052 cv
13.8069 293.452 13.6469 292.712 13.6469 291.832 cv
13.6469 291.712 13.6669 291.572 13.6669 291.412 cv
13.6869 291.272 13.7069 291.112 13.7469 290.912 cv
15.5869 290.912 li
f
19.3469 284.052 mo
19.3469 285.512 19.5269 286.512 19.8469 287.072 cv
20.1869 287.632 20.7469 287.912 21.5469 287.912 cv
22.1869 287.912 22.7069 287.712 23.0669 287.292 cv
23.4469 286.872 23.6269 286.292 23.6269 285.572 cv
23.6269 284.572 23.2869 283.772 22.5669 283.172 cv
21.8669 282.572 20.9269 282.272 19.7469 282.272 cv
19.3469 282.272 li
19.3469 284.052 li
18.6069 280.472 mo
24.8469 280.472 li
24.8469 282.272 li
23.1869 282.272 li
23.8669 282.692 24.3469 283.212 24.6469 283.812 cv
24.9469 284.412 25.1069 285.172 25.1069 286.052 cv
25.1069 287.172 24.8069 288.072 24.1869 288.732 cv
23.5669 289.392 22.7269 289.712 21.6669 289.712 cv
20.4469 289.712 19.5269 289.312 18.8869 288.472 cv
18.2669 287.652 17.9469 286.432 17.9469 284.792 cv
17.9469 282.272 li
17.7669 282.272 li
16.9469 282.272 16.3069 282.552 15.8469 283.092 cv
15.4069 283.632 15.1669 284.392 15.1669 285.372 cv
15.1669 286.012 15.2469 286.612 15.4069 287.212 cv
15.5669 287.812 15.7869 288.372 16.0669 288.912 cv
14.4069 288.912 li
14.1669 288.272 13.9669 287.632 13.8469 287.012 cv
13.7269 286.392 13.6469 285.792 13.6469 285.192 cv
13.6469 283.612 14.0669 282.432 14.8869 281.652 cv
15.7069 280.872 16.9469 280.472 18.6069 280.472 cv
f
14.3269 268.892 mo
16.0069 268.892 li
15.7269 269.412 15.5269 269.912 15.3869 270.432 cv
15.2469 270.952 15.1669 271.452 15.1669 271.972 cv
15.1669 273.132 15.5469 274.052 16.2869 274.692 cv
17.0269 275.332 18.0669 275.652 19.3869 275.652 cv
20.7269 275.652 21.7669 275.332 22.5069 274.692 cv
23.2469 274.052 23.6069 273.132 23.6069 271.972 cv
23.6069 271.452 23.5469 270.952 23.4069 270.432 cv
23.2669 269.912 23.0469 269.412 22.7669 268.892 cv
24.4269 268.892 li
24.6669 269.412 24.8469 269.932 24.9469 270.452 cv
25.0469 270.992 25.1069 271.572 25.1069 272.172 cv
25.1069 273.812 24.6069 275.132 23.5669 276.092 cv
22.5469 277.072 21.1469 277.552 19.3869 277.552 cv
17.6069 277.552 16.2069 277.072 15.1869 276.092 cv
14.1669 275.112 13.6469 273.772 13.6469 272.052 cv
13.6469 271.492 13.7069 270.952 13.8269 270.432 cv
13.9469 269.912 14.1069 269.392 14.3269 268.892 cv
f
25.8469 261.212 mo
27.1269 261.732 27.9869 262.232 28.3869 262.712 cv
28.7869 263.192 28.9869 263.832 28.9869 264.632 cv
28.9869 266.072 li
27.4869 266.072 li
27.4869 265.012 li
27.4869 264.532 27.3669 264.152 27.1269 263.872 cv
26.8869 263.592 26.3469 263.292 25.4669 262.952 cv
24.6669 262.632 li
13.9069 267.052 li
13.9069 265.152 li
22.4669 261.732 li
13.9069 258.312 li
13.9069 256.412 li
25.8469 261.212 li
f
18.0069 240.572 mo
18.1669 240.152 18.4669 239.732 18.9269 239.332 cv
19.4069 238.932 20.0469 238.532 20.8669 238.132 cv
24.8469 236.132 li
24.8469 238.252 li
21.1069 240.112 li
20.1469 240.592 19.4869 241.072 19.1669 241.512 cv
18.8469 241.972 18.6869 242.592 18.6869 243.372 cv
18.6869 245.512 li
24.8469 245.512 li
24.8469 247.492 li
10.2669 247.492 li
10.2669 243.032 li
10.2669 241.372 10.6269 240.132 11.3069 239.312 cv
12.0069 238.492 13.0669 238.072 14.4669 238.072 cv
15.3869 238.072 16.1669 238.292 16.7669 238.712 cv
17.3669 239.152 17.7869 239.772 18.0069 240.572 cv
11.8869 245.512 mo
17.0669 245.512 li
17.0669 243.032 li
17.0669 242.092 16.8469 241.372 16.4069 240.892 cv
15.9669 240.412 15.3269 240.152 14.4669 240.152 cv
13.6269 240.152 12.9869 240.412 12.5469 240.892 cv
12.1069 241.372 11.8869 242.092 11.8869 243.032 cv
11.8869 245.512 li
f
19.3469 228.692 mo
19.3469 230.152 19.5269 231.152 19.8469 231.712 cv
20.1869 232.272 20.7469 232.552 21.5469 232.552 cv
22.1869 232.552 22.7069 232.352 23.0669 231.932 cv
23.4469 231.512 23.6269 230.932 23.6269 230.212 cv
23.6269 229.212 23.2869 228.412 22.5669 227.812 cv
21.8669 227.212 20.9269 226.912 19.7469 226.912 cv
19.3469 226.912 li
19.3469 228.692 li
18.6069 225.112 mo
24.8469 225.112 li
24.8469 226.912 li
23.1869 226.912 li
23.8669 227.332 24.3469 227.852 24.6469 228.452 cv
24.9469 229.052 25.1069 229.812 25.1069 230.692 cv
25.1069 231.812 24.8069 232.712 24.1869 233.372 cv
23.5669 234.032 22.7269 234.352 21.6669 234.352 cv
20.4469 234.352 19.5269 233.952 18.8869 233.112 cv
18.2669 232.292 17.9469 231.072 17.9469 229.432 cv
17.9469 226.912 li
17.7669 226.912 li
16.9469 226.912 16.3069 227.192 15.8469 227.732 cv
15.4069 228.272 15.1669 229.032 15.1669 230.012 cv
15.1669 230.652 15.2469 231.252 15.4069 231.852 cv
15.5669 232.452 15.7869 233.012 16.0669 233.552 cv
14.4069 233.552 li
14.1669 232.912 13.9669 232.272 13.8469 231.652 cv
13.7269 231.032 13.6469 230.432 13.6469 229.832 cv
13.6469 228.252 14.0669 227.072 14.8869 226.292 cv
15.7069 225.512 16.9469 225.112 18.6069 225.112 cv
f
10.8069 219.632 mo
13.9069 219.632 li
13.9069 215.932 li
15.3069 215.932 li
15.3069 219.632 li
21.2469 219.632 li
22.1469 219.632 22.7269 219.512 22.9669 219.272 cv
23.2269 219.032 23.3469 218.532 23.3469 217.772 cv
23.3469 215.932 li
24.8469 215.932 li
24.8469 217.772 li
24.8469 219.172 24.5869 220.132 24.0669 220.652 cv
23.5469 221.172 22.6069 221.432 21.2469 221.432 cv
15.3069 221.432 li
15.3069 222.752 li
13.9069 222.752 li
13.9069 221.432 li
10.8069 221.432 li
10.8069 219.632 li
f
18.9269 204.212 mo
19.8069 204.212 li
19.8069 212.472 li
21.0469 212.392 22.0069 212.032 22.6469 211.352 cv
23.2869 210.692 23.6069 209.772 23.6069 208.572 cv
23.6069 207.892 23.5269 207.212 23.3669 206.572 cv
23.2069 205.932 22.9469 205.272 22.5869 204.632 cv
24.2869 204.632 li
24.5669 205.272 24.7869 205.932 24.9069 206.612 cv
25.0269 207.292 25.1069 207.992 25.1069 208.672 cv
25.1069 210.432 24.6069 211.812 23.6069 212.832 cv
22.6069 213.852 21.2269 214.352 19.4869 214.352 cv
17.7069 214.352 16.2869 213.872 15.2269 212.912 cv
14.1869 211.952 13.6469 210.632 13.6469 208.992 cv
13.6469 207.512 14.1269 206.352 15.0669 205.492 cv
16.0269 204.652 17.3069 204.212 18.9269 204.212 cv
18.4069 206.012 mo
17.4269 206.032 16.6469 206.312 16.0469 206.832 cv
15.4669 207.372 15.1669 208.092 15.1669 208.972 cv
15.1669 209.972 15.4669 210.772 16.0269 211.372 cv
16.5869 211.972 17.3869 212.332 18.4069 212.412 cv
18.4069 206.012 li
f
1.5 lw
2 lc
120.498 511.614 mo
130.336 380.267 li
140.174 324.112 li
150.012 290.644 li
159.85 264.657 li
169.688 255.533 li
179.526 244.182 li
189.364 227.251 li
199.202 208.338 li
209.04 184.537 li
218.878 163.736 li
228.716 149.195 li
238.554 136.663 li
248.392 125.53 li
258.23 113.84 li
268.068 105.639 li
277.906 99.6923 li
287.744 91.2064 li
297.582 85.5583 li
307.421 81.7023 li
317.259 80.4532 li
327.097 77.6563 li
336.935 74.3162 li
346.773 70.7047 li
356.611 67.6226 li
366.449 65.5453 li
376.287 63.4816 li
386.125 61.5671 li
395.963 60.5081 li
405.801 58.6345 li
415.639 57.4261 li
425.477 56.1498 li
435.315 54.86 li
445.153 54.1675 li
454.991 53.3665 li
464.829 52.321 li
474.667 51.4792 li
484.505 51.2484 li
494.343 51.3434 li
504.181 51.4656 li
514.019 50.393 li
523.857 49.8364 li
533.695 50.2029 li
543.533 48.8859 li
553.371 48.017 li
563.209 47.4332 li
573.047 47.3653 li
582.885 46.9579 li
592.723 45.7632 li
602.561 44.9214 li
612.399 44.0931 li
622.237 44.1882 li
632.075 43.1835 li
641.913 42.8712 li
651.751 42.6132 li
661.589 42.2874 li
671.427 42.0837 li
681.265 41.9615 li
691.103 41.5814 li
700.941 41.6085 li
710.779 41.7579 li
720.617 41.8665 li
730.455 41.269 li
740.293 41.5542 li
750.131 41.5542 li
759.969 41.5542 li
769.807 40.6038 li
779.645 37.9562 li
789.483 37.9291 li
799.321 37.834 li
809.159 37.7661 li
818.997 37.7526 li
828.835 37.6982 li
838.673 37.6982 li
848.511 37.6439 li
858.349 37.576 li
868.187 37.5489 li
878.025 37.5217 li
887.863 37.4539 li
897.701 37.4402 li
907.539 37.4131 li
917.378 37.386 li
927.216 37.386 li
937.054 37.3317 li
946.892 37.2637 li
956.73 37.2366 li
966.568 37.2366 li
976.406 37.2502 li
986.244 37.1823 li
996.082 37.1959 li
1005.92 37.1823 li
1015.76 37.1687 li
1025.6 37.1415 li
1035.43 37.1008 li
1045.27 37.0737 li
1055.11 37.0601 li
1064.95 37.033 li
1074.79 37.0058 li
1084.62 37.0193 li
1094.46 36.9786 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
120.498 519.516 mo
130.336 399.092 li
140.174 338.544 li
150.012 302.741 li
159.85 275.003 li
169.688 266.469 li
179.526 254.718 li
189.364 237.264 li
199.202 217.285 li
209.04 193.64 li
218.878 170.505 li
228.716 156.473 li
238.554 142.99 li
248.392 131.87 li
258.23 120.975 li
268.068 112.136 li
277.906 105.822 li
287.744 96.7799 li
297.582 89.4482 li
307.421 86.0878 li
317.259 85.0084 li
327.097 82.6255 li
336.935 79.6522 li
346.773 76.0474 li
356.611 73.1554 li
366.449 71.1392 li
376.287 69.2451 li
386.125 67.6362 li
395.963 66.5364 li
405.801 64.3166 li
415.639 62.9928 li
425.477 61.3024 li
435.315 60.0601 li
445.153 58.777 li
454.991 58.1864 li
464.829 57.1681 li
474.667 56.2109 li
484.505 56.1702 li
494.343 57.0255 li
504.181 56.9441 li
514.019 56.3331 li
523.857 55.5795 li
533.695 56.1091 li
543.533 54.0521 li
553.371 53.38 li
563.209 52.9523 li
573.047 52.9931 li
582.885 52.4025 li
592.723 51.6285 li
602.561 51.2009 li
612.399 50.4473 li
622.237 50.2029 li
632.075 49.4087 li
641.913 49.4087 li
651.751 48.9402 li
661.589 48.7366 li
671.427 48.5737 li
681.265 48.1256 li
691.103 47.8608 li
700.941 47.6368 li
710.779 47.8608 li
720.617 47.6776 li
730.455 47.2906 li
740.293 47.7183 li
750.131 47.6979 li
759.969 47.759 li
769.807 47.087 li
779.645 45.0911 li
789.483 45.0911 li
799.321 45.03 li
809.159 44.9485 li
818.997 44.9282 li
828.835 44.9078 li
838.673 44.9282 li
848.511 44.9485 li
858.349 44.806 li
868.187 44.806 li
878.025 44.806 li
887.863 44.7245 li
897.701 44.7041 li
907.539 44.6227 li
917.378 44.643 li
927.216 44.7041 li
937.054 44.7041 li
946.892 44.6838 li
956.73 44.6227 li
966.568 44.5616 li
976.406 44.5616 li
986.244 44.5005 li
996.082 44.4801 li
1005.92 44.3783 li
1015.76 44.3986 li
1025.6 44.3986 li
1035.43 44.419 li
1045.27 44.3986 li
1055.11 44.3783 li
1064.95 44.3579 li
1074.79 44.3172 li
1084.62 44.2968 li
1094.46 44.3172 li
@
gsave
116.998 523.016 mo
123.998 523.016 li
123.998 516.016 li
116.998 516.016 li
116.998 523.016 li
clp
117.498 522.516 mo
123.498 516.516 li
117.498 516.516 mo
123.498 522.516 li
f
1 lw
0 lc
117.498 522.516 mo
123.498 516.516 li
117.498 516.516 mo
123.498 522.516 li
@
grestore
gsave
126.836 402.593 mo
133.836 402.593 li
133.836 395.592 li
126.836 395.592 li
126.836 402.593 li
clp
127.336 402.092 mo
133.336 396.092 li
127.336 396.092 mo
133.336 402.092 li
f
1 lw
0 lc
127.336 402.092 mo
133.336 396.092 li
127.336 396.092 mo
133.336 402.092 li
@
grestore
gsave
136.674 342.044 mo
143.674 342.044 li
143.674 335.044 li
136.674 335.044 li
136.674 342.044 li
clp
137.174 341.544 mo
143.174 335.544 li
137.174 335.544 mo
143.174 341.544 li
f
1 lw
0 lc
137.174 341.544 mo
143.174 335.544 li
137.174 335.544 mo
143.174 341.544 li
@
grestore
gsave
146.512 306.241 mo
153.512 306.241 li
153.512 299.241 li
146.512 299.241 li
146.512 306.241 li
clp
147.012 305.741 mo
153.012 299.741 li
147.012 299.741 mo
153.012 305.741 li
f
1 lw
0 lc
147.012 305.741 mo
153.012 299.741 li
147.012 299.741 mo
153.012 305.741 li
@
grestore
gsave
156.35 278.502 mo
163.35 278.502 li
163.35 271.503 li
156.35 271.503 li
156.35 278.502 li
clp
156.85 278.003 mo
162.85 272.003 li
156.85 272.003 mo
162.85 278.003 li
f
1 lw
0 lc
156.85 278.003 mo
162.85 272.003 li
156.85 272.003 mo
162.85 278.003 li
@
grestore
gsave
166.188 269.969 mo
173.188 269.969 li
173.188 262.969 li
166.188 262.969 li
166.188 269.969 li
clp
166.688 269.469 mo
172.688 263.469 li
166.688 263.469 mo
172.688 269.469 li
f
1 lw
0 lc
166.688 269.469 mo
172.688 263.469 li
166.688 263.469 mo
172.688 269.469 li
@
grestore
gsave
176.026 258.218 mo
183.026 258.218 li
183.026 251.218 li
176.026 251.218 li
176.026 258.218 li
clp
176.526 257.718 mo
182.526 251.718 li
176.526 251.718 mo
182.526 257.718 li
f
1 lw
0 lc
176.526 257.718 mo
182.526 251.718 li
176.526 251.718 mo
182.526 257.718 li
@
grestore
gsave
185.864 240.764 mo
192.864 240.764 li
192.864 233.764 li
185.864 233.764 li
185.864 240.764 li
clp
186.364 240.264 mo
192.364 234.264 li
186.364 234.264 mo
192.364 240.264 li
f
1 lw
0 lc
186.364 240.264 mo
192.364 234.264 li
186.364 234.264 mo
192.364 240.264 li
@
grestore
gsave
195.702 220.785 mo
202.702 220.785 li
202.702 213.785 li
195.702 213.785 li
195.702 220.785 li
clp
196.202 220.285 mo
202.202 214.285 li
196.202 214.285 mo
202.202 220.285 li
f
1 lw
0 lc
196.202 220.285 mo
202.202 214.285 li
196.202 214.285 mo
202.202 220.285 li
@
grestore
gsave
205.54 197.141 mo
212.54 197.141 li
212.54 190.141 li
205.54 190.141 li
205.54 197.141 li
clp
206.04 196.64 mo
212.04 190.64 li
206.04 190.64 mo
212.04 196.64 li
f
1 lw
0 lc
206.04 196.64 mo
212.04 190.64 li
206.04 190.64 mo
212.04 196.64 li
@
grestore
gsave
215.378 174.005 mo
222.378 174.005 li
222.378 167.005 li
215.378 167.005 li
215.378 174.005 li
clp
215.878 173.505 mo
221.878 167.505 li
215.878 167.505 mo
221.878 173.505 li
f
1 lw
0 lc
215.878 173.505 mo
221.878 167.505 li
215.878 167.505 mo
221.878 173.505 li
@
grestore
gsave
225.216 159.973 mo
232.216 159.973 li
232.216 152.973 li
225.216 152.973 li
225.216 159.973 li
clp
225.716 159.473 mo
231.716 153.473 li
225.716 153.473 mo
231.716 159.473 li
f
1 lw
0 lc
225.716 159.473 mo
231.716 153.473 li
225.716 153.473 mo
231.716 159.473 li
@
grestore
gsave
235.055 146.49 mo
242.054 146.49 li
242.054 139.49 li
235.055 139.49 li
235.055 146.49 li
clp
235.554 145.99 mo
241.554 139.99 li
235.554 139.99 mo
241.554 145.99 li
f
1 lw
0 lc
235.554 145.99 mo
241.554 139.99 li
235.554 139.99 mo
241.554 145.99 li
@
grestore
gsave
244.892 135.371 mo
251.893 135.371 li
251.893 128.371 li
244.892 128.371 li
244.892 135.371 li
clp
245.392 134.87 mo
251.392 128.87 li
245.392 128.87 mo
251.392 134.87 li
f
1 lw
0 lc
245.392 134.87 mo
251.392 128.87 li
245.392 128.87 mo
251.392 134.87 li
@
grestore
gsave
254.73 124.475 mo
261.73 124.475 li
261.73 117.475 li
254.73 117.475 li
254.73 124.475 li
clp
255.23 123.975 mo
261.23 117.975 li
255.23 117.975 mo
261.23 123.975 li
f
1 lw
0 lc
255.23 123.975 mo
261.23 117.975 li
255.23 117.975 mo
261.23 123.975 li
@
grestore
gsave
264.568 115.636 mo
271.568 115.636 li
271.568 108.636 li
264.568 108.636 li
264.568 115.636 li
clp
265.068 115.136 mo
271.068 109.136 li
265.068 109.136 mo
271.068 115.136 li
f
1 lw
0 lc
265.068 115.136 mo
271.068 109.136 li
265.068 109.136 mo
271.068 115.136 li
@
grestore
gsave
274.406 109.322 mo
281.406 109.322 li
281.406 102.322 li
274.406 102.322 li
274.406 109.322 li
clp
274.906 108.822 mo
280.906 102.822 li
274.906 102.822 mo
280.906 108.822 li
f
1 lw
0 lc
274.906 108.822 mo
280.906 102.822 li
274.906 102.822 mo
280.906 108.822 li
@
grestore
gsave
284.244 100.28 mo
291.244 100.28 li
291.244 93.2799 li
284.244 93.2799 li
284.244 100.28 li
clp
284.744 99.7799 mo
290.744 93.7799 li
284.744 93.7799 mo
290.744 99.7799 li
f
1 lw
0 lc
284.744 99.7799 mo
290.744 93.7799 li
284.744 93.7799 mo
290.744 99.7799 li
@
grestore
gsave
294.083 92.948 mo
301.082 92.948 li
301.082 85.9481 li
294.083 85.9481 li
294.083 92.948 li
clp
294.582 92.4482 mo
300.582 86.4482 li
294.582 86.4482 mo
300.582 92.4482 li
f
1 lw
0 lc
294.582 92.4482 mo
300.582 86.4482 li
294.582 86.4482 mo
300.582 92.4482 li
@
grestore
gsave
303.921 89.5877 mo
310.921 89.5877 li
310.921 82.5877 li
303.921 82.5877 li
303.921 89.5877 li
clp
304.42 89.0878 mo
310.42 83.0878 li
304.42 83.0878 mo
310.42 89.0878 li
f
1 lw
0 lc
304.42 89.0878 mo
310.42 83.0878 li
304.42 83.0878 mo
310.42 89.0878 li
@
grestore
gsave
313.758 88.5083 mo
320.759 88.5083 li
320.759 81.5083 li
313.758 81.5083 li
313.758 88.5083 li
clp
314.258 88.0084 mo
320.258 82.0084 li
314.258 82.0084 mo
320.258 88.0084 li
f
1 lw
0 lc
314.258 88.0084 mo
320.258 82.0084 li
314.258 82.0084 mo
320.258 88.0084 li
@
grestore
gsave
323.596 86.1256 mo
330.596 86.1256 li
330.596 79.1257 li
323.596 79.1257 li
323.596 86.1256 li
clp
324.096 85.6255 mo
330.096 79.6255 li
324.096 79.6255 mo
330.096 85.6255 li
f
1 lw
0 lc
324.096 85.6255 mo
330.096 79.6255 li
324.096 79.6255 mo
330.096 85.6255 li
@
grestore
gsave
333.434 83.1522 mo
340.434 83.1522 li
340.434 76.1522 li
333.434 76.1522 li
333.434 83.1522 li
clp
333.934 82.6521 mo
339.934 76.6521 li
333.934 76.6521 mo
339.934 82.6521 li
f
1 lw
0 lc
333.934 82.6521 mo
339.934 76.6521 li
333.934 76.6521 mo
339.934 82.6521 li
@
grestore
gsave
343.272 79.5472 mo
350.272 79.5472 li
350.272 72.5472 li
343.272 72.5472 li
343.272 79.5472 li
clp
343.772 79.0473 mo
349.772 73.0473 li
343.772 73.0473 mo
349.772 79.0473 li
f
1 lw
0 lc
343.772 79.0473 mo
349.772 73.0473 li
343.772 73.0473 mo
349.772 79.0473 li
@
grestore
gsave
353.111 76.6554 mo
360.111 76.6554 li
360.111 69.6555 li
353.111 69.6555 li
353.111 76.6554 li
clp
353.611 76.1553 mo
359.611 70.1553 li
353.611 70.1553 mo
359.611 76.1553 li
f
1 lw
0 lc
353.611 76.1553 mo
359.611 70.1553 li
353.611 70.1553 mo
359.611 76.1553 li
@
grestore
gsave
362.949 74.6392 mo
369.949 74.6392 li
369.949 67.6393 li
362.949 67.6393 li
362.949 74.6392 li
clp
363.449 74.1391 mo
369.449 68.1391 li
363.449 68.1391 mo
369.449 74.1391 li
f
1 lw
0 lc
363.449 74.1391 mo
369.449 68.1391 li
363.449 68.1391 mo
369.449 74.1391 li
@
grestore
gsave
372.787 72.7452 mo
379.787 72.7452 li
379.787 65.7452 li
372.787 65.7452 li
372.787 72.7452 li
clp
373.287 72.2451 mo
379.287 66.2451 li
373.287 66.2451 mo
379.287 72.2451 li
f
1 lw
0 lc
373.287 72.2451 mo
379.287 66.2451 li
373.287 66.2451 mo
379.287 72.2451 li
@
grestore
gsave
382.624 71.1363 mo
389.625 71.1363 li
389.625 64.136 li
382.624 64.136 li
382.624 71.1363 li
clp
383.125 70.6362 mo
389.125 64.6362 li
383.125 64.6362 mo
389.125 70.6362 li
f
1 lw
0 lc
383.125 70.6362 mo
389.125 64.6362 li
383.125 64.6362 mo
389.125 70.6362 li
@
grestore
gsave
392.462 70.0365 mo
399.462 70.0365 li
399.462 63.0365 li
392.462 63.0365 li
392.462 70.0365 li
clp
392.963 69.5364 mo
398.963 63.5364 li
392.963 63.5364 mo
398.963 69.5364 li
f
1 lw
0 lc
392.963 69.5364 mo
398.963 63.5364 li
392.963 63.5364 mo
398.963 69.5364 li
@
grestore
gsave
402.301 67.8165 mo
409.3 67.8165 li
409.3 60.8165 li
402.301 60.8165 li
402.301 67.8165 li
clp
402.801 67.3165 mo
408.801 61.3165 li
402.801 61.3165 mo
408.801 67.3165 li
f
1 lw
0 lc
402.801 67.3165 mo
408.801 61.3165 li
402.801 61.3165 mo
408.801 67.3165 li
@
grestore
gsave
412.139 66.4927 mo
419.138 66.4927 li
419.138 59.4928 li
412.139 59.4928 li
412.139 66.4927 li
clp
412.639 65.9927 mo
418.639 59.9927 li
412.639 59.9927 mo
418.639 65.9927 li
f
1 lw
0 lc
412.639 65.9927 mo
418.639 59.9927 li
412.639 59.9927 mo
418.639 65.9927 li
@
grestore
gsave
421.977 64.8022 mo
428.977 64.8022 li
428.977 57.8022 li
421.977 57.8022 li
421.977 64.8022 li
clp
422.477 64.3023 mo
428.477 58.3023 li
422.477 58.3023 mo
428.477 64.3023 li
f
1 lw
0 lc
422.477 64.3023 mo
428.477 58.3023 li
422.477 58.3023 mo
428.477 64.3023 li
@
grestore
gsave
431.815 63.5601 mo
438.815 63.5601 li
438.815 56.5599 li
431.815 56.5599 li
431.815 63.5601 li
clp
432.315 63.06 mo
438.315 57.06 li
432.315 57.06 mo
438.315 63.06 li
f
1 lw
0 lc
432.315 63.06 mo
438.315 57.06 li
432.315 57.06 mo
438.315 63.06 li
@
grestore
gsave
441.653 62.2769 mo
448.653 62.2769 li
448.653 55.277 li
441.653 55.277 li
441.653 62.2769 li
clp
442.153 61.7769 mo
448.153 55.7769 li
442.153 55.7769 mo
448.153 61.7769 li
f
1 lw
0 lc
442.153 61.7769 mo
448.153 55.7769 li
442.153 55.7769 mo
448.153 61.7769 li
@
grestore
gsave
451.491 61.6862 mo
458.491 61.6862 li
458.491 54.6862 li
451.491 54.6862 li
451.491 61.6862 li
clp
451.991 61.1863 mo
457.991 55.1863 li
451.991 55.1863 mo
457.991 61.1863 li
f
1 lw
0 lc
451.991 61.1863 mo
457.991 55.1863 li
451.991 55.1863 mo
457.991 61.1863 li
@
grestore
gsave
461.329 60.668 mo
468.329 60.668 li
468.329 53.6681 li
461.329 53.6681 li
461.329 60.668 li
clp
461.829 60.168 mo
467.829 54.168 li
461.829 54.168 mo
467.829 60.168 li
f
1 lw
0 lc
461.829 60.168 mo
467.829 54.168 li
461.829 54.168 mo
467.829 60.168 li
@
grestore
gsave
471.167 59.7108 mo
478.167 59.7108 li
478.167 52.7109 li
471.167 52.7109 li
471.167 59.7108 li
clp
471.667 59.2108 mo
477.667 53.2108 li
471.667 53.2108 mo
477.667 59.2108 li
f
1 lw
0 lc
471.667 59.2108 mo
477.667 53.2108 li
471.667 53.2108 mo
477.667 59.2108 li
@
grestore
gsave
481.005 59.67 mo
488.005 59.67 li
488.005 52.67 li
481.005 52.67 li
481.005 59.67 li
clp
481.505 59.17 mo
487.505 53.17 li
481.505 53.17 mo
487.505 59.17 li
f
1 lw
0 lc
481.505 59.17 mo
487.505 53.17 li
481.505 53.17 mo
487.505 59.17 li
@
grestore
gsave
490.843 60.5255 mo
497.843 60.5255 li
497.843 53.5255 li
490.843 53.5255 li
490.843 60.5255 li
clp
491.343 60.0254 mo
497.343 54.0254 li
491.343 54.0254 mo
497.343 60.0254 li
f
1 lw
0 lc
491.343 60.0254 mo
497.343 54.0254 li
491.343 54.0254 mo
497.343 60.0254 li
@
grestore
gsave
500.681 60.4438 mo
507.681 60.4438 li
507.681 53.4438 li
500.681 53.4438 li
500.681 60.4438 li
clp
501.181 59.9439 mo
507.181 53.9439 li
501.181 53.9439 mo
507.181 59.9439 li
f
1 lw
0 lc
501.181 59.9439 mo
507.181 53.9439 li
501.181 53.9439 mo
507.181 59.9439 li
@
grestore
gsave
510.519 59.833 mo
517.519 59.833 li
517.519 52.833 li
510.519 52.833 li
510.519 59.833 li
clp
511.019 59.3329 mo
517.019 53.3329 li
511.019 53.3329 mo
517.019 59.3329 li
f
1 lw
0 lc
511.019 59.3329 mo
517.019 53.3329 li
511.019 53.3329 mo
517.019 59.3329 li
@
grestore
gsave
520.357 59.0792 mo
527.357 59.0792 li
527.357 52.0793 li
520.357 52.0793 li
520.357 59.0792 li
clp
520.857 58.5794 mo
526.857 52.5794 li
520.857 52.5794 mo
526.857 58.5794 li
f
1 lw
0 lc
520.857 58.5794 mo
526.857 52.5794 li
520.857 52.5794 mo
526.857 58.5794 li
@
grestore
gsave
530.195 59.6091 mo
537.195 59.6091 li
537.195 52.6088 li
530.195 52.6088 li
530.195 59.6091 li
clp
530.695 59.1089 mo
536.695 53.1089 li
530.695 53.1089 mo
536.695 59.1089 li
f
1 lw
0 lc
530.695 59.1089 mo
536.695 53.1089 li
530.695 53.1089 mo
536.695 59.1089 li
@
grestore
gsave
540.033 57.552 mo
547.033 57.552 li
547.033 50.5521 li
540.033 50.5521 li
540.033 57.552 li
clp
540.533 57.052 mo
546.533 51.052 li
540.533 51.052 mo
546.533 57.052 li
f
1 lw
0 lc
540.533 57.052 mo
546.533 51.052 li
540.533 51.052 mo
546.533 57.052 li
@
grestore
gsave
549.871 56.88 mo
556.871 56.88 li
556.871 49.88 li
549.871 49.88 li
549.871 56.88 li
clp
550.371 56.3799 mo
556.371 50.3799 li
550.371 50.3799 mo
556.371 56.3799 li
f
1 lw
0 lc
550.371 56.3799 mo
556.371 50.3799 li
550.371 50.3799 mo
556.371 56.3799 li
@
grestore
gsave
559.709 56.4522 mo
566.709 56.4522 li
566.709 49.4523 li
559.709 49.4523 li
559.709 56.4522 li
clp
560.209 55.9523 mo
566.209 49.9523 li
560.209 49.9523 mo
566.209 55.9523 li
f
1 lw
0 lc
560.209 55.9523 mo
566.209 49.9523 li
560.209 49.9523 mo
566.209 55.9523 li
@
grestore
gsave
569.547 56.4931 mo
576.547 56.4931 li
576.547 49.4931 li
569.547 49.4931 li
569.547 56.4931 li
clp
570.047 55.993 mo
576.047 49.993 li
570.047 49.993 mo
576.047 55.993 li
f
1 lw
0 lc
570.047 55.993 mo
576.047 49.993 li
570.047 49.993 mo
576.047 55.993 li
@
grestore
gsave
579.385 55.9023 mo
586.385 55.9023 li
586.385 48.9024 li
579.385 48.9024 li
579.385 55.9023 li
clp
579.885 55.4023 mo
585.885 49.4023 li
579.885 49.4023 mo
585.885 55.4023 li
f
1 lw
0 lc
579.885 55.4023 mo
585.885 49.4023 li
579.885 49.4023 mo
585.885 55.4023 li
@
grestore
gsave
589.223 55.1285 mo
596.223 55.1285 li
596.223 48.1286 li
589.223 48.1286 li
589.223 55.1285 li
clp
589.723 54.6284 mo
595.723 48.6284 li
589.723 48.6284 mo
595.723 54.6284 li
f
1 lw
0 lc
589.723 54.6284 mo
595.723 48.6284 li
589.723 48.6284 mo
595.723 54.6284 li
@
grestore
gsave
599.061 54.7008 mo
606.061 54.7008 li
606.061 47.7008 li
599.061 47.7008 li
599.061 54.7008 li
clp
599.561 54.2007 mo
605.561 48.2007 li
599.561 48.2007 mo
605.561 54.2007 li
f
1 lw
0 lc
599.561 54.2007 mo
605.561 48.2007 li
599.561 48.2007 mo
605.561 54.2007 li
@
grestore
gsave
608.899 53.9474 mo
615.899 53.9474 li
615.899 46.9471 li
608.899 46.9471 li
608.899 53.9474 li
clp
609.399 53.4472 mo
615.399 47.4472 li
609.399 47.4472 mo
615.399 53.4472 li
f
1 lw
0 lc
609.399 53.4472 mo
615.399 47.4472 li
609.399 47.4472 mo
615.399 53.4472 li
@
grestore
gsave
618.737 53.7027 mo
625.737 53.7027 li
625.737 46.7028 li
618.737 46.7028 li
618.737 53.7027 li
clp
619.237 53.2028 mo
625.237 47.2028 li
619.237 47.2028 mo
625.237 53.2028 li
f
1 lw
0 lc
619.237 53.2028 mo
625.237 47.2028 li
619.237 47.2028 mo
625.237 53.2028 li
@
grestore
gsave
628.575 52.9085 mo
635.575 52.9085 li
635.575 45.9085 li
628.575 45.9085 li
628.575 52.9085 li
clp
629.075 52.4086 mo
635.075 46.4086 li
629.075 46.4086 mo
635.075 52.4086 li
f
1 lw
0 lc
629.075 52.4086 mo
635.075 46.4086 li
629.075 46.4086 mo
635.075 52.4086 li
@
grestore
gsave
638.413 52.9085 mo
645.413 52.9085 li
645.413 45.9085 li
638.413 45.9085 li
638.413 52.9085 li
clp
638.913 52.4086 mo
644.913 46.4086 li
638.913 46.4086 mo
644.913 52.4086 li
f
1 lw
0 lc
638.913 52.4086 mo
644.913 46.4086 li
638.913 46.4086 mo
644.913 52.4086 li
@
grestore
gsave
648.251 52.4402 mo
655.251 52.4402 li
655.251 45.44 li
648.251 45.44 li
648.251 52.4402 li
clp
648.751 51.9401 mo
654.751 45.9401 li
648.751 45.9401 mo
654.751 51.9401 li
f
1 lw
0 lc
648.751 51.9401 mo
654.751 45.9401 li
648.751 45.9401 mo
654.751 51.9401 li
@
grestore
gsave
658.089 52.2364 mo
665.089 52.2364 li
665.089 45.2365 li
658.089 45.2365 li
658.089 52.2364 li
clp
658.589 51.7365 mo
664.589 45.7365 li
658.589 45.7365 mo
664.589 51.7365 li
f
1 lw
0 lc
658.589 51.7365 mo
664.589 45.7365 li
658.589 45.7365 mo
664.589 51.7365 li
@
grestore
gsave
667.927 52.0734 mo
674.927 52.0734 li
674.927 45.0735 li
667.927 45.0735 li
667.927 52.0734 li
clp
668.427 51.5735 mo
674.427 45.5735 li
668.427 45.5735 mo
674.427 51.5735 li
f
1 lw
0 lc
668.427 51.5735 mo
674.427 45.5735 li
668.427 45.5735 mo
674.427 51.5735 li
@
grestore
gsave
677.765 51.6256 mo
684.765 51.6256 li
684.765 44.6256 li
677.765 44.6256 li
677.765 51.6256 li
clp
678.265 51.1255 mo
684.265 45.1255 li
678.265 45.1255 mo
684.265 51.1255 li
f
1 lw
0 lc
678.265 51.1255 mo
684.265 45.1255 li
678.265 45.1255 mo
684.265 51.1255 li
@
grestore
gsave
687.603 51.3609 mo
694.603 51.3609 li
694.603 44.3606 li
687.603 44.3606 li
687.603 51.3609 li
clp
688.103 50.8607 mo
694.103 44.8607 li
688.103 44.8607 mo
694.103 50.8607 li
f
1 lw
0 lc
688.103 50.8607 mo
694.103 44.8607 li
688.103 44.8607 mo
694.103 50.8607 li
@
grestore
gsave
697.441 51.1366 mo
704.441 51.1366 li
704.441 44.1367 li
697.441 44.1367 li
697.441 51.1366 li
clp
697.941 50.6367 mo
703.941 44.6367 li
697.941 44.6367 mo
703.941 50.6367 li
f
1 lw
0 lc
697.941 50.6367 mo
703.941 44.6367 li
697.941 44.6367 mo
703.941 50.6367 li
@
grestore
gsave
707.279 51.3609 mo
714.279 51.3609 li
714.279 44.3606 li
707.279 44.3606 li
707.279 51.3609 li
clp
707.779 50.8607 mo
713.779 44.8607 li
707.779 44.8607 mo
713.779 50.8607 li
f
1 lw
0 lc
707.779 50.8607 mo
713.779 44.8607 li
707.779 44.8607 mo
713.779 50.8607 li
@
grestore
gsave
717.117 51.1774 mo
724.117 51.1774 li
724.117 44.1775 li
717.117 44.1775 li
717.117 51.1774 li
clp
717.617 50.6774 mo
723.617 44.6774 li
717.617 44.6774 mo
723.617 50.6774 li
f
1 lw
0 lc
717.617 50.6774 mo
723.617 44.6774 li
717.617 44.6774 mo
723.617 50.6774 li
@
grestore
gsave
726.955 50.7905 mo
733.955 50.7905 li
733.955 43.7906 li
726.955 43.7906 li
726.955 50.7905 li
clp
727.455 50.2905 mo
733.455 44.2905 li
727.455 44.2905 mo
733.455 50.2905 li
f
1 lw
0 lc
727.455 50.2905 mo
733.455 44.2905 li
727.455 44.2905 mo
733.455 50.2905 li
@
grestore
gsave
736.793 51.2183 mo
743.793 51.2183 li
743.793 44.218 li
736.793 44.218 li
736.793 51.2183 li
clp
737.293 50.7181 mo
743.293 44.7181 li
737.293 44.7181 mo
743.293 50.7181 li
f
1 lw
0 lc
737.293 50.7181 mo
743.293 44.7181 li
737.293 44.7181 mo
743.293 50.7181 li
@
grestore
gsave
746.631 51.1979 mo
753.631 51.1979 li
753.631 44.1979 li
746.631 44.1979 li
746.631 51.1979 li
clp
747.131 50.6978 mo
753.131 44.6978 li
747.131 44.6978 mo
753.131 50.6978 li
f
1 lw
0 lc
747.131 50.6978 mo
753.131 44.6978 li
747.131 44.6978 mo
753.131 50.6978 li
@
grestore
gsave
756.469 51.2588 mo
763.469 51.2588 li
763.469 44.2588 li
756.469 44.2588 li
756.469 51.2588 li
clp
756.969 50.7589 mo
762.969 44.7589 li
756.969 44.7589 mo
762.969 50.7589 li
f
1 lw
0 lc
756.969 50.7589 mo
762.969 44.7589 li
756.969 44.7589 mo
762.969 50.7589 li
@
grestore
gsave
766.307 50.5867 mo
773.307 50.5867 li
773.307 43.5868 li
766.307 43.5868 li
766.307 50.5867 li
clp
766.807 50.0868 mo
772.807 44.0868 li
766.807 44.0868 mo
772.807 50.0868 li
f
1 lw
0 lc
766.807 50.0868 mo
772.807 44.0868 li
766.807 44.0868 mo
772.807 50.0868 li
@
grestore
gsave
776.145 48.5909 mo
783.145 48.5909 li
783.145 41.591 li
776.145 41.591 li
776.145 48.5909 li
clp
776.645 48.0909 mo
782.645 42.0909 li
776.645 42.0909 mo
782.645 48.0909 li
f
1 lw
0 lc
776.645 48.0909 mo
782.645 42.0909 li
776.645 42.0909 mo
782.645 48.0909 li
@
grestore
gsave
785.983 48.5909 mo
792.983 48.5909 li
792.983 41.591 li
785.983 41.591 li
785.983 48.5909 li
clp
786.483 48.0909 mo
792.483 42.0909 li
786.483 42.0909 mo
792.483 48.0909 li
f
1 lw
0 lc
786.483 48.0909 mo
792.483 42.0909 li
786.483 42.0909 mo
792.483 48.0909 li
@
grestore
gsave
795.821 48.53 mo
802.821 48.53 li
802.821 41.5297 li
795.821 41.5297 li
795.821 48.53 li
clp
796.321 48.0298 mo
802.321 42.0298 li
796.321 42.0298 mo
802.321 48.0298 li
f
1 lw
0 lc
796.321 48.0298 mo
802.321 42.0298 li
796.321 42.0298 mo
802.321 48.0298 li
@
grestore
gsave
805.659 48.4483 mo
812.659 48.4483 li
812.659 41.4484 li
805.659 41.4484 li
805.659 48.4483 li
clp
806.159 47.9484 mo
812.159 41.9484 li
806.159 41.9484 mo
812.159 47.9484 li
f
1 lw
0 lc
806.159 47.9484 mo
812.159 41.9484 li
806.159 41.9484 mo
812.159 47.9484 li
@
grestore
gsave
815.497 48.4279 mo
822.497 48.4279 li
822.497 41.428 li
815.497 41.428 li
815.497 48.4279 li
clp
815.997 47.928 mo
821.997 41.928 li
815.997 41.928 mo
821.997 47.928 li
f
1 lw
0 lc
815.997 47.928 mo
821.997 41.928 li
815.997 41.928 mo
821.997 47.928 li
@
grestore
gsave
825.335 48.4075 mo
832.335 48.4075 li
832.335 41.4076 li
825.335 41.4076 li
825.335 48.4075 li
clp
825.835 47.9076 mo
831.835 41.9076 li
825.835 41.9076 mo
831.835 47.9076 li
f
1 lw
0 lc
825.835 47.9076 mo
831.835 41.9076 li
825.835 41.9076 mo
831.835 47.9076 li
@
grestore
gsave
835.173 48.4279 mo
842.173 48.4279 li
842.173 41.428 li
835.173 41.428 li
835.173 48.4279 li
clp
835.673 47.928 mo
841.673 41.928 li
835.673 41.928 mo
841.673 47.928 li
f
1 lw
0 lc
835.673 47.928 mo
841.673 41.928 li
835.673 41.928 mo
841.673 47.928 li
@
grestore
gsave
845.011 48.4483 mo
852.011 48.4483 li
852.011 41.4484 li
845.011 41.4484 li
845.011 48.4483 li
clp
845.511 47.9484 mo
851.511 41.9484 li
845.511 41.9484 mo
851.511 47.9484 li
f
1 lw
0 lc
845.511 47.9484 mo
851.511 41.9484 li
845.511 41.9484 mo
851.511 47.9484 li
@
grestore
gsave
854.849 48.3058 mo
861.849 48.3058 li
861.849 41.3058 li
854.849 41.3058 li
854.849 48.3058 li
clp
855.349 47.8058 mo
861.349 41.8058 li
855.349 41.8058 mo
861.349 47.8058 li
f
1 lw
0 lc
855.349 47.8058 mo
861.349 41.8058 li
855.349 41.8058 mo
861.349 47.8058 li
@
grestore
gsave
864.687 48.3058 mo
871.687 48.3058 li
871.687 41.3058 li
864.687 41.3058 li
864.687 48.3058 li
clp
865.187 47.8058 mo
871.187 41.8058 li
865.187 41.8058 mo
871.187 47.8058 li
f
1 lw
0 lc
865.187 47.8058 mo
871.187 41.8058 li
865.187 41.8058 mo
871.187 47.8058 li
@
grestore
gsave
874.525 48.3058 mo
881.525 48.3058 li
881.525 41.3058 li
874.525 41.3058 li
874.525 48.3058 li
clp
875.025 47.8058 mo
881.025 41.8058 li
875.025 41.8058 mo
881.025 47.8058 li
f
1 lw
0 lc
875.025 47.8058 mo
881.025 41.8058 li
875.025 41.8058 mo
881.025 47.8058 li
@
grestore
gsave
884.363 48.2244 mo
891.363 48.2244 li
891.363 41.2241 li
884.363 41.2241 li
884.363 48.2244 li
clp
884.863 47.7243 mo
890.863 41.7243 li
884.863 41.7243 mo
890.863 47.7243 li
f
1 lw
0 lc
884.863 47.7243 mo
890.863 41.7243 li
884.863 41.7243 mo
890.863 47.7243 li
@
grestore
gsave
894.201 48.204 mo
901.201 48.204 li
901.201 41.2041 li
894.201 41.2041 li
894.201 48.204 li
clp
894.701 47.7039 mo
900.701 41.7039 li
894.701 41.7039 mo
900.701 47.7039 li
f
1 lw
0 lc
894.701 47.7039 mo
900.701 41.7039 li
894.701 41.7039 mo
900.701 47.7039 li
@
grestore
gsave
904.039 48.1223 mo
911.039 48.1223 li
911.039 41.1224 li
904.039 41.1224 li
904.039 48.1223 li
clp
904.539 47.6224 mo
910.539 41.6224 li
904.539 41.6224 mo
910.539 47.6224 li
f
1 lw
0 lc
904.539 47.6224 mo
910.539 41.6224 li
904.539 41.6224 mo
910.539 47.6224 li
@
grestore
gsave
913.877 48.1428 mo
920.877 48.1428 li
920.877 41.1428 li
913.877 41.1428 li
913.877 48.1428 li
clp
914.377 47.6428 mo
920.377 41.6428 li
914.377 41.6428 mo
920.377 47.6428 li
f
1 lw
0 lc
914.377 47.6428 mo
920.377 41.6428 li
914.377 41.6428 mo
920.377 47.6428 li
@
grestore
gsave
923.715 48.204 mo
930.715 48.204 li
930.715 41.2041 li
923.715 41.2041 li
923.715 48.204 li
clp
924.215 47.7039 mo
930.215 41.7039 li
924.215 41.7039 mo
930.215 47.7039 li
f
1 lw
0 lc
924.215 47.7039 mo
930.215 41.7039 li
924.215 41.7039 mo
930.215 47.7039 li
@
grestore
gsave
933.553 48.204 mo
940.553 48.204 li
940.553 41.2041 li
933.553 41.2041 li
933.553 48.204 li
clp
934.053 47.7039 mo
940.053 41.7039 li
934.053 41.7039 mo
940.053 47.7039 li
f
1 lw
0 lc
934.053 47.7039 mo
940.053 41.7039 li
934.053 41.7039 mo
940.053 47.7039 li
@
grestore
gsave
943.391 48.1836 mo
950.391 48.1836 li
950.391 41.1836 li
943.391 41.1836 li
943.391 48.1836 li
clp
943.891 47.6835 mo
949.891 41.6835 li
943.891 41.6835 mo
949.891 47.6835 li
f
1 lw
0 lc
943.891 47.6835 mo
949.891 41.6835 li
943.891 41.6835 mo
949.891 47.6835 li
@
grestore
gsave
953.229 48.1223 mo
960.229 48.1223 li
960.229 41.1224 li
953.229 41.1224 li
953.229 48.1223 li
clp
953.729 47.6224 mo
959.729 41.6224 li
953.729 41.6224 mo
959.729 47.6224 li
f
1 lw
0 lc
953.729 47.6224 mo
959.729 41.6224 li
953.729 41.6224 mo
959.729 47.6224 li
@
grestore
gsave
963.067 48.0614 mo
970.068 48.0614 li
970.068 41.0615 li
963.067 41.0615 li
963.067 48.0614 li
clp
963.567 47.5613 mo
969.567 41.5613 li
963.567 41.5613 mo
969.567 47.5613 li
f
1 lw
0 lc
963.567 47.5613 mo
969.567 41.5613 li
963.567 41.5613 mo
969.567 47.5613 li
@
grestore
gsave
972.905 48.0614 mo
979.905 48.0614 li
979.905 41.0615 li
972.905 41.0615 li
972.905 48.0614 li
clp
973.405 47.5613 mo
979.405 41.5613 li
973.405 41.5613 mo
979.405 47.5613 li
f
1 lw
0 lc
973.405 47.5613 mo
979.405 41.5613 li
973.405 41.5613 mo
979.405 47.5613 li
@
grestore
gsave
982.743 48.0002 mo
989.743 48.0002 li
989.743 41.0002 li
982.743 41.0002 li
982.743 48.0002 li
clp
983.243 47.5002 mo
989.243 41.5002 li
983.243 41.5002 mo
989.243 47.5002 li
f
1 lw
0 lc
983.243 47.5002 mo
989.243 41.5002 li
983.243 41.5002 mo
989.243 47.5002 li
@
grestore
gsave
992.581 47.9798 mo
999.581 47.9798 li
999.581 40.9798 li
992.581 40.9798 li
992.581 47.9798 li
clp
993.081 47.4799 mo
999.081 41.4799 li
993.081 41.4799 mo
999.081 47.4799 li
f
1 lw
0 lc
993.081 47.4799 mo
999.081 41.4799 li
993.081 41.4799 mo
999.081 47.4799 li
@
grestore
gsave
1002.42 47.878 mo
1009.42 47.878 li
1009.42 40.8781 li
1002.42 40.8781 li
1002.42 47.878 li
clp
1002.92 47.3781 mo
1008.92 41.3781 li
1002.92 41.3781 mo
1008.92 47.3781 li
f
1 lw
0 lc
1002.92 47.3781 mo
1008.92 41.3781 li
1002.92 41.3781 mo
1008.92 47.3781 li
@
grestore
gsave
1012.26 47.8984 mo
1019.26 47.8984 li
1019.26 40.8985 li
1012.26 40.8985 li
1012.26 47.8984 li
clp
1012.76 47.3984 mo
1018.76 41.3984 li
1012.76 41.3984 mo
1018.76 47.3984 li
f
1 lw
0 lc
1012.76 47.3984 mo
1018.76 41.3984 li
1012.76 41.3984 mo
1018.76 47.3984 li
@
grestore
gsave
1022.1 47.8984 mo
1029.1 47.8984 li
1029.1 40.8985 li
1022.1 40.8985 li
1022.1 47.8984 li
clp
1022.6 47.3984 mo
1028.6 41.3984 li
1022.6 41.3984 mo
1028.6 47.3984 li
f
1 lw
0 lc
1022.6 47.3984 mo
1028.6 41.3984 li
1022.6 41.3984 mo
1028.6 47.3984 li
@
grestore
gsave
1031.93 47.9188 mo
1038.93 47.9188 li
1038.93 40.9189 li
1031.93 40.9189 li
1031.93 47.9188 li
clp
1032.43 47.4188 mo
1038.43 41.4188 li
1032.43 41.4188 mo
1038.43 47.4188 li
f
1 lw
0 lc
1032.43 47.4188 mo
1038.43 41.4188 li
1032.43 41.4188 mo
1038.43 47.4188 li
@
grestore
gsave
1041.77 47.8984 mo
1048.77 47.8984 li
1048.77 40.8985 li
1041.77 40.8985 li
1041.77 47.8984 li
clp
1042.27 47.3984 mo
1048.27 41.3984 li
1042.27 41.3984 mo
1048.27 47.3984 li
f
1 lw
0 lc
1042.27 47.3984 mo
1048.27 41.3984 li
1042.27 41.3984 mo
1048.27 47.3984 li
@
grestore
gsave
1051.61 47.878 mo
1058.61 47.878 li
1058.61 40.8781 li
1051.61 40.8781 li
1051.61 47.878 li
clp
1052.11 47.3781 mo
1058.11 41.3781 li
1052.11 41.3781 mo
1058.11 47.3781 li
f
1 lw
0 lc
1052.11 47.3781 mo
1058.11 41.3781 li
1052.11 41.3781 mo
1058.11 47.3781 li
@
grestore
gsave
1061.45 47.8576 mo
1068.45 47.8576 li
1068.45 40.8576 li
1061.45 40.8576 li
1061.45 47.8576 li
clp
1061.95 47.3577 mo
1067.95 41.3577 li
1061.95 41.3577 mo
1067.95 47.3577 li
f
1 lw
0 lc
1061.95 47.3577 mo
1067.95 41.3577 li
1061.95 41.3577 mo
1067.95 47.3577 li
@
grestore
gsave
1071.29 47.8171 mo
1078.29 47.8171 li
1078.29 40.8168 li
1071.29 40.8168 li
1071.29 47.8171 li
clp
1071.79 47.317 mo
1077.79 41.317 li
1071.79 41.317 mo
1077.79 47.317 li
f
1 lw
0 lc
1071.79 47.317 mo
1077.79 41.317 li
1071.79 41.317 mo
1077.79 47.317 li
@
grestore
gsave
1081.12 47.7967 mo
1088.12 47.7967 li
1088.12 40.7967 li
1081.12 40.7967 li
1081.12 47.7967 li
clp
1081.62 47.2966 mo
1087.62 41.2966 li
1081.62 41.2966 mo
1087.62 47.2966 li
f
1 lw
0 lc
1081.62 47.2966 mo
1087.62 41.2966 li
1081.62 41.2966 mo
1087.62 47.2966 li
@
grestore
gsave
1090.96 47.8171 mo
1097.96 47.8171 li
1097.96 40.8168 li
1090.96 40.8168 li
1090.96 47.8171 li
clp
1091.46 47.317 mo
1097.46 41.317 li
1091.46 41.317 mo
1097.46 47.317 li
f
1 lw
0 lc
1091.46 47.317 mo
1097.46 41.317 li
1091.46 41.317 mo
1097.46 47.317 li
@
grestore
120.498 507.976 mo
130.336 375.448 li
140.174 322.917 li
150.012 280.841 li
159.85 241.249 li
169.688 216.199 li
179.526 193.226 li
189.364 167.484 li
199.202 146.412 li
209.04 128.476 li
218.878 114.057 li
228.716 101.281 li
238.554 90.609 li
248.392 84.1055 li
258.23 78.6202 li
268.068 73.4202 li
277.906 69.1705 li
287.744 65.8304 li
297.582 63.1557 li
307.421 61.0648 li
317.259 59.6528 li
327.097 57.8605 li
336.935 56.8965 li
346.773 55.9597 li
356.611 55.1044 li
366.449 53.638 li
376.287 52.7962 li
386.125 51.9001 li
395.963 50.9904 li
405.801 50.1486 li
415.639 49.6599 li
425.477 49.3204 li
435.315 48.6823 li
445.153 48.0577 li
454.991 47.5554 li
464.829 46.9444 li
474.667 46.1841 li
484.505 45.6002 li
494.343 45.1793 li
504.181 44.9214 li
514.019 44.5412 li
523.857 44.0388 li
533.695 43.5772 li
543.533 43.1699 li
553.371 42.7219 li
563.209 42.3824 li
573.047 41.785 li
582.885 41.6221 li
592.723 41.2148 li
602.561 41.1876 li
612.399 41.269 li
622.237 40.5766 li
632.075 39.9521 li
641.913 39.6262 li
651.751 39.4225 li
661.589 38.7844 li
671.427 38.54 li
681.265 38.1191 li
691.103 37.8204 li
700.941 37.4539 li
710.779 37.0465 li
720.617 36.5442 li
730.455 35.9468 li
740.293 35.6888 li
750.131 35.7567 li
759.969 35.5802 li
769.807 35.458 li
779.645 32.7968 li
789.483 32.6068 li
799.321 32.4438 li
809.159 32.3895 li
818.997 32.2809 li
828.835 32.2266 li
838.673 32.1722 li
848.511 32.1044 li
858.349 32.0908 li
868.187 32.05 li
878.025 32.0093 li
887.863 31.9958 li
897.701 31.9143 li
907.539 31.9143 li
917.378 31.8328 li
927.216 31.8057 li
937.054 31.7513 li
946.892 31.6971 li
956.73 31.6699 li
966.568 31.6156 li
976.406 31.6021 li
986.244 31.5613 li
996.082 31.4934 li
1005.92 31.4798 li
1015.76 31.4119 li
1025.6 31.3441 li
1035.43 31.2897 li
1045.27 31.2897 li
1055.11 31.2762 li
1064.95 31.2083 li
1074.79 31.2083 li
1084.62 31.1404 li
1094.46 31.1404 li
1 /0 /CSD get_res sepcs
1 sep
@
120.498 514.547 mo
130.336 388.645 li
140.174 333.799 li
150.012 292.069 li
159.85 250.421 li
169.688 223.68 li
179.526 198.752 li
189.364 172.867 li
199.202 151.198 li
209.04 133.174 li
218.878 118.531 li
228.716 106.739 li
238.554 95.9449 li
248.392 88.6743 li
258.23 82.3405 li
268.068 77.2082 li
277.906 72.7684 li
287.744 69.5914 li
297.582 66.8012 li
307.421 64.3166 li
317.259 63.2779 li
327.097 61.9541 li
336.935 60.5081 li
346.773 59.6935 li
356.611 58.8992 li
366.449 57.5551 li
376.287 56.8015 li
386.125 55.5388 li
395.963 54.989 li
405.801 54.5613 li
415.639 53.9299 li
425.477 53.4819 li
435.315 52.769 li
445.153 52.3414 li
454.991 51.8526 li
464.829 51.3231 li
474.667 50.5695 li
484.505 50.1622 li
494.343 49.6531 li
504.181 49.3476 li
514.019 48.9606 li
523.857 48.5941 li
533.695 48.146 li
543.533 47.8405 li
553.371 47.3925 li
563.209 47.0055 li
573.047 46.8425 li
582.885 46.537 li
592.723 46.2927 li
602.561 46.3538 li
612.399 46.6389 li
622.237 46.1501 li
632.075 45.8446 li
641.913 45.4373 li
651.751 45.3354 li
661.589 45.03 li
671.427 44.9078 li
681.265 44.5819 li
691.103 44.3375 li
700.941 43.9506 li
710.779 43.5637 li
720.617 43.2989 li
730.455 42.8712 li
740.293 42.749 li
750.131 42.7083 li
759.969 42.6064 li
769.807 42.525 li
779.645 40.244 li
789.483 40.2643 li
799.321 40.3051 li
809.159 40.2236 li
818.997 40.2236 li
828.835 40.2032 li
838.673 40.0607 li
848.511 40.1014 li
858.349 39.9996 li
868.187 40.02 li
878.025 39.9182 li
887.863 39.8978 li
897.701 39.8367 li
907.539 39.8163 li
917.378 39.7756 li
927.216 39.8571 li
937.054 39.8163 li
946.892 39.8163 li
956.73 39.7756 li
966.568 39.7756 li
976.406 39.7552 li
986.244 39.7145 li
996.082 39.6941 li
1005.92 39.6737 li
1015.76 39.6941 li
1025.6 39.6534 li
1035.43 39.5719 li
1045.27 39.5515 li
1055.11 39.4904 li
1064.95 39.4497 li
1074.79 39.4701 li
1084.62 39.4497 li
1094.46 39.4293 li
@
gsave
116.998 518.047 mo
123.998 518.047 li
123.998 511.047 li
116.998 511.047 li
116.998 518.047 li
clp
117.498 517.547 mo
123.498 511.547 li
117.498 511.547 mo
123.498 517.547 li
f
1 lw
0 lc
117.498 517.547 mo
123.498 511.547 li
117.498 511.547 mo
123.498 517.547 li
@
grestore
gsave
126.836 392.145 mo
133.836 392.145 li
133.836 385.145 li
126.836 385.145 li
126.836 392.145 li
clp
127.336 391.645 mo
133.336 385.645 li
127.336 385.645 mo
133.336 391.645 li
f
1 lw
0 lc
127.336 391.645 mo
133.336 385.645 li
127.336 385.645 mo
133.336 391.645 li
@
grestore
gsave
136.674 337.299 mo
143.674 337.299 li
143.674 330.299 li
136.674 330.299 li
136.674 337.299 li
clp
137.174 336.799 mo
143.174 330.799 li
137.174 330.799 mo
143.174 336.799 li
f
1 lw
0 lc
137.174 336.799 mo
143.174 330.799 li
137.174 330.799 mo
143.174 336.799 li
@
grestore
gsave
146.512 295.569 mo
153.512 295.569 li
153.512 288.569 li
146.512 288.569 li
146.512 295.569 li
clp
147.012 295.069 mo
153.012 289.069 li
147.012 289.069 mo
153.012 295.069 li
f
1 lw
0 lc
147.012 295.069 mo
153.012 289.069 li
147.012 289.069 mo
153.012 295.069 li
@
grestore
gsave
156.35 253.921 mo
163.35 253.921 li
163.35 246.921 li
156.35 246.921 li
156.35 253.921 li
clp
156.85 253.421 mo
162.85 247.421 li
156.85 247.421 mo
162.85 253.421 li
f
1 lw
0 lc
156.85 253.421 mo
162.85 247.421 li
156.85 247.421 mo
162.85 253.421 li
@
grestore
gsave
166.188 227.18 mo
173.188 227.18 li
173.188 220.18 li
166.188 220.18 li
166.188 227.18 li
clp
166.688 226.68 mo
172.688 220.68 li
166.688 220.68 mo
172.688 226.68 li
f
1 lw
0 lc
166.688 226.68 mo
172.688 220.68 li
166.688 220.68 mo
172.688 226.68 li
@
grestore
gsave
176.026 202.252 mo
183.026 202.252 li
183.026 195.252 li
176.026 195.252 li
176.026 202.252 li
clp
176.526 201.752 mo
182.526 195.752 li
176.526 195.752 mo
182.526 201.752 li
f
1 lw
0 lc
176.526 201.752 mo
182.526 195.752 li
176.526 195.752 mo
182.526 201.752 li
@
grestore
gsave
185.864 176.367 mo
192.864 176.367 li
192.864 169.367 li
185.864 169.367 li
185.864 176.367 li
clp
186.364 175.867 mo
192.364 169.867 li
186.364 169.867 mo
192.364 175.867 li
f
1 lw
0 lc
186.364 175.867 mo
192.364 169.867 li
186.364 169.867 mo
192.364 175.867 li
@
grestore
gsave
195.702 154.698 mo
202.702 154.698 li
202.702 147.698 li
195.702 147.698 li
195.702 154.698 li
clp
196.202 154.198 mo
202.202 148.198 li
196.202 148.198 mo
202.202 154.198 li
f
1 lw
0 lc
196.202 154.198 mo
202.202 148.198 li
196.202 148.198 mo
202.202 154.198 li
@
grestore
gsave
205.54 136.674 mo
212.54 136.674 li
212.54 129.674 li
205.54 129.674 li
205.54 136.674 li
clp
206.04 136.174 mo
212.04 130.174 li
206.04 130.174 mo
212.04 136.174 li
f
1 lw
0 lc
206.04 136.174 mo
212.04 130.174 li
206.04 130.174 mo
212.04 136.174 li
@
grestore
gsave
215.378 122.031 mo
222.378 122.031 li
222.378 115.031 li
215.378 115.031 li
215.378 122.031 li
clp
215.878 121.531 mo
221.878 115.531 li
215.878 115.531 mo
221.878 121.531 li
f
1 lw
0 lc
215.878 121.531 mo
221.878 115.531 li
215.878 115.531 mo
221.878 121.531 li
@
grestore
gsave
225.216 110.239 mo
232.216 110.239 li
232.216 103.239 li
225.216 103.239 li
225.216 110.239 li
clp
225.716 109.739 mo
231.716 103.739 li
225.716 103.739 mo
231.716 109.739 li
f
1 lw
0 lc
225.716 109.739 mo
231.716 103.739 li
225.716 103.739 mo
231.716 109.739 li
@
grestore
gsave
235.055 99.4448 mo
242.054 99.4448 li
242.054 92.4448 li
235.055 92.4448 li
235.055 99.4448 li
clp
235.554 98.9449 mo
241.554 92.9449 li
235.554 92.9449 mo
241.554 98.9449 li
f
1 lw
0 lc
235.554 98.9449 mo
241.554 92.9449 li
235.554 92.9449 mo
241.554 98.9449 li
@
grestore
gsave
244.892 92.1742 mo
251.893 92.1742 li
251.893 85.1743 li
244.892 85.1743 li
244.892 92.1742 li
clp
245.392 91.6743 mo
251.392 85.6743 li
245.392 85.6743 mo
251.392 91.6743 li
f
1 lw
0 lc
245.392 91.6743 mo
251.392 85.6743 li
245.392 85.6743 mo
251.392 91.6743 li
@
grestore
gsave
254.73 85.8404 mo
261.73 85.8404 li
261.73 78.8405 li
254.73 78.8405 li
254.73 85.8404 li
clp
255.23 85.3405 mo
261.23 79.3405 li
255.23 79.3405 mo
261.23 85.3405 li
f
1 lw
0 lc
255.23 85.3405 mo
261.23 79.3405 li
255.23 79.3405 mo
261.23 85.3405 li
@
grestore
gsave
264.568 80.7082 mo
271.568 80.7082 li
271.568 73.7083 li
264.568 73.7083 li
264.568 80.7082 li
clp
265.068 80.2083 mo
271.068 74.2083 li
265.068 74.2083 mo
271.068 80.2083 li
f
1 lw
0 lc
265.068 80.2083 mo
271.068 74.2083 li
265.068 74.2083 mo
271.068 80.2083 li
@
grestore
gsave
274.406 76.2685 mo
281.406 76.2685 li
281.406 69.2686 li
274.406 69.2686 li
274.406 76.2685 li
clp
274.906 75.7686 mo
280.906 69.7686 li
274.906 69.7686 mo
280.906 75.7686 li
f
1 lw
0 lc
274.906 75.7686 mo
280.906 69.7686 li
274.906 69.7686 mo
280.906 75.7686 li
@
grestore
gsave
284.244 73.0916 mo
291.244 73.0916 li
291.244 66.0916 li
284.244 66.0916 li
284.244 73.0916 li
clp
284.744 72.5915 mo
290.744 66.5915 li
284.744 66.5915 mo
290.744 72.5915 li
f
1 lw
0 lc
284.744 72.5915 mo
290.744 66.5915 li
284.744 66.5915 mo
290.744 72.5915 li
@
grestore
gsave
294.083 70.3012 mo
301.082 70.3012 li
301.082 63.3013 li
294.083 63.3013 li
294.083 70.3012 li
clp
294.582 69.8013 mo
300.582 63.8013 li
294.582 63.8013 mo
300.582 69.8013 li
f
1 lw
0 lc
294.582 69.8013 mo
300.582 63.8013 li
294.582 63.8013 mo
300.582 69.8013 li
@
grestore
gsave
303.921 67.8168 mo
310.921 67.8168 li
310.921 60.8169 li
303.921 60.8169 li
303.921 67.8168 li
clp
304.42 67.3167 mo
310.42 61.3167 li
304.42 61.3167 mo
310.42 67.3167 li
f
1 lw
0 lc
304.42 67.3167 mo
310.42 61.3167 li
304.42 61.3167 mo
310.42 67.3167 li
@
grestore
gsave
313.758 66.7782 mo
320.759 66.7782 li
320.759 59.778 li
313.758 59.778 li
313.758 66.7782 li
clp
314.258 66.2781 mo
320.258 60.2781 li
314.258 60.2781 mo
320.258 66.2781 li
f
1 lw
0 lc
314.258 66.2781 mo
320.258 60.2781 li
314.258 60.2781 mo
320.258 66.2781 li
@
grestore
gsave
323.596 65.4542 mo
330.596 65.4542 li
330.596 58.4542 li
323.596 58.4542 li
323.596 65.4542 li
clp
324.096 64.9543 mo
330.096 58.9543 li
324.096 58.9543 mo
330.096 64.9543 li
f
1 lw
0 lc
324.096 64.9543 mo
330.096 58.9543 li
324.096 58.9543 mo
330.096 64.9543 li
@
grestore
gsave
333.434 64.0083 mo
340.434 64.0083 li
340.434 57.0084 li
333.434 57.0084 li
333.434 64.0083 li
clp
333.934 63.5083 mo
339.934 57.5083 li
333.934 57.5083 mo
339.934 63.5083 li
f
1 lw
0 lc
333.934 63.5083 mo
339.934 57.5083 li
333.934 57.5083 mo
339.934 63.5083 li
@
grestore
gsave
343.272 63.1937 mo
350.272 63.1937 li
350.272 56.1937 li
343.272 56.1937 li
343.272 63.1937 li
clp
343.772 62.6937 mo
349.772 56.6937 li
343.772 56.6937 mo
349.772 62.6937 li
f
1 lw
0 lc
343.772 62.6937 mo
349.772 56.6937 li
343.772 56.6937 mo
349.772 62.6937 li
@
grestore
gsave
353.111 62.3994 mo
360.111 62.3994 li
360.111 55.3995 li
353.111 55.3995 li
353.111 62.3994 li
clp
353.611 61.8994 mo
359.611 55.8994 li
353.611 55.8994 mo
359.611 61.8994 li
f
1 lw
0 lc
353.611 61.8994 mo
359.611 55.8994 li
353.611 55.8994 mo
359.611 61.8994 li
@
grestore
gsave
362.949 61.0553 mo
369.949 61.0553 li
369.949 54.0554 li
362.949 54.0554 li
362.949 61.0553 li
clp
363.449 60.5552 mo
369.449 54.5552 li
363.449 54.5552 mo
369.449 60.5552 li
f
1 lw
0 lc
363.449 60.5552 mo
369.449 54.5552 li
363.449 54.5552 mo
369.449 60.5552 li
@
grestore
gsave
372.787 60.3016 mo
379.787 60.3016 li
379.787 53.3016 li
372.787 53.3016 li
372.787 60.3016 li
clp
373.287 59.8017 mo
379.287 53.8017 li
373.287 53.8017 mo
379.287 59.8017 li
f
1 lw
0 lc
373.287 59.8017 mo
379.287 53.8017 li
373.287 53.8017 mo
379.287 59.8017 li
@
grestore
gsave
382.624 59.0391 mo
389.625 59.0391 li
389.625 52.0392 li
382.624 52.0392 li
382.624 59.0391 li
clp
383.125 58.539 mo
389.125 52.539 li
383.125 52.539 mo
389.125 58.539 li
f
1 lw
0 lc
383.125 58.539 mo
389.125 52.539 li
383.125 52.539 mo
389.125 58.539 li
@
grestore
gsave
392.462 58.4892 mo
399.462 58.4892 li
399.462 51.4892 li
392.462 51.4892 li
392.462 58.4892 li
clp
392.963 57.9891 mo
398.963 51.9891 li
392.963 51.9891 mo
398.963 57.9891 li
f
1 lw
0 lc
392.963 57.9891 mo
398.963 51.9891 li
392.963 51.9891 mo
398.963 57.9891 li
@
grestore
gsave
402.301 58.0614 mo
409.3 58.0614 li
409.3 51.0615 li
402.301 51.0615 li
402.301 58.0614 li
clp
402.801 57.5615 mo
408.801 51.5615 li
402.801 51.5615 mo
408.801 57.5615 li
f
1 lw
0 lc
402.801 57.5615 mo
408.801 51.5615 li
402.801 51.5615 mo
408.801 57.5615 li
@
grestore
gsave
412.139 57.4302 mo
419.138 57.4302 li
419.138 50.4303 li
412.139 50.4303 li
412.139 57.4302 li
clp
412.639 56.9301 mo
418.639 50.9301 li
412.639 50.9301 mo
418.639 56.9301 li
f
1 lw
0 lc
412.639 56.9301 mo
418.639 50.9301 li
412.639 50.9301 mo
418.639 56.9301 li
@
grestore
gsave
421.977 56.9821 mo
428.977 56.9821 li
428.977 49.9821 li
421.977 49.9821 li
421.977 56.9821 li
clp
422.477 56.4821 mo
428.477 50.4821 li
422.477 50.4821 mo
428.477 56.4821 li
f
1 lw
0 lc
422.477 56.4821 mo
428.477 50.4821 li
422.477 50.4821 mo
428.477 56.4821 li
@
grestore
gsave
431.815 56.2692 mo
438.815 56.2692 li
438.815 49.2692 li
431.815 49.2692 li
431.815 56.2692 li
clp
432.315 55.7692 mo
438.315 49.7692 li
432.315 49.7692 mo
438.315 55.7692 li
f
1 lw
0 lc
432.315 55.7692 mo
438.315 49.7692 li
432.315 49.7692 mo
438.315 55.7692 li
@
grestore
gsave
441.653 55.8414 mo
448.653 55.8414 li
448.653 48.8415 li
441.653 48.8415 li
441.653 55.8414 li
clp
442.153 55.3416 mo
448.153 49.3416 li
442.153 49.3416 mo
448.153 55.3416 li
f
1 lw
0 lc
442.153 55.3416 mo
448.153 49.3416 li
442.153 49.3416 mo
448.153 55.3416 li
@
grestore
gsave
451.491 55.3528 mo
458.491 55.3528 li
458.491 48.3528 li
451.491 48.3528 li
451.491 55.3528 li
clp
451.991 54.8528 mo
457.991 48.8528 li
451.991 48.8528 mo
457.991 54.8528 li
f
1 lw
0 lc
451.991 54.8528 mo
457.991 48.8528 li
451.991 48.8528 mo
457.991 54.8528 li
@
grestore
gsave
461.329 54.8233 mo
468.329 54.8233 li
468.329 47.8233 li
461.329 47.8233 li
461.329 54.8233 li
clp
461.829 54.3232 mo
467.829 48.3232 li
461.829 48.3232 mo
467.829 54.3232 li
f
1 lw
0 lc
461.829 54.3232 mo
467.829 48.3232 li
461.829 48.3232 mo
467.829 54.3232 li
@
grestore
gsave
471.167 54.0695 mo
478.167 54.0695 li
478.167 47.0696 li
471.167 47.0696 li
471.167 54.0695 li
clp
471.667 53.5697 mo
477.667 47.5697 li
471.667 47.5697 mo
477.667 53.5697 li
f
1 lw
0 lc
471.667 53.5697 mo
477.667 47.5697 li
471.667 47.5697 mo
477.667 53.5697 li
@
grestore
gsave
481.005 53.6622 mo
488.005 53.6622 li
488.005 46.6623 li
481.005 46.6623 li
481.005 53.6622 li
clp
481.505 53.1624 mo
487.505 47.1624 li
481.505 47.1624 mo
487.505 53.1624 li
f
1 lw
0 lc
481.505 53.1624 mo
487.505 47.1624 li
481.505 47.1624 mo
487.505 53.1624 li
@
grestore
gsave
490.843 53.1531 mo
497.843 53.1531 li
497.843 46.1532 li
490.843 46.1532 li
490.843 53.1531 li
clp
491.343 52.6532 mo
497.343 46.6532 li
491.343 46.6532 mo
497.343 52.6532 li
f
1 lw
0 lc
491.343 52.6532 mo
497.343 46.6532 li
491.343 46.6532 mo
497.343 52.6532 li
@
grestore
gsave
500.681 52.8476 mo
507.681 52.8476 li
507.681 45.8476 li
500.681 45.8476 li
500.681 52.8476 li
clp
501.181 52.3477 mo
507.181 46.3477 li
501.181 46.3477 mo
507.181 52.3477 li
f
1 lw
0 lc
501.181 52.3477 mo
507.181 46.3477 li
501.181 46.3477 mo
507.181 52.3477 li
@
grestore
gsave
510.519 52.4607 mo
517.519 52.4607 li
517.519 45.4607 li
510.519 45.4607 li
510.519 52.4607 li
clp
511.019 51.9608 mo
517.019 45.9608 li
511.019 45.9608 mo
517.019 51.9608 li
f
1 lw
0 lc
511.019 51.9608 mo
517.019 45.9608 li
511.019 45.9608 mo
517.019 51.9608 li
@
grestore
gsave
520.357 52.0942 mo
527.357 52.0942 li
527.357 45.0942 li
520.357 45.0942 li
520.357 52.0942 li
clp
520.857 51.5942 mo
526.857 45.5942 li
520.857 45.5942 mo
526.857 51.5942 li
f
1 lw
0 lc
520.857 51.5942 mo
526.857 45.5942 li
520.857 45.5942 mo
526.857 51.5942 li
@
grestore
gsave
530.195 51.646 mo
537.195 51.646 li
537.195 44.6461 li
530.195 44.6461 li
530.195 51.646 li
clp
530.695 51.1461 mo
536.695 45.1461 li
530.695 45.1461 mo
536.695 51.1461 li
f
1 lw
0 lc
530.695 51.1461 mo
536.695 45.1461 li
530.695 45.1461 mo
536.695 51.1461 li
@
grestore
gsave
540.033 51.3408 mo
547.033 51.3408 li
547.033 44.3405 li
540.033 44.3405 li
540.033 51.3408 li
clp
540.533 50.8406 mo
546.533 44.8406 li
540.533 44.8406 mo
546.533 50.8406 li
f
1 lw
0 lc
540.533 50.8406 mo
546.533 44.8406 li
540.533 44.8406 mo
546.533 50.8406 li
@
grestore
gsave
549.871 50.8926 mo
556.871 50.8926 li
556.871 43.8927 li
549.871 43.8927 li
549.871 50.8926 li
clp
550.371 50.3926 mo
556.371 44.3926 li
550.371 44.3926 mo
556.371 50.3926 li
f
1 lw
0 lc
550.371 50.3926 mo
556.371 44.3926 li
550.371 44.3926 mo
556.371 50.3926 li
@
grestore
gsave
559.709 50.5057 mo
566.709 50.5057 li
566.709 43.5058 li
559.709 43.5058 li
559.709 50.5057 li
clp
560.209 50.0056 mo
566.209 44.0056 li
560.209 44.0056 mo
566.209 50.0056 li
f
1 lw
0 lc
560.209 50.0056 mo
566.209 44.0056 li
560.209 44.0056 mo
566.209 50.0056 li
@
grestore
gsave
569.547 50.3427 mo
576.547 50.3427 li
576.547 43.3428 li
569.547 43.3428 li
569.547 50.3427 li
clp
570.047 49.8427 mo
576.047 43.8427 li
570.047 43.8427 mo
576.047 49.8427 li
f
1 lw
0 lc
570.047 49.8427 mo
576.047 43.8427 li
570.047 43.8427 mo
576.047 49.8427 li
@
grestore
gsave
579.385 50.0371 mo
586.385 50.0371 li
586.385 43.0372 li
579.385 43.0372 li
579.385 50.0371 li
clp
579.885 49.5372 mo
585.885 43.5372 li
579.885 43.5372 mo
585.885 49.5372 li
f
1 lw
0 lc
579.885 49.5372 mo
585.885 43.5372 li
579.885 43.5372 mo
585.885 49.5372 li
@
grestore
gsave
589.223 49.7928 mo
596.223 49.7928 li
596.223 42.7929 li
589.223 42.7929 li
589.223 49.7928 li
clp
589.723 49.2928 mo
595.723 43.2928 li
589.723 43.2928 mo
595.723 49.2928 li
f
1 lw
0 lc
589.723 49.2928 mo
595.723 43.2928 li
589.723 43.2928 mo
595.723 49.2928 li
@
grestore
gsave
599.061 49.8541 mo
606.061 49.8541 li
606.061 42.8538 li
599.061 42.8538 li
599.061 49.8541 li
clp
599.561 49.3539 mo
605.561 43.3539 li
599.561 43.3539 mo
605.561 49.3539 li
f
1 lw
0 lc
599.561 49.3539 mo
605.561 43.3539 li
599.561 43.3539 mo
605.561 49.3539 li
@
grestore
gsave
608.899 50.1389 mo
615.899 50.1389 li
615.899 43.1389 li
608.899 43.1389 li
608.899 50.1389 li
clp
609.399 49.639 mo
615.399 43.639 li
609.399 43.639 mo
615.399 49.639 li
f
1 lw
0 lc
609.399 49.639 mo
615.399 43.639 li
609.399 43.639 mo
615.399 49.639 li
@
grestore
gsave
618.737 49.6502 mo
625.737 49.6502 li
625.737 42.6503 li
618.737 42.6503 li
618.737 49.6502 li
clp
619.237 49.1503 mo
625.237 43.1503 li
619.237 43.1503 mo
625.237 49.1503 li
f
1 lw
0 lc
619.237 49.1503 mo
625.237 43.1503 li
619.237 43.1503 mo
625.237 49.1503 li
@
grestore
gsave
628.575 49.3447 mo
635.575 49.3447 li
635.575 42.3447 li
628.575 42.3447 li
628.575 49.3447 li
clp
629.075 48.8448 mo
635.075 42.8448 li
629.075 42.8448 mo
635.075 48.8448 li
f
1 lw
0 lc
629.075 48.8448 mo
635.075 42.8448 li
629.075 42.8448 mo
635.075 48.8448 li
@
grestore
gsave
638.413 48.9373 mo
645.413 48.9373 li
645.413 41.9374 li
638.413 41.9374 li
638.413 48.9373 li
clp
638.913 48.4374 mo
644.913 42.4374 li
638.913 42.4374 mo
644.913 48.4374 li
f
1 lw
0 lc
638.913 48.4374 mo
644.913 42.4374 li
638.913 42.4374 mo
644.913 48.4374 li
@
grestore
gsave
648.251 48.8356 mo
655.251 48.8356 li
655.251 41.8356 li
648.251 41.8356 li
648.251 48.8356 li
clp
648.751 48.3356 mo
654.751 42.3356 li
648.751 42.3356 mo
654.751 48.3356 li
f
1 lw
0 lc
648.751 48.3356 mo
654.751 42.3356 li
648.751 42.3356 mo
654.751 48.3356 li
@
grestore
gsave
658.089 48.53 mo
665.089 48.53 li
665.089 41.5301 li
658.089 41.5301 li
658.089 48.53 li
clp
658.589 48.0302 mo
664.589 42.0302 li
658.589 42.0302 mo
664.589 48.0302 li
f
1 lw
0 lc
658.589 48.0302 mo
664.589 42.0302 li
658.589 42.0302 mo
664.589 48.0302 li
@
grestore
gsave
667.927 48.4078 mo
674.927 48.4078 li
674.927 41.4079 li
667.927 41.4079 li
667.927 48.4078 li
clp
668.427 47.908 mo
674.427 41.908 li
668.427 41.908 mo
674.427 47.908 li
f
1 lw
0 lc
668.427 47.908 mo
674.427 41.908 li
668.427 41.908 mo
674.427 47.908 li
@
grestore
gsave
677.765 48.0822 mo
684.765 48.0822 li
684.765 41.0822 li
677.765 41.0822 li
677.765 48.0822 li
clp
678.265 47.5821 mo
684.265 41.5821 li
678.265 41.5821 mo
684.265 47.5821 li
f
1 lw
0 lc
678.265 47.5821 mo
684.265 41.5821 li
678.265 41.5821 mo
684.265 47.5821 li
@
grestore
gsave
687.603 47.8379 mo
694.603 47.8379 li
694.603 40.8376 li
687.603 40.8376 li
687.603 47.8379 li
clp
688.103 47.3377 mo
694.103 41.3377 li
688.103 41.3377 mo
694.103 47.3377 li
f
1 lw
0 lc
688.103 47.3377 mo
694.103 41.3377 li
688.103 41.3377 mo
694.103 47.3377 li
@
grestore
gsave
697.441 47.4506 mo
704.441 47.4506 li
704.441 40.4507 li
697.441 40.4507 li
697.441 47.4506 li
clp
697.941 46.9507 mo
703.941 40.9507 li
697.941 40.9507 mo
703.941 46.9507 li
f
1 lw
0 lc
697.941 46.9507 mo
703.941 40.9507 li
697.941 40.9507 mo
703.941 46.9507 li
@
grestore
gsave
707.279 47.0637 mo
714.279 47.0637 li
714.279 40.0638 li
707.279 40.0638 li
707.279 47.0637 li
clp
707.779 46.5638 mo
713.779 40.5638 li
707.779 40.5638 mo
713.779 46.5638 li
f
1 lw
0 lc
707.779 46.5638 mo
713.779 40.5638 li
707.779 40.5638 mo
713.779 46.5638 li
@
grestore
gsave
717.117 46.799 mo
724.117 46.799 li
724.117 39.799 li
717.117 39.799 li
717.117 46.799 li
clp
717.617 46.299 mo
723.617 40.299 li
717.617 40.299 mo
723.617 46.299 li
f
1 lw
0 lc
717.617 46.299 mo
723.617 40.299 li
717.617 40.299 mo
723.617 46.299 li
@
grestore
gsave
726.955 46.3712 mo
733.955 46.3712 li
733.955 39.3713 li
726.955 39.3713 li
726.955 46.3712 li
clp
727.455 45.8713 mo
733.455 39.8713 li
727.455 39.8713 mo
733.455 45.8713 li
f
1 lw
0 lc
727.455 45.8713 mo
733.455 39.8713 li
727.455 39.8713 mo
733.455 45.8713 li
@
grestore
gsave
736.793 46.2491 mo
743.793 46.2491 li
743.793 39.2491 li
736.793 39.2491 li
736.793 46.2491 li
clp
737.293 45.7491 mo
743.293 39.7491 li
737.293 39.7491 mo
743.293 45.7491 li
f
1 lw
0 lc
737.293 45.7491 mo
743.293 39.7491 li
737.293 39.7491 mo
743.293 45.7491 li
@
grestore
gsave
746.631 46.2086 mo
753.631 46.2086 li
753.631 39.2083 li
746.631 39.2083 li
746.631 46.2086 li
clp
747.131 45.7084 mo
753.131 39.7084 li
747.131 39.7084 mo
753.131 45.7084 li
f
1 lw
0 lc
747.131 45.7084 mo
753.131 39.7084 li
747.131 39.7084 mo
753.131 45.7084 li
@
grestore
gsave
756.469 46.1065 mo
763.469 46.1065 li
763.469 39.1065 li
756.469 39.1065 li
756.469 46.1065 li
clp
756.969 45.6066 mo
762.969 39.6066 li
756.969 39.6066 mo
762.969 45.6066 li
f
1 lw
0 lc
756.969 45.6066 mo
762.969 39.6066 li
756.969 39.6066 mo
762.969 45.6066 li
@
grestore
gsave
766.307 46.0252 mo
773.307 46.0252 li
773.307 39.0252 li
766.307 39.0252 li
766.307 46.0252 li
clp
766.807 45.5251 mo
772.807 39.5251 li
766.807 39.5251 mo
772.807 45.5251 li
f
1 lw
0 lc
766.807 45.5251 mo
772.807 39.5251 li
766.807 39.5251 mo
772.807 45.5251 li
@
grestore
gsave
776.145 43.7442 mo
783.145 43.7442 li
783.145 36.7443 li
776.145 36.7443 li
776.145 43.7442 li
clp
776.645 43.2441 mo
782.645 37.2441 li
776.645 37.2441 mo
782.645 43.2441 li
f
1 lw
0 lc
776.645 43.2441 mo
782.645 37.2441 li
776.645 37.2441 mo
782.645 43.2441 li
@
grestore
gsave
785.983 43.7646 mo
792.983 43.7646 li
792.983 36.7647 li
785.983 36.7647 li
785.983 43.7646 li
clp
786.483 43.2645 mo
792.483 37.2645 li
786.483 37.2645 mo
792.483 43.2645 li
f
1 lw
0 lc
786.483 43.2645 mo
792.483 37.2645 li
786.483 37.2645 mo
792.483 43.2645 li
@
grestore
gsave
795.821 43.8051 mo
802.821 43.8051 li
802.821 36.8052 li
795.821 36.8052 li
795.821 43.8051 li
clp
796.321 43.3052 mo
802.321 37.3052 li
796.321 37.3052 mo
802.321 43.3052 li
f
1 lw
0 lc
796.321 43.3052 mo
802.321 37.3052 li
796.321 37.3052 mo
802.321 43.3052 li
@
grestore
gsave
805.659 43.7238 mo
812.659 43.7238 li
812.659 36.7238 li
805.659 36.7238 li
805.659 43.7238 li
clp
806.159 43.2238 mo
812.159 37.2238 li
806.159 37.2238 mo
812.159 43.2238 li
f
1 lw
0 lc
806.159 43.2238 mo
812.159 37.2238 li
806.159 37.2238 mo
812.159 43.2238 li
@
grestore
gsave
815.497 43.7238 mo
822.497 43.7238 li
822.497 36.7238 li
815.497 36.7238 li
815.497 43.7238 li
clp
815.997 43.2238 mo
821.997 37.2238 li
815.997 37.2238 mo
821.997 43.2238 li
f
1 lw
0 lc
815.997 43.2238 mo
821.997 37.2238 li
815.997 37.2238 mo
821.997 43.2238 li
@
grestore
gsave
825.335 43.7034 mo
832.335 43.7034 li
832.335 36.7034 li
825.335 36.7034 li
825.335 43.7034 li
clp
825.835 43.2034 mo
831.835 37.2034 li
825.835 37.2034 mo
831.835 43.2034 li
f
1 lw
0 lc
825.835 43.2034 mo
831.835 37.2034 li
825.835 37.2034 mo
831.835 43.2034 li
@
grestore
gsave
835.173 43.5608 mo
842.173 43.5608 li
842.173 36.5608 li
835.173 36.5608 li
835.173 43.5608 li
clp
835.673 43.0608 mo
841.673 37.0608 li
835.673 37.0608 mo
841.673 43.0608 li
f
1 lw
0 lc
835.673 43.0608 mo
841.673 37.0608 li
835.673 37.0608 mo
841.673 43.0608 li
@
grestore
gsave
845.011 43.6016 mo
852.011 43.6016 li
852.011 36.6013 li
845.011 36.6013 li
845.011 43.6016 li
clp
845.511 43.1015 mo
851.511 37.1015 li
845.511 37.1015 mo
851.511 43.1015 li
f
1 lw
0 lc
845.511 43.1015 mo
851.511 37.1015 li
845.511 37.1015 mo
851.511 43.1015 li
@
grestore
gsave
854.849 43.4995 mo
861.849 43.4995 li
861.849 36.4996 li
854.849 36.4996 li
854.849 43.4995 li
clp
855.349 42.9997 mo
861.349 36.9997 li
855.349 36.9997 mo
861.349 42.9997 li
f
1 lw
0 lc
855.349 42.9997 mo
861.349 36.9997 li
855.349 36.9997 mo
861.349 42.9997 li
@
grestore
gsave
864.687 43.52 mo
871.687 43.52 li
871.687 36.52 li
864.687 36.52 li
864.687 43.52 li
clp
865.187 43.0201 mo
871.187 37.0201 li
865.187 37.0201 mo
871.187 43.0201 li
f
1 lw
0 lc
865.187 43.0201 mo
871.187 37.0201 li
865.187 37.0201 mo
871.187 43.0201 li
@
grestore
gsave
874.525 43.4182 mo
881.525 43.4182 li
881.525 36.4183 li
874.525 36.4183 li
874.525 43.4182 li
clp
875.025 42.9183 mo
881.025 36.9183 li
875.025 36.9183 mo
881.025 42.9183 li
f
1 lw
0 lc
875.025 42.9183 mo
881.025 36.9183 li
875.025 36.9183 mo
881.025 42.9183 li
@
grestore
gsave
884.363 43.3978 mo
891.363 43.3978 li
891.363 36.3979 li
884.363 36.3979 li
884.363 43.3978 li
clp
884.863 42.8979 mo
890.863 36.8979 li
884.863 36.8979 mo
890.863 42.8979 li
f
1 lw
0 lc
884.863 42.8979 mo
890.863 36.8979 li
884.863 36.8979 mo
890.863 42.8979 li
@
grestore
gsave
894.201 43.3369 mo
901.201 43.3369 li
901.201 36.3369 li
894.201 36.3369 li
894.201 43.3369 li
clp
894.701 42.8368 mo
900.701 36.8368 li
894.701 36.8368 mo
900.701 42.8368 li
f
1 lw
0 lc
894.701 42.8368 mo
900.701 36.8368 li
894.701 36.8368 mo
900.701 42.8368 li
@
grestore
gsave
904.039 43.3165 mo
911.039 43.3165 li
911.039 36.3165 li
904.039 36.3165 li
904.039 43.3165 li
clp
904.539 42.8164 mo
910.539 36.8164 li
904.539 36.8164 mo
910.539 42.8164 li
f
1 lw
0 lc
904.539 42.8164 mo
910.539 36.8164 li
904.539 36.8164 mo
910.539 42.8164 li
@
grestore
gsave
913.877 43.2756 mo
920.877 43.2756 li
920.877 36.2757 li
913.877 36.2757 li
913.877 43.2756 li
clp
914.377 42.7757 mo
920.377 36.7757 li
914.377 36.7757 mo
920.377 42.7757 li
f
1 lw
0 lc
914.377 42.7757 mo
920.377 36.7757 li
914.377 36.7757 mo
920.377 42.7757 li
@
grestore
gsave
923.715 43.3573 mo
930.715 43.3573 li
930.715 36.357 li
923.715 36.357 li
923.715 43.3573 li
clp
924.215 42.8572 mo
930.215 36.8572 li
924.215 36.8572 mo
930.215 42.8572 li
f
1 lw
0 lc
924.215 42.8572 mo
930.215 36.8572 li
924.215 36.8572 mo
930.215 42.8572 li
@
grestore
gsave
933.553 43.3165 mo
940.553 43.3165 li
940.553 36.3165 li
933.553 36.3165 li
933.553 43.3165 li
clp
934.053 42.8165 mo
940.053 36.8165 li
934.053 36.8165 mo
940.053 42.8165 li
f
1 lw
0 lc
934.053 42.8165 mo
940.053 36.8165 li
934.053 36.8165 mo
940.053 42.8165 li
@
grestore
gsave
943.391 43.3165 mo
950.391 43.3165 li
950.391 36.3165 li
943.391 36.3165 li
943.391 43.3165 li
clp
943.891 42.8165 mo
949.891 36.8165 li
943.891 36.8165 mo
949.891 42.8165 li
f
1 lw
0 lc
943.891 42.8165 mo
949.891 36.8165 li
943.891 36.8165 mo
949.891 42.8165 li
@
grestore
gsave
953.229 43.2756 mo
960.229 43.2756 li
960.229 36.2757 li
953.229 36.2757 li
953.229 43.2756 li
clp
953.729 42.7758 mo
959.729 36.7758 li
953.729 36.7758 mo
959.729 42.7758 li
f
1 lw
0 lc
953.729 42.7758 mo
959.729 36.7758 li
953.729 36.7758 mo
959.729 42.7758 li
@
grestore
gsave
963.067 43.2756 mo
970.068 43.2756 li
970.068 36.2757 li
963.067 36.2757 li
963.067 43.2756 li
clp
963.567 42.7758 mo
969.567 36.7758 li
963.567 36.7758 mo
969.567 42.7758 li
f
1 lw
0 lc
963.567 42.7758 mo
969.567 36.7758 li
963.567 36.7758 mo
969.567 42.7758 li
@
grestore
gsave
972.905 43.2552 mo
979.905 43.2552 li
979.905 36.2553 li
972.905 36.2553 li
972.905 43.2552 li
clp
973.405 42.7554 mo
979.405 36.7554 li
973.405 36.7554 mo
979.405 42.7554 li
f
1 lw
0 lc
973.405 42.7554 mo
979.405 36.7554 li
973.405 36.7554 mo
979.405 42.7554 li
@
grestore
gsave
982.743 43.2147 mo
989.743 43.2147 li
989.743 36.2148 li
982.743 36.2148 li
982.743 43.2147 li
clp
983.243 42.7147 mo
989.243 36.7147 li
983.243 36.7147 mo
989.243 42.7147 li
f
1 lw
0 lc
983.243 42.7147 mo
989.243 36.7147 li
983.243 36.7147 mo
989.243 42.7147 li
@
grestore
gsave
992.581 43.1943 mo
999.581 43.1943 li
999.581 36.1944 li
992.581 36.1944 li
992.581 43.1943 li
clp
993.081 42.6943 mo
999.081 36.6943 li
993.081 36.6943 mo
999.081 42.6943 li
f
1 lw
0 lc
993.081 42.6943 mo
999.081 36.6943 li
993.081 36.6943 mo
999.081 42.6943 li
@
grestore
gsave
1002.42 43.1739 mo
1009.42 43.1739 li
1009.42 36.1739 li
1002.42 36.1739 li
1002.42 43.1739 li
clp
1002.92 42.6739 mo
1008.92 36.6739 li
1002.92 36.6739 mo
1008.92 42.6739 li
f
1 lw
0 lc
1002.92 42.6739 mo
1008.92 36.6739 li
1002.92 36.6739 mo
1008.92 42.6739 li
@
grestore
gsave
1012.26 43.1943 mo
1019.26 43.1943 li
1019.26 36.1944 li
1012.26 36.1944 li
1012.26 43.1943 li
clp
1012.76 42.6943 mo
1018.76 36.6943 li
1012.76 36.6943 mo
1018.76 42.6943 li
f
1 lw
0 lc
1012.76 42.6943 mo
1018.76 36.6943 li
1012.76 36.6943 mo
1018.76 42.6943 li
@
grestore
gsave
1022.1 43.1535 mo
1029.1 43.1535 li
1029.1 36.1535 li
1022.1 36.1535 li
1022.1 43.1535 li
clp
1022.6 42.6536 mo
1028.6 36.6536 li
1022.6 36.6536 mo
1028.6 42.6536 li
f
1 lw
0 lc
1022.6 42.6536 mo
1028.6 36.6536 li
1022.6 36.6536 mo
1028.6 42.6536 li
@
grestore
gsave
1031.93 43.0721 mo
1038.93 43.0721 li
1038.93 36.0722 li
1031.93 36.0722 li
1031.93 43.0721 li
clp
1032.43 42.5721 mo
1038.43 36.5721 li
1032.43 36.5721 mo
1038.43 42.5721 li
f
1 lw
0 lc
1032.43 42.5721 mo
1038.43 36.5721 li
1032.43 36.5721 mo
1038.43 42.5721 li
@
grestore
gsave
1041.77 43.0517 mo
1048.77 43.0517 li
1048.77 36.0518 li
1041.77 36.0518 li
1041.77 43.0517 li
clp
1042.27 42.5517 mo
1048.27 36.5517 li
1042.27 36.5517 mo
1048.27 42.5517 li
f
1 lw
0 lc
1042.27 42.5517 mo
1048.27 36.5517 li
1042.27 36.5517 mo
1048.27 42.5517 li
@
grestore
gsave
1051.61 42.9905 mo
1058.61 42.9905 li
1058.61 35.9905 li
1051.61 35.9905 li
1051.61 42.9905 li
clp
1052.11 42.4906 mo
1058.11 36.4906 li
1052.11 36.4906 mo
1058.11 42.4906 li
f
1 lw
0 lc
1052.11 42.4906 mo
1058.11 36.4906 li
1052.11 36.4906 mo
1058.11 42.4906 li
@
grestore
gsave
1061.45 42.95 mo
1068.45 42.95 li
1068.45 35.95 li
1061.45 35.95 li
1061.45 42.95 li
clp
1061.95 42.4499 mo
1067.95 36.4499 li
1061.95 36.4499 mo
1067.95 42.4499 li
f
1 lw
0 lc
1061.95 42.4499 mo
1067.95 36.4499 li
1061.95 36.4499 mo
1067.95 42.4499 li
@
grestore
gsave
1071.29 42.9704 mo
1078.29 42.9704 li
1078.29 35.9701 li
1071.29 35.9701 li
1071.29 42.9704 li
clp
1071.79 42.4703 mo
1077.79 36.4703 li
1071.79 36.4703 mo
1077.79 42.4703 li
f
1 lw
0 lc
1071.79 42.4703 mo
1077.79 36.4703 li
1071.79 36.4703 mo
1077.79 42.4703 li
@
grestore
gsave
1081.12 42.95 mo
1088.12 42.95 li
1088.12 35.95 li
1081.12 35.95 li
1081.12 42.95 li
clp
1081.62 42.4499 mo
1087.62 36.4499 li
1081.62 36.4499 mo
1087.62 42.4499 li
f
1 lw
0 lc
1081.62 42.4499 mo
1087.62 36.4499 li
1081.62 36.4499 mo
1087.62 42.4499 li
@
grestore
gsave
1090.96 42.9296 mo
1097.96 42.9296 li
1097.96 35.9296 li
1090.96 35.9296 li
1090.96 42.9296 li
clp
1091.46 42.4295 mo
1097.46 36.4295 li
1091.46 36.4295 mo
1097.46 42.4295 li
f
1 lw
0 lc
1091.46 42.4295 mo
1097.46 36.4295 li
1091.46 36.4295 mo
1097.46 42.4295 li
@
grestore
.8 lw
0 lj
71.8 543.935 mo
71.8 6.72162 li
@
1143.16 543.935 mo
1143.16 6.72162 li
@
71.8 543.935 mo
1143.16 543.935 li
@
71.8 6.72162 mo
1143.16 6.72162 li
@
gsave
1136.16 538.435 mo
859.004 538.435 li
858.414 538.433 858.066 538.291 857.857 538.082 cv
857.648 537.872 857.506 537.525 857.504 536.935 cv
857.504 440.498 li
857.506 439.908 857.648 439.56 857.857 439.351 cv
858.066 439.142 858.414 438.999 859.004 438.998 cv
1136.16 438.998 li
1136.75 438.999 1137.1 439.142 1137.31 439.351 cv
1137.52 439.56 1137.66 439.908 1137.66 440.498 cv
1137.66 536.935 li
1137.66 537.525 1137.52 537.872 1137.31 538.082 cv
1137.1 538.291 1136.75 538.433 1136.16 538.435 cv
clp
857.504 438.998 mo
1137.66 438.998 li
1137.66 538.435 li
857.504 538.435 li
cp
0 0 0 0 cmyk
f
grestore
1136.17 539.435 mo
1136.17 539.435 1136.16 539.435 1136.16 539.435 cv
859.004 539.435 li
859 539.435 858.997 539.435 858.994 539.435 cv
858.254 539.435 857.606 539.244 857.15 538.789 cv
856.693 538.331 856.502 537.679 856.504 536.935 cv
856.504 440.498 li
856.502 439.754 856.693 439.102 857.15 438.644 cv
857.606 438.189 858.254 437.998 858.994 437.998 cv
858.997 437.998 859 437.998 859.004 437.998 cv
1136.16 437.998 li
1136.16 437.998 1136.17 437.998 1136.17 437.998 cv
1136.91 437.998 1137.56 438.189 1138.01 438.644 cv
1138.47 439.102 1138.66 439.754 1138.66 440.498 cv
1138.66 536.935 li
1138.66 537.679 1138.47 538.331 1138.01 538.789 cv
1137.56 539.244 1136.91 539.435 1136.17 539.435 cv
859.004 538.435 mo
1136.16 538.435 li
1136.75 538.433 1137.1 538.291 1137.31 538.082 cv
1137.52 537.872 1137.66 537.525 1137.66 536.935 cv
1137.66 440.498 li
1137.66 439.908 1137.52 439.56 1137.31 439.351 cv
1137.1 439.142 1136.75 438.999 1136.16 438.998 cv
859.004 438.998 li
858.414 438.999 858.066 439.142 857.857 439.351 cv
857.648 439.56 857.506 439.908 857.504 440.498 cv
857.504 536.935 li
857.506 537.525 857.648 537.872 857.857 538.082 cv
858.066 538.291 858.414 538.433 859.004 538.435 cv
859.004 538.435 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
861.004 454.201 mo
881.004 454.201 li
0 1 1 0 cmyk
@
892.944 444.741 mo
892.944 456.081 li
895.324 456.081 li
897.324 456.081 898.804 455.641 899.744 454.721 cv
900.664 453.801 901.144 452.361 901.144 450.401 cv
901.144 448.441 900.664 447.021 899.744 446.101 cv
898.804 445.201 897.324 444.741 895.324 444.741 cv
892.944 444.741 li
890.964 443.121 mo
895.024 443.121 li
897.844 443.121 899.924 443.721 901.244 444.881 cv
902.564 446.061 903.224 447.901 903.224 450.401 cv
903.224 452.921 902.544 454.761 901.224 455.941 cv
899.904 457.121 897.824 457.701 895.024 457.701 cv
890.964 457.701 li
890.964 443.121 li
1 /0 /CSD get_res sepcs
1 sep
f
908.344 450.741 mo
908.344 456.081 li
911.504 456.081 li
912.564 456.081 913.344 455.861 913.864 455.421 cv
914.364 454.981 914.624 454.321 914.624 453.401 cv
914.624 452.501 914.364 451.841 913.864 451.401 cv
913.344 450.961 912.564 450.741 911.504 450.741 cv
908.344 450.741 li
908.344 444.741 mo
908.344 449.141 li
911.264 449.141 li
912.224 449.141 912.924 448.961 913.404 448.601 cv
913.884 448.241 914.124 447.701 914.124 446.941 cv
914.124 446.221 913.884 445.661 913.404 445.301 cv
912.924 444.941 912.224 444.741 911.264 444.741 cv
908.344 444.741 li
906.364 443.121 mo
911.404 443.121 li
912.904 443.121 914.064 443.441 914.884 444.061 cv
915.684 444.701 916.104 445.581 916.104 446.721 cv
916.104 447.621 915.884 448.341 915.464 448.861 cv
915.044 449.381 914.444 449.721 913.644 449.841 cv
914.604 450.061 915.364 450.501 915.904 451.161 cv
916.424 451.821 916.704 452.641 916.704 453.621 cv
916.704 454.941 916.244 455.941 915.364 456.641 cv
914.484 457.361 913.224 457.701 911.604 457.701 cv
906.364 457.701 li
906.364 443.121 li
f
920.084 443.121 mo
922.744 443.121 li
929.204 455.321 li
929.204 443.121 li
931.124 443.121 li
931.124 457.701 li
928.464 457.701 li
922.004 445.501 li
922.004 457.701 li
920.084 457.701 li
920.084 443.121 li
f
945.644 442.521 mo
944.764 444.041 944.124 445.521 943.704 446.981 cv
943.264 448.441 943.064 449.921 943.064 451.421 cv
943.064 452.941 943.264 454.421 943.704 455.881 cv
944.124 457.361 944.764 458.821 945.644 460.321 cv
944.084 460.321 li
943.104 458.781 942.364 457.301 941.884 455.821 cv
941.404 454.341 941.164 452.881 941.164 451.421 cv
941.164 449.981 941.404 448.521 941.884 447.041 cv
942.364 445.561 943.084 444.061 944.084 442.521 cv
945.644 442.521 li
f
947.204 443.121 mo
959.524 443.121 li
959.524 444.781 li
954.344 444.781 li
954.344 457.701 li
952.364 457.701 li
952.364 444.781 li
947.204 444.781 li
947.204 443.121 li
f
967.684 448.441 mo
967.484 448.321 967.264 448.241 967.024 448.181 cv
966.784 448.141 966.524 448.101 966.244 448.101 cv
965.224 448.101 964.444 448.441 963.904 449.101 cv
963.344 449.761 963.084 450.701 963.084 451.941 cv
963.084 457.701 li
961.284 457.701 li
961.284 446.761 li
963.084 446.761 li
963.084 448.461 li
963.444 447.801 963.944 447.301 964.544 446.981 cv
965.144 446.661 965.884 446.501 966.764 446.501 cv
966.884 446.501 967.024 446.521 967.184 446.521 cv
967.324 446.541 967.484 446.561 967.684 446.601 cv
967.684 448.441 li
f
974.544 452.201 mo
973.084 452.201 972.084 452.381 971.524 452.701 cv
970.964 453.041 970.684 453.601 970.684 454.401 cv
970.684 455.041 970.884 455.561 971.304 455.921 cv
971.724 456.301 972.304 456.481 973.024 456.481 cv
974.024 456.481 974.824 456.141 975.424 455.421 cv
976.024 454.721 976.324 453.781 976.324 452.601 cv
976.324 452.201 li
974.544 452.201 li
978.124 451.461 mo
978.124 457.701 li
976.324 457.701 li
976.324 456.041 li
975.904 456.721 975.384 457.201 974.784 457.501 cv
974.184 457.801 973.424 457.961 972.544 457.961 cv
971.424 457.961 970.524 457.661 969.864 457.041 cv
969.204 456.421 968.884 455.581 968.884 454.521 cv
968.884 453.301 969.284 452.381 970.124 451.741 cv
970.944 451.121 972.164 450.801 973.804 450.801 cv
976.324 450.801 li
976.324 450.621 li
976.324 449.801 976.044 449.161 975.504 448.701 cv
974.964 448.261 974.204 448.021 973.224 448.021 cv
972.584 448.021 971.984 448.101 971.384 448.261 cv
970.784 448.421 970.224 448.641 969.684 448.921 cv
969.684 447.261 li
970.324 447.021 970.964 446.821 971.584 446.701 cv
972.204 446.581 972.804 446.501 973.404 446.501 cv
974.984 446.501 976.164 446.921 976.944 447.741 cv
977.724 448.561 978.124 449.801 978.124 451.461 cv
f
981.824 446.761 mo
983.624 446.761 li
983.624 457.701 li
981.824 457.701 li
981.824 446.761 li
981.824 442.501 mo
983.624 442.501 li
983.624 444.781 li
981.824 444.781 li
981.824 442.501 li
f
996.484 451.101 mo
996.484 457.701 li
994.684 457.701 li
994.684 451.161 li
994.684 450.121 994.464 449.361 994.064 448.841 cv
993.664 448.321 993.064 448.061 992.264 448.061 cv
991.284 448.061 990.524 448.381 989.964 449.001 cv
989.404 449.621 989.124 450.461 989.124 451.521 cv
989.124 457.701 li
987.324 457.701 li
987.324 446.761 li
989.124 446.761 li
989.124 448.461 li
989.544 447.821 990.044 447.321 990.644 447.001 cv
991.224 446.681 991.904 446.501 992.664 446.501 cv
993.904 446.501 994.864 446.901 995.504 447.681 cv
996.144 448.461 996.484 449.601 996.484 451.101 cv
f
1000.06 446.761 mo
1001.86 446.761 li
1001.86 457.701 li
1000.06 457.701 li
1000.06 446.761 li
1000.06 442.501 mo
1001.86 442.501 li
1001.86 444.781 li
1000.06 444.781 li
1000.06 442.501 li
f
1014.72 451.101 mo
1014.72 457.701 li
1012.92 457.701 li
1012.92 451.161 li
1012.92 450.121 1012.7 449.361 1012.3 448.841 cv
1011.9 448.321 1011.3 448.061 1010.5 448.061 cv
1009.52 448.061 1008.76 448.381 1008.2 449.001 cv
1007.64 449.621 1007.36 450.461 1007.36 451.521 cv
1007.36 457.701 li
1005.56 457.701 li
1005.56 446.761 li
1007.36 446.761 li
1007.36 448.461 li
1007.78 447.821 1008.28 447.321 1008.88 447.001 cv
1009.46 446.681 1010.14 446.501 1010.9 446.501 cv
1012.14 446.501 1013.1 446.901 1013.74 447.681 cv
1014.38 448.461 1014.72 449.601 1014.72 451.101 cv
f
1025.5 452.101 mo
1025.5 450.821 1025.22 449.801 1024.7 449.081 cv
1024.16 448.361 1023.4 448.001 1022.44 448.001 cv
1021.48 448.001 1020.72 448.361 1020.18 449.081 cv
1019.64 449.801 1019.38 450.821 1019.38 452.101 cv
1019.38 453.401 1019.64 454.401 1020.18 455.121 cv
1020.72 455.841 1021.48 456.201 1022.44 456.201 cv
1023.4 456.201 1024.16 455.841 1024.7 455.121 cv
1025.22 454.401 1025.5 453.401 1025.5 452.101 cv
1027.3 456.341 mo
1027.3 458.181 1026.88 459.561 1026.06 460.481 cv
1025.22 461.381 1023.96 461.841 1022.26 461.841 cv
1021.62 461.841 1021.04 461.781 1020.48 461.701 cv
1019.92 461.601 1019.36 461.461 1018.84 461.261 cv
1018.84 459.521 li
1019.36 459.801 1019.88 460.001 1020.4 460.141 cv
1020.92 460.281 1021.44 460.361 1021.98 460.361 cv
1023.14 460.361 1024.02 460.041 1024.62 459.441 cv
1025.2 458.821 1025.5 457.901 1025.5 456.661 cv
1025.5 455.781 li
1025.12 456.421 1024.64 456.901 1024.06 457.221 cv
1023.48 457.541 1022.8 457.701 1022 457.701 cv
1020.64 457.701 1019.56 457.201 1018.74 456.181 cv
1017.92 455.161 1017.52 453.801 1017.52 452.101 cv
1017.52 450.421 1017.92 449.061 1018.74 448.041 cv
1019.56 447.021 1020.64 446.501 1022 446.501 cv
1022.8 446.501 1023.48 446.661 1024.06 446.981 cv
1024.64 447.301 1025.12 447.781 1025.5 448.421 cv
1025.5 446.761 li
1027.3 446.761 li
1027.3 456.341 li
f
1031.46 455.221 mo
1033.52 455.221 li
1033.52 456.901 li
1031.92 460.001 li
1030.66 460.001 li
1031.46 456.901 li
1031.46 455.221 li
f
1052.54 443.601 mo
1052.54 445.521 li
1051.78 445.161 1051.08 444.901 1050.42 444.721 cv
1049.74 444.561 1049.1 444.461 1048.5 444.461 cv
1047.42 444.461 1046.58 444.681 1046 445.081 cv
1045.42 445.501 1045.14 446.101 1045.14 446.861 cv
1045.14 447.501 1045.32 448.001 1045.72 448.321 cv
1046.1 448.661 1046.84 448.921 1047.92 449.121 cv
1049.12 449.361 li
1050.58 449.641 1051.66 450.141 1052.36 450.841 cv
1053.06 451.561 1053.42 452.501 1053.42 453.681 cv
1053.42 455.101 1052.94 456.161 1052 456.881 cv
1051.04 457.601 1049.66 457.961 1047.84 457.961 cv
1047.14 457.961 1046.4 457.881 1045.62 457.741 cv
1044.84 457.601 1044.04 457.381 1043.22 457.061 cv
1043.22 455.021 li
1044.02 455.481 1044.8 455.821 1045.56 456.041 cv
1046.32 456.281 1047.08 456.381 1047.84 456.381 cv
1048.96 456.381 1049.82 456.161 1050.44 455.721 cv
1051.04 455.281 1051.36 454.661 1051.36 453.821 cv
1051.36 453.101 1051.14 452.541 1050.7 452.141 cv
1050.26 451.741 1049.54 451.441 1048.54 451.241 cv
1047.34 451.001 li
1045.86 450.721 1044.8 450.261 1044.14 449.621 cv
1043.48 449.001 1043.16 448.141 1043.16 447.021 cv
1043.16 445.741 1043.6 444.721 1044.52 443.981 cv
1045.42 443.241 1046.68 442.861 1048.28 442.861 cv
1048.96 442.861 1049.64 442.921 1050.36 443.041 cv
1051.06 443.161 1051.78 443.361 1052.54 443.601 cv
f
1056.42 446.761 mo
1058.22 446.761 li
1058.22 457.701 li
1056.42 457.701 li
1056.42 446.761 li
1056.42 442.501 mo
1058.22 442.501 li
1058.22 444.781 li
1056.42 444.781 li
1056.42 442.501 li
f
1069.18 452.101 mo
1069.18 450.821 1068.9 449.801 1068.38 449.081 cv
1067.84 448.361 1067.08 448.001 1066.12 448.001 cv
1065.16 448.001 1064.4 448.361 1063.86 449.081 cv
1063.32 449.801 1063.06 450.821 1063.06 452.101 cv
1063.06 453.401 1063.32 454.401 1063.86 455.121 cv
1064.4 455.841 1065.16 456.201 1066.12 456.201 cv
1067.08 456.201 1067.84 455.841 1068.38 455.121 cv
1068.9 454.401 1069.18 453.401 1069.18 452.101 cv
1070.98 456.341 mo
1070.98 458.181 1070.56 459.561 1069.74 460.481 cv
1068.9 461.381 1067.64 461.841 1065.94 461.841 cv
1065.3 461.841 1064.72 461.781 1064.16 461.701 cv
1063.6 461.601 1063.04 461.461 1062.52 461.261 cv
1062.52 459.521 li
1063.04 459.801 1063.56 460.001 1064.08 460.141 cv
1064.6 460.281 1065.12 460.361 1065.66 460.361 cv
1066.82 460.361 1067.7 460.041 1068.3 459.441 cv
1068.88 458.821 1069.18 457.901 1069.18 456.661 cv
1069.18 455.781 li
1068.8 456.421 1068.32 456.901 1067.74 457.221 cv
1067.16 457.541 1066.48 457.701 1065.68 457.701 cv
1064.32 457.701 1063.24 457.201 1062.42 456.181 cv
1061.6 455.161 1061.2 453.801 1061.2 452.101 cv
1061.2 450.421 1061.6 449.061 1062.42 448.041 cv
1063.24 447.021 1064.32 446.501 1065.68 446.501 cv
1066.48 446.501 1067.16 446.661 1067.74 446.981 cv
1068.32 447.301 1068.8 447.781 1069.18 448.421 cv
1069.18 446.761 li
1070.98 446.761 li
1070.98 456.341 li
f
1083.2 448.861 mo
1083.64 448.061 1084.18 447.481 1084.8 447.081 cv
1085.42 446.701 1086.16 446.501 1087.02 446.501 cv
1088.14 446.501 1089.02 446.901 1089.64 447.701 cv
1090.26 448.501 1090.58 449.641 1090.58 451.101 cv
1090.58 457.701 li
1088.78 457.701 li
1088.78 451.161 li
1088.78 450.121 1088.58 449.341 1088.22 448.821 cv
1087.84 448.321 1087.28 448.061 1086.52 448.061 cv
1085.58 448.061 1084.84 448.381 1084.3 449.001 cv
1083.76 449.621 1083.5 450.461 1083.5 451.521 cv
1083.5 457.701 li
1081.7 457.701 li
1081.7 451.161 li
1081.7 450.121 1081.5 449.341 1081.14 448.821 cv
1080.76 448.321 1080.18 448.061 1079.42 448.061 cv
1078.5 448.061 1077.76 448.381 1077.22 449.001 cv
1076.68 449.621 1076.42 450.461 1076.42 451.521 cv
1076.42 457.701 li
1074.62 457.701 li
1074.62 446.761 li
1076.42 446.761 li
1076.42 448.461 li
1076.82 447.801 1077.32 447.301 1077.9 446.981 cv
1078.46 446.661 1079.14 446.501 1079.94 446.501 cv
1080.74 446.501 1081.4 446.701 1081.96 447.101 cv
1082.52 447.501 1082.92 448.101 1083.2 448.861 cv
f
1098.4 448.021 mo
1097.44 448.021 1096.68 448.401 1096.12 449.161 cv
1095.56 449.921 1095.28 450.941 1095.28 452.241 cv
1095.28 453.561 1095.54 454.581 1096.1 455.341 cv
1096.66 456.101 1097.42 456.461 1098.4 456.461 cv
1099.36 456.461 1100.12 456.101 1100.68 455.341 cv
1101.24 454.581 1101.52 453.561 1101.52 452.241 cv
1101.52 450.961 1101.24 449.921 1100.68 449.161 cv
1100.12 448.401 1099.36 448.021 1098.4 448.021 cv
1098.4 446.501 mo
1099.96 446.501 1101.18 447.021 1102.08 448.021 cv
1102.96 449.041 1103.42 450.441 1103.42 452.241 cv
1103.42 454.041 1102.96 455.441 1102.08 456.441 cv
1101.18 457.461 1099.96 457.961 1098.4 457.961 cv
1096.82 457.961 1095.58 457.461 1094.7 456.441 cv
1093.82 455.441 1093.38 454.041 1093.38 452.241 cv
1093.38 450.441 1093.82 449.041 1094.7 448.021 cv
1095.58 447.021 1096.82 446.501 1098.4 446.501 cv
f
1106.4 446.761 mo
1108.2 446.761 li
1108.2 457.701 li
1106.4 457.701 li
1106.4 446.761 li
1106.4 442.501 mo
1108.2 442.501 li
1108.2 444.781 li
1106.4 444.781 li
1106.4 442.501 li
f
1119.16 448.421 mo
1119.16 442.501 li
1120.96 442.501 li
1120.96 457.701 li
1119.16 457.701 li
1119.16 456.061 li
1118.78 456.721 1118.3 457.201 1117.72 457.501 cv
1117.14 457.801 1116.46 457.961 1115.66 457.961 cv
1114.34 457.961 1113.26 457.441 1112.42 456.401 cv
1111.58 455.361 1111.18 453.961 1111.18 452.241 cv
1111.18 450.521 1111.58 449.141 1112.42 448.081 cv
1113.26 447.041 1114.34 446.501 1115.66 446.501 cv
1116.46 446.501 1117.14 446.661 1117.72 446.981 cv
1118.3 447.301 1118.78 447.781 1119.16 448.421 cv
1113.04 452.241 mo
1113.04 453.561 1113.3 454.601 1113.84 455.361 cv
1114.38 456.121 1115.14 456.481 1116.1 456.481 cv
1117.04 456.481 1117.78 456.121 1118.34 455.361 cv
1118.88 454.601 1119.16 453.561 1119.16 452.241 cv
1119.16 450.921 1118.88 449.901 1118.34 449.141 cv
1117.78 448.381 1117.04 448.001 1116.1 448.001 cv
1115.14 448.001 1114.38 448.381 1113.84 449.141 cv
1113.3 449.901 1113.04 450.921 1113.04 452.241 cv
f
1124.38 442.521 mo
1125.94 442.521 li
1126.9 444.061 1127.64 445.561 1128.12 447.041 cv
1128.6 448.521 1128.86 449.981 1128.86 451.421 cv
1128.86 452.881 1128.6 454.341 1128.12 455.821 cv
1127.64 457.301 1126.9 458.781 1125.94 460.321 cv
1124.38 460.321 li
1125.24 458.821 1125.88 457.361 1126.32 455.881 cv
1126.74 454.421 1126.96 452.941 1126.96 451.421 cv
1126.96 449.921 1126.74 448.441 1126.32 446.981 cv
1125.88 445.521 1125.24 444.041 1124.38 442.521 cv
f
861.004 478.56 mo
881.004 478.56 li
0 1 1 0 cmyk
@
868.004 481.56 mo
874.004 475.56 li
868.004 475.56 mo
874.004 481.56 li
f
1 lw
0 lc
868.004 481.56 mo
874.004 475.56 li
868.004 475.56 mo
874.004 481.56 li
@
892.944 469.1 mo
892.944 480.44 li
895.324 480.44 li
897.324 480.44 898.804 480 899.744 479.08 cv
900.664 478.16 901.144 476.72 901.144 474.76 cv
901.144 472.8 900.664 471.38 899.744 470.46 cv
898.804 469.56 897.324 469.1 895.324 469.1 cv
892.944 469.1 li
890.964 467.48 mo
895.024 467.48 li
897.844 467.48 899.924 468.08 901.244 469.24 cv
902.564 470.42 903.224 472.26 903.224 474.76 cv
903.224 477.28 902.544 479.12 901.224 480.3 cv
899.904 481.48 897.824 482.06 895.024 482.06 cv
890.964 482.06 li
890.964 467.48 li
1 /0 /CSD get_res sepcs
1 sep
f
908.344 475.1 mo
908.344 480.44 li
911.504 480.44 li
912.564 480.44 913.344 480.22 913.864 479.78 cv
914.364 479.34 914.624 478.68 914.624 477.76 cv
914.624 476.86 914.364 476.2 913.864 475.76 cv
913.344 475.32 912.564 475.1 911.504 475.1 cv
908.344 475.1 li
908.344 469.1 mo
908.344 473.5 li
911.264 473.5 li
912.224 473.5 912.924 473.32 913.404 472.96 cv
913.884 472.6 914.124 472.06 914.124 471.3 cv
914.124 470.58 913.884 470.02 913.404 469.66 cv
912.924 469.3 912.224 469.1 911.264 469.1 cv
908.344 469.1 li
906.364 467.48 mo
911.404 467.48 li
912.904 467.48 914.064 467.8 914.884 468.42 cv
915.684 469.06 916.104 469.94 916.104 471.08 cv
916.104 471.98 915.884 472.7 915.464 473.22 cv
915.044 473.74 914.444 474.08 913.644 474.2 cv
914.604 474.42 915.364 474.86 915.904 475.52 cv
916.424 476.18 916.704 477 916.704 477.98 cv
916.704 479.3 916.244 480.3 915.364 481 cv
914.484 481.72 913.224 482.06 911.604 482.06 cv
906.364 482.06 li
906.364 467.48 li
f
920.084 467.48 mo
922.744 467.48 li
929.204 479.68 li
929.204 467.48 li
931.124 467.48 li
931.124 482.06 li
928.464 482.06 li
922.004 469.86 li
922.004 482.06 li
920.084 482.06 li
920.084 467.48 li
f
945.644 466.88 mo
944.764 468.4 944.124 469.88 943.704 471.34 cv
943.264 472.8 943.064 474.28 943.064 475.78 cv
943.064 477.3 943.264 478.78 943.704 480.24 cv
944.124 481.72 944.764 483.18 945.644 484.68 cv
944.084 484.68 li
943.104 483.14 942.364 481.66 941.884 480.18 cv
941.404 478.7 941.164 477.24 941.164 475.78 cv
941.164 474.34 941.404 472.88 941.884 471.4 cv
942.364 469.92 943.084 468.42 944.084 466.88 cv
945.644 466.88 li
f
947.204 467.48 mo
959.524 467.48 li
959.524 469.14 li
954.344 469.14 li
954.344 482.06 li
952.364 482.06 li
952.364 469.14 li
947.204 469.14 li
947.204 467.48 li
f
970.704 476.14 mo
970.704 477.02 li
962.444 477.02 li
962.524 478.26 962.884 479.22 963.564 479.86 cv
964.224 480.5 965.144 480.82 966.344 480.82 cv
967.024 480.82 967.704 480.74 968.344 480.58 cv
968.984 480.42 969.644 480.16 970.284 479.8 cv
970.284 481.5 li
969.644 481.78 968.984 482 968.304 482.12 cv
967.624 482.24 966.924 482.32 966.244 482.32 cv
964.484 482.32 963.104 481.82 962.084 480.82 cv
961.064 479.82 960.564 478.44 960.564 476.7 cv
960.564 474.92 961.044 473.5 962.004 472.44 cv
962.964 471.4 964.284 470.86 965.924 470.86 cv
967.404 470.86 968.564 471.34 969.424 472.28 cv
970.264 473.24 970.704 474.52 970.704 476.14 cv
968.904 475.62 mo
968.884 474.64 968.604 473.86 968.084 473.26 cv
967.544 472.68 966.824 472.38 965.944 472.38 cv
964.944 472.38 964.144 472.68 963.544 473.24 cv
962.944 473.8 962.584 474.6 962.504 475.62 cv
968.904 475.62 li
f
980.624 471.44 mo
980.624 473.14 li
980.104 472.9 979.584 472.7 979.044 472.56 cv
978.484 472.44 977.924 472.36 977.344 472.36 cv
976.444 472.36 975.764 472.5 975.324 472.78 cv
974.884 473.06 974.664 473.46 974.664 474 cv
974.664 474.42 974.824 474.74 975.144 474.98 cv
975.464 475.22 976.104 475.46 977.064 475.66 cv
977.684 475.8 li
978.964 476.08 979.864 476.48 980.404 476.96 cv
980.924 477.46 981.204 478.16 981.204 479.04 cv
981.204 480.06 980.804 480.86 980.004 481.44 cv
979.204 482.04 978.084 482.32 976.684 482.32 cv
976.084 482.32 975.484 482.26 974.844 482.16 cv
974.204 482.06 973.544 481.9 972.844 481.66 cv
972.844 479.8 li
973.504 480.16 974.164 480.42 974.804 480.58 cv
975.444 480.76 976.084 480.84 976.724 480.84 cv
977.564 480.84 978.224 480.7 978.684 480.42 cv
979.124 480.14 979.364 479.72 979.364 479.18 cv
979.364 478.7 979.184 478.32 978.864 478.06 cv
978.544 477.8 977.824 477.54 976.704 477.3 cv
976.084 477.16 li
974.964 476.92 974.144 476.56 973.664 476.08 cv
973.164 475.6 972.924 474.94 972.924 474.08 cv
972.924 473.06 973.284 472.26 974.004 471.7 cv
974.724 471.14 975.764 470.86 977.124 470.86 cv
977.784 470.86 978.404 470.92 979.004 471.02 cv
979.584 471.12 980.124 471.26 980.624 471.44 cv
f
985.844 468.02 mo
985.844 471.12 li
989.544 471.12 li
989.544 472.52 li
985.844 472.52 li
985.844 478.46 li
985.844 479.36 985.964 479.94 986.204 480.18 cv
986.444 480.44 986.944 480.56 987.704 480.56 cv
989.544 480.56 li
989.544 482.06 li
987.704 482.06 li
986.304 482.06 985.344 481.8 984.824 481.28 cv
984.304 480.76 984.044 479.82 984.044 478.46 cv
984.044 472.52 li
982.724 472.52 li
982.724 471.12 li
984.044 471.12 li
984.044 468.02 li
985.844 468.02 li
f
991.904 471.12 mo
993.704 471.12 li
993.704 482.06 li
991.904 482.06 li
991.904 471.12 li
991.904 466.86 mo
993.704 466.86 li
993.704 469.14 li
991.904 469.14 li
991.904 466.86 li
f
1006.56 475.46 mo
1006.56 482.06 li
1004.76 482.06 li
1004.76 475.52 li
1004.76 474.48 1004.54 473.72 1004.14 473.2 cv
1003.74 472.68 1003.14 472.42 1002.34 472.42 cv
1001.36 472.42 1000.6 472.74 1000.04 473.36 cv
999.484 473.98 999.204 474.82 999.204 475.88 cv
999.204 482.06 li
997.404 482.06 li
997.404 471.12 li
999.204 471.12 li
999.204 472.82 li
999.624 472.18 1000.12 471.68 1000.72 471.36 cv
1001.3 471.04 1001.98 470.86 1002.74 470.86 cv
1003.98 470.86 1004.94 471.26 1005.58 472.04 cv
1006.22 472.82 1006.56 473.96 1006.56 475.46 cv
f
1017.34 476.46 mo
1017.34 475.18 1017.06 474.16 1016.54 473.44 cv
1016 472.72 1015.24 472.36 1014.28 472.36 cv
1013.32 472.36 1012.56 472.72 1012.02 473.44 cv
1011.48 474.16 1011.22 475.18 1011.22 476.46 cv
1011.22 477.76 1011.48 478.76 1012.02 479.48 cv
1012.56 480.2 1013.32 480.56 1014.28 480.56 cv
1015.24 480.56 1016 480.2 1016.54 479.48 cv
1017.06 478.76 1017.34 477.76 1017.34 476.46 cv
1019.14 480.7 mo
1019.14 482.54 1018.72 483.92 1017.9 484.84 cv
1017.06 485.74 1015.8 486.2 1014.1 486.2 cv
1013.46 486.2 1012.88 486.14 1012.32 486.06 cv
1011.76 485.96 1011.2 485.82 1010.68 485.62 cv
1010.68 483.88 li
1011.2 484.16 1011.72 484.36 1012.24 484.5 cv
1012.76 484.64 1013.28 484.72 1013.82 484.72 cv
1014.98 484.72 1015.86 484.4 1016.46 483.8 cv
1017.04 483.18 1017.34 482.26 1017.34 481.02 cv
1017.34 480.14 li
1016.96 480.78 1016.48 481.26 1015.9 481.58 cv
1015.32 481.9 1014.64 482.06 1013.84 482.06 cv
1012.48 482.06 1011.4 481.56 1010.58 480.54 cv
1009.76 479.52 1009.36 478.16 1009.36 476.46 cv
1009.36 474.78 1009.76 473.42 1010.58 472.4 cv
1011.4 471.38 1012.48 470.86 1013.84 470.86 cv
1014.64 470.86 1015.32 471.02 1015.9 471.34 cv
1016.48 471.66 1016.96 472.14 1017.34 472.78 cv
1017.34 471.12 li
1019.14 471.12 li
1019.14 480.7 li
f
1023.3 479.58 mo
1025.36 479.58 li
1025.36 481.26 li
1023.76 484.36 li
1022.5 484.36 li
1023.3 481.26 li
1023.3 479.58 li
f
1044.38 467.96 mo
1044.38 469.88 li
1043.62 469.52 1042.92 469.26 1042.26 469.08 cv
1041.58 468.92 1040.94 468.82 1040.34 468.82 cv
1039.26 468.82 1038.42 469.04 1037.84 469.44 cv
1037.26 469.86 1036.98 470.46 1036.98 471.22 cv
1036.98 471.86 1037.16 472.36 1037.56 472.68 cv
1037.94 473.02 1038.68 473.28 1039.76 473.48 cv
1040.96 473.72 li
1042.42 474 1043.5 474.5 1044.2 475.2 cv
1044.9 475.92 1045.26 476.86 1045.26 478.04 cv
1045.26 479.46 1044.78 480.52 1043.84 481.24 cv
1042.88 481.96 1041.5 482.32 1039.68 482.32 cv
1038.98 482.32 1038.24 482.24 1037.46 482.1 cv
1036.68 481.96 1035.88 481.74 1035.06 481.42 cv
1035.06 479.38 li
1035.86 479.84 1036.64 480.18 1037.4 480.4 cv
1038.16 480.64 1038.92 480.74 1039.68 480.74 cv
1040.8 480.74 1041.66 480.52 1042.28 480.08 cv
1042.88 479.64 1043.2 479.02 1043.2 478.18 cv
1043.2 477.46 1042.98 476.9 1042.54 476.5 cv
1042.1 476.1 1041.38 475.8 1040.38 475.6 cv
1039.18 475.36 li
1037.7 475.08 1036.64 474.62 1035.98 473.98 cv
1035.32 473.36 1035 472.5 1035 471.38 cv
1035 470.1 1035.44 469.08 1036.36 468.34 cv
1037.26 467.6 1038.52 467.22 1040.12 467.22 cv
1040.8 467.22 1041.48 467.28 1042.2 467.4 cv
1042.9 467.52 1043.62 467.72 1044.38 467.96 cv
f
1048.26 471.12 mo
1050.06 471.12 li
1050.06 482.06 li
1048.26 482.06 li
1048.26 471.12 li
1048.26 466.86 mo
1050.06 466.86 li
1050.06 469.14 li
1048.26 469.14 li
1048.26 466.86 li
f
1061.02 476.46 mo
1061.02 475.18 1060.74 474.16 1060.22 473.44 cv
1059.68 472.72 1058.92 472.36 1057.96 472.36 cv
1057 472.36 1056.24 472.72 1055.7 473.44 cv
1055.16 474.16 1054.9 475.18 1054.9 476.46 cv
1054.9 477.76 1055.16 478.76 1055.7 479.48 cv
1056.24 480.2 1057 480.56 1057.96 480.56 cv
1058.92 480.56 1059.68 480.2 1060.22 479.48 cv
1060.74 478.76 1061.02 477.76 1061.02 476.46 cv
1062.82 480.7 mo
1062.82 482.54 1062.4 483.92 1061.58 484.84 cv
1060.74 485.74 1059.48 486.2 1057.78 486.2 cv
1057.14 486.2 1056.56 486.14 1056 486.06 cv
1055.44 485.96 1054.88 485.82 1054.36 485.62 cv
1054.36 483.88 li
1054.88 484.16 1055.4 484.36 1055.92 484.5 cv
1056.44 484.64 1056.96 484.72 1057.5 484.72 cv
1058.66 484.72 1059.54 484.4 1060.14 483.8 cv
1060.72 483.18 1061.02 482.26 1061.02 481.02 cv
1061.02 480.14 li
1060.64 480.78 1060.16 481.26 1059.58 481.58 cv
1059 481.9 1058.32 482.06 1057.52 482.06 cv
1056.16 482.06 1055.08 481.56 1054.26 480.54 cv
1053.44 479.52 1053.04 478.16 1053.04 476.46 cv
1053.04 474.78 1053.44 473.42 1054.26 472.4 cv
1055.08 471.38 1056.16 470.86 1057.52 470.86 cv
1058.32 470.86 1059 471.02 1059.58 471.34 cv
1060.16 471.66 1060.64 472.14 1061.02 472.78 cv
1061.02 471.12 li
1062.82 471.12 li
1062.82 480.7 li
f
1075.04 473.22 mo
1075.48 472.42 1076.02 471.84 1076.64 471.44 cv
1077.26 471.06 1078 470.86 1078.86 470.86 cv
1079.98 470.86 1080.86 471.26 1081.48 472.06 cv
1082.1 472.86 1082.42 474 1082.42 475.46 cv
1082.42 482.06 li
1080.62 482.06 li
1080.62 475.52 li
1080.62 474.48 1080.42 473.7 1080.06 473.18 cv
1079.68 472.68 1079.12 472.42 1078.36 472.42 cv
1077.42 472.42 1076.68 472.74 1076.14 473.36 cv
1075.6 473.98 1075.34 474.82 1075.34 475.88 cv
1075.34 482.06 li
1073.54 482.06 li
1073.54 475.52 li
1073.54 474.48 1073.34 473.7 1072.98 473.18 cv
1072.6 472.68 1072.02 472.42 1071.26 472.42 cv
1070.34 472.42 1069.6 472.74 1069.06 473.36 cv
1068.52 473.98 1068.26 474.82 1068.26 475.88 cv
1068.26 482.06 li
1066.46 482.06 li
1066.46 471.12 li
1068.26 471.12 li
1068.26 472.82 li
1068.66 472.16 1069.16 471.66 1069.74 471.34 cv
1070.3 471.02 1070.98 470.86 1071.78 470.86 cv
1072.58 470.86 1073.24 471.06 1073.8 471.46 cv
1074.36 471.86 1074.76 472.46 1075.04 473.22 cv
f
1090.24 472.38 mo
1089.28 472.38 1088.52 472.76 1087.96 473.52 cv
1087.4 474.28 1087.12 475.3 1087.12 476.6 cv
1087.12 477.92 1087.38 478.94 1087.94 479.7 cv
1088.5 480.46 1089.26 480.82 1090.24 480.82 cv
1091.2 480.82 1091.96 480.46 1092.52 479.7 cv
1093.08 478.94 1093.36 477.92 1093.36 476.6 cv
1093.36 475.32 1093.08 474.28 1092.52 473.52 cv
1091.96 472.76 1091.2 472.38 1090.24 472.38 cv
1090.24 470.86 mo
1091.8 470.86 1093.02 471.38 1093.92 472.38 cv
1094.8 473.4 1095.26 474.8 1095.26 476.6 cv
1095.26 478.4 1094.8 479.8 1093.92 480.8 cv
1093.02 481.82 1091.8 482.32 1090.24 482.32 cv
1088.66 482.32 1087.42 481.82 1086.54 480.8 cv
1085.66 479.8 1085.22 478.4 1085.22 476.6 cv
1085.22 474.8 1085.66 473.4 1086.54 472.38 cv
1087.42 471.38 1088.66 470.86 1090.24 470.86 cv
f
1098.24 471.12 mo
1100.04 471.12 li
1100.04 482.06 li
1098.24 482.06 li
1098.24 471.12 li
1098.24 466.86 mo
1100.04 466.86 li
1100.04 469.14 li
1098.24 469.14 li
1098.24 466.86 li
f
1111 472.78 mo
1111 466.86 li
1112.8 466.86 li
1112.8 482.06 li
1111 482.06 li
1111 480.42 li
1110.62 481.08 1110.14 481.56 1109.56 481.86 cv
1108.98 482.16 1108.3 482.32 1107.5 482.32 cv
1106.18 482.32 1105.1 481.8 1104.26 480.76 cv
1103.42 479.72 1103.02 478.32 1103.02 476.6 cv
1103.02 474.88 1103.42 473.5 1104.26 472.44 cv
1105.1 471.4 1106.18 470.86 1107.5 470.86 cv
1108.3 470.86 1108.98 471.02 1109.56 471.34 cv
1110.14 471.66 1110.62 472.14 1111 472.78 cv
1104.88 476.6 mo
1104.88 477.92 1105.14 478.96 1105.68 479.72 cv
1106.22 480.48 1106.98 480.84 1107.94 480.84 cv
1108.88 480.84 1109.62 480.48 1110.18 479.72 cv
1110.72 478.96 1111 477.92 1111 476.6 cv
1111 475.28 1110.72 474.26 1110.18 473.5 cv
1109.62 472.74 1108.88 472.36 1107.94 472.36 cv
1106.98 472.36 1106.22 472.74 1105.68 473.5 cv
1105.14 474.26 1104.88 475.28 1104.88 476.6 cv
f
1116.22 466.88 mo
1117.78 466.88 li
1118.74 468.42 1119.48 469.92 1119.96 471.4 cv
1120.44 472.88 1120.7 474.34 1120.7 475.78 cv
1120.7 477.24 1120.44 478.7 1119.96 480.18 cv
1119.48 481.66 1118.74 483.14 1117.78 484.68 cv
1116.22 484.68 li
1117.08 483.18 1117.72 481.72 1118.16 480.24 cv
1118.58 478.78 1118.8 477.3 1118.8 475.78 cv
1118.8 474.28 1118.58 472.8 1118.16 471.34 cv
1117.72 469.88 1117.08 468.4 1116.22 466.88 cv
f
1.5 lw
2 lc
861.004 502.92 mo
881.004 502.92 li
@
892.944 493.46 mo
892.944 504.8 li
895.324 504.8 li
897.324 504.8 898.804 504.36 899.744 503.44 cv
900.664 502.52 901.144 501.08 901.144 499.12 cv
901.144 497.16 900.664 495.74 899.744 494.82 cv
898.804 493.92 897.324 493.46 895.324 493.46 cv
892.944 493.46 li
890.964 491.84 mo
895.024 491.84 li
897.844 491.84 899.924 492.44 901.244 493.6 cv
902.564 494.78 903.224 496.62 903.224 499.12 cv
903.224 501.64 902.544 503.48 901.224 504.66 cv
899.904 505.84 897.824 506.42 895.024 506.42 cv
890.964 506.42 li
890.964 491.84 li
f
908.344 499.46 mo
908.344 504.8 li
911.504 504.8 li
912.564 504.8 913.344 504.58 913.864 504.14 cv
914.364 503.7 914.624 503.04 914.624 502.12 cv
914.624 501.22 914.364 500.56 913.864 500.12 cv
913.344 499.68 912.564 499.46 911.504 499.46 cv
908.344 499.46 li
908.344 493.46 mo
908.344 497.86 li
911.264 497.86 li
912.224 497.86 912.924 497.68 913.404 497.32 cv
913.884 496.96 914.124 496.42 914.124 495.66 cv
914.124 494.94 913.884 494.38 913.404 494.02 cv
912.924 493.66 912.224 493.46 911.264 493.46 cv
908.344 493.46 li
906.364 491.84 mo
911.404 491.84 li
912.904 491.84 914.064 492.16 914.884 492.78 cv
915.684 493.42 916.104 494.3 916.104 495.44 cv
916.104 496.34 915.884 497.06 915.464 497.58 cv
915.044 498.1 914.444 498.44 913.644 498.56 cv
914.604 498.78 915.364 499.22 915.904 499.88 cv
916.424 500.54 916.704 501.36 916.704 502.34 cv
916.704 503.66 916.244 504.66 915.364 505.36 cv
914.484 506.08 913.224 506.42 911.604 506.42 cv
906.364 506.42 li
906.364 491.84 li
f
920.084 491.84 mo
922.744 491.84 li
929.204 504.04 li
929.204 491.84 li
931.124 491.84 li
931.124 506.42 li
928.464 506.42 li
922.004 494.22 li
922.004 506.42 li
920.084 506.42 li
920.084 491.84 li
f
945.644 491.24 mo
944.764 492.76 944.124 494.24 943.704 495.7 cv
943.264 497.16 943.064 498.64 943.064 500.14 cv
943.064 501.66 943.264 503.14 943.704 504.6 cv
944.124 506.08 944.764 507.54 945.644 509.04 cv
944.084 509.04 li
943.104 507.5 942.364 506.02 941.884 504.54 cv
941.404 503.06 941.164 501.6 941.164 500.14 cv
941.164 498.7 941.404 497.24 941.884 495.76 cv
942.364 494.28 943.084 492.78 944.084 491.24 cv
945.644 491.24 li
f
947.204 491.84 mo
959.524 491.84 li
959.524 493.5 li
954.344 493.5 li
954.344 506.42 li
952.364 506.42 li
952.364 493.5 li
947.204 493.5 li
947.204 491.84 li
f
967.684 497.16 mo
967.484 497.04 967.264 496.96 967.024 496.9 cv
966.784 496.86 966.524 496.82 966.244 496.82 cv
965.224 496.82 964.444 497.16 963.904 497.82 cv
963.344 498.48 963.084 499.42 963.084 500.66 cv
963.084 506.42 li
961.284 506.42 li
961.284 495.48 li
963.084 495.48 li
963.084 497.18 li
963.444 496.52 963.944 496.02 964.544 495.7 cv
965.144 495.38 965.884 495.22 966.764 495.22 cv
966.884 495.22 967.024 495.24 967.184 495.24 cv
967.324 495.26 967.484 495.28 967.684 495.32 cv
967.684 497.16 li
f
974.544 500.92 mo
973.084 500.92 972.084 501.1 971.524 501.42 cv
970.964 501.76 970.684 502.32 970.684 503.12 cv
970.684 503.76 970.884 504.28 971.304 504.64 cv
971.724 505.02 972.304 505.2 973.024 505.2 cv
974.024 505.2 974.824 504.86 975.424 504.14 cv
976.024 503.44 976.324 502.5 976.324 501.32 cv
976.324 500.92 li
974.544 500.92 li
978.124 500.18 mo
978.124 506.42 li
976.324 506.42 li
976.324 504.76 li
975.904 505.44 975.384 505.92 974.784 506.22 cv
974.184 506.52 973.424 506.68 972.544 506.68 cv
971.424 506.68 970.524 506.38 969.864 505.76 cv
969.204 505.14 968.884 504.3 968.884 503.24 cv
968.884 502.02 969.284 501.1 970.124 500.46 cv
970.944 499.84 972.164 499.52 973.804 499.52 cv
976.324 499.52 li
976.324 499.34 li
976.324 498.52 976.044 497.88 975.504 497.42 cv
974.964 496.98 974.204 496.74 973.224 496.74 cv
972.584 496.74 971.984 496.82 971.384 496.98 cv
970.784 497.14 970.224 497.36 969.684 497.64 cv
969.684 495.98 li
970.324 495.74 970.964 495.54 971.584 495.42 cv
972.204 495.3 972.804 495.22 973.404 495.22 cv
974.984 495.22 976.164 495.64 976.944 496.46 cv
977.724 497.28 978.124 498.52 978.124 500.18 cv
f
981.824 495.48 mo
983.624 495.48 li
983.624 506.42 li
981.824 506.42 li
981.824 495.48 li
981.824 491.22 mo
983.624 491.22 li
983.624 493.5 li
981.824 493.5 li
981.824 491.22 li
f
996.484 499.82 mo
996.484 506.42 li
994.684 506.42 li
994.684 499.88 li
994.684 498.84 994.464 498.08 994.064 497.56 cv
993.664 497.04 993.064 496.78 992.264 496.78 cv
991.284 496.78 990.524 497.1 989.964 497.72 cv
989.404 498.34 989.124 499.18 989.124 500.24 cv
989.124 506.42 li
987.324 506.42 li
987.324 495.48 li
989.124 495.48 li
989.124 497.18 li
989.544 496.54 990.044 496.04 990.644 495.72 cv
991.224 495.4 991.904 495.22 992.664 495.22 cv
993.904 495.22 994.864 495.62 995.504 496.4 cv
996.144 497.18 996.484 498.32 996.484 499.82 cv
f
1000.06 495.48 mo
1001.86 495.48 li
1001.86 506.42 li
1000.06 506.42 li
1000.06 495.48 li
1000.06 491.22 mo
1001.86 491.22 li
1001.86 493.5 li
1000.06 493.5 li
1000.06 491.22 li
f
1014.72 499.82 mo
1014.72 506.42 li
1012.92 506.42 li
1012.92 499.88 li
1012.92 498.84 1012.7 498.08 1012.3 497.56 cv
1011.9 497.04 1011.3 496.78 1010.5 496.78 cv
1009.52 496.78 1008.76 497.1 1008.2 497.72 cv
1007.64 498.34 1007.36 499.18 1007.36 500.24 cv
1007.36 506.42 li
1005.56 506.42 li
1005.56 495.48 li
1007.36 495.48 li
1007.36 497.18 li
1007.78 496.54 1008.28 496.04 1008.88 495.72 cv
1009.46 495.4 1010.14 495.22 1010.9 495.22 cv
1012.14 495.22 1013.1 495.62 1013.74 496.4 cv
1014.38 497.18 1014.72 498.32 1014.72 499.82 cv
f
1025.5 500.82 mo
1025.5 499.54 1025.22 498.52 1024.7 497.8 cv
1024.16 497.08 1023.4 496.72 1022.44 496.72 cv
1021.48 496.72 1020.72 497.08 1020.18 497.8 cv
1019.64 498.52 1019.38 499.54 1019.38 500.82 cv
1019.38 502.12 1019.64 503.12 1020.18 503.84 cv
1020.72 504.56 1021.48 504.92 1022.44 504.92 cv
1023.4 504.92 1024.16 504.56 1024.7 503.84 cv
1025.22 503.12 1025.5 502.12 1025.5 500.82 cv
1027.3 505.06 mo
1027.3 506.9 1026.88 508.28 1026.06 509.2 cv
1025.22 510.1 1023.96 510.56 1022.26 510.56 cv
1021.62 510.56 1021.04 510.5 1020.48 510.42 cv
1019.92 510.32 1019.36 510.18 1018.84 509.98 cv
1018.84 508.24 li
1019.36 508.52 1019.88 508.72 1020.4 508.86 cv
1020.92 509 1021.44 509.08 1021.98 509.08 cv
1023.14 509.08 1024.02 508.76 1024.62 508.16 cv
1025.2 507.54 1025.5 506.62 1025.5 505.38 cv
1025.5 504.5 li
1025.12 505.14 1024.64 505.62 1024.06 505.94 cv
1023.48 506.26 1022.8 506.42 1022 506.42 cv
1020.64 506.42 1019.56 505.92 1018.74 504.9 cv
1017.92 503.88 1017.52 502.52 1017.52 500.82 cv
1017.52 499.14 1017.92 497.78 1018.74 496.76 cv
1019.56 495.74 1020.64 495.22 1022 495.22 cv
1022.8 495.22 1023.48 495.38 1024.06 495.7 cv
1024.64 496.02 1025.12 496.5 1025.5 497.14 cv
1025.5 495.48 li
1027.3 495.48 li
1027.3 505.06 li
f
1031.46 503.94 mo
1033.52 503.94 li
1033.52 505.62 li
1031.92 508.72 li
1030.66 508.72 li
1031.46 505.62 li
1031.46 503.94 li
f
1043.8 491.84 mo
1045.78 491.84 li
1045.78 506.42 li
1043.8 506.42 li
1043.8 491.84 li
f
1056.6 495.8 mo
1056.6 497.5 li
1056.08 497.26 1055.56 497.06 1055.02 496.92 cv
1054.46 496.8 1053.9 496.72 1053.32 496.72 cv
1052.42 496.72 1051.74 496.86 1051.3 497.14 cv
1050.86 497.42 1050.64 497.82 1050.64 498.36 cv
1050.64 498.78 1050.8 499.1 1051.12 499.34 cv
1051.44 499.58 1052.08 499.82 1053.04 500.02 cv
1053.66 500.16 li
1054.94 500.44 1055.84 500.84 1056.38 501.32 cv
1056.9 501.82 1057.18 502.52 1057.18 503.4 cv
1057.18 504.42 1056.78 505.22 1055.98 505.8 cv
1055.18 506.4 1054.06 506.68 1052.66 506.68 cv
1052.06 506.68 1051.46 506.62 1050.82 506.52 cv
1050.18 506.42 1049.52 506.26 1048.82 506.02 cv
1048.82 504.16 li
1049.48 504.52 1050.14 504.78 1050.78 504.94 cv
1051.42 505.12 1052.06 505.2 1052.7 505.2 cv
1053.54 505.2 1054.2 505.06 1054.66 504.78 cv
1055.1 504.5 1055.34 504.08 1055.34 503.54 cv
1055.34 503.06 1055.16 502.68 1054.84 502.42 cv
1054.52 502.16 1053.8 501.9 1052.68 501.66 cv
1052.06 501.52 li
1050.94 501.28 1050.12 500.92 1049.64 500.44 cv
1049.14 499.96 1048.9 499.3 1048.9 498.44 cv
1048.9 497.42 1049.26 496.62 1049.98 496.06 cv
1050.7 495.5 1051.74 495.22 1053.1 495.22 cv
1053.76 495.22 1054.38 495.28 1054.98 495.38 cv
1055.56 495.48 1056.1 495.62 1056.6 495.8 cv
f
1060.04 495.48 mo
1061.84 495.48 li
1061.84 506.42 li
1060.04 506.42 li
1060.04 495.48 li
1060.04 491.22 mo
1061.84 491.22 li
1061.84 493.5 li
1060.04 493.5 li
1060.04 491.22 li
f
1072.8 500.82 mo
1072.8 499.54 1072.52 498.52 1072 497.8 cv
1071.46 497.08 1070.7 496.72 1069.74 496.72 cv
1068.78 496.72 1068.02 497.08 1067.48 497.8 cv
1066.94 498.52 1066.68 499.54 1066.68 500.82 cv
1066.68 502.12 1066.94 503.12 1067.48 503.84 cv
1068.02 504.56 1068.78 504.92 1069.74 504.92 cv
1070.7 504.92 1071.46 504.56 1072 503.84 cv
1072.52 503.12 1072.8 502.12 1072.8 500.82 cv
1074.6 505.06 mo
1074.6 506.9 1074.18 508.28 1073.36 509.2 cv
1072.52 510.1 1071.26 510.56 1069.56 510.56 cv
1068.92 510.56 1068.34 510.5 1067.78 510.42 cv
1067.22 510.32 1066.66 510.18 1066.14 509.98 cv
1066.14 508.24 li
1066.66 508.52 1067.18 508.72 1067.7 508.86 cv
1068.22 509 1068.74 509.08 1069.28 509.08 cv
1070.44 509.08 1071.32 508.76 1071.92 508.16 cv
1072.5 507.54 1072.8 506.62 1072.8 505.38 cv
1072.8 504.5 li
1072.42 505.14 1071.94 505.62 1071.36 505.94 cv
1070.78 506.26 1070.1 506.42 1069.3 506.42 cv
1067.94 506.42 1066.86 505.92 1066.04 504.9 cv
1065.22 503.88 1064.82 502.52 1064.82 500.82 cv
1064.82 499.14 1065.22 497.78 1066.04 496.76 cv
1066.86 495.74 1067.94 495.22 1069.3 495.22 cv
1070.1 495.22 1070.78 495.38 1071.36 495.7 cv
1071.94 496.02 1072.42 496.5 1072.8 497.14 cv
1072.8 495.48 li
1074.6 495.48 li
1074.6 505.06 li
f
1086.82 497.58 mo
1087.26 496.78 1087.8 496.2 1088.42 495.8 cv
1089.04 495.42 1089.78 495.22 1090.64 495.22 cv
1091.76 495.22 1092.64 495.62 1093.26 496.42 cv
1093.88 497.22 1094.2 498.36 1094.2 499.82 cv
1094.2 506.42 li
1092.4 506.42 li
1092.4 499.88 li
1092.4 498.84 1092.2 498.06 1091.84 497.54 cv
1091.46 497.04 1090.9 496.78 1090.14 496.78 cv
1089.2 496.78 1088.46 497.1 1087.92 497.72 cv
1087.38 498.34 1087.12 499.18 1087.12 500.24 cv
1087.12 506.42 li
1085.32 506.42 li
1085.32 499.88 li
1085.32 498.84 1085.12 498.06 1084.76 497.54 cv
1084.38 497.04 1083.8 496.78 1083.04 496.78 cv
1082.12 496.78 1081.38 497.1 1080.84 497.72 cv
1080.3 498.34 1080.04 499.18 1080.04 500.24 cv
1080.04 506.42 li
1078.24 506.42 li
1078.24 495.48 li
1080.04 495.48 li
1080.04 497.18 li
1080.44 496.52 1080.94 496.02 1081.52 495.7 cv
1082.08 495.38 1082.76 495.22 1083.56 495.22 cv
1084.36 495.22 1085.02 495.42 1085.58 495.82 cv
1086.14 496.22 1086.54 496.82 1086.82 497.58 cv
f
1102.02 496.74 mo
1101.06 496.74 1100.3 497.12 1099.74 497.88 cv
1099.18 498.64 1098.9 499.66 1098.9 500.96 cv
1098.9 502.28 1099.16 503.3 1099.72 504.06 cv
1100.28 504.82 1101.04 505.18 1102.02 505.18 cv
1102.98 505.18 1103.74 504.82 1104.3 504.06 cv
1104.86 503.3 1105.14 502.28 1105.14 500.96 cv
1105.14 499.68 1104.86 498.64 1104.3 497.88 cv
1103.74 497.12 1102.98 496.74 1102.02 496.74 cv
1102.02 495.22 mo
1103.58 495.22 1104.8 495.74 1105.7 496.74 cv
1106.58 497.76 1107.04 499.16 1107.04 500.96 cv
1107.04 502.76 1106.58 504.16 1105.7 505.16 cv
1104.8 506.18 1103.58 506.68 1102.02 506.68 cv
1100.44 506.68 1099.2 506.18 1098.32 505.16 cv
1097.44 504.16 1097 502.76 1097 500.96 cv
1097 499.16 1097.44 497.76 1098.32 496.74 cv
1099.2 495.74 1100.44 495.22 1102.02 495.22 cv
f
1110.02 495.48 mo
1111.82 495.48 li
1111.82 506.42 li
1110.02 506.42 li
1110.02 495.48 li
1110.02 491.22 mo
1111.82 491.22 li
1111.82 493.5 li
1110.02 493.5 li
1110.02 491.22 li
f
1122.78 497.14 mo
1122.78 491.22 li
1124.58 491.22 li
1124.58 506.42 li
1122.78 506.42 li
1122.78 504.78 li
1122.4 505.44 1121.92 505.92 1121.34 506.22 cv
1120.76 506.52 1120.08 506.68 1119.28 506.68 cv
1117.96 506.68 1116.88 506.16 1116.04 505.12 cv
1115.2 504.08 1114.8 502.68 1114.8 500.96 cv
1114.8 499.24 1115.2 497.86 1116.04 496.8 cv
1116.88 495.76 1117.96 495.22 1119.28 495.22 cv
1120.08 495.22 1120.76 495.38 1121.34 495.7 cv
1121.92 496.02 1122.4 496.5 1122.78 497.14 cv
1116.66 500.96 mo
1116.66 502.28 1116.92 503.32 1117.46 504.08 cv
1118 504.84 1118.76 505.2 1119.72 505.2 cv
1120.66 505.2 1121.4 504.84 1121.96 504.08 cv
1122.5 503.32 1122.78 502.28 1122.78 500.96 cv
1122.78 499.64 1122.5 498.62 1121.96 497.86 cv
1121.4 497.1 1120.66 496.72 1119.72 496.72 cv
1118.76 496.72 1118 497.1 1117.46 497.86 cv
1116.92 498.62 1116.66 499.64 1116.66 500.96 cv
f
1128 491.24 mo
1129.56 491.24 li
1130.52 492.78 1131.26 494.28 1131.74 495.76 cv
1132.22 497.24 1132.48 498.7 1132.48 500.14 cv
1132.48 501.6 1132.22 503.06 1131.74 504.54 cv
1131.26 506.02 1130.52 507.5 1129.56 509.04 cv
1128 509.04 li
1128.86 507.54 1129.5 506.08 1129.94 504.6 cv
1130.36 503.14 1130.58 501.66 1130.58 500.14 cv
1130.58 498.64 1130.36 497.16 1129.94 495.7 cv
1129.5 494.24 1128.86 492.76 1128 491.24 cv
f
861.004 527.279 mo
881.004 527.279 li
@
868.004 530.279 mo
874.004 524.279 li
868.004 524.279 mo
874.004 530.279 li
f
1 lw
0 lc
868.004 530.279 mo
874.004 524.279 li
868.004 524.279 mo
874.004 530.279 li
@
892.944 517.819 mo
892.944 529.159 li
895.324 529.159 li
897.324 529.159 898.804 528.719 899.744 527.799 cv
900.664 526.879 901.144 525.439 901.144 523.479 cv
901.144 521.519 900.664 520.099 899.744 519.179 cv
898.804 518.279 897.324 517.819 895.324 517.819 cv
892.944 517.819 li
890.964 516.199 mo
895.024 516.199 li
897.844 516.199 899.924 516.799 901.244 517.959 cv
902.564 519.139 903.224 520.979 903.224 523.479 cv
903.224 525.999 902.544 527.839 901.224 529.019 cv
899.904 530.199 897.824 530.779 895.024 530.779 cv
890.964 530.779 li
890.964 516.199 li
f
908.344 523.819 mo
908.344 529.159 li
911.504 529.159 li
912.564 529.159 913.344 528.939 913.864 528.499 cv
914.364 528.059 914.624 527.399 914.624 526.479 cv
914.624 525.579 914.364 524.919 913.864 524.479 cv
913.344 524.039 912.564 523.819 911.504 523.819 cv
908.344 523.819 li
908.344 517.819 mo
908.344 522.219 li
911.264 522.219 li
912.224 522.219 912.924 522.039 913.404 521.679 cv
913.884 521.319 914.124 520.779 914.124 520.019 cv
914.124 519.299 913.884 518.739 913.404 518.379 cv
912.924 518.019 912.224 517.819 911.264 517.819 cv
908.344 517.819 li
906.364 516.199 mo
911.404 516.199 li
912.904 516.199 914.064 516.519 914.884 517.139 cv
915.684 517.779 916.104 518.659 916.104 519.799 cv
916.104 520.699 915.884 521.419 915.464 521.939 cv
915.044 522.459 914.444 522.799 913.644 522.919 cv
914.604 523.139 915.364 523.579 915.904 524.239 cv
916.424 524.899 916.704 525.719 916.704 526.699 cv
916.704 528.019 916.244 529.019 915.364 529.719 cv
914.484 530.439 913.224 530.779 911.604 530.779 cv
906.364 530.779 li
906.364 516.199 li
f
920.084 516.199 mo
922.744 516.199 li
929.204 528.399 li
929.204 516.199 li
931.124 516.199 li
931.124 530.779 li
928.464 530.779 li
922.004 518.579 li
922.004 530.779 li
920.084 530.779 li
920.084 516.199 li
f
945.644 515.599 mo
944.764 517.119 944.124 518.599 943.704 520.059 cv
943.264 521.519 943.064 522.999 943.064 524.499 cv
943.064 526.019 943.264 527.499 943.704 528.959 cv
944.124 530.439 944.764 531.899 945.644 533.399 cv
944.084 533.399 li
943.104 531.859 942.364 530.379 941.884 528.899 cv
941.404 527.419 941.164 525.959 941.164 524.499 cv
941.164 523.059 941.404 521.599 941.884 520.119 cv
942.364 518.639 943.084 517.139 944.084 515.599 cv
945.644 515.599 li
f
947.204 516.199 mo
959.524 516.199 li
959.524 517.859 li
954.344 517.859 li
954.344 530.779 li
952.364 530.779 li
952.364 517.859 li
947.204 517.859 li
947.204 516.199 li
f
970.704 524.859 mo
970.704 525.739 li
962.444 525.739 li
962.524 526.979 962.884 527.939 963.564 528.579 cv
964.224 529.219 965.144 529.539 966.344 529.539 cv
967.024 529.539 967.704 529.459 968.344 529.299 cv
968.984 529.139 969.644 528.879 970.284 528.519 cv
970.284 530.219 li
969.644 530.499 968.984 530.719 968.304 530.839 cv
967.624 530.959 966.924 531.039 966.244 531.039 cv
964.484 531.039 963.104 530.539 962.084 529.539 cv
961.064 528.539 960.564 527.159 960.564 525.419 cv
960.564 523.639 961.044 522.219 962.004 521.159 cv
962.964 520.119 964.284 519.579 965.924 519.579 cv
967.404 519.579 968.564 520.059 969.424 520.999 cv
970.264 521.959 970.704 523.239 970.704 524.859 cv
968.904 524.339 mo
968.884 523.359 968.604 522.579 968.084 521.979 cv
967.544 521.399 966.824 521.099 965.944 521.099 cv
964.944 521.099 964.144 521.399 963.544 521.959 cv
962.944 522.519 962.584 523.319 962.504 524.339 cv
968.904 524.339 li
f
980.624 520.159 mo
980.624 521.859 li
980.104 521.619 979.584 521.419 979.044 521.279 cv
978.484 521.159 977.924 521.079 977.344 521.079 cv
976.444 521.079 975.764 521.219 975.324 521.499 cv
974.884 521.779 974.664 522.179 974.664 522.719 cv
974.664 523.139 974.824 523.459 975.144 523.699 cv
975.464 523.939 976.104 524.179 977.064 524.379 cv
977.684 524.519 li
978.964 524.799 979.864 525.199 980.404 525.679 cv
980.924 526.179 981.204 526.879 981.204 527.759 cv
981.204 528.779 980.804 529.579 980.004 530.159 cv
979.204 530.759 978.084 531.039 976.684 531.039 cv
976.084 531.039 975.484 530.979 974.844 530.879 cv
974.204 530.779 973.544 530.619 972.844 530.379 cv
972.844 528.519 li
973.504 528.879 974.164 529.139 974.804 529.299 cv
975.444 529.479 976.084 529.559 976.724 529.559 cv
977.564 529.559 978.224 529.419 978.684 529.139 cv
979.124 528.859 979.364 528.439 979.364 527.899 cv
979.364 527.419 979.184 527.039 978.864 526.779 cv
978.544 526.519 977.824 526.259 976.704 526.019 cv
976.084 525.879 li
974.964 525.639 974.144 525.279 973.664 524.799 cv
973.164 524.319 972.924 523.659 972.924 522.799 cv
972.924 521.779 973.284 520.979 974.004 520.419 cv
974.724 519.859 975.764 519.579 977.124 519.579 cv
977.784 519.579 978.404 519.639 979.004 519.739 cv
979.584 519.839 980.124 519.979 980.624 520.159 cv
f
985.844 516.739 mo
985.844 519.839 li
989.544 519.839 li
989.544 521.239 li
985.844 521.239 li
985.844 527.179 li
985.844 528.079 985.964 528.659 986.204 528.899 cv
986.444 529.159 986.944 529.279 987.704 529.279 cv
989.544 529.279 li
989.544 530.779 li
987.704 530.779 li
986.304 530.779 985.344 530.519 984.824 529.999 cv
984.304 529.479 984.044 528.539 984.044 527.179 cv
984.044 521.239 li
982.724 521.239 li
982.724 519.839 li
984.044 519.839 li
984.044 516.739 li
985.844 516.739 li
f
991.904 519.839 mo
993.704 519.839 li
993.704 530.779 li
991.904 530.779 li
991.904 519.839 li
991.904 515.579 mo
993.704 515.579 li
993.704 517.859 li
991.904 517.859 li
991.904 515.579 li
f
1006.56 524.179 mo
1006.56 530.779 li
1004.76 530.779 li
1004.76 524.239 li
1004.76 523.199 1004.54 522.439 1004.14 521.919 cv
1003.74 521.399 1003.14 521.139 1002.34 521.139 cv
1001.36 521.139 1000.6 521.459 1000.04 522.079 cv
999.484 522.699 999.204 523.539 999.204 524.599 cv
999.204 530.779 li
997.404 530.779 li
997.404 519.839 li
999.204 519.839 li
999.204 521.539 li
999.624 520.899 1000.12 520.399 1000.72 520.079 cv
1001.3 519.759 1001.98 519.579 1002.74 519.579 cv
1003.98 519.579 1004.94 519.979 1005.58 520.759 cv
1006.22 521.539 1006.56 522.679 1006.56 524.179 cv
f
1017.34 525.179 mo
1017.34 523.899 1017.06 522.879 1016.54 522.159 cv
1016 521.439 1015.24 521.079 1014.28 521.079 cv
1013.32 521.079 1012.56 521.439 1012.02 522.159 cv
1011.48 522.879 1011.22 523.899 1011.22 525.179 cv
1011.22 526.479 1011.48 527.479 1012.02 528.199 cv
1012.56 528.919 1013.32 529.279 1014.28 529.279 cv
1015.24 529.279 1016 528.919 1016.54 528.199 cv
1017.06 527.479 1017.34 526.479 1017.34 525.179 cv
1019.14 529.419 mo
1019.14 531.259 1018.72 532.639 1017.9 533.559 cv
1017.06 534.459 1015.8 534.919 1014.1 534.919 cv
1013.46 534.919 1012.88 534.859 1012.32 534.779 cv
1011.76 534.679 1011.2 534.539 1010.68 534.339 cv
1010.68 532.599 li
1011.2 532.879 1011.72 533.079 1012.24 533.219 cv
1012.76 533.359 1013.28 533.439 1013.82 533.439 cv
1014.98 533.439 1015.86 533.119 1016.46 532.519 cv
1017.04 531.899 1017.34 530.979 1017.34 529.739 cv
1017.34 528.859 li
1016.96 529.499 1016.48 529.979 1015.9 530.299 cv
1015.32 530.619 1014.64 530.779 1013.84 530.779 cv
1012.48 530.779 1011.4 530.279 1010.58 529.259 cv
1009.76 528.239 1009.36 526.879 1009.36 525.179 cv
1009.36 523.499 1009.76 522.139 1010.58 521.119 cv
1011.4 520.099 1012.48 519.579 1013.84 519.579 cv
1014.64 519.579 1015.32 519.739 1015.9 520.059 cv
1016.48 520.379 1016.96 520.859 1017.34 521.499 cv
1017.34 519.839 li
1019.14 519.839 li
1019.14 529.419 li
f
1023.3 528.299 mo
1025.36 528.299 li
1025.36 529.979 li
1023.76 533.079 li
1022.5 533.079 li
1023.3 529.979 li
1023.3 528.299 li
f
1035.64 516.199 mo
1037.62 516.199 li
1037.62 530.779 li
1035.64 530.779 li
1035.64 516.199 li
f
1048.44 520.159 mo
1048.44 521.859 li
1047.92 521.619 1047.4 521.419 1046.86 521.279 cv
1046.3 521.159 1045.74 521.079 1045.16 521.079 cv
1044.26 521.079 1043.58 521.219 1043.14 521.499 cv
1042.7 521.779 1042.48 522.179 1042.48 522.719 cv
1042.48 523.139 1042.64 523.459 1042.96 523.699 cv
1043.28 523.939 1043.92 524.179 1044.88 524.379 cv
1045.5 524.519 li
1046.78 524.799 1047.68 525.199 1048.22 525.679 cv
1048.74 526.179 1049.02 526.879 1049.02 527.759 cv
1049.02 528.779 1048.62 529.579 1047.82 530.159 cv
1047.02 530.759 1045.9 531.039 1044.5 531.039 cv
1043.9 531.039 1043.3 530.979 1042.66 530.879 cv
1042.02 530.779 1041.36 530.619 1040.66 530.379 cv
1040.66 528.519 li
1041.32 528.879 1041.98 529.139 1042.62 529.299 cv
1043.26 529.479 1043.9 529.559 1044.54 529.559 cv
1045.38 529.559 1046.04 529.419 1046.5 529.139 cv
1046.94 528.859 1047.18 528.439 1047.18 527.899 cv
1047.18 527.419 1047 527.039 1046.68 526.779 cv
1046.36 526.519 1045.64 526.259 1044.52 526.019 cv
1043.9 525.879 li
1042.78 525.639 1041.96 525.279 1041.48 524.799 cv
1040.98 524.319 1040.74 523.659 1040.74 522.799 cv
1040.74 521.779 1041.1 520.979 1041.82 520.419 cv
1042.54 519.859 1043.58 519.579 1044.94 519.579 cv
1045.6 519.579 1046.22 519.639 1046.82 519.739 cv
1047.4 519.839 1047.94 519.979 1048.44 520.159 cv
f
1051.88 519.839 mo
1053.68 519.839 li
1053.68 530.779 li
1051.88 530.779 li
1051.88 519.839 li
1051.88 515.579 mo
1053.68 515.579 li
1053.68 517.859 li
1051.88 517.859 li
1051.88 515.579 li
f
1064.64 525.179 mo
1064.64 523.899 1064.36 522.879 1063.84 522.159 cv
1063.3 521.439 1062.54 521.079 1061.58 521.079 cv
1060.62 521.079 1059.86 521.439 1059.32 522.159 cv
1058.78 522.879 1058.52 523.899 1058.52 525.179 cv
1058.52 526.479 1058.78 527.479 1059.32 528.199 cv
1059.86 528.919 1060.62 529.279 1061.58 529.279 cv
1062.54 529.279 1063.3 528.919 1063.84 528.199 cv
1064.36 527.479 1064.64 526.479 1064.64 525.179 cv
1066.44 529.419 mo
1066.44 531.259 1066.02 532.639 1065.2 533.559 cv
1064.36 534.459 1063.1 534.919 1061.4 534.919 cv
1060.76 534.919 1060.18 534.859 1059.62 534.779 cv
1059.06 534.679 1058.5 534.539 1057.98 534.339 cv
1057.98 532.599 li
1058.5 532.879 1059.02 533.079 1059.54 533.219 cv
1060.06 533.359 1060.58 533.439 1061.12 533.439 cv
1062.28 533.439 1063.16 533.119 1063.76 532.519 cv
1064.34 531.899 1064.64 530.979 1064.64 529.739 cv
1064.64 528.859 li
1064.26 529.499 1063.78 529.979 1063.2 530.299 cv
1062.62 530.619 1061.94 530.779 1061.14 530.779 cv
1059.78 530.779 1058.7 530.279 1057.88 529.259 cv
1057.06 528.239 1056.66 526.879 1056.66 525.179 cv
1056.66 523.499 1057.06 522.139 1057.88 521.119 cv
1058.7 520.099 1059.78 519.579 1061.14 519.579 cv
1061.94 519.579 1062.62 519.739 1063.2 520.059 cv
1063.78 520.379 1064.26 520.859 1064.64 521.499 cv
1064.64 519.839 li
1066.44 519.839 li
1066.44 529.419 li
f
1078.66 521.939 mo
1079.1 521.139 1079.64 520.559 1080.26 520.159 cv
1080.88 519.779 1081.62 519.579 1082.48 519.579 cv
1083.6 519.579 1084.48 519.979 1085.1 520.779 cv
1085.72 521.579 1086.04 522.719 1086.04 524.179 cv
1086.04 530.779 li
1084.24 530.779 li
1084.24 524.239 li
1084.24 523.199 1084.04 522.419 1083.68 521.899 cv
1083.3 521.399 1082.74 521.139 1081.98 521.139 cv
1081.04 521.139 1080.3 521.459 1079.76 522.079 cv
1079.22 522.699 1078.96 523.539 1078.96 524.599 cv
1078.96 530.779 li
1077.16 530.779 li
1077.16 524.239 li
1077.16 523.199 1076.96 522.419 1076.6 521.899 cv
1076.22 521.399 1075.64 521.139 1074.88 521.139 cv
1073.96 521.139 1073.22 521.459 1072.68 522.079 cv
1072.14 522.699 1071.88 523.539 1071.88 524.599 cv
1071.88 530.779 li
1070.08 530.779 li
1070.08 519.839 li
1071.88 519.839 li
1071.88 521.539 li
1072.28 520.879 1072.78 520.379 1073.36 520.059 cv
1073.92 519.739 1074.6 519.579 1075.4 519.579 cv
1076.2 519.579 1076.86 519.779 1077.42 520.179 cv
1077.98 520.579 1078.38 521.179 1078.66 521.939 cv
f
1093.86 521.099 mo
1092.9 521.099 1092.14 521.479 1091.58 522.239 cv
1091.02 522.999 1090.74 524.019 1090.74 525.319 cv
1090.74 526.639 1091 527.659 1091.56 528.419 cv
1092.12 529.179 1092.88 529.539 1093.86 529.539 cv
1094.82 529.539 1095.58 529.179 1096.14 528.419 cv
1096.7 527.659 1096.98 526.639 1096.98 525.319 cv
1096.98 524.039 1096.7 522.999 1096.14 522.239 cv
1095.58 521.479 1094.82 521.099 1093.86 521.099 cv
1093.86 519.579 mo
1095.42 519.579 1096.64 520.099 1097.54 521.099 cv
1098.42 522.119 1098.88 523.519 1098.88 525.319 cv
1098.88 527.119 1098.42 528.519 1097.54 529.519 cv
1096.64 530.539 1095.42 531.039 1093.86 531.039 cv
1092.28 531.039 1091.04 530.539 1090.16 529.519 cv
1089.28 528.519 1088.84 527.119 1088.84 525.319 cv
1088.84 523.519 1089.28 522.119 1090.16 521.099 cv
1091.04 520.099 1092.28 519.579 1093.86 519.579 cv
f
1101.86 519.839 mo
1103.66 519.839 li
1103.66 530.779 li
1101.86 530.779 li
1101.86 519.839 li
1101.86 515.579 mo
1103.66 515.579 li
1103.66 517.859 li
1101.86 517.859 li
1101.86 515.579 li
f
1114.62 521.499 mo
1114.62 515.579 li
1116.42 515.579 li
1116.42 530.779 li
1114.62 530.779 li
1114.62 529.139 li
1114.24 529.799 1113.76 530.279 1113.18 530.579 cv
1112.6 530.879 1111.92 531.039 1111.12 531.039 cv
1109.8 531.039 1108.72 530.519 1107.88 529.479 cv
1107.04 528.439 1106.64 527.039 1106.64 525.319 cv
1106.64 523.599 1107.04 522.219 1107.88 521.159 cv
1108.72 520.119 1109.8 519.579 1111.12 519.579 cv
1111.92 519.579 1112.6 519.739 1113.18 520.059 cv
1113.76 520.379 1114.24 520.859 1114.62 521.499 cv
1108.5 525.319 mo
1108.5 526.639 1108.76 527.679 1109.3 528.439 cv
1109.84 529.199 1110.6 529.559 1111.56 529.559 cv
1112.5 529.559 1113.24 529.199 1113.8 528.439 cv
1114.34 527.679 1114.62 526.639 1114.62 525.319 cv
1114.62 523.999 1114.34 522.979 1113.8 522.219 cv
1113.24 521.459 1112.5 521.079 1111.56 521.079 cv
1110.6 521.079 1109.84 521.459 1109.3 522.219 cv
1108.76 522.979 1108.5 523.999 1108.5 525.319 cv
f
1119.84 515.599 mo
1121.4 515.599 li
1122.36 517.139 1123.1 518.639 1123.58 520.119 cv
1124.06 521.599 1124.32 523.059 1124.32 524.499 cv
1124.32 525.959 1124.06 527.419 1123.58 528.899 cv
1123.1 530.379 1122.36 531.859 1121.4 533.399 cv
1119.84 533.399 li
1120.7 531.899 1121.34 530.439 1121.78 528.959 cv
1122.2 527.499 1122.42 526.019 1122.42 524.499 cv
1122.42 522.999 1122.2 521.519 1121.78 520.059 cv
1121.34 518.599 1120.7 517.119 1119.84 515.599 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
