%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SigmoidVSIsigmoid-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/10, 14:23:40
%%BoundingBox: -1 0 1147 600
%%HiResBoundingBox: 0 0 1146.1602 599.8423
%%CropBox: 0 0 1146.1602 599.8423
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-10T14:22:39+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-10T14:23:31+08:00"
   xmp:MetadataDate="2019-06-10T14:23:31+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:fa1c8a50-5173-4e2c-bccf-4be35e5bf899"
   xmpMM:InstanceID="uuid:f70e44ef-8c10-4778-afdb-83f724355e99"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -599.842 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-4.57764e-5 0 mo
-4.57764e-5 599.842 li
1146.16 599.842 li
1146.16 0 li
cp
clp
gsave
-.0486679 599.93 mo
1146.95 599.93 li
1146.95 -.06956 li
-.0486679 -.06956 li
-.0486679 599.93 li
clp
-107.049 622.93 mo
1275.35 622.93 li
1275.35 -74.7496 li
-107.049 -74.7496 li
-107.049 622.93 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
65.7512 546.186 mo
1137.11 546.186 li
1137.11 8.9722 li
65.7512 8.9722 li
65.7512 546.186 li
f
114.449 546.186 mo
114.449 549.686 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
114.449 546.186 mo
114.449 549.686 li
@
114.45 555.109 mo
113.43 555.109 112.67 555.609 112.15 556.609 cv
111.63 557.609 111.39 559.109 111.39 561.109 cv
111.39 563.109 111.63 564.609 112.15 565.609 cv
112.67 566.609 113.43 567.109 114.45 567.109 cv
115.47 567.109 116.23 566.609 116.75 565.609 cv
117.25 564.609 117.51 563.109 117.51 561.109 cv
117.51 559.109 117.25 557.609 116.75 556.609 cv
116.23 555.609 115.47 555.109 114.45 555.109 cv
114.45 553.549 mo
116.07 553.549 117.31 554.209 118.19 555.489 cv
119.05 556.789 119.49 558.669 119.49 561.109 cv
119.49 563.569 119.05 565.449 118.19 566.729 cv
117.31 568.009 116.07 568.649 114.45 568.649 cv
112.81 568.649 111.55 568.009 110.69 566.729 cv
109.83 565.449 109.41 563.569 109.41 561.109 cv
109.41 558.669 109.83 556.789 110.69 555.489 cv
111.55 554.209 112.81 553.549 114.45 553.549 cv
f
311.21 546.186 mo
311.21 549.686 li
f
311.21 546.186 mo
311.21 549.686 li
@
295.972 566.729 mo
302.852 566.729 li
302.852 568.389 li
293.592 568.389 li
293.592 566.729 li
294.332 565.969 295.352 564.929 296.652 563.609 cv
297.932 562.309 298.752 561.469 299.092 561.089 cv
299.732 560.389 300.172 559.789 300.412 559.289 cv
300.652 558.809 300.792 558.309 300.792 557.829 cv
300.792 557.069 300.512 556.429 299.972 555.949 cv
299.432 555.469 298.732 555.209 297.852 555.209 cv
297.232 555.209 296.572 555.329 295.892 555.529 cv
295.212 555.749 294.472 556.069 293.692 556.509 cv
293.692 554.509 li
294.492 554.189 295.232 553.949 295.912 553.789 cv
296.592 553.629 297.232 553.549 297.812 553.549 cv
299.312 553.549 300.512 553.929 301.412 554.689 cv
302.312 555.449 302.772 556.449 302.772 557.709 cv
302.772 558.309 302.652 558.889 302.432 559.409 cv
302.212 559.949 301.812 560.589 301.212 561.309 cv
301.052 561.509 300.532 562.049 299.652 562.949 cv
298.772 563.849 297.552 565.109 295.972 566.729 cv
f
311.212 555.109 mo
310.192 555.109 309.432 555.609 308.912 556.609 cv
308.392 557.609 308.152 559.109 308.152 561.109 cv
308.152 563.109 308.392 564.609 308.912 565.609 cv
309.432 566.609 310.192 567.109 311.212 567.109 cv
312.232 567.109 312.992 566.609 313.512 565.609 cv
314.012 564.609 314.272 563.109 314.272 561.109 cv
314.272 559.109 314.012 557.609 313.512 556.609 cv
312.992 555.609 312.232 555.109 311.212 555.109 cv
311.212 553.549 mo
312.832 553.549 314.072 554.209 314.952 555.489 cv
315.812 556.789 316.252 558.669 316.252 561.109 cv
316.252 563.569 315.812 565.449 314.952 566.729 cv
314.072 568.009 312.832 568.649 311.212 568.649 cv
309.572 568.649 308.312 568.009 307.452 566.729 cv
306.592 565.449 306.172 563.569 306.172 561.109 cv
306.172 558.669 306.592 556.789 307.452 555.489 cv
308.312 554.209 309.572 553.549 311.212 553.549 cv
f
323.932 555.109 mo
322.912 555.109 322.152 555.609 321.632 556.609 cv
321.112 557.609 320.872 559.109 320.872 561.109 cv
320.872 563.109 321.112 564.609 321.632 565.609 cv
322.152 566.609 322.912 567.109 323.932 567.109 cv
324.952 567.109 325.712 566.609 326.232 565.609 cv
326.732 564.609 326.992 563.109 326.992 561.109 cv
326.992 559.109 326.732 557.609 326.232 556.609 cv
325.712 555.609 324.952 555.109 323.932 555.109 cv
323.932 553.549 mo
325.552 553.549 326.792 554.209 327.672 555.489 cv
328.532 556.789 328.972 558.669 328.972 561.109 cv
328.972 563.569 328.532 565.449 327.672 566.729 cv
326.792 568.009 325.552 568.649 323.932 568.649 cv
322.292 568.649 321.032 568.009 320.172 566.729 cv
319.312 565.449 318.892 563.569 318.892 561.109 cv
318.892 558.669 319.312 556.789 320.172 555.489 cv
321.032 554.209 322.292 553.549 323.932 553.549 cv
f
507.97 546.186 mo
507.97 549.686 li
f
507.97 546.186 mo
507.97 549.686 li
@
496.452 555.529 mo
491.472 563.309 li
496.452 563.309 li
496.452 555.529 li
495.932 553.809 mo
498.412 553.809 li
498.412 563.309 li
500.492 563.309 li
500.492 564.949 li
498.412 564.949 li
498.412 568.389 li
496.452 568.389 li
496.452 564.949 li
489.872 564.949 li
489.872 563.049 li
495.932 553.809 li
f
507.972 555.109 mo
506.952 555.109 506.192 555.609 505.672 556.609 cv
505.152 557.609 504.912 559.109 504.912 561.109 cv
504.912 563.109 505.152 564.609 505.672 565.609 cv
506.192 566.609 506.952 567.109 507.972 567.109 cv
508.992 567.109 509.752 566.609 510.272 565.609 cv
510.772 564.609 511.032 563.109 511.032 561.109 cv
511.032 559.109 510.772 557.609 510.272 556.609 cv
509.752 555.609 508.992 555.109 507.972 555.109 cv
507.972 553.549 mo
509.592 553.549 510.832 554.209 511.712 555.489 cv
512.572 556.789 513.012 558.669 513.012 561.109 cv
513.012 563.569 512.572 565.449 511.712 566.729 cv
510.832 568.009 509.592 568.649 507.972 568.649 cv
506.332 568.649 505.072 568.009 504.212 566.729 cv
503.352 565.449 502.932 563.569 502.932 561.109 cv
502.932 558.669 503.352 556.789 504.212 555.489 cv
505.072 554.209 506.332 553.549 507.972 553.549 cv
f
520.692 555.109 mo
519.672 555.109 518.912 555.609 518.392 556.609 cv
517.872 557.609 517.632 559.109 517.632 561.109 cv
517.632 563.109 517.872 564.609 518.392 565.609 cv
518.912 566.609 519.672 567.109 520.692 567.109 cv
521.712 567.109 522.472 566.609 522.992 565.609 cv
523.492 564.609 523.752 563.109 523.752 561.109 cv
523.752 559.109 523.492 557.609 522.992 556.609 cv
522.472 555.609 521.712 555.109 520.692 555.109 cv
520.692 553.549 mo
522.312 553.549 523.552 554.209 524.432 555.489 cv
525.292 556.789 525.732 558.669 525.732 561.109 cv
525.732 563.569 525.292 565.449 524.432 566.729 cv
523.552 568.009 522.312 568.649 520.692 568.649 cv
519.052 568.649 517.792 568.009 516.932 566.729 cv
516.072 565.449 515.652 563.569 515.652 561.109 cv
515.652 558.669 516.072 556.789 516.932 555.489 cv
517.792 554.209 519.052 553.549 520.692 553.549 cv
f
704.73 546.186 mo
704.73 549.686 li
f
704.73 546.186 mo
704.73 549.686 li
@
692.252 560.309 mo
691.372 560.309 690.672 560.629 690.152 561.229 cv
689.632 561.829 689.372 562.669 689.372 563.709 cv
689.372 564.769 689.632 565.609 690.152 566.209 cv
690.672 566.809 691.372 567.109 692.252 567.109 cv
693.132 567.109 693.832 566.809 694.352 566.209 cv
694.872 565.609 695.132 564.769 695.132 563.709 cv
695.132 562.669 694.872 561.829 694.352 561.229 cv
693.832 560.629 693.132 560.309 692.252 560.309 cv
696.172 554.129 mo
696.172 555.929 li
695.672 555.689 695.172 555.509 694.672 555.389 cv
694.152 555.269 693.652 555.209 693.172 555.209 cv
691.852 555.209 690.852 555.649 690.172 556.529 cv
689.492 557.409 689.092 558.749 689.012 560.509 cv
689.392 559.949 689.872 559.509 690.452 559.209 cv
691.032 558.909 691.672 558.749 692.372 558.749 cv
693.832 558.749 694.992 559.209 695.832 560.089 cv
696.672 560.969 697.112 562.189 697.112 563.709 cv
697.112 565.209 696.652 566.409 695.772 567.309 cv
694.892 568.209 693.712 568.649 692.252 568.649 cv
690.572 568.649 689.272 568.009 688.392 566.729 cv
687.492 565.449 687.052 563.569 687.052 561.109 cv
687.052 558.809 687.592 556.969 688.692 555.609 cv
689.772 554.249 691.252 553.549 693.092 553.549 cv
693.572 553.549 694.072 553.609 694.592 553.689 cv
695.092 553.789 695.612 553.929 696.172 554.129 cv
f
704.732 555.109 mo
703.712 555.109 702.952 555.609 702.432 556.609 cv
701.912 557.609 701.672 559.109 701.672 561.109 cv
701.672 563.109 701.912 564.609 702.432 565.609 cv
702.952 566.609 703.712 567.109 704.732 567.109 cv
705.752 567.109 706.512 566.609 707.032 565.609 cv
707.532 564.609 707.792 563.109 707.792 561.109 cv
707.792 559.109 707.532 557.609 707.032 556.609 cv
706.512 555.609 705.752 555.109 704.732 555.109 cv
704.732 553.549 mo
706.352 553.549 707.592 554.209 708.472 555.489 cv
709.332 556.789 709.772 558.669 709.772 561.109 cv
709.772 563.569 709.332 565.449 708.472 566.729 cv
707.592 568.009 706.352 568.649 704.732 568.649 cv
703.092 568.649 701.832 568.009 700.972 566.729 cv
700.112 565.449 699.692 563.569 699.692 561.109 cv
699.692 558.669 700.112 556.789 700.972 555.489 cv
701.832 554.209 703.092 553.549 704.732 553.549 cv
f
717.452 555.109 mo
716.432 555.109 715.672 555.609 715.152 556.609 cv
714.632 557.609 714.392 559.109 714.392 561.109 cv
714.392 563.109 714.632 564.609 715.152 565.609 cv
715.672 566.609 716.432 567.109 717.452 567.109 cv
718.472 567.109 719.232 566.609 719.752 565.609 cv
720.252 564.609 720.512 563.109 720.512 561.109 cv
720.512 559.109 720.252 557.609 719.752 556.609 cv
719.232 555.609 718.472 555.109 717.452 555.109 cv
717.452 553.549 mo
719.072 553.549 720.312 554.209 721.192 555.489 cv
722.052 556.789 722.492 558.669 722.492 561.109 cv
722.492 563.569 722.052 565.449 721.192 566.729 cv
720.312 568.009 719.072 568.649 717.452 568.649 cv
715.812 568.649 714.552 568.009 713.692 566.729 cv
712.832 565.449 712.412 563.569 712.412 561.109 cv
712.412 558.669 712.832 556.789 713.692 555.489 cv
714.552 554.209 715.812 553.549 717.452 553.549 cv
f
901.491 546.186 mo
901.491 549.686 li
f
901.491 546.186 mo
901.491 549.686 li
@
888.773 561.469 mo
887.833 561.469 887.093 561.729 886.553 562.229 cv
886.013 562.729 885.753 563.409 885.753 564.289 cv
885.753 565.169 886.013 565.869 886.553 566.369 cv
887.093 566.869 887.833 567.109 888.773 567.109 cv
889.693 567.109 890.433 566.869 890.973 566.349 cv
891.513 565.849 891.793 565.169 891.793 564.289 cv
891.793 563.409 891.513 562.729 890.993 562.229 cv
890.453 561.729 889.713 561.469 888.773 561.469 cv
886.793 560.629 mo
885.953 560.429 885.293 560.029 884.813 559.449 cv
884.333 558.869 884.113 558.169 884.113 557.329 cv
884.113 556.169 884.513 555.249 885.353 554.569 cv
886.173 553.889 887.313 553.549 888.773 553.549 cv
890.213 553.549 891.353 553.889 892.193 554.569 cv
893.013 555.249 893.433 556.169 893.433 557.329 cv
893.433 558.169 893.193 558.869 892.713 559.449 cv
892.233 560.029 891.593 560.429 890.753 560.629 cv
891.693 560.849 892.433 561.289 892.973 561.929 cv
893.493 562.569 893.773 563.369 893.773 564.289 cv
893.773 565.709 893.333 566.789 892.473 567.529 cv
891.593 568.289 890.373 568.649 888.773 568.649 cv
887.153 568.649 885.913 568.289 885.053 567.529 cv
884.193 566.789 883.773 565.709 883.773 564.289 cv
883.773 563.369 884.033 562.569 884.573 561.929 cv
885.093 561.289 885.833 560.849 886.793 560.629 cv
886.073 557.509 mo
886.073 558.269 886.293 558.869 886.773 559.289 cv
887.253 559.709 887.913 559.909 888.773 559.909 cv
889.613 559.909 890.273 559.709 890.753 559.289 cv
891.233 558.869 891.473 558.269 891.473 557.509 cv
891.473 556.749 891.233 556.169 890.753 555.749 cv
890.273 555.329 889.613 555.109 888.773 555.109 cv
887.913 555.109 887.253 555.329 886.773 555.749 cv
886.293 556.169 886.073 556.749 886.073 557.509 cv
f
901.493 555.109 mo
900.473 555.109 899.713 555.609 899.193 556.609 cv
898.673 557.609 898.433 559.109 898.433 561.109 cv
898.433 563.109 898.673 564.609 899.193 565.609 cv
899.713 566.609 900.473 567.109 901.493 567.109 cv
902.513 567.109 903.273 566.609 903.793 565.609 cv
904.293 564.609 904.553 563.109 904.553 561.109 cv
904.553 559.109 904.293 557.609 903.793 556.609 cv
903.273 555.609 902.513 555.109 901.493 555.109 cv
901.493 553.549 mo
903.113 553.549 904.353 554.209 905.233 555.489 cv
906.093 556.789 906.533 558.669 906.533 561.109 cv
906.533 563.569 906.093 565.449 905.233 566.729 cv
904.353 568.009 903.113 568.649 901.493 568.649 cv
899.853 568.649 898.593 568.009 897.733 566.729 cv
896.873 565.449 896.453 563.569 896.453 561.109 cv
896.453 558.669 896.873 556.789 897.733 555.489 cv
898.593 554.209 899.853 553.549 901.493 553.549 cv
f
914.213 555.109 mo
913.193 555.109 912.433 555.609 911.913 556.609 cv
911.393 557.609 911.153 559.109 911.153 561.109 cv
911.153 563.109 911.393 564.609 911.913 565.609 cv
912.433 566.609 913.193 567.109 914.213 567.109 cv
915.233 567.109 915.993 566.609 916.513 565.609 cv
917.013 564.609 917.273 563.109 917.273 561.109 cv
917.273 559.109 917.013 557.609 916.513 556.609 cv
915.993 555.609 915.233 555.109 914.213 555.109 cv
914.213 553.549 mo
915.833 553.549 917.073 554.209 917.953 555.489 cv
918.813 556.789 919.253 558.669 919.253 561.109 cv
919.253 563.569 918.813 565.449 917.953 566.729 cv
917.073 568.009 915.833 568.649 914.213 568.649 cv
912.573 568.649 911.313 568.009 910.453 566.729 cv
909.593 565.449 909.173 563.569 909.173 561.109 cv
909.173 558.669 909.593 556.789 910.453 555.489 cv
911.313 554.209 912.573 553.549 914.213 553.549 cv
f
1098.25 546.186 mo
1098.25 549.686 li
f
1098.25 546.186 mo
1098.25 549.686 li
@
1075.29 566.729 mo
1078.51 566.729 li
1078.51 555.609 li
1075.01 556.309 li
1075.01 554.509 li
1078.49 553.809 li
1080.47 553.809 li
1080.47 566.729 li
1083.69 566.729 li
1083.69 568.389 li
1075.29 568.389 li
1075.29 566.729 li
f
1091.89 555.109 mo
1090.87 555.109 1090.11 555.609 1089.59 556.609 cv
1089.07 557.609 1088.83 559.109 1088.83 561.109 cv
1088.83 563.109 1089.07 564.609 1089.59 565.609 cv
1090.11 566.609 1090.87 567.109 1091.89 567.109 cv
1092.91 567.109 1093.67 566.609 1094.19 565.609 cv
1094.69 564.609 1094.95 563.109 1094.95 561.109 cv
1094.95 559.109 1094.69 557.609 1094.19 556.609 cv
1093.67 555.609 1092.91 555.109 1091.89 555.109 cv
1091.89 553.549 mo
1093.51 553.549 1094.75 554.209 1095.63 555.489 cv
1096.49 556.789 1096.93 558.669 1096.93 561.109 cv
1096.93 563.569 1096.49 565.449 1095.63 566.729 cv
1094.75 568.009 1093.51 568.649 1091.89 568.649 cv
1090.25 568.649 1088.99 568.009 1088.13 566.729 cv
1087.27 565.449 1086.85 563.569 1086.85 561.109 cv
1086.85 558.669 1087.27 556.789 1088.13 555.489 cv
1088.99 554.209 1090.25 553.549 1091.89 553.549 cv
f
1104.61 555.109 mo
1103.59 555.109 1102.83 555.609 1102.31 556.609 cv
1101.79 557.609 1101.55 559.109 1101.55 561.109 cv
1101.55 563.109 1101.79 564.609 1102.31 565.609 cv
1102.83 566.609 1103.59 567.109 1104.61 567.109 cv
1105.63 567.109 1106.39 566.609 1106.91 565.609 cv
1107.41 564.609 1107.67 563.109 1107.67 561.109 cv
1107.67 559.109 1107.41 557.609 1106.91 556.609 cv
1106.39 555.609 1105.63 555.109 1104.61 555.109 cv
1104.61 553.549 mo
1106.23 553.549 1107.47 554.209 1108.35 555.489 cv
1109.21 556.789 1109.65 558.669 1109.65 561.109 cv
1109.65 563.569 1109.21 565.449 1108.35 566.729 cv
1107.47 568.009 1106.23 568.649 1104.61 568.649 cv
1102.97 568.649 1101.71 568.009 1100.85 566.729 cv
1099.99 565.449 1099.57 563.569 1099.57 561.109 cv
1099.57 558.669 1099.99 556.789 1100.85 555.489 cv
1101.71 554.209 1102.97 553.549 1104.61 553.549 cv
f
1117.33 555.109 mo
1116.31 555.109 1115.55 555.609 1115.03 556.609 cv
1114.51 557.609 1114.27 559.109 1114.27 561.109 cv
1114.27 563.109 1114.51 564.609 1115.03 565.609 cv
1115.55 566.609 1116.31 567.109 1117.33 567.109 cv
1118.35 567.109 1119.11 566.609 1119.63 565.609 cv
1120.13 564.609 1120.39 563.109 1120.39 561.109 cv
1120.39 559.109 1120.13 557.609 1119.63 556.609 cv
1119.11 555.609 1118.35 555.109 1117.33 555.109 cv
1117.33 553.549 mo
1118.95 553.549 1120.19 554.209 1121.07 555.489 cv
1121.93 556.789 1122.37 558.669 1122.37 561.109 cv
1122.37 563.569 1121.93 565.449 1121.07 566.729 cv
1120.19 568.009 1118.95 568.649 1117.33 568.649 cv
1115.69 568.649 1114.43 568.009 1113.57 566.729 cv
1112.71 565.449 1112.29 563.569 1112.29 561.109 cv
1112.29 558.669 1112.71 556.789 1113.57 555.489 cv
1114.43 554.209 1115.69 553.549 1117.33 553.549 cv
f
572.766 577.168 mo
581.986 577.168 li
581.986 578.828 li
574.746 578.828 li
574.746 583.148 li
581.686 583.148 li
581.686 584.808 li
574.746 584.808 li
574.746 590.088 li
582.166 590.088 li
582.166 591.748 li
572.766 591.748 li
572.766 577.168 li
f
587.066 590.108 mo
587.066 595.888 li
585.266 595.888 li
585.266 580.808 li
587.066 580.808 li
587.066 582.468 li
587.426 581.828 587.906 581.348 588.486 581.028 cv
589.066 580.708 589.766 580.548 590.566 580.548 cv
591.886 580.548 592.966 581.088 593.806 582.128 cv
594.626 583.188 595.046 584.568 595.046 586.288 cv
595.046 588.008 594.626 589.408 593.806 590.448 cv
592.966 591.488 591.886 592.008 590.566 592.008 cv
589.766 592.008 589.066 591.848 588.486 591.548 cv
587.906 591.248 587.426 590.768 587.066 590.108 cv
593.186 586.288 mo
593.186 584.968 592.906 583.948 592.366 583.188 cv
591.806 582.428 591.066 582.048 590.126 582.048 cv
589.166 582.048 588.426 582.428 587.886 583.188 cv
587.326 583.948 587.066 584.968 587.066 586.288 cv
587.066 587.608 587.326 588.648 587.886 589.408 cv
588.426 590.168 589.166 590.528 590.126 590.528 cv
591.066 590.528 591.806 590.168 592.366 589.408 cv
592.906 588.648 593.186 587.608 593.186 586.288 cv
f
602.266 582.068 mo
601.306 582.068 600.546 582.448 599.986 583.208 cv
599.426 583.968 599.146 584.988 599.146 586.288 cv
599.146 587.608 599.406 588.628 599.966 589.388 cv
600.526 590.148 601.286 590.508 602.266 590.508 cv
603.226 590.508 603.986 590.148 604.546 589.388 cv
605.106 588.628 605.386 587.608 605.386 586.288 cv
605.386 585.008 605.106 583.968 604.546 583.208 cv
603.986 582.448 603.226 582.068 602.266 582.068 cv
602.266 580.548 mo
603.826 580.548 605.046 581.068 605.946 582.068 cv
606.826 583.088 607.286 584.488 607.286 586.288 cv
607.286 588.088 606.826 589.488 605.946 590.488 cv
605.046 591.508 603.826 592.008 602.266 592.008 cv
600.686 592.008 599.446 591.508 598.566 590.488 cv
597.686 589.488 597.246 588.088 597.246 586.288 cv
597.246 584.488 597.686 583.088 598.566 582.068 cv
599.446 581.068 600.686 580.548 602.266 580.548 cv
f
618.146 581.228 mo
618.146 582.908 li
617.626 582.628 617.126 582.428 616.606 582.288 cv
616.086 582.148 615.586 582.068 615.066 582.068 cv
613.906 582.068 612.986 582.448 612.346 583.188 cv
611.706 583.928 611.386 584.968 611.386 586.288 cv
611.386 587.628 611.706 588.668 612.346 589.408 cv
612.986 590.148 613.906 590.508 615.066 590.508 cv
615.586 590.508 616.086 590.448 616.606 590.308 cv
617.126 590.168 617.626 589.948 618.146 589.668 cv
618.146 591.328 li
617.626 591.568 617.106 591.748 616.586 591.848 cv
616.046 591.948 615.466 592.008 614.866 592.008 cv
613.226 592.008 611.906 591.508 610.946 590.468 cv
609.966 589.448 609.486 588.048 609.486 586.288 cv
609.486 584.508 609.966 583.108 610.946 582.088 cv
611.926 581.068 613.266 580.548 614.986 580.548 cv
615.546 580.548 616.086 580.608 616.606 580.728 cv
617.126 580.848 617.646 581.008 618.146 581.228 cv
f
630.366 585.148 mo
630.366 591.748 li
628.566 591.748 li
628.566 585.208 li
628.566 584.168 628.346 583.408 627.946 582.888 cv
627.546 582.368 626.946 582.108 626.146 582.108 cv
625.166 582.108 624.406 582.428 623.846 583.048 cv
623.286 583.668 623.006 584.508 623.006 585.568 cv
623.006 591.748 li
621.206 591.748 li
621.206 576.548 li
623.006 576.548 li
623.006 582.508 li
623.426 581.868 623.926 581.368 624.526 581.048 cv
625.106 580.728 625.786 580.548 626.546 580.548 cv
627.786 580.548 628.746 580.948 629.386 581.728 cv
630.026 582.508 630.366 583.648 630.366 585.148 cv
f
65.7512 512.575 mo
62.2512 512.575 li
f
65.7512 512.575 mo
62.2512 512.575 li
@
33.3143 506.897 mo
32.2943 506.897 31.5343 507.397 31.0143 508.397 cv
30.4943 509.397 30.2543 510.897 30.2543 512.897 cv
30.2543 514.897 30.4943 516.397 31.0143 517.397 cv
31.5343 518.397 32.2943 518.897 33.3143 518.897 cv
34.3343 518.897 35.0943 518.397 35.6143 517.397 cv
36.1143 516.397 36.3743 514.897 36.3743 512.897 cv
36.3743 510.897 36.1143 509.397 35.6143 508.397 cv
35.0943 507.397 34.3343 506.897 33.3143 506.897 cv
33.3143 505.337 mo
34.9343 505.337 36.1743 505.997 37.0543 507.277 cv
37.9143 508.577 38.3543 510.457 38.3543 512.897 cv
38.3543 515.357 37.9143 517.237 37.0543 518.517 cv
36.1743 519.797 34.9343 520.437 33.3143 520.437 cv
31.6743 520.437 30.4143 519.797 29.5543 518.517 cv
28.6943 517.237 28.2743 515.357 28.2743 512.897 cv
28.2743 510.457 28.6943 508.577 29.5543 507.277 cv
30.4143 505.997 31.6743 505.337 33.3143 505.337 cv
f
41.8143 517.697 mo
43.8743 517.697 li
43.8743 520.177 li
41.8143 520.177 li
41.8143 517.697 li
f
49.8742 518.517 mo
56.7542 518.517 li
56.7542 520.177 li
47.4942 520.177 li
47.4942 518.517 li
48.2342 517.757 49.2542 516.717 50.5542 515.397 cv
51.8342 514.097 52.6542 513.257 52.9942 512.877 cv
53.6342 512.177 54.0742 511.577 54.3142 511.077 cv
54.5542 510.597 54.6942 510.097 54.6942 509.617 cv
54.6942 508.857 54.4142 508.217 53.8742 507.737 cv
53.3342 507.257 52.6342 506.997 51.7542 506.997 cv
51.1342 506.997 50.4742 507.117 49.7942 507.317 cv
49.1142 507.537 48.3742 507.857 47.5942 508.297 cv
47.5942 506.297 li
48.3942 505.977 49.1342 505.737 49.8142 505.577 cv
50.4942 505.417 51.1342 505.337 51.7142 505.337 cv
53.2142 505.337 54.4142 505.717 55.3142 506.477 cv
56.2142 507.237 56.6742 508.237 56.6742 509.497 cv
56.6742 510.097 56.5542 510.677 56.3342 511.197 cv
56.1142 511.737 55.7142 512.377 55.1142 513.097 cv
54.9542 513.297 54.4342 513.837 53.5542 514.737 cv
52.6742 515.637 51.4542 516.897 49.8742 518.517 cv
f
65.7512 451.299 mo
62.2512 451.299 li
f
65.7512 451.299 mo
62.2512 451.299 li
@
33.3143 445.62 mo
32.2943 445.62 31.5343 446.12 31.0143 447.12 cv
30.4943 448.12 30.2543 449.62 30.2543 451.62 cv
30.2543 453.62 30.4943 455.12 31.0143 456.12 cv
31.5343 457.12 32.2943 457.62 33.3143 457.62 cv
34.3343 457.62 35.0943 457.12 35.6143 456.12 cv
36.1143 455.12 36.3743 453.62 36.3743 451.62 cv
36.3743 449.62 36.1143 448.12 35.6143 447.12 cv
35.0943 446.12 34.3343 445.62 33.3143 445.62 cv
33.3143 444.06 mo
34.9343 444.06 36.1743 444.72 37.0543 446 cv
37.9143 447.3 38.3543 449.18 38.3543 451.62 cv
38.3543 454.08 37.9143 455.96 37.0543 457.24 cv
36.1743 458.52 34.9343 459.16 33.3143 459.16 cv
31.6743 459.16 30.4143 458.52 29.5543 457.24 cv
28.6943 455.96 28.2743 454.08 28.2743 451.62 cv
28.2743 449.18 28.6943 447.3 29.5543 446 cv
30.4143 444.72 31.6743 444.06 33.3143 444.06 cv
f
41.8143 456.42 mo
43.8743 456.42 li
43.8743 458.9 li
41.8143 458.9 li
41.8143 456.42 li
f
54.1542 451.04 mo
55.0942 451.24 55.8342 451.66 56.3542 452.3 cv
56.8742 452.94 57.1542 453.74 57.1542 454.66 cv
57.1542 456.1 56.6542 457.22 55.6742 458 cv
54.6742 458.78 53.2742 459.16 51.4542 459.16 cv
50.8342 459.16 50.1942 459.1 49.5542 458.98 cv
48.9142 458.88 48.2342 458.7 47.5542 458.46 cv
47.5542 456.56 li
48.0942 456.88 48.6942 457.12 49.3542 457.28 cv
49.9942 457.44 50.6742 457.52 51.3942 457.52 cv
52.6342 457.52 53.5742 457.28 54.2142 456.8 cv
54.8542 456.32 55.1942 455.6 55.1942 454.66 cv
55.1942 453.82 54.8942 453.14 54.2942 452.66 cv
53.6942 452.18 52.8542 451.92 51.7742 451.92 cv
50.0742 451.92 li
50.0742 450.3 li
51.8542 450.3 li
52.8142 450.3 53.5542 450.12 54.0742 449.72 cv
54.5942 449.34 54.8542 448.78 54.8542 448.04 cv
54.8542 447.3 54.5742 446.72 54.0542 446.32 cv
53.5142 445.92 52.7542 445.72 51.7742 445.72 cv
51.2342 445.72 50.6542 445.78 50.0342 445.9 cv
49.4142 446.02 48.7342 446.2 47.9942 446.44 cv
47.9942 444.68 li
48.7342 444.48 49.4342 444.32 50.0942 444.22 cv
50.7342 444.12 51.3542 444.06 51.9542 444.06 cv
53.4342 444.06 54.6142 444.4 55.4942 445.08 cv
56.3742 445.76 56.8142 446.68 56.8142 447.84 cv
56.8142 448.64 56.5742 449.32 56.1142 449.88 cv
55.6542 450.44 54.9942 450.84 54.1542 451.04 cv
f
65.7512 390.022 mo
62.2512 390.022 li
f
65.7512 390.022 mo
62.2512 390.022 li
@
33.3143 384.343 mo
32.2943 384.343 31.5343 384.843 31.0143 385.843 cv
30.4943 386.843 30.2543 388.343 30.2543 390.343 cv
30.2543 392.343 30.4943 393.843 31.0143 394.843 cv
31.5343 395.843 32.2943 396.343 33.3143 396.343 cv
34.3343 396.343 35.0943 395.843 35.6143 394.843 cv
36.1143 393.843 36.3743 392.343 36.3743 390.343 cv
36.3743 388.343 36.1143 386.843 35.6143 385.843 cv
35.0943 384.843 34.3343 384.343 33.3143 384.343 cv
33.3143 382.783 mo
34.9343 382.783 36.1743 383.443 37.0543 384.723 cv
37.9143 386.023 38.3543 387.903 38.3543 390.343 cv
38.3543 392.803 37.9143 394.683 37.0543 395.963 cv
36.1743 397.243 34.9343 397.883 33.3143 397.883 cv
31.6743 397.883 30.4143 397.243 29.5543 395.963 cv
28.6943 394.683 28.2743 392.803 28.2743 390.343 cv
28.2743 387.903 28.6943 386.023 29.5543 384.723 cv
30.4143 383.443 31.6743 382.783 33.3143 382.783 cv
f
41.8143 395.143 mo
43.8743 395.143 li
43.8743 397.623 li
41.8143 397.623 li
41.8143 395.143 li
f
53.5942 384.763 mo
48.6142 392.543 li
53.5942 392.543 li
53.5942 384.763 li
53.0742 383.043 mo
55.5542 383.043 li
55.5542 392.543 li
57.6342 392.543 li
57.6342 394.183 li
55.5542 394.183 li
55.5542 397.623 li
53.5942 397.623 li
53.5942 394.183 li
47.0142 394.183 li
47.0142 392.283 li
53.0742 383.043 li
f
65.7512 328.745 mo
62.2512 328.745 li
f
65.7512 328.745 mo
62.2512 328.745 li
@
33.3143 323.066 mo
32.2943 323.066 31.5343 323.566 31.0143 324.566 cv
30.4943 325.566 30.2543 327.066 30.2543 329.066 cv
30.2543 331.066 30.4943 332.566 31.0143 333.566 cv
31.5343 334.566 32.2943 335.066 33.3143 335.066 cv
34.3343 335.066 35.0943 334.566 35.6143 333.566 cv
36.1143 332.566 36.3743 331.066 36.3743 329.066 cv
36.3743 327.066 36.1143 325.566 35.6143 324.566 cv
35.0943 323.566 34.3343 323.066 33.3143 323.066 cv
33.3143 321.507 mo
34.9343 321.507 36.1743 322.167 37.0543 323.447 cv
37.9143 324.746 38.3543 326.626 38.3543 329.066 cv
38.3543 331.526 37.9143 333.406 37.0543 334.686 cv
36.1743 335.966 34.9343 336.607 33.3143 336.607 cv
31.6743 336.607 30.4143 335.966 29.5543 334.686 cv
28.6943 333.406 28.2743 331.526 28.2743 329.066 cv
28.2743 326.626 28.6943 324.746 29.5543 323.447 cv
30.4143 322.167 31.6743 321.507 33.3143 321.507 cv
f
41.8143 333.866 mo
43.8743 333.866 li
43.8743 336.346 li
41.8143 336.346 li
41.8143 333.866 li
f
48.1942 321.767 mo
55.9342 321.767 li
55.9342 323.426 li
49.9942 323.426 li
49.9942 327.007 li
50.2742 326.906 50.5742 326.827 50.8542 326.786 cv
51.1342 326.746 51.4342 326.706 51.7142 326.706 cv
53.3342 326.706 54.6142 327.167 55.5742 328.047 cv
56.5342 328.947 57.0142 330.146 57.0142 331.667 cv
57.0142 333.246 56.5142 334.466 55.5342 335.327 cv
54.5542 336.186 53.1742 336.607 51.4142 336.607 cv
50.7942 336.607 50.1742 336.547 49.5342 336.466 cv
48.8942 336.366 48.2542 336.227 47.5742 336.007 cv
47.5742 334.026 li
48.1542 334.346 48.7542 334.586 49.3942 334.746 cv
50.0142 334.906 50.6742 334.966 51.3742 334.966 cv
52.4942 334.966 53.3942 334.686 54.0542 334.086 cv
54.6942 333.487 55.0342 332.686 55.0342 331.667 cv
55.0342 330.667 54.6942 329.866 54.0542 329.267 cv
53.3942 328.667 52.4942 328.366 51.3742 328.366 cv
50.8542 328.366 50.3142 328.426 49.7942 328.547 cv
49.2742 328.667 48.7342 328.846 48.1942 329.086 cv
48.1942 321.767 li
f
65.7512 267.468 mo
62.2512 267.468 li
f
65.7512 267.468 mo
62.2512 267.468 li
@
33.3143 261.79 mo
32.2943 261.79 31.5343 262.29 31.0143 263.29 cv
30.4943 264.29 30.2543 265.79 30.2543 267.79 cv
30.2543 269.79 30.4943 271.29 31.0143 272.29 cv
31.5343 273.29 32.2943 273.79 33.3143 273.79 cv
34.3343 273.79 35.0943 273.29 35.6143 272.29 cv
36.1143 271.29 36.3743 269.79 36.3743 267.79 cv
36.3743 265.79 36.1143 264.29 35.6143 263.29 cv
35.0943 262.29 34.3343 261.79 33.3143 261.79 cv
33.3143 260.23 mo
34.9343 260.23 36.1743 260.89 37.0543 262.17 cv
37.9143 263.47 38.3543 265.35 38.3543 267.79 cv
38.3543 270.25 37.9143 272.13 37.0543 273.41 cv
36.1743 274.69 34.9343 275.33 33.3143 275.33 cv
31.6743 275.33 30.4143 274.69 29.5543 273.41 cv
28.6943 272.13 28.2743 270.25 28.2743 267.79 cv
28.2743 265.35 28.6943 263.47 29.5543 262.17 cv
30.4143 260.89 31.6743 260.23 33.3143 260.23 cv
f
41.8143 272.59 mo
43.8743 272.59 li
43.8743 275.07 li
41.8143 275.07 li
41.8143 272.59 li
f
52.6342 266.99 mo
51.7542 266.99 51.0542 267.31 50.5342 267.91 cv
50.0142 268.51 49.7542 269.35 49.7542 270.39 cv
49.7542 271.45 50.0142 272.29 50.5342 272.89 cv
51.0542 273.49 51.7542 273.79 52.6342 273.79 cv
53.5142 273.79 54.2142 273.49 54.7342 272.89 cv
55.2542 272.29 55.5142 271.45 55.5142 270.39 cv
55.5142 269.35 55.2542 268.51 54.7342 267.91 cv
54.2142 267.31 53.5142 266.99 52.6342 266.99 cv
56.5542 260.81 mo
56.5542 262.61 li
56.0542 262.37 55.5542 262.19 55.0542 262.07 cv
54.5342 261.95 54.0342 261.89 53.5542 261.89 cv
52.2342 261.89 51.2342 262.33 50.5542 263.21 cv
49.8742 264.09 49.4742 265.43 49.3942 267.19 cv
49.7742 266.63 50.2542 266.19 50.8342 265.89 cv
51.4142 265.59 52.0542 265.43 52.7542 265.43 cv
54.2142 265.43 55.3742 265.89 56.2142 266.77 cv
57.0542 267.65 57.4942 268.87 57.4942 270.39 cv
57.4942 271.89 57.0342 273.09 56.1542 273.99 cv
55.2742 274.89 54.0942 275.33 52.6342 275.33 cv
50.9542 275.33 49.6542 274.69 48.7742 273.41 cv
47.8742 272.13 47.4342 270.25 47.4342 267.79 cv
47.4342 265.49 47.9742 263.65 49.0742 262.29 cv
50.1542 260.93 51.6342 260.23 53.4742 260.23 cv
53.9542 260.23 54.4542 260.29 54.9742 260.37 cv
55.4742 260.47 55.9942 260.61 56.5542 260.81 cv
f
65.7512 206.191 mo
62.2512 206.191 li
f
65.7512 206.191 mo
62.2512 206.191 li
@
33.3143 200.513 mo
32.2943 200.513 31.5343 201.013 31.0143 202.013 cv
30.4943 203.013 30.2543 204.513 30.2543 206.513 cv
30.2543 208.513 30.4943 210.013 31.0143 211.013 cv
31.5343 212.013 32.2943 212.513 33.3143 212.513 cv
34.3343 212.513 35.0943 212.013 35.6143 211.013 cv
36.1143 210.013 36.3743 208.513 36.3743 206.513 cv
36.3743 204.513 36.1143 203.013 35.6143 202.013 cv
35.0943 201.013 34.3343 200.513 33.3143 200.513 cv
33.3143 198.953 mo
34.9343 198.953 36.1743 199.613 37.0543 200.893 cv
37.9143 202.193 38.3543 204.073 38.3543 206.513 cv
38.3543 208.973 37.9143 210.853 37.0543 212.133 cv
36.1743 213.413 34.9343 214.053 33.3143 214.053 cv
31.6743 214.053 30.4143 213.413 29.5543 212.133 cv
28.6943 210.853 28.2743 208.973 28.2743 206.513 cv
28.2743 204.073 28.6943 202.193 29.5543 200.893 cv
30.4143 199.613 31.6743 198.953 33.3143 198.953 cv
f
41.8143 211.313 mo
43.8743 211.313 li
43.8743 213.793 li
41.8143 213.793 li
41.8143 211.313 li
f
47.6742 199.213 mo
57.0542 199.213 li
57.0542 200.053 li
51.7542 213.793 li
49.6942 213.793 li
54.6742 200.873 li
47.6742 200.873 li
47.6742 199.213 li
f
65.7512 144.915 mo
62.2512 144.915 li
f
65.7512 144.915 mo
62.2512 144.915 li
@
33.3143 139.236 mo
32.2943 139.236 31.5343 139.736 31.0143 140.736 cv
30.4943 141.736 30.2543 143.236 30.2543 145.236 cv
30.2543 147.236 30.4943 148.736 31.0143 149.736 cv
31.5343 150.736 32.2943 151.236 33.3143 151.236 cv
34.3343 151.236 35.0943 150.736 35.6143 149.736 cv
36.1143 148.736 36.3743 147.236 36.3743 145.236 cv
36.3743 143.236 36.1143 141.736 35.6143 140.736 cv
35.0943 139.736 34.3343 139.236 33.3143 139.236 cv
33.3143 137.676 mo
34.9343 137.676 36.1743 138.336 37.0543 139.616 cv
37.9143 140.916 38.3543 142.796 38.3543 145.236 cv
38.3543 147.696 37.9143 149.576 37.0543 150.856 cv
36.1743 152.136 34.9343 152.776 33.3143 152.776 cv
31.6743 152.776 30.4143 152.136 29.5543 150.856 cv
28.6943 149.576 28.2743 147.696 28.2743 145.236 cv
28.2743 142.796 28.6943 140.916 29.5543 139.616 cv
30.4143 138.336 31.6743 137.676 33.3143 137.676 cv
f
41.8143 150.036 mo
43.8743 150.036 li
43.8743 152.516 li
41.8143 152.516 li
41.8143 150.036 li
f
52.3942 145.596 mo
51.4542 145.596 50.7142 145.856 50.1742 146.356 cv
49.6342 146.856 49.3742 147.536 49.3742 148.416 cv
49.3742 149.296 49.6342 149.996 50.1742 150.496 cv
50.7142 150.996 51.4542 151.236 52.3942 151.236 cv
53.3142 151.236 54.0542 150.996 54.5942 150.476 cv
55.1342 149.976 55.4142 149.296 55.4142 148.416 cv
55.4142 147.536 55.1342 146.856 54.6142 146.356 cv
54.0742 145.856 53.3342 145.596 52.3942 145.596 cv
50.4142 144.756 mo
49.5742 144.556 48.9142 144.156 48.4342 143.576 cv
47.9542 142.996 47.7342 142.296 47.7342 141.456 cv
47.7342 140.296 48.1342 139.376 48.9742 138.696 cv
49.7942 138.016 50.9342 137.676 52.3942 137.676 cv
53.8342 137.676 54.9742 138.016 55.8142 138.696 cv
56.6342 139.376 57.0542 140.296 57.0542 141.456 cv
57.0542 142.296 56.8142 142.996 56.3342 143.576 cv
55.8542 144.156 55.2142 144.556 54.3742 144.756 cv
55.3142 144.976 56.0542 145.416 56.5942 146.056 cv
57.1142 146.696 57.3942 147.496 57.3942 148.416 cv
57.3942 149.836 56.9542 150.916 56.0942 151.656 cv
55.2142 152.416 53.9942 152.776 52.3942 152.776 cv
50.7742 152.776 49.5342 152.416 48.6742 151.656 cv
47.8142 150.916 47.3942 149.836 47.3942 148.416 cv
47.3942 147.496 47.6542 146.696 48.1942 146.056 cv
48.7142 145.416 49.4542 144.976 50.4142 144.756 cv
49.6942 141.636 mo
49.6942 142.396 49.9142 142.996 50.3942 143.416 cv
50.8742 143.836 51.5342 144.036 52.3942 144.036 cv
53.2342 144.036 53.8942 143.836 54.3742 143.416 cv
54.8542 142.996 55.0942 142.396 55.0942 141.636 cv
55.0942 140.876 54.8542 140.296 54.3742 139.876 cv
53.8942 139.456 53.2342 139.236 52.3942 139.236 cv
51.5342 139.236 50.8742 139.456 50.3942 139.876 cv
49.9142 140.296 49.6942 140.876 49.6942 141.636 cv
f
65.7512 83.6378 mo
62.2512 83.6378 li
f
65.7512 83.6378 mo
62.2512 83.6378 li
@
33.3143 77.9593 mo
32.2943 77.9593 31.5343 78.4593 31.0143 79.4593 cv
30.4943 80.4593 30.2543 81.9593 30.2543 83.9593 cv
30.2543 85.9593 30.4943 87.4593 31.0143 88.4593 cv
31.5343 89.4593 32.2943 89.9593 33.3143 89.9593 cv
34.3343 89.9593 35.0943 89.4593 35.6143 88.4593 cv
36.1143 87.4593 36.3743 85.9593 36.3743 83.9593 cv
36.3743 81.9593 36.1143 80.4593 35.6143 79.4593 cv
35.0943 78.4593 34.3343 77.9593 33.3143 77.9593 cv
33.3143 76.3993 mo
34.9343 76.3993 36.1743 77.0593 37.0543 78.3393 cv
37.9143 79.6393 38.3543 81.5193 38.3543 83.9593 cv
38.3543 86.4193 37.9143 88.2993 37.0543 89.5793 cv
36.1743 90.8593 34.9343 91.4993 33.3143 91.4993 cv
31.6743 91.4993 30.4143 90.8593 29.5543 89.5793 cv
28.6943 88.2993 28.2743 86.4193 28.2743 83.9593 cv
28.2743 81.5193 28.6943 79.6393 29.5543 78.3393 cv
30.4143 77.0593 31.6743 76.3993 33.3143 76.3993 cv
f
41.8143 88.7593 mo
43.8743 88.7593 li
43.8743 91.2393 li
41.8143 91.2393 li
41.8143 88.7593 li
f
48.2342 90.9393 mo
48.2342 89.1393 li
48.7142 89.3793 49.2142 89.5593 49.7342 89.6793 cv
50.2342 89.7993 50.7342 89.8593 51.2342 89.8593 cv
52.5142 89.8593 53.5142 89.4393 54.1942 88.5593 cv
54.8742 87.6793 55.2742 86.3593 55.3942 84.5593 cv
54.9942 85.1193 54.5142 85.5593 53.9542 85.8593 cv
53.3742 86.1593 52.7342 86.2993 52.0342 86.2993 cv
50.5542 86.2993 49.3942 85.8593 48.5542 84.9793 cv
47.7142 84.0993 47.2942 82.8993 47.2942 81.3593 cv
47.2942 79.8793 47.7342 78.6793 48.6142 77.7593 cv
49.4942 76.8593 50.6742 76.3993 52.1542 76.3993 cv
53.8342 76.3993 55.1342 77.0593 56.0142 78.3393 cv
56.8942 79.6393 57.3542 81.5193 57.3542 83.9593 cv
57.3542 86.2793 56.7942 88.0993 55.7142 89.4593 cv
54.6142 90.8193 53.1542 91.4993 51.3142 91.4993 cv
50.8142 91.4993 50.3142 91.4393 49.8142 91.3593 cv
49.2942 91.2793 48.7742 91.1393 48.2342 90.9393 cv
52.1542 84.7593 mo
53.0342 84.7593 53.7342 84.4593 54.2542 83.8593 cv
54.7742 83.2593 55.0342 82.4193 55.0342 81.3593 cv
55.0342 80.3193 54.7742 79.4793 54.2542 78.8793 cv
53.7342 78.2793 53.0342 77.9593 52.1542 77.9593 cv
51.2742 77.9593 50.5742 78.2793 50.0542 78.8793 cv
49.5342 79.4793 49.2742 80.3193 49.2742 81.3593 cv
49.2742 82.4193 49.5342 83.2593 50.0542 83.8593 cv
50.5742 84.4593 51.2742 84.7593 52.1542 84.7593 cv
f
65.7512 22.361 mo
62.2512 22.361 li
f
65.7512 22.361 mo
62.2512 22.361 li
@
29.4343 28.3026 mo
32.6543 28.3026 li
32.6543 17.1826 li
29.1543 17.8826 li
29.1543 16.0826 li
32.6343 15.3826 li
34.6143 15.3826 li
34.6143 28.3026 li
37.8343 28.3026 li
37.8343 29.9626 li
29.4343 29.9626 li
29.4343 28.3026 li
f
41.8143 27.4826 mo
43.8743 27.4826 li
43.8743 29.9626 li
41.8143 29.9626 li
41.8143 27.4826 li
f
52.3942 16.6826 mo
51.3742 16.6826 50.6142 17.1826 50.0942 18.1826 cv
49.5742 19.1826 49.3342 20.6826 49.3342 22.6826 cv
49.3342 24.6826 49.5742 26.1826 50.0942 27.1826 cv
50.6142 28.1826 51.3742 28.6826 52.3942 28.6826 cv
53.4142 28.6826 54.1742 28.1826 54.6942 27.1826 cv
55.1942 26.1826 55.4542 24.6826 55.4542 22.6826 cv
55.4542 20.6826 55.1942 19.1826 54.6942 18.1826 cv
54.1742 17.1826 53.4142 16.6826 52.3942 16.6826 cv
52.3942 15.1226 mo
54.0142 15.1226 55.2542 15.7826 56.1342 17.0626 cv
56.9942 18.3626 57.4342 20.2426 57.4342 22.6826 cv
57.4342 25.1426 56.9942 27.0226 56.1342 28.3026 cv
55.2542 29.5826 54.0142 30.2226 52.3942 30.2226 cv
50.7542 30.2226 49.4942 29.5826 48.6342 28.3026 cv
47.7742 27.0226 47.3542 25.1426 47.3542 22.6826 cv
47.3542 20.2426 47.7742 18.3626 48.6342 17.0626 cv
49.4942 15.7826 50.7542 15.1226 52.3942 15.1226 cv
f
6.15805 342.903 mo
13.4181 345.583 li
13.4181 340.223 li
6.15805 342.903 li
4.21805 344.023 mo
4.21805 341.783 li
18.798 336.223 li
18.798 338.283 li
15.0581 339.603 li
15.0581 346.183 li
18.798 347.503 li
18.798 349.583 li
4.21805 344.023 li
f
8.27805 326.303 mo
9.95805 326.303 li
9.67805 326.823 9.47805 327.323 9.33805 327.843 cv
9.19805 328.363 9.11805 328.863 9.11805 329.383 cv
9.11805 330.543 9.49805 331.463 10.2381 332.103 cv
10.9781 332.743 12.0181 333.063 13.3381 333.063 cv
14.678 333.063 15.718 332.743 16.4581 332.103 cv
17.1981 331.463 17.5581 330.543 17.5581 329.383 cv
17.5581 328.863 17.498 328.363 17.358 327.843 cv
17.218 327.323 16.998 326.823 16.718 326.303 cv
18.3781 326.303 li
18.618 326.823 18.798 327.343 18.898 327.863 cv
18.998 328.403 19.0581 328.983 19.0581 329.583 cv
19.0581 331.223 18.5581 332.543 17.5181 333.503 cv
16.498 334.483 15.0981 334.963 13.3381 334.963 cv
11.5581 334.963 10.1581 334.483 9.13805 333.503 cv
8.11805 332.523 7.59805 331.183 7.59805 329.463 cv
7.59805 328.903 7.65805 328.363 7.77805 327.843 cv
7.89805 327.323 8.05805 326.803 8.27805 326.303 cv
f
8.27805 315.303 mo
9.95805 315.303 li
9.67805 315.823 9.47805 316.323 9.33805 316.843 cv
9.19805 317.363 9.11805 317.863 9.11805 318.383 cv
9.11805 319.543 9.49805 320.463 10.2381 321.103 cv
10.9781 321.743 12.0181 322.063 13.3381 322.063 cv
14.678 322.063 15.718 321.743 16.4581 321.103 cv
17.1981 320.463 17.5581 319.543 17.5581 318.383 cv
17.5581 317.863 17.498 317.363 17.358 316.843 cv
17.218 316.323 16.998 315.823 16.718 315.303 cv
18.3781 315.303 li
18.618 315.823 18.798 316.343 18.898 316.863 cv
18.998 317.403 19.0581 317.983 19.0581 318.583 cv
19.0581 320.223 18.5581 321.543 17.5181 322.503 cv
16.498 323.483 15.0981 323.963 13.3381 323.963 cv
11.5581 323.963 10.1581 323.483 9.13805 322.503 cv
8.11805 321.523 7.59805 320.183 7.59805 318.463 cv
7.59805 317.903 7.65805 317.363 7.77805 316.843 cv
7.89805 316.323 8.05805 315.803 8.27805 315.303 cv
f
14.4781 312.363 mo
7.85805 312.363 li
7.85805 310.563 li
14.4181 310.563 li
15.4581 310.563 16.218 310.363 16.7381 309.963 cv
17.258 309.563 17.5181 308.963 17.5181 308.143 cv
17.5181 307.183 17.218 306.403 16.5981 305.843 cv
15.9781 305.283 15.138 305.003 14.0581 305.003 cv
7.85805 305.003 li
7.85805 303.203 li
18.798 303.203 li
18.798 305.003 li
17.118 305.003 li
17.798 305.443 18.2781 305.963 18.5981 306.523 cv
18.898 307.103 19.0581 307.763 19.0581 308.523 cv
19.0581 309.783 18.678 310.743 17.898 311.383 cv
17.138 312.043 15.998 312.363 14.4781 312.363 cv
7.59805 307.843 mo
7.59805 307.843 li
f
9.53805 293.163 mo
9.41805 293.363 9.33805 293.583 9.27805 293.823 cv
9.23805 294.063 9.19805 294.323 9.19805 294.603 cv
9.19805 295.623 9.53805 296.403 10.1981 296.943 cv
10.858 297.503 11.798 297.763 13.038 297.763 cv
18.798 297.763 li
18.798 299.563 li
7.85805 299.563 li
7.85805 297.763 li
9.55805 297.763 li
8.89805 297.403 8.39805 296.903 8.07805 296.303 cv
7.75805 295.703 7.59805 294.963 7.59805 294.083 cv
7.59805 293.963 7.61805 293.823 7.61805 293.663 cv
7.63805 293.523 7.65805 293.363 7.69805 293.163 cv
9.53805 293.163 li
f
13.298 286.303 mo
13.298 287.763 13.4781 288.763 13.798 289.323 cv
14.138 289.883 14.6981 290.163 15.498 290.163 cv
16.138 290.163 16.6581 289.963 17.0181 289.543 cv
17.398 289.123 17.578 288.543 17.578 287.823 cv
17.578 286.823 17.2381 286.023 16.5181 285.423 cv
15.818 284.823 14.8781 284.523 13.6981 284.523 cv
13.298 284.523 li
13.298 286.303 li
12.5581 282.723 mo
18.798 282.723 li
18.798 284.523 li
17.138 284.523 li
17.818 284.943 18.298 285.463 18.5981 286.063 cv
18.898 286.663 19.0581 287.423 19.0581 288.303 cv
19.0581 289.423 18.758 290.323 18.138 290.983 cv
17.5181 291.643 16.678 291.963 15.618 291.963 cv
14.398 291.963 13.4781 291.563 12.8381 290.723 cv
12.218 289.903 11.898 288.683 11.898 287.043 cv
11.898 284.523 li
11.718 284.523 li
10.898 284.523 10.258 284.803 9.79805 285.343 cv
9.35805 285.883 9.11805 286.643 9.11805 287.623 cv
9.11805 288.263 9.19805 288.863 9.35805 289.463 cv
9.51805 290.063 9.73805 290.623 10.0181 291.163 cv
8.35805 291.163 li
8.11805 290.523 7.91805 289.883 7.79805 289.263 cv
7.67805 288.643 7.59805 288.043 7.59805 287.443 cv
7.59805 285.863 8.01805 284.683 8.83805 283.903 cv
9.65805 283.123 10.898 282.723 12.5581 282.723 cv
f
8.27805 271.143 mo
9.95805 271.143 li
9.67805 271.663 9.47805 272.163 9.33805 272.683 cv
9.19805 273.203 9.11805 273.703 9.11805 274.223 cv
9.11805 275.383 9.49805 276.303 10.2381 276.943 cv
10.9781 277.583 12.0181 277.903 13.3381 277.903 cv
14.678 277.903 15.718 277.583 16.4581 276.943 cv
17.1981 276.303 17.5581 275.383 17.5581 274.223 cv
17.5581 273.703 17.498 273.203 17.358 272.683 cv
17.218 272.163 16.998 271.663 16.718 271.143 cv
18.3781 271.143 li
18.618 271.663 18.798 272.183 18.898 272.703 cv
18.998 273.243 19.0581 273.823 19.0581 274.423 cv
19.0581 276.063 18.5581 277.383 17.5181 278.343 cv
16.498 279.323 15.0981 279.803 13.3381 279.803 cv
11.5581 279.803 10.1581 279.323 9.13805 278.343 cv
8.11805 277.363 7.59805 276.023 7.59805 274.303 cv
7.59805 273.743 7.65805 273.203 7.77805 272.683 cv
7.89805 272.163 8.05805 271.643 8.27805 271.143 cv
f
19.798 263.462 mo
21.078 263.982 21.938 264.482 22.338 264.962 cv
22.7381 265.443 22.938 266.082 22.938 266.883 cv
22.938 268.323 li
21.438 268.323 li
21.438 267.262 li
21.438 266.783 21.3181 266.402 21.078 266.122 cv
20.8381 265.842 20.298 265.543 19.4181 265.202 cv
18.618 264.883 li
7.85805 269.302 li
7.85805 267.402 li
16.4181 263.982 li
7.85805 260.563 li
7.85805 258.663 li
19.798 263.462 li
f
11.958 242.823 mo
12.118 242.403 12.4181 241.983 12.8781 241.583 cv
13.358 241.183 13.998 240.783 14.818 240.383 cv
18.798 238.383 li
18.798 240.503 li
15.0581 242.363 li
14.0981 242.843 13.438 243.323 13.118 243.763 cv
12.798 244.223 12.638 244.843 12.638 245.623 cv
12.638 247.763 li
18.798 247.763 li
18.798 249.743 li
4.21805 249.743 li
4.21805 245.283 li
4.21805 243.623 4.57805 242.383 5.25805 241.563 cv
5.95805 240.743 7.01805 240.323 8.41805 240.323 cv
9.33805 240.323 10.118 240.543 10.718 240.963 cv
11.318 241.403 11.7381 242.023 11.958 242.823 cv
5.83805 247.763 mo
11.0181 247.763 li
11.0181 245.283 li
11.0181 244.343 10.798 243.623 10.358 243.143 cv
9.91805 242.663 9.27805 242.403 8.41805 242.403 cv
7.57805 242.403 6.93805 242.663 6.49805 243.143 cv
6.05805 243.623 5.83805 244.343 5.83805 245.283 cv
5.83805 247.763 li
f
13.298 230.943 mo
13.298 232.403 13.4781 233.403 13.798 233.963 cv
14.138 234.523 14.6981 234.803 15.498 234.803 cv
16.138 234.803 16.6581 234.603 17.0181 234.183 cv
17.398 233.763 17.578 233.183 17.578 232.463 cv
17.578 231.463 17.2381 230.663 16.5181 230.063 cv
15.818 229.463 14.8781 229.163 13.6981 229.163 cv
13.298 229.163 li
13.298 230.943 li
12.5581 227.363 mo
18.798 227.363 li
18.798 229.163 li
17.138 229.163 li
17.818 229.583 18.298 230.103 18.5981 230.703 cv
18.898 231.303 19.0581 232.063 19.0581 232.943 cv
19.0581 234.063 18.758 234.963 18.138 235.623 cv
17.5181 236.283 16.678 236.603 15.618 236.603 cv
14.398 236.603 13.4781 236.203 12.8381 235.363 cv
12.218 234.543 11.898 233.323 11.898 231.683 cv
11.898 229.163 li
11.718 229.163 li
10.898 229.163 10.258 229.443 9.79805 229.983 cv
9.35805 230.523 9.11805 231.283 9.11805 232.263 cv
9.11805 232.903 9.19805 233.503 9.35805 234.103 cv
9.51805 234.703 9.73805 235.263 10.0181 235.803 cv
8.35805 235.803 li
8.11805 235.163 7.91805 234.523 7.79805 233.903 cv
7.67805 233.283 7.59805 232.683 7.59805 232.083 cv
7.59805 230.503 8.01805 229.323 8.83805 228.543 cv
9.65805 227.763 10.898 227.363 12.5581 227.363 cv
f
4.75805 221.882 mo
7.85805 221.882 li
7.85805 218.182 li
9.25805 218.182 li
9.25805 221.882 li
15.1981 221.882 li
16.0981 221.882 16.678 221.762 16.9181 221.522 cv
17.178 221.282 17.298 220.782 17.298 220.022 cv
17.298 218.182 li
18.798 218.182 li
18.798 220.022 li
18.798 221.422 18.538 222.382 18.0181 222.902 cv
17.498 223.422 16.5581 223.682 15.1981 223.682 cv
9.25805 223.682 li
9.25805 225.002 li
7.85805 225.002 li
7.85805 223.682 li
4.75805 223.682 li
4.75805 221.882 li
f
12.8781 206.462 mo
13.758 206.462 li
13.758 214.722 li
14.998 214.642 15.9581 214.282 16.5981 213.602 cv
17.2381 212.942 17.5581 212.022 17.5581 210.822 cv
17.5581 210.142 17.4781 209.462 17.318 208.822 cv
17.1581 208.182 16.898 207.522 16.538 206.882 cv
18.2381 206.882 li
18.5181 207.522 18.7381 208.182 18.858 208.862 cv
18.9781 209.542 19.0581 210.242 19.0581 210.922 cv
19.0581 212.682 18.5581 214.062 17.5581 215.082 cv
16.5581 216.102 15.178 216.602 13.438 216.602 cv
11.6581 216.602 10.2381 216.122 9.17805 215.162 cv
8.13805 214.202 7.59805 212.882 7.59805 211.242 cv
7.59805 209.762 8.07805 208.602 9.01805 207.742 cv
9.97805 206.902 11.258 206.462 12.8781 206.462 cv
12.358 208.262 mo
11.3781 208.282 10.5981 208.562 9.99805 209.082 cv
9.41805 209.622 9.11805 210.342 9.11805 211.222 cv
9.11805 212.222 9.41805 213.022 9.97805 213.622 cv
10.538 214.222 11.3381 214.582 12.358 214.662 cv
12.358 208.262 li
f
1.5 lw
2 lc
114.449 521.767 mo
124.287 399.622 li
134.125 348.966 li
143.963 309.273 li
153.801 276.319 li
163.639 268.83 li
173.477 253.851 li
183.315 222.668 li
193.153 190.396 li
202.992 162.072 li
212.83 135.995 li
222.668 121.902 li
232.506 115.161 li
242.344 110.327 li
252.182 105.561 li
262.02 99.774 li
271.858 96.3698 li
281.696 90.7187 li
291.534 87.6548 li
301.372 82.6846 li
311.21 80.5059 li
321.048 78.5314 li
330.886 75.6718 li
340.724 73.9697 li
350.562 67.9781 li
360.4 65.3909 li
370.238 63.1441 li
380.076 61.9866 li
389.914 60.6931 li
399.752 59.5356 li
409.59 57.1526 li
419.428 54.5654 li
429.266 53.3398 li
439.104 51.5015 li
448.942 50.0037 li
458.78 49.527 li
468.618 48.9142 li
478.456 48.4377 li
488.294 48.3696 li
498.132 48.0972 li
507.97 47.893 li
517.808 47.2122 li
527.646 46.8717 li
537.484 47.0079 li
547.322 47.2122 li
557.16 46.327 li
566.998 45.9185 li
576.836 45.2377 li
586.674 45.3057 li
596.512 46.0547 li
606.35 44.3525 li
616.188 42.5823 li
626.026 41.9015 li
635.864 41.0164 li
645.702 40.9483 li
655.54 41.3568 li
665.378 41.2887 li
675.216 41.4249 li
685.054 40.744 li
694.892 41.2206 li
704.73 39.7908 li
714.568 39.5866 li
724.406 39.5185 li
734.244 40.0632 li
744.082 39.7228 li
753.92 40.6078 li
763.758 41.6292 li
773.596 37.7483 li
783.434 38.0887 li
793.273 38.0887 li
803.111 38.1568 li
812.949 37.7483 li
822.787 37.9525 li
832.625 37.9525 li
842.463 37.8845 li
852.301 37.8163 li
862.139 37.8163 li
871.977 37.8163 li
881.815 37.8163 li
891.653 37.8845 li
901.491 37.8163 li
911.329 37.6802 li
921.167 37.6121 li
931.005 37.6802 li
940.843 37.6802 li
950.681 37.6802 li
960.519 37.7483 li
970.357 37.6802 li
980.195 37.6121 li
990.033 37.544 li
999.871 37.544 li
1009.71 37.544 li
1019.55 37.476 li
1029.38 37.476 li
1039.22 37.4078 li
1049.06 37.476 li
1058.9 37.476 li
1068.74 37.476 li
1078.57 37.4078 li
1088.41 37.2717 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
114.449 514.005 mo
124.287 379.503 li
134.125 328.03 li
143.963 284.728 li
153.801 255.213 li
163.639 248.166 li
173.477 235.706 li
183.315 208.234 li
193.153 173.613 li
202.992 149 li
212.83 121.629 li
222.668 109.578 li
232.506 102.736 li
242.344 99.5698 li
252.182 93.4421 li
262.02 86.9059 li
271.858 83.025 li
281.696 77.1016 li
291.534 74.8548 li
301.372 72.0974 li
311.21 70.259 li
321.048 69.442 li
330.886 68.3186 li
340.724 66.276 li
350.562 59.025 li
360.4 56.8802 li
370.238 55.8589 li
380.076 54.9398 li
389.914 54.6334 li
399.752 51.9781 li
409.59 50.2419 li
419.428 48.3015 li
429.266 48.0972 li
439.104 46.9738 li
448.942 45.9526 li
458.78 46.1568 li
468.618 46.259 li
478.456 45.5441 li
488.294 45.2377 li
498.132 45.0334 li
507.97 44.9313 li
517.808 44.5228 li
527.646 44.3185 li
537.484 43.6036 li
547.322 44.0121 li
557.16 43.8079 li
566.998 43.5015 li
576.836 43.7057 li
586.674 43.7057 li
596.512 44.3185 li
606.35 42.3781 li
616.188 41.2547 li
626.026 40.8462 li
635.864 40.744 li
645.702 40.1313 li
655.54 40.2334 li
665.378 39.927 li
675.216 39.927 li
685.054 39.5185 li
694.892 39.6206 li
704.73 38.293 li
714.568 36.9653 li
724.406 37.2717 li
734.244 37.5781 li
744.082 37.7823 li
753.92 39.2121 li
763.758 39.11 li
773.596 41.2547 li
783.434 41.7653 li
793.273 41.9695 li
803.111 42.1738 li
812.949 42.1738 li
822.787 42.1738 li
832.625 42.2759 li
842.463 42.2759 li
852.301 42.2759 li
862.139 42.2759 li
871.977 42.2759 li
881.815 42.3781 li
891.653 42.3781 li
901.491 42.4802 li
911.329 42.5823 li
921.167 42.5823 li
931.005 42.5823 li
940.843 42.6844 li
950.681 42.7866 li
960.519 42.8887 li
970.357 42.8887 li
980.195 42.9908 li
990.033 42.8887 li
999.871 42.8887 li
1009.71 42.9908 li
1019.55 42.9908 li
1029.38 42.9908 li
1039.22 42.9908 li
1049.06 42.9908 li
1058.9 42.9908 li
1068.74 42.9908 li
1078.57 42.9908 li
1088.41 42.9908 li
@
gsave
110.949 517.505 mo
117.949 517.505 li
117.949 510.505 li
110.949 510.505 li
110.949 517.505 li
clp
111.449 517.005 mo
117.449 511.005 li
111.449 511.005 mo
117.449 517.005 li
f
1 lw
0 lc
111.449 517.005 mo
117.449 511.005 li
111.449 511.005 mo
117.449 517.005 li
@
grestore
gsave
120.787 383.003 mo
127.787 383.003 li
127.787 376.003 li
120.787 376.003 li
120.787 383.003 li
clp
121.287 382.503 mo
127.287 376.503 li
121.287 376.503 mo
127.287 382.503 li
f
1 lw
0 lc
121.287 382.503 mo
127.287 376.503 li
121.287 376.503 mo
127.287 382.503 li
@
grestore
gsave
130.625 331.53 mo
137.625 331.53 li
137.625 324.53 li
130.625 324.53 li
130.625 331.53 li
clp
131.125 331.03 mo
137.125 325.03 li
131.125 325.03 mo
137.125 331.03 li
f
1 lw
0 lc
131.125 331.03 mo
137.125 325.03 li
131.125 325.03 mo
137.125 331.03 li
@
grestore
gsave
140.463 288.228 mo
147.463 288.228 li
147.463 281.228 li
140.463 281.228 li
140.463 288.228 li
clp
140.963 287.728 mo
146.963 281.728 li
140.963 281.728 mo
146.963 287.728 li
f
1 lw
0 lc
140.963 287.728 mo
146.963 281.728 li
140.963 281.728 mo
146.963 287.728 li
@
grestore
gsave
150.302 258.713 mo
157.301 258.713 li
157.301 251.713 li
150.302 251.713 li
150.302 258.713 li
clp
150.801 258.213 mo
156.801 252.213 li
150.801 252.213 mo
156.801 258.213 li
f
1 lw
0 lc
150.801 258.213 mo
156.801 252.213 li
150.801 252.213 mo
156.801 258.213 li
@
grestore
gsave
160.14 251.666 mo
167.14 251.666 li
167.14 244.666 li
160.14 244.666 li
160.14 251.666 li
clp
160.639 251.166 mo
166.639 245.166 li
160.639 245.166 mo
166.639 251.166 li
f
1 lw
0 lc
160.639 251.166 mo
166.639 245.166 li
160.639 245.166 mo
166.639 251.166 li
@
grestore
gsave
169.977 239.206 mo
176.978 239.206 li
176.978 232.206 li
169.977 232.206 li
169.977 239.206 li
clp
170.477 238.706 mo
176.477 232.706 li
170.477 232.706 mo
176.477 238.706 li
f
1 lw
0 lc
170.477 238.706 mo
176.477 232.706 li
170.477 232.706 mo
176.477 238.706 li
@
grestore
gsave
179.815 211.734 mo
186.815 211.734 li
186.815 204.734 li
179.815 204.734 li
179.815 211.734 li
clp
180.315 211.234 mo
186.315 205.234 li
180.315 205.234 mo
186.315 211.234 li
f
1 lw
0 lc
180.315 211.234 mo
186.315 205.234 li
180.315 205.234 mo
186.315 211.234 li
@
grestore
gsave
189.653 177.112 mo
196.653 177.112 li
196.653 170.112 li
189.653 170.112 li
189.653 177.112 li
clp
190.153 176.612 mo
196.153 170.612 li
190.153 170.612 mo
196.153 176.612 li
f
1 lw
0 lc
190.153 176.612 mo
196.153 170.612 li
190.153 170.612 mo
196.153 176.612 li
@
grestore
gsave
199.491 152.5 mo
206.491 152.5 li
206.491 145.5 li
199.491 145.5 li
199.491 152.5 li
clp
199.991 152 mo
205.991 146 li
199.991 146 mo
205.991 152 li
f
1 lw
0 lc
199.991 152 mo
205.991 146 li
199.991 146 mo
205.991 152 li
@
grestore
gsave
209.33 125.129 mo
216.329 125.129 li
216.329 118.129 li
209.33 118.129 li
209.33 125.129 li
clp
209.829 124.629 mo
215.829 118.629 li
209.829 118.629 mo
215.829 124.629 li
f
1 lw
0 lc
209.829 124.629 mo
215.829 118.629 li
209.829 118.629 mo
215.829 124.629 li
@
grestore
gsave
219.168 113.078 mo
226.168 113.078 li
226.168 106.078 li
219.168 106.078 li
219.168 113.078 li
clp
219.668 112.578 mo
225.668 106.578 li
219.668 106.578 mo
225.668 112.578 li
f
1 lw
0 lc
219.668 112.578 mo
225.668 106.578 li
219.668 106.578 mo
225.668 112.578 li
@
grestore
gsave
229.006 106.236 mo
236.006 106.236 li
236.006 99.2357 li
229.006 99.2357 li
229.006 106.236 li
clp
229.506 105.736 mo
235.506 99.7357 li
229.506 99.7357 mo
235.506 105.736 li
f
1 lw
0 lc
229.506 105.736 mo
235.506 99.7357 li
229.506 99.7357 mo
235.506 105.736 li
@
grestore
gsave
238.843 103.07 mo
245.844 103.07 li
245.844 96.0696 li
238.843 96.0696 li
238.843 103.07 li
clp
239.344 102.57 mo
245.344 96.5697 li
239.344 96.5697 mo
245.344 102.57 li
f
1 lw
0 lc
239.344 102.57 mo
245.344 96.5697 li
239.344 96.5697 mo
245.344 102.57 li
@
grestore
gsave
248.681 96.942 mo
255.681 96.942 li
255.681 89.9421 li
248.681 89.9421 li
248.681 96.942 li
clp
249.182 96.442 mo
255.182 90.442 li
249.182 90.442 mo
255.182 96.442 li
f
1 lw
0 lc
249.182 96.442 mo
255.182 90.442 li
249.182 90.442 mo
255.182 96.442 li
@
grestore
gsave
258.52 90.4058 mo
265.519 90.4058 li
265.519 83.4058 li
258.52 83.4058 li
258.52 90.4058 li
clp
259.02 89.9058 mo
265.02 83.9058 li
259.02 83.9058 mo
265.02 89.9058 li
f
1 lw
0 lc
259.02 89.9058 mo
265.02 83.9058 li
259.02 83.9058 mo
265.02 89.9058 li
@
grestore
gsave
268.358 86.525 mo
275.358 86.525 li
275.358 79.525 li
268.358 79.525 li
268.358 86.525 li
clp
268.858 86.025 mo
274.858 80.025 li
268.858 80.025 mo
274.858 86.025 li
f
1 lw
0 lc
268.858 86.025 mo
274.858 80.025 li
268.858 80.025 mo
274.858 86.025 li
@
grestore
gsave
278.196 80.6016 mo
285.196 80.6016 li
285.196 73.6017 li
278.196 73.6017 li
278.196 80.6016 li
clp
278.696 80.1016 mo
284.696 74.1016 li
278.696 74.1016 mo
284.696 80.1016 li
f
1 lw
0 lc
278.696 80.1016 mo
284.696 74.1016 li
278.696 74.1016 mo
284.696 80.1016 li
@
grestore
gsave
288.034 78.3546 mo
295.034 78.3546 li
295.034 71.3547 li
288.034 71.3547 li
288.034 78.3546 li
clp
288.534 77.8547 mo
294.534 71.8547 li
288.534 71.8547 mo
294.534 77.8547 li
f
1 lw
0 lc
288.534 77.8547 mo
294.534 71.8547 li
288.534 71.8547 mo
294.534 77.8547 li
@
grestore
gsave
297.872 75.5971 mo
304.872 75.5971 li
304.872 68.5972 li
297.872 68.5972 li
297.872 75.5971 li
clp
298.372 75.0973 mo
304.372 69.0973 li
298.372 69.0973 mo
304.372 75.0973 li
f
1 lw
0 lc
298.372 75.0973 mo
304.372 69.0973 li
298.372 69.0973 mo
304.372 75.0973 li
@
grestore
gsave
307.709 73.7588 mo
314.71 73.7588 li
314.71 66.7589 li
307.709 66.7589 li
307.709 73.7588 li
clp
308.21 73.259 mo
314.21 67.259 li
308.21 67.259 mo
314.21 73.259 li
f
1 lw
0 lc
308.21 73.259 mo
314.21 67.259 li
308.21 67.259 mo
314.21 73.259 li
@
grestore
gsave
317.548 72.9421 mo
324.547 72.9421 li
324.547 65.9418 li
317.548 65.9418 li
317.548 72.9421 li
clp
318.048 72.442 mo
324.048 66.442 li
318.048 66.442 mo
324.048 72.442 li
f
1 lw
0 lc
318.048 72.442 mo
324.048 66.442 li
318.048 66.442 mo
324.048 72.442 li
@
grestore
gsave
327.386 71.8184 mo
334.386 71.8184 li
334.386 64.8185 li
327.386 64.8185 li
327.386 71.8184 li
clp
327.886 71.3185 mo
333.886 65.3185 li
327.886 65.3185 mo
333.886 71.3185 li
f
1 lw
0 lc
327.886 71.3185 mo
333.886 65.3185 li
327.886 65.3185 mo
333.886 71.3185 li
@
grestore
gsave
337.224 69.7759 mo
344.224 69.7759 li
344.224 62.776 li
337.224 62.776 li
337.224 69.7759 li
clp
337.724 69.276 mo
343.724 63.276 li
337.724 63.276 mo
343.724 69.276 li
f
1 lw
0 lc
337.724 69.276 mo
343.724 63.276 li
337.724 63.276 mo
343.724 69.276 li
@
grestore
gsave
347.062 62.5251 mo
354.062 62.5251 li
354.062 55.5248 li
347.062 55.5248 li
347.062 62.5251 li
clp
347.562 62.0249 mo
353.562 56.0249 li
347.562 56.0249 mo
353.562 62.0249 li
f
1 lw
0 lc
347.562 62.0249 mo
353.562 56.0249 li
347.562 56.0249 mo
353.562 62.0249 li
@
grestore
gsave
356.9 60.3801 mo
363.9 60.3801 li
363.9 53.3802 li
356.9 53.3802 li
356.9 60.3801 li
clp
357.4 59.8802 mo
363.4 53.8802 li
357.4 53.8802 mo
363.4 59.8802 li
f
1 lw
0 lc
357.4 59.8802 mo
363.4 53.8802 li
357.4 53.8802 mo
363.4 59.8802 li
@
grestore
gsave
366.738 59.3589 mo
373.738 59.3589 li
373.738 52.3589 li
366.738 52.3589 li
366.738 59.3589 li
clp
367.238 58.8589 mo
373.238 52.8589 li
367.238 52.8589 mo
373.238 58.8589 li
f
1 lw
0 lc
367.238 58.8589 mo
373.238 52.8589 li
367.238 52.8589 mo
373.238 58.8589 li
@
grestore
gsave
376.576 58.4397 mo
383.576 58.4397 li
383.576 51.4398 li
376.576 51.4398 li
376.576 58.4397 li
clp
377.076 57.9398 mo
383.076 51.9398 li
377.076 51.9398 mo
383.076 57.9398 li
f
1 lw
0 lc
377.076 57.9398 mo
383.076 51.9398 li
377.076 51.9398 mo
383.076 57.9398 li
@
grestore
gsave
386.414 58.1334 mo
393.414 58.1334 li
393.414 51.1335 li
386.414 51.1335 li
386.414 58.1334 li
clp
386.914 57.6334 mo
392.914 51.6334 li
386.914 51.6334 mo
392.914 57.6334 li
f
1 lw
0 lc
386.914 57.6334 mo
392.914 51.6334 li
386.914 51.6334 mo
392.914 57.6334 li
@
grestore
gsave
396.252 55.478 mo
403.252 55.478 li
403.252 48.4781 li
396.252 48.4781 li
396.252 55.478 li
clp
396.752 54.978 mo
402.752 48.978 li
396.752 48.978 mo
402.752 54.978 li
f
1 lw
0 lc
396.752 54.978 mo
402.752 48.978 li
396.752 48.978 mo
402.752 54.978 li
@
grestore
gsave
406.09 53.7418 mo
413.09 53.7418 li
413.09 46.7419 li
406.09 46.7419 li
406.09 53.7418 li
clp
406.59 53.2418 mo
412.59 47.2418 li
406.59 47.2418 mo
412.59 53.2418 li
f
1 lw
0 lc
406.59 53.2418 mo
412.59 47.2418 li
406.59 47.2418 mo
412.59 53.2418 li
@
grestore
gsave
415.928 51.8014 mo
422.928 51.8014 li
422.928 44.8015 li
415.928 44.8015 li
415.928 51.8014 li
clp
416.428 51.3014 mo
422.428 45.3014 li
416.428 45.3014 mo
422.428 51.3014 li
f
1 lw
0 lc
416.428 51.3014 mo
422.428 45.3014 li
416.428 45.3014 mo
422.428 51.3014 li
@
grestore
gsave
425.766 51.5972 mo
432.766 51.5972 li
432.766 44.5973 li
425.766 44.5973 li
425.766 51.5972 li
clp
426.266 51.0971 mo
432.266 45.0971 li
426.266 45.0971 mo
432.266 51.0971 li
f
1 lw
0 lc
426.266 51.0971 mo
432.266 45.0971 li
426.266 45.0971 mo
432.266 51.0971 li
@
grestore
gsave
435.604 50.4735 mo
442.604 50.4735 li
442.604 43.4736 li
435.604 43.4736 li
435.604 50.4735 li
clp
436.104 49.9737 mo
442.104 43.9737 li
436.104 43.9737 mo
442.104 49.9737 li
f
1 lw
0 lc
436.104 49.9737 mo
442.104 43.9737 li
436.104 43.9737 mo
442.104 49.9737 li
@
grestore
gsave
445.442 49.4523 mo
452.442 49.4523 li
452.442 42.4523 li
445.442 42.4523 li
445.442 49.4523 li
clp
445.942 48.9524 mo
451.942 42.9524 li
445.942 42.9524 mo
451.942 48.9524 li
f
1 lw
0 lc
445.942 48.9524 mo
451.942 42.9524 li
445.942 42.9524 mo
451.942 48.9524 li
@
grestore
gsave
455.28 49.6568 mo
462.28 49.6568 li
462.28 42.6565 li
455.28 42.6565 li
455.28 49.6568 li
clp
455.78 49.1567 mo
461.78 43.1567 li
455.78 43.1567 mo
461.78 49.1567 li
f
1 lw
0 lc
455.78 49.1567 mo
461.78 43.1567 li
455.78 43.1567 mo
461.78 49.1567 li
@
grestore
gsave
465.118 49.7589 mo
472.118 49.7589 li
472.118 42.759 li
465.118 42.759 li
465.118 49.7589 li
clp
465.618 49.2588 mo
471.618 43.2588 li
465.618 43.2588 mo
471.618 49.2588 li
f
1 lw
0 lc
465.618 49.2588 mo
471.618 43.2588 li
465.618 43.2588 mo
471.618 49.2588 li
@
grestore
gsave
474.956 49.0439 mo
481.956 49.0439 li
481.956 42.044 li
474.956 42.044 li
474.956 49.0439 li
clp
475.456 48.5439 mo
481.456 42.5439 li
475.456 42.5439 mo
481.456 48.5439 li
f
1 lw
0 lc
475.456 48.5439 mo
481.456 42.5439 li
475.456 42.5439 mo
481.456 48.5439 li
@
grestore
gsave
484.794 48.7376 mo
491.794 48.7376 li
491.794 41.7374 li
484.794 41.7374 li
484.794 48.7376 li
clp
485.294 48.2375 mo
491.294 42.2375 li
485.294 42.2375 mo
491.294 48.2375 li
f
1 lw
0 lc
485.294 48.2375 mo
491.294 42.2375 li
485.294 42.2375 mo
491.294 48.2375 li
@
grestore
gsave
494.632 48.5331 mo
501.632 48.5331 li
501.632 41.5332 li
494.632 41.5332 li
494.632 48.5331 li
clp
495.132 48.0332 mo
501.132 42.0332 li
495.132 42.0332 mo
501.132 48.0332 li
f
1 lw
0 lc
495.132 48.0332 mo
501.132 42.0332 li
495.132 42.0332 mo
501.132 48.0332 li
@
grestore
gsave
504.47 48.431 mo
511.47 48.431 li
511.47 41.4311 li
504.47 41.4311 li
504.47 48.431 li
clp
504.97 47.9311 mo
510.97 41.9311 li
504.97 41.9311 mo
510.97 47.9311 li
f
1 lw
0 lc
504.97 47.9311 mo
510.97 41.9311 li
504.97 41.9311 mo
510.97 47.9311 li
@
grestore
gsave
514.308 48.0227 mo
521.308 48.0227 li
521.308 41.0227 li
514.308 41.0227 li
514.308 48.0227 li
clp
514.808 47.5226 mo
520.808 41.5226 li
514.808 41.5226 mo
520.808 47.5226 li
f
1 lw
0 lc
514.808 47.5226 mo
520.808 41.5226 li
514.808 41.5226 mo
520.808 47.5226 li
@
grestore
gsave
524.146 47.8181 mo
531.146 47.8181 li
531.146 40.8182 li
524.146 40.8182 li
524.146 47.8181 li
clp
524.646 47.3183 mo
530.646 41.3183 li
524.646 41.3183 mo
530.646 47.3183 li
f
1 lw
0 lc
524.646 47.3183 mo
530.646 41.3183 li
524.646 41.3183 mo
530.646 47.3183 li
@
grestore
gsave
533.984 47.1035 mo
540.984 47.1035 li
540.984 40.1036 li
533.984 40.1036 li
533.984 47.1035 li
clp
534.484 46.6034 mo
540.484 40.6034 li
534.484 40.6034 mo
540.484 46.6034 li
f
1 lw
0 lc
534.484 46.6034 mo
540.484 40.6034 li
534.484 40.6034 mo
540.484 46.6034 li
@
grestore
gsave
543.822 47.5119 mo
550.822 47.5119 li
550.822 40.5119 li
543.822 40.5119 li
543.822 47.5119 li
clp
544.322 47.0119 mo
550.322 41.0119 li
544.322 41.0119 mo
550.322 47.0119 li
f
1 lw
0 lc
544.322 47.0119 mo
550.322 41.0119 li
544.322 41.0119 mo
550.322 47.0119 li
@
grestore
gsave
553.66 47.3077 mo
560.66 47.3077 li
560.66 40.3077 li
553.66 40.3077 li
553.66 47.3077 li
clp
554.16 46.8076 mo
560.16 40.8076 li
554.16 40.8076 mo
560.16 46.8076 li
f
1 lw
0 lc
554.16 46.8076 mo
560.16 40.8076 li
554.16 40.8076 mo
560.16 46.8076 li
@
grestore
gsave
563.498 47.0011 mo
570.498 47.0011 li
570.498 40.0011 li
563.498 40.0011 li
563.498 47.0011 li
clp
563.998 46.5012 mo
569.998 40.5012 li
563.998 40.5012 mo
569.998 46.5012 li
f
1 lw
0 lc
563.998 46.5012 mo
569.998 40.5012 li
563.998 40.5012 mo
569.998 46.5012 li
@
grestore
gsave
573.336 47.2056 mo
580.336 47.2056 li
580.336 40.2057 li
573.336 40.2057 li
573.336 47.2056 li
clp
573.836 46.7055 mo
579.836 40.7055 li
573.836 40.7055 mo
579.836 46.7055 li
f
1 lw
0 lc
573.836 46.7055 mo
579.836 40.7055 li
573.836 40.7055 mo
579.836 46.7055 li
@
grestore
gsave
583.174 47.2056 mo
590.174 47.2056 li
590.174 40.2057 li
583.174 40.2057 li
583.174 47.2056 li
clp
583.674 46.7055 mo
589.674 40.7055 li
583.674 40.7055 mo
589.674 46.7055 li
f
1 lw
0 lc
583.674 46.7055 mo
589.674 40.7055 li
583.674 40.7055 mo
589.674 46.7055 li
@
grestore
gsave
593.012 47.8181 mo
600.012 47.8181 li
600.012 40.8182 li
593.012 40.8182 li
593.012 47.8181 li
clp
593.512 47.3183 mo
599.512 41.3183 li
593.512 41.3183 mo
599.512 47.3183 li
f
1 lw
0 lc
593.512 47.3183 mo
599.512 41.3183 li
593.512 41.3183 mo
599.512 47.3183 li
@
grestore
gsave
602.85 45.8777 mo
609.85 45.8777 li
609.85 38.8778 li
602.85 38.8778 li
602.85 45.8777 li
clp
603.35 45.3779 mo
609.35 39.3779 li
603.35 39.3779 mo
609.35 45.3779 li
f
1 lw
0 lc
603.35 45.3779 mo
609.35 39.3779 li
603.35 39.3779 mo
609.35 45.3779 li
@
grestore
gsave
612.688 44.7544 mo
619.688 44.7544 li
619.688 37.7544 li
612.688 37.7544 li
612.688 44.7544 li
clp
613.188 44.2545 mo
619.188 38.2545 li
613.188 38.2545 mo
619.188 44.2545 li
f
1 lw
0 lc
613.188 44.2545 mo
619.188 38.2545 li
613.188 38.2545 mo
619.188 44.2545 li
@
grestore
gsave
622.526 44.346 mo
629.526 44.346 li
629.526 37.3461 li
622.526 37.3461 li
622.526 44.346 li
clp
623.026 43.8459 mo
629.026 37.8459 li
623.026 37.8459 mo
629.026 43.8459 li
f
1 lw
0 lc
623.026 43.8459 mo
629.026 37.8459 li
623.026 37.8459 mo
629.026 43.8459 li
@
grestore
gsave
632.364 44.2439 mo
639.364 44.2439 li
639.364 37.244 li
632.364 37.244 li
632.364 44.2439 li
clp
632.864 43.7438 mo
638.864 37.7438 li
632.864 37.7438 mo
638.864 43.7438 li
f
1 lw
0 lc
632.864 43.7438 mo
638.864 37.7438 li
632.864 37.7438 mo
638.864 43.7438 li
@
grestore
gsave
642.202 43.631 mo
649.202 43.631 li
649.202 36.6311 li
642.202 36.6311 li
642.202 43.631 li
clp
642.702 43.131 mo
648.702 37.131 li
642.702 37.131 mo
648.702 43.131 li
f
1 lw
0 lc
642.702 43.131 mo
648.702 37.131 li
642.702 37.131 mo
648.702 43.131 li
@
grestore
gsave
652.04 43.7331 mo
659.04 43.7331 li
659.04 36.7332 li
652.04 36.7332 li
652.04 43.7331 li
clp
652.54 43.2332 mo
658.54 37.2332 li
652.54 37.2332 mo
658.54 43.2332 li
f
1 lw
0 lc
652.54 43.2332 mo
658.54 37.2332 li
652.54 37.2332 mo
658.54 43.2332 li
@
grestore
gsave
661.878 43.4269 mo
668.878 43.4269 li
668.878 36.4269 li
661.878 36.4269 li
661.878 43.4269 li
clp
662.378 42.9268 mo
668.378 36.9268 li
662.378 36.9268 mo
668.378 42.9268 li
f
1 lw
0 lc
662.378 42.9268 mo
668.378 36.9268 li
662.378 36.9268 mo
668.378 42.9268 li
@
grestore
gsave
671.716 43.4269 mo
678.716 43.4269 li
678.716 36.4269 li
671.716 36.4269 li
671.716 43.4269 li
clp
672.216 42.9268 mo
678.216 36.9268 li
672.216 36.9268 mo
678.216 42.9268 li
f
1 lw
0 lc
672.216 42.9268 mo
678.216 36.9268 li
672.216 36.9268 mo
678.216 42.9268 li
@
grestore
gsave
681.554 43.0182 mo
688.554 43.0182 li
688.554 36.0182 li
681.554 36.0182 li
681.554 43.0182 li
clp
682.054 42.5182 mo
688.054 36.5182 li
682.054 36.5182 mo
688.054 42.5182 li
f
1 lw
0 lc
682.054 42.5182 mo
688.054 36.5182 li
682.054 36.5182 mo
688.054 42.5182 li
@
grestore
gsave
691.392 43.1202 mo
698.392 43.1202 li
698.392 36.1203 li
691.392 36.1203 li
691.392 43.1202 li
clp
691.892 42.6204 mo
697.892 36.6204 li
691.892 36.6204 mo
697.892 42.6204 li
f
1 lw
0 lc
691.892 42.6204 mo
697.892 36.6204 li
691.892 36.6204 mo
697.892 42.6204 li
@
grestore
gsave
701.23 41.7927 mo
708.23 41.7927 li
708.23 34.7928 li
701.23 34.7928 li
701.23 41.7927 li
clp
701.73 41.2927 mo
707.73 35.2927 li
701.73 35.2927 mo
707.73 41.2927 li
f
1 lw
0 lc
701.73 41.2927 mo
707.73 35.2927 li
701.73 35.2927 mo
707.73 41.2927 li
@
grestore
gsave
711.068 40.4652 mo
718.068 40.4652 li
718.068 33.4653 li
711.068 33.4653 li
711.068 40.4652 li
clp
711.568 39.9651 mo
717.568 33.9651 li
711.568 33.9651 mo
717.568 39.9651 li
f
1 lw
0 lc
711.568 39.9651 mo
717.568 33.9651 li
711.568 33.9651 mo
717.568 39.9651 li
@
grestore
gsave
720.906 40.7715 mo
727.906 40.7715 li
727.906 33.7715 li
720.906 33.7715 li
720.906 40.7715 li
clp
721.406 40.2715 mo
727.406 34.2715 li
721.406 34.2715 mo
727.406 40.2715 li
f
1 lw
0 lc
721.406 40.2715 mo
727.406 34.2715 li
721.406 34.2715 mo
727.406 40.2715 li
@
grestore
gsave
730.744 41.0777 mo
737.744 41.0777 li
737.744 34.0778 li
730.744 34.0778 li
730.744 41.0777 li
clp
731.244 40.5779 mo
737.244 34.5779 li
731.244 34.5779 mo
737.244 40.5779 li
f
1 lw
0 lc
731.244 40.5779 mo
737.244 34.5779 li
731.244 34.5779 mo
737.244 40.5779 li
@
grestore
gsave
740.582 41.2823 mo
747.582 41.2823 li
747.582 34.2823 li
740.582 34.2823 li
740.582 41.2823 li
clp
741.082 40.7822 mo
747.082 34.7822 li
741.082 34.7822 mo
747.082 40.7822 li
f
1 lw
0 lc
741.082 40.7822 mo
747.082 34.7822 li
741.082 34.7822 mo
747.082 40.7822 li
@
grestore
gsave
750.42 42.7119 mo
757.42 42.7119 li
757.42 35.7119 li
750.42 35.7119 li
750.42 42.7119 li
clp
750.92 42.212 mo
756.92 36.212 li
750.92 36.212 mo
756.92 42.212 li
f
1 lw
0 lc
750.92 42.212 mo
756.92 36.212 li
750.92 36.212 mo
756.92 42.212 li
@
grestore
gsave
760.258 42.6098 mo
767.258 42.6098 li
767.258 35.6099 li
760.258 35.6099 li
760.258 42.6098 li
clp
760.758 42.1099 mo
766.758 36.1099 li
760.758 36.1099 mo
766.758 42.1099 li
f
1 lw
0 lc
760.758 42.1099 mo
766.758 36.1099 li
760.758 36.1099 mo
766.758 42.1099 li
@
grestore
gsave
770.096 44.7547 mo
777.096 44.7547 li
777.096 37.7544 li
770.096 37.7544 li
770.096 44.7547 li
clp
770.596 44.2546 mo
776.596 38.2546 li
770.596 38.2546 mo
776.596 44.2546 li
f
1 lw
0 lc
770.596 44.2546 mo
776.596 38.2546 li
770.596 38.2546 mo
776.596 44.2546 li
@
grestore
gsave
779.934 45.2652 mo
786.934 45.2652 li
786.934 38.2652 li
779.934 38.2652 li
779.934 45.2652 li
clp
780.434 44.7652 mo
786.434 38.7652 li
780.434 38.7652 mo
786.434 44.7652 li
f
1 lw
0 lc
780.434 44.7652 mo
786.434 38.7652 li
780.434 38.7652 mo
786.434 44.7652 li
@
grestore
gsave
789.772 45.4694 mo
796.772 45.4694 li
796.772 38.4694 li
789.772 38.4694 li
789.772 45.4694 li
clp
790.272 44.9695 mo
796.272 38.9695 li
790.272 38.9695 mo
796.272 44.9695 li
f
1 lw
0 lc
790.272 44.9695 mo
796.272 38.9695 li
790.272 38.9695 mo
796.272 44.9695 li
@
grestore
gsave
799.61 45.6739 mo
806.61 45.6739 li
806.61 38.6736 li
799.61 38.6736 li
799.61 45.6739 li
clp
800.11 45.1738 mo
806.11 39.1738 li
800.11 39.1738 mo
806.11 45.1738 li
f
1 lw
0 lc
800.11 45.1738 mo
806.11 39.1738 li
800.11 39.1738 mo
806.11 45.1738 li
@
grestore
gsave
809.448 45.6739 mo
816.448 45.6739 li
816.448 38.6736 li
809.448 38.6736 li
809.448 45.6739 li
clp
809.948 45.1738 mo
815.948 39.1738 li
809.948 39.1738 mo
815.948 45.1738 li
f
1 lw
0 lc
809.948 45.1738 mo
815.948 39.1738 li
809.948 39.1738 mo
815.948 45.1738 li
@
grestore
gsave
819.286 45.6739 mo
826.286 45.6739 li
826.286 38.6736 li
819.286 38.6736 li
819.286 45.6739 li
clp
819.786 45.1738 mo
825.786 39.1738 li
819.786 39.1738 mo
825.786 45.1738 li
f
1 lw
0 lc
819.786 45.1738 mo
825.786 39.1738 li
819.786 39.1738 mo
825.786 45.1738 li
@
grestore
gsave
829.124 45.776 mo
836.124 45.776 li
836.124 38.776 li
829.124 38.776 li
829.124 45.776 li
clp
829.624 45.2759 mo
835.624 39.2759 li
829.624 39.2759 mo
835.624 45.2759 li
f
1 lw
0 lc
829.624 45.2759 mo
835.624 39.2759 li
829.624 39.2759 mo
835.624 45.2759 li
@
grestore
gsave
838.962 45.776 mo
845.962 45.776 li
845.962 38.776 li
838.962 38.776 li
838.962 45.776 li
clp
839.462 45.2759 mo
845.462 39.2759 li
839.462 39.2759 mo
845.462 45.2759 li
f
1 lw
0 lc
839.462 45.2759 mo
845.462 39.2759 li
839.462 39.2759 mo
845.462 45.2759 li
@
grestore
gsave
848.8 45.776 mo
855.8 45.776 li
855.8 38.776 li
848.8 38.776 li
848.8 45.776 li
clp
849.3 45.2759 mo
855.3 39.2759 li
849.3 39.2759 mo
855.3 45.2759 li
f
1 lw
0 lc
849.3 45.2759 mo
855.3 39.2759 li
849.3 39.2759 mo
855.3 45.2759 li
@
grestore
gsave
858.638 45.776 mo
865.638 45.776 li
865.638 38.776 li
858.638 38.776 li
858.638 45.776 li
clp
859.138 45.2759 mo
865.138 39.2759 li
859.138 39.2759 mo
865.138 45.2759 li
f
1 lw
0 lc
859.138 45.2759 mo
865.138 39.2759 li
859.138 39.2759 mo
865.138 45.2759 li
@
grestore
gsave
868.477 45.776 mo
875.477 45.776 li
875.477 38.776 li
868.477 38.776 li
868.477 45.776 li
clp
868.976 45.2759 mo
874.976 39.2759 li
868.976 39.2759 mo
874.976 45.2759 li
f
1 lw
0 lc
868.976 45.2759 mo
874.976 39.2759 li
868.976 39.2759 mo
874.976 45.2759 li
@
grestore
gsave
878.314 45.8781 mo
885.315 45.8781 li
885.315 38.8781 li
878.314 38.8781 li
878.314 45.8781 li
clp
878.814 45.378 mo
884.814 39.378 li
878.814 39.378 mo
884.814 45.378 li
f
1 lw
0 lc
878.814 45.378 mo
884.814 39.378 li
878.814 39.378 mo
884.814 45.378 li
@
grestore
gsave
888.152 45.8781 mo
895.152 45.8781 li
895.152 38.8781 li
888.152 38.8781 li
888.152 45.8781 li
clp
888.652 45.378 mo
894.652 39.378 li
888.652 39.378 mo
894.652 45.378 li
f
1 lw
0 lc
888.652 45.378 mo
894.652 39.378 li
888.652 39.378 mo
894.652 45.378 li
@
grestore
gsave
897.99 45.9802 mo
904.99 45.9802 li
904.99 38.9802 li
897.99 38.9802 li
897.99 45.9802 li
clp
898.49 45.4801 mo
904.49 39.4801 li
898.49 39.4801 mo
904.49 45.4801 li
f
1 lw
0 lc
898.49 45.4801 mo
904.49 39.4801 li
898.49 39.4801 mo
904.49 45.4801 li
@
grestore
gsave
907.828 46.0823 mo
914.828 46.0823 li
914.828 39.0823 li
907.828 39.0823 li
907.828 46.0823 li
clp
908.328 45.5822 mo
914.328 39.5822 li
908.328 39.5822 mo
914.328 45.5822 li
f
1 lw
0 lc
908.328 45.5822 mo
914.328 39.5822 li
908.328 39.5822 mo
914.328 45.5822 li
@
grestore
gsave
917.667 46.0823 mo
924.667 46.0823 li
924.667 39.0823 li
917.667 39.0823 li
917.667 46.0823 li
clp
918.167 45.5822 mo
924.167 39.5822 li
918.167 39.5822 mo
924.167 45.5822 li
f
1 lw
0 lc
918.167 45.5822 mo
924.167 39.5822 li
918.167 39.5822 mo
924.167 45.5822 li
@
grestore
gsave
927.505 46.0823 mo
934.505 46.0823 li
934.505 39.0823 li
927.505 39.0823 li
927.505 46.0823 li
clp
928.005 45.5822 mo
934.005 39.5822 li
928.005 39.5822 mo
934.005 45.5822 li
f
1 lw
0 lc
928.005 45.5822 mo
934.005 39.5822 li
928.005 39.5822 mo
934.005 45.5822 li
@
grestore
gsave
937.343 46.1843 mo
944.343 46.1843 li
944.343 39.1844 li
937.343 39.1844 li
937.343 46.1843 li
clp
937.843 45.6843 mo
943.843 39.6843 li
937.843 39.6843 mo
943.843 45.6843 li
f
1 lw
0 lc
937.843 45.6843 mo
943.843 39.6843 li
937.843 39.6843 mo
943.843 45.6843 li
@
grestore
gsave
947.181 46.2864 mo
954.181 46.2864 li
954.181 39.2865 li
947.181 39.2865 li
947.181 46.2864 li
clp
947.681 45.7864 mo
953.681 39.7864 li
947.681 39.7864 mo
953.681 45.7864 li
f
1 lw
0 lc
947.681 45.7864 mo
953.681 39.7864 li
947.681 39.7864 mo
953.681 45.7864 li
@
grestore
gsave
957.018 46.3885 mo
964.019 46.3885 li
964.019 39.3886 li
957.018 39.3886 li
957.018 46.3885 li
clp
957.519 45.8885 mo
963.519 39.8885 li
957.519 39.8885 mo
963.519 45.8885 li
f
1 lw
0 lc
957.519 45.8885 mo
963.519 39.8885 li
957.519 39.8885 mo
963.519 45.8885 li
@
grestore
gsave
966.856 46.3885 mo
973.856 46.3885 li
973.856 39.3886 li
966.856 39.3886 li
966.856 46.3885 li
clp
967.357 45.8885 mo
973.357 39.8885 li
967.357 39.8885 mo
973.357 45.8885 li
f
1 lw
0 lc
967.357 45.8885 mo
973.357 39.8885 li
967.357 39.8885 mo
973.357 45.8885 li
@
grestore
gsave
976.694 46.4906 mo
983.694 46.4906 li
983.694 39.4907 li
976.694 39.4907 li
976.694 46.4906 li
clp
977.195 45.9907 mo
983.195 39.9907 li
977.195 39.9907 mo
983.195 45.9907 li
f
1 lw
0 lc
977.195 45.9907 mo
983.195 39.9907 li
977.195 39.9907 mo
983.195 45.9907 li
@
grestore
gsave
986.533 46.3885 mo
993.532 46.3885 li
993.532 39.3886 li
986.533 39.3886 li
986.533 46.3885 li
clp
987.033 45.8885 mo
993.033 39.8885 li
987.033 39.8885 mo
993.033 45.8885 li
f
1 lw
0 lc
987.033 45.8885 mo
993.033 39.8885 li
987.033 39.8885 mo
993.033 45.8885 li
@
grestore
gsave
996.371 46.3885 mo
1003.37 46.3885 li
1003.37 39.3886 li
996.371 39.3886 li
996.371 46.3885 li
clp
996.871 45.8885 mo
1002.87 39.8885 li
996.871 39.8885 mo
1002.87 45.8885 li
f
1 lw
0 lc
996.871 45.8885 mo
1002.87 39.8885 li
996.871 39.8885 mo
1002.87 45.8885 li
@
grestore
gsave
1006.21 46.4906 mo
1013.21 46.4906 li
1013.21 39.4907 li
1006.21 39.4907 li
1006.21 46.4906 li
clp
1006.71 45.9907 mo
1012.71 39.9907 li
1006.71 39.9907 mo
1012.71 45.9907 li
f
1 lw
0 lc
1006.71 45.9907 mo
1012.71 39.9907 li
1006.71 39.9907 mo
1012.71 45.9907 li
@
grestore
gsave
1016.05 46.4906 mo
1023.05 46.4906 li
1023.05 39.4907 li
1016.05 39.4907 li
1016.05 46.4906 li
clp
1016.55 45.9907 mo
1022.55 39.9907 li
1016.55 39.9907 mo
1022.55 45.9907 li
f
1 lw
0 lc
1016.55 45.9907 mo
1022.55 39.9907 li
1016.55 39.9907 mo
1022.55 45.9907 li
@
grestore
gsave
1025.88 46.4906 mo
1032.88 46.4906 li
1032.88 39.4907 li
1025.88 39.4907 li
1025.88 46.4906 li
clp
1026.38 45.9907 mo
1032.38 39.9907 li
1026.38 39.9907 mo
1032.38 45.9907 li
f
1 lw
0 lc
1026.38 45.9907 mo
1032.38 39.9907 li
1026.38 39.9907 mo
1032.38 45.9907 li
@
grestore
gsave
1035.72 46.4906 mo
1042.72 46.4906 li
1042.72 39.4907 li
1035.72 39.4907 li
1035.72 46.4906 li
clp
1036.22 45.9907 mo
1042.22 39.9907 li
1036.22 39.9907 mo
1042.22 45.9907 li
f
1 lw
0 lc
1036.22 45.9907 mo
1042.22 39.9907 li
1036.22 39.9907 mo
1042.22 45.9907 li
@
grestore
gsave
1045.56 46.4906 mo
1052.56 46.4906 li
1052.56 39.4907 li
1045.56 39.4907 li
1045.56 46.4906 li
clp
1046.06 45.9907 mo
1052.06 39.9907 li
1046.06 39.9907 mo
1052.06 45.9907 li
f
1 lw
0 lc
1046.06 45.9907 mo
1052.06 39.9907 li
1046.06 39.9907 mo
1052.06 45.9907 li
@
grestore
gsave
1055.4 46.4906 mo
1062.4 46.4906 li
1062.4 39.4907 li
1055.4 39.4907 li
1055.4 46.4906 li
clp
1055.9 45.9907 mo
1061.9 39.9907 li
1055.9 39.9907 mo
1061.9 45.9907 li
f
1 lw
0 lc
1055.9 45.9907 mo
1061.9 39.9907 li
1055.9 39.9907 mo
1061.9 45.9907 li
@
grestore
gsave
1065.24 46.4906 mo
1072.24 46.4906 li
1072.24 39.4907 li
1065.24 39.4907 li
1065.24 46.4906 li
clp
1065.74 45.9907 mo
1071.74 39.9907 li
1065.74 39.9907 mo
1071.74 45.9907 li
f
1 lw
0 lc
1065.74 45.9907 mo
1071.74 39.9907 li
1065.74 39.9907 mo
1071.74 45.9907 li
@
grestore
gsave
1075.07 46.4906 mo
1082.07 46.4906 li
1082.07 39.4907 li
1075.07 39.4907 li
1075.07 46.4906 li
clp
1075.57 45.9907 mo
1081.57 39.9907 li
1075.57 39.9907 mo
1081.57 45.9907 li
f
1 lw
0 lc
1075.57 45.9907 mo
1081.57 39.9907 li
1075.57 39.9907 mo
1081.57 45.9907 li
@
grestore
gsave
1084.91 46.4906 mo
1091.91 46.4906 li
1091.91 39.4907 li
1084.91 39.4907 li
1084.91 46.4906 li
clp
1085.41 45.9907 mo
1091.41 39.9907 li
1085.41 39.9907 mo
1091.41 45.9907 li
f
1 lw
0 lc
1085.41 45.9907 mo
1091.41 39.9907 li
1085.41 39.9907 mo
1091.41 45.9907 li
@
grestore
114.449 519.18 mo
124.287 404.252 li
134.125 356.319 li
143.963 315.604 li
153.801 273.051 li
163.639 262.702 li
173.477 234.311 li
183.315 193.051 li
193.153 166.089 li
202.992 142.055 li
212.83 126.327 li
222.668 113.255 li
232.506 105.697 li
242.344 100.387 li
252.182 96.0293 li
262.02 92.6931 li
271.858 89.4931 li
281.696 85.7484 li
291.534 79.7569 li
301.372 74.5143 li
311.21 72.608 li
321.048 69.476 li
330.886 66.3441 li
340.724 61.8505 li
350.562 58.5143 li
360.4 56.1994 li
370.238 53.3398 li
380.076 51.91 li
389.914 50.4802 li
399.752 49.7313 li
409.59 49.5952 li
419.428 49.527 li
429.266 48.5739 li
439.104 47.7568 li
448.942 46.9398 li
458.78 46.5994 li
468.618 45.51 li
478.456 45.5781 li
488.294 45.4419 li
498.132 45.3057 li
507.97 45.0334 li
517.808 44.4887 li
527.646 44.693 li
537.484 44.4207 li
547.322 44.2845 li
557.16 45.2377 li
566.998 45.51 li
576.836 43.2632 li
586.674 42.7185 li
596.512 42.4462 li
606.35 41.6292 li
616.188 41.0845 li
626.026 40.4717 li
635.864 40.3355 li
645.702 40.1313 li
655.54 39.9951 li
665.378 39.927 li
675.216 39.7228 li
685.054 39.3823 li
694.892 39.11 li
704.73 38.9738 li
714.568 39.2462 li
724.406 39.5185 li
734.244 38.4291 li
744.082 37.8845 li
753.92 37.544 li
763.758 36.9313 li
773.596 35.161 li
783.434 35.2972 li
793.273 35.161 li
803.111 35.093 li
812.949 34.9568 li
822.787 34.8887 li
832.625 34.8887 li
842.463 34.8206 li
852.301 34.6163 li
862.139 34.6844 li
871.977 34.6844 li
881.815 34.5483 li
891.653 34.4802 li
901.491 34.2759 li
911.329 34.1398 li
921.167 34.1398 li
931.005 34.0036 li
940.843 34.0036 li
950.681 33.9355 li
960.519 33.8674 li
970.357 33.8674 li
980.195 33.7993 li
990.033 33.7313 li
999.871 33.6631 li
1009.71 33.6631 li
1019.55 33.6631 li
1029.38 33.6631 li
1039.22 33.527 li
1049.06 33.527 li
1058.9 33.527 li
1068.74 33.4589 li
1078.57 33.3908 li
1088.41 33.3908 li
1 /0 /CSD get_res sepcs
1 sep
@
114.449 508.592 mo
124.287 382.669 li
134.125 338.345 li
143.963 291.979 li
153.801 256.54 li
163.639 246.123 li
173.477 221.204 li
183.315 178.617 li
193.153 150.123 li
202.992 124.489 li
212.83 109.68 li
222.668 96.9144 li
232.506 89.3569 li
242.344 84.5569 li
252.182 81.5952 li
262.02 79.0421 li
271.858 75.9782 li
281.696 73.1186 li
291.534 68.7271 li
301.372 63.6207 li
311.21 62.4973 li
321.048 58.8207 li
330.886 55.5526 li
340.724 52.693 li
350.562 50.8547 li
360.4 48.1994 li
370.238 46.7696 li
380.076 46.0547 li
389.914 45.7483 li
399.752 45.4419 li
409.59 45.4419 li
419.428 45.1356 li
429.266 45.2377 li
439.104 44.6249 li
448.942 44.5228 li
458.78 44.3185 li
468.618 44.4207 li
478.456 43.7057 li
488.294 44.2164 li
498.132 44.2164 li
507.97 44.2164 li
517.808 44.3185 li
527.646 44.1143 li
537.484 43.1951 li
547.322 42.5823 li
557.16 42.6844 li
566.998 42.6844 li
576.836 41.0504 li
586.674 40.4376 li
596.512 40.1313 li
606.35 39.927 li
616.188 39.6206 li
626.026 39.5185 li
635.864 38.8036 li
645.702 38.1909 li
655.54 37.9866 li
665.378 38.4972 li
675.216 37.9866 li
685.054 37.7823 li
694.892 38.0887 li
704.73 38.1909 li
714.568 38.0887 li
724.406 39.0079 li
734.244 38.293 li
744.082 37.9866 li
753.92 38.293 li
763.758 37.1696 li
773.596 41.7653 li
783.434 41.4589 li
793.273 41.4589 li
803.111 41.4589 li
812.949 41.4589 li
822.787 41.4589 li
832.625 41.6632 li
842.463 41.7653 li
852.301 41.8674 li
862.139 41.8674 li
871.977 41.8674 li
881.815 41.7653 li
891.653 41.8674 li
901.491 42.0717 li
911.329 41.8674 li
921.167 41.7653 li
931.005 41.7653 li
940.843 41.7653 li
950.681 41.4589 li
960.519 41.561 li
970.357 41.6632 li
980.195 41.6632 li
990.033 41.6632 li
999.871 41.6632 li
1009.71 41.561 li
1019.55 41.4589 li
1029.38 41.4589 li
1039.22 41.4589 li
1049.06 41.4589 li
1058.9 41.3568 li
1068.74 41.3568 li
1078.57 41.3568 li
1088.41 41.3568 li
@
gsave
110.949 512.092 mo
117.949 512.092 li
117.949 505.092 li
110.949 505.092 li
110.949 512.092 li
clp
111.449 511.592 mo
117.449 505.592 li
111.449 505.592 mo
117.449 511.592 li
f
1 lw
0 lc
111.449 511.592 mo
117.449 505.592 li
111.449 505.592 mo
117.449 511.592 li
@
grestore
gsave
120.787 386.168 mo
127.787 386.168 li
127.787 379.169 li
120.787 379.169 li
120.787 386.168 li
clp
121.287 385.669 mo
127.287 379.669 li
121.287 379.669 mo
127.287 385.669 li
f
1 lw
0 lc
121.287 385.669 mo
127.287 379.669 li
121.287 379.669 mo
127.287 385.669 li
@
grestore
gsave
130.625 341.845 mo
137.625 341.845 li
137.625 334.845 li
130.625 334.845 li
130.625 341.845 li
clp
131.125 341.345 mo
137.125 335.345 li
131.125 335.345 mo
137.125 341.345 li
f
1 lw
0 lc
131.125 341.345 mo
137.125 335.345 li
131.125 335.345 mo
137.125 341.345 li
@
grestore
gsave
140.463 295.479 mo
147.463 295.479 li
147.463 288.479 li
140.463 288.479 li
140.463 295.479 li
clp
140.963 294.979 mo
146.963 288.979 li
140.963 288.979 mo
146.963 294.979 li
f
1 lw
0 lc
140.963 294.979 mo
146.963 288.979 li
140.963 288.979 mo
146.963 294.979 li
@
grestore
gsave
150.302 260.04 mo
157.301 260.04 li
157.301 253.04 li
150.302 253.04 li
150.302 260.04 li
clp
150.801 259.54 mo
156.801 253.54 li
150.801 253.54 mo
156.801 259.54 li
f
1 lw
0 lc
150.801 259.54 mo
156.801 253.54 li
150.801 253.54 mo
156.801 259.54 li
@
grestore
gsave
160.14 249.623 mo
167.14 249.623 li
167.14 242.623 li
160.14 242.623 li
160.14 249.623 li
clp
160.639 249.123 mo
166.639 243.123 li
160.639 243.123 mo
166.639 249.123 li
f
1 lw
0 lc
160.639 249.123 mo
166.639 243.123 li
160.639 243.123 mo
166.639 249.123 li
@
grestore
gsave
169.977 224.704 mo
176.978 224.704 li
176.978 217.704 li
169.977 217.704 li
169.977 224.704 li
clp
170.477 224.204 mo
176.477 218.204 li
170.477 218.204 mo
176.477 224.204 li
f
1 lw
0 lc
170.477 224.204 mo
176.477 218.204 li
170.477 218.204 mo
176.477 224.204 li
@
grestore
gsave
179.815 182.117 mo
186.815 182.117 li
186.815 175.117 li
179.815 175.117 li
179.815 182.117 li
clp
180.315 181.617 mo
186.315 175.617 li
180.315 175.617 mo
186.315 181.617 li
f
1 lw
0 lc
180.315 181.617 mo
186.315 175.617 li
180.315 175.617 mo
186.315 181.617 li
@
grestore
gsave
189.653 153.623 mo
196.653 153.623 li
196.653 146.623 li
189.653 146.623 li
189.653 153.623 li
clp
190.153 153.123 mo
196.153 147.123 li
190.153 147.123 mo
196.153 153.123 li
f
1 lw
0 lc
190.153 153.123 mo
196.153 147.123 li
190.153 147.123 mo
196.153 153.123 li
@
grestore
gsave
199.491 127.989 mo
206.491 127.989 li
206.491 120.989 li
199.491 120.989 li
199.491 127.989 li
clp
199.991 127.489 mo
205.991 121.489 li
199.991 121.489 mo
205.991 127.489 li
f
1 lw
0 lc
199.991 127.489 mo
205.991 121.489 li
199.991 121.489 mo
205.991 127.489 li
@
grestore
gsave
209.33 113.18 mo
216.329 113.18 li
216.329 106.18 li
209.33 106.18 li
209.33 113.18 li
clp
209.829 112.68 mo
215.829 106.68 li
209.829 106.68 mo
215.829 112.68 li
f
1 lw
0 lc
209.829 112.68 mo
215.829 106.68 li
209.829 106.68 mo
215.829 112.68 li
@
grestore
gsave
219.168 100.414 mo
226.168 100.414 li
226.168 93.4145 li
219.168 93.4145 li
219.168 100.414 li
clp
219.668 99.9144 mo
225.668 93.9144 li
219.668 93.9144 mo
225.668 99.9144 li
f
1 lw
0 lc
219.668 99.9144 mo
225.668 93.9144 li
219.668 93.9144 mo
225.668 99.9144 li
@
grestore
gsave
229.006 92.857 mo
236.006 92.857 li
236.006 85.857 li
229.006 85.857 li
229.006 92.857 li
clp
229.506 92.3569 mo
235.506 86.3569 li
229.506 86.3569 mo
235.506 92.3569 li
f
1 lw
0 lc
229.506 92.3569 mo
235.506 86.3569 li
229.506 86.3569 mo
235.506 92.3569 li
@
grestore
gsave
238.843 88.057 mo
245.844 88.057 li
245.844 81.0571 li
238.843 81.0571 li
238.843 88.057 li
clp
239.344 87.5569 mo
245.344 81.5569 li
239.344 81.5569 mo
245.344 87.5569 li
f
1 lw
0 lc
239.344 87.5569 mo
245.344 81.5569 li
239.344 81.5569 mo
245.344 87.5569 li
@
grestore
gsave
248.681 85.0954 mo
255.681 85.0954 li
255.681 78.0951 li
248.681 78.0951 li
248.681 85.0954 li
clp
249.182 84.5952 mo
255.182 78.5952 li
249.182 78.5952 mo
255.182 84.5952 li
f
1 lw
0 lc
249.182 84.5952 mo
255.182 78.5952 li
249.182 78.5952 mo
255.182 84.5952 li
@
grestore
gsave
258.52 82.5421 mo
265.519 82.5421 li
265.519 75.5421 li
258.52 75.5421 li
258.52 82.5421 li
clp
259.02 82.042 mo
265.02 76.042 li
259.02 76.042 mo
265.02 82.042 li
f
1 lw
0 lc
259.02 82.042 mo
265.02 76.042 li
259.02 76.042 mo
265.02 82.042 li
@
grestore
gsave
268.358 79.4783 mo
275.358 79.4783 li
275.358 72.478 li
268.358 72.478 li
268.358 79.4783 li
clp
268.858 78.9781 mo
274.858 72.9781 li
268.858 72.9781 mo
274.858 78.9781 li
f
1 lw
0 lc
268.858 78.9781 mo
274.858 72.9781 li
268.858 72.9781 mo
274.858 78.9781 li
@
grestore
gsave
278.196 76.6187 mo
285.196 76.6187 li
285.196 69.6184 li
278.196 69.6184 li
278.196 76.6187 li
clp
278.696 76.1186 mo
284.696 70.1186 li
278.696 70.1186 mo
284.696 76.1186 li
f
1 lw
0 lc
278.696 76.1186 mo
284.696 70.1186 li
278.696 70.1186 mo
284.696 76.1186 li
@
grestore
gsave
288.034 72.2271 mo
295.034 72.2271 li
295.034 65.2272 li
288.034 65.2272 li
288.034 72.2271 li
clp
288.534 71.7271 mo
294.534 65.7271 li
288.534 65.7271 mo
294.534 71.7271 li
f
1 lw
0 lc
288.534 71.7271 mo
294.534 65.7271 li
288.534 65.7271 mo
294.534 71.7271 li
@
grestore
gsave
297.872 67.1209 mo
304.872 67.1209 li
304.872 60.1206 li
297.872 60.1206 li
297.872 67.1209 li
clp
298.372 66.6207 mo
304.372 60.6207 li
298.372 60.6207 mo
304.372 66.6207 li
f
1 lw
0 lc
298.372 66.6207 mo
304.372 60.6207 li
298.372 60.6207 mo
304.372 66.6207 li
@
grestore
gsave
307.709 65.9972 mo
314.71 65.9972 li
314.71 58.9972 li
307.709 58.9972 li
307.709 65.9972 li
clp
308.21 65.4973 mo
314.21 59.4973 li
308.21 59.4973 mo
314.21 65.4973 li
f
1 lw
0 lc
308.21 65.4973 mo
314.21 59.4973 li
308.21 59.4973 mo
314.21 65.4973 li
@
grestore
gsave
317.548 62.3205 mo
324.547 62.3205 li
324.547 55.3206 li
317.548 55.3206 li
317.548 62.3205 li
clp
318.048 61.8207 mo
324.048 55.8207 li
318.048 55.8207 mo
324.048 61.8207 li
f
1 lw
0 lc
318.048 61.8207 mo
324.048 55.8207 li
318.048 55.8207 mo
324.048 61.8207 li
@
grestore
gsave
327.386 59.0526 mo
334.386 59.0526 li
334.386 52.0526 li
327.386 52.0526 li
327.386 59.0526 li
clp
327.886 58.5526 mo
333.886 52.5526 li
327.886 52.5526 mo
333.886 58.5526 li
f
1 lw
0 lc
327.886 58.5526 mo
333.886 52.5526 li
327.886 52.5526 mo
333.886 58.5526 li
@
grestore
gsave
337.224 56.193 mo
344.224 56.193 li
344.224 49.1931 li
337.224 49.1931 li
337.224 56.193 li
clp
337.724 55.6931 mo
343.724 49.6931 li
337.724 49.6931 mo
343.724 55.6931 li
f
1 lw
0 lc
337.724 55.6931 mo
343.724 49.6931 li
337.724 49.6931 mo
343.724 55.6931 li
@
grestore
gsave
347.062 54.3547 mo
354.062 54.3547 li
354.062 47.3548 li
347.062 47.3548 li
347.062 54.3547 li
clp
347.562 53.8547 mo
353.562 47.8547 li
347.562 47.8547 mo
353.562 53.8547 li
f
1 lw
0 lc
347.562 53.8547 mo
353.562 47.8547 li
347.562 47.8547 mo
353.562 53.8547 li
@
grestore
gsave
356.9 51.6993 mo
363.9 51.6993 li
363.9 44.6994 li
356.9 44.6994 li
356.9 51.6993 li
clp
357.4 51.1994 mo
363.4 45.1994 li
357.4 45.1994 mo
363.4 51.1994 li
f
1 lw
0 lc
357.4 51.1994 mo
363.4 45.1994 li
357.4 45.1994 mo
363.4 51.1994 li
@
grestore
gsave
366.738 50.2697 mo
373.738 50.2697 li
373.738 43.2697 li
366.738 43.2697 li
366.738 50.2697 li
clp
367.238 49.7696 mo
373.238 43.7696 li
367.238 43.7696 mo
373.238 49.7696 li
f
1 lw
0 lc
367.238 49.7696 mo
373.238 43.7696 li
367.238 43.7696 mo
373.238 49.7696 li
@
grestore
gsave
376.576 49.5547 mo
383.576 49.5547 li
383.576 42.5548 li
376.576 42.5548 li
376.576 49.5547 li
clp
377.076 49.0547 mo
383.076 43.0547 li
377.076 43.0547 mo
383.076 49.0547 li
f
1 lw
0 lc
377.076 49.0547 mo
383.076 43.0547 li
377.076 43.0547 mo
383.076 49.0547 li
@
grestore
gsave
386.414 49.2484 mo
393.414 49.2484 li
393.414 42.2482 li
386.414 42.2482 li
386.414 49.2484 li
clp
386.914 48.7483 mo
392.914 42.7483 li
386.914 42.7483 mo
392.914 48.7483 li
f
1 lw
0 lc
386.914 48.7483 mo
392.914 42.7483 li
386.914 42.7483 mo
392.914 48.7483 li
@
grestore
gsave
396.252 48.9418 mo
403.252 48.9418 li
403.252 41.9419 li
396.252 41.9419 li
396.252 48.9418 li
clp
396.752 48.4419 mo
402.752 42.4419 li
396.752 42.4419 mo
402.752 48.4419 li
f
1 lw
0 lc
396.752 48.4419 mo
402.752 42.4419 li
396.752 42.4419 mo
402.752 48.4419 li
@
grestore
gsave
406.09 48.9418 mo
413.09 48.9418 li
413.09 41.9419 li
406.09 41.9419 li
406.09 48.9418 li
clp
406.59 48.4419 mo
412.59 42.4419 li
406.59 42.4419 mo
412.59 48.4419 li
f
1 lw
0 lc
406.59 48.4419 mo
412.59 42.4419 li
406.59 42.4419 mo
412.59 48.4419 li
@
grestore
gsave
415.928 48.6356 mo
422.928 48.6356 li
422.928 41.6356 li
415.928 41.6356 li
415.928 48.6356 li
clp
416.428 48.1355 mo
422.428 42.1355 li
416.428 42.1355 mo
422.428 48.1355 li
f
1 lw
0 lc
416.428 48.1355 mo
422.428 42.1355 li
416.428 42.1355 mo
422.428 48.1355 li
@
grestore
gsave
425.766 48.7376 mo
432.766 48.7376 li
432.766 41.7377 li
425.766 41.7377 li
425.766 48.7376 li
clp
426.266 48.2376 mo
432.266 42.2376 li
426.266 42.2376 mo
432.266 48.2376 li
f
1 lw
0 lc
426.266 48.2376 mo
432.266 42.2376 li
426.266 42.2376 mo
432.266 48.2376 li
@
grestore
gsave
435.604 48.1248 mo
442.604 48.1248 li
442.604 41.1248 li
435.604 41.1248 li
435.604 48.1248 li
clp
436.104 47.6248 mo
442.104 41.6248 li
436.104 41.6248 mo
442.104 47.6248 li
f
1 lw
0 lc
436.104 47.6248 mo
442.104 41.6248 li
436.104 41.6248 mo
442.104 47.6248 li
@
grestore
gsave
445.442 48.0227 mo
452.442 48.0227 li
452.442 41.0227 li
445.442 41.0227 li
445.442 48.0227 li
clp
445.942 47.5227 mo
451.942 41.5227 li
445.942 41.5227 mo
451.942 47.5227 li
f
1 lw
0 lc
445.942 47.5227 mo
451.942 41.5227 li
445.942 41.5227 mo
451.942 47.5227 li
@
grestore
gsave
455.28 47.8185 mo
462.28 47.8185 li
462.28 40.8185 li
455.28 40.8185 li
455.28 47.8185 li
clp
455.78 47.3184 mo
461.78 41.3184 li
455.78 41.3184 mo
461.78 47.3184 li
f
1 lw
0 lc
455.78 47.3184 mo
461.78 41.3184 li
455.78 41.3184 mo
461.78 47.3184 li
@
grestore
gsave
465.118 47.9206 mo
472.118 47.9206 li
472.118 40.9206 li
465.118 40.9206 li
465.118 47.9206 li
clp
465.618 47.4205 mo
471.618 41.4205 li
465.618 41.4205 mo
471.618 47.4205 li
f
1 lw
0 lc
465.618 47.4205 mo
471.618 41.4205 li
465.618 41.4205 mo
471.618 47.4205 li
@
grestore
gsave
474.956 47.2056 mo
481.956 47.2056 li
481.956 40.2057 li
474.956 40.2057 li
474.956 47.2056 li
clp
475.456 46.7056 mo
481.456 40.7056 li
475.456 40.7056 mo
481.456 46.7056 li
f
1 lw
0 lc
475.456 46.7056 mo
481.456 40.7056 li
475.456 40.7056 mo
481.456 46.7056 li
@
grestore
gsave
484.794 47.7164 mo
491.794 47.7164 li
491.794 40.7161 li
484.794 40.7161 li
484.794 47.7164 li
clp
485.294 47.2162 mo
491.294 41.2162 li
485.294 41.2162 mo
491.294 47.2162 li
f
1 lw
0 lc
485.294 47.2162 mo
491.294 41.2162 li
485.294 41.2162 mo
491.294 47.2162 li
@
grestore
gsave
494.632 47.7164 mo
501.632 47.7164 li
501.632 40.7161 li
494.632 40.7161 li
494.632 47.7164 li
clp
495.132 47.2162 mo
501.132 41.2162 li
495.132 41.2162 mo
501.132 47.2162 li
f
1 lw
0 lc
495.132 47.2162 mo
501.132 41.2162 li
495.132 41.2162 mo
501.132 47.2162 li
@
grestore
gsave
504.47 47.7164 mo
511.47 47.7164 li
511.47 40.7161 li
504.47 40.7161 li
504.47 47.7164 li
clp
504.97 47.2162 mo
510.97 41.2162 li
504.97 41.2162 mo
510.97 47.2162 li
f
1 lw
0 lc
504.97 47.2162 mo
510.97 41.2162 li
504.97 41.2162 mo
510.97 47.2162 li
@
grestore
gsave
514.308 47.8185 mo
521.308 47.8185 li
521.308 40.8182 li
514.308 40.8182 li
514.308 47.8185 li
clp
514.808 47.3184 mo
520.808 41.3184 li
514.808 41.3184 mo
520.808 47.3184 li
f
1 lw
0 lc
514.808 47.3184 mo
520.808 41.3184 li
514.808 41.3184 mo
520.808 47.3184 li
@
grestore
gsave
524.146 47.614 mo
531.146 47.614 li
531.146 40.614 li
524.146 40.614 li
524.146 47.614 li
clp
524.646 47.1141 mo
530.646 41.1141 li
524.646 41.1141 mo
530.646 47.1141 li
f
1 lw
0 lc
524.646 47.1141 mo
530.646 41.1141 li
524.646 41.1141 mo
530.646 47.1141 li
@
grestore
gsave
533.984 46.6948 mo
540.984 46.6948 li
540.984 39.6949 li
533.984 39.6949 li
533.984 46.6948 li
clp
534.484 46.1949 mo
540.484 40.1949 li
534.484 40.1949 mo
540.484 46.1949 li
f
1 lw
0 lc
534.484 46.1949 mo
540.484 40.1949 li
534.484 40.1949 mo
540.484 46.1949 li
@
grestore
gsave
543.822 46.0823 mo
550.822 46.0823 li
550.822 39.0823 li
543.822 39.0823 li
543.822 46.0823 li
clp
544.322 45.5822 mo
550.322 39.5822 li
544.322 39.5822 mo
550.322 45.5822 li
f
1 lw
0 lc
544.322 45.5822 mo
550.322 39.5822 li
544.322 39.5822 mo
550.322 45.5822 li
@
grestore
gsave
553.66 46.1843 mo
560.66 46.1843 li
560.66 39.1844 li
553.66 39.1844 li
553.66 46.1843 li
clp
554.16 45.6843 mo
560.16 39.6843 li
554.16 39.6843 mo
560.16 45.6843 li
f
1 lw
0 lc
554.16 45.6843 mo
560.16 39.6843 li
554.16 39.6843 mo
560.16 45.6843 li
@
grestore
gsave
563.498 46.1843 mo
570.498 46.1843 li
570.498 39.1844 li
563.498 39.1844 li
563.498 46.1843 li
clp
563.998 45.6843 mo
569.998 39.6843 li
563.998 39.6843 mo
569.998 45.6843 li
f
1 lw
0 lc
563.998 45.6843 mo
569.998 39.6843 li
563.998 39.6843 mo
569.998 45.6843 li
@
grestore
gsave
573.336 44.5502 mo
580.336 44.5502 li
580.336 37.5503 li
573.336 37.5503 li
573.336 44.5502 li
clp
573.836 44.0502 mo
579.836 38.0502 li
573.836 38.0502 mo
579.836 44.0502 li
f
1 lw
0 lc
573.836 44.0502 mo
579.836 38.0502 li
573.836 38.0502 mo
579.836 44.0502 li
@
grestore
gsave
583.174 43.9373 mo
590.174 43.9373 li
590.174 36.9374 li
583.174 36.9374 li
583.174 43.9373 li
clp
583.674 43.4374 mo
589.674 37.4374 li
583.674 37.4374 mo
589.674 43.4374 li
f
1 lw
0 lc
583.674 43.4374 mo
589.674 37.4374 li
583.674 37.4374 mo
589.674 43.4374 li
@
grestore
gsave
593.012 43.631 mo
600.012 43.631 li
600.012 36.6311 li
593.012 36.6311 li
593.012 43.631 li
clp
593.512 43.131 mo
599.512 37.131 li
593.512 37.131 mo
599.512 43.131 li
f
1 lw
0 lc
593.512 43.131 mo
599.512 37.131 li
593.512 37.131 mo
599.512 43.131 li
@
grestore
gsave
602.85 43.4269 mo
609.85 43.4269 li
609.85 36.4269 li
602.85 36.4269 li
602.85 43.4269 li
clp
603.35 42.9268 mo
609.35 36.9268 li
603.35 36.9268 mo
609.35 42.9268 li
f
1 lw
0 lc
603.35 42.9268 mo
609.35 36.9268 li
603.35 36.9268 mo
609.35 42.9268 li
@
grestore
gsave
612.688 43.1202 mo
619.688 43.1202 li
619.688 36.1203 li
612.688 36.1203 li
612.688 43.1202 li
clp
613.188 42.6204 mo
619.188 36.6204 li
613.188 36.6204 mo
619.188 42.6204 li
f
1 lw
0 lc
613.188 42.6204 mo
619.188 36.6204 li
613.188 36.6204 mo
619.188 42.6204 li
@
grestore
gsave
622.526 43.0182 mo
629.526 43.0182 li
629.526 36.0182 li
622.526 36.0182 li
622.526 43.0182 li
clp
623.026 42.5182 mo
629.026 36.5182 li
623.026 36.5182 mo
629.026 42.5182 li
f
1 lw
0 lc
623.026 42.5182 mo
629.026 36.5182 li
623.026 36.5182 mo
629.026 42.5182 li
@
grestore
gsave
632.364 42.3032 mo
639.364 42.3032 li
639.364 35.3032 li
632.364 35.3032 li
632.364 42.3032 li
clp
632.864 41.8033 mo
638.864 35.8033 li
632.864 35.8033 mo
638.864 41.8033 li
f
1 lw
0 lc
632.864 41.8033 mo
638.864 35.8033 li
632.864 35.8033 mo
638.864 41.8033 li
@
grestore
gsave
642.202 41.6906 mo
649.202 41.6906 li
649.202 34.6907 li
642.202 34.6907 li
642.202 41.6906 li
clp
642.702 41.1906 mo
648.702 35.1906 li
642.702 35.1906 mo
648.702 41.1906 li
f
1 lw
0 lc
642.702 41.1906 mo
648.702 35.1906 li
642.702 35.1906 mo
648.702 41.1906 li
@
grestore
gsave
652.04 41.4861 mo
659.04 41.4861 li
659.04 34.4862 li
652.04 34.4862 li
652.04 41.4861 li
clp
652.54 40.9863 mo
658.54 34.9863 li
652.54 34.9863 mo
658.54 40.9863 li
f
1 lw
0 lc
652.54 40.9863 mo
658.54 34.9863 li
652.54 34.9863 mo
658.54 40.9863 li
@
grestore
gsave
661.878 41.9969 mo
668.878 41.9969 li
668.878 34.997 li
661.878 34.997 li
661.878 41.9969 li
clp
662.378 41.4969 mo
668.378 35.4969 li
662.378 35.4969 mo
668.378 41.4969 li
f
1 lw
0 lc
662.378 41.4969 mo
668.378 35.4969 li
662.378 35.4969 mo
668.378 41.4969 li
@
grestore
gsave
671.716 41.4861 mo
678.716 41.4861 li
678.716 34.4862 li
671.716 34.4862 li
671.716 41.4861 li
clp
672.216 40.9863 mo
678.216 34.9863 li
672.216 34.9863 mo
678.216 40.9863 li
f
1 lw
0 lc
672.216 40.9863 mo
678.216 34.9863 li
672.216 34.9863 mo
678.216 40.9863 li
@
grestore
gsave
681.554 41.2819 mo
688.554 41.2819 li
688.554 34.282 li
681.554 34.282 li
681.554 41.2819 li
clp
682.054 40.782 mo
688.054 34.782 li
682.054 34.782 mo
688.054 40.782 li
f
1 lw
0 lc
682.054 40.782 mo
688.054 34.782 li
682.054 34.782 mo
688.054 40.782 li
@
grestore
gsave
691.392 41.5885 mo
698.392 41.5885 li
698.392 34.5883 li
691.392 34.5883 li
691.392 41.5885 li
clp
691.892 41.0884 mo
697.892 35.0884 li
691.892 35.0884 mo
697.892 41.0884 li
f
1 lw
0 lc
691.892 41.0884 mo
697.892 35.0884 li
691.892 35.0884 mo
697.892 41.0884 li
@
grestore
gsave
701.23 41.6906 mo
708.23 41.6906 li
708.23 34.6903 li
701.23 34.6903 li
701.23 41.6906 li
clp
701.73 41.1905 mo
707.73 35.1905 li
701.73 35.1905 mo
707.73 41.1905 li
f
1 lw
0 lc
701.73 41.1905 mo
707.73 35.1905 li
701.73 35.1905 mo
707.73 41.1905 li
@
grestore
gsave
711.068 41.5885 mo
718.068 41.5885 li
718.068 34.5883 li
711.068 34.5883 li
711.068 41.5885 li
clp
711.568 41.0884 mo
717.568 35.0884 li
711.568 35.0884 mo
717.568 41.0884 li
f
1 lw
0 lc
711.568 41.0884 mo
717.568 35.0884 li
711.568 35.0884 mo
717.568 41.0884 li
@
grestore
gsave
720.906 42.5074 mo
727.906 42.5074 li
727.906 35.5074 li
720.906 35.5074 li
720.906 42.5074 li
clp
721.406 42.0075 mo
727.406 36.0075 li
721.406 36.0075 mo
727.406 42.0075 li
f
1 lw
0 lc
721.406 42.0075 mo
727.406 36.0075 li
721.406 36.0075 mo
727.406 42.0075 li
@
grestore
gsave
730.744 41.7927 mo
737.744 41.7927 li
737.744 34.7924 li
730.744 34.7924 li
730.744 41.7927 li
clp
731.244 41.2926 mo
737.244 35.2926 li
731.244 35.2926 mo
737.244 41.2926 li
f
1 lw
0 lc
731.244 41.2926 mo
737.244 35.2926 li
731.244 35.2926 mo
737.244 41.2926 li
@
grestore
gsave
740.582 41.4861 mo
747.582 41.4861 li
747.582 34.4862 li
740.582 34.4862 li
740.582 41.4861 li
clp
741.082 40.9862 mo
747.082 34.9862 li
741.082 34.9862 mo
747.082 40.9862 li
f
1 lw
0 lc
741.082 40.9862 mo
747.082 34.9862 li
741.082 34.9862 mo
747.082 40.9862 li
@
grestore
gsave
750.42 41.7927 mo
757.42 41.7927 li
757.42 34.7924 li
750.42 34.7924 li
750.42 41.7927 li
clp
750.92 41.2926 mo
756.92 35.2926 li
750.92 35.2926 mo
756.92 41.2926 li
f
1 lw
0 lc
750.92 41.2926 mo
756.92 35.2926 li
750.92 35.2926 mo
756.92 41.2926 li
@
grestore
gsave
760.258 40.669 mo
767.258 40.669 li
767.258 33.6691 li
760.258 33.6691 li
760.258 40.669 li
clp
760.758 40.1692 mo
766.758 34.1692 li
760.758 34.1692 mo
766.758 40.1692 li
f
1 lw
0 lc
760.758 40.1692 mo
766.758 34.1692 li
760.758 34.1692 mo
766.758 40.1692 li
@
grestore
gsave
770.096 45.2648 mo
777.096 45.2648 li
777.096 38.2649 li
770.096 38.2649 li
770.096 45.2648 li
clp
770.596 44.765 mo
776.596 38.765 li
770.596 38.765 mo
776.596 44.765 li
f
1 lw
0 lc
770.596 44.765 mo
776.596 38.765 li
770.596 38.765 mo
776.596 44.765 li
@
grestore
gsave
779.934 44.9586 mo
786.934 44.9586 li
786.934 37.9586 li
779.934 37.9586 li
779.934 44.9586 li
clp
780.434 44.4586 mo
786.434 38.4586 li
780.434 38.4586 mo
786.434 44.4586 li
f
1 lw
0 lc
780.434 44.4586 mo
786.434 38.4586 li
780.434 38.4586 mo
786.434 44.4586 li
@
grestore
gsave
789.772 44.9586 mo
796.772 44.9586 li
796.772 37.9586 li
789.772 37.9586 li
789.772 44.9586 li
clp
790.272 44.4586 mo
796.272 38.4586 li
790.272 38.4586 mo
796.272 44.4586 li
f
1 lw
0 lc
790.272 44.4586 mo
796.272 38.4586 li
790.272 38.4586 mo
796.272 44.4586 li
@
grestore
gsave
799.61 44.9586 mo
806.61 44.9586 li
806.61 37.9586 li
799.61 37.9586 li
799.61 44.9586 li
clp
800.11 44.4586 mo
806.11 38.4586 li
800.11 38.4586 mo
806.11 44.4586 li
f
1 lw
0 lc
800.11 44.4586 mo
806.11 38.4586 li
800.11 38.4586 mo
806.11 44.4586 li
@
grestore
gsave
809.448 44.9586 mo
816.448 44.9586 li
816.448 37.9586 li
809.448 37.9586 li
809.448 44.9586 li
clp
809.948 44.4586 mo
815.948 38.4586 li
809.948 38.4586 mo
815.948 44.4586 li
f
1 lw
0 lc
809.948 44.4586 mo
815.948 38.4586 li
809.948 38.4586 mo
815.948 44.4586 li
@
grestore
gsave
819.286 44.9586 mo
826.286 44.9586 li
826.286 37.9586 li
819.286 37.9586 li
819.286 44.9586 li
clp
819.786 44.4586 mo
825.786 38.4586 li
819.786 38.4586 mo
825.786 44.4586 li
f
1 lw
0 lc
819.786 44.4586 mo
825.786 38.4586 li
819.786 38.4586 mo
825.786 44.4586 li
@
grestore
gsave
829.124 45.1628 mo
836.124 45.1628 li
836.124 38.1628 li
829.124 38.1628 li
829.124 45.1628 li
clp
829.624 44.6628 mo
835.624 38.6628 li
829.624 38.6628 mo
835.624 44.6628 li
f
1 lw
0 lc
829.624 44.6628 mo
835.624 38.6628 li
829.624 38.6628 mo
835.624 44.6628 li
@
grestore
gsave
838.962 45.2648 mo
845.962 45.2648 li
845.962 38.2649 li
838.962 38.2649 li
838.962 45.2648 li
clp
839.462 44.765 mo
845.462 38.765 li
839.462 38.765 mo
845.462 44.765 li
f
1 lw
0 lc
839.462 44.765 mo
845.462 38.765 li
839.462 38.765 mo
845.462 44.765 li
@
grestore
gsave
848.8 45.3669 mo
855.8 45.3669 li
855.8 38.367 li
848.8 38.367 li
848.8 45.3669 li
clp
849.3 44.8671 mo
855.3 38.8671 li
849.3 38.8671 mo
855.3 44.8671 li
f
1 lw
0 lc
849.3 44.8671 mo
855.3 38.8671 li
849.3 38.8671 mo
855.3 44.8671 li
@
grestore
gsave
858.638 45.3669 mo
865.638 45.3669 li
865.638 38.367 li
858.638 38.367 li
858.638 45.3669 li
clp
859.138 44.8671 mo
865.138 38.8671 li
859.138 38.8671 mo
865.138 44.8671 li
f
1 lw
0 lc
859.138 44.8671 mo
865.138 38.8671 li
859.138 38.8671 mo
865.138 44.8671 li
@
grestore
gsave
868.477 45.3669 mo
875.477 45.3669 li
875.477 38.367 li
868.477 38.367 li
868.477 45.3669 li
clp
868.976 44.8671 mo
874.976 38.8671 li
868.976 38.8671 mo
874.976 44.8671 li
f
1 lw
0 lc
868.976 44.8671 mo
874.976 38.8671 li
868.976 38.8671 mo
874.976 44.8671 li
@
grestore
gsave
878.314 45.2648 mo
885.315 45.2648 li
885.315 38.2649 li
878.314 38.2649 li
878.314 45.2648 li
clp
878.814 44.765 mo
884.814 38.765 li
878.814 38.765 mo
884.814 44.765 li
f
1 lw
0 lc
878.814 44.765 mo
884.814 38.765 li
878.814 38.765 mo
884.814 44.765 li
@
grestore
gsave
888.152 45.3669 mo
895.152 45.3669 li
895.152 38.367 li
888.152 38.367 li
888.152 45.3669 li
clp
888.652 44.8671 mo
894.652 38.8671 li
888.652 38.8671 mo
894.652 44.8671 li
f
1 lw
0 lc
888.652 44.8671 mo
894.652 38.8671 li
888.652 38.8671 mo
894.652 44.8671 li
@
grestore
gsave
897.99 45.5715 mo
904.99 45.5715 li
904.99 38.5715 li
897.99 38.5715 li
897.99 45.5715 li
clp
898.49 45.0714 mo
904.49 39.0714 li
898.49 39.0714 mo
904.49 45.0714 li
f
1 lw
0 lc
898.49 45.0714 mo
904.49 39.0714 li
898.49 39.0714 mo
904.49 45.0714 li
@
grestore
gsave
907.828 45.3669 mo
914.828 45.3669 li
914.828 38.367 li
907.828 38.367 li
907.828 45.3669 li
clp
908.328 44.8671 mo
914.328 38.8671 li
908.328 38.8671 mo
914.328 44.8671 li
f
1 lw
0 lc
908.328 44.8671 mo
914.328 38.8671 li
908.328 38.8671 mo
914.328 44.8671 li
@
grestore
gsave
917.667 45.2648 mo
924.667 45.2648 li
924.667 38.2649 li
917.667 38.2649 li
917.667 45.2648 li
clp
918.167 44.765 mo
924.167 38.765 li
918.167 38.765 mo
924.167 44.765 li
f
1 lw
0 lc
918.167 44.765 mo
924.167 38.765 li
918.167 38.765 mo
924.167 44.765 li
@
grestore
gsave
927.505 45.2648 mo
934.505 45.2648 li
934.505 38.2649 li
927.505 38.2649 li
927.505 45.2648 li
clp
928.005 44.765 mo
934.005 38.765 li
928.005 38.765 mo
934.005 44.765 li
f
1 lw
0 lc
928.005 44.765 mo
934.005 38.765 li
928.005 38.765 mo
934.005 44.765 li
@
grestore
gsave
937.343 45.2648 mo
944.343 45.2648 li
944.343 38.2649 li
937.343 38.2649 li
937.343 45.2648 li
clp
937.843 44.765 mo
943.843 38.765 li
937.843 38.765 mo
943.843 44.765 li
f
1 lw
0 lc
937.843 44.765 mo
943.843 38.765 li
937.843 38.765 mo
943.843 44.765 li
@
grestore
gsave
947.181 44.9586 mo
954.181 44.9586 li
954.181 37.9586 li
947.181 37.9586 li
947.181 44.9586 li
clp
947.681 44.4586 mo
953.681 38.4586 li
947.681 38.4586 mo
953.681 44.4586 li
f
1 lw
0 lc
947.681 44.4586 mo
953.681 38.4586 li
947.681 38.4586 mo
953.681 44.4586 li
@
grestore
gsave
957.018 45.0607 mo
964.019 45.0607 li
964.019 38.0607 li
957.018 38.0607 li
957.018 45.0607 li
clp
957.519 44.5607 mo
963.519 38.5607 li
957.519 38.5607 mo
963.519 44.5607 li
f
1 lw
0 lc
957.519 44.5607 mo
963.519 38.5607 li
957.519 38.5607 mo
963.519 44.5607 li
@
grestore
gsave
966.856 45.1628 mo
973.856 45.1628 li
973.856 38.1628 li
966.856 38.1628 li
966.856 45.1628 li
clp
967.357 44.6628 mo
973.357 38.6628 li
967.357 38.6628 mo
973.357 44.6628 li
f
1 lw
0 lc
967.357 44.6628 mo
973.357 38.6628 li
967.357 38.6628 mo
973.357 44.6628 li
@
grestore
gsave
976.694 45.1628 mo
983.694 45.1628 li
983.694 38.1628 li
976.694 38.1628 li
976.694 45.1628 li
clp
977.195 44.6628 mo
983.195 38.6628 li
977.195 38.6628 mo
983.195 44.6628 li
f
1 lw
0 lc
977.195 44.6628 mo
983.195 38.6628 li
977.195 38.6628 mo
983.195 44.6628 li
@
grestore
gsave
986.533 45.1628 mo
993.532 45.1628 li
993.532 38.1628 li
986.533 38.1628 li
986.533 45.1628 li
clp
987.033 44.6628 mo
993.033 38.6628 li
987.033 38.6628 mo
993.033 44.6628 li
f
1 lw
0 lc
987.033 44.6628 mo
993.033 38.6628 li
987.033 38.6628 mo
993.033 44.6628 li
@
grestore
gsave
996.371 45.1628 mo
1003.37 45.1628 li
1003.37 38.1628 li
996.371 38.1628 li
996.371 45.1628 li
clp
996.871 44.6628 mo
1002.87 38.6628 li
996.871 38.6628 mo
1002.87 44.6628 li
f
1 lw
0 lc
996.871 44.6628 mo
1002.87 38.6628 li
996.871 38.6628 mo
1002.87 44.6628 li
@
grestore
gsave
1006.21 45.0607 mo
1013.21 45.0607 li
1013.21 38.0607 li
1006.21 38.0607 li
1006.21 45.0607 li
clp
1006.71 44.5607 mo
1012.71 38.5607 li
1006.71 38.5607 mo
1012.71 44.5607 li
f
1 lw
0 lc
1006.71 44.5607 mo
1012.71 38.5607 li
1006.71 38.5607 mo
1012.71 44.5607 li
@
grestore
gsave
1016.05 44.9586 mo
1023.05 44.9586 li
1023.05 37.9586 li
1016.05 37.9586 li
1016.05 44.9586 li
clp
1016.55 44.4586 mo
1022.55 38.4586 li
1016.55 38.4586 mo
1022.55 44.4586 li
f
1 lw
0 lc
1016.55 44.4586 mo
1022.55 38.4586 li
1016.55 38.4586 mo
1022.55 44.4586 li
@
grestore
gsave
1025.88 44.9586 mo
1032.88 44.9586 li
1032.88 37.9586 li
1025.88 37.9586 li
1025.88 44.9586 li
clp
1026.38 44.4586 mo
1032.38 38.4586 li
1026.38 38.4586 mo
1032.38 44.4586 li
f
1 lw
0 lc
1026.38 44.4586 mo
1032.38 38.4586 li
1026.38 38.4586 mo
1032.38 44.4586 li
@
grestore
gsave
1035.72 44.9586 mo
1042.72 44.9586 li
1042.72 37.9586 li
1035.72 37.9586 li
1035.72 44.9586 li
clp
1036.22 44.4586 mo
1042.22 38.4586 li
1036.22 38.4586 mo
1042.22 44.4586 li
f
1 lw
0 lc
1036.22 44.4586 mo
1042.22 38.4586 li
1036.22 38.4586 mo
1042.22 44.4586 li
@
grestore
gsave
1045.56 44.9586 mo
1052.56 44.9586 li
1052.56 37.9586 li
1045.56 37.9586 li
1045.56 44.9586 li
clp
1046.06 44.4586 mo
1052.06 38.4586 li
1046.06 38.4586 mo
1052.06 44.4586 li
f
1 lw
0 lc
1046.06 44.4586 mo
1052.06 38.4586 li
1046.06 38.4586 mo
1052.06 44.4586 li
@
grestore
gsave
1055.4 44.8565 mo
1062.4 44.8565 li
1062.4 37.8565 li
1055.4 37.8565 li
1055.4 44.8565 li
clp
1055.9 44.3564 mo
1061.9 38.3564 li
1055.9 38.3564 mo
1061.9 44.3564 li
f
1 lw
0 lc
1055.9 44.3564 mo
1061.9 38.3564 li
1055.9 38.3564 mo
1061.9 44.3564 li
@
grestore
gsave
1065.24 44.8565 mo
1072.24 44.8565 li
1072.24 37.8565 li
1065.24 37.8565 li
1065.24 44.8565 li
clp
1065.74 44.3564 mo
1071.74 38.3564 li
1065.74 38.3564 mo
1071.74 44.3564 li
f
1 lw
0 lc
1065.74 44.3564 mo
1071.74 38.3564 li
1065.74 38.3564 mo
1071.74 44.3564 li
@
grestore
gsave
1075.07 44.8565 mo
1082.07 44.8565 li
1082.07 37.8565 li
1075.07 37.8565 li
1075.07 44.8565 li
clp
1075.57 44.3564 mo
1081.57 38.3564 li
1075.57 38.3564 mo
1081.57 44.3564 li
f
1 lw
0 lc
1075.57 44.3564 mo
1081.57 38.3564 li
1075.57 38.3564 mo
1081.57 44.3564 li
@
grestore
gsave
1084.91 44.8565 mo
1091.91 44.8565 li
1091.91 37.8565 li
1084.91 37.8565 li
1084.91 44.8565 li
clp
1085.41 44.3564 mo
1091.41 38.3564 li
1085.41 38.3564 mo
1091.41 44.3564 li
f
1 lw
0 lc
1085.41 44.3564 mo
1091.41 38.3564 li
1085.41 38.3564 mo
1091.41 44.3564 li
@
grestore
.8 lw
0 lj
65.7512 546.186 mo
65.7512 8.97205 li
@
1137.11 546.186 mo
1137.11 8.97205 li
@
65.7512 546.186 mo
1137.11 546.186 li
@
65.7512 8.97205 mo
1137.11 8.97205 li
@
gsave
1130.11 540.686 mo
852.955 540.686 li
852.365 540.684 852.017 540.542 851.808 540.332 cv
851.599 540.123 851.457 539.776 851.455 539.185 cv
851.455 442.748 li
851.457 442.158 851.599 441.811 851.808 441.602 cv
852.017 441.392 852.365 441.25 852.955 441.248 cv
1130.11 441.248 li
1130.7 441.25 1131.05 441.392 1131.26 441.602 cv
1131.47 441.811 1131.61 442.158 1131.61 442.748 cv
1131.61 539.185 li
1131.61 539.776 1131.47 540.123 1131.26 540.332 cv
1131.05 540.542 1130.7 540.684 1130.11 540.686 cv
clp
851.455 441.248 mo
1131.61 441.248 li
1131.61 540.686 li
851.455 540.686 li
cp
0 0 0 0 cmyk
f
grestore
1130.12 541.685 mo
1130.12 541.685 1130.11 541.685 1130.11 541.685 cv
852.955 541.685 li
852.952 541.685 852.948 541.685 852.945 541.685 cv
852.205 541.685 851.557 541.494 851.101 541.039 cv
850.644 540.582 850.453 539.929 850.455 539.185 cv
850.455 442.748 li
850.453 442.005 850.644 441.352 851.101 440.895 cv
851.557 440.439 852.205 440.248 852.945 440.248 cv
852.948 440.248 852.952 440.248 852.955 440.248 cv
1130.11 440.248 li
1130.11 440.248 1130.12 440.248 1130.12 440.248 cv
1130.86 440.248 1131.51 440.439 1131.96 440.895 cv
1132.42 441.352 1132.61 442.005 1132.61 442.748 cv
1132.61 539.185 li
1132.61 539.929 1132.42 540.582 1131.96 541.039 cv
1131.51 541.494 1130.86 541.685 1130.12 541.685 cv
852.955 540.686 mo
1130.11 540.686 li
1130.7 540.684 1131.05 540.542 1131.26 540.332 cv
1131.47 540.123 1131.61 539.776 1131.61 539.185 cv
1131.61 442.748 li
1131.61 442.158 1131.47 441.811 1131.26 441.602 cv
1131.05 441.392 1130.7 441.25 1130.11 441.248 cv
852.955 441.248 li
852.365 441.25 852.017 441.392 851.808 441.602 cv
851.599 441.811 851.457 442.158 851.455 442.748 cv
851.455 539.185 li
851.457 539.776 851.599 540.123 851.808 540.332 cv
852.017 540.542 852.365 540.684 852.955 540.686 cv
852.955 540.686 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
854.955 456.451 mo
874.955 456.451 li
0 1 1 0 cmyk
@
886.895 446.991 mo
886.895 458.331 li
889.275 458.331 li
891.275 458.331 892.755 457.891 893.695 456.971 cv
894.615 456.051 895.095 454.611 895.095 452.651 cv
895.095 450.691 894.615 449.271 893.695 448.351 cv
892.755 447.451 891.275 446.991 889.275 446.991 cv
886.895 446.991 li
884.915 445.371 mo
888.975 445.371 li
891.795 445.371 893.875 445.971 895.195 447.131 cv
896.515 448.311 897.175 450.151 897.175 452.651 cv
897.175 455.171 896.495 457.011 895.175 458.191 cv
893.855 459.371 891.775 459.951 888.975 459.951 cv
884.915 459.951 li
884.915 445.371 li
1 /0 /CSD get_res sepcs
1 sep
f
902.295 452.991 mo
902.295 458.331 li
905.455 458.331 li
906.515 458.331 907.295 458.111 907.815 457.671 cv
908.315 457.231 908.575 456.571 908.575 455.651 cv
908.575 454.751 908.315 454.091 907.815 453.651 cv
907.295 453.211 906.515 452.991 905.455 452.991 cv
902.295 452.991 li
902.295 446.991 mo
902.295 451.391 li
905.215 451.391 li
906.175 451.391 906.875 451.211 907.355 450.851 cv
907.835 450.491 908.075 449.951 908.075 449.191 cv
908.075 448.471 907.835 447.911 907.355 447.551 cv
906.875 447.191 906.175 446.991 905.215 446.991 cv
902.295 446.991 li
900.315 445.371 mo
905.355 445.371 li
906.855 445.371 908.015 445.691 908.835 446.311 cv
909.635 446.951 910.055 447.831 910.055 448.971 cv
910.055 449.871 909.835 450.591 909.415 451.111 cv
908.995 451.631 908.395 451.971 907.595 452.091 cv
908.555 452.311 909.315 452.751 909.855 453.411 cv
910.375 454.071 910.655 454.891 910.655 455.871 cv
910.655 457.191 910.195 458.191 909.315 458.891 cv
908.435 459.611 907.175 459.951 905.555 459.951 cv
900.315 459.951 li
900.315 445.371 li
f
914.035 445.371 mo
916.695 445.371 li
923.155 457.571 li
923.155 445.371 li
925.075 445.371 li
925.075 459.951 li
922.415 459.951 li
915.955 447.751 li
915.955 459.951 li
914.035 459.951 li
914.035 445.371 li
f
939.595 444.771 mo
938.715 446.291 938.075 447.771 937.655 449.231 cv
937.215 450.691 937.015 452.171 937.015 453.671 cv
937.015 455.191 937.215 456.671 937.655 458.131 cv
938.075 459.611 938.715 461.071 939.595 462.571 cv
938.035 462.571 li
937.055 461.031 936.315 459.551 935.835 458.071 cv
935.355 456.591 935.115 455.131 935.115 453.671 cv
935.115 452.231 935.355 450.771 935.835 449.291 cv
936.315 447.811 937.035 446.311 938.035 444.771 cv
939.595 444.771 li
f
941.155 445.371 mo
953.475 445.371 li
953.475 447.031 li
948.295 447.031 li
948.295 459.951 li
946.315 459.951 li
946.315 447.031 li
941.155 447.031 li
941.155 445.371 li
f
961.635 450.691 mo
961.435 450.571 961.215 450.491 960.975 450.431 cv
960.735 450.391 960.475 450.351 960.195 450.351 cv
959.175 450.351 958.395 450.691 957.855 451.351 cv
957.295 452.011 957.035 452.951 957.035 454.191 cv
957.035 459.951 li
955.235 459.951 li
955.235 449.011 li
957.035 449.011 li
957.035 450.711 li
957.395 450.051 957.895 449.551 958.495 449.231 cv
959.095 448.911 959.835 448.751 960.715 448.751 cv
960.835 448.751 960.975 448.771 961.135 448.771 cv
961.275 448.791 961.435 448.811 961.635 448.851 cv
961.635 450.691 li
f
968.495 454.451 mo
967.035 454.451 966.035 454.631 965.475 454.951 cv
964.915 455.291 964.635 455.851 964.635 456.651 cv
964.635 457.291 964.835 457.811 965.255 458.171 cv
965.675 458.551 966.255 458.731 966.975 458.731 cv
967.975 458.731 968.775 458.391 969.375 457.671 cv
969.975 456.971 970.275 456.031 970.275 454.851 cv
970.275 454.451 li
968.495 454.451 li
972.075 453.711 mo
972.075 459.951 li
970.275 459.951 li
970.275 458.291 li
969.855 458.971 969.335 459.451 968.735 459.751 cv
968.135 460.051 967.375 460.211 966.495 460.211 cv
965.375 460.211 964.475 459.911 963.815 459.291 cv
963.155 458.671 962.835 457.831 962.835 456.771 cv
962.835 455.551 963.235 454.631 964.075 453.991 cv
964.895 453.371 966.115 453.051 967.755 453.051 cv
970.275 453.051 li
970.275 452.871 li
970.275 452.051 969.995 451.411 969.455 450.951 cv
968.915 450.511 968.155 450.271 967.175 450.271 cv
966.535 450.271 965.935 450.351 965.335 450.511 cv
964.735 450.671 964.175 450.891 963.635 451.171 cv
963.635 449.511 li
964.275 449.271 964.915 449.071 965.535 448.951 cv
966.155 448.831 966.755 448.751 967.355 448.751 cv
968.935 448.751 970.115 449.171 970.895 449.991 cv
971.675 450.811 972.075 452.051 972.075 453.711 cv
f
975.775 449.011 mo
977.575 449.011 li
977.575 459.951 li
975.775 459.951 li
975.775 449.011 li
975.775 444.751 mo
977.575 444.751 li
977.575 447.031 li
975.775 447.031 li
975.775 444.751 li
f
990.435 453.351 mo
990.435 459.951 li
988.635 459.951 li
988.635 453.411 li
988.635 452.371 988.415 451.611 988.015 451.091 cv
987.615 450.571 987.015 450.311 986.215 450.311 cv
985.235 450.311 984.475 450.631 983.915 451.251 cv
983.355 451.871 983.075 452.711 983.075 453.771 cv
983.075 459.951 li
981.275 459.951 li
981.275 449.011 li
983.075 449.011 li
983.075 450.711 li
983.495 450.071 983.995 449.571 984.595 449.251 cv
985.175 448.931 985.855 448.751 986.615 448.751 cv
987.855 448.751 988.815 449.151 989.455 449.931 cv
990.095 450.711 990.435 451.851 990.435 453.351 cv
f
994.015 449.011 mo
995.815 449.011 li
995.815 459.951 li
994.015 459.951 li
994.015 449.011 li
994.015 444.751 mo
995.815 444.751 li
995.815 447.031 li
994.015 447.031 li
994.015 444.751 li
f
1008.67 453.351 mo
1008.67 459.951 li
1006.87 459.951 li
1006.87 453.411 li
1006.87 452.371 1006.65 451.611 1006.25 451.091 cv
1005.85 450.571 1005.25 450.311 1004.45 450.311 cv
1003.47 450.311 1002.71 450.631 1002.15 451.251 cv
1001.59 451.871 1001.31 452.711 1001.31 453.771 cv
1001.31 459.951 li
999.515 459.951 li
999.515 449.011 li
1001.31 449.011 li
1001.31 450.711 li
1001.73 450.071 1002.23 449.571 1002.83 449.251 cv
1003.41 448.931 1004.09 448.751 1004.85 448.751 cv
1006.09 448.751 1007.05 449.151 1007.69 449.931 cv
1008.33 450.711 1008.67 451.851 1008.67 453.351 cv
f
1019.45 454.351 mo
1019.45 453.071 1019.18 452.051 1018.66 451.331 cv
1018.11 450.611 1017.35 450.251 1016.4 450.251 cv
1015.44 450.251 1014.68 450.611 1014.14 451.331 cv
1013.59 452.051 1013.33 453.071 1013.33 454.351 cv
1013.33 455.651 1013.59 456.651 1014.14 457.371 cv
1014.68 458.091 1015.44 458.451 1016.4 458.451 cv
1017.35 458.451 1018.11 458.091 1018.66 457.371 cv
1019.18 456.651 1019.45 455.651 1019.45 454.351 cv
1021.26 458.591 mo
1021.26 460.431 1020.83 461.811 1020.02 462.731 cv
1019.18 463.631 1017.92 464.091 1016.21 464.091 cv
1015.57 464.091 1014.99 464.031 1014.44 463.951 cv
1013.88 463.851 1013.31 463.711 1012.8 463.511 cv
1012.8 461.771 li
1013.31 462.051 1013.83 462.251 1014.35 462.391 cv
1014.88 462.531 1015.4 462.611 1015.94 462.611 cv
1017.09 462.611 1017.97 462.291 1018.57 461.691 cv
1019.16 461.071 1019.45 460.151 1019.45 458.911 cv
1019.45 458.031 li
1019.07 458.671 1018.59 459.151 1018.02 459.471 cv
1017.44 459.791 1016.76 459.951 1015.95 459.951 cv
1014.59 459.951 1013.52 459.451 1012.69 458.431 cv
1011.88 457.411 1011.47 456.051 1011.47 454.351 cv
1011.47 452.671 1011.88 451.311 1012.69 450.291 cv
1013.52 449.271 1014.59 448.751 1015.95 448.751 cv
1016.76 448.751 1017.44 448.911 1018.02 449.231 cv
1018.59 449.551 1019.07 450.031 1019.45 450.671 cv
1019.45 449.011 li
1021.26 449.011 li
1021.26 458.591 li
f
1025.41 457.471 mo
1027.47 457.471 li
1027.47 459.151 li
1025.87 462.251 li
1024.61 462.251 li
1025.41 459.151 li
1025.41 457.471 li
f
1046.49 445.851 mo
1046.49 447.771 li
1045.73 447.411 1045.03 447.151 1044.37 446.971 cv
1043.69 446.811 1043.05 446.711 1042.45 446.711 cv
1041.37 446.711 1040.53 446.931 1039.95 447.331 cv
1039.37 447.751 1039.09 448.351 1039.09 449.111 cv
1039.09 449.751 1039.27 450.251 1039.67 450.571 cv
1040.05 450.911 1040.79 451.171 1041.87 451.371 cv
1043.07 451.611 li
1044.53 451.891 1045.61 452.391 1046.31 453.091 cv
1047.01 453.811 1047.37 454.751 1047.37 455.931 cv
1047.37 457.351 1046.89 458.411 1045.95 459.131 cv
1044.99 459.851 1043.61 460.211 1041.79 460.211 cv
1041.09 460.211 1040.35 460.131 1039.57 459.991 cv
1038.79 459.851 1037.99 459.631 1037.17 459.311 cv
1037.17 457.271 li
1037.97 457.731 1038.75 458.071 1039.51 458.291 cv
1040.27 458.531 1041.03 458.631 1041.79 458.631 cv
1042.91 458.631 1043.77 458.411 1044.39 457.971 cv
1044.99 457.531 1045.31 456.911 1045.31 456.071 cv
1045.31 455.351 1045.09 454.791 1044.65 454.391 cv
1044.21 453.991 1043.49 453.691 1042.49 453.491 cv
1041.29 453.251 li
1039.81 452.971 1038.75 452.511 1038.09 451.871 cv
1037.43 451.251 1037.11 450.391 1037.11 449.271 cv
1037.11 447.991 1037.55 446.971 1038.47 446.231 cv
1039.37 445.491 1040.63 445.111 1042.23 445.111 cv
1042.91 445.111 1043.59 445.171 1044.31 445.291 cv
1045.01 445.411 1045.73 445.611 1046.49 445.851 cv
f
1050.37 449.011 mo
1052.17 449.011 li
1052.17 459.951 li
1050.37 459.951 li
1050.37 449.011 li
1050.37 444.751 mo
1052.17 444.751 li
1052.17 447.031 li
1050.37 447.031 li
1050.37 444.751 li
f
1063.13 454.351 mo
1063.13 453.071 1062.85 452.051 1062.33 451.331 cv
1061.79 450.611 1061.03 450.251 1060.07 450.251 cv
1059.11 450.251 1058.35 450.611 1057.81 451.331 cv
1057.27 452.051 1057.01 453.071 1057.01 454.351 cv
1057.01 455.651 1057.27 456.651 1057.81 457.371 cv
1058.35 458.091 1059.11 458.451 1060.07 458.451 cv
1061.03 458.451 1061.79 458.091 1062.33 457.371 cv
1062.85 456.651 1063.13 455.651 1063.13 454.351 cv
1064.93 458.591 mo
1064.93 460.431 1064.51 461.811 1063.69 462.731 cv
1062.85 463.631 1061.59 464.091 1059.89 464.091 cv
1059.25 464.091 1058.67 464.031 1058.11 463.951 cv
1057.55 463.851 1056.99 463.711 1056.47 463.511 cv
1056.47 461.771 li
1056.99 462.051 1057.51 462.251 1058.03 462.391 cv
1058.55 462.531 1059.07 462.611 1059.61 462.611 cv
1060.77 462.611 1061.65 462.291 1062.25 461.691 cv
1062.83 461.071 1063.13 460.151 1063.13 458.911 cv
1063.13 458.031 li
1062.75 458.671 1062.27 459.151 1061.69 459.471 cv
1061.11 459.791 1060.43 459.951 1059.63 459.951 cv
1058.27 459.951 1057.19 459.451 1056.37 458.431 cv
1055.55 457.411 1055.15 456.051 1055.15 454.351 cv
1055.15 452.671 1055.55 451.311 1056.37 450.291 cv
1057.19 449.271 1058.27 448.751 1059.63 448.751 cv
1060.43 448.751 1061.11 448.911 1061.69 449.231 cv
1062.27 449.551 1062.75 450.031 1063.13 450.671 cv
1063.13 449.011 li
1064.93 449.011 li
1064.93 458.591 li
f
1077.15 451.111 mo
1077.59 450.311 1078.13 449.731 1078.75 449.331 cv
1079.37 448.951 1080.11 448.751 1080.97 448.751 cv
1082.09 448.751 1082.97 449.151 1083.59 449.951 cv
1084.21 450.751 1084.53 451.891 1084.53 453.351 cv
1084.53 459.951 li
1082.73 459.951 li
1082.73 453.411 li
1082.73 452.371 1082.53 451.591 1082.17 451.071 cv
1081.79 450.571 1081.23 450.311 1080.47 450.311 cv
1079.53 450.311 1078.79 450.631 1078.25 451.251 cv
1077.71 451.871 1077.45 452.711 1077.45 453.771 cv
1077.45 459.951 li
1075.65 459.951 li
1075.65 453.411 li
1075.65 452.371 1075.45 451.591 1075.09 451.071 cv
1074.71 450.571 1074.13 450.311 1073.37 450.311 cv
1072.45 450.311 1071.71 450.631 1071.17 451.251 cv
1070.63 451.871 1070.37 452.711 1070.37 453.771 cv
1070.37 459.951 li
1068.57 459.951 li
1068.57 449.011 li
1070.37 449.011 li
1070.37 450.711 li
1070.77 450.051 1071.27 449.551 1071.85 449.231 cv
1072.41 448.911 1073.09 448.751 1073.89 448.751 cv
1074.69 448.751 1075.35 448.951 1075.91 449.351 cv
1076.47 449.751 1076.87 450.351 1077.15 451.111 cv
f
1092.35 450.271 mo
1091.39 450.271 1090.63 450.651 1090.07 451.411 cv
1089.51 452.171 1089.23 453.191 1089.23 454.491 cv
1089.23 455.811 1089.49 456.831 1090.05 457.591 cv
1090.61 458.351 1091.37 458.711 1092.35 458.711 cv
1093.31 458.711 1094.07 458.351 1094.63 457.591 cv
1095.19 456.831 1095.47 455.811 1095.47 454.491 cv
1095.47 453.211 1095.19 452.171 1094.63 451.411 cv
1094.07 450.651 1093.31 450.271 1092.35 450.271 cv
1092.35 448.751 mo
1093.91 448.751 1095.13 449.271 1096.03 450.271 cv
1096.91 451.291 1097.37 452.691 1097.37 454.491 cv
1097.37 456.291 1096.91 457.691 1096.03 458.691 cv
1095.13 459.711 1093.91 460.211 1092.35 460.211 cv
1090.77 460.211 1089.53 459.711 1088.65 458.691 cv
1087.77 457.691 1087.33 456.291 1087.33 454.491 cv
1087.33 452.691 1087.77 451.291 1088.65 450.271 cv
1089.53 449.271 1090.77 448.751 1092.35 448.751 cv
f
1100.35 449.011 mo
1102.15 449.011 li
1102.15 459.951 li
1100.35 459.951 li
1100.35 449.011 li
1100.35 444.751 mo
1102.15 444.751 li
1102.15 447.031 li
1100.35 447.031 li
1100.35 444.751 li
f
1113.11 450.671 mo
1113.11 444.751 li
1114.91 444.751 li
1114.91 459.951 li
1113.11 459.951 li
1113.11 458.311 li
1112.73 458.971 1112.25 459.451 1111.67 459.751 cv
1111.09 460.051 1110.41 460.211 1109.61 460.211 cv
1108.29 460.211 1107.21 459.691 1106.37 458.651 cv
1105.53 457.611 1105.13 456.211 1105.13 454.491 cv
1105.13 452.771 1105.53 451.391 1106.37 450.331 cv
1107.21 449.291 1108.29 448.751 1109.61 448.751 cv
1110.41 448.751 1111.09 448.911 1111.67 449.231 cv
1112.25 449.551 1112.73 450.031 1113.11 450.671 cv
1106.99 454.491 mo
1106.99 455.811 1107.25 456.851 1107.79 457.611 cv
1108.33 458.371 1109.09 458.731 1110.05 458.731 cv
1110.99 458.731 1111.73 458.371 1112.29 457.611 cv
1112.83 456.851 1113.11 455.811 1113.11 454.491 cv
1113.11 453.171 1112.83 452.151 1112.29 451.391 cv
1111.73 450.631 1110.99 450.251 1110.05 450.251 cv
1109.09 450.251 1108.33 450.631 1107.79 451.391 cv
1107.25 452.151 1106.99 453.171 1106.99 454.491 cv
f
1118.33 444.771 mo
1119.89 444.771 li
1120.85 446.311 1121.59 447.811 1122.07 449.291 cv
1122.55 450.771 1122.81 452.231 1122.81 453.671 cv
1122.81 455.131 1122.55 456.591 1122.07 458.071 cv
1121.59 459.551 1120.85 461.031 1119.89 462.571 cv
1118.33 462.571 li
1119.19 461.071 1119.83 459.611 1120.27 458.131 cv
1120.69 456.671 1120.91 455.191 1120.91 453.671 cv
1120.91 452.171 1120.69 450.691 1120.27 449.231 cv
1119.83 447.771 1119.19 446.291 1118.33 444.771 cv
f
854.955 480.811 mo
874.955 480.811 li
0 1 1 0 cmyk
@
861.955 483.811 mo
867.955 477.811 li
861.955 477.811 mo
867.955 483.811 li
f
1 lw
0 lc
861.955 483.811 mo
867.955 477.811 li
861.955 477.811 mo
867.955 483.811 li
@
886.895 471.351 mo
886.895 482.691 li
889.275 482.691 li
891.275 482.691 892.755 482.251 893.695 481.331 cv
894.615 480.411 895.095 478.971 895.095 477.011 cv
895.095 475.051 894.615 473.631 893.695 472.711 cv
892.755 471.811 891.275 471.351 889.275 471.351 cv
886.895 471.351 li
884.915 469.731 mo
888.975 469.731 li
891.795 469.731 893.875 470.331 895.195 471.491 cv
896.515 472.671 897.175 474.511 897.175 477.011 cv
897.175 479.531 896.495 481.371 895.175 482.551 cv
893.855 483.731 891.775 484.311 888.975 484.311 cv
884.915 484.311 li
884.915 469.731 li
1 /0 /CSD get_res sepcs
1 sep
f
902.295 477.351 mo
902.295 482.691 li
905.455 482.691 li
906.515 482.691 907.295 482.471 907.815 482.031 cv
908.315 481.591 908.575 480.931 908.575 480.011 cv
908.575 479.111 908.315 478.451 907.815 478.011 cv
907.295 477.571 906.515 477.351 905.455 477.351 cv
902.295 477.351 li
902.295 471.351 mo
902.295 475.751 li
905.215 475.751 li
906.175 475.751 906.875 475.571 907.355 475.211 cv
907.835 474.851 908.075 474.311 908.075 473.551 cv
908.075 472.831 907.835 472.271 907.355 471.911 cv
906.875 471.551 906.175 471.351 905.215 471.351 cv
902.295 471.351 li
900.315 469.731 mo
905.355 469.731 li
906.855 469.731 908.015 470.051 908.835 470.671 cv
909.635 471.311 910.055 472.191 910.055 473.331 cv
910.055 474.231 909.835 474.951 909.415 475.471 cv
908.995 475.991 908.395 476.331 907.595 476.451 cv
908.555 476.671 909.315 477.111 909.855 477.771 cv
910.375 478.431 910.655 479.251 910.655 480.231 cv
910.655 481.551 910.195 482.551 909.315 483.251 cv
908.435 483.971 907.175 484.311 905.555 484.311 cv
900.315 484.311 li
900.315 469.731 li
f
914.035 469.731 mo
916.695 469.731 li
923.155 481.931 li
923.155 469.731 li
925.075 469.731 li
925.075 484.311 li
922.415 484.311 li
915.955 472.111 li
915.955 484.311 li
914.035 484.311 li
914.035 469.731 li
f
939.595 469.131 mo
938.715 470.651 938.075 472.131 937.655 473.591 cv
937.215 475.051 937.015 476.531 937.015 478.031 cv
937.015 479.551 937.215 481.031 937.655 482.491 cv
938.075 483.971 938.715 485.431 939.595 486.931 cv
938.035 486.931 li
937.055 485.391 936.315 483.911 935.835 482.431 cv
935.355 480.951 935.115 479.491 935.115 478.031 cv
935.115 476.591 935.355 475.131 935.835 473.651 cv
936.315 472.171 937.035 470.671 938.035 469.131 cv
939.595 469.131 li
f
941.155 469.731 mo
953.475 469.731 li
953.475 471.391 li
948.295 471.391 li
948.295 484.311 li
946.315 484.311 li
946.315 471.391 li
941.155 471.391 li
941.155 469.731 li
f
964.655 478.391 mo
964.655 479.271 li
956.395 479.271 li
956.475 480.511 956.835 481.471 957.515 482.111 cv
958.175 482.751 959.095 483.071 960.295 483.071 cv
960.975 483.071 961.655 482.991 962.295 482.831 cv
962.935 482.671 963.595 482.411 964.235 482.051 cv
964.235 483.751 li
963.595 484.031 962.935 484.251 962.255 484.371 cv
961.575 484.491 960.875 484.571 960.195 484.571 cv
958.435 484.571 957.055 484.071 956.035 483.071 cv
955.015 482.071 954.515 480.691 954.515 478.951 cv
954.515 477.171 954.995 475.751 955.955 474.691 cv
956.915 473.651 958.235 473.111 959.875 473.111 cv
961.355 473.111 962.515 473.591 963.375 474.531 cv
964.215 475.491 964.655 476.771 964.655 478.391 cv
962.855 477.871 mo
962.835 476.891 962.555 476.111 962.035 475.511 cv
961.495 474.931 960.775 474.631 959.895 474.631 cv
958.895 474.631 958.095 474.931 957.495 475.491 cv
956.895 476.051 956.535 476.851 956.455 477.871 cv
962.855 477.871 li
f
974.575 473.691 mo
974.575 475.391 li
974.055 475.151 973.535 474.951 972.995 474.811 cv
972.435 474.691 971.875 474.611 971.295 474.611 cv
970.395 474.611 969.715 474.751 969.275 475.031 cv
968.835 475.311 968.615 475.711 968.615 476.251 cv
968.615 476.671 968.775 476.991 969.095 477.231 cv
969.415 477.471 970.055 477.711 971.015 477.911 cv
971.635 478.051 li
972.915 478.331 973.815 478.731 974.355 479.211 cv
974.875 479.711 975.155 480.411 975.155 481.291 cv
975.155 482.311 974.755 483.111 973.955 483.691 cv
973.155 484.291 972.035 484.571 970.635 484.571 cv
970.035 484.571 969.435 484.511 968.795 484.411 cv
968.155 484.311 967.495 484.151 966.795 483.911 cv
966.795 482.051 li
967.455 482.411 968.115 482.671 968.755 482.831 cv
969.395 483.011 970.035 483.091 970.675 483.091 cv
971.515 483.091 972.175 482.951 972.635 482.671 cv
973.075 482.391 973.315 481.971 973.315 481.431 cv
973.315 480.951 973.135 480.571 972.815 480.311 cv
972.495 480.051 971.775 479.791 970.655 479.551 cv
970.035 479.411 li
968.915 479.171 968.095 478.811 967.615 478.331 cv
967.115 477.851 966.875 477.191 966.875 476.331 cv
966.875 475.311 967.235 474.511 967.955 473.951 cv
968.675 473.391 969.715 473.111 971.075 473.111 cv
971.735 473.111 972.355 473.171 972.955 473.271 cv
973.535 473.371 974.075 473.511 974.575 473.691 cv
f
979.795 470.271 mo
979.795 473.371 li
983.495 473.371 li
983.495 474.771 li
979.795 474.771 li
979.795 480.711 li
979.795 481.611 979.915 482.191 980.155 482.431 cv
980.395 482.691 980.895 482.811 981.655 482.811 cv
983.495 482.811 li
983.495 484.311 li
981.655 484.311 li
980.255 484.311 979.295 484.051 978.775 483.531 cv
978.255 483.011 977.995 482.071 977.995 480.711 cv
977.995 474.771 li
976.675 474.771 li
976.675 473.371 li
977.995 473.371 li
977.995 470.271 li
979.795 470.271 li
f
985.855 473.371 mo
987.655 473.371 li
987.655 484.311 li
985.855 484.311 li
985.855 473.371 li
985.855 469.111 mo
987.655 469.111 li
987.655 471.391 li
985.855 471.391 li
985.855 469.111 li
f
1000.51 477.711 mo
1000.51 484.311 li
998.715 484.311 li
998.715 477.771 li
998.715 476.731 998.495 475.971 998.095 475.451 cv
997.695 474.931 997.095 474.671 996.295 474.671 cv
995.315 474.671 994.555 474.991 993.995 475.611 cv
993.435 476.231 993.155 477.071 993.155 478.131 cv
993.155 484.311 li
991.355 484.311 li
991.355 473.371 li
993.155 473.371 li
993.155 475.071 li
993.575 474.431 994.075 473.931 994.675 473.611 cv
995.255 473.291 995.935 473.111 996.695 473.111 cv
997.935 473.111 998.895 473.511 999.535 474.291 cv
1000.17 475.071 1000.51 476.211 1000.51 477.711 cv
f
1011.29 478.711 mo
1011.29 477.431 1011.01 476.411 1010.49 475.691 cv
1009.95 474.971 1009.19 474.611 1008.23 474.611 cv
1007.27 474.611 1006.51 474.971 1005.97 475.691 cv
1005.43 476.411 1005.17 477.431 1005.17 478.711 cv
1005.17 480.011 1005.43 481.011 1005.97 481.731 cv
1006.51 482.451 1007.27 482.811 1008.23 482.811 cv
1009.19 482.811 1009.95 482.451 1010.49 481.731 cv
1011.01 481.011 1011.29 480.011 1011.29 478.711 cv
1013.09 482.951 mo
1013.09 484.791 1012.67 486.171 1011.85 487.091 cv
1011.01 487.991 1009.75 488.451 1008.05 488.451 cv
1007.41 488.451 1006.83 488.391 1006.27 488.311 cv
1005.71 488.211 1005.15 488.071 1004.63 487.871 cv
1004.63 486.131 li
1005.15 486.411 1005.67 486.611 1006.19 486.751 cv
1006.71 486.891 1007.23 486.971 1007.77 486.971 cv
1008.93 486.971 1009.81 486.651 1010.41 486.051 cv
1010.99 485.431 1011.29 484.511 1011.29 483.271 cv
1011.29 482.391 li
1010.91 483.031 1010.43 483.511 1009.85 483.831 cv
1009.27 484.151 1008.59 484.311 1007.79 484.311 cv
1006.43 484.311 1005.35 483.811 1004.53 482.791 cv
1003.71 481.771 1003.31 480.411 1003.31 478.711 cv
1003.31 477.031 1003.71 475.671 1004.53 474.651 cv
1005.35 473.631 1006.43 473.111 1007.79 473.111 cv
1008.59 473.111 1009.27 473.271 1009.85 473.591 cv
1010.43 473.911 1010.91 474.391 1011.29 475.031 cv
1011.29 473.371 li
1013.09 473.371 li
1013.09 482.951 li
f
1017.25 481.831 mo
1019.31 481.831 li
1019.31 483.511 li
1017.71 486.611 li
1016.45 486.611 li
1017.25 483.511 li
1017.25 481.831 li
f
1038.33 470.211 mo
1038.33 472.131 li
1037.57 471.771 1036.87 471.511 1036.21 471.331 cv
1035.53 471.171 1034.89 471.071 1034.29 471.071 cv
1033.21 471.071 1032.37 471.291 1031.79 471.691 cv
1031.21 472.111 1030.93 472.711 1030.93 473.471 cv
1030.93 474.111 1031.11 474.611 1031.51 474.931 cv
1031.89 475.271 1032.63 475.531 1033.71 475.731 cv
1034.91 475.971 li
1036.37 476.251 1037.45 476.751 1038.15 477.451 cv
1038.85 478.171 1039.21 479.111 1039.21 480.291 cv
1039.21 481.711 1038.73 482.771 1037.79 483.491 cv
1036.83 484.211 1035.45 484.571 1033.63 484.571 cv
1032.93 484.571 1032.19 484.491 1031.41 484.351 cv
1030.63 484.211 1029.83 483.991 1029.01 483.671 cv
1029.01 481.631 li
1029.81 482.091 1030.59 482.431 1031.35 482.651 cv
1032.11 482.891 1032.87 482.991 1033.63 482.991 cv
1034.75 482.991 1035.61 482.771 1036.23 482.331 cv
1036.83 481.891 1037.15 481.271 1037.15 480.431 cv
1037.15 479.711 1036.93 479.151 1036.49 478.751 cv
1036.05 478.351 1035.33 478.051 1034.33 477.851 cv
1033.13 477.611 li
1031.65 477.331 1030.59 476.871 1029.93 476.231 cv
1029.27 475.611 1028.95 474.751 1028.95 473.631 cv
1028.95 472.351 1029.39 471.331 1030.31 470.591 cv
1031.21 469.851 1032.47 469.471 1034.07 469.471 cv
1034.75 469.471 1035.43 469.531 1036.15 469.651 cv
1036.85 469.771 1037.57 469.971 1038.33 470.211 cv
f
1042.21 473.371 mo
1044.01 473.371 li
1044.01 484.311 li
1042.21 484.311 li
1042.21 473.371 li
1042.21 469.111 mo
1044.01 469.111 li
1044.01 471.391 li
1042.21 471.391 li
1042.21 469.111 li
f
1054.97 478.711 mo
1054.97 477.431 1054.69 476.411 1054.17 475.691 cv
1053.63 474.971 1052.87 474.611 1051.91 474.611 cv
1050.95 474.611 1050.19 474.971 1049.65 475.691 cv
1049.11 476.411 1048.85 477.431 1048.85 478.711 cv
1048.85 480.011 1049.11 481.011 1049.65 481.731 cv
1050.19 482.451 1050.95 482.811 1051.91 482.811 cv
1052.87 482.811 1053.63 482.451 1054.17 481.731 cv
1054.69 481.011 1054.97 480.011 1054.97 478.711 cv
1056.77 482.951 mo
1056.77 484.791 1056.35 486.171 1055.53 487.091 cv
1054.69 487.991 1053.43 488.451 1051.73 488.451 cv
1051.09 488.451 1050.51 488.391 1049.95 488.311 cv
1049.39 488.211 1048.83 488.071 1048.31 487.871 cv
1048.31 486.131 li
1048.83 486.411 1049.35 486.611 1049.87 486.751 cv
1050.39 486.891 1050.91 486.971 1051.45 486.971 cv
1052.61 486.971 1053.49 486.651 1054.09 486.051 cv
1054.67 485.431 1054.97 484.511 1054.97 483.271 cv
1054.97 482.391 li
1054.59 483.031 1054.11 483.511 1053.53 483.831 cv
1052.95 484.151 1052.27 484.311 1051.47 484.311 cv
1050.11 484.311 1049.03 483.811 1048.21 482.791 cv
1047.39 481.771 1046.99 480.411 1046.99 478.711 cv
1046.99 477.031 1047.39 475.671 1048.21 474.651 cv
1049.03 473.631 1050.11 473.111 1051.47 473.111 cv
1052.27 473.111 1052.95 473.271 1053.53 473.591 cv
1054.11 473.911 1054.59 474.391 1054.97 475.031 cv
1054.97 473.371 li
1056.77 473.371 li
1056.77 482.951 li
f
1068.99 475.471 mo
1069.43 474.671 1069.97 474.091 1070.59 473.691 cv
1071.21 473.311 1071.95 473.111 1072.81 473.111 cv
1073.93 473.111 1074.81 473.511 1075.43 474.311 cv
1076.05 475.111 1076.37 476.251 1076.37 477.711 cv
1076.37 484.311 li
1074.57 484.311 li
1074.57 477.771 li
1074.57 476.731 1074.37 475.951 1074.01 475.431 cv
1073.63 474.931 1073.07 474.671 1072.31 474.671 cv
1071.37 474.671 1070.63 474.991 1070.09 475.611 cv
1069.55 476.231 1069.29 477.071 1069.29 478.131 cv
1069.29 484.311 li
1067.49 484.311 li
1067.49 477.771 li
1067.49 476.731 1067.29 475.951 1066.93 475.431 cv
1066.55 474.931 1065.97 474.671 1065.21 474.671 cv
1064.29 474.671 1063.55 474.991 1063.01 475.611 cv
1062.47 476.231 1062.21 477.071 1062.21 478.131 cv
1062.21 484.311 li
1060.41 484.311 li
1060.41 473.371 li
1062.21 473.371 li
1062.21 475.071 li
1062.61 474.411 1063.11 473.911 1063.69 473.591 cv
1064.25 473.271 1064.93 473.111 1065.73 473.111 cv
1066.53 473.111 1067.19 473.311 1067.75 473.711 cv
1068.31 474.111 1068.71 474.711 1068.99 475.471 cv
f
1084.19 474.631 mo
1083.23 474.631 1082.47 475.011 1081.91 475.771 cv
1081.35 476.531 1081.07 477.551 1081.07 478.851 cv
1081.07 480.171 1081.33 481.191 1081.89 481.951 cv
1082.45 482.711 1083.21 483.071 1084.19 483.071 cv
1085.15 483.071 1085.91 482.711 1086.47 481.951 cv
1087.03 481.191 1087.31 480.171 1087.31 478.851 cv
1087.31 477.571 1087.03 476.531 1086.47 475.771 cv
1085.91 475.011 1085.15 474.631 1084.19 474.631 cv
1084.19 473.111 mo
1085.75 473.111 1086.97 473.631 1087.87 474.631 cv
1088.75 475.651 1089.21 477.051 1089.21 478.851 cv
1089.21 480.651 1088.75 482.051 1087.87 483.051 cv
1086.97 484.071 1085.75 484.571 1084.19 484.571 cv
1082.61 484.571 1081.37 484.071 1080.49 483.051 cv
1079.61 482.051 1079.17 480.651 1079.17 478.851 cv
1079.17 477.051 1079.61 475.651 1080.49 474.631 cv
1081.37 473.631 1082.61 473.111 1084.19 473.111 cv
f
1092.19 473.371 mo
1093.99 473.371 li
1093.99 484.311 li
1092.19 484.311 li
1092.19 473.371 li
1092.19 469.111 mo
1093.99 469.111 li
1093.99 471.391 li
1092.19 471.391 li
1092.19 469.111 li
f
1104.95 475.031 mo
1104.95 469.111 li
1106.75 469.111 li
1106.75 484.311 li
1104.95 484.311 li
1104.95 482.671 li
1104.57 483.331 1104.09 483.811 1103.51 484.111 cv
1102.93 484.411 1102.25 484.571 1101.45 484.571 cv
1100.13 484.571 1099.05 484.051 1098.21 483.011 cv
1097.37 481.971 1096.97 480.571 1096.97 478.851 cv
1096.97 477.131 1097.37 475.751 1098.21 474.691 cv
1099.05 473.651 1100.13 473.111 1101.45 473.111 cv
1102.25 473.111 1102.93 473.271 1103.51 473.591 cv
1104.09 473.911 1104.57 474.391 1104.95 475.031 cv
1098.83 478.851 mo
1098.83 480.171 1099.09 481.211 1099.63 481.971 cv
1100.17 482.731 1100.93 483.091 1101.89 483.091 cv
1102.83 483.091 1103.57 482.731 1104.13 481.971 cv
1104.67 481.211 1104.95 480.171 1104.95 478.851 cv
1104.95 477.531 1104.67 476.511 1104.13 475.751 cv
1103.57 474.991 1102.83 474.611 1101.89 474.611 cv
1100.93 474.611 1100.17 474.991 1099.63 475.751 cv
1099.09 476.511 1098.83 477.531 1098.83 478.851 cv
f
1110.17 469.131 mo
1111.73 469.131 li
1112.69 470.671 1113.43 472.171 1113.91 473.651 cv
1114.39 475.131 1114.65 476.591 1114.65 478.031 cv
1114.65 479.491 1114.39 480.951 1113.91 482.431 cv
1113.43 483.911 1112.69 485.391 1111.73 486.931 cv
1110.17 486.931 li
1111.03 485.431 1111.67 483.971 1112.11 482.491 cv
1112.53 481.031 1112.75 479.551 1112.75 478.031 cv
1112.75 476.531 1112.53 475.051 1112.11 473.591 cv
1111.67 472.131 1111.03 470.651 1110.17 469.131 cv
f
1.5 lw
2 lc
854.955 505.17 mo
874.955 505.17 li
@
886.895 495.71 mo
886.895 507.05 li
889.275 507.05 li
891.275 507.05 892.755 506.61 893.695 505.69 cv
894.615 504.77 895.095 503.33 895.095 501.37 cv
895.095 499.41 894.615 497.99 893.695 497.07 cv
892.755 496.17 891.275 495.71 889.275 495.71 cv
886.895 495.71 li
884.915 494.09 mo
888.975 494.09 li
891.795 494.09 893.875 494.69 895.195 495.85 cv
896.515 497.03 897.175 498.87 897.175 501.37 cv
897.175 503.89 896.495 505.73 895.175 506.91 cv
893.855 508.09 891.775 508.67 888.975 508.67 cv
884.915 508.67 li
884.915 494.09 li
f
902.295 501.71 mo
902.295 507.05 li
905.455 507.05 li
906.515 507.05 907.295 506.83 907.815 506.39 cv
908.315 505.95 908.575 505.29 908.575 504.37 cv
908.575 503.47 908.315 502.81 907.815 502.37 cv
907.295 501.93 906.515 501.71 905.455 501.71 cv
902.295 501.71 li
902.295 495.71 mo
902.295 500.11 li
905.215 500.11 li
906.175 500.11 906.875 499.93 907.355 499.57 cv
907.835 499.21 908.075 498.67 908.075 497.91 cv
908.075 497.19 907.835 496.63 907.355 496.27 cv
906.875 495.91 906.175 495.71 905.215 495.71 cv
902.295 495.71 li
900.315 494.09 mo
905.355 494.09 li
906.855 494.09 908.015 494.41 908.835 495.03 cv
909.635 495.67 910.055 496.55 910.055 497.69 cv
910.055 498.59 909.835 499.31 909.415 499.83 cv
908.995 500.35 908.395 500.69 907.595 500.81 cv
908.555 501.03 909.315 501.47 909.855 502.13 cv
910.375 502.79 910.655 503.61 910.655 504.59 cv
910.655 505.91 910.195 506.91 909.315 507.61 cv
908.435 508.33 907.175 508.67 905.555 508.67 cv
900.315 508.67 li
900.315 494.09 li
f
914.035 494.09 mo
916.695 494.09 li
923.155 506.29 li
923.155 494.09 li
925.075 494.09 li
925.075 508.67 li
922.415 508.67 li
915.955 496.47 li
915.955 508.67 li
914.035 508.67 li
914.035 494.09 li
f
939.595 493.49 mo
938.715 495.01 938.075 496.49 937.655 497.95 cv
937.215 499.41 937.015 500.89 937.015 502.39 cv
937.015 503.91 937.215 505.39 937.655 506.85 cv
938.075 508.33 938.715 509.79 939.595 511.29 cv
938.035 511.29 li
937.055 509.75 936.315 508.27 935.835 506.79 cv
935.355 505.31 935.115 503.85 935.115 502.39 cv
935.115 500.95 935.355 499.49 935.835 498.01 cv
936.315 496.53 937.035 495.03 938.035 493.49 cv
939.595 493.49 li
f
941.155 494.09 mo
953.475 494.09 li
953.475 495.75 li
948.295 495.75 li
948.295 508.67 li
946.315 508.67 li
946.315 495.75 li
941.155 495.75 li
941.155 494.09 li
f
961.635 499.41 mo
961.435 499.29 961.215 499.21 960.975 499.15 cv
960.735 499.11 960.475 499.07 960.195 499.07 cv
959.175 499.07 958.395 499.41 957.855 500.07 cv
957.295 500.73 957.035 501.67 957.035 502.91 cv
957.035 508.67 li
955.235 508.67 li
955.235 497.73 li
957.035 497.73 li
957.035 499.43 li
957.395 498.77 957.895 498.27 958.495 497.95 cv
959.095 497.63 959.835 497.47 960.715 497.47 cv
960.835 497.47 960.975 497.49 961.135 497.49 cv
961.275 497.51 961.435 497.53 961.635 497.57 cv
961.635 499.41 li
f
968.495 503.17 mo
967.035 503.17 966.035 503.35 965.475 503.67 cv
964.915 504.01 964.635 504.57 964.635 505.37 cv
964.635 506.01 964.835 506.53 965.255 506.89 cv
965.675 507.27 966.255 507.45 966.975 507.45 cv
967.975 507.45 968.775 507.11 969.375 506.39 cv
969.975 505.69 970.275 504.75 970.275 503.57 cv
970.275 503.17 li
968.495 503.17 li
972.075 502.43 mo
972.075 508.67 li
970.275 508.67 li
970.275 507.01 li
969.855 507.69 969.335 508.17 968.735 508.47 cv
968.135 508.77 967.375 508.93 966.495 508.93 cv
965.375 508.93 964.475 508.63 963.815 508.01 cv
963.155 507.39 962.835 506.55 962.835 505.49 cv
962.835 504.27 963.235 503.35 964.075 502.71 cv
964.895 502.09 966.115 501.77 967.755 501.77 cv
970.275 501.77 li
970.275 501.59 li
970.275 500.77 969.995 500.13 969.455 499.67 cv
968.915 499.23 968.155 498.99 967.175 498.99 cv
966.535 498.99 965.935 499.07 965.335 499.23 cv
964.735 499.39 964.175 499.61 963.635 499.89 cv
963.635 498.23 li
964.275 497.99 964.915 497.79 965.535 497.67 cv
966.155 497.55 966.755 497.47 967.355 497.47 cv
968.935 497.47 970.115 497.89 970.895 498.71 cv
971.675 499.53 972.075 500.77 972.075 502.43 cv
f
975.775 497.73 mo
977.575 497.73 li
977.575 508.67 li
975.775 508.67 li
975.775 497.73 li
975.775 493.47 mo
977.575 493.47 li
977.575 495.75 li
975.775 495.75 li
975.775 493.47 li
f
990.435 502.07 mo
990.435 508.67 li
988.635 508.67 li
988.635 502.13 li
988.635 501.09 988.415 500.33 988.015 499.81 cv
987.615 499.29 987.015 499.03 986.215 499.03 cv
985.235 499.03 984.475 499.35 983.915 499.97 cv
983.355 500.59 983.075 501.43 983.075 502.49 cv
983.075 508.67 li
981.275 508.67 li
981.275 497.73 li
983.075 497.73 li
983.075 499.43 li
983.495 498.79 983.995 498.29 984.595 497.97 cv
985.175 497.65 985.855 497.47 986.615 497.47 cv
987.855 497.47 988.815 497.87 989.455 498.65 cv
990.095 499.43 990.435 500.57 990.435 502.07 cv
f
994.015 497.73 mo
995.815 497.73 li
995.815 508.67 li
994.015 508.67 li
994.015 497.73 li
994.015 493.47 mo
995.815 493.47 li
995.815 495.75 li
994.015 495.75 li
994.015 493.47 li
f
1008.67 502.07 mo
1008.67 508.67 li
1006.87 508.67 li
1006.87 502.13 li
1006.87 501.09 1006.65 500.33 1006.25 499.81 cv
1005.85 499.29 1005.25 499.03 1004.45 499.03 cv
1003.47 499.03 1002.71 499.35 1002.15 499.97 cv
1001.59 500.59 1001.31 501.43 1001.31 502.49 cv
1001.31 508.67 li
999.515 508.67 li
999.515 497.73 li
1001.31 497.73 li
1001.31 499.43 li
1001.73 498.79 1002.23 498.29 1002.83 497.97 cv
1003.41 497.65 1004.09 497.47 1004.85 497.47 cv
1006.09 497.47 1007.05 497.87 1007.69 498.65 cv
1008.33 499.43 1008.67 500.57 1008.67 502.07 cv
f
1019.45 503.07 mo
1019.45 501.79 1019.18 500.77 1018.66 500.05 cv
1018.11 499.33 1017.35 498.97 1016.4 498.97 cv
1015.44 498.97 1014.68 499.33 1014.14 500.05 cv
1013.59 500.77 1013.33 501.79 1013.33 503.07 cv
1013.33 504.37 1013.59 505.37 1014.14 506.09 cv
1014.68 506.81 1015.44 507.17 1016.4 507.17 cv
1017.35 507.17 1018.11 506.81 1018.66 506.09 cv
1019.18 505.37 1019.45 504.37 1019.45 503.07 cv
1021.26 507.31 mo
1021.26 509.15 1020.83 510.53 1020.02 511.45 cv
1019.18 512.35 1017.92 512.81 1016.21 512.81 cv
1015.57 512.81 1014.99 512.75 1014.44 512.67 cv
1013.88 512.57 1013.31 512.43 1012.8 512.23 cv
1012.8 510.49 li
1013.31 510.77 1013.83 510.97 1014.35 511.11 cv
1014.88 511.25 1015.4 511.33 1015.94 511.33 cv
1017.09 511.33 1017.97 511.01 1018.57 510.41 cv
1019.16 509.79 1019.45 508.87 1019.45 507.63 cv
1019.45 506.75 li
1019.07 507.39 1018.59 507.87 1018.02 508.19 cv
1017.44 508.51 1016.76 508.67 1015.95 508.67 cv
1014.59 508.67 1013.52 508.17 1012.69 507.15 cv
1011.88 506.13 1011.47 504.77 1011.47 503.07 cv
1011.47 501.39 1011.88 500.03 1012.69 499.01 cv
1013.52 497.99 1014.59 497.47 1015.95 497.47 cv
1016.76 497.47 1017.44 497.63 1018.02 497.95 cv
1018.59 498.27 1019.07 498.75 1019.45 499.39 cv
1019.45 497.73 li
1021.26 497.73 li
1021.26 507.31 li
f
1025.41 506.19 mo
1027.47 506.19 li
1027.47 507.87 li
1025.87 510.97 li
1024.61 510.97 li
1025.41 507.87 li
1025.41 506.19 li
f
1037.75 494.09 mo
1039.73 494.09 li
1039.73 508.67 li
1037.75 508.67 li
1037.75 494.09 li
f
1050.55 498.05 mo
1050.55 499.75 li
1050.03 499.51 1049.51 499.31 1048.97 499.17 cv
1048.41 499.05 1047.85 498.97 1047.27 498.97 cv
1046.37 498.97 1045.69 499.11 1045.25 499.39 cv
1044.81 499.67 1044.59 500.07 1044.59 500.61 cv
1044.59 501.03 1044.75 501.35 1045.07 501.59 cv
1045.39 501.83 1046.03 502.07 1046.99 502.27 cv
1047.61 502.41 li
1048.89 502.69 1049.79 503.09 1050.33 503.57 cv
1050.85 504.07 1051.13 504.77 1051.13 505.65 cv
1051.13 506.67 1050.73 507.47 1049.93 508.05 cv
1049.13 508.65 1048.01 508.93 1046.61 508.93 cv
1046.01 508.93 1045.41 508.87 1044.77 508.77 cv
1044.13 508.67 1043.47 508.51 1042.77 508.27 cv
1042.77 506.41 li
1043.43 506.77 1044.09 507.03 1044.73 507.19 cv
1045.37 507.37 1046.01 507.45 1046.65 507.45 cv
1047.49 507.45 1048.15 507.31 1048.61 507.03 cv
1049.05 506.75 1049.29 506.33 1049.29 505.79 cv
1049.29 505.31 1049.11 504.93 1048.79 504.67 cv
1048.47 504.41 1047.75 504.15 1046.63 503.91 cv
1046.01 503.77 li
1044.89 503.53 1044.07 503.17 1043.59 502.69 cv
1043.09 502.21 1042.85 501.55 1042.85 500.69 cv
1042.85 499.67 1043.21 498.87 1043.93 498.31 cv
1044.65 497.75 1045.69 497.47 1047.05 497.47 cv
1047.71 497.47 1048.33 497.53 1048.93 497.63 cv
1049.51 497.73 1050.05 497.87 1050.55 498.05 cv
f
1053.99 497.73 mo
1055.79 497.73 li
1055.79 508.67 li
1053.99 508.67 li
1053.99 497.73 li
1053.99 493.47 mo
1055.79 493.47 li
1055.79 495.75 li
1053.99 495.75 li
1053.99 493.47 li
f
1066.75 503.07 mo
1066.75 501.79 1066.47 500.77 1065.95 500.05 cv
1065.41 499.33 1064.65 498.97 1063.69 498.97 cv
1062.73 498.97 1061.97 499.33 1061.43 500.05 cv
1060.89 500.77 1060.63 501.79 1060.63 503.07 cv
1060.63 504.37 1060.89 505.37 1061.43 506.09 cv
1061.97 506.81 1062.73 507.17 1063.69 507.17 cv
1064.65 507.17 1065.41 506.81 1065.95 506.09 cv
1066.47 505.37 1066.75 504.37 1066.75 503.07 cv
1068.55 507.31 mo
1068.55 509.15 1068.13 510.53 1067.31 511.45 cv
1066.47 512.35 1065.21 512.81 1063.51 512.81 cv
1062.87 512.81 1062.29 512.75 1061.73 512.67 cv
1061.17 512.57 1060.61 512.43 1060.09 512.23 cv
1060.09 510.49 li
1060.61 510.77 1061.13 510.97 1061.65 511.11 cv
1062.17 511.25 1062.69 511.33 1063.23 511.33 cv
1064.39 511.33 1065.27 511.01 1065.87 510.41 cv
1066.45 509.79 1066.75 508.87 1066.75 507.63 cv
1066.75 506.75 li
1066.37 507.39 1065.89 507.87 1065.31 508.19 cv
1064.73 508.51 1064.05 508.67 1063.25 508.67 cv
1061.89 508.67 1060.81 508.17 1059.99 507.15 cv
1059.17 506.13 1058.77 504.77 1058.77 503.07 cv
1058.77 501.39 1059.17 500.03 1059.99 499.01 cv
1060.81 497.99 1061.89 497.47 1063.25 497.47 cv
1064.05 497.47 1064.73 497.63 1065.31 497.95 cv
1065.89 498.27 1066.37 498.75 1066.75 499.39 cv
1066.75 497.73 li
1068.55 497.73 li
1068.55 507.31 li
f
1080.77 499.83 mo
1081.21 499.03 1081.75 498.45 1082.37 498.05 cv
1082.99 497.67 1083.73 497.47 1084.59 497.47 cv
1085.71 497.47 1086.59 497.87 1087.21 498.67 cv
1087.83 499.47 1088.15 500.61 1088.15 502.07 cv
1088.15 508.67 li
1086.35 508.67 li
1086.35 502.13 li
1086.35 501.09 1086.15 500.31 1085.79 499.79 cv
1085.41 499.29 1084.85 499.03 1084.09 499.03 cv
1083.15 499.03 1082.41 499.35 1081.87 499.97 cv
1081.33 500.59 1081.07 501.43 1081.07 502.49 cv
1081.07 508.67 li
1079.27 508.67 li
1079.27 502.13 li
1079.27 501.09 1079.07 500.31 1078.71 499.79 cv
1078.33 499.29 1077.75 499.03 1076.99 499.03 cv
1076.07 499.03 1075.33 499.35 1074.79 499.97 cv
1074.25 500.59 1073.99 501.43 1073.99 502.49 cv
1073.99 508.67 li
1072.19 508.67 li
1072.19 497.73 li
1073.99 497.73 li
1073.99 499.43 li
1074.39 498.77 1074.89 498.27 1075.47 497.95 cv
1076.03 497.63 1076.71 497.47 1077.51 497.47 cv
1078.31 497.47 1078.97 497.67 1079.53 498.07 cv
1080.09 498.47 1080.49 499.07 1080.77 499.83 cv
f
1095.97 498.99 mo
1095.01 498.99 1094.25 499.37 1093.69 500.13 cv
1093.13 500.89 1092.85 501.91 1092.85 503.21 cv
1092.85 504.53 1093.11 505.55 1093.67 506.31 cv
1094.23 507.07 1094.99 507.43 1095.97 507.43 cv
1096.93 507.43 1097.69 507.07 1098.25 506.31 cv
1098.81 505.55 1099.09 504.53 1099.09 503.21 cv
1099.09 501.93 1098.81 500.89 1098.25 500.13 cv
1097.69 499.37 1096.93 498.99 1095.97 498.99 cv
1095.97 497.47 mo
1097.53 497.47 1098.75 497.99 1099.65 498.99 cv
1100.53 500.01 1100.99 501.41 1100.99 503.21 cv
1100.99 505.01 1100.53 506.41 1099.65 507.41 cv
1098.75 508.43 1097.53 508.93 1095.97 508.93 cv
1094.39 508.93 1093.15 508.43 1092.27 507.41 cv
1091.39 506.41 1090.95 505.01 1090.95 503.21 cv
1090.95 501.41 1091.39 500.01 1092.27 498.99 cv
1093.15 497.99 1094.39 497.47 1095.97 497.47 cv
f
1103.97 497.73 mo
1105.77 497.73 li
1105.77 508.67 li
1103.97 508.67 li
1103.97 497.73 li
1103.97 493.47 mo
1105.77 493.47 li
1105.77 495.75 li
1103.97 495.75 li
1103.97 493.47 li
f
1116.73 499.39 mo
1116.73 493.47 li
1118.53 493.47 li
1118.53 508.67 li
1116.73 508.67 li
1116.73 507.03 li
1116.35 507.69 1115.87 508.17 1115.29 508.47 cv
1114.71 508.77 1114.03 508.93 1113.23 508.93 cv
1111.91 508.93 1110.83 508.41 1109.99 507.37 cv
1109.15 506.33 1108.75 504.93 1108.75 503.21 cv
1108.75 501.49 1109.15 500.11 1109.99 499.05 cv
1110.83 498.01 1111.91 497.47 1113.23 497.47 cv
1114.03 497.47 1114.71 497.63 1115.29 497.95 cv
1115.87 498.27 1116.35 498.75 1116.73 499.39 cv
1110.61 503.21 mo
1110.61 504.53 1110.87 505.57 1111.41 506.33 cv
1111.95 507.09 1112.71 507.45 1113.67 507.45 cv
1114.61 507.45 1115.35 507.09 1115.91 506.33 cv
1116.45 505.57 1116.73 504.53 1116.73 503.21 cv
1116.73 501.89 1116.45 500.87 1115.91 500.11 cv
1115.35 499.35 1114.61 498.97 1113.67 498.97 cv
1112.71 498.97 1111.95 499.35 1111.41 500.11 cv
1110.87 500.87 1110.61 501.89 1110.61 503.21 cv
f
1121.95 493.49 mo
1123.51 493.49 li
1124.47 495.03 1125.21 496.53 1125.69 498.01 cv
1126.17 499.49 1126.43 500.95 1126.43 502.39 cv
1126.43 503.85 1126.17 505.31 1125.69 506.79 cv
1125.21 508.27 1124.47 509.75 1123.51 511.29 cv
1121.95 511.29 li
1122.81 509.79 1123.45 508.33 1123.89 506.85 cv
1124.31 505.39 1124.53 503.91 1124.53 502.39 cv
1124.53 500.89 1124.31 499.41 1123.89 497.95 cv
1123.45 496.49 1122.81 495.01 1121.95 493.49 cv
f
854.955 529.529 mo
874.955 529.529 li
@
861.955 532.529 mo
867.955 526.529 li
861.955 526.529 mo
867.955 532.529 li
f
1 lw
0 lc
861.955 532.529 mo
867.955 526.529 li
861.955 526.529 mo
867.955 532.529 li
@
886.895 520.069 mo
886.895 531.409 li
889.275 531.409 li
891.275 531.409 892.755 530.969 893.695 530.049 cv
894.615 529.129 895.095 527.689 895.095 525.729 cv
895.095 523.769 894.615 522.349 893.695 521.429 cv
892.755 520.529 891.275 520.069 889.275 520.069 cv
886.895 520.069 li
884.915 518.449 mo
888.975 518.449 li
891.795 518.449 893.875 519.049 895.195 520.209 cv
896.515 521.389 897.175 523.229 897.175 525.729 cv
897.175 528.249 896.495 530.089 895.175 531.269 cv
893.855 532.449 891.775 533.029 888.975 533.029 cv
884.915 533.029 li
884.915 518.449 li
f
902.295 526.069 mo
902.295 531.409 li
905.455 531.409 li
906.515 531.409 907.295 531.189 907.815 530.749 cv
908.315 530.309 908.575 529.649 908.575 528.729 cv
908.575 527.829 908.315 527.169 907.815 526.729 cv
907.295 526.289 906.515 526.069 905.455 526.069 cv
902.295 526.069 li
902.295 520.069 mo
902.295 524.469 li
905.215 524.469 li
906.175 524.469 906.875 524.289 907.355 523.929 cv
907.835 523.569 908.075 523.029 908.075 522.269 cv
908.075 521.549 907.835 520.989 907.355 520.629 cv
906.875 520.269 906.175 520.069 905.215 520.069 cv
902.295 520.069 li
900.315 518.449 mo
905.355 518.449 li
906.855 518.449 908.015 518.769 908.835 519.389 cv
909.635 520.029 910.055 520.909 910.055 522.049 cv
910.055 522.949 909.835 523.669 909.415 524.189 cv
908.995 524.709 908.395 525.049 907.595 525.169 cv
908.555 525.389 909.315 525.829 909.855 526.489 cv
910.375 527.149 910.655 527.969 910.655 528.949 cv
910.655 530.269 910.195 531.269 909.315 531.969 cv
908.435 532.689 907.175 533.029 905.555 533.029 cv
900.315 533.029 li
900.315 518.449 li
f
914.035 518.449 mo
916.695 518.449 li
923.155 530.649 li
923.155 518.449 li
925.075 518.449 li
925.075 533.029 li
922.415 533.029 li
915.955 520.829 li
915.955 533.029 li
914.035 533.029 li
914.035 518.449 li
f
939.595 517.849 mo
938.715 519.369 938.075 520.849 937.655 522.309 cv
937.215 523.769 937.015 525.249 937.015 526.749 cv
937.015 528.269 937.215 529.749 937.655 531.209 cv
938.075 532.689 938.715 534.149 939.595 535.649 cv
938.035 535.649 li
937.055 534.109 936.315 532.629 935.835 531.149 cv
935.355 529.669 935.115 528.209 935.115 526.749 cv
935.115 525.309 935.355 523.849 935.835 522.369 cv
936.315 520.889 937.035 519.389 938.035 517.849 cv
939.595 517.849 li
f
941.155 518.449 mo
953.475 518.449 li
953.475 520.109 li
948.295 520.109 li
948.295 533.029 li
946.315 533.029 li
946.315 520.109 li
941.155 520.109 li
941.155 518.449 li
f
964.655 527.109 mo
964.655 527.989 li
956.395 527.989 li
956.475 529.229 956.835 530.189 957.515 530.829 cv
958.175 531.469 959.095 531.789 960.295 531.789 cv
960.975 531.789 961.655 531.709 962.295 531.549 cv
962.935 531.389 963.595 531.129 964.235 530.769 cv
964.235 532.469 li
963.595 532.749 962.935 532.969 962.255 533.089 cv
961.575 533.209 960.875 533.289 960.195 533.289 cv
958.435 533.289 957.055 532.789 956.035 531.789 cv
955.015 530.789 954.515 529.409 954.515 527.669 cv
954.515 525.889 954.995 524.469 955.955 523.409 cv
956.915 522.369 958.235 521.829 959.875 521.829 cv
961.355 521.829 962.515 522.309 963.375 523.249 cv
964.215 524.209 964.655 525.489 964.655 527.109 cv
962.855 526.589 mo
962.835 525.609 962.555 524.829 962.035 524.229 cv
961.495 523.649 960.775 523.349 959.895 523.349 cv
958.895 523.349 958.095 523.649 957.495 524.209 cv
956.895 524.769 956.535 525.569 956.455 526.589 cv
962.855 526.589 li
f
974.575 522.409 mo
974.575 524.109 li
974.055 523.869 973.535 523.669 972.995 523.529 cv
972.435 523.409 971.875 523.329 971.295 523.329 cv
970.395 523.329 969.715 523.469 969.275 523.749 cv
968.835 524.029 968.615 524.429 968.615 524.969 cv
968.615 525.389 968.775 525.709 969.095 525.949 cv
969.415 526.189 970.055 526.429 971.015 526.629 cv
971.635 526.769 li
972.915 527.049 973.815 527.449 974.355 527.929 cv
974.875 528.429 975.155 529.129 975.155 530.009 cv
975.155 531.029 974.755 531.829 973.955 532.409 cv
973.155 533.009 972.035 533.289 970.635 533.289 cv
970.035 533.289 969.435 533.229 968.795 533.129 cv
968.155 533.029 967.495 532.869 966.795 532.629 cv
966.795 530.769 li
967.455 531.129 968.115 531.389 968.755 531.549 cv
969.395 531.729 970.035 531.809 970.675 531.809 cv
971.515 531.809 972.175 531.669 972.635 531.389 cv
973.075 531.109 973.315 530.689 973.315 530.149 cv
973.315 529.669 973.135 529.289 972.815 529.029 cv
972.495 528.769 971.775 528.509 970.655 528.269 cv
970.035 528.129 li
968.915 527.889 968.095 527.529 967.615 527.049 cv
967.115 526.569 966.875 525.909 966.875 525.049 cv
966.875 524.029 967.235 523.229 967.955 522.669 cv
968.675 522.109 969.715 521.829 971.075 521.829 cv
971.735 521.829 972.355 521.889 972.955 521.989 cv
973.535 522.089 974.075 522.229 974.575 522.409 cv
f
979.795 518.989 mo
979.795 522.089 li
983.495 522.089 li
983.495 523.489 li
979.795 523.489 li
979.795 529.429 li
979.795 530.329 979.915 530.909 980.155 531.149 cv
980.395 531.409 980.895 531.529 981.655 531.529 cv
983.495 531.529 li
983.495 533.029 li
981.655 533.029 li
980.255 533.029 979.295 532.769 978.775 532.249 cv
978.255 531.729 977.995 530.789 977.995 529.429 cv
977.995 523.489 li
976.675 523.489 li
976.675 522.089 li
977.995 522.089 li
977.995 518.989 li
979.795 518.989 li
f
985.855 522.089 mo
987.655 522.089 li
987.655 533.029 li
985.855 533.029 li
985.855 522.089 li
985.855 517.829 mo
987.655 517.829 li
987.655 520.109 li
985.855 520.109 li
985.855 517.829 li
f
1000.51 526.429 mo
1000.51 533.029 li
998.715 533.029 li
998.715 526.489 li
998.715 525.449 998.495 524.689 998.095 524.169 cv
997.695 523.649 997.095 523.389 996.295 523.389 cv
995.315 523.389 994.555 523.709 993.995 524.329 cv
993.435 524.949 993.155 525.789 993.155 526.849 cv
993.155 533.029 li
991.355 533.029 li
991.355 522.089 li
993.155 522.089 li
993.155 523.789 li
993.575 523.149 994.075 522.649 994.675 522.329 cv
995.255 522.009 995.935 521.829 996.695 521.829 cv
997.935 521.829 998.895 522.229 999.535 523.009 cv
1000.17 523.789 1000.51 524.929 1000.51 526.429 cv
f
1011.29 527.429 mo
1011.29 526.149 1011.01 525.129 1010.49 524.409 cv
1009.95 523.689 1009.19 523.329 1008.23 523.329 cv
1007.27 523.329 1006.51 523.689 1005.97 524.409 cv
1005.43 525.129 1005.17 526.149 1005.17 527.429 cv
1005.17 528.729 1005.43 529.729 1005.97 530.449 cv
1006.51 531.169 1007.27 531.529 1008.23 531.529 cv
1009.19 531.529 1009.95 531.169 1010.49 530.449 cv
1011.01 529.729 1011.29 528.729 1011.29 527.429 cv
1013.09 531.669 mo
1013.09 533.509 1012.67 534.889 1011.85 535.809 cv
1011.01 536.709 1009.75 537.169 1008.05 537.169 cv
1007.41 537.169 1006.83 537.109 1006.27 537.029 cv
1005.71 536.929 1005.15 536.789 1004.63 536.589 cv
1004.63 534.849 li
1005.15 535.129 1005.67 535.329 1006.19 535.469 cv
1006.71 535.609 1007.23 535.689 1007.77 535.689 cv
1008.93 535.689 1009.81 535.369 1010.41 534.769 cv
1010.99 534.149 1011.29 533.229 1011.29 531.989 cv
1011.29 531.109 li
1010.91 531.749 1010.43 532.229 1009.85 532.549 cv
1009.27 532.869 1008.59 533.029 1007.79 533.029 cv
1006.43 533.029 1005.35 532.529 1004.53 531.509 cv
1003.71 530.489 1003.31 529.129 1003.31 527.429 cv
1003.31 525.749 1003.71 524.389 1004.53 523.369 cv
1005.35 522.349 1006.43 521.829 1007.79 521.829 cv
1008.59 521.829 1009.27 521.989 1009.85 522.309 cv
1010.43 522.629 1010.91 523.109 1011.29 523.749 cv
1011.29 522.089 li
1013.09 522.089 li
1013.09 531.669 li
f
1017.25 530.549 mo
1019.31 530.549 li
1019.31 532.229 li
1017.71 535.329 li
1016.45 535.329 li
1017.25 532.229 li
1017.25 530.549 li
f
1029.59 518.449 mo
1031.57 518.449 li
1031.57 533.029 li
1029.59 533.029 li
1029.59 518.449 li
f
1042.39 522.409 mo
1042.39 524.109 li
1041.87 523.869 1041.35 523.669 1040.81 523.529 cv
1040.25 523.409 1039.69 523.329 1039.11 523.329 cv
1038.21 523.329 1037.53 523.469 1037.09 523.749 cv
1036.65 524.029 1036.43 524.429 1036.43 524.969 cv
1036.43 525.389 1036.59 525.709 1036.91 525.949 cv
1037.23 526.189 1037.87 526.429 1038.83 526.629 cv
1039.45 526.769 li
1040.73 527.049 1041.63 527.449 1042.17 527.929 cv
1042.69 528.429 1042.97 529.129 1042.97 530.009 cv
1042.97 531.029 1042.57 531.829 1041.77 532.409 cv
1040.97 533.009 1039.85 533.289 1038.45 533.289 cv
1037.85 533.289 1037.25 533.229 1036.61 533.129 cv
1035.97 533.029 1035.31 532.869 1034.61 532.629 cv
1034.61 530.769 li
1035.27 531.129 1035.93 531.389 1036.57 531.549 cv
1037.21 531.729 1037.85 531.809 1038.49 531.809 cv
1039.33 531.809 1039.99 531.669 1040.45 531.389 cv
1040.89 531.109 1041.13 530.689 1041.13 530.149 cv
1041.13 529.669 1040.95 529.289 1040.63 529.029 cv
1040.31 528.769 1039.59 528.509 1038.47 528.269 cv
1037.85 528.129 li
1036.73 527.889 1035.91 527.529 1035.43 527.049 cv
1034.93 526.569 1034.69 525.909 1034.69 525.049 cv
1034.69 524.029 1035.05 523.229 1035.77 522.669 cv
1036.49 522.109 1037.53 521.829 1038.89 521.829 cv
1039.55 521.829 1040.17 521.889 1040.77 521.989 cv
1041.35 522.089 1041.89 522.229 1042.39 522.409 cv
f
1045.83 522.089 mo
1047.63 522.089 li
1047.63 533.029 li
1045.83 533.029 li
1045.83 522.089 li
1045.83 517.829 mo
1047.63 517.829 li
1047.63 520.109 li
1045.83 520.109 li
1045.83 517.829 li
f
1058.59 527.429 mo
1058.59 526.149 1058.31 525.129 1057.79 524.409 cv
1057.25 523.689 1056.49 523.329 1055.53 523.329 cv
1054.57 523.329 1053.81 523.689 1053.27 524.409 cv
1052.73 525.129 1052.47 526.149 1052.47 527.429 cv
1052.47 528.729 1052.73 529.729 1053.27 530.449 cv
1053.81 531.169 1054.57 531.529 1055.53 531.529 cv
1056.49 531.529 1057.25 531.169 1057.79 530.449 cv
1058.31 529.729 1058.59 528.729 1058.59 527.429 cv
1060.39 531.669 mo
1060.39 533.509 1059.97 534.889 1059.15 535.809 cv
1058.31 536.709 1057.05 537.169 1055.35 537.169 cv
1054.71 537.169 1054.13 537.109 1053.57 537.029 cv
1053.01 536.929 1052.45 536.789 1051.93 536.589 cv
1051.93 534.849 li
1052.45 535.129 1052.97 535.329 1053.49 535.469 cv
1054.01 535.609 1054.53 535.689 1055.07 535.689 cv
1056.23 535.689 1057.11 535.369 1057.71 534.769 cv
1058.29 534.149 1058.59 533.229 1058.59 531.989 cv
1058.59 531.109 li
1058.21 531.749 1057.73 532.229 1057.15 532.549 cv
1056.57 532.869 1055.89 533.029 1055.09 533.029 cv
1053.73 533.029 1052.65 532.529 1051.83 531.509 cv
1051.01 530.489 1050.61 529.129 1050.61 527.429 cv
1050.61 525.749 1051.01 524.389 1051.83 523.369 cv
1052.65 522.349 1053.73 521.829 1055.09 521.829 cv
1055.89 521.829 1056.57 521.989 1057.15 522.309 cv
1057.73 522.629 1058.21 523.109 1058.59 523.749 cv
1058.59 522.089 li
1060.39 522.089 li
1060.39 531.669 li
f
1072.61 524.189 mo
1073.05 523.389 1073.59 522.809 1074.21 522.409 cv
1074.83 522.029 1075.57 521.829 1076.43 521.829 cv
1077.55 521.829 1078.43 522.229 1079.05 523.029 cv
1079.67 523.829 1079.99 524.969 1079.99 526.429 cv
1079.99 533.029 li
1078.19 533.029 li
1078.19 526.489 li
1078.19 525.449 1077.99 524.669 1077.63 524.149 cv
1077.25 523.649 1076.69 523.389 1075.93 523.389 cv
1074.99 523.389 1074.25 523.709 1073.71 524.329 cv
1073.17 524.949 1072.91 525.789 1072.91 526.849 cv
1072.91 533.029 li
1071.11 533.029 li
1071.11 526.489 li
1071.11 525.449 1070.91 524.669 1070.55 524.149 cv
1070.17 523.649 1069.59 523.389 1068.83 523.389 cv
1067.91 523.389 1067.17 523.709 1066.63 524.329 cv
1066.09 524.949 1065.83 525.789 1065.83 526.849 cv
1065.83 533.029 li
1064.03 533.029 li
1064.03 522.089 li
1065.83 522.089 li
1065.83 523.789 li
1066.23 523.129 1066.73 522.629 1067.31 522.309 cv
1067.87 521.989 1068.55 521.829 1069.35 521.829 cv
1070.15 521.829 1070.81 522.029 1071.37 522.429 cv
1071.93 522.829 1072.33 523.429 1072.61 524.189 cv
f
1087.81 523.349 mo
1086.85 523.349 1086.09 523.729 1085.53 524.489 cv
1084.97 525.249 1084.69 526.269 1084.69 527.569 cv
1084.69 528.889 1084.95 529.909 1085.51 530.669 cv
1086.07 531.429 1086.83 531.789 1087.81 531.789 cv
1088.77 531.789 1089.53 531.429 1090.09 530.669 cv
1090.65 529.909 1090.93 528.889 1090.93 527.569 cv
1090.93 526.289 1090.65 525.249 1090.09 524.489 cv
1089.53 523.729 1088.77 523.349 1087.81 523.349 cv
1087.81 521.829 mo
1089.37 521.829 1090.59 522.349 1091.49 523.349 cv
1092.37 524.369 1092.83 525.769 1092.83 527.569 cv
1092.83 529.369 1092.37 530.769 1091.49 531.769 cv
1090.59 532.789 1089.37 533.289 1087.81 533.289 cv
1086.23 533.289 1084.99 532.789 1084.11 531.769 cv
1083.23 530.769 1082.79 529.369 1082.79 527.569 cv
1082.79 525.769 1083.23 524.369 1084.11 523.349 cv
1084.99 522.349 1086.23 521.829 1087.81 521.829 cv
f
1095.81 522.089 mo
1097.61 522.089 li
1097.61 533.029 li
1095.81 533.029 li
1095.81 522.089 li
1095.81 517.829 mo
1097.61 517.829 li
1097.61 520.109 li
1095.81 520.109 li
1095.81 517.829 li
f
1108.57 523.749 mo
1108.57 517.829 li
1110.37 517.829 li
1110.37 533.029 li
1108.57 533.029 li
1108.57 531.389 li
1108.19 532.049 1107.71 532.529 1107.13 532.829 cv
1106.55 533.129 1105.87 533.289 1105.07 533.289 cv
1103.75 533.289 1102.67 532.769 1101.83 531.729 cv
1100.99 530.689 1100.59 529.289 1100.59 527.569 cv
1100.59 525.849 1100.99 524.469 1101.83 523.409 cv
1102.67 522.369 1103.75 521.829 1105.07 521.829 cv
1105.87 521.829 1106.55 521.989 1107.13 522.309 cv
1107.71 522.629 1108.19 523.109 1108.57 523.749 cv
1102.45 527.569 mo
1102.45 528.889 1102.71 529.929 1103.25 530.689 cv
1103.79 531.449 1104.55 531.809 1105.51 531.809 cv
1106.45 531.809 1107.19 531.449 1107.75 530.689 cv
1108.29 529.929 1108.57 528.889 1108.57 527.569 cv
1108.57 526.249 1108.29 525.229 1107.75 524.469 cv
1107.19 523.709 1106.45 523.329 1105.51 523.329 cv
1104.55 523.329 1103.79 523.709 1103.25 524.469 cv
1102.71 525.229 1102.45 526.249 1102.45 527.569 cv
f
1113.79 517.849 mo
1115.35 517.849 li
1116.31 519.389 1117.05 520.889 1117.53 522.369 cv
1118.01 523.849 1118.27 525.309 1118.27 526.749 cv
1118.27 528.209 1118.01 529.669 1117.53 531.149 cv
1117.05 532.629 1116.31 534.109 1115.35 535.649 cv
1113.79 535.649 li
1114.65 534.149 1115.29 532.689 1115.73 531.209 cv
1116.15 529.749 1116.37 528.269 1116.37 526.749 cv
1116.37 525.249 1116.15 523.769 1115.73 522.309 cv
1115.29 520.849 1114.65 519.369 1113.79 517.849 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
