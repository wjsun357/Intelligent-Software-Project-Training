%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SigmoidVSIsigmoid.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/2, 16:30:34
%%BoundingBox: 0 0 1175 618
%%HiResBoundingBox: 0 0 1174.7681 617.3761
%%CropBox: 0 0 1174.7681 617.3761
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-02T16:29:44+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-02T16:30:26+08:00"
   xmp:MetadataDate="2019-06-02T16:30:26+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:92bbcac0-f772-4f43-b36c-b33e07b8e132"
   xmpMM:InstanceID="uuid:5b740b27-b17f-4a58-8e59-a064988366ee"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -617.376 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 617.376 li
1174.77 617.376 li
1174.77 0 li
cp
clp
gsave
-.978004 617.776 mo
1175.02 617.776 li
1175.02 -.223907 li
-.978004 -.223907 li
-.978004 617.776 li
clp
-83.9779 624.776 mo
1298.42 624.776 li
1298.42 -72.904 li
-83.9779 -72.904 li
-83.9779 624.776 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
88.8222 548.031 mo
1160.18 548.031 li
1160.18 10.8178 li
88.8222 10.8178 li
88.8222 548.031 li
f
137.52 548.031 mo
137.52 551.531 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
137.52 548.031 mo
137.52 551.531 li
@
137.514 557.228 mo
136.341 557.228 135.467 557.803 134.869 558.953 cv
134.271 560.103 133.995 561.828 133.995 564.128 cv
133.995 566.428 134.271 568.153 134.869 569.303 cv
135.467 570.453 136.341 571.028 137.514 571.028 cv
138.687 571.028 139.561 570.453 140.159 569.303 cv
140.734 568.153 141.033 566.428 141.033 564.128 cv
141.033 561.828 140.734 560.103 140.159 558.953 cv
139.561 557.803 138.687 557.228 137.514 557.228 cv
137.514 555.434 mo
139.377 555.434 140.803 556.193 141.815 557.665 cv
142.804 559.16 143.31 561.322 143.31 564.128 cv
143.31 566.957 142.804 569.119 141.815 570.591 cv
140.803 572.063 139.377 572.799 137.514 572.799 cv
135.628 572.799 134.179 572.063 133.19 570.591 cv
132.201 569.119 131.718 566.957 131.718 564.128 cv
131.718 561.322 132.201 559.16 133.19 557.665 cv
134.179 556.193 135.628 555.434 137.514 555.434 cv
f
334.281 548.031 mo
334.281 551.531 li
f
334.281 548.031 mo
334.281 551.531 li
@
316.736 570.591 mo
324.648 570.591 li
324.648 572.5 li
313.999 572.5 li
313.999 570.591 li
314.85 569.717 316.023 568.521 317.518 567.003 cv
318.99 565.508 319.933 564.542 320.324 564.105 cv
321.06 563.3 321.566 562.61 321.842 562.035 cv
322.118 561.483 322.279 560.908 322.279 560.356 cv
322.279 559.482 321.957 558.746 321.336 558.194 cv
320.715 557.642 319.91 557.343 318.898 557.343 cv
318.185 557.343 317.426 557.481 316.644 557.711 cv
315.862 557.964 315.011 558.332 314.114 558.838 cv
314.114 556.538 li
315.034 556.17 315.885 555.894 316.667 555.71 cv
317.449 555.526 318.185 555.434 318.852 555.434 cv
320.577 555.434 321.957 555.871 322.992 556.745 cv
324.027 557.619 324.556 558.769 324.556 560.218 cv
324.556 560.908 324.418 561.575 324.165 562.173 cv
323.912 562.794 323.452 563.53 322.762 564.358 cv
322.578 564.588 321.98 565.209 320.968 566.244 cv
319.956 567.279 318.553 568.728 316.736 570.591 cv
f
334.262 557.228 mo
333.089 557.228 332.215 557.803 331.617 558.953 cv
331.019 560.103 330.743 561.828 330.743 564.128 cv
330.743 566.428 331.019 568.153 331.617 569.303 cv
332.215 570.453 333.089 571.028 334.262 571.028 cv
335.435 571.028 336.309 570.453 336.907 569.303 cv
337.482 568.153 337.781 566.428 337.781 564.128 cv
337.781 561.828 337.482 560.103 336.907 558.953 cv
336.309 557.803 335.435 557.228 334.262 557.228 cv
334.262 555.434 mo
336.125 555.434 337.551 556.193 338.563 557.665 cv
339.552 559.16 340.058 561.322 340.058 564.128 cv
340.058 566.957 339.552 569.119 338.563 570.591 cv
337.551 572.063 336.125 572.799 334.262 572.799 cv
332.376 572.799 330.927 572.063 329.938 570.591 cv
328.949 569.119 328.466 566.957 328.466 564.128 cv
328.466 561.322 328.949 559.16 329.938 557.665 cv
330.927 556.193 332.376 555.434 334.262 555.434 cv
f
348.89 557.228 mo
347.717 557.228 346.843 557.803 346.245 558.953 cv
345.647 560.103 345.371 561.828 345.371 564.128 cv
345.371 566.428 345.647 568.153 346.245 569.303 cv
346.843 570.453 347.717 571.028 348.89 571.028 cv
350.063 571.028 350.937 570.453 351.535 569.303 cv
352.11 568.153 352.409 566.428 352.409 564.128 cv
352.409 561.828 352.11 560.103 351.535 558.953 cv
350.937 557.803 350.063 557.228 348.89 557.228 cv
348.89 555.434 mo
350.753 555.434 352.179 556.193 353.191 557.665 cv
354.18 559.16 354.686 561.322 354.686 564.128 cv
354.686 566.957 354.18 569.119 353.191 570.591 cv
352.179 572.063 350.753 572.799 348.89 572.799 cv
347.004 572.799 345.555 572.063 344.566 570.591 cv
343.577 569.119 343.094 566.957 343.094 564.128 cv
343.094 561.322 343.577 559.16 344.566 557.665 cv
345.555 556.193 347.004 555.434 348.89 555.434 cv
f
531.041 548.031 mo
531.041 551.531 li
f
531.041 548.031 mo
531.041 551.531 li
@
517.774 557.711 mo
512.047 566.658 li
517.774 566.658 li
517.774 557.711 li
517.176 555.733 mo
520.028 555.733 li
520.028 566.658 li
522.42 566.658 li
522.42 568.544 li
520.028 568.544 li
520.028 572.5 li
517.774 572.5 li
517.774 568.544 li
510.207 568.544 li
510.207 566.359 li
517.176 555.733 li
f
531.022 557.228 mo
529.849 557.228 528.975 557.803 528.377 558.953 cv
527.779 560.103 527.503 561.828 527.503 564.128 cv
527.503 566.428 527.779 568.153 528.377 569.303 cv
528.975 570.453 529.849 571.028 531.022 571.028 cv
532.195 571.028 533.069 570.453 533.667 569.303 cv
534.242 568.153 534.541 566.428 534.541 564.128 cv
534.541 561.828 534.242 560.103 533.667 558.953 cv
533.069 557.803 532.195 557.228 531.022 557.228 cv
531.022 555.434 mo
532.885 555.434 534.311 556.193 535.323 557.665 cv
536.312 559.16 536.818 561.322 536.818 564.128 cv
536.818 566.957 536.312 569.119 535.323 570.591 cv
534.311 572.063 532.885 572.799 531.022 572.799 cv
529.136 572.799 527.687 572.063 526.698 570.591 cv
525.709 569.119 525.226 566.957 525.226 564.128 cv
525.226 561.322 525.709 559.16 526.698 557.665 cv
527.687 556.193 529.136 555.434 531.022 555.434 cv
f
545.65 557.228 mo
544.477 557.228 543.603 557.803 543.005 558.953 cv
542.407 560.103 542.131 561.828 542.131 564.128 cv
542.131 566.428 542.407 568.153 543.005 569.303 cv
543.603 570.453 544.477 571.028 545.65 571.028 cv
546.823 571.028 547.697 570.453 548.295 569.303 cv
548.87 568.153 549.169 566.428 549.169 564.128 cv
549.169 561.828 548.87 560.103 548.295 558.953 cv
547.697 557.803 546.823 557.228 545.65 557.228 cv
545.65 555.434 mo
547.513 555.434 548.939 556.193 549.951 557.665 cv
550.94 559.16 551.446 561.322 551.446 564.128 cv
551.446 566.957 550.94 569.119 549.951 570.591 cv
548.939 572.063 547.513 572.799 545.65 572.799 cv
543.764 572.799 542.315 572.063 541.326 570.591 cv
540.337 569.119 539.854 566.957 539.854 564.128 cv
539.854 561.322 540.337 559.16 541.326 557.665 cv
542.315 556.193 543.764 555.434 545.65 555.434 cv
f
727.801 548.031 mo
727.801 551.531 li
f
727.801 548.031 mo
727.801 551.531 li
@
713.43 563.208 mo
712.418 563.208 711.613 563.576 711.015 564.266 cv
710.417 564.956 710.118 565.922 710.118 567.118 cv
710.118 568.337 710.417 569.303 711.015 569.993 cv
711.613 570.683 712.418 571.028 713.43 571.028 cv
714.442 571.028 715.247 570.683 715.845 569.993 cv
716.443 569.303 716.742 568.337 716.742 567.118 cv
716.742 565.922 716.443 564.956 715.845 564.266 cv
715.247 563.576 714.442 563.208 713.43 563.208 cv
717.938 556.101 mo
717.938 558.171 li
717.363 557.895 716.788 557.688 716.213 557.55 cv
715.615 557.412 715.04 557.343 714.488 557.343 cv
712.97 557.343 711.82 557.849 711.038 558.861 cv
710.256 559.873 709.796 561.414 709.704 563.438 cv
710.141 562.794 710.693 562.288 711.36 561.943 cv
712.027 561.598 712.763 561.414 713.568 561.414 cv
715.247 561.414 716.581 561.943 717.547 562.955 cv
718.513 563.967 719.019 565.37 719.019 567.118 cv
719.019 568.843 718.49 570.223 717.478 571.258 cv
716.466 572.293 715.109 572.799 713.43 572.799 cv
711.498 572.799 710.003 572.063 708.991 570.591 cv
707.956 569.119 707.45 566.957 707.45 564.128 cv
707.45 561.483 708.071 559.367 709.336 557.803 cv
710.578 556.239 712.28 555.434 714.396 555.434 cv
714.948 555.434 715.523 555.503 716.121 555.595 cv
716.696 555.71 717.294 555.871 717.938 556.101 cv
f
727.782 557.228 mo
726.609 557.228 725.735 557.803 725.137 558.953 cv
724.539 560.103 724.263 561.828 724.263 564.128 cv
724.263 566.428 724.539 568.153 725.137 569.303 cv
725.735 570.453 726.609 571.028 727.782 571.028 cv
728.955 571.028 729.829 570.453 730.427 569.303 cv
731.002 568.153 731.301 566.428 731.301 564.128 cv
731.301 561.828 731.002 560.103 730.427 558.953 cv
729.829 557.803 728.955 557.228 727.782 557.228 cv
727.782 555.434 mo
729.645 555.434 731.071 556.193 732.083 557.665 cv
733.072 559.16 733.578 561.322 733.578 564.128 cv
733.578 566.957 733.072 569.119 732.083 570.591 cv
731.071 572.063 729.645 572.799 727.782 572.799 cv
725.896 572.799 724.447 572.063 723.458 570.591 cv
722.469 569.119 721.986 566.957 721.986 564.128 cv
721.986 561.322 722.469 559.16 723.458 557.665 cv
724.447 556.193 725.896 555.434 727.782 555.434 cv
f
742.41 557.228 mo
741.237 557.228 740.363 557.803 739.765 558.953 cv
739.167 560.103 738.891 561.828 738.891 564.128 cv
738.891 566.428 739.167 568.153 739.765 569.303 cv
740.363 570.453 741.237 571.028 742.41 571.028 cv
743.583 571.028 744.457 570.453 745.055 569.303 cv
745.63 568.153 745.929 566.428 745.929 564.128 cv
745.929 561.828 745.63 560.103 745.055 558.953 cv
744.457 557.803 743.583 557.228 742.41 557.228 cv
742.41 555.434 mo
744.273 555.434 745.699 556.193 746.711 557.665 cv
747.7 559.16 748.206 561.322 748.206 564.128 cv
748.206 566.957 747.7 569.119 746.711 570.591 cv
745.699 572.063 744.273 572.799 742.41 572.799 cv
740.524 572.799 739.075 572.063 738.086 570.591 cv
737.097 569.119 736.614 566.957 736.614 564.128 cv
736.614 561.322 737.097 559.16 738.086 557.665 cv
739.075 556.193 740.524 555.434 742.41 555.434 cv
f
924.562 548.031 mo
924.562 551.531 li
f
924.562 548.031 mo
924.562 551.531 li
@
909.915 564.542 mo
908.834 564.542 907.983 564.841 907.362 565.416 cv
906.741 565.991 906.442 566.773 906.442 567.785 cv
906.442 568.797 906.741 569.602 907.362 570.177 cv
907.983 570.752 908.834 571.028 909.915 571.028 cv
910.973 571.028 911.824 570.752 912.445 570.154 cv
913.066 569.579 913.388 568.797 913.388 567.785 cv
913.388 566.773 913.066 565.991 912.468 565.416 cv
911.847 564.841 910.996 564.542 909.915 564.542 cv
907.638 563.576 mo
906.672 563.346 905.913 562.886 905.361 562.219 cv
904.809 561.552 904.556 560.747 904.556 559.781 cv
904.556 558.447 905.016 557.389 905.982 556.607 cv
906.925 555.825 908.236 555.434 909.915 555.434 cv
911.571 555.434 912.882 555.825 913.848 556.607 cv
914.791 557.389 915.274 558.447 915.274 559.781 cv
915.274 560.747 914.998 561.552 914.446 562.219 cv
913.894 562.886 913.158 563.346 912.192 563.576 cv
913.273 563.829 914.124 564.335 914.745 565.071 cv
915.343 565.807 915.665 566.727 915.665 567.785 cv
915.665 569.418 915.159 570.66 914.17 571.511 cv
913.158 572.385 911.755 572.799 909.915 572.799 cv
908.052 572.799 906.626 572.385 905.637 571.511 cv
904.648 570.66 904.165 569.418 904.165 567.785 cv
904.165 566.727 904.464 565.807 905.085 565.071 cv
905.683 564.335 906.534 563.829 907.638 563.576 cv
906.81 559.988 mo
906.81 560.862 907.063 561.552 907.615 562.035 cv
908.167 562.518 908.926 562.748 909.915 562.748 cv
910.881 562.748 911.64 562.518 912.192 562.035 cv
912.744 561.552 913.02 560.862 913.02 559.988 cv
913.02 559.114 912.744 558.447 912.192 557.964 cv
911.64 557.481 910.881 557.228 909.915 557.228 cv
908.926 557.228 908.167 557.481 907.615 557.964 cv
907.063 558.447 906.81 559.114 906.81 559.988 cv
f
924.543 557.228 mo
923.37 557.228 922.496 557.803 921.898 558.953 cv
921.3 560.103 921.024 561.828 921.024 564.128 cv
921.024 566.428 921.3 568.153 921.898 569.303 cv
922.496 570.453 923.37 571.028 924.543 571.028 cv
925.716 571.028 926.59 570.453 927.188 569.303 cv
927.763 568.153 928.062 566.428 928.062 564.128 cv
928.062 561.828 927.763 560.103 927.188 558.953 cv
926.59 557.803 925.716 557.228 924.543 557.228 cv
924.543 555.434 mo
926.406 555.434 927.832 556.193 928.844 557.665 cv
929.833 559.16 930.339 561.322 930.339 564.128 cv
930.339 566.957 929.833 569.119 928.844 570.591 cv
927.832 572.063 926.406 572.799 924.543 572.799 cv
922.657 572.799 921.208 572.063 920.219 570.591 cv
919.23 569.119 918.747 566.957 918.747 564.128 cv
918.747 561.322 919.23 559.16 920.219 557.665 cv
921.208 556.193 922.657 555.434 924.543 555.434 cv
f
939.171 557.228 mo
937.998 557.228 937.124 557.803 936.526 558.953 cv
935.928 560.103 935.652 561.828 935.652 564.128 cv
935.652 566.428 935.928 568.153 936.526 569.303 cv
937.124 570.453 937.998 571.028 939.171 571.028 cv
940.344 571.028 941.218 570.453 941.816 569.303 cv
942.391 568.153 942.69 566.428 942.69 564.128 cv
942.69 561.828 942.391 560.103 941.816 558.953 cv
941.218 557.803 940.344 557.228 939.171 557.228 cv
939.171 555.434 mo
941.034 555.434 942.46 556.193 943.472 557.665 cv
944.461 559.16 944.967 561.322 944.967 564.128 cv
944.967 566.957 944.461 569.119 943.472 570.591 cv
942.46 572.063 941.034 572.799 939.171 572.799 cv
937.285 572.799 935.836 572.063 934.847 570.591 cv
933.858 569.119 933.375 566.957 933.375 564.128 cv
933.375 561.322 933.858 559.16 934.847 557.665 cv
935.836 556.193 937.285 555.434 939.171 555.434 cv
f
1121.32 548.031 mo
1121.32 551.531 li
f
1121.32 548.031 mo
1121.32 551.531 li
@
1094.89 570.591 mo
1098.6 570.591 li
1098.6 557.803 li
1094.57 558.608 li
1094.57 556.538 li
1098.57 555.733 li
1100.85 555.733 li
1100.85 570.591 li
1104.55 570.591 li
1104.55 572.5 li
1094.89 572.5 li
1094.89 570.591 li
f
1113.98 557.228 mo
1112.81 557.228 1111.94 557.803 1111.34 558.953 cv
1110.74 560.103 1110.46 561.828 1110.46 564.128 cv
1110.46 566.428 1110.74 568.153 1111.34 569.303 cv
1111.94 570.453 1112.81 571.028 1113.98 571.028 cv
1115.16 571.028 1116.03 570.453 1116.63 569.303 cv
1117.2 568.153 1117.5 566.428 1117.5 564.128 cv
1117.5 561.828 1117.2 560.103 1116.63 558.953 cv
1116.03 557.803 1115.16 557.228 1113.98 557.228 cv
1113.98 555.434 mo
1115.85 555.434 1117.27 556.193 1118.28 557.665 cv
1119.27 559.16 1119.78 561.322 1119.78 564.128 cv
1119.78 566.957 1119.27 569.119 1118.28 570.591 cv
1117.27 572.063 1115.85 572.799 1113.98 572.799 cv
1112.1 572.799 1110.65 572.063 1109.66 570.591 cv
1108.67 569.119 1108.19 566.957 1108.19 564.128 cv
1108.19 561.322 1108.67 559.16 1109.66 557.665 cv
1110.65 556.193 1112.1 555.434 1113.98 555.434 cv
f
1128.61 557.228 mo
1127.44 557.228 1126.56 557.803 1125.97 558.953 cv
1125.37 560.103 1125.09 561.828 1125.09 564.128 cv
1125.09 566.428 1125.37 568.153 1125.97 569.303 cv
1126.56 570.453 1127.44 571.028 1128.61 571.028 cv
1129.78 571.028 1130.66 570.453 1131.26 569.303 cv
1131.83 568.153 1132.13 566.428 1132.13 564.128 cv
1132.13 561.828 1131.83 560.103 1131.26 558.953 cv
1130.66 557.803 1129.78 557.228 1128.61 557.228 cv
1128.61 555.434 mo
1130.47 555.434 1131.9 556.193 1132.91 557.665 cv
1133.9 559.16 1134.41 561.322 1134.41 564.128 cv
1134.41 566.957 1133.9 569.119 1132.91 570.591 cv
1131.9 572.063 1130.47 572.799 1128.61 572.799 cv
1126.72 572.799 1125.28 572.063 1124.29 570.591 cv
1123.3 569.119 1122.81 566.957 1122.81 564.128 cv
1122.81 561.322 1123.3 559.16 1124.29 557.665 cv
1125.28 556.193 1126.72 555.434 1128.61 555.434 cv
f
1143.24 557.228 mo
1142.07 557.228 1141.19 557.803 1140.59 558.953 cv
1140 560.103 1139.72 561.828 1139.72 564.128 cv
1139.72 566.428 1140 568.153 1140.59 569.303 cv
1141.19 570.453 1142.07 571.028 1143.24 571.028 cv
1144.41 571.028 1145.29 570.453 1145.88 569.303 cv
1146.46 568.153 1146.76 566.428 1146.76 564.128 cv
1146.76 561.828 1146.46 560.103 1145.88 558.953 cv
1145.29 557.803 1144.41 557.228 1143.24 557.228 cv
1143.24 555.434 mo
1145.1 555.434 1146.53 556.193 1147.54 557.665 cv
1148.53 559.16 1149.03 561.322 1149.03 564.128 cv
1149.03 566.957 1148.53 569.119 1147.54 570.591 cv
1146.53 572.063 1145.1 572.799 1143.24 572.799 cv
1141.35 572.799 1139.9 572.063 1138.91 570.591 cv
1137.93 569.119 1137.44 566.957 1137.44 564.128 cv
1137.44 561.322 1137.93 559.16 1138.91 557.665 cv
1139.9 556.193 1141.35 555.434 1143.24 555.434 cv
f
581.505 582.208 mo
595.335 582.208 li
595.335 584.698 li
584.475 584.698 li
584.475 591.178 li
594.885 591.178 li
594.885 593.668 li
584.475 593.668 li
584.475 601.588 li
595.605 601.588 li
595.605 604.078 li
581.505 604.078 li
581.505 582.208 li
f
602.955 601.618 mo
602.955 610.288 li
600.255 610.288 li
600.255 587.668 li
602.955 587.668 li
602.955 590.158 li
603.495 589.198 604.215 588.478 605.085 587.998 cv
605.955 587.518 607.005 587.278 608.205 587.278 cv
610.185 587.278 611.805 588.088 613.065 589.648 cv
614.295 591.238 614.925 593.308 614.925 595.888 cv
614.925 598.468 614.295 600.568 613.065 602.128 cv
611.805 603.688 610.185 604.468 608.205 604.468 cv
607.005 604.468 605.955 604.228 605.085 603.778 cv
604.215 603.328 603.495 602.608 602.955 601.618 cv
612.135 595.888 mo
612.135 593.908 611.715 592.378 610.905 591.238 cv
610.065 590.098 608.955 589.528 607.545 589.528 cv
606.105 589.528 604.995 590.098 604.185 591.238 cv
603.345 592.378 602.955 593.908 602.955 595.888 cv
602.955 597.868 603.345 599.428 604.185 600.568 cv
604.995 601.708 606.105 602.248 607.545 602.248 cv
608.955 602.248 610.065 601.708 610.905 600.568 cv
611.715 599.428 612.135 597.868 612.135 595.888 cv
f
625.755 589.558 mo
624.315 589.558 623.174 590.128 622.335 591.268 cv
621.495 592.408 621.075 593.938 621.075 595.888 cv
621.075 597.868 621.465 599.398 622.305 600.538 cv
623.145 601.678 624.285 602.218 625.755 602.218 cv
627.195 602.218 628.335 601.678 629.174 600.538 cv
630.015 599.398 630.435 597.868 630.435 595.888 cv
630.435 593.968 630.015 592.408 629.174 591.268 cv
628.335 590.128 627.195 589.558 625.755 589.558 cv
625.755 587.278 mo
628.095 587.278 629.924 588.058 631.275 589.558 cv
632.595 591.088 633.285 593.188 633.285 595.888 cv
633.285 598.588 632.595 600.688 631.275 602.188 cv
629.924 603.718 628.095 604.468 625.755 604.468 cv
623.385 604.468 621.525 603.718 620.205 602.188 cv
618.885 600.688 618.225 598.588 618.225 595.888 cv
618.225 593.188 618.885 591.088 620.205 589.558 cv
621.525 588.058 623.385 587.278 625.755 587.278 cv
f
649.575 588.298 mo
649.575 590.818 li
648.794 590.398 648.044 590.098 647.265 589.888 cv
646.484 589.678 645.734 589.558 644.955 589.558 cv
643.215 589.558 641.835 590.128 640.875 591.238 cv
639.914 592.348 639.435 593.908 639.435 595.888 cv
639.435 597.898 639.914 599.458 640.875 600.568 cv
641.835 601.678 643.215 602.218 644.955 602.218 cv
645.734 602.218 646.484 602.128 647.265 601.918 cv
648.044 601.708 648.794 601.378 649.575 600.958 cv
649.575 603.448 li
648.794 603.808 648.015 604.078 647.234 604.228 cv
646.424 604.378 645.555 604.468 644.654 604.468 cv
642.195 604.468 640.215 603.718 638.775 602.158 cv
637.305 600.628 636.585 598.528 636.585 595.888 cv
636.585 593.218 637.305 591.118 638.775 589.588 cv
640.245 588.058 642.255 587.278 644.835 587.278 cv
645.674 587.278 646.484 587.368 647.265 587.548 cv
648.044 587.728 648.825 587.968 649.575 588.298 cv
f
667.905 594.178 mo
667.905 604.078 li
665.205 604.078 li
665.205 594.268 li
665.205 592.708 664.875 591.568 664.275 590.788 cv
663.675 590.008 662.775 589.618 661.575 589.618 cv
660.105 589.618 658.965 590.098 658.125 591.028 cv
657.285 591.958 656.865 593.218 656.865 594.808 cv
656.865 604.078 li
654.165 604.078 li
654.165 581.278 li
656.865 581.278 li
656.865 590.218 li
657.495 589.258 658.245 588.508 659.145 588.028 cv
660.015 587.548 661.035 587.278 662.175 587.278 cv
664.035 587.278 665.475 587.878 666.435 589.048 cv
667.395 590.218 667.905 591.928 667.905 594.178 cv
f
88.8221 503.831 mo
85.3221 503.831 li
f
88.8221 503.831 mo
85.3221 503.831 li
@
52.5423 497.293 mo
51.3694 497.293 50.4953 497.868 49.8974 499.018 cv
49.2993 500.168 49.0233 501.893 49.0233 504.193 cv
49.0233 506.493 49.2993 508.218 49.8974 509.368 cv
50.4953 510.518 51.3694 511.093 52.5423 511.093 cv
53.7153 511.093 54.5894 510.518 55.1873 509.368 cv
55.7623 508.218 56.0614 506.493 56.0614 504.193 cv
56.0614 501.893 55.7623 500.168 55.1873 499.018 cv
54.5894 497.868 53.7153 497.293 52.5423 497.293 cv
52.5423 495.499 mo
54.4053 495.499 55.8313 496.258 56.8434 497.73 cv
57.8324 499.225 58.3383 501.387 58.3383 504.193 cv
58.3383 507.022 57.8324 509.184 56.8434 510.656 cv
55.8313 512.128 54.4053 512.864 52.5423 512.864 cv
50.6563 512.864 49.2074 512.128 48.2184 510.656 cv
47.2294 509.184 46.7464 507.022 46.7464 504.193 cv
46.7464 501.387 47.2294 499.225 48.2184 497.73 cv
49.2074 496.258 50.6563 495.499 52.5423 495.499 cv
f
62.3174 509.713 mo
64.6864 509.713 li
64.6864 512.565 li
62.3174 512.565 li
62.3174 509.713 li
f
71.5862 510.656 mo
79.4982 510.656 li
79.4982 512.565 li
68.8492 512.565 li
68.8492 510.656 li
69.7002 509.782 70.8732 508.586 72.3682 507.068 cv
73.8402 505.573 74.7832 504.607 75.1742 504.17 cv
75.9102 503.365 76.4162 502.675 76.6922 502.1 cv
76.9682 501.548 77.1292 500.973 77.1292 500.421 cv
77.1292 499.547 76.8072 498.811 76.1862 498.259 cv
75.5652 497.707 74.7602 497.408 73.7482 497.408 cv
73.0352 497.408 72.2762 497.546 71.4942 497.776 cv
70.7122 498.029 69.8612 498.397 68.9642 498.903 cv
68.9642 496.603 li
69.8842 496.235 70.7352 495.959 71.5172 495.775 cv
72.2992 495.591 73.0352 495.499 73.7022 495.499 cv
75.4272 495.499 76.8072 495.936 77.8422 496.81 cv
78.8772 497.684 79.4062 498.834 79.4062 500.283 cv
79.4062 500.973 79.2682 501.64 79.0152 502.238 cv
78.7622 502.859 78.3022 503.595 77.6122 504.423 cv
77.4282 504.653 76.8302 505.274 75.8182 506.309 cv
74.8062 507.344 73.4032 508.793 71.5862 510.656 cv
f
88.8221 440.018 mo
85.3221 440.018 li
f
88.8221 440.018 mo
85.3221 440.018 li
@
52.5423 433.481 mo
51.3694 433.481 50.4953 434.056 49.8974 435.206 cv
49.2993 436.356 49.0233 438.081 49.0233 440.381 cv
49.0233 442.681 49.2993 444.406 49.8974 445.556 cv
50.4953 446.706 51.3694 447.281 52.5423 447.281 cv
53.7153 447.281 54.5894 446.706 55.1873 445.556 cv
55.7623 444.406 56.0614 442.681 56.0614 440.381 cv
56.0614 438.081 55.7623 436.356 55.1873 435.206 cv
54.5894 434.056 53.7153 433.481 52.5423 433.481 cv
52.5423 431.687 mo
54.4053 431.687 55.8313 432.446 56.8434 433.918 cv
57.8324 435.413 58.3383 437.575 58.3383 440.381 cv
58.3383 443.21 57.8324 445.372 56.8434 446.844 cv
55.8313 448.316 54.4053 449.052 52.5423 449.052 cv
50.6563 449.052 49.2074 448.316 48.2184 446.844 cv
47.2294 445.372 46.7464 443.21 46.7464 440.381 cv
46.7464 437.575 47.2294 435.413 48.2184 433.918 cv
49.2074 432.446 50.6563 431.687 52.5423 431.687 cv
f
62.3174 445.901 mo
64.6864 445.901 li
64.6864 448.753 li
62.3174 448.753 li
62.3174 445.901 li
f
76.5082 439.714 mo
77.5892 439.944 78.4402 440.427 79.0382 441.163 cv
79.6362 441.899 79.9582 442.819 79.9582 443.877 cv
79.9582 445.533 79.3832 446.821 78.2562 447.718 cv
77.1062 448.615 75.4962 449.052 73.4032 449.052 cv
72.6902 449.052 71.9542 448.983 71.2182 448.845 cv
70.4822 448.73 69.7002 448.523 68.9182 448.247 cv
68.9182 446.062 li
69.5392 446.43 70.2292 446.706 70.9882 446.89 cv
71.7242 447.074 72.5062 447.166 73.3342 447.166 cv
74.7602 447.166 75.8412 446.89 76.5772 446.338 cv
77.3132 445.786 77.7042 444.958 77.7042 443.877 cv
77.7042 442.911 77.3592 442.129 76.6692 441.577 cv
75.9792 441.025 75.0132 440.726 73.7712 440.726 cv
71.8162 440.726 li
71.8162 438.863 li
73.8632 438.863 li
74.9672 438.863 75.8182 438.656 76.4162 438.196 cv
77.0142 437.759 77.3132 437.115 77.3132 436.264 cv
77.3132 435.413 76.9912 434.746 76.3932 434.286 cv
75.7722 433.826 74.8982 433.596 73.7712 433.596 cv
73.1502 433.596 72.4832 433.665 71.7702 433.803 cv
71.0572 433.941 70.2752 434.148 69.4242 434.424 cv
69.4242 432.4 li
70.2752 432.17 71.0802 431.986 71.8392 431.871 cv
72.5752 431.756 73.2882 431.687 73.9782 431.687 cv
75.6802 431.687 77.0372 432.078 78.0492 432.86 cv
79.0612 433.642 79.5672 434.7 79.5672 436.034 cv
79.5672 436.954 79.2912 437.736 78.7622 438.38 cv
78.2332 439.024 77.4742 439.484 76.5082 439.714 cv
f
88.8221 376.206 mo
85.3221 376.206 li
f
88.8221 376.206 mo
85.3221 376.206 li
@
52.5423 369.669 mo
51.3694 369.669 50.4953 370.244 49.8974 371.394 cv
49.2993 372.544 49.0233 374.269 49.0233 376.569 cv
49.0233 378.869 49.2993 380.594 49.8974 381.744 cv
50.4953 382.894 51.3694 383.469 52.5423 383.469 cv
53.7153 383.469 54.5894 382.894 55.1873 381.744 cv
55.7623 380.594 56.0614 378.869 56.0614 376.569 cv
56.0614 374.269 55.7623 372.544 55.1873 371.394 cv
54.5894 370.244 53.7153 369.669 52.5423 369.669 cv
52.5423 367.875 mo
54.4053 367.875 55.8313 368.634 56.8434 370.106 cv
57.8324 371.601 58.3383 373.763 58.3383 376.569 cv
58.3383 379.398 57.8324 381.56 56.8434 383.032 cv
55.8313 384.504 54.4053 385.24 52.5423 385.24 cv
50.6563 385.24 49.2074 384.504 48.2184 383.032 cv
47.2294 381.56 46.7464 379.398 46.7464 376.569 cv
46.7464 373.763 47.2294 371.601 48.2184 370.106 cv
49.2074 368.634 50.6563 367.875 52.5423 367.875 cv
f
62.3174 382.089 mo
64.6864 382.089 li
64.6864 384.941 li
62.3174 384.941 li
62.3174 382.089 li
f
75.8642 370.152 mo
70.1372 379.099 li
75.8642 379.099 li
75.8642 370.152 li
75.2662 368.174 mo
78.1182 368.174 li
78.1182 379.099 li
80.5102 379.099 li
80.5102 380.985 li
78.1182 380.985 li
78.1182 384.941 li
75.8642 384.941 li
75.8642 380.985 li
68.2972 380.985 li
68.2972 378.8 li
75.2662 368.174 li
f
88.8221 312.394 mo
85.3221 312.394 li
f
88.8221 312.394 mo
85.3221 312.394 li
@
52.5423 305.856 mo
51.3694 305.856 50.4953 306.431 49.8974 307.581 cv
49.2993 308.731 49.0233 310.456 49.0233 312.756 cv
49.0233 315.056 49.2993 316.781 49.8974 317.931 cv
50.4953 319.081 51.3694 319.656 52.5423 319.656 cv
53.7153 319.656 54.5894 319.081 55.1873 317.931 cv
55.7623 316.781 56.0614 315.056 56.0614 312.756 cv
56.0614 310.456 55.7623 308.731 55.1873 307.581 cv
54.5894 306.431 53.7153 305.856 52.5423 305.856 cv
52.5423 304.062 mo
54.4053 304.062 55.8313 304.821 56.8434 306.293 cv
57.8324 307.788 58.3383 309.95 58.3383 312.756 cv
58.3383 315.585 57.8324 317.747 56.8434 319.219 cv
55.8313 320.691 54.4053 321.427 52.5423 321.427 cv
50.6563 321.427 49.2074 320.691 48.2184 319.219 cv
47.2294 317.747 46.7464 315.585 46.7464 312.756 cv
46.7464 309.95 47.2294 307.788 48.2184 306.293 cv
49.2074 304.821 50.6563 304.062 52.5423 304.062 cv
f
62.3174 318.276 mo
64.6864 318.276 li
64.6864 321.128 li
62.3174 321.128 li
62.3174 318.276 li
f
69.6542 304.361 mo
78.5552 304.361 li
78.5552 306.27 li
71.7242 306.27 li
71.7242 310.387 li
72.0462 310.272 72.3912 310.18 72.7132 310.134 cv
73.0352 310.088 73.3802 310.042 73.7022 310.042 cv
75.5652 310.042 77.0372 310.571 78.1412 311.583 cv
79.2452 312.618 79.7972 313.998 79.7972 315.746 cv
79.7972 317.563 79.2222 318.966 78.0952 319.955 cv
76.9682 320.944 75.3812 321.427 73.3572 321.427 cv
72.6442 321.427 71.9312 321.358 71.1952 321.266 cv
70.4592 321.151 69.7232 320.99 68.9412 320.737 cv
68.9412 318.46 li
69.6082 318.828 70.2982 319.104 71.0342 319.288 cv
71.7472 319.472 72.5062 319.541 73.3112 319.541 cv
74.5992 319.541 75.6342 319.219 76.3932 318.529 cv
77.1292 317.839 77.5202 316.919 77.5202 315.746 cv
77.5202 314.596 77.1292 313.676 76.3932 312.986 cv
75.6342 312.296 74.5992 311.951 73.3112 311.951 cv
72.7132 311.951 72.0922 312.02 71.4942 312.158 cv
70.8962 312.296 70.2752 312.503 69.6542 312.779 cv
69.6542 304.361 li
f
88.8221 248.582 mo
85.3221 248.582 li
f
88.8221 248.582 mo
85.3221 248.582 li
@
52.5423 242.044 mo
51.3694 242.044 50.4953 242.619 49.8974 243.769 cv
49.2993 244.919 49.0233 246.644 49.0233 248.944 cv
49.0233 251.244 49.2993 252.969 49.8974 254.119 cv
50.4953 255.269 51.3694 255.844 52.5423 255.844 cv
53.7153 255.844 54.5894 255.269 55.1873 254.119 cv
55.7623 252.969 56.0614 251.244 56.0614 248.944 cv
56.0614 246.644 55.7623 244.919 55.1873 243.769 cv
54.5894 242.619 53.7153 242.044 52.5423 242.044 cv
52.5423 240.25 mo
54.4053 240.25 55.8313 241.009 56.8434 242.481 cv
57.8324 243.976 58.3383 246.138 58.3383 248.944 cv
58.3383 251.773 57.8324 253.935 56.8434 255.407 cv
55.8313 256.879 54.4053 257.615 52.5423 257.615 cv
50.6563 257.615 49.2074 256.879 48.2184 255.407 cv
47.2294 253.935 46.7464 251.773 46.7464 248.944 cv
46.7464 246.138 47.2294 243.976 48.2184 242.481 cv
49.2074 241.009 50.6563 240.25 52.5423 240.25 cv
f
62.3174 254.464 mo
64.6864 254.464 li
64.6864 257.316 li
62.3174 257.316 li
62.3174 254.464 li
f
74.7602 248.024 mo
73.7482 248.024 72.9432 248.392 72.3452 249.082 cv
71.7472 249.772 71.4482 250.738 71.4482 251.934 cv
71.4482 253.153 71.7472 254.119 72.3452 254.809 cv
72.9432 255.499 73.7482 255.844 74.7602 255.844 cv
75.7722 255.844 76.5772 255.499 77.1752 254.809 cv
77.7732 254.119 78.0722 253.153 78.0722 251.934 cv
78.0722 250.738 77.7732 249.772 77.1752 249.082 cv
76.5772 248.392 75.7722 248.024 74.7602 248.024 cv
79.2682 240.917 mo
79.2682 242.987 li
78.6932 242.711 78.1182 242.504 77.5432 242.366 cv
76.9452 242.228 76.3702 242.159 75.8182 242.159 cv
74.3002 242.159 73.1502 242.665 72.3682 243.677 cv
71.5862 244.689 71.1262 246.23 71.0342 248.254 cv
71.4712 247.61 72.0232 247.104 72.6902 246.759 cv
73.3572 246.414 74.0932 246.23 74.8982 246.23 cv
76.5772 246.23 77.9112 246.759 78.8772 247.771 cv
79.8432 248.783 80.3492 250.186 80.3492 251.934 cv
80.3492 253.659 79.8202 255.039 78.8082 256.074 cv
77.7962 257.109 76.4392 257.615 74.7602 257.615 cv
72.8282 257.615 71.3332 256.879 70.3212 255.407 cv
69.2862 253.935 68.7802 251.773 68.7802 248.944 cv
68.7802 246.299 69.4012 244.183 70.6662 242.619 cv
71.9082 241.055 73.6102 240.25 75.7262 240.25 cv
76.2782 240.25 76.8532 240.319 77.4512 240.411 cv
78.0262 240.526 78.6242 240.687 79.2682 240.917 cv
f
88.8221 184.77 mo
85.3221 184.77 li
f
88.8221 184.77 mo
85.3221 184.77 li
@
52.5423 178.232 mo
51.3694 178.232 50.4953 178.807 49.8974 179.957 cv
49.2993 181.107 49.0233 182.832 49.0233 185.132 cv
49.0233 187.432 49.2993 189.157 49.8974 190.307 cv
50.4953 191.457 51.3694 192.032 52.5423 192.032 cv
53.7153 192.032 54.5894 191.457 55.1873 190.307 cv
55.7623 189.157 56.0614 187.432 56.0614 185.132 cv
56.0614 182.832 55.7623 181.107 55.1873 179.957 cv
54.5894 178.807 53.7153 178.232 52.5423 178.232 cv
52.5423 176.438 mo
54.4053 176.438 55.8313 177.197 56.8434 178.669 cv
57.8324 180.164 58.3383 182.326 58.3383 185.132 cv
58.3383 187.961 57.8324 190.123 56.8434 191.595 cv
55.8313 193.067 54.4053 193.803 52.5423 193.803 cv
50.6563 193.803 49.2074 193.067 48.2184 191.595 cv
47.2294 190.123 46.7464 187.961 46.7464 185.132 cv
46.7464 182.326 47.2294 180.164 48.2184 178.669 cv
49.2074 177.197 50.6563 176.438 52.5423 176.438 cv
f
62.3174 190.652 mo
64.6864 190.652 li
64.6864 193.504 li
62.3174 193.504 li
62.3174 190.652 li
f
69.0562 176.737 mo
79.8432 176.737 li
79.8432 177.703 li
73.7482 193.504 li
71.3792 193.504 li
77.1062 178.646 li
69.0562 178.646 li
69.0562 176.737 li
f
88.8221 120.958 mo
85.3221 120.958 li
f
88.8221 120.958 mo
85.3221 120.958 li
@
52.5423 114.42 mo
51.3694 114.42 50.4953 114.995 49.8974 116.145 cv
49.2993 117.295 49.0233 119.02 49.0233 121.32 cv
49.0233 123.62 49.2993 125.345 49.8974 126.495 cv
50.4953 127.645 51.3694 128.22 52.5423 128.22 cv
53.7153 128.22 54.5894 127.645 55.1873 126.495 cv
55.7623 125.345 56.0614 123.62 56.0614 121.32 cv
56.0614 119.02 55.7623 117.295 55.1873 116.145 cv
54.5894 114.995 53.7153 114.42 52.5423 114.42 cv
52.5423 112.626 mo
54.4053 112.626 55.8313 113.385 56.8434 114.857 cv
57.8324 116.352 58.3383 118.514 58.3383 121.32 cv
58.3383 124.149 57.8324 126.311 56.8434 127.783 cv
55.8313 129.255 54.4053 129.991 52.5423 129.991 cv
50.6563 129.991 49.2074 129.255 48.2184 127.783 cv
47.2294 126.311 46.7464 124.149 46.7464 121.32 cv
46.7464 118.514 47.2294 116.352 48.2184 114.857 cv
49.2074 113.385 50.6563 112.626 52.5423 112.626 cv
f
62.3174 126.84 mo
64.6864 126.84 li
64.6864 129.692 li
62.3174 129.692 li
62.3174 126.84 li
f
74.4842 121.734 mo
73.4032 121.734 72.5522 122.033 71.9312 122.608 cv
71.3102 123.183 71.0112 123.965 71.0112 124.977 cv
71.0112 125.989 71.3102 126.794 71.9312 127.369 cv
72.5522 127.944 73.4032 128.22 74.4842 128.22 cv
75.5422 128.22 76.3932 127.944 77.0142 127.346 cv
77.6352 126.771 77.9572 125.989 77.9572 124.977 cv
77.9572 123.965 77.6352 123.183 77.0372 122.608 cv
76.4162 122.033 75.5652 121.734 74.4842 121.734 cv
72.2072 120.768 mo
71.2412 120.538 70.4822 120.078 69.9302 119.411 cv
69.3782 118.744 69.1252 117.939 69.1252 116.973 cv
69.1252 115.639 69.5852 114.581 70.5512 113.799 cv
71.4942 113.017 72.8052 112.626 74.4842 112.626 cv
76.1402 112.626 77.4512 113.017 78.4172 113.799 cv
79.3602 114.581 79.8432 115.639 79.8432 116.973 cv
79.8432 117.939 79.5672 118.744 79.0152 119.411 cv
78.4632 120.078 77.7272 120.538 76.7612 120.768 cv
77.8422 121.021 78.6932 121.527 79.3142 122.263 cv
79.9122 122.999 80.2342 123.919 80.2342 124.977 cv
80.2342 126.61 79.7282 127.852 78.7392 128.703 cv
77.7272 129.577 76.3242 129.991 74.4842 129.991 cv
72.6212 129.991 71.1952 129.577 70.2062 128.703 cv
69.2172 127.852 68.7342 126.61 68.7342 124.977 cv
68.7342 123.919 69.0332 122.999 69.6542 122.263 cv
70.2522 121.527 71.1032 121.021 72.2072 120.768 cv
71.3792 117.18 mo
71.3792 118.054 71.6322 118.744 72.1842 119.227 cv
72.7362 119.71 73.4952 119.94 74.4842 119.94 cv
75.4502 119.94 76.2092 119.71 76.7612 119.227 cv
77.3132 118.744 77.5892 118.054 77.5892 117.18 cv
77.5892 116.306 77.3132 115.639 76.7612 115.156 cv
76.2092 114.673 75.4502 114.42 74.4842 114.42 cv
73.4952 114.42 72.7362 114.673 72.1842 115.156 cv
71.6322 115.639 71.3792 116.306 71.3792 117.18 cv
f
88.8221 57.1453 mo
85.3221 57.1453 li
f
88.8221 57.1453 mo
85.3221 57.1453 li
@
52.5423 50.6077 mo
51.3694 50.6077 50.4953 51.1827 49.8974 52.3327 cv
49.2993 53.4827 49.0233 55.2077 49.0233 57.5077 cv
49.0233 59.8077 49.2993 61.5327 49.8974 62.6827 cv
50.4953 63.8327 51.3694 64.4077 52.5423 64.4077 cv
53.7153 64.4077 54.5894 63.8327 55.1873 62.6827 cv
55.7623 61.5327 56.0614 59.8077 56.0614 57.5077 cv
56.0614 55.2077 55.7623 53.4827 55.1873 52.3327 cv
54.5894 51.1827 53.7153 50.6077 52.5423 50.6077 cv
52.5423 48.8137 mo
54.4053 48.8137 55.8313 49.5727 56.8434 51.0447 cv
57.8324 52.5397 58.3383 54.7017 58.3383 57.5077 cv
58.3383 60.3367 57.8324 62.4987 56.8434 63.9707 cv
55.8313 65.4427 54.4053 66.1787 52.5423 66.1787 cv
50.6563 66.1787 49.2074 65.4427 48.2184 63.9707 cv
47.2294 62.4987 46.7464 60.3367 46.7464 57.5077 cv
46.7464 54.7017 47.2294 52.5397 48.2184 51.0447 cv
49.2074 49.5727 50.6563 48.8137 52.5423 48.8137 cv
f
62.3174 63.0277 mo
64.6864 63.0277 li
64.6864 65.8797 li
62.3174 65.8797 li
62.3174 63.0277 li
f
69.7002 65.5347 mo
69.7002 63.4647 li
70.2522 63.7407 70.8272 63.9477 71.4252 64.0857 cv
72.0002 64.2237 72.5752 64.2927 73.1502 64.2927 cv
74.6222 64.2927 75.7722 63.8097 76.5542 62.7977 cv
77.3362 61.7857 77.7962 60.2677 77.9342 58.1977 cv
77.4742 58.8417 76.9222 59.3477 76.2782 59.6927 cv
75.6112 60.0377 74.8752 60.1987 74.0702 60.1987 cv
72.3682 60.1987 71.0342 59.6927 70.0682 58.6807 cv
69.1022 57.6687 68.6192 56.2887 68.6192 54.5177 cv
68.6192 52.8157 69.1252 51.4357 70.1372 50.3777 cv
71.1492 49.3427 72.5062 48.8137 74.2082 48.8137 cv
76.1402 48.8137 77.6352 49.5727 78.6472 51.0447 cv
79.6592 52.5397 80.1882 54.7017 80.1882 57.5077 cv
80.1882 60.1757 79.5442 62.2687 78.3022 63.8327 cv
77.0372 65.3967 75.3582 66.1787 73.2422 66.1787 cv
72.6672 66.1787 72.0922 66.1097 71.5172 66.0177 cv
70.9192 65.9257 70.3212 65.7647 69.7002 65.5347 cv
74.2082 58.4277 mo
75.2202 58.4277 76.0252 58.0827 76.6232 57.3927 cv
77.2212 56.7027 77.5202 55.7367 77.5202 54.5177 cv
77.5202 53.3217 77.2212 52.3557 76.6232 51.6657 cv
76.0252 50.9757 75.2202 50.6077 74.2082 50.6077 cv
73.1962 50.6077 72.3912 50.9757 71.7932 51.6657 cv
71.1952 52.3557 70.8962 53.3217 70.8962 54.5177 cv
70.8962 55.7367 71.1952 56.7027 71.7932 57.3927 cv
72.3912 58.0827 73.1962 58.4277 74.2082 58.4277 cv
f
16.034 377.414 mo
26.924 381.434 li
26.924 373.394 li
16.034 377.414 li
13.124 379.094 mo
13.124 375.734 li
34.994 367.394 li
34.994 370.484 li
29.384 372.464 li
29.384 382.334 li
34.994 384.314 li
34.994 387.434 li
13.124 379.094 li
f
19.214 352.514 mo
21.734 352.514 li
21.314 353.294 21.014 354.044 20.804 354.824 cv
20.594 355.604 20.474 356.354 20.474 357.134 cv
20.474 358.874 21.044 360.254 22.154 361.214 cv
23.264 362.174 24.824 362.654 26.804 362.654 cv
28.814 362.654 30.374 362.174 31.484 361.214 cv
32.594 360.254 33.134 358.874 33.134 357.134 cv
33.134 356.354 33.044 355.604 32.834 354.824 cv
32.624 354.044 32.294 353.294 31.874 352.514 cv
34.364 352.514 li
34.724 353.294 34.994 354.074 35.144 354.854 cv
35.294 355.664 35.384 356.534 35.384 357.434 cv
35.384 359.894 34.634 361.874 33.074 363.314 cv
31.544 364.784 29.444 365.504 26.804 365.504 cv
24.134 365.504 22.034 364.784 20.504 363.314 cv
18.974 361.844 18.194 359.834 18.194 357.254 cv
18.194 356.414 18.284 355.604 18.464 354.824 cv
18.644 354.044 18.884 353.264 19.214 352.514 cv
f
19.214 336.014 mo
21.734 336.014 li
21.314 336.794 21.014 337.544 20.804 338.324 cv
20.594 339.104 20.474 339.854 20.474 340.634 cv
20.474 342.374 21.044 343.754 22.154 344.714 cv
23.264 345.674 24.824 346.154 26.804 346.154 cv
28.814 346.154 30.374 345.674 31.484 344.714 cv
32.594 343.754 33.134 342.374 33.134 340.634 cv
33.134 339.854 33.044 339.104 32.834 338.324 cv
32.624 337.544 32.294 336.794 31.874 336.014 cv
34.364 336.014 li
34.724 336.794 34.994 337.574 35.144 338.354 cv
35.294 339.164 35.384 340.034 35.384 340.934 cv
35.384 343.394 34.634 345.374 33.074 346.814 cv
31.544 348.284 29.444 349.004 26.804 349.004 cv
24.134 349.004 22.034 348.284 20.504 346.814 cv
18.974 345.344 18.194 343.334 18.194 340.754 cv
18.194 339.914 18.284 339.104 18.464 338.324 cv
18.644 337.544 18.884 336.764 19.214 336.014 cv
f
28.514 331.604 mo
18.584 331.604 li
18.584 328.904 li
28.424 328.904 li
29.984 328.904 31.124 328.604 31.904 328.004 cv
32.684 327.404 33.074 326.504 33.074 325.274 cv
33.074 323.834 32.624 322.664 31.694 321.824 cv
30.764 320.984 29.504 320.564 27.884 320.564 cv
18.584 320.564 li
18.584 317.864 li
34.994 317.864 li
34.994 320.564 li
32.474 320.564 li
33.494 321.224 34.214 322.004 34.694 322.844 cv
35.144 323.714 35.384 324.704 35.384 325.844 cv
35.384 327.734 34.814 329.174 33.644 330.134 cv
32.504 331.124 30.794 331.604 28.514 331.604 cv
18.194 324.824 mo
18.194 324.824 li
f
21.104 302.804 mo
20.924 303.104 20.804 303.434 20.714 303.794 cv
20.654 304.154 20.594 304.544 20.594 304.964 cv
20.594 306.494 21.104 307.664 22.094 308.474 cv
23.084 309.314 24.494 309.704 26.354 309.704 cv
34.994 309.704 li
34.994 312.404 li
18.584 312.404 li
18.584 309.704 li
21.134 309.704 li
20.144 309.164 19.394 308.414 18.914 307.514 cv
18.434 306.614 18.194 305.504 18.194 304.184 cv
18.194 304.004 18.224 303.794 18.224 303.554 cv
18.254 303.344 18.284 303.104 18.344 302.804 cv
21.104 302.804 li
f
26.744 292.514 mo
26.744 294.704 27.014 296.204 27.494 297.044 cv
28.004 297.884 28.844 298.304 30.044 298.304 cv
31.004 298.304 31.784 298.004 32.324 297.374 cv
32.894 296.744 33.164 295.874 33.164 294.794 cv
33.164 293.294 32.654 292.094 31.574 291.194 cv
30.524 290.294 29.114 289.844 27.344 289.844 cv
26.744 289.844 li
26.744 292.514 li
25.634 287.144 mo
34.994 287.144 li
34.994 289.844 li
32.504 289.844 li
33.524 290.474 34.244 291.254 34.694 292.154 cv
35.144 293.054 35.384 294.194 35.384 295.514 cv
35.384 297.194 34.934 298.544 34.004 299.534 cv
33.074 300.524 31.814 301.004 30.224 301.004 cv
28.394 301.004 27.014 300.404 26.054 299.144 cv
25.124 297.914 24.644 296.084 24.644 293.624 cv
24.644 289.844 li
24.374 289.844 li
23.144 289.844 22.184 290.264 21.494 291.074 cv
20.834 291.884 20.474 293.024 20.474 294.494 cv
20.474 295.454 20.594 296.354 20.834 297.254 cv
21.074 298.154 21.404 298.994 21.824 299.804 cv
19.334 299.804 li
18.974 298.844 18.674 297.884 18.494 296.954 cv
18.314 296.024 18.194 295.124 18.194 294.224 cv
18.194 291.854 18.824 290.084 20.054 288.914 cv
21.284 287.744 23.144 287.144 25.634 287.144 cv
f
19.214 269.774 mo
21.734 269.774 li
21.314 270.554 21.014 271.304 20.804 272.084 cv
20.594 272.864 20.474 273.614 20.474 274.394 cv
20.474 276.134 21.044 277.514 22.154 278.474 cv
23.264 279.434 24.824 279.914 26.804 279.914 cv
28.814 279.914 30.374 279.434 31.484 278.474 cv
32.594 277.514 33.134 276.134 33.134 274.394 cv
33.134 273.614 33.044 272.864 32.834 272.084 cv
32.624 271.304 32.294 270.554 31.874 269.774 cv
34.364 269.774 li
34.724 270.554 34.994 271.334 35.144 272.114 cv
35.294 272.924 35.384 273.794 35.384 274.694 cv
35.384 277.154 34.634 279.134 33.074 280.574 cv
31.544 282.044 29.444 282.764 26.804 282.764 cv
24.134 282.764 22.034 282.044 20.504 280.574 cv
18.974 279.104 18.194 277.094 18.194 274.514 cv
18.194 273.674 18.284 272.864 18.464 272.084 cv
18.644 271.304 18.884 270.524 19.214 269.774 cv
f
36.494 258.254 mo
38.414 259.034 39.704 259.784 40.304 260.504 cv
40.904 261.224 41.204 262.184 41.204 263.384 cv
41.204 265.544 li
38.954 265.544 li
38.954 263.954 li
38.954 263.234 38.774 262.664 38.414 262.244 cv
38.054 261.824 37.244 261.374 35.924 260.864 cv
34.724 260.384 li
18.584 267.014 li
18.584 264.164 li
31.424 259.034 li
18.584 253.904 li
18.584 251.054 li
36.494 258.254 li
f
24.734 227.294 mo
24.974 226.664 25.424 226.034 26.114 225.434 cv
26.834 224.834 27.794 224.234 29.024 223.634 cv
34.994 220.634 li
34.994 223.814 li
29.384 226.604 li
27.944 227.324 26.954 228.044 26.474 228.704 cv
25.994 229.394 25.754 230.324 25.754 231.494 cv
25.754 234.704 li
34.994 234.704 li
34.994 237.674 li
13.124 237.674 li
13.124 230.984 li
13.124 228.494 13.664 226.634 14.684 225.404 cv
15.734 224.174 17.324 223.544 19.424 223.544 cv
20.804 223.544 21.974 223.874 22.874 224.504 cv
23.774 225.164 24.404 226.094 24.734 227.294 cv
15.554 234.704 mo
23.324 234.704 li
23.324 230.984 li
23.324 229.574 22.994 228.494 22.334 227.774 cv
21.674 227.054 20.714 226.664 19.424 226.664 cv
18.164 226.664 17.204 227.054 16.544 227.774 cv
15.884 228.494 15.554 229.574 15.554 230.984 cv
15.554 234.704 li
f
26.744 209.474 mo
26.744 211.664 27.014 213.164 27.494 214.004 cv
28.004 214.844 28.844 215.264 30.044 215.264 cv
31.004 215.264 31.784 214.964 32.324 214.334 cv
32.894 213.704 33.164 212.834 33.164 211.754 cv
33.164 210.254 32.654 209.054 31.574 208.154 cv
30.524 207.254 29.114 206.804 27.344 206.804 cv
26.744 206.804 li
26.744 209.474 li
25.634 204.104 mo
34.994 204.104 li
34.994 206.804 li
32.504 206.804 li
33.524 207.434 34.244 208.214 34.694 209.114 cv
35.144 210.014 35.384 211.154 35.384 212.474 cv
35.384 214.154 34.934 215.504 34.004 216.494 cv
33.074 217.484 31.814 217.964 30.224 217.964 cv
28.394 217.964 27.014 217.364 26.054 216.104 cv
25.124 214.874 24.644 213.044 24.644 210.584 cv
24.644 206.804 li
24.374 206.804 li
23.144 206.804 22.184 207.224 21.494 208.034 cv
20.834 208.844 20.474 209.984 20.474 211.454 cv
20.474 212.414 20.594 213.314 20.834 214.214 cv
21.074 215.114 21.404 215.954 21.824 216.764 cv
19.334 216.764 li
18.974 215.804 18.674 214.844 18.494 213.914 cv
18.314 212.984 18.194 212.084 18.194 211.184 cv
18.194 208.814 18.824 207.044 20.054 205.874 cv
21.284 204.704 23.144 204.104 25.634 204.104 cv
f
13.934 195.884 mo
18.584 195.884 li
18.584 190.334 li
20.684 190.334 li
20.684 195.884 li
29.594 195.884 li
30.944 195.884 31.814 195.704 32.174 195.344 cv
32.564 194.984 32.744 194.234 32.744 193.094 cv
32.744 190.334 li
34.994 190.334 li
34.994 193.094 li
34.994 195.194 34.604 196.634 33.824 197.414 cv
33.044 198.194 31.634 198.584 29.594 198.584 cv
20.684 198.584 li
20.684 200.564 li
18.584 200.564 li
18.584 198.584 li
13.934 198.584 li
13.934 195.884 li
f
26.114 172.754 mo
27.434 172.754 li
27.434 185.144 li
29.294 185.024 30.734 184.484 31.694 183.464 cv
32.654 182.474 33.134 181.094 33.134 179.294 cv
33.134 178.274 33.014 177.254 32.774 176.294 cv
32.534 175.334 32.144 174.344 31.604 173.384 cv
34.154 173.384 li
34.574 174.344 34.904 175.334 35.084 176.354 cv
35.264 177.374 35.384 178.424 35.384 179.444 cv
35.384 182.084 34.634 184.154 33.134 185.684 cv
31.634 187.214 29.564 187.964 26.954 187.964 cv
24.284 187.964 22.154 187.244 20.564 185.804 cv
19.004 184.364 18.194 182.384 18.194 179.924 cv
18.194 177.704 18.914 175.964 20.324 174.674 cv
21.764 173.414 23.684 172.754 26.114 172.754 cv
25.334 175.454 mo
23.864 175.484 22.694 175.904 21.794 176.684 cv
20.924 177.494 20.474 178.574 20.474 179.894 cv
20.474 181.394 20.924 182.594 21.764 183.494 cv
22.604 184.394 23.804 184.934 25.334 185.054 cv
25.334 175.454 li
f
1.5 lw
2 lc
137.52 502.342 mo
147.358 454.695 li
157.196 411.09 li
167.034 413.005 li
176.872 407.9 li
186.71 411.516 li
196.548 381.949 li
206.386 352.17 li
216.224 335.792 li
226.062 313.458 li
235.9 291.761 li
245.738 273.894 li
255.576 259.43 li
265.414 252.836 li
275.253 246.88 li
285.091 242.413 li
294.929 239.435 li
304.767 232.629 li
314.605 231.14 li
324.443 224.759 li
334.281 215.825 li
344.119 211.571 li
353.957 208.38 li
363.795 198.808 li
373.633 189.875 li
383.471 179.027 li
393.309 168.604 li
403.147 157.756 li
412.985 149.035 li
422.823 135.634 li
432.661 130.529 li
442.499 124.574 li
452.337 118.405 li
462.175 114.576 li
472.013 107.344 li
481.851 99.2614 li
491.689 94.7945 li
501.527 90.9658 li
511.365 88.626 li
521.203 83.0956 li
531.041 78.6288 li
540.879 75.4382 li
550.717 72.8857 li
560.555 70.1205 li
570.393 65.8663 li
580.231 61.8249 li
590.069 60.7614 li
599.907 59.9105 li
609.745 57.1453 li
619.583 55.6564 li
629.421 55.8691 li
639.259 53.5293 li
649.097 53.3166 li
658.935 52.8912 li
668.773 52.0403 li
678.611 51.8276 li
688.449 51.1895 li
698.287 50.126 li
708.125 49.2751 li
717.963 50.126 li
727.801 48.4243 li
737.639 49.7006 li
747.477 48.8497 li
757.315 51.6149 li
767.153 52.2531 li
776.991 50.126 li
786.829 50.126 li
796.667 43.9575 li
806.505 43.7448 li
816.343 43.7448 li
826.181 44.1702 li
836.019 44.3829 li
845.857 44.3829 li
855.695 43.9575 li
865.534 43.9575 li
875.372 43.9575 li
885.21 43.532 li
895.048 43.1066 li
904.886 43.1066 li
914.724 42.6812 li
924.562 42.4685 li
934.4 42.2558 li
944.238 41.8304 li
954.076 41.6177 li
963.914 41.6177 li
973.752 41.6177 li
983.59 41.405 li
993.428 40.9796 li
1003.27 40.9796 li
1013.1 40.9796 li
1022.94 40.9796 li
1032.78 40.9796 li
1042.62 40.9796 li
1052.46 40.3414 li
1062.29 40.5541 li
1072.13 40.3414 li
1081.97 40.3414 li
1091.81 40.3414 li
1101.65 40.1287 li
1111.48 40.1287 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
137.52 523.612 mo
147.358 487.559 li
157.196 454.057 li
167.034 440.657 li
176.872 426.937 li
186.71 423.427 li
196.548 381.311 li
206.386 341.748 li
216.224 328.347 li
226.062 310.161 li
235.9 285.593 li
245.738 267.726 li
255.576 258.154 li
265.414 249.22 li
275.253 241.563 li
285.091 234.862 li
294.929 230.395 li
304.767 225.929 li
314.605 220.505 li
324.443 216.995 li
334.281 204.871 li
344.119 200.085 li
353.957 198.17 li
363.795 188.598 li
373.633 179.346 li
383.471 172.007 li
393.309 165.945 li
403.147 157.011 li
412.985 147.759 li
422.823 139.463 li
432.661 131.487 li
442.499 129.572 li
452.337 123.829 li
462.175 118.724 li
472.013 110.429 li
481.851 102.452 li
491.689 99.5804 li
501.527 95.1136 li
511.365 93.1992 li
521.203 89.3705 li
531.041 85.8608 li
540.879 84.5845 li
550.717 81.713 li
560.555 76.608 li
570.393 72.7793 li
580.231 70.2268 li
590.069 67.3553 li
599.907 66.7172 li
609.745 67.3553 li
619.583 67.0362 li
629.421 66.079 li
639.259 63.5266 li
649.097 62.2503 li
658.935 60.3359 li
668.773 59.0597 li
678.611 61.2931 li
688.449 60.3359 li
698.287 59.3787 li
708.125 59.6978 li
717.963 58.1025 li
727.801 60.655 li
737.639 62.5693 li
747.477 60.655 li
757.315 65.1218 li
767.153 62.8884 li
776.991 64.1647 li
786.829 59.6978 li
796.667 56.1881 li
806.505 57.1453 li
816.343 57.1453 li
826.181 56.5072 li
836.019 56.5072 li
845.857 56.1881 li
855.695 55.8691 li
865.534 55.8691 li
875.372 55.55 li
885.21 54.9119 li
895.048 54.9119 li
904.886 55.231 li
914.724 54.5928 li
924.562 54.2737 li
934.4 54.9119 li
944.238 53.9547 li
954.076 53.3166 li
963.914 53.6356 li
973.752 53.3166 li
983.59 53.3166 li
993.428 53.6356 li
1003.27 53.3166 li
1013.1 53.6356 li
1022.94 53.6356 li
1032.78 53.9547 li
1042.62 53.6356 li
1052.46 53.9547 li
1062.29 53.6356 li
1072.13 53.3166 li
1081.97 54.2737 li
1091.81 54.5928 li
1101.65 54.9119 li
1111.48 54.5928 li
@
gsave
134.02 527.112 mo
141.02 527.112 li
141.02 520.113 li
134.02 520.113 li
134.02 527.112 li
clp
134.52 526.612 mo
140.52 520.612 li
134.52 520.612 mo
140.52 526.612 li
f
1 lw
0 lc
134.52 526.612 mo
140.52 520.612 li
134.52 520.612 mo
140.52 526.612 li
@
grestore
gsave
143.858 491.059 mo
150.858 491.059 li
150.858 484.059 li
143.858 484.059 li
143.858 491.059 li
clp
144.358 490.559 mo
150.358 484.559 li
144.358 484.559 mo
150.358 490.559 li
f
1 lw
0 lc
144.358 490.559 mo
150.358 484.559 li
144.358 484.559 mo
150.358 490.559 li
@
grestore
gsave
153.696 457.557 mo
160.696 457.557 li
160.696 450.557 li
153.696 450.557 li
153.696 457.557 li
clp
154.196 457.057 mo
160.196 451.057 li
154.196 451.057 mo
160.196 457.057 li
f
1 lw
0 lc
154.196 457.057 mo
160.196 451.057 li
154.196 451.057 mo
160.196 457.057 li
@
grestore
gsave
163.534 444.157 mo
170.534 444.157 li
170.534 437.157 li
163.534 437.157 li
163.534 444.157 li
clp
164.034 443.657 mo
170.034 437.657 li
164.034 437.657 mo
170.034 443.657 li
f
1 lw
0 lc
164.034 443.657 mo
170.034 437.657 li
164.034 437.657 mo
170.034 443.657 li
@
grestore
gsave
173.372 430.437 mo
180.372 430.437 li
180.372 423.437 li
173.372 423.437 li
173.372 430.437 li
clp
173.872 429.937 mo
179.872 423.937 li
173.872 423.937 mo
179.872 429.937 li
f
1 lw
0 lc
173.872 429.937 mo
179.872 423.937 li
173.872 423.937 mo
179.872 429.937 li
@
grestore
gsave
183.211 426.927 mo
190.21 426.927 li
190.21 419.927 li
183.211 419.927 li
183.211 426.927 li
clp
183.71 426.427 mo
189.71 420.427 li
183.71 420.427 mo
189.71 426.427 li
f
1 lw
0 lc
183.71 426.427 mo
189.71 420.427 li
183.71 420.427 mo
189.71 426.427 li
@
grestore
gsave
193.048 384.811 mo
200.049 384.811 li
200.049 377.811 li
193.048 377.811 li
193.048 384.811 li
clp
193.548 384.311 mo
199.548 378.311 li
193.548 378.311 mo
199.548 384.311 li
f
1 lw
0 lc
193.548 384.311 mo
199.548 378.311 li
193.548 378.311 mo
199.548 384.311 li
@
grestore
gsave
202.886 345.248 mo
209.886 345.248 li
209.886 338.248 li
202.886 338.248 li
202.886 345.248 li
clp
203.386 344.748 mo
209.386 338.748 li
203.386 338.748 mo
209.386 344.748 li
f
1 lw
0 lc
203.386 344.748 mo
209.386 338.748 li
203.386 338.748 mo
209.386 344.748 li
@
grestore
gsave
212.724 331.847 mo
219.724 331.847 li
219.724 324.847 li
212.724 324.847 li
212.724 331.847 li
clp
213.224 331.347 mo
219.224 325.347 li
213.224 325.347 mo
219.224 331.347 li
f
1 lw
0 lc
213.224 331.347 mo
219.224 325.347 li
213.224 325.347 mo
219.224 331.347 li
@
grestore
gsave
222.562 313.661 mo
229.562 313.661 li
229.562 306.661 li
222.562 306.661 li
222.562 313.661 li
clp
223.062 313.161 mo
229.062 307.161 li
223.062 307.161 mo
229.062 313.161 li
f
1 lw
0 lc
223.062 313.161 mo
229.062 307.161 li
223.062 307.161 mo
229.062 313.161 li
@
grestore
gsave
232.4 289.093 mo
239.4 289.093 li
239.4 282.093 li
232.4 282.093 li
232.4 289.093 li
clp
232.9 288.593 mo
238.9 282.593 li
232.9 282.593 mo
238.9 288.593 li
f
1 lw
0 lc
232.9 288.593 mo
238.9 282.593 li
232.9 282.593 mo
238.9 288.593 li
@
grestore
gsave
242.239 271.226 mo
249.238 271.226 li
249.238 264.226 li
242.239 264.226 li
242.239 271.226 li
clp
242.738 270.726 mo
248.738 264.726 li
242.738 264.726 mo
248.738 270.726 li
f
1 lw
0 lc
242.738 270.726 mo
248.738 264.726 li
242.738 264.726 mo
248.738 270.726 li
@
grestore
gsave
252.077 261.654 mo
259.077 261.654 li
259.077 254.654 li
252.077 254.654 li
252.077 261.654 li
clp
252.576 261.154 mo
258.576 255.154 li
252.576 255.154 mo
258.576 261.154 li
f
1 lw
0 lc
252.576 261.154 mo
258.576 255.154 li
252.576 255.154 mo
258.576 261.154 li
@
grestore
gsave
261.914 252.72 mo
268.915 252.72 li
268.915 245.72 li
261.914 245.72 li
261.914 252.72 li
clp
262.414 252.22 mo
268.414 246.22 li
262.414 246.22 mo
268.414 252.22 li
f
1 lw
0 lc
262.414 252.22 mo
268.414 246.22 li
262.414 246.22 mo
268.414 252.22 li
@
grestore
gsave
271.752 245.062 mo
278.752 245.062 li
278.752 238.063 li
271.752 238.063 li
271.752 245.062 li
clp
272.252 244.563 mo
278.252 238.563 li
272.252 238.563 mo
278.252 244.563 li
f
1 lw
0 lc
272.252 244.563 mo
278.252 238.563 li
272.252 238.563 mo
278.252 244.563 li
@
grestore
gsave
281.59 238.362 mo
288.59 238.362 li
288.59 231.362 li
281.59 231.362 li
281.59 238.362 li
clp
282.09 237.862 mo
288.09 231.862 li
282.09 231.862 mo
288.09 237.862 li
f
1 lw
0 lc
282.09 237.862 mo
288.09 231.862 li
282.09 231.862 mo
288.09 237.862 li
@
grestore
gsave
291.428 233.896 mo
298.428 233.896 li
298.428 226.896 li
291.428 226.896 li
291.428 233.896 li
clp
291.928 233.395 mo
297.928 227.395 li
291.928 227.395 mo
297.928 233.395 li
f
1 lw
0 lc
291.928 233.395 mo
297.928 227.395 li
291.928 227.395 mo
297.928 233.395 li
@
grestore
gsave
301.267 229.428 mo
308.267 229.428 li
308.267 222.428 li
301.267 222.428 li
301.267 229.428 li
clp
301.767 228.929 mo
307.767 222.929 li
301.767 222.929 mo
307.767 228.929 li
f
1 lw
0 lc
301.767 228.929 mo
307.767 222.929 li
301.767 222.929 mo
307.767 228.929 li
@
grestore
gsave
311.105 224.005 mo
318.105 224.005 li
318.105 217.005 li
311.105 217.005 li
311.105 224.005 li
clp
311.605 223.505 mo
317.605 217.505 li
311.605 217.505 mo
317.605 223.505 li
f
1 lw
0 lc
311.605 223.505 mo
317.605 217.505 li
311.605 217.505 mo
317.605 223.505 li
@
grestore
gsave
320.943 220.495 mo
327.943 220.495 li
327.943 213.495 li
320.943 213.495 li
320.943 220.495 li
clp
321.443 219.995 mo
327.443 213.995 li
321.443 213.995 mo
327.443 219.995 li
f
1 lw
0 lc
321.443 219.995 mo
327.443 213.995 li
321.443 213.995 mo
327.443 219.995 li
@
grestore
gsave
330.78 208.37 mo
337.781 208.37 li
337.781 201.371 li
330.78 201.371 li
330.78 208.37 li
clp
331.281 207.871 mo
337.281 201.871 li
331.281 201.871 mo
337.281 207.871 li
f
1 lw
0 lc
331.281 207.871 mo
337.281 201.871 li
331.281 201.871 mo
337.281 207.871 li
@
grestore
gsave
340.618 203.585 mo
347.618 203.585 li
347.618 196.585 li
340.618 196.585 li
340.618 203.585 li
clp
341.119 203.085 mo
347.119 197.085 li
341.119 197.085 mo
347.119 203.085 li
f
1 lw
0 lc
341.119 203.085 mo
347.119 197.085 li
341.119 197.085 mo
347.119 203.085 li
@
grestore
gsave
350.457 201.67 mo
357.456 201.67 li
357.456 194.67 li
350.457 194.67 li
350.457 201.67 li
clp
350.957 201.17 mo
356.957 195.17 li
350.957 195.17 mo
356.957 201.17 li
f
1 lw
0 lc
350.957 201.17 mo
356.957 195.17 li
350.957 195.17 mo
356.957 201.17 li
@
grestore
gsave
360.295 192.098 mo
367.295 192.098 li
367.295 185.098 li
360.295 185.098 li
360.295 192.098 li
clp
360.795 191.598 mo
366.795 185.598 li
360.795 185.598 mo
366.795 191.598 li
f
1 lw
0 lc
360.795 191.598 mo
366.795 185.598 li
360.795 185.598 mo
366.795 191.598 li
@
grestore
gsave
370.133 182.846 mo
377.133 182.846 li
377.133 175.845 li
370.133 175.845 li
370.133 182.846 li
clp
370.633 182.346 mo
376.633 176.346 li
370.633 176.346 mo
376.633 182.346 li
f
1 lw
0 lc
370.633 182.346 mo
376.633 176.346 li
370.633 176.346 mo
376.633 182.346 li
@
grestore
gsave
379.971 175.507 mo
386.971 175.507 li
386.971 168.507 li
379.971 168.507 li
379.971 175.507 li
clp
380.471 175.007 mo
386.471 169.007 li
380.471 169.007 mo
386.471 175.007 li
f
1 lw
0 lc
380.471 175.007 mo
386.471 169.007 li
380.471 169.007 mo
386.471 175.007 li
@
grestore
gsave
389.809 169.445 mo
396.809 169.445 li
396.809 162.445 li
389.809 162.445 li
389.809 169.445 li
clp
390.309 168.945 mo
396.309 162.945 li
390.309 162.945 mo
396.309 168.945 li
f
1 lw
0 lc
390.309 168.945 mo
396.309 162.945 li
390.309 162.945 mo
396.309 168.945 li
@
grestore
gsave
399.646 160.511 mo
406.647 160.511 li
406.647 153.511 li
399.646 153.511 li
399.646 160.511 li
clp
400.147 160.011 mo
406.147 154.011 li
400.147 154.011 mo
406.147 160.011 li
f
1 lw
0 lc
400.147 160.011 mo
406.147 154.011 li
400.147 154.011 mo
406.147 160.011 li
@
grestore
gsave
409.485 151.259 mo
416.484 151.259 li
416.484 144.259 li
409.485 144.259 li
409.485 151.259 li
clp
409.985 150.759 mo
415.985 144.759 li
409.985 144.759 mo
415.985 150.759 li
f
1 lw
0 lc
409.985 150.759 mo
415.985 144.759 li
409.985 144.759 mo
415.985 150.759 li
@
grestore
gsave
419.323 142.963 mo
426.323 142.963 li
426.323 135.963 li
419.323 135.963 li
419.323 142.963 li
clp
419.823 142.463 mo
425.823 136.463 li
419.823 136.463 mo
425.823 142.463 li
f
1 lw
0 lc
419.823 142.463 mo
425.823 136.463 li
419.823 136.463 mo
425.823 142.463 li
@
grestore
gsave
429.161 134.986 mo
436.161 134.986 li
436.161 127.987 li
429.161 127.987 li
429.161 134.986 li
clp
429.661 134.486 mo
435.661 128.486 li
429.661 128.486 mo
435.661 134.486 li
f
1 lw
0 lc
429.661 134.486 mo
435.661 128.486 li
429.661 128.486 mo
435.661 134.486 li
@
grestore
gsave
438.999 133.072 mo
445.999 133.072 li
445.999 126.072 li
438.999 126.072 li
438.999 133.072 li
clp
439.499 132.572 mo
445.499 126.572 li
439.499 126.572 mo
445.499 132.572 li
f
1 lw
0 lc
439.499 132.572 mo
445.499 126.572 li
439.499 126.572 mo
445.499 132.572 li
@
grestore
gsave
448.837 127.329 mo
455.837 127.329 li
455.837 120.329 li
448.837 120.329 li
448.837 127.329 li
clp
449.337 126.829 mo
455.337 120.829 li
449.337 120.829 mo
455.337 126.829 li
f
1 lw
0 lc
449.337 126.829 mo
455.337 120.829 li
449.337 120.829 mo
455.337 126.829 li
@
grestore
gsave
458.675 122.224 mo
465.675 122.224 li
465.675 115.224 li
458.675 115.224 li
458.675 122.224 li
clp
459.175 121.724 mo
465.175 115.724 li
459.175 115.724 mo
465.175 121.724 li
f
1 lw
0 lc
459.175 121.724 mo
465.175 115.724 li
459.175 115.724 mo
465.175 121.724 li
@
grestore
gsave
468.513 113.928 mo
475.513 113.928 li
475.513 106.929 li
468.513 106.929 li
468.513 113.928 li
clp
469.013 113.428 mo
475.013 107.428 li
469.013 107.428 mo
475.013 113.428 li
f
1 lw
0 lc
469.013 113.428 mo
475.013 107.428 li
469.013 107.428 mo
475.013 113.428 li
@
grestore
gsave
478.351 105.952 mo
485.351 105.952 li
485.351 98.952 li
478.351 98.952 li
478.351 105.952 li
clp
478.851 105.452 mo
484.851 99.4519 li
478.851 99.4519 mo
484.851 105.452 li
f
1 lw
0 lc
478.851 105.452 mo
484.851 99.4519 li
478.851 99.4519 mo
484.851 105.452 li
@
grestore
gsave
488.189 103.08 mo
495.189 103.08 li
495.189 96.0803 li
488.189 96.0803 li
488.189 103.08 li
clp
488.689 102.58 mo
494.689 96.5804 li
488.689 96.5804 mo
494.689 102.58 li
f
1 lw
0 lc
488.689 102.58 mo
494.689 96.5804 li
488.689 96.5804 mo
494.689 102.58 li
@
grestore
gsave
498.027 98.6135 mo
505.027 98.6135 li
505.027 91.6136 li
498.027 91.6136 li
498.027 98.6135 li
clp
498.527 98.1135 mo
504.527 92.1135 li
498.527 92.1135 mo
504.527 98.1135 li
f
1 lw
0 lc
498.527 98.1135 mo
504.527 92.1135 li
498.527 92.1135 mo
504.527 98.1135 li
@
grestore
gsave
507.865 96.6991 mo
514.865 96.6991 li
514.865 89.6991 li
507.865 89.6991 li
507.865 96.6991 li
clp
508.365 96.1992 mo
514.365 90.1992 li
508.365 90.1992 mo
514.365 96.1992 li
f
1 lw
0 lc
508.365 96.1992 mo
514.365 90.1992 li
508.365 90.1992 mo
514.365 96.1992 li
@
grestore
gsave
517.703 92.8705 mo
524.703 92.8705 li
524.703 85.8706 li
517.703 85.8706 li
517.703 92.8705 li
clp
518.203 92.3704 mo
524.203 86.3704 li
518.203 86.3704 mo
524.203 92.3704 li
f
1 lw
0 lc
518.203 92.3704 mo
524.203 86.3704 li
518.203 86.3704 mo
524.203 92.3704 li
@
grestore
gsave
527.541 89.3607 mo
534.541 89.3607 li
534.541 82.3607 li
527.541 82.3607 li
527.541 89.3607 li
clp
528.041 88.8608 mo
534.041 82.8608 li
528.041 82.8608 mo
534.041 88.8608 li
f
1 lw
0 lc
528.041 88.8608 mo
534.041 82.8608 li
528.041 82.8608 mo
534.041 88.8608 li
@
grestore
gsave
537.379 88.0847 mo
544.379 88.0847 li
544.379 81.0844 li
537.379 81.0844 li
537.379 88.0847 li
clp
537.879 87.5845 mo
543.879 81.5845 li
537.879 81.5845 mo
543.879 87.5845 li
f
1 lw
0 lc
537.879 87.5845 mo
543.879 81.5845 li
537.879 81.5845 mo
543.879 87.5845 li
@
grestore
gsave
547.217 85.213 mo
554.217 85.213 li
554.217 78.2131 li
547.217 78.2131 li
547.217 85.213 li
clp
547.717 84.713 mo
553.717 78.713 li
547.717 78.713 mo
553.717 84.713 li
f
1 lw
0 lc
547.717 84.713 mo
553.717 78.713 li
547.717 78.713 mo
553.717 84.713 li
@
grestore
gsave
557.055 80.1081 mo
564.055 80.1081 li
564.055 73.1082 li
557.055 73.1082 li
557.055 80.1081 li
clp
557.555 79.608 mo
563.555 73.608 li
557.555 73.608 mo
563.555 79.608 li
f
1 lw
0 lc
557.555 79.608 mo
563.555 73.608 li
557.555 73.608 mo
563.555 79.608 li
@
grestore
gsave
566.893 76.2792 mo
573.893 76.2792 li
573.893 69.2793 li
566.893 69.2793 li
566.893 76.2792 li
clp
567.393 75.7793 mo
573.393 69.7793 li
567.393 69.7793 mo
573.393 75.7793 li
f
1 lw
0 lc
567.393 75.7793 mo
573.393 69.7793 li
567.393 69.7793 mo
573.393 75.7793 li
@
grestore
gsave
576.731 73.727 mo
583.731 73.727 li
583.731 66.7267 li
576.731 66.7267 li
576.731 73.727 li
clp
577.231 73.2268 mo
583.231 67.2268 li
577.231 67.2268 mo
583.231 73.2268 li
f
1 lw
0 lc
577.231 73.2268 mo
583.231 67.2268 li
577.231 67.2268 mo
583.231 73.2268 li
@
grestore
gsave
586.569 70.8553 mo
593.569 70.8553 li
593.569 63.8553 li
586.569 63.8553 li
586.569 70.8553 li
clp
587.069 70.3553 mo
593.069 64.3553 li
587.069 64.3553 mo
593.069 70.3553 li
f
1 lw
0 lc
587.069 70.3553 mo
593.069 64.3553 li
587.069 64.3553 mo
593.069 70.3553 li
@
grestore
gsave
596.407 70.2171 mo
603.407 70.2171 li
603.407 63.2172 li
596.407 63.2172 li
596.407 70.2171 li
clp
596.907 69.7172 mo
602.907 63.7172 li
596.907 63.7172 mo
602.907 69.7172 li
f
1 lw
0 lc
596.907 69.7172 mo
602.907 63.7172 li
596.907 63.7172 mo
602.907 69.7172 li
@
grestore
gsave
606.245 70.8553 mo
613.245 70.8553 li
613.245 63.8553 li
606.245 63.8553 li
606.245 70.8553 li
clp
606.745 70.3553 mo
612.745 64.3553 li
606.745 64.3553 mo
612.745 70.3553 li
f
1 lw
0 lc
606.745 70.3553 mo
612.745 64.3553 li
606.745 64.3553 mo
612.745 70.3553 li
@
grestore
gsave
616.083 70.5362 mo
623.083 70.5362 li
623.083 63.5363 li
616.083 63.5363 li
616.083 70.5362 li
clp
616.583 70.0363 mo
622.583 64.0363 li
616.583 64.0363 mo
622.583 70.0363 li
f
1 lw
0 lc
616.583 70.0363 mo
622.583 64.0363 li
616.583 64.0363 mo
622.583 70.0363 li
@
grestore
gsave
625.921 69.579 mo
632.921 69.579 li
632.921 62.579 li
625.921 62.579 li
625.921 69.579 li
clp
626.421 69.0791 mo
632.421 63.0791 li
626.421 63.0791 mo
632.421 69.0791 li
f
1 lw
0 lc
626.421 69.0791 mo
632.421 63.0791 li
626.421 63.0791 mo
632.421 69.0791 li
@
grestore
gsave
635.759 67.0267 mo
642.759 67.0267 li
642.759 60.0268 li
635.759 60.0268 li
635.759 67.0267 li
clp
636.259 66.5266 mo
642.259 60.5266 li
636.259 60.5266 mo
642.259 66.5266 li
f
1 lw
0 lc
636.259 66.5266 mo
642.259 60.5266 li
636.259 60.5266 mo
642.259 66.5266 li
@
grestore
gsave
645.597 65.7504 mo
652.597 65.7504 li
652.597 58.7505 li
645.597 58.7505 li
645.597 65.7504 li
clp
646.097 65.2504 mo
652.097 59.2504 li
646.097 59.2504 mo
652.097 65.2504 li
f
1 lw
0 lc
646.097 65.2504 mo
652.097 59.2504 li
646.097 59.2504 mo
652.097 65.2504 li
@
grestore
gsave
655.435 63.836 mo
662.435 63.836 li
662.435 56.836 li
655.435 56.836 li
655.435 63.836 li
clp
655.935 63.336 mo
661.935 57.336 li
655.935 57.336 mo
661.935 63.336 li
f
1 lw
0 lc
655.935 63.336 mo
661.935 57.336 li
655.935 57.336 mo
661.935 63.336 li
@
grestore
gsave
665.273 62.5597 mo
672.273 62.5597 li
672.273 55.5597 li
665.273 55.5597 li
665.273 62.5597 li
clp
665.773 62.0598 mo
671.773 56.0598 li
665.773 56.0598 mo
671.773 62.0598 li
f
1 lw
0 lc
665.773 62.0598 mo
671.773 56.0598 li
665.773 56.0598 mo
671.773 62.0598 li
@
grestore
gsave
675.111 64.7932 mo
682.111 64.7932 li
682.111 57.7932 li
675.111 57.7932 li
675.111 64.7932 li
clp
675.611 64.2932 mo
681.611 58.2932 li
675.611 58.2932 mo
681.611 64.2932 li
f
1 lw
0 lc
675.611 64.2932 mo
681.611 58.2932 li
675.611 58.2932 mo
681.611 64.2932 li
@
grestore
gsave
684.949 63.836 mo
691.949 63.836 li
691.949 56.836 li
684.949 56.836 li
684.949 63.836 li
clp
685.449 63.336 mo
691.449 57.336 li
685.449 57.336 mo
691.449 63.336 li
f
1 lw
0 lc
685.449 63.336 mo
691.449 57.336 li
685.449 57.336 mo
691.449 63.336 li
@
grestore
gsave
694.787 62.8787 mo
701.787 62.8787 li
701.787 55.8788 li
694.787 55.8788 li
694.787 62.8787 li
clp
695.287 62.3788 mo
701.287 56.3788 li
695.287 56.3788 mo
701.287 62.3788 li
f
1 lw
0 lc
695.287 62.3788 mo
701.287 56.3788 li
695.287 56.3788 mo
701.287 62.3788 li
@
grestore
gsave
704.625 63.1978 mo
711.625 63.1978 li
711.625 56.1979 li
704.625 56.1979 li
704.625 63.1978 li
clp
705.125 62.6979 mo
711.125 56.6979 li
705.125 56.6979 mo
711.125 62.6979 li
f
1 lw
0 lc
705.125 62.6979 mo
711.125 56.6979 li
705.125 56.6979 mo
711.125 62.6979 li
@
grestore
gsave
714.463 61.6024 mo
721.463 61.6024 li
721.463 54.6025 li
714.463 54.6025 li
714.463 61.6024 li
clp
714.963 61.1026 mo
720.963 55.1026 li
714.963 55.1026 mo
720.963 61.1026 li
f
1 lw
0 lc
714.963 61.1026 mo
720.963 55.1026 li
714.963 55.1026 mo
720.963 61.1026 li
@
grestore
gsave
724.301 64.155 mo
731.301 64.155 li
731.301 57.1551 li
724.301 57.1551 li
724.301 64.155 li
clp
724.801 63.6551 mo
730.801 57.6551 li
724.801 57.6551 mo
730.801 63.6551 li
f
1 lw
0 lc
724.801 63.6551 mo
730.801 57.6551 li
724.801 57.6551 mo
730.801 63.6551 li
@
grestore
gsave
734.139 66.0695 mo
741.139 66.0695 li
741.139 59.0695 li
734.139 59.0695 li
734.139 66.0695 li
clp
734.639 65.5695 mo
740.639 59.5695 li
734.639 59.5695 mo
740.639 65.5695 li
f
1 lw
0 lc
734.639 65.5695 mo
740.639 59.5695 li
734.639 59.5695 mo
740.639 65.5695 li
@
grestore
gsave
743.977 64.155 mo
750.977 64.155 li
750.977 57.1551 li
743.977 57.1551 li
743.977 64.155 li
clp
744.477 63.6551 mo
750.477 57.6551 li
744.477 57.6551 mo
750.477 63.6551 li
f
1 lw
0 lc
744.477 63.6551 mo
750.477 57.6551 li
744.477 57.6551 mo
750.477 63.6551 li
@
grestore
gsave
753.815 68.6221 mo
760.815 68.6221 li
760.815 61.6218 li
753.815 61.6218 li
753.815 68.6221 li
clp
754.315 68.1219 mo
760.315 62.1219 li
754.315 62.1219 mo
760.315 68.1219 li
f
1 lw
0 lc
754.315 68.1219 mo
760.315 62.1219 li
754.315 62.1219 mo
760.315 68.1219 li
@
grestore
gsave
763.653 66.3886 mo
770.653 66.3886 li
770.653 59.3886 li
763.653 59.3886 li
763.653 66.3886 li
clp
764.153 65.8885 mo
770.153 59.8885 li
764.153 59.8885 mo
770.153 65.8885 li
f
1 lw
0 lc
764.153 65.8885 mo
770.153 59.8885 li
764.153 59.8885 mo
770.153 65.8885 li
@
grestore
gsave
773.491 67.6649 mo
780.491 67.6649 li
780.491 60.6649 li
773.491 60.6649 li
773.491 67.6649 li
clp
773.991 67.1648 mo
779.991 61.1648 li
773.991 61.1648 mo
779.991 67.1648 li
f
1 lw
0 lc
773.991 67.1648 mo
779.991 61.1648 li
773.991 61.1648 mo
779.991 67.1648 li
@
grestore
gsave
783.329 63.1978 mo
790.329 63.1978 li
790.329 56.1979 li
783.329 56.1979 li
783.329 63.1978 li
clp
783.829 62.6979 mo
789.829 56.6979 li
783.829 56.6979 mo
789.829 62.6979 li
f
1 lw
0 lc
783.829 62.6979 mo
789.829 56.6979 li
783.829 56.6979 mo
789.829 62.6979 li
@
grestore
gsave
793.167 59.6883 mo
800.167 59.6883 li
800.167 52.6884 li
793.167 52.6884 li
793.167 59.6883 li
clp
793.667 59.1883 mo
799.667 53.1883 li
793.667 53.1883 mo
799.667 59.1883 li
f
1 lw
0 lc
793.667 59.1883 mo
799.667 53.1883 li
793.667 53.1883 mo
799.667 59.1883 li
@
grestore
gsave
803.005 60.6455 mo
810.005 60.6455 li
810.005 53.6456 li
803.005 53.6456 li
803.005 60.6455 li
clp
803.505 60.1454 mo
809.505 54.1454 li
803.505 54.1454 mo
809.505 60.1454 li
f
1 lw
0 lc
803.505 60.1454 mo
809.505 54.1454 li
803.505 54.1454 mo
809.505 60.1454 li
@
grestore
gsave
812.843 60.6455 mo
819.843 60.6455 li
819.843 53.6456 li
812.843 53.6456 li
812.843 60.6455 li
clp
813.343 60.1454 mo
819.343 54.1454 li
813.343 54.1454 mo
819.343 60.1454 li
f
1 lw
0 lc
813.343 60.1454 mo
819.343 54.1454 li
813.343 54.1454 mo
819.343 60.1454 li
@
grestore
gsave
822.681 60.0074 mo
829.681 60.0074 li
829.681 53.0075 li
822.681 53.0075 li
822.681 60.0074 li
clp
823.181 59.5073 mo
829.181 53.5073 li
823.181 53.5073 mo
829.181 59.5073 li
f
1 lw
0 lc
823.181 59.5073 mo
829.181 53.5073 li
823.181 53.5073 mo
829.181 59.5073 li
@
grestore
gsave
832.519 60.0074 mo
839.519 60.0074 li
839.519 53.0075 li
832.519 53.0075 li
832.519 60.0074 li
clp
833.019 59.5073 mo
839.019 53.5073 li
833.019 53.5073 mo
839.019 59.5073 li
f
1 lw
0 lc
833.019 59.5073 mo
839.019 53.5073 li
833.019 53.5073 mo
839.019 59.5073 li
@
grestore
gsave
842.357 59.6883 mo
849.357 59.6883 li
849.357 52.6884 li
842.357 52.6884 li
842.357 59.6883 li
clp
842.857 59.1883 mo
848.857 53.1883 li
842.857 53.1883 mo
848.857 59.1883 li
f
1 lw
0 lc
842.857 59.1883 mo
848.857 53.1883 li
842.857 53.1883 mo
848.857 59.1883 li
@
grestore
gsave
852.195 59.3692 mo
859.195 59.3692 li
859.195 52.3693 li
852.195 52.3693 li
852.195 59.3692 li
clp
852.695 58.8693 mo
858.695 52.8693 li
852.695 52.8693 mo
858.695 58.8693 li
f
1 lw
0 lc
852.695 58.8693 mo
858.695 52.8693 li
852.695 52.8693 mo
858.695 58.8693 li
@
grestore
gsave
862.033 59.3692 mo
869.033 59.3692 li
869.033 52.3693 li
862.033 52.3693 li
862.033 59.3692 li
clp
862.533 58.8693 mo
868.533 52.8693 li
862.533 52.8693 mo
868.533 58.8693 li
f
1 lw
0 lc
862.533 58.8693 mo
868.533 52.8693 li
862.533 52.8693 mo
868.533 58.8693 li
@
grestore
gsave
871.871 59.0502 mo
878.871 59.0502 li
878.871 52.0502 li
871.871 52.0502 li
871.871 59.0502 li
clp
872.371 58.5502 mo
878.371 52.5502 li
872.371 52.5502 mo
878.371 58.5502 li
f
1 lw
0 lc
872.371 58.5502 mo
878.371 52.5502 li
872.371 52.5502 mo
878.371 58.5502 li
@
grestore
gsave
881.709 58.412 mo
888.709 58.412 li
888.709 51.4121 li
881.709 51.4121 li
881.709 58.412 li
clp
882.209 57.9121 mo
888.209 51.9121 li
882.209 51.9121 mo
888.209 57.9121 li
f
1 lw
0 lc
882.209 57.9121 mo
888.209 51.9121 li
882.209 51.9121 mo
888.209 57.9121 li
@
grestore
gsave
891.547 58.412 mo
898.547 58.412 li
898.547 51.4121 li
891.547 51.4121 li
891.547 58.412 li
clp
892.047 57.9121 mo
898.047 51.9121 li
892.047 51.9121 mo
898.047 57.9121 li
f
1 lw
0 lc
892.047 57.9121 mo
898.047 51.9121 li
892.047 51.9121 mo
898.047 57.9121 li
@
grestore
gsave
901.385 58.7311 mo
908.385 58.7311 li
908.385 51.7311 li
901.385 51.7311 li
901.385 58.7311 li
clp
901.885 58.2311 mo
907.885 52.2311 li
901.885 52.2311 mo
907.885 58.2311 li
f
1 lw
0 lc
901.885 58.2311 mo
907.885 52.2311 li
901.885 52.2311 mo
907.885 58.2311 li
@
grestore
gsave
911.223 58.0929 mo
918.223 58.0929 li
918.223 51.093 li
911.223 51.093 li
911.223 58.0929 li
clp
911.723 57.593 mo
917.723 51.593 li
911.723 51.593 mo
917.723 57.593 li
f
1 lw
0 lc
911.723 57.593 mo
917.723 51.593 li
911.723 51.593 mo
917.723 57.593 li
@
grestore
gsave
921.061 57.7739 mo
928.061 57.7739 li
928.061 50.7739 li
921.061 50.7739 li
921.061 57.7739 li
clp
921.561 57.274 mo
927.561 51.274 li
921.561 51.274 mo
927.561 57.274 li
f
1 lw
0 lc
921.561 57.274 mo
927.561 51.274 li
921.561 51.274 mo
927.561 57.274 li
@
grestore
gsave
930.899 58.412 mo
937.899 58.412 li
937.899 51.4121 li
930.899 51.4121 li
930.899 58.412 li
clp
931.399 57.9121 mo
937.399 51.9121 li
931.399 51.9121 mo
937.399 57.9121 li
f
1 lw
0 lc
931.399 57.9121 mo
937.399 51.9121 li
931.399 51.9121 mo
937.399 57.9121 li
@
grestore
gsave
940.737 57.4548 mo
947.737 57.4548 li
947.737 50.4548 li
940.737 50.4548 li
940.737 57.4548 li
clp
941.237 56.955 mo
947.237 50.955 li
941.237 50.955 mo
947.237 56.955 li
f
1 lw
0 lc
941.237 56.955 mo
947.237 50.955 li
941.237 50.955 mo
947.237 56.955 li
@
grestore
gsave
950.575 56.817 mo
957.575 56.817 li
957.575 49.8167 li
950.575 49.8167 li
950.575 56.817 li
clp
951.075 56.3168 mo
957.075 50.3168 li
951.075 50.3168 mo
957.075 56.3168 li
f
1 lw
0 lc
951.075 56.3168 mo
957.075 50.3168 li
951.075 50.3168 mo
957.075 56.3168 li
@
grestore
gsave
960.414 57.1357 mo
967.413 57.1357 li
967.413 50.1358 li
960.414 50.1358 li
960.414 57.1357 li
clp
960.913 56.6359 mo
966.913 50.6359 li
960.913 50.6359 mo
966.913 56.6359 li
f
1 lw
0 lc
960.913 56.6359 mo
966.913 50.6359 li
960.913 50.6359 mo
966.913 56.6359 li
@
grestore
gsave
970.252 56.817 mo
977.252 56.817 li
977.252 49.8167 li
970.252 49.8167 li
970.252 56.817 li
clp
970.751 56.3168 mo
976.751 50.3168 li
970.751 50.3168 mo
976.751 56.3168 li
f
1 lw
0 lc
970.751 56.3168 mo
976.751 50.3168 li
970.751 50.3168 mo
976.751 56.3168 li
@
grestore
gsave
980.089 56.817 mo
987.09 56.817 li
987.09 49.8167 li
980.089 49.8167 li
980.089 56.817 li
clp
980.589 56.3168 mo
986.589 50.3168 li
980.589 50.3168 mo
986.589 56.3168 li
f
1 lw
0 lc
980.589 56.3168 mo
986.589 50.3168 li
980.589 50.3168 mo
986.589 56.3168 li
@
grestore
gsave
989.927 57.1357 mo
996.927 57.1357 li
996.927 50.1358 li
989.927 50.1358 li
989.927 57.1357 li
clp
990.427 56.6359 mo
996.427 50.6359 li
990.427 50.6359 mo
996.427 56.6359 li
f
1 lw
0 lc
990.427 56.6359 mo
996.427 50.6359 li
990.427 50.6359 mo
996.427 56.6359 li
@
grestore
gsave
999.765 56.817 mo
1006.77 56.817 li
1006.77 49.8167 li
999.765 49.8167 li
999.765 56.817 li
clp
1000.27 56.3168 mo
1006.27 50.3168 li
1000.27 50.3168 mo
1006.27 56.3168 li
f
1 lw
0 lc
1000.27 56.3168 mo
1006.27 50.3168 li
1000.27 50.3168 mo
1006.27 56.3168 li
@
grestore
gsave
1009.6 57.1357 mo
1016.6 57.1357 li
1016.6 50.1358 li
1009.6 50.1358 li
1009.6 57.1357 li
clp
1010.1 56.6359 mo
1016.1 50.6359 li
1010.1 50.6359 mo
1016.1 56.6359 li
f
1 lw
0 lc
1010.1 56.6359 mo
1016.1 50.6359 li
1010.1 50.6359 mo
1016.1 56.6359 li
@
grestore
gsave
1019.44 57.1357 mo
1026.44 57.1357 li
1026.44 50.1358 li
1019.44 50.1358 li
1019.44 57.1357 li
clp
1019.94 56.6359 mo
1025.94 50.6359 li
1019.94 50.6359 mo
1025.94 56.6359 li
f
1 lw
0 lc
1019.94 56.6359 mo
1025.94 50.6359 li
1019.94 50.6359 mo
1025.94 56.6359 li
@
grestore
gsave
1029.28 57.4548 mo
1036.28 57.4548 li
1036.28 50.4548 li
1029.28 50.4548 li
1029.28 57.4548 li
clp
1029.78 56.9549 mo
1035.78 50.9549 li
1029.78 50.9549 mo
1035.78 56.9549 li
f
1 lw
0 lc
1029.78 56.9549 mo
1035.78 50.9549 li
1029.78 50.9549 mo
1035.78 56.9549 li
@
grestore
gsave
1039.12 57.1357 mo
1046.12 57.1357 li
1046.12 50.1358 li
1039.12 50.1358 li
1039.12 57.1357 li
clp
1039.62 56.6359 mo
1045.62 50.6359 li
1039.62 50.6359 mo
1045.62 56.6359 li
f
1 lw
0 lc
1039.62 56.6359 mo
1045.62 50.6359 li
1039.62 50.6359 mo
1045.62 56.6359 li
@
grestore
gsave
1048.96 57.4548 mo
1055.96 57.4548 li
1055.96 50.4548 li
1048.96 50.4548 li
1048.96 57.4548 li
clp
1049.46 56.9549 mo
1055.46 50.9549 li
1049.46 50.9549 mo
1055.46 56.9549 li
f
1 lw
0 lc
1049.46 56.9549 mo
1055.46 50.9549 li
1049.46 50.9549 mo
1055.46 56.9549 li
@
grestore
gsave
1058.79 57.1357 mo
1065.79 57.1357 li
1065.79 50.1358 li
1058.79 50.1358 li
1058.79 57.1357 li
clp
1059.29 56.6359 mo
1065.29 50.6359 li
1059.29 50.6359 mo
1065.29 56.6359 li
f
1 lw
0 lc
1059.29 56.6359 mo
1065.29 50.6359 li
1059.29 50.6359 mo
1065.29 56.6359 li
@
grestore
gsave
1068.63 56.817 mo
1075.63 56.817 li
1075.63 49.8167 li
1068.63 49.8167 li
1068.63 56.817 li
clp
1069.13 56.3168 mo
1075.13 50.3168 li
1069.13 50.3168 mo
1075.13 56.3168 li
f
1 lw
0 lc
1069.13 56.3168 mo
1075.13 50.3168 li
1069.13 50.3168 mo
1075.13 56.3168 li
@
grestore
gsave
1078.47 57.7739 mo
1085.47 57.7739 li
1085.47 50.7739 li
1078.47 50.7739 li
1078.47 57.7739 li
clp
1078.97 57.274 mo
1084.97 51.274 li
1078.97 51.274 mo
1084.97 57.274 li
f
1 lw
0 lc
1078.97 57.274 mo
1084.97 51.274 li
1078.97 51.274 mo
1084.97 57.274 li
@
grestore
gsave
1088.31 58.0929 mo
1095.31 58.0929 li
1095.31 51.093 li
1088.31 51.093 li
1088.31 58.0929 li
clp
1088.81 57.593 mo
1094.81 51.593 li
1088.81 51.593 mo
1094.81 57.593 li
f
1 lw
0 lc
1088.81 57.593 mo
1094.81 51.593 li
1088.81 51.593 mo
1094.81 57.593 li
@
grestore
gsave
1098.15 58.412 mo
1105.15 58.412 li
1105.15 51.4121 li
1098.15 51.4121 li
1098.15 58.412 li
clp
1098.65 57.912 mo
1104.65 51.912 li
1098.65 51.912 mo
1104.65 57.912 li
f
1 lw
0 lc
1098.65 57.912 mo
1104.65 51.912 li
1098.65 51.912 mo
1104.65 57.912 li
@
grestore
gsave
1107.98 58.0929 mo
1114.98 58.0929 li
1114.98 51.093 li
1107.98 51.093 li
1107.98 58.0929 li
clp
1108.48 57.593 mo
1114.48 51.593 li
1108.48 51.593 mo
1114.48 57.593 li
f
1 lw
0 lc
1108.48 57.593 mo
1114.48 51.593 li
1108.48 51.593 mo
1114.48 57.593 li
@
grestore
137.52 503.193 mo
147.358 454.483 li
157.196 410.239 li
167.034 406.198 li
176.872 401.306 li
186.71 394.286 li
196.548 360.891 li
206.386 338.557 li
216.224 329.623 li
226.062 308.353 li
235.9 283.253 li
245.738 266.237 li
255.576 254.538 li
265.414 245.604 li
275.253 239.435 li
285.091 232.203 li
294.929 229.651 li
304.767 225.184 li
314.605 220.717 li
324.443 215.612 li
334.281 204.339 li
344.119 190.938 li
353.957 179.452 li
363.795 164.775 li
373.633 156.48 li
383.471 145.844 li
393.309 136.485 li
403.147 129.678 li
412.985 119.894 li
422.823 109.259 li
432.661 103.516 li
442.499 96.0707 li
452.337 91.1785 li
462.175 89.6895 li
472.013 83.3083 li
481.851 79.905 li
491.689 76.0763 li
501.527 76.0763 li
511.365 73.5238 li
521.203 67.7807 li
531.041 64.3774 li
540.879 62.0376 li
550.717 59.2724 li
560.555 56.5072 li
570.393 53.742 li
580.231 52.4658 li
590.069 50.3387 li
599.907 49.9133 li
609.745 49.7006 li
619.583 47.7862 li
629.421 44.8083 li
639.259 44.1702 li
649.097 45.4464 li
658.935 45.2337 li
668.773 44.8083 li
678.611 43.9575 li
688.449 43.3193 li
698.287 42.4685 li
708.125 41.8304 li
717.963 40.9796 li
727.801 40.5541 li
737.639 40.1287 li
747.477 39.916 li
757.315 39.916 li
767.153 40.1287 li
776.991 39.2779 li
786.829 39.4906 li
796.667 37.1508 li
806.505 37.3635 li
816.343 37.3635 li
826.181 36.9381 li
836.019 37.1508 li
845.857 37.1508 li
855.695 36.9381 li
865.534 36.7254 li
875.372 36.7254 li
885.21 36.7254 li
895.048 37.1508 li
904.886 37.1508 li
914.724 36.9381 li
924.562 36.9381 li
934.4 36.7254 li
944.238 36.3 li
954.076 36.0873 li
963.914 35.6619 li
973.752 35.8746 li
983.59 35.6619 li
993.428 35.4492 li
1003.27 35.4492 li
1013.1 35.6619 li
1022.94 35.4492 li
1032.78 35.4492 li
1042.62 35.2365 li
1052.46 35.2365 li
1062.29 35.4492 li
1072.13 35.4492 li
1081.97 35.4492 li
1091.81 35.2365 li
1101.65 35.2365 li
1111.48 35.2365 li
1 /0 /CSD get_res sepcs
1 sep
@
137.52 520.741 mo
147.358 482.135 li
157.196 441.295 li
167.034 416.727 li
176.872 403.646 li
186.71 388.331 li
196.548 347.81 li
206.386 328.028 li
216.224 318.456 li
226.062 305.375 li
235.9 277.616 li
245.738 260.068 li
255.576 249.858 li
265.414 238.053 li
275.253 231.034 li
285.091 224.014 li
294.929 221.781 li
304.767 216.676 li
314.605 212.528 li
324.443 206.785 li
334.281 195.618 li
344.119 185.089 li
353.957 175.198 li
363.795 170.093 li
373.633 159.883 li
383.471 150.949 li
393.309 141.696 li
403.147 132.444 li
412.985 124.148 li
422.823 118.724 li
432.661 109.471 li
442.499 103.409 li
452.337 101.176 li
462.175 99.5804 li
472.013 93.8373 li
481.851 90.0086 li
491.689 87.137 li
501.527 86.1799 li
511.365 84.5845 li
521.203 82.3511 li
531.041 77.5652 li
540.879 77.8843 li
550.717 74.6937 li
560.555 74.3746 li
570.393 69.9078 li
580.231 69.2697 li
590.069 67.6743 li
599.907 67.0362 li
609.745 66.3981 li
619.583 65.4409 li
629.421 64.4837 li
639.259 63.2075 li
649.097 62.5693 li
658.935 61.6122 li
668.773 61.6122 li
678.611 59.0597 li
688.449 57.4644 li
698.287 57.4644 li
708.125 57.4644 li
717.963 57.4644 li
727.801 56.5072 li
737.639 54.2737 li
747.477 54.9119 li
757.315 54.9119 li
767.153 55.8691 li
776.991 57.1453 li
786.829 58.4216 li
796.667 52.0403 li
806.505 53.9547 li
816.343 54.2737 li
826.181 53.9547 li
836.019 53.9547 li
845.857 54.2737 li
855.695 54.5928 li
865.534 54.2737 li
875.372 54.5928 li
885.21 54.5928 li
895.048 54.5928 li
904.886 54.2737 li
914.724 54.2737 li
924.562 54.2737 li
934.4 54.2737 li
944.238 53.9547 li
954.076 53.6356 li
963.914 53.6356 li
973.752 53.6356 li
983.59 53.6356 li
993.428 53.3166 li
1003.27 53.3166 li
1013.1 53.3166 li
1022.94 53.3166 li
1032.78 53.3166 li
1042.62 53.6356 li
1052.46 53.6356 li
1062.29 53.6356 li
1072.13 53.9547 li
1081.97 53.6356 li
1091.81 53.6356 li
1101.65 53.6356 li
1111.48 53.3166 li
@
gsave
134.02 524.241 mo
141.02 524.241 li
141.02 517.241 li
134.02 517.241 li
134.02 524.241 li
clp
134.52 523.741 mo
140.52 517.741 li
134.52 517.741 mo
140.52 523.741 li
f
1 lw
0 lc
134.52 523.741 mo
140.52 517.741 li
134.52 517.741 mo
140.52 523.741 li
@
grestore
gsave
143.858 485.634 mo
150.858 485.634 li
150.858 478.634 li
143.858 478.634 li
143.858 485.634 li
clp
144.358 485.135 mo
150.358 479.135 li
144.358 479.135 mo
150.358 485.135 li
f
1 lw
0 lc
144.358 485.135 mo
150.358 479.135 li
144.358 479.135 mo
150.358 485.135 li
@
grestore
gsave
153.696 444.795 mo
160.696 444.795 li
160.696 437.795 li
153.696 437.795 li
153.696 444.795 li
clp
154.196 444.295 mo
160.196 438.295 li
154.196 438.295 mo
160.196 444.295 li
f
1 lw
0 lc
154.196 444.295 mo
160.196 438.295 li
154.196 438.295 mo
160.196 444.295 li
@
grestore
gsave
163.534 420.227 mo
170.534 420.227 li
170.534 413.227 li
163.534 413.227 li
163.534 420.227 li
clp
164.034 419.727 mo
170.034 413.727 li
164.034 413.727 mo
170.034 419.727 li
f
1 lw
0 lc
164.034 419.727 mo
170.034 413.727 li
164.034 413.727 mo
170.034 419.727 li
@
grestore
gsave
173.372 407.145 mo
180.372 407.145 li
180.372 400.146 li
173.372 400.146 li
173.372 407.145 li
clp
173.872 406.646 mo
179.872 400.646 li
173.872 400.646 mo
179.872 406.646 li
f
1 lw
0 lc
173.872 406.646 mo
179.872 400.646 li
173.872 400.646 mo
179.872 406.646 li
@
grestore
gsave
183.211 391.831 mo
190.21 391.831 li
190.21 384.831 li
183.211 384.831 li
183.211 391.831 li
clp
183.71 391.331 mo
189.71 385.331 li
183.71 385.331 mo
189.71 391.331 li
f
1 lw
0 lc
183.71 391.331 mo
189.71 385.331 li
183.71 385.331 mo
189.71 391.331 li
@
grestore
gsave
193.048 351.31 mo
200.049 351.31 li
200.049 344.31 li
193.048 344.31 li
193.048 351.31 li
clp
193.548 350.81 mo
199.548 344.81 li
193.548 344.81 mo
199.548 350.81 li
f
1 lw
0 lc
193.548 350.81 mo
199.548 344.81 li
193.548 344.81 mo
199.548 350.81 li
@
grestore
gsave
202.886 331.528 mo
209.886 331.528 li
209.886 324.528 li
202.886 324.528 li
202.886 331.528 li
clp
203.386 331.028 mo
209.386 325.028 li
203.386 325.028 mo
209.386 331.028 li
f
1 lw
0 lc
203.386 331.028 mo
209.386 325.028 li
203.386 325.028 mo
209.386 331.028 li
@
grestore
gsave
212.724 321.956 mo
219.724 321.956 li
219.724 314.956 li
212.724 314.956 li
212.724 321.956 li
clp
213.224 321.456 mo
219.224 315.456 li
213.224 315.456 mo
219.224 321.456 li
f
1 lw
0 lc
213.224 321.456 mo
219.224 315.456 li
213.224 315.456 mo
219.224 321.456 li
@
grestore
gsave
222.562 308.875 mo
229.562 308.875 li
229.562 301.875 li
222.562 301.875 li
222.562 308.875 li
clp
223.062 308.375 mo
229.062 302.375 li
223.062 302.375 mo
229.062 308.375 li
f
1 lw
0 lc
223.062 308.375 mo
229.062 302.375 li
223.062 302.375 mo
229.062 308.375 li
@
grestore
gsave
232.4 281.116 mo
239.4 281.116 li
239.4 274.116 li
232.4 274.116 li
232.4 281.116 li
clp
232.9 280.616 mo
238.9 274.616 li
232.9 274.616 mo
238.9 280.616 li
f
1 lw
0 lc
232.9 280.616 mo
238.9 274.616 li
232.9 274.616 mo
238.9 280.616 li
@
grestore
gsave
242.239 263.568 mo
249.238 263.568 li
249.238 256.568 li
242.239 256.568 li
242.239 263.568 li
clp
242.738 263.068 mo
248.738 257.068 li
242.738 257.068 mo
248.738 263.068 li
f
1 lw
0 lc
242.738 263.068 mo
248.738 257.068 li
242.738 257.068 mo
248.738 263.068 li
@
grestore
gsave
252.077 253.358 mo
259.077 253.358 li
259.077 246.358 li
252.077 246.358 li
252.077 253.358 li
clp
252.576 252.858 mo
258.576 246.858 li
252.576 246.858 mo
258.576 252.858 li
f
1 lw
0 lc
252.576 252.858 mo
258.576 246.858 li
252.576 246.858 mo
258.576 252.858 li
@
grestore
gsave
261.914 241.553 mo
268.915 241.553 li
268.915 234.553 li
261.914 234.553 li
261.914 241.553 li
clp
262.414 241.053 mo
268.414 235.053 li
262.414 235.053 mo
268.414 241.053 li
f
1 lw
0 lc
262.414 241.053 mo
268.414 235.053 li
262.414 235.053 mo
268.414 241.053 li
@
grestore
gsave
271.752 234.534 mo
278.752 234.534 li
278.752 227.533 li
271.752 227.533 li
271.752 234.534 li
clp
272.252 234.034 mo
278.252 228.034 li
272.252 228.034 mo
278.252 234.034 li
f
1 lw
0 lc
272.252 234.034 mo
278.252 228.034 li
272.252 228.034 mo
278.252 234.034 li
@
grestore
gsave
281.59 227.514 mo
288.59 227.514 li
288.59 220.514 li
281.59 220.514 li
281.59 227.514 li
clp
282.09 227.014 mo
288.09 221.014 li
282.09 221.014 mo
288.09 227.014 li
f
1 lw
0 lc
282.09 227.014 mo
288.09 221.014 li
282.09 221.014 mo
288.09 227.014 li
@
grestore
gsave
291.428 225.281 mo
298.428 225.281 li
298.428 218.281 li
291.428 218.281 li
291.428 225.281 li
clp
291.928 224.781 mo
297.928 218.781 li
291.928 218.781 mo
297.928 224.781 li
f
1 lw
0 lc
291.928 224.781 mo
297.928 218.781 li
291.928 218.781 mo
297.928 224.781 li
@
grestore
gsave
301.267 220.176 mo
308.267 220.176 li
308.267 213.176 li
301.267 213.176 li
301.267 220.176 li
clp
301.767 219.676 mo
307.767 213.676 li
301.767 213.676 mo
307.767 219.676 li
f
1 lw
0 lc
301.767 219.676 mo
307.767 213.676 li
301.767 213.676 mo
307.767 219.676 li
@
grestore
gsave
311.105 216.028 mo
318.105 216.028 li
318.105 209.028 li
311.105 209.028 li
311.105 216.028 li
clp
311.605 215.528 mo
317.605 209.528 li
311.605 209.528 mo
317.605 215.528 li
f
1 lw
0 lc
311.605 215.528 mo
317.605 209.528 li
311.605 209.528 mo
317.605 215.528 li
@
grestore
gsave
320.943 210.285 mo
327.943 210.285 li
327.943 203.285 li
320.943 203.285 li
320.943 210.285 li
clp
321.443 209.785 mo
327.443 203.785 li
321.443 203.785 mo
327.443 209.785 li
f
1 lw
0 lc
321.443 209.785 mo
327.443 203.785 li
321.443 203.785 mo
327.443 209.785 li
@
grestore
gsave
330.78 199.118 mo
337.781 199.118 li
337.781 192.118 li
330.78 192.118 li
330.78 199.118 li
clp
331.281 198.618 mo
337.281 192.618 li
331.281 192.618 mo
337.281 198.618 li
f
1 lw
0 lc
331.281 198.618 mo
337.281 192.618 li
331.281 192.618 mo
337.281 198.618 li
@
grestore
gsave
340.618 188.589 mo
347.618 188.589 li
347.618 181.589 li
340.618 181.589 li
340.618 188.589 li
clp
341.119 188.089 mo
347.119 182.089 li
341.119 182.089 mo
347.119 188.089 li
f
1 lw
0 lc
341.119 188.089 mo
347.119 182.089 li
341.119 182.089 mo
347.119 188.089 li
@
grestore
gsave
350.457 178.698 mo
357.456 178.698 li
357.456 171.698 li
350.457 171.698 li
350.457 178.698 li
clp
350.957 178.198 mo
356.957 172.198 li
350.957 172.198 mo
356.957 178.198 li
f
1 lw
0 lc
350.957 178.198 mo
356.957 172.198 li
350.957 172.198 mo
356.957 178.198 li
@
grestore
gsave
360.295 173.593 mo
367.295 173.593 li
367.295 166.593 li
360.295 166.593 li
360.295 173.593 li
clp
360.795 173.093 mo
366.795 167.093 li
360.795 167.093 mo
366.795 173.093 li
f
1 lw
0 lc
360.795 173.093 mo
366.795 167.093 li
360.795 167.093 mo
366.795 173.093 li
@
grestore
gsave
370.133 163.383 mo
377.133 163.383 li
377.133 156.383 li
370.133 156.383 li
370.133 163.383 li
clp
370.633 162.883 mo
376.633 156.883 li
370.633 156.883 mo
376.633 162.883 li
f
1 lw
0 lc
370.633 162.883 mo
376.633 156.883 li
370.633 156.883 mo
376.633 162.883 li
@
grestore
gsave
379.971 154.449 mo
386.971 154.449 li
386.971 147.449 li
379.971 147.449 li
379.971 154.449 li
clp
380.471 153.949 mo
386.471 147.949 li
380.471 147.949 mo
386.471 153.949 li
f
1 lw
0 lc
380.471 153.949 mo
386.471 147.949 li
380.471 147.949 mo
386.471 153.949 li
@
grestore
gsave
389.809 145.197 mo
396.809 145.197 li
396.809 138.196 li
389.809 138.196 li
389.809 145.197 li
clp
390.309 144.696 mo
396.309 138.696 li
390.309 138.696 mo
396.309 144.696 li
f
1 lw
0 lc
390.309 144.696 mo
396.309 138.696 li
390.309 138.696 mo
396.309 144.696 li
@
grestore
gsave
399.646 135.944 mo
406.647 135.944 li
406.647 128.944 li
399.646 128.944 li
399.646 135.944 li
clp
400.147 135.444 mo
406.147 129.444 li
400.147 129.444 mo
406.147 135.444 li
f
1 lw
0 lc
400.147 135.444 mo
406.147 129.444 li
400.147 129.444 mo
406.147 135.444 li
@
grestore
gsave
409.485 127.648 mo
416.484 127.648 li
416.484 120.648 li
409.485 120.648 li
409.485 127.648 li
clp
409.985 127.148 mo
415.985 121.148 li
409.985 121.148 mo
415.985 127.148 li
f
1 lw
0 lc
409.985 127.148 mo
415.985 121.148 li
409.985 121.148 mo
415.985 127.148 li
@
grestore
gsave
419.323 122.224 mo
426.323 122.224 li
426.323 115.224 li
419.323 115.224 li
419.323 122.224 li
clp
419.823 121.724 mo
425.823 115.724 li
419.823 115.724 mo
425.823 121.724 li
f
1 lw
0 lc
419.823 121.724 mo
425.823 115.724 li
419.823 115.724 mo
425.823 121.724 li
@
grestore
gsave
429.161 112.971 mo
436.161 112.971 li
436.161 105.971 li
429.161 105.971 li
429.161 112.971 li
clp
429.661 112.471 mo
435.661 106.471 li
429.661 106.471 mo
435.661 112.471 li
f
1 lw
0 lc
429.661 112.471 mo
435.661 106.471 li
429.661 106.471 mo
435.661 112.471 li
@
grestore
gsave
438.999 106.909 mo
445.999 106.909 li
445.999 99.9092 li
438.999 99.9092 li
438.999 106.909 li
clp
439.499 106.409 mo
445.499 100.409 li
439.499 100.409 mo
445.499 106.409 li
f
1 lw
0 lc
439.499 106.409 mo
445.499 100.409 li
439.499 100.409 mo
445.499 106.409 li
@
grestore
gsave
448.837 104.676 mo
455.837 104.676 li
455.837 97.6757 li
448.837 97.6757 li
448.837 104.676 li
clp
449.337 104.176 mo
455.337 98.1757 li
449.337 98.1757 mo
455.337 104.176 li
f
1 lw
0 lc
449.337 104.176 mo
455.337 98.1757 li
449.337 98.1757 mo
455.337 104.176 li
@
grestore
gsave
458.675 103.08 mo
465.675 103.08 li
465.675 96.0803 li
458.675 96.0803 li
458.675 103.08 li
clp
459.175 102.58 mo
465.175 96.5804 li
459.175 96.5804 mo
465.175 102.58 li
f
1 lw
0 lc
459.175 102.58 mo
465.175 96.5804 li
459.175 96.5804 mo
465.175 102.58 li
@
grestore
gsave
468.513 97.3372 mo
475.513 97.3372 li
475.513 90.3373 li
468.513 90.3373 li
468.513 97.3372 li
clp
469.013 96.8373 mo
475.013 90.8373 li
469.013 90.8373 mo
475.013 96.8373 li
f
1 lw
0 lc
469.013 96.8373 mo
475.013 90.8373 li
469.013 90.8373 mo
475.013 96.8373 li
@
grestore
gsave
478.351 93.5086 mo
485.351 93.5086 li
485.351 86.5087 li
478.351 86.5087 li
478.351 93.5086 li
clp
478.851 93.0085 mo
484.851 87.0085 li
478.851 87.0085 mo
484.851 93.0085 li
f
1 lw
0 lc
478.851 93.0085 mo
484.851 87.0085 li
478.851 87.0085 mo
484.851 93.0085 li
@
grestore
gsave
488.189 90.637 mo
495.189 90.637 li
495.189 83.637 li
488.189 83.637 li
488.189 90.637 li
clp
488.689 90.137 mo
494.689 84.137 li
488.689 84.137 mo
494.689 90.137 li
f
1 lw
0 lc
488.689 90.137 mo
494.689 84.137 li
488.689 84.137 mo
494.689 90.137 li
@
grestore
gsave
498.027 89.6797 mo
505.027 89.6797 li
505.027 82.6798 li
498.027 82.6798 li
498.027 89.6797 li
clp
498.527 89.1799 mo
504.527 83.1799 li
498.527 83.1799 mo
504.527 89.1799 li
f
1 lw
0 lc
498.527 89.1799 mo
504.527 83.1799 li
498.527 83.1799 mo
504.527 89.1799 li
@
grestore
gsave
507.865 88.0847 mo
514.865 88.0847 li
514.865 81.0848 li
507.865 81.0848 li
507.865 88.0847 li
clp
508.365 87.5846 mo
514.365 81.5846 li
508.365 81.5846 mo
514.365 87.5846 li
f
1 lw
0 lc
508.365 87.5846 mo
514.365 81.5846 li
508.365 81.5846 mo
514.365 87.5846 li
@
grestore
gsave
517.703 85.8512 mo
524.703 85.8512 li
524.703 78.8512 li
517.703 78.8512 li
517.703 85.8512 li
clp
518.203 85.3512 mo
524.203 79.3512 li
518.203 79.3512 mo
524.203 85.3512 li
f
1 lw
0 lc
518.203 85.3512 mo
524.203 79.3512 li
518.203 79.3512 mo
524.203 85.3512 li
@
grestore
gsave
527.541 81.0654 mo
534.541 81.0654 li
534.541 74.0654 li
527.541 74.0654 li
527.541 81.0654 li
clp
528.041 80.5653 mo
534.041 74.5653 li
528.041 74.5653 mo
534.041 80.5653 li
f
1 lw
0 lc
528.041 80.5653 mo
534.041 74.5653 li
528.041 74.5653 mo
534.041 80.5653 li
@
grestore
gsave
537.379 81.3845 mo
544.379 81.3845 li
544.379 74.3845 li
537.379 74.3845 li
537.379 81.3845 li
clp
537.879 80.8843 mo
543.879 74.8843 li
537.879 74.8843 mo
543.879 80.8843 li
f
1 lw
0 lc
537.879 80.8843 mo
543.879 74.8843 li
537.879 74.8843 mo
543.879 80.8843 li
@
grestore
gsave
547.217 78.1937 mo
554.217 78.1937 li
554.217 71.1937 li
547.217 71.1937 li
547.217 78.1937 li
clp
547.717 77.6937 mo
553.717 71.6937 li
547.717 71.6937 mo
553.717 77.6937 li
f
1 lw
0 lc
547.717 77.6937 mo
553.717 71.6937 li
547.717 71.6937 mo
553.717 77.6937 li
@
grestore
gsave
557.055 77.8746 mo
564.055 77.8746 li
564.055 70.8747 li
557.055 70.8747 li
557.055 77.8746 li
clp
557.555 77.3747 mo
563.555 71.3747 li
557.555 71.3747 mo
563.555 77.3747 li
f
1 lw
0 lc
557.555 77.3747 mo
563.555 71.3747 li
557.555 71.3747 mo
563.555 77.3747 li
@
grestore
gsave
566.893 73.4079 mo
573.893 73.4079 li
573.893 66.408 li
566.893 66.408 li
566.893 73.4079 li
clp
567.393 72.9078 mo
573.393 66.9078 li
567.393 66.9078 mo
573.393 72.9078 li
f
1 lw
0 lc
567.393 72.9078 mo
573.393 66.9078 li
567.393 66.9078 mo
573.393 72.9078 li
@
grestore
gsave
576.731 72.7697 mo
583.731 72.7697 li
583.731 65.7698 li
576.731 65.7698 li
576.731 72.7697 li
clp
577.231 72.2697 mo
583.231 66.2697 li
577.231 66.2697 mo
583.231 72.2697 li
f
1 lw
0 lc
577.231 72.2697 mo
583.231 66.2697 li
577.231 66.2697 mo
583.231 72.2697 li
@
grestore
gsave
586.569 71.1744 mo
593.569 71.1744 li
593.569 64.1744 li
586.569 64.1744 li
586.569 71.1744 li
clp
587.069 70.6744 mo
593.069 64.6744 li
587.069 64.6744 mo
593.069 70.6744 li
f
1 lw
0 lc
587.069 70.6744 mo
593.069 64.6744 li
587.069 64.6744 mo
593.069 70.6744 li
@
grestore
gsave
596.407 70.5362 mo
603.407 70.5362 li
603.407 63.5363 li
596.407 63.5363 li
596.407 70.5362 li
clp
596.907 70.0363 mo
602.907 64.0363 li
596.907 64.0363 mo
602.907 70.0363 li
f
1 lw
0 lc
596.907 70.0363 mo
602.907 64.0363 li
596.907 64.0363 mo
602.907 70.0363 li
@
grestore
gsave
606.245 69.8981 mo
613.245 69.8981 li
613.245 62.8981 li
606.245 62.8981 li
606.245 69.8981 li
clp
606.745 69.3982 mo
612.745 63.3982 li
606.745 63.3982 mo
612.745 69.3982 li
f
1 lw
0 lc
606.745 69.3982 mo
612.745 63.3982 li
606.745 63.3982 mo
612.745 69.3982 li
@
grestore
gsave
616.083 68.9412 mo
623.083 68.9412 li
623.083 61.9409 li
616.083 61.9409 li
616.083 68.9412 li
clp
616.583 68.441 mo
622.583 62.441 li
616.583 62.441 mo
622.583 68.441 li
f
1 lw
0 lc
616.583 68.441 mo
622.583 62.441 li
616.583 62.441 mo
622.583 68.441 li
@
grestore
gsave
625.921 67.9839 mo
632.921 67.9839 li
632.921 60.984 li
625.921 60.984 li
625.921 67.9839 li
clp
626.421 67.4839 mo
632.421 61.4839 li
626.421 61.4839 mo
632.421 67.4839 li
f
1 lw
0 lc
626.421 67.4839 mo
632.421 61.4839 li
626.421 61.4839 mo
632.421 67.4839 li
@
grestore
gsave
635.759 66.7076 mo
642.759 66.7076 li
642.759 59.7077 li
635.759 59.7077 li
635.759 66.7076 li
clp
636.259 66.2076 mo
642.259 60.2076 li
636.259 60.2076 mo
642.259 66.2076 li
f
1 lw
0 lc
636.259 66.2076 mo
642.259 60.2076 li
636.259 60.2076 mo
642.259 66.2076 li
@
grestore
gsave
645.597 66.0695 mo
652.597 66.0695 li
652.597 59.0695 li
645.597 59.0695 li
645.597 66.0695 li
clp
646.097 65.5695 mo
652.097 59.5695 li
646.097 59.5695 mo
652.097 65.5695 li
f
1 lw
0 lc
646.097 65.5695 mo
652.097 59.5695 li
646.097 59.5695 mo
652.097 65.5695 li
@
grestore
gsave
655.435 65.1123 mo
662.435 65.1123 li
662.435 58.1123 li
655.435 58.1123 li
655.435 65.1123 li
clp
655.935 64.6124 mo
661.935 58.6124 li
655.935 58.6124 mo
661.935 64.6124 li
f
1 lw
0 lc
655.935 64.6124 mo
661.935 58.6124 li
655.935 58.6124 mo
661.935 64.6124 li
@
grestore
gsave
665.273 65.1123 mo
672.273 65.1123 li
672.273 58.1123 li
665.273 58.1123 li
665.273 65.1123 li
clp
665.773 64.6124 mo
671.773 58.6124 li
665.773 58.6124 mo
671.773 64.6124 li
f
1 lw
0 lc
665.773 64.6124 mo
671.773 58.6124 li
665.773 58.6124 mo
671.773 64.6124 li
@
grestore
gsave
675.111 62.56 mo
682.111 62.56 li
682.111 55.5597 li
675.111 55.5597 li
675.111 62.56 li
clp
675.611 62.0599 mo
681.611 56.0599 li
675.611 56.0599 mo
681.611 62.0599 li
f
1 lw
0 lc
675.611 62.0599 mo
681.611 56.0599 li
675.611 56.0599 mo
681.611 62.0599 li
@
grestore
gsave
684.949 60.9646 mo
691.949 60.9646 li
691.949 53.9647 li
684.949 53.9647 li
684.949 60.9646 li
clp
685.449 60.4646 mo
691.449 54.4646 li
685.449 54.4646 mo
691.449 60.4646 li
f
1 lw
0 lc
685.449 60.4646 mo
691.449 54.4646 li
685.449 54.4646 mo
691.449 60.4646 li
@
grestore
gsave
694.787 60.9646 mo
701.787 60.9646 li
701.787 53.9647 li
694.787 53.9647 li
694.787 60.9646 li
clp
695.287 60.4646 mo
701.287 54.4646 li
695.287 54.4646 mo
701.287 60.4646 li
f
1 lw
0 lc
695.287 60.4646 mo
701.287 54.4646 li
695.287 54.4646 mo
701.287 60.4646 li
@
grestore
gsave
704.625 60.9646 mo
711.625 60.9646 li
711.625 53.9647 li
704.625 53.9647 li
704.625 60.9646 li
clp
705.125 60.4646 mo
711.125 54.4646 li
705.125 54.4646 mo
711.125 60.4646 li
f
1 lw
0 lc
705.125 60.4646 mo
711.125 54.4646 li
705.125 54.4646 mo
711.125 60.4646 li
@
grestore
gsave
714.463 60.9646 mo
721.463 60.9646 li
721.463 53.9647 li
714.463 53.9647 li
714.463 60.9646 li
clp
714.963 60.4646 mo
720.963 54.4646 li
714.963 54.4646 mo
720.963 60.4646 li
f
1 lw
0 lc
714.963 60.4646 mo
720.963 54.4646 li
714.963 54.4646 mo
720.963 60.4646 li
@
grestore
gsave
724.301 60.0074 mo
731.301 60.0074 li
731.301 53.0075 li
724.301 53.0075 li
724.301 60.0074 li
clp
724.801 59.5074 mo
730.801 53.5074 li
724.801 53.5074 mo
730.801 59.5074 li
f
1 lw
0 lc
724.801 59.5074 mo
730.801 53.5074 li
724.801 53.5074 mo
730.801 59.5074 li
@
grestore
gsave
734.139 57.7742 mo
741.139 57.7742 li
741.139 50.7739 li
734.139 50.7739 li
734.139 57.7742 li
clp
734.639 57.274 mo
740.639 51.274 li
734.639 51.274 mo
740.639 57.274 li
f
1 lw
0 lc
734.639 57.274 mo
740.639 51.274 li
734.639 51.274 mo
740.639 57.274 li
@
grestore
gsave
743.977 58.412 mo
750.977 58.412 li
750.977 51.4121 li
743.977 51.4121 li
743.977 58.412 li
clp
744.477 57.9122 mo
750.477 51.9122 li
744.477 51.9122 mo
750.477 57.9122 li
f
1 lw
0 lc
744.477 57.9122 mo
750.477 51.9122 li
744.477 51.9122 mo
750.477 57.9122 li
@
grestore
gsave
753.815 58.412 mo
760.815 58.412 li
760.815 51.4121 li
753.815 51.4121 li
753.815 58.412 li
clp
754.315 57.9122 mo
760.315 51.9122 li
754.315 51.9122 mo
760.315 57.9122 li
f
1 lw
0 lc
754.315 57.9122 mo
760.315 51.9122 li
754.315 51.9122 mo
760.315 57.9122 li
@
grestore
gsave
763.653 59.3692 mo
770.653 59.3692 li
770.653 52.3693 li
763.653 52.3693 li
763.653 59.3692 li
clp
764.153 58.8693 mo
770.153 52.8693 li
764.153 52.8693 mo
770.153 58.8693 li
f
1 lw
0 lc
764.153 58.8693 mo
770.153 52.8693 li
764.153 52.8693 mo
770.153 58.8693 li
@
grestore
gsave
773.491 60.6455 mo
780.491 60.6455 li
780.491 53.6456 li
773.491 53.6456 li
773.491 60.6455 li
clp
773.991 60.1456 mo
779.991 54.1456 li
773.991 54.1456 mo
779.991 60.1456 li
f
1 lw
0 lc
773.991 60.1456 mo
779.991 54.1456 li
773.991 54.1456 mo
779.991 60.1456 li
@
grestore
gsave
783.329 61.9219 mo
790.329 61.9219 li
790.329 54.9219 li
783.329 54.9219 li
783.329 61.9219 li
clp
783.829 61.4218 mo
789.829 55.4218 li
783.829 55.4218 mo
789.829 61.4218 li
f
1 lw
0 lc
783.829 61.4218 mo
789.829 55.4218 li
783.829 55.4218 mo
789.829 61.4218 li
@
grestore
gsave
793.167 55.5407 mo
800.167 55.5407 li
800.167 48.5407 li
793.167 48.5407 li
793.167 55.5407 li
clp
793.667 55.0406 mo
799.667 49.0406 li
793.667 49.0406 mo
799.667 55.0406 li
f
1 lw
0 lc
793.667 55.0406 mo
799.667 49.0406 li
793.667 49.0406 mo
799.667 55.0406 li
@
grestore
gsave
803.005 57.4548 mo
810.005 57.4548 li
810.005 50.4548 li
803.005 50.4548 li
803.005 57.4548 li
clp
803.505 56.955 mo
809.505 50.955 li
803.505 50.955 mo
809.505 56.955 li
f
1 lw
0 lc
803.505 56.955 mo
809.505 50.955 li
803.505 50.955 mo
809.505 56.955 li
@
grestore
gsave
812.843 57.7739 mo
819.843 57.7739 li
819.843 50.7739 li
812.843 50.7739 li
812.843 57.7739 li
clp
813.343 57.274 mo
819.343 51.274 li
813.343 51.274 mo
819.343 57.274 li
f
1 lw
0 lc
813.343 57.274 mo
819.343 51.274 li
813.343 51.274 mo
819.343 57.274 li
@
grestore
gsave
822.681 57.4548 mo
829.681 57.4548 li
829.681 50.4548 li
822.681 50.4548 li
822.681 57.4548 li
clp
823.181 56.955 mo
829.181 50.955 li
823.181 50.955 mo
829.181 56.955 li
f
1 lw
0 lc
823.181 56.955 mo
829.181 50.955 li
823.181 50.955 mo
829.181 56.955 li
@
grestore
gsave
832.519 57.4548 mo
839.519 57.4548 li
839.519 50.4548 li
832.519 50.4548 li
832.519 57.4548 li
clp
833.019 56.955 mo
839.019 50.955 li
833.019 50.955 mo
839.019 56.955 li
f
1 lw
0 lc
833.019 56.955 mo
839.019 50.955 li
833.019 50.955 mo
839.019 56.955 li
@
grestore
gsave
842.357 57.7739 mo
849.357 57.7739 li
849.357 50.7739 li
842.357 50.7739 li
842.357 57.7739 li
clp
842.857 57.274 mo
848.857 51.274 li
842.857 51.274 mo
848.857 57.274 li
f
1 lw
0 lc
842.857 57.274 mo
848.857 51.274 li
842.857 51.274 mo
848.857 57.274 li
@
grestore
gsave
852.195 58.0929 mo
859.195 58.0929 li
859.195 51.093 li
852.195 51.093 li
852.195 58.0929 li
clp
852.695 57.593 mo
858.695 51.593 li
852.695 51.593 mo
858.695 57.593 li
f
1 lw
0 lc
852.695 57.593 mo
858.695 51.593 li
852.695 51.593 mo
858.695 57.593 li
@
grestore
gsave
862.033 57.7739 mo
869.033 57.7739 li
869.033 50.7739 li
862.033 50.7739 li
862.033 57.7739 li
clp
862.533 57.274 mo
868.533 51.274 li
862.533 51.274 mo
868.533 57.274 li
f
1 lw
0 lc
862.533 57.274 mo
868.533 51.274 li
862.533 51.274 mo
868.533 57.274 li
@
grestore
gsave
871.871 58.0929 mo
878.871 58.0929 li
878.871 51.093 li
871.871 51.093 li
871.871 58.0929 li
clp
872.371 57.593 mo
878.371 51.593 li
872.371 51.593 mo
878.371 57.593 li
f
1 lw
0 lc
872.371 57.593 mo
878.371 51.593 li
872.371 51.593 mo
878.371 57.593 li
@
grestore
gsave
881.709 58.0929 mo
888.709 58.0929 li
888.709 51.093 li
881.709 51.093 li
881.709 58.0929 li
clp
882.209 57.593 mo
888.209 51.593 li
882.209 51.593 mo
888.209 57.593 li
f
1 lw
0 lc
882.209 57.593 mo
888.209 51.593 li
882.209 51.593 mo
888.209 57.593 li
@
grestore
gsave
891.547 58.0929 mo
898.547 58.0929 li
898.547 51.093 li
891.547 51.093 li
891.547 58.0929 li
clp
892.047 57.593 mo
898.047 51.593 li
892.047 51.593 mo
898.047 57.593 li
f
1 lw
0 lc
892.047 57.593 mo
898.047 51.593 li
892.047 51.593 mo
898.047 57.593 li
@
grestore
gsave
901.385 57.7739 mo
908.385 57.7739 li
908.385 50.7739 li
901.385 50.7739 li
901.385 57.7739 li
clp
901.885 57.274 mo
907.885 51.274 li
901.885 51.274 mo
907.885 57.274 li
f
1 lw
0 lc
901.885 57.274 mo
907.885 51.274 li
901.885 51.274 mo
907.885 57.274 li
@
grestore
gsave
911.223 57.7739 mo
918.223 57.7739 li
918.223 50.7739 li
911.223 50.7739 li
911.223 57.7739 li
clp
911.723 57.274 mo
917.723 51.274 li
911.723 51.274 mo
917.723 57.274 li
f
1 lw
0 lc
911.723 57.274 mo
917.723 51.274 li
911.723 51.274 mo
917.723 57.274 li
@
grestore
gsave
921.061 57.7739 mo
928.061 57.7739 li
928.061 50.7739 li
921.061 50.7739 li
921.061 57.7739 li
clp
921.561 57.274 mo
927.561 51.274 li
921.561 51.274 mo
927.561 57.274 li
f
1 lw
0 lc
921.561 57.274 mo
927.561 51.274 li
921.561 51.274 mo
927.561 57.274 li
@
grestore
gsave
930.899 57.7739 mo
937.899 57.7739 li
937.899 50.7739 li
930.899 50.7739 li
930.899 57.7739 li
clp
931.399 57.274 mo
937.399 51.274 li
931.399 51.274 mo
937.399 57.274 li
f
1 lw
0 lc
931.399 57.274 mo
937.399 51.274 li
931.399 51.274 mo
937.399 57.274 li
@
grestore
gsave
940.737 57.4548 mo
947.737 57.4548 li
947.737 50.4548 li
940.737 50.4548 li
940.737 57.4548 li
clp
941.237 56.955 mo
947.237 50.955 li
941.237 50.955 mo
947.237 56.955 li
f
1 lw
0 lc
941.237 56.955 mo
947.237 50.955 li
941.237 50.955 mo
947.237 56.955 li
@
grestore
gsave
950.575 57.1361 mo
957.575 57.1361 li
957.575 50.1358 li
950.575 50.1358 li
950.575 57.1361 li
clp
951.075 56.6359 mo
957.075 50.6359 li
951.075 50.6359 mo
957.075 56.6359 li
f
1 lw
0 lc
951.075 56.6359 mo
957.075 50.6359 li
951.075 50.6359 mo
957.075 56.6359 li
@
grestore
gsave
960.414 57.1361 mo
967.413 57.1361 li
967.413 50.1358 li
960.414 50.1358 li
960.414 57.1361 li
clp
960.913 56.6359 mo
966.913 50.6359 li
960.913 50.6359 mo
966.913 56.6359 li
f
1 lw
0 lc
960.913 56.6359 mo
966.913 50.6359 li
960.913 50.6359 mo
966.913 56.6359 li
@
grestore
gsave
970.252 57.1361 mo
977.252 57.1361 li
977.252 50.1358 li
970.252 50.1358 li
970.252 57.1361 li
clp
970.751 56.6359 mo
976.751 50.6359 li
970.751 50.6359 mo
976.751 56.6359 li
f
1 lw
0 lc
970.751 56.6359 mo
976.751 50.6359 li
970.751 50.6359 mo
976.751 56.6359 li
@
grestore
gsave
980.089 57.1361 mo
987.09 57.1361 li
987.09 50.1358 li
980.089 50.1358 li
980.089 57.1361 li
clp
980.589 56.6359 mo
986.589 50.6359 li
980.589 50.6359 mo
986.589 56.6359 li
f
1 lw
0 lc
980.589 56.6359 mo
986.589 50.6359 li
980.589 50.6359 mo
986.589 56.6359 li
@
grestore
gsave
989.927 56.817 mo
996.927 56.817 li
996.927 49.817 li
989.927 49.817 li
989.927 56.817 li
clp
990.427 56.3169 mo
996.427 50.3169 li
990.427 50.3169 mo
996.427 56.3169 li
f
1 lw
0 lc
990.427 56.3169 mo
996.427 50.3169 li
990.427 50.3169 mo
996.427 56.3169 li
@
grestore
gsave
999.765 56.817 mo
1006.77 56.817 li
1006.77 49.817 li
999.765 49.817 li
999.765 56.817 li
clp
1000.27 56.3169 mo
1006.27 50.3169 li
1000.27 50.3169 mo
1006.27 56.3169 li
f
1 lw
0 lc
1000.27 56.3169 mo
1006.27 50.3169 li
1000.27 50.3169 mo
1006.27 56.3169 li
@
grestore
gsave
1009.6 56.817 mo
1016.6 56.817 li
1016.6 49.817 li
1009.6 49.817 li
1009.6 56.817 li
clp
1010.1 56.3169 mo
1016.1 50.3169 li
1010.1 50.3169 mo
1016.1 56.3169 li
f
1 lw
0 lc
1010.1 56.3169 mo
1016.1 50.3169 li
1010.1 50.3169 mo
1016.1 56.3169 li
@
grestore
gsave
1019.44 56.817 mo
1026.44 56.817 li
1026.44 49.817 li
1019.44 49.817 li
1019.44 56.817 li
clp
1019.94 56.3169 mo
1025.94 50.3169 li
1019.94 50.3169 mo
1025.94 56.3169 li
f
1 lw
0 lc
1019.94 56.3169 mo
1025.94 50.3169 li
1019.94 50.3169 mo
1025.94 56.3169 li
@
grestore
gsave
1029.28 56.817 mo
1036.28 56.817 li
1036.28 49.817 li
1029.28 49.817 li
1029.28 56.817 li
clp
1029.78 56.3169 mo
1035.78 50.3169 li
1029.78 50.3169 mo
1035.78 56.3169 li
f
1 lw
0 lc
1029.78 56.3169 mo
1035.78 50.3169 li
1029.78 50.3169 mo
1035.78 56.3169 li
@
grestore
gsave
1039.12 57.1361 mo
1046.12 57.1361 li
1046.12 50.1358 li
1039.12 50.1358 li
1039.12 57.1361 li
clp
1039.62 56.6359 mo
1045.62 50.6359 li
1039.62 50.6359 mo
1045.62 56.6359 li
f
1 lw
0 lc
1039.62 56.6359 mo
1045.62 50.6359 li
1039.62 50.6359 mo
1045.62 56.6359 li
@
grestore
gsave
1048.96 57.1361 mo
1055.96 57.1361 li
1055.96 50.1358 li
1048.96 50.1358 li
1048.96 57.1361 li
clp
1049.46 56.6359 mo
1055.46 50.6359 li
1049.46 50.6359 mo
1055.46 56.6359 li
f
1 lw
0 lc
1049.46 56.6359 mo
1055.46 50.6359 li
1049.46 50.6359 mo
1055.46 56.6359 li
@
grestore
gsave
1058.79 57.1361 mo
1065.79 57.1361 li
1065.79 50.1358 li
1058.79 50.1358 li
1058.79 57.1361 li
clp
1059.29 56.6359 mo
1065.29 50.6359 li
1059.29 50.6359 mo
1065.29 56.6359 li
f
1 lw
0 lc
1059.29 56.6359 mo
1065.29 50.6359 li
1059.29 50.6359 mo
1065.29 56.6359 li
@
grestore
gsave
1068.63 57.4548 mo
1075.63 57.4548 li
1075.63 50.4548 li
1068.63 50.4548 li
1068.63 57.4548 li
clp
1069.13 56.955 mo
1075.13 50.955 li
1069.13 50.955 mo
1075.13 56.955 li
f
1 lw
0 lc
1069.13 56.955 mo
1075.13 50.955 li
1069.13 50.955 mo
1075.13 56.955 li
@
grestore
gsave
1078.47 57.1361 mo
1085.47 57.1361 li
1085.47 50.1358 li
1078.47 50.1358 li
1078.47 57.1361 li
clp
1078.97 56.6359 mo
1084.97 50.6359 li
1078.97 50.6359 mo
1084.97 56.6359 li
f
1 lw
0 lc
1078.97 56.6359 mo
1084.97 50.6359 li
1078.97 50.6359 mo
1084.97 56.6359 li
@
grestore
gsave
1088.31 57.1361 mo
1095.31 57.1361 li
1095.31 50.1358 li
1088.31 50.1358 li
1088.31 57.1361 li
clp
1088.81 56.6359 mo
1094.81 50.6359 li
1088.81 50.6359 mo
1094.81 56.6359 li
f
1 lw
0 lc
1088.81 56.6359 mo
1094.81 50.6359 li
1088.81 50.6359 mo
1094.81 56.6359 li
@
grestore
gsave
1098.15 57.1361 mo
1105.15 57.1361 li
1105.15 50.1358 li
1098.15 50.1358 li
1098.15 57.1361 li
clp
1098.65 56.6359 mo
1104.65 50.6359 li
1098.65 50.6359 mo
1104.65 56.6359 li
f
1 lw
0 lc
1098.65 56.6359 mo
1104.65 50.6359 li
1098.65 50.6359 mo
1104.65 56.6359 li
@
grestore
gsave
1107.98 56.817 mo
1114.98 56.817 li
1114.98 49.817 li
1107.98 49.817 li
1107.98 56.817 li
clp
1108.48 56.3169 mo
1114.48 50.3169 li
1108.48 50.3169 mo
1114.48 56.3169 li
f
1 lw
0 lc
1108.48 56.3169 mo
1114.48 50.3169 li
1108.48 50.3169 mo
1114.48 56.3169 li
@
grestore
.8 lw
0 lj
88.8221 548.031 mo
88.8221 10.8177 li
@
1160.18 548.031 mo
1160.18 10.8177 li
@
88.8221 548.031 mo
1160.18 548.031 li
@
88.8221 10.8177 mo
1160.18 10.8177 li
@
1153.18 542.531 mo
734.432 542.531 li
733.842 542.53 733.495 542.387 733.286 542.178 cv
733.076 541.969 732.934 541.621 732.932 541.031 cv
732.932 405.906 li
732.934 405.316 733.076 404.969 733.286 404.76 cv
733.495 404.55 733.842 404.408 734.432 404.406 cv
1153.18 404.406 li
1153.77 404.408 1154.12 404.55 1154.33 404.76 cv
1154.54 404.969 1154.68 405.316 1154.68 405.906 cv
1154.68 541.031 li
1154.68 541.621 1154.54 541.969 1154.33 542.178 cv
1154.12 542.387 1153.77 542.53 1153.18 542.531 cv
0 0 0 0 cmyk
f
1153.19 543.531 mo
1153.19 543.531 1153.19 543.531 1153.18 543.531 cv
734.432 543.531 li
734.429 543.531 734.425 543.531 734.422 543.531 cv
733.683 543.531 733.034 543.34 732.578 542.885 cv
732.121 542.427 731.93 541.775 731.932 541.031 cv
731.932 405.906 li
731.93 405.163 732.121 404.51 732.578 404.053 cv
733.034 403.598 733.683 403.406 734.422 403.406 cv
734.425 403.406 734.429 403.406 734.432 403.406 cv
1153.18 403.406 li
1153.19 403.406 1153.19 403.406 1153.19 403.406 cv
1153.93 403.406 1154.58 403.598 1155.04 404.053 cv
1155.49 404.51 1155.68 405.163 1155.68 405.906 cv
1155.68 541.031 li
1155.68 541.775 1155.49 542.427 1155.04 542.885 cv
1154.58 543.34 1153.93 543.531 1153.19 543.531 cv
734.432 542.531 mo
1153.18 542.531 li
1153.77 542.53 1154.12 542.387 1154.33 542.178 cv
1154.54 541.969 1154.68 541.621 1154.68 541.031 cv
1154.68 405.906 li
1154.68 405.316 1154.54 404.969 1154.33 404.76 cv
1154.12 404.55 1153.77 404.408 1153.18 404.406 cv
734.432 404.406 li
733.842 404.408 733.495 404.55 733.286 404.76 cv
733.076 404.969 732.934 405.316 732.932 405.906 cv
732.932 541.031 li
732.934 541.621 733.076 541.969 733.286 542.178 cv
733.495 542.387 733.842 542.53 734.432 542.531 cv
734.432 542.531 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
736.432 427.203 mo
756.432 427.203 li
0 1 1 0 cmyk
@
770.342 411.263 mo
770.342 428.273 li
773.912 428.273 li
776.912 428.273 779.132 427.613 780.542 426.233 cv
781.922 424.853 782.642 422.693 782.642 419.753 cv
782.642 416.813 781.922 414.683 780.542 413.303 cv
779.132 411.953 776.912 411.263 773.912 411.263 cv
770.342 411.263 li
767.372 408.833 mo
773.462 408.833 li
777.692 408.833 780.812 409.733 782.792 411.473 cv
784.772 413.243 785.762 416.003 785.762 419.753 cv
785.762 423.533 784.742 426.293 782.762 428.063 cv
780.782 429.833 777.662 430.703 773.462 430.703 cv
767.372 430.703 li
767.372 408.833 li
1 /0 /CSD get_res sepcs
1 sep
f
793.442 420.263 mo
793.442 428.273 li
798.182 428.273 li
799.772 428.273 800.942 427.943 801.722 427.283 cv
802.472 426.623 802.862 425.633 802.862 424.253 cv
802.862 422.903 802.472 421.913 801.722 421.253 cv
800.942 420.593 799.772 420.263 798.182 420.263 cv
793.442 420.263 li
793.442 411.263 mo
793.442 417.863 li
797.822 417.863 li
799.262 417.863 800.312 417.593 801.032 417.053 cv
801.752 416.513 802.112 415.703 802.112 414.563 cv
802.112 413.483 801.752 412.643 801.032 412.103 cv
800.312 411.563 799.262 411.263 797.822 411.263 cv
793.442 411.263 li
790.472 408.833 mo
798.032 408.833 li
800.282 408.833 802.022 409.313 803.252 410.243 cv
804.452 411.203 805.082 412.523 805.082 414.233 cv
805.082 415.583 804.752 416.663 804.122 417.443 cv
803.492 418.223 802.592 418.733 801.392 418.913 cv
802.832 419.243 803.972 419.903 804.782 420.893 cv
805.562 421.883 805.982 423.113 805.982 424.583 cv
805.982 426.563 805.292 428.063 803.972 429.113 cv
802.652 430.193 800.762 430.703 798.332 430.703 cv
790.472 430.703 li
790.472 408.833 li
f
811.052 408.833 mo
815.042 408.833 li
824.732 427.133 li
824.732 408.833 li
827.612 408.833 li
827.612 430.703 li
823.622 430.703 li
813.932 412.403 li
813.932 430.703 li
811.052 430.703 li
811.052 408.833 li
f
849.392 407.933 mo
848.072 410.213 847.112 412.433 846.482 414.623 cv
845.822 416.813 845.522 419.033 845.522 421.283 cv
845.522 423.563 845.822 425.783 846.482 427.973 cv
847.112 430.193 848.072 432.383 849.392 434.633 cv
847.052 434.633 li
845.582 432.323 844.472 430.103 843.752 427.883 cv
843.032 425.663 842.672 423.473 842.672 421.283 cv
842.672 419.123 843.032 416.933 843.752 414.713 cv
844.472 412.493 845.552 410.243 847.052 407.933 cv
849.392 407.933 li
f
851.732 408.833 mo
870.212 408.833 li
870.212 411.323 li
862.442 411.323 li
862.442 430.703 li
859.472 430.703 li
859.472 411.323 li
851.732 411.323 li
851.732 408.833 li
f
882.452 416.813 mo
882.152 416.633 881.822 416.513 881.462 416.423 cv
881.102 416.363 880.712 416.303 880.292 416.303 cv
878.762 416.303 877.592 416.813 876.782 417.803 cv
875.942 418.793 875.552 420.203 875.552 422.063 cv
875.552 430.703 li
872.852 430.703 li
872.852 414.293 li
875.552 414.293 li
875.552 416.843 li
876.092 415.853 876.842 415.103 877.742 414.623 cv
878.642 414.143 879.752 413.903 881.072 413.903 cv
881.252 413.903 881.462 413.933 881.702 413.933 cv
881.912 413.963 882.152 413.993 882.452 414.053 cv
882.452 416.813 li
f
892.742 422.453 mo
890.552 422.453 889.052 422.723 888.212 423.203 cv
887.372 423.713 886.952 424.553 886.952 425.753 cv
886.952 426.713 887.252 427.493 887.882 428.033 cv
888.512 428.603 889.382 428.873 890.462 428.873 cv
891.962 428.873 893.162 428.363 894.062 427.283 cv
894.962 426.233 895.412 424.823 895.412 423.053 cv
895.412 422.453 li
892.742 422.453 li
898.112 421.343 mo
898.112 430.703 li
895.412 430.703 li
895.412 428.213 li
894.782 429.233 894.002 429.953 893.102 430.403 cv
892.202 430.853 891.062 431.093 889.742 431.093 cv
888.062 431.093 886.712 430.643 885.722 429.713 cv
884.732 428.783 884.252 427.523 884.252 425.933 cv
884.252 424.103 884.852 422.723 886.112 421.763 cv
887.342 420.833 889.172 420.353 891.632 420.353 cv
895.412 420.353 li
895.412 420.083 li
895.412 418.853 894.992 417.893 894.182 417.203 cv
893.372 416.543 892.232 416.183 890.762 416.183 cv
889.802 416.183 888.902 416.303 888.002 416.543 cv
887.102 416.783 886.262 417.113 885.452 417.533 cv
885.452 415.043 li
886.412 414.683 887.372 414.383 888.302 414.203 cv
889.232 414.023 890.132 413.903 891.032 413.903 cv
893.402 413.903 895.172 414.533 896.342 415.763 cv
897.512 416.993 898.112 418.853 898.112 421.343 cv
f
903.662 414.293 mo
906.362 414.293 li
906.362 430.703 li
903.662 430.703 li
903.662 414.293 li
903.662 407.903 mo
906.362 407.903 li
906.362 411.323 li
903.662 411.323 li
903.662 407.903 li
f
925.652 420.803 mo
925.652 430.703 li
922.952 430.703 li
922.952 420.893 li
922.952 419.333 922.622 418.193 922.022 417.413 cv
921.422 416.633 920.522 416.243 919.322 416.243 cv
917.852 416.243 916.712 416.723 915.872 417.653 cv
915.032 418.583 914.612 419.843 914.612 421.433 cv
914.612 430.703 li
911.912 430.703 li
911.912 414.293 li
914.612 414.293 li
914.612 416.843 li
915.242 415.883 915.992 415.133 916.892 414.653 cv
917.762 414.173 918.782 413.903 919.922 413.903 cv
921.782 413.903 923.222 414.503 924.182 415.673 cv
925.142 416.843 925.652 418.553 925.652 420.803 cv
f
931.022 414.293 mo
933.722 414.293 li
933.722 430.703 li
931.022 430.703 li
931.022 414.293 li
931.022 407.903 mo
933.722 407.903 li
933.722 411.323 li
931.022 411.323 li
931.022 407.903 li
f
953.012 420.803 mo
953.012 430.703 li
950.312 430.703 li
950.312 420.893 li
950.312 419.333 949.982 418.193 949.382 417.413 cv
948.782 416.633 947.882 416.243 946.682 416.243 cv
945.212 416.243 944.072 416.723 943.232 417.653 cv
942.392 418.583 941.972 419.843 941.972 421.433 cv
941.972 430.703 li
939.272 430.703 li
939.272 414.293 li
941.972 414.293 li
941.972 416.843 li
942.602 415.883 943.352 415.133 944.252 414.653 cv
945.122 414.173 946.142 413.903 947.282 413.903 cv
949.142 413.903 950.582 414.503 951.542 415.673 cv
952.502 416.843 953.012 418.553 953.012 420.803 cv
f
969.182 422.303 mo
969.182 420.383 968.762 418.853 967.982 417.773 cv
967.172 416.693 966.032 416.153 964.592 416.153 cv
963.152 416.153 962.012 416.693 961.202 417.773 cv
960.392 418.853 960.002 420.383 960.002 422.303 cv
960.002 424.253 960.392 425.753 961.202 426.833 cv
962.012 427.913 963.152 428.453 964.592 428.453 cv
966.032 428.453 967.172 427.913 967.982 426.833 cv
968.762 425.753 969.182 424.253 969.182 422.303 cv
971.882 428.663 mo
971.882 431.423 971.252 433.493 970.022 434.873 cv
968.762 436.223 966.872 436.913 964.322 436.913 cv
963.362 436.913 962.492 436.823 961.652 436.703 cv
960.812 436.553 959.972 436.343 959.192 436.043 cv
959.192 433.433 li
959.972 433.853 960.752 434.153 961.532 434.363 cv
962.312 434.573 963.092 434.693 963.902 434.693 cv
965.642 434.693 966.962 434.213 967.862 433.313 cv
968.732 432.383 969.182 431.003 969.182 429.143 cv
969.182 427.823 li
968.612 428.783 967.892 429.503 967.022 429.983 cv
966.152 430.463 965.132 430.703 963.932 430.703 cv
961.892 430.703 960.272 429.953 959.042 428.423 cv
957.812 426.893 957.212 424.853 957.212 422.303 cv
957.212 419.783 957.812 417.743 959.042 416.213 cv
960.272 414.683 961.892 413.903 963.932 413.903 cv
965.132 413.903 966.152 414.143 967.022 414.623 cv
967.892 415.103 968.612 415.823 969.182 416.783 cv
969.182 414.293 li
971.882 414.293 li
971.882 428.663 li
f
978.122 426.983 mo
981.212 426.983 li
981.212 429.503 li
978.812 434.153 li
976.922 434.153 li
978.122 429.503 li
978.122 426.983 li
f
1009.74 409.553 mo
1009.74 412.433 li
1008.6 411.893 1007.55 411.503 1006.56 411.233 cv
1005.54 410.993 1004.58 410.843 1003.68 410.843 cv
1002.06 410.843 1000.8 411.173 999.932 411.773 cv
999.062 412.403 998.641 413.303 998.641 414.443 cv
998.641 415.403 998.911 416.153 999.511 416.633 cv
1000.08 417.143 1001.19 417.533 1002.81 417.833 cv
1004.61 418.193 li
1006.8 418.613 1008.42 419.363 1009.47 420.413 cv
1010.52 421.493 1011.06 422.903 1011.06 424.673 cv
1011.06 426.803 1010.34 428.393 1008.93 429.473 cv
1007.49 430.553 1005.42 431.093 1002.69 431.093 cv
1001.64 431.093 1000.53 430.973 999.362 430.763 cv
998.192 430.553 996.992 430.223 995.761 429.743 cv
995.761 426.683 li
996.962 427.373 998.131 427.883 999.271 428.213 cv
1000.41 428.573 1001.55 428.723 1002.69 428.723 cv
1004.37 428.723 1005.66 428.393 1006.59 427.733 cv
1007.49 427.073 1007.97 426.143 1007.97 424.883 cv
1007.97 423.803 1007.64 422.963 1006.98 422.363 cv
1006.32 421.763 1005.24 421.313 1003.74 421.013 cv
1001.94 420.653 li
999.722 420.233 998.131 419.543 997.141 418.583 cv
996.151 417.653 995.672 416.363 995.672 414.683 cv
995.672 412.763 996.332 411.233 997.712 410.123 cv
999.062 409.013 1000.95 408.443 1003.35 408.443 cv
1004.37 408.443 1005.39 408.533 1006.47 408.713 cv
1007.52 408.893 1008.6 409.193 1009.74 409.553 cv
f
1015.56 414.293 mo
1018.26 414.293 li
1018.26 430.703 li
1015.56 430.703 li
1015.56 414.293 li
1015.56 407.903 mo
1018.26 407.903 li
1018.26 411.323 li
1015.56 411.323 li
1015.56 407.903 li
f
1034.7 422.303 mo
1034.7 420.383 1034.28 418.853 1033.5 417.773 cv
1032.69 416.693 1031.55 416.153 1030.11 416.153 cv
1028.67 416.153 1027.53 416.693 1026.72 417.773 cv
1025.91 418.853 1025.52 420.383 1025.52 422.303 cv
1025.52 424.253 1025.91 425.753 1026.72 426.833 cv
1027.53 427.913 1028.67 428.453 1030.11 428.453 cv
1031.55 428.453 1032.69 427.913 1033.5 426.833 cv
1034.28 425.753 1034.7 424.253 1034.7 422.303 cv
1037.4 428.663 mo
1037.4 431.423 1036.77 433.493 1035.54 434.873 cv
1034.28 436.223 1032.39 436.913 1029.84 436.913 cv
1028.88 436.913 1028.01 436.823 1027.17 436.703 cv
1026.33 436.553 1025.49 436.343 1024.71 436.043 cv
1024.71 433.433 li
1025.49 433.853 1026.27 434.153 1027.05 434.363 cv
1027.83 434.573 1028.61 434.693 1029.42 434.693 cv
1031.16 434.693 1032.48 434.213 1033.38 433.313 cv
1034.25 432.383 1034.7 431.003 1034.7 429.143 cv
1034.7 427.823 li
1034.13 428.783 1033.41 429.503 1032.54 429.983 cv
1031.67 430.463 1030.65 430.703 1029.45 430.703 cv
1027.41 430.703 1025.79 429.953 1024.56 428.423 cv
1023.33 426.893 1022.73 424.853 1022.73 422.303 cv
1022.73 419.783 1023.33 417.743 1024.56 416.213 cv
1025.79 414.683 1027.41 413.903 1029.45 413.903 cv
1030.65 413.903 1031.67 414.143 1032.54 414.623 cv
1033.41 415.103 1034.13 415.823 1034.7 416.783 cv
1034.7 414.293 li
1037.4 414.293 li
1037.4 428.663 li
f
1055.73 417.443 mo
1056.39 416.243 1057.2 415.373 1058.13 414.773 cv
1059.06 414.203 1060.17 413.903 1061.46 413.903 cv
1063.14 413.903 1064.46 414.503 1065.39 415.703 cv
1066.32 416.903 1066.8 418.613 1066.8 420.803 cv
1066.8 430.703 li
1064.1 430.703 li
1064.1 420.893 li
1064.1 419.333 1063.8 418.163 1063.26 417.383 cv
1062.69 416.633 1061.85 416.243 1060.71 416.243 cv
1059.3 416.243 1058.19 416.723 1057.38 417.653 cv
1056.57 418.583 1056.18 419.843 1056.18 421.433 cv
1056.18 430.703 li
1053.48 430.703 li
1053.48 420.893 li
1053.48 419.333 1053.18 418.163 1052.64 417.383 cv
1052.07 416.633 1051.2 416.243 1050.06 416.243 cv
1048.68 416.243 1047.57 416.723 1046.76 417.653 cv
1045.95 418.583 1045.56 419.843 1045.56 421.433 cv
1045.56 430.703 li
1042.86 430.703 li
1042.86 414.293 li
1045.56 414.293 li
1045.56 416.843 li
1046.16 415.853 1046.91 415.103 1047.78 414.623 cv
1048.62 414.143 1049.64 413.903 1050.84 413.903 cv
1052.04 413.903 1053.03 414.203 1053.87 414.803 cv
1054.71 415.403 1055.31 416.303 1055.73 417.443 cv
f
1078.53 416.183 mo
1077.09 416.183 1075.95 416.753 1075.11 417.893 cv
1074.27 419.033 1073.85 420.563 1073.85 422.513 cv
1073.85 424.493 1074.24 426.023 1075.08 427.163 cv
1075.92 428.303 1077.06 428.843 1078.53 428.843 cv
1079.97 428.843 1081.11 428.303 1081.95 427.163 cv
1082.79 426.023 1083.21 424.493 1083.21 422.513 cv
1083.21 420.593 1082.79 419.033 1081.95 417.893 cv
1081.11 416.753 1079.97 416.183 1078.53 416.183 cv
1078.53 413.903 mo
1080.87 413.903 1082.7 414.683 1084.05 416.183 cv
1085.37 417.713 1086.06 419.813 1086.06 422.513 cv
1086.06 425.213 1085.37 427.313 1084.05 428.813 cv
1082.7 430.343 1080.87 431.093 1078.53 431.093 cv
1076.16 431.093 1074.3 430.343 1072.98 428.813 cv
1071.66 427.313 1071 425.213 1071 422.513 cv
1071 419.813 1071.66 417.713 1072.98 416.183 cv
1074.3 414.683 1076.16 413.903 1078.53 413.903 cv
f
1090.53 414.293 mo
1093.23 414.293 li
1093.23 430.703 li
1090.53 430.703 li
1090.53 414.293 li
1090.53 407.903 mo
1093.23 407.903 li
1093.23 411.323 li
1090.53 411.323 li
1090.53 407.903 li
f
1109.67 416.783 mo
1109.67 407.903 li
1112.37 407.903 li
1112.37 430.703 li
1109.67 430.703 li
1109.67 428.243 li
1109.1 429.233 1108.38 429.953 1107.51 430.403 cv
1106.64 430.853 1105.62 431.093 1104.42 431.093 cv
1102.44 431.093 1100.82 430.313 1099.56 428.753 cv
1098.3 427.193 1097.7 425.093 1097.7 422.513 cv
1097.7 419.933 1098.3 417.863 1099.56 416.273 cv
1100.82 414.713 1102.44 413.903 1104.42 413.903 cv
1105.62 413.903 1106.64 414.143 1107.51 414.623 cv
1108.38 415.103 1109.1 415.823 1109.67 416.783 cv
1100.49 422.513 mo
1100.49 424.493 1100.88 426.053 1101.69 427.193 cv
1102.5 428.333 1103.64 428.873 1105.08 428.873 cv
1106.49 428.873 1107.6 428.333 1108.44 427.193 cv
1109.25 426.053 1109.67 424.493 1109.67 422.513 cv
1109.67 420.533 1109.25 419.003 1108.44 417.863 cv
1107.6 416.723 1106.49 416.153 1105.08 416.153 cv
1103.64 416.153 1102.5 416.723 1101.69 417.863 cv
1100.88 419.003 1100.49 420.533 1100.49 422.513 cv
f
1117.5 407.933 mo
1119.84 407.933 li
1121.28 410.243 1122.39 412.493 1123.11 414.713 cv
1123.83 416.933 1124.22 419.123 1124.22 421.283 cv
1124.22 423.473 1123.83 425.663 1123.11 427.883 cv
1122.39 430.103 1121.28 432.323 1119.84 434.633 cv
1117.5 434.633 li
1118.79 432.383 1119.75 430.193 1120.41 427.973 cv
1121.04 425.783 1121.37 423.563 1121.37 421.283 cv
1121.37 419.033 1121.04 416.813 1120.41 414.623 cv
1119.75 412.433 1118.79 410.213 1117.5 407.933 cv
f
736.432 461.234 mo
756.432 461.234 li
0 1 1 0 cmyk
@
743.432 464.234 mo
749.432 458.234 li
743.432 458.234 mo
749.432 464.234 li
f
1 lw
0 lc
743.432 464.234 mo
749.432 458.234 li
743.432 458.234 mo
749.432 464.234 li
@
770.342 445.294 mo
770.342 462.304 li
773.912 462.304 li
776.912 462.304 779.132 461.644 780.542 460.264 cv
781.922 458.884 782.642 456.724 782.642 453.784 cv
782.642 450.844 781.922 448.714 780.542 447.334 cv
779.132 445.984 776.912 445.294 773.912 445.294 cv
770.342 445.294 li
767.372 442.864 mo
773.462 442.864 li
777.692 442.864 780.812 443.764 782.792 445.504 cv
784.772 447.274 785.762 450.034 785.762 453.784 cv
785.762 457.564 784.742 460.324 782.762 462.094 cv
780.782 463.864 777.662 464.734 773.462 464.734 cv
767.372 464.734 li
767.372 442.864 li
1 /0 /CSD get_res sepcs
1 sep
f
793.442 454.294 mo
793.442 462.304 li
798.182 462.304 li
799.772 462.304 800.942 461.974 801.722 461.314 cv
802.472 460.654 802.862 459.664 802.862 458.284 cv
802.862 456.934 802.472 455.944 801.722 455.284 cv
800.942 454.624 799.772 454.294 798.182 454.294 cv
793.442 454.294 li
793.442 445.294 mo
793.442 451.894 li
797.822 451.894 li
799.262 451.894 800.312 451.624 801.032 451.084 cv
801.752 450.544 802.112 449.734 802.112 448.594 cv
802.112 447.514 801.752 446.674 801.032 446.134 cv
800.312 445.594 799.262 445.294 797.822 445.294 cv
793.442 445.294 li
790.472 442.864 mo
798.032 442.864 li
800.282 442.864 802.022 443.344 803.252 444.274 cv
804.452 445.234 805.082 446.554 805.082 448.264 cv
805.082 449.614 804.752 450.694 804.122 451.474 cv
803.492 452.254 802.592 452.764 801.392 452.944 cv
802.832 453.274 803.972 453.934 804.782 454.924 cv
805.562 455.914 805.982 457.144 805.982 458.614 cv
805.982 460.594 805.292 462.094 803.972 463.144 cv
802.652 464.224 800.762 464.734 798.332 464.734 cv
790.472 464.734 li
790.472 442.864 li
f
811.052 442.864 mo
815.042 442.864 li
824.732 461.164 li
824.732 442.864 li
827.612 442.864 li
827.612 464.734 li
823.622 464.734 li
813.932 446.434 li
813.932 464.734 li
811.052 464.734 li
811.052 442.864 li
f
849.392 441.964 mo
848.072 444.244 847.112 446.464 846.482 448.654 cv
845.822 450.844 845.522 453.064 845.522 455.314 cv
845.522 457.594 845.822 459.814 846.482 462.004 cv
847.112 464.224 848.072 466.414 849.392 468.664 cv
847.052 468.664 li
845.582 466.354 844.472 464.134 843.752 461.914 cv
843.032 459.694 842.672 457.504 842.672 455.314 cv
842.672 453.154 843.032 450.964 843.752 448.744 cv
844.472 446.524 845.552 444.274 847.052 441.964 cv
849.392 441.964 li
f
851.732 442.864 mo
870.212 442.864 li
870.212 445.354 li
862.442 445.354 li
862.442 464.734 li
859.472 464.734 li
859.472 445.354 li
851.732 445.354 li
851.732 442.864 li
f
886.982 455.854 mo
886.982 457.174 li
874.592 457.174 li
874.712 459.034 875.252 460.474 876.272 461.434 cv
877.262 462.394 878.642 462.874 880.442 462.874 cv
881.462 462.874 882.482 462.754 883.442 462.514 cv
884.402 462.274 885.392 461.884 886.352 461.344 cv
886.352 463.894 li
885.392 464.314 884.402 464.644 883.382 464.824 cv
882.362 465.004 881.312 465.124 880.292 465.124 cv
877.652 465.124 875.582 464.374 874.052 462.874 cv
872.522 461.374 871.772 459.304 871.772 456.694 cv
871.772 454.024 872.492 451.894 873.932 450.304 cv
875.372 448.744 877.352 447.934 879.812 447.934 cv
882.032 447.934 883.772 448.654 885.062 450.064 cv
886.322 451.504 886.982 453.424 886.982 455.854 cv
884.282 455.074 mo
884.252 453.604 883.832 452.434 883.052 451.534 cv
882.242 450.664 881.162 450.214 879.842 450.214 cv
878.342 450.214 877.142 450.664 876.242 451.504 cv
875.342 452.344 874.802 453.544 874.682 455.074 cv
884.282 455.074 li
f
901.862 448.804 mo
901.862 451.354 li
901.082 450.994 900.302 450.694 899.492 450.484 cv
898.652 450.304 897.812 450.184 896.942 450.184 cv
895.592 450.184 894.572 450.394 893.912 450.814 cv
893.252 451.234 892.922 451.834 892.922 452.644 cv
892.922 453.274 893.162 453.754 893.642 454.114 cv
894.122 454.474 895.082 454.834 896.522 455.134 cv
897.452 455.344 li
899.372 455.764 900.722 456.364 901.532 457.084 cv
902.312 457.834 902.732 458.884 902.732 460.204 cv
902.732 461.734 902.132 462.934 900.932 463.804 cv
899.732 464.704 898.052 465.124 895.952 465.124 cv
895.052 465.124 894.152 465.034 893.192 464.884 cv
892.232 464.734 891.242 464.494 890.192 464.134 cv
890.192 461.344 li
891.182 461.884 892.172 462.274 893.132 462.514 cv
894.092 462.784 895.052 462.904 896.012 462.904 cv
897.272 462.904 898.262 462.694 898.952 462.274 cv
899.612 461.854 899.972 461.224 899.972 460.414 cv
899.972 459.694 899.702 459.124 899.222 458.734 cv
898.742 458.344 897.662 457.954 895.982 457.594 cv
895.052 457.384 li
893.372 457.024 892.142 456.484 891.422 455.764 cv
890.672 455.044 890.312 454.054 890.312 452.764 cv
890.312 451.234 890.852 450.034 891.932 449.194 cv
893.012 448.354 894.572 447.934 896.612 447.934 cv
897.602 447.934 898.532 448.024 899.432 448.174 cv
900.302 448.324 901.112 448.534 901.862 448.804 cv
f
909.692 443.674 mo
909.692 448.324 li
915.242 448.324 li
915.242 450.424 li
909.692 450.424 li
909.692 459.334 li
909.692 460.684 909.872 461.554 910.232 461.914 cv
910.592 462.304 911.342 462.484 912.482 462.484 cv
915.242 462.484 li
915.242 464.734 li
912.482 464.734 li
910.382 464.734 908.942 464.344 908.162 463.564 cv
907.382 462.784 906.992 461.374 906.992 459.334 cv
906.992 450.424 li
905.012 450.424 li
905.012 448.324 li
906.992 448.324 li
906.992 443.674 li
909.692 443.674 li
f
918.782 448.324 mo
921.482 448.324 li
921.482 464.734 li
918.782 464.734 li
918.782 448.324 li
918.782 441.934 mo
921.482 441.934 li
921.482 445.354 li
918.782 445.354 li
918.782 441.934 li
f
940.772 454.834 mo
940.772 464.734 li
938.072 464.734 li
938.072 454.924 li
938.072 453.364 937.742 452.224 937.142 451.444 cv
936.542 450.664 935.642 450.274 934.442 450.274 cv
932.972 450.274 931.832 450.754 930.992 451.684 cv
930.152 452.614 929.732 453.874 929.732 455.464 cv
929.732 464.734 li
927.032 464.734 li
927.032 448.324 li
929.732 448.324 li
929.732 450.874 li
930.362 449.914 931.112 449.164 932.012 448.684 cv
932.882 448.204 933.902 447.934 935.042 447.934 cv
936.902 447.934 938.342 448.534 939.302 449.704 cv
940.262 450.874 940.772 452.584 940.772 454.834 cv
f
956.942 456.334 mo
956.942 454.414 956.522 452.884 955.742 451.804 cv
954.932 450.724 953.792 450.184 952.352 450.184 cv
950.912 450.184 949.772 450.724 948.962 451.804 cv
948.152 452.884 947.762 454.414 947.762 456.334 cv
947.762 458.284 948.152 459.784 948.962 460.864 cv
949.772 461.944 950.912 462.484 952.352 462.484 cv
953.792 462.484 954.932 461.944 955.742 460.864 cv
956.522 459.784 956.942 458.284 956.942 456.334 cv
959.642 462.694 mo
959.642 465.454 959.012 467.524 957.782 468.904 cv
956.522 470.254 954.632 470.944 952.082 470.944 cv
951.122 470.944 950.252 470.854 949.412 470.734 cv
948.572 470.584 947.732 470.374 946.952 470.074 cv
946.952 467.464 li
947.732 467.884 948.512 468.184 949.292 468.394 cv
950.072 468.604 950.852 468.724 951.662 468.724 cv
953.402 468.724 954.722 468.244 955.622 467.344 cv
956.492 466.414 956.942 465.034 956.942 463.174 cv
956.942 461.854 li
956.372 462.814 955.652 463.534 954.782 464.014 cv
953.912 464.494 952.892 464.734 951.692 464.734 cv
949.652 464.734 948.032 463.984 946.802 462.454 cv
945.572 460.924 944.972 458.884 944.972 456.334 cv
944.972 453.814 945.572 451.774 946.802 450.244 cv
948.032 448.714 949.652 447.934 951.692 447.934 cv
952.892 447.934 953.912 448.174 954.782 448.654 cv
955.652 449.134 956.372 449.854 956.942 450.814 cv
956.942 448.324 li
959.642 448.324 li
959.642 462.694 li
f
965.882 461.014 mo
968.972 461.014 li
968.972 463.534 li
966.572 468.184 li
964.682 468.184 li
965.882 463.534 li
965.882 461.014 li
f
997.501 443.584 mo
997.501 446.464 li
996.361 445.924 995.311 445.534 994.321 445.264 cv
993.301 445.024 992.341 444.874 991.441 444.874 cv
989.821 444.874 988.561 445.204 987.691 445.804 cv
986.821 446.434 986.401 447.334 986.401 448.474 cv
986.401 449.434 986.671 450.184 987.271 450.664 cv
987.841 451.174 988.951 451.564 990.571 451.864 cv
992.371 452.224 li
994.561 452.644 996.181 453.394 997.231 454.444 cv
998.281 455.524 998.821 456.934 998.821 458.704 cv
998.821 460.834 998.101 462.424 996.691 463.504 cv
995.251 464.584 993.181 465.124 990.451 465.124 cv
989.401 465.124 988.291 465.004 987.121 464.794 cv
985.951 464.584 984.751 464.254 983.521 463.774 cv
983.521 460.714 li
984.721 461.404 985.891 461.914 987.031 462.244 cv
988.171 462.604 989.311 462.754 990.451 462.754 cv
992.131 462.754 993.421 462.424 994.351 461.764 cv
995.251 461.104 995.731 460.174 995.731 458.914 cv
995.731 457.834 995.401 456.994 994.741 456.394 cv
994.081 455.794 993.001 455.344 991.501 455.044 cv
989.701 454.684 li
987.481 454.264 985.891 453.574 984.901 452.614 cv
983.911 451.684 983.431 450.394 983.431 448.714 cv
983.431 446.794 984.091 445.264 985.471 444.154 cv
986.821 443.044 988.711 442.474 991.111 442.474 cv
992.131 442.474 993.151 442.564 994.231 442.744 cv
995.281 442.924 996.361 443.224 997.501 443.584 cv
f
1003.32 448.324 mo
1006.02 448.324 li
1006.02 464.734 li
1003.32 464.734 li
1003.32 448.324 li
1003.32 441.934 mo
1006.02 441.934 li
1006.02 445.354 li
1003.32 445.354 li
1003.32 441.934 li
f
1022.46 456.334 mo
1022.46 454.414 1022.04 452.884 1021.26 451.804 cv
1020.45 450.724 1019.31 450.184 1017.87 450.184 cv
1016.43 450.184 1015.29 450.724 1014.48 451.804 cv
1013.67 452.884 1013.28 454.414 1013.28 456.334 cv
1013.28 458.284 1013.67 459.784 1014.48 460.864 cv
1015.29 461.944 1016.43 462.484 1017.87 462.484 cv
1019.31 462.484 1020.45 461.944 1021.26 460.864 cv
1022.04 459.784 1022.46 458.284 1022.46 456.334 cv
1025.16 462.694 mo
1025.16 465.454 1024.53 467.524 1023.3 468.904 cv
1022.04 470.254 1020.15 470.944 1017.6 470.944 cv
1016.64 470.944 1015.77 470.854 1014.93 470.734 cv
1014.09 470.584 1013.25 470.374 1012.47 470.074 cv
1012.47 467.464 li
1013.25 467.884 1014.03 468.184 1014.81 468.394 cv
1015.59 468.604 1016.37 468.724 1017.18 468.724 cv
1018.92 468.724 1020.24 468.244 1021.14 467.344 cv
1022.01 466.414 1022.46 465.034 1022.46 463.174 cv
1022.46 461.854 li
1021.89 462.814 1021.17 463.534 1020.3 464.014 cv
1019.43 464.494 1018.41 464.734 1017.21 464.734 cv
1015.17 464.734 1013.55 463.984 1012.32 462.454 cv
1011.09 460.924 1010.49 458.884 1010.49 456.334 cv
1010.49 453.814 1011.09 451.774 1012.32 450.244 cv
1013.55 448.714 1015.17 447.934 1017.21 447.934 cv
1018.41 447.934 1019.43 448.174 1020.3 448.654 cv
1021.17 449.134 1021.89 449.854 1022.46 450.814 cv
1022.46 448.324 li
1025.16 448.324 li
1025.16 462.694 li
f
1043.49 451.474 mo
1044.15 450.274 1044.96 449.404 1045.89 448.804 cv
1046.82 448.234 1047.93 447.934 1049.22 447.934 cv
1050.9 447.934 1052.22 448.534 1053.15 449.734 cv
1054.08 450.934 1054.56 452.644 1054.56 454.834 cv
1054.56 464.734 li
1051.86 464.734 li
1051.86 454.924 li
1051.86 453.364 1051.56 452.194 1051.02 451.414 cv
1050.45 450.664 1049.61 450.274 1048.47 450.274 cv
1047.06 450.274 1045.95 450.754 1045.14 451.684 cv
1044.33 452.614 1043.94 453.874 1043.94 455.464 cv
1043.94 464.734 li
1041.24 464.734 li
1041.24 454.924 li
1041.24 453.364 1040.94 452.194 1040.4 451.414 cv
1039.83 450.664 1038.96 450.274 1037.82 450.274 cv
1036.44 450.274 1035.33 450.754 1034.52 451.684 cv
1033.71 452.614 1033.32 453.874 1033.32 455.464 cv
1033.32 464.734 li
1030.62 464.734 li
1030.62 448.324 li
1033.32 448.324 li
1033.32 450.874 li
1033.92 449.884 1034.67 449.134 1035.54 448.654 cv
1036.38 448.174 1037.4 447.934 1038.6 447.934 cv
1039.8 447.934 1040.79 448.234 1041.63 448.834 cv
1042.47 449.434 1043.07 450.334 1043.49 451.474 cv
f
1066.29 450.214 mo
1064.85 450.214 1063.71 450.784 1062.87 451.924 cv
1062.03 453.064 1061.61 454.594 1061.61 456.544 cv
1061.61 458.524 1062 460.054 1062.84 461.194 cv
1063.68 462.334 1064.82 462.874 1066.29 462.874 cv
1067.73 462.874 1068.87 462.334 1069.71 461.194 cv
1070.55 460.054 1070.97 458.524 1070.97 456.544 cv
1070.97 454.624 1070.55 453.064 1069.71 451.924 cv
1068.87 450.784 1067.73 450.214 1066.29 450.214 cv
1066.29 447.934 mo
1068.63 447.934 1070.46 448.714 1071.81 450.214 cv
1073.13 451.744 1073.82 453.844 1073.82 456.544 cv
1073.82 459.244 1073.13 461.344 1071.81 462.844 cv
1070.46 464.374 1068.63 465.124 1066.29 465.124 cv
1063.92 465.124 1062.06 464.374 1060.74 462.844 cv
1059.42 461.344 1058.76 459.244 1058.76 456.544 cv
1058.76 453.844 1059.42 451.744 1060.74 450.214 cv
1062.06 448.714 1063.92 447.934 1066.29 447.934 cv
f
1078.29 448.324 mo
1080.99 448.324 li
1080.99 464.734 li
1078.29 464.734 li
1078.29 448.324 li
1078.29 441.934 mo
1080.99 441.934 li
1080.99 445.354 li
1078.29 445.354 li
1078.29 441.934 li
f
1097.43 450.814 mo
1097.43 441.934 li
1100.13 441.934 li
1100.13 464.734 li
1097.43 464.734 li
1097.43 462.274 li
1096.86 463.264 1096.14 463.984 1095.27 464.434 cv
1094.4 464.884 1093.38 465.124 1092.18 465.124 cv
1090.2 465.124 1088.58 464.344 1087.32 462.784 cv
1086.06 461.224 1085.46 459.124 1085.46 456.544 cv
1085.46 453.964 1086.06 451.894 1087.32 450.304 cv
1088.58 448.744 1090.2 447.934 1092.18 447.934 cv
1093.38 447.934 1094.4 448.174 1095.27 448.654 cv
1096.14 449.134 1096.86 449.854 1097.43 450.814 cv
1088.25 456.544 mo
1088.25 458.524 1088.64 460.084 1089.45 461.224 cv
1090.26 462.364 1091.4 462.904 1092.84 462.904 cv
1094.25 462.904 1095.36 462.364 1096.2 461.224 cv
1097.01 460.084 1097.43 458.524 1097.43 456.544 cv
1097.43 454.564 1097.01 453.034 1096.2 451.894 cv
1095.36 450.754 1094.25 450.184 1092.84 450.184 cv
1091.4 450.184 1090.26 450.754 1089.45 451.894 cv
1088.64 453.034 1088.25 454.564 1088.25 456.544 cv
f
1105.26 441.964 mo
1107.6 441.964 li
1109.04 444.274 1110.15 446.524 1110.87 448.744 cv
1111.59 450.964 1111.98 453.154 1111.98 455.314 cv
1111.98 457.504 1111.59 459.694 1110.87 461.914 cv
1110.15 464.134 1109.04 466.354 1107.6 468.664 cv
1105.26 468.664 li
1106.55 466.414 1107.51 464.224 1108.17 462.004 cv
1108.8 459.814 1109.13 457.594 1109.13 455.314 cv
1109.13 453.064 1108.8 450.844 1108.17 448.654 cv
1107.51 446.464 1106.55 444.244 1105.26 441.964 cv
f
1.5 lw
2 lc
736.432 495.266 mo
756.432 495.266 li
@
770.342 479.326 mo
770.342 496.336 li
773.912 496.336 li
776.912 496.336 779.132 495.676 780.542 494.296 cv
781.922 492.916 782.642 490.756 782.642 487.816 cv
782.642 484.876 781.922 482.746 780.542 481.366 cv
779.132 480.016 776.912 479.326 773.912 479.326 cv
770.342 479.326 li
767.372 476.896 mo
773.462 476.896 li
777.692 476.896 780.812 477.796 782.792 479.536 cv
784.772 481.306 785.762 484.066 785.762 487.816 cv
785.762 491.596 784.742 494.356 782.762 496.126 cv
780.782 497.896 777.662 498.766 773.462 498.766 cv
767.372 498.766 li
767.372 476.896 li
f
793.442 488.326 mo
793.442 496.336 li
798.182 496.336 li
799.772 496.336 800.942 496.006 801.722 495.346 cv
802.472 494.686 802.862 493.696 802.862 492.316 cv
802.862 490.966 802.472 489.976 801.722 489.316 cv
800.942 488.656 799.772 488.326 798.182 488.326 cv
793.442 488.326 li
793.442 479.326 mo
793.442 485.926 li
797.822 485.926 li
799.262 485.926 800.312 485.656 801.032 485.116 cv
801.752 484.576 802.112 483.766 802.112 482.626 cv
802.112 481.546 801.752 480.706 801.032 480.166 cv
800.312 479.626 799.262 479.326 797.822 479.326 cv
793.442 479.326 li
790.472 476.896 mo
798.032 476.896 li
800.282 476.896 802.022 477.376 803.252 478.306 cv
804.452 479.266 805.082 480.586 805.082 482.296 cv
805.082 483.646 804.752 484.726 804.122 485.506 cv
803.492 486.286 802.592 486.796 801.392 486.976 cv
802.832 487.306 803.972 487.966 804.782 488.956 cv
805.562 489.946 805.982 491.176 805.982 492.646 cv
805.982 494.626 805.292 496.126 803.972 497.176 cv
802.652 498.256 800.762 498.766 798.332 498.766 cv
790.472 498.766 li
790.472 476.896 li
f
811.052 476.896 mo
815.042 476.896 li
824.732 495.196 li
824.732 476.896 li
827.612 476.896 li
827.612 498.766 li
823.622 498.766 li
813.932 480.466 li
813.932 498.766 li
811.052 498.766 li
811.052 476.896 li
f
849.392 475.996 mo
848.072 478.276 847.112 480.496 846.482 482.686 cv
845.822 484.876 845.522 487.096 845.522 489.346 cv
845.522 491.626 845.822 493.846 846.482 496.036 cv
847.112 498.256 848.072 500.446 849.392 502.696 cv
847.052 502.696 li
845.582 500.386 844.472 498.166 843.752 495.946 cv
843.032 493.726 842.672 491.536 842.672 489.346 cv
842.672 487.186 843.032 484.996 843.752 482.776 cv
844.472 480.556 845.552 478.306 847.052 475.996 cv
849.392 475.996 li
f
851.732 476.896 mo
870.212 476.896 li
870.212 479.386 li
862.442 479.386 li
862.442 498.766 li
859.472 498.766 li
859.472 479.386 li
851.732 479.386 li
851.732 476.896 li
f
882.452 484.876 mo
882.152 484.696 881.822 484.576 881.462 484.486 cv
881.102 484.426 880.712 484.366 880.292 484.366 cv
878.762 484.366 877.592 484.876 876.782 485.866 cv
875.942 486.856 875.552 488.266 875.552 490.126 cv
875.552 498.766 li
872.852 498.766 li
872.852 482.356 li
875.552 482.356 li
875.552 484.906 li
876.092 483.916 876.842 483.166 877.742 482.686 cv
878.642 482.206 879.752 481.966 881.072 481.966 cv
881.252 481.966 881.462 481.996 881.702 481.996 cv
881.912 482.026 882.152 482.056 882.452 482.116 cv
882.452 484.876 li
f
892.742 490.516 mo
890.552 490.516 889.052 490.786 888.212 491.266 cv
887.372 491.776 886.952 492.616 886.952 493.816 cv
886.952 494.776 887.252 495.556 887.882 496.096 cv
888.512 496.666 889.382 496.936 890.462 496.936 cv
891.962 496.936 893.162 496.426 894.062 495.346 cv
894.962 494.296 895.412 492.886 895.412 491.116 cv
895.412 490.516 li
892.742 490.516 li
898.112 489.406 mo
898.112 498.766 li
895.412 498.766 li
895.412 496.276 li
894.782 497.296 894.002 498.016 893.102 498.466 cv
892.202 498.916 891.062 499.156 889.742 499.156 cv
888.062 499.156 886.712 498.706 885.722 497.776 cv
884.732 496.846 884.252 495.586 884.252 493.996 cv
884.252 492.166 884.852 490.786 886.112 489.826 cv
887.342 488.896 889.172 488.416 891.632 488.416 cv
895.412 488.416 li
895.412 488.146 li
895.412 486.916 894.992 485.956 894.182 485.266 cv
893.372 484.606 892.232 484.246 890.762 484.246 cv
889.802 484.246 888.902 484.366 888.002 484.606 cv
887.102 484.846 886.262 485.176 885.452 485.596 cv
885.452 483.106 li
886.412 482.746 887.372 482.446 888.302 482.266 cv
889.232 482.086 890.132 481.966 891.032 481.966 cv
893.402 481.966 895.172 482.596 896.342 483.826 cv
897.512 485.056 898.112 486.916 898.112 489.406 cv
f
903.662 482.356 mo
906.362 482.356 li
906.362 498.766 li
903.662 498.766 li
903.662 482.356 li
903.662 475.966 mo
906.362 475.966 li
906.362 479.386 li
903.662 479.386 li
903.662 475.966 li
f
925.652 488.866 mo
925.652 498.766 li
922.952 498.766 li
922.952 488.956 li
922.952 487.396 922.622 486.256 922.022 485.476 cv
921.422 484.696 920.522 484.306 919.322 484.306 cv
917.852 484.306 916.712 484.786 915.872 485.716 cv
915.032 486.646 914.612 487.906 914.612 489.496 cv
914.612 498.766 li
911.912 498.766 li
911.912 482.356 li
914.612 482.356 li
914.612 484.906 li
915.242 483.946 915.992 483.196 916.892 482.716 cv
917.762 482.236 918.782 481.966 919.922 481.966 cv
921.782 481.966 923.222 482.566 924.182 483.736 cv
925.142 484.906 925.652 486.616 925.652 488.866 cv
f
941.822 490.366 mo
941.822 488.446 941.402 486.916 940.622 485.836 cv
939.812 484.756 938.672 484.216 937.232 484.216 cv
935.792 484.216 934.652 484.756 933.842 485.836 cv
933.032 486.916 932.642 488.446 932.642 490.366 cv
932.642 492.316 933.032 493.816 933.842 494.896 cv
934.652 495.976 935.792 496.516 937.232 496.516 cv
938.672 496.516 939.812 495.976 940.622 494.896 cv
941.402 493.816 941.822 492.316 941.822 490.366 cv
944.522 496.726 mo
944.522 499.486 943.892 501.556 942.662 502.936 cv
941.402 504.286 939.512 504.976 936.962 504.976 cv
936.002 504.976 935.132 504.886 934.292 504.766 cv
933.452 504.616 932.612 504.406 931.832 504.106 cv
931.832 501.496 li
932.612 501.916 933.392 502.216 934.172 502.426 cv
934.952 502.636 935.732 502.756 936.542 502.756 cv
938.282 502.756 939.602 502.276 940.502 501.376 cv
941.372 500.446 941.822 499.066 941.822 497.206 cv
941.822 495.886 li
941.252 496.846 940.532 497.566 939.662 498.046 cv
938.792 498.526 937.772 498.766 936.572 498.766 cv
934.532 498.766 932.912 498.016 931.682 496.486 cv
930.452 494.956 929.852 492.916 929.852 490.366 cv
929.852 487.846 930.452 485.806 931.682 484.276 cv
932.912 482.746 934.532 481.966 936.572 481.966 cv
937.772 481.966 938.792 482.206 939.662 482.686 cv
940.532 483.166 941.252 483.886 941.822 484.846 cv
941.822 482.356 li
944.522 482.356 li
944.522 496.726 li
f
950.072 482.356 mo
952.772 482.356 li
952.772 498.766 li
950.072 498.766 li
950.072 482.356 li
950.072 475.966 mo
952.772 475.966 li
952.772 479.386 li
950.072 479.386 li
950.072 475.966 li
f
972.062 488.866 mo
972.062 498.766 li
969.362 498.766 li
969.362 488.956 li
969.362 487.396 969.032 486.256 968.432 485.476 cv
967.832 484.696 966.932 484.306 965.732 484.306 cv
964.262 484.306 963.122 484.786 962.282 485.716 cv
961.442 486.646 961.022 487.906 961.022 489.496 cv
961.022 498.766 li
958.322 498.766 li
958.322 482.356 li
961.022 482.356 li
961.022 484.906 li
961.652 483.946 962.402 483.196 963.302 482.716 cv
964.172 482.236 965.192 481.966 966.332 481.966 cv
968.192 481.966 969.632 482.566 970.592 483.736 cv
971.552 484.906 972.062 486.616 972.062 488.866 cv
f
988.232 490.366 mo
988.232 488.446 987.812 486.916 987.032 485.836 cv
986.222 484.756 985.082 484.216 983.642 484.216 cv
982.202 484.216 981.062 484.756 980.252 485.836 cv
979.442 486.916 979.052 488.446 979.052 490.366 cv
979.052 492.316 979.442 493.816 980.252 494.896 cv
981.062 495.976 982.202 496.516 983.642 496.516 cv
985.082 496.516 986.222 495.976 987.032 494.896 cv
987.812 493.816 988.232 492.316 988.232 490.366 cv
990.932 496.726 mo
990.932 499.486 990.302 501.556 989.072 502.936 cv
987.812 504.286 985.922 504.976 983.372 504.976 cv
982.412 504.976 981.542 504.886 980.702 504.766 cv
979.862 504.616 979.022 504.406 978.242 504.106 cv
978.242 501.496 li
979.022 501.916 979.802 502.216 980.582 502.426 cv
981.362 502.636 982.142 502.756 982.952 502.756 cv
984.692 502.756 986.012 502.276 986.912 501.376 cv
987.782 500.446 988.232 499.066 988.232 497.206 cv
988.232 495.886 li
987.662 496.846 986.942 497.566 986.072 498.046 cv
985.202 498.526 984.182 498.766 982.982 498.766 cv
980.942 498.766 979.322 498.016 978.092 496.486 cv
976.862 494.956 976.262 492.916 976.262 490.366 cv
976.262 487.846 976.862 485.806 978.092 484.276 cv
979.322 482.746 980.942 481.966 982.982 481.966 cv
984.182 481.966 985.202 482.206 986.072 482.686 cv
986.942 483.166 987.662 483.886 988.232 484.846 cv
988.232 482.356 li
990.932 482.356 li
990.932 496.726 li
f
997.172 495.046 mo
1000.26 495.046 li
1000.26 497.566 li
997.862 502.216 li
995.972 502.216 li
997.172 497.566 li
997.172 495.046 li
f
1015.68 476.896 mo
1018.65 476.896 li
1018.65 498.766 li
1015.68 498.766 li
1015.68 476.896 li
f
1034.88 482.836 mo
1034.88 485.386 li
1034.1 485.026 1033.32 484.726 1032.51 484.516 cv
1031.67 484.336 1030.83 484.216 1029.96 484.216 cv
1028.61 484.216 1027.59 484.426 1026.93 484.846 cv
1026.27 485.266 1025.94 485.866 1025.94 486.676 cv
1025.94 487.306 1026.18 487.786 1026.66 488.146 cv
1027.14 488.506 1028.1 488.866 1029.54 489.166 cv
1030.47 489.376 li
1032.39 489.796 1033.74 490.396 1034.55 491.116 cv
1035.33 491.866 1035.75 492.916 1035.75 494.236 cv
1035.75 495.766 1035.15 496.966 1033.95 497.836 cv
1032.75 498.736 1031.07 499.156 1028.97 499.156 cv
1028.07 499.156 1027.17 499.066 1026.21 498.916 cv
1025.25 498.766 1024.26 498.526 1023.21 498.166 cv
1023.21 495.376 li
1024.2 495.916 1025.19 496.306 1026.15 496.546 cv
1027.11 496.816 1028.07 496.936 1029.03 496.936 cv
1030.29 496.936 1031.28 496.726 1031.97 496.306 cv
1032.63 495.886 1032.99 495.256 1032.99 494.446 cv
1032.99 493.726 1032.72 493.156 1032.24 492.766 cv
1031.76 492.376 1030.68 491.986 1029 491.626 cv
1028.07 491.416 li
1026.39 491.056 1025.16 490.516 1024.44 489.796 cv
1023.69 489.076 1023.33 488.086 1023.33 486.796 cv
1023.33 485.266 1023.87 484.066 1024.95 483.226 cv
1026.03 482.386 1027.59 481.966 1029.63 481.966 cv
1030.62 481.966 1031.55 482.056 1032.45 482.206 cv
1033.32 482.356 1034.13 482.566 1034.88 482.836 cv
f
1040.04 482.356 mo
1042.74 482.356 li
1042.74 498.766 li
1040.04 498.766 li
1040.04 482.356 li
1040.04 475.966 mo
1042.74 475.966 li
1042.74 479.386 li
1040.04 479.386 li
1040.04 475.966 li
f
1059.18 490.366 mo
1059.18 488.446 1058.76 486.916 1057.98 485.836 cv
1057.17 484.756 1056.03 484.216 1054.59 484.216 cv
1053.15 484.216 1052.01 484.756 1051.2 485.836 cv
1050.39 486.916 1050 488.446 1050 490.366 cv
1050 492.316 1050.39 493.816 1051.2 494.896 cv
1052.01 495.976 1053.15 496.516 1054.59 496.516 cv
1056.03 496.516 1057.17 495.976 1057.98 494.896 cv
1058.76 493.816 1059.18 492.316 1059.18 490.366 cv
1061.88 496.726 mo
1061.88 499.486 1061.25 501.556 1060.02 502.936 cv
1058.76 504.286 1056.87 504.976 1054.32 504.976 cv
1053.36 504.976 1052.49 504.886 1051.65 504.766 cv
1050.81 504.616 1049.97 504.406 1049.19 504.106 cv
1049.19 501.496 li
1049.97 501.916 1050.75 502.216 1051.53 502.426 cv
1052.31 502.636 1053.09 502.756 1053.9 502.756 cv
1055.64 502.756 1056.96 502.276 1057.86 501.376 cv
1058.73 500.446 1059.18 499.066 1059.18 497.206 cv
1059.18 495.886 li
1058.61 496.846 1057.89 497.566 1057.02 498.046 cv
1056.15 498.526 1055.13 498.766 1053.93 498.766 cv
1051.89 498.766 1050.27 498.016 1049.04 496.486 cv
1047.81 494.956 1047.21 492.916 1047.21 490.366 cv
1047.21 487.846 1047.81 485.806 1049.04 484.276 cv
1050.27 482.746 1051.89 481.966 1053.93 481.966 cv
1055.13 481.966 1056.15 482.206 1057.02 482.686 cv
1057.89 483.166 1058.61 483.886 1059.18 484.846 cv
1059.18 482.356 li
1061.88 482.356 li
1061.88 496.726 li
f
1080.21 485.506 mo
1080.87 484.306 1081.68 483.436 1082.61 482.836 cv
1083.54 482.266 1084.65 481.966 1085.94 481.966 cv
1087.62 481.966 1088.94 482.566 1089.87 483.766 cv
1090.8 484.966 1091.28 486.676 1091.28 488.866 cv
1091.28 498.766 li
1088.58 498.766 li
1088.58 488.956 li
1088.58 487.396 1088.28 486.226 1087.74 485.446 cv
1087.17 484.696 1086.33 484.306 1085.19 484.306 cv
1083.78 484.306 1082.67 484.786 1081.86 485.716 cv
1081.05 486.646 1080.66 487.906 1080.66 489.496 cv
1080.66 498.766 li
1077.96 498.766 li
1077.96 488.956 li
1077.96 487.396 1077.66 486.226 1077.12 485.446 cv
1076.55 484.696 1075.68 484.306 1074.54 484.306 cv
1073.16 484.306 1072.05 484.786 1071.24 485.716 cv
1070.43 486.646 1070.04 487.906 1070.04 489.496 cv
1070.04 498.766 li
1067.34 498.766 li
1067.34 482.356 li
1070.04 482.356 li
1070.04 484.906 li
1070.64 483.916 1071.39 483.166 1072.26 482.686 cv
1073.1 482.206 1074.12 481.966 1075.32 481.966 cv
1076.52 481.966 1077.51 482.266 1078.35 482.866 cv
1079.19 483.466 1079.79 484.366 1080.21 485.506 cv
f
1103.01 484.246 mo
1101.57 484.246 1100.43 484.816 1099.59 485.956 cv
1098.75 487.096 1098.33 488.626 1098.33 490.576 cv
1098.33 492.556 1098.72 494.086 1099.56 495.226 cv
1100.4 496.366 1101.54 496.906 1103.01 496.906 cv
1104.45 496.906 1105.59 496.366 1106.43 495.226 cv
1107.27 494.086 1107.69 492.556 1107.69 490.576 cv
1107.69 488.656 1107.27 487.096 1106.43 485.956 cv
1105.59 484.816 1104.45 484.246 1103.01 484.246 cv
1103.01 481.966 mo
1105.35 481.966 1107.18 482.746 1108.53 484.246 cv
1109.85 485.776 1110.54 487.876 1110.54 490.576 cv
1110.54 493.276 1109.85 495.376 1108.53 496.876 cv
1107.18 498.406 1105.35 499.156 1103.01 499.156 cv
1100.64 499.156 1098.78 498.406 1097.46 496.876 cv
1096.14 495.376 1095.48 493.276 1095.48 490.576 cv
1095.48 487.876 1096.14 485.776 1097.46 484.246 cv
1098.78 482.746 1100.64 481.966 1103.01 481.966 cv
f
1115.01 482.356 mo
1117.71 482.356 li
1117.71 498.766 li
1115.01 498.766 li
1115.01 482.356 li
1115.01 475.966 mo
1117.71 475.966 li
1117.71 479.386 li
1115.01 479.386 li
1115.01 475.966 li
f
1134.15 484.846 mo
1134.15 475.966 li
1136.85 475.966 li
1136.85 498.766 li
1134.15 498.766 li
1134.15 496.306 li
1133.58 497.296 1132.86 498.016 1131.99 498.466 cv
1131.12 498.916 1130.1 499.156 1128.9 499.156 cv
1126.92 499.156 1125.3 498.376 1124.04 496.816 cv
1122.78 495.256 1122.18 493.156 1122.18 490.576 cv
1122.18 487.996 1122.78 485.926 1124.04 484.336 cv
1125.3 482.776 1126.92 481.966 1128.9 481.966 cv
1130.1 481.966 1131.12 482.206 1131.99 482.686 cv
1132.86 483.166 1133.58 483.886 1134.15 484.846 cv
1124.97 490.576 mo
1124.97 492.556 1125.36 494.116 1126.17 495.256 cv
1126.98 496.396 1128.12 496.936 1129.56 496.936 cv
1130.97 496.936 1132.08 496.396 1132.92 495.256 cv
1133.73 494.116 1134.15 492.556 1134.15 490.576 cv
1134.15 488.596 1133.73 487.066 1132.92 485.926 cv
1132.08 484.786 1130.97 484.216 1129.56 484.216 cv
1128.12 484.216 1126.98 484.786 1126.17 485.926 cv
1125.36 487.066 1124.97 488.596 1124.97 490.576 cv
f
1141.98 475.996 mo
1144.32 475.996 li
1145.76 478.306 1146.87 480.556 1147.59 482.776 cv
1148.31 484.996 1148.7 487.186 1148.7 489.346 cv
1148.7 491.536 1148.31 493.726 1147.59 495.946 cv
1146.87 498.166 1145.76 500.386 1144.32 502.696 cv
1141.98 502.696 li
1143.27 500.446 1144.23 498.256 1144.89 496.036 cv
1145.52 493.846 1145.85 491.626 1145.85 489.346 cv
1145.85 487.096 1145.52 484.876 1144.89 482.686 cv
1144.23 480.496 1143.27 478.276 1141.98 475.996 cv
f
736.432 529.297 mo
756.432 529.297 li
@
743.432 532.297 mo
749.432 526.297 li
743.432 526.297 mo
749.432 532.297 li
f
1 lw
0 lc
743.432 532.297 mo
749.432 526.297 li
743.432 526.297 mo
749.432 532.297 li
@
770.342 513.357 mo
770.342 530.367 li
773.912 530.367 li
776.912 530.367 779.132 529.707 780.542 528.327 cv
781.922 526.947 782.642 524.787 782.642 521.847 cv
782.642 518.907 781.922 516.777 780.542 515.397 cv
779.132 514.047 776.912 513.357 773.912 513.357 cv
770.342 513.357 li
767.372 510.927 mo
773.462 510.927 li
777.692 510.927 780.812 511.827 782.792 513.567 cv
784.772 515.337 785.762 518.097 785.762 521.847 cv
785.762 525.627 784.742 528.387 782.762 530.157 cv
780.782 531.927 777.662 532.797 773.462 532.797 cv
767.372 532.797 li
767.372 510.927 li
f
793.442 522.357 mo
793.442 530.367 li
798.182 530.367 li
799.772 530.367 800.942 530.037 801.722 529.377 cv
802.472 528.717 802.862 527.727 802.862 526.347 cv
802.862 524.997 802.472 524.007 801.722 523.347 cv
800.942 522.687 799.772 522.357 798.182 522.357 cv
793.442 522.357 li
793.442 513.357 mo
793.442 519.957 li
797.822 519.957 li
799.262 519.957 800.312 519.687 801.032 519.147 cv
801.752 518.607 802.112 517.797 802.112 516.657 cv
802.112 515.577 801.752 514.737 801.032 514.197 cv
800.312 513.657 799.262 513.357 797.822 513.357 cv
793.442 513.357 li
790.472 510.927 mo
798.032 510.927 li
800.282 510.927 802.022 511.407 803.252 512.337 cv
804.452 513.297 805.082 514.617 805.082 516.327 cv
805.082 517.677 804.752 518.757 804.122 519.537 cv
803.492 520.317 802.592 520.827 801.392 521.007 cv
802.832 521.337 803.972 521.997 804.782 522.987 cv
805.562 523.977 805.982 525.207 805.982 526.677 cv
805.982 528.657 805.292 530.157 803.972 531.207 cv
802.652 532.287 800.762 532.797 798.332 532.797 cv
790.472 532.797 li
790.472 510.927 li
f
811.052 510.927 mo
815.042 510.927 li
824.732 529.227 li
824.732 510.927 li
827.612 510.927 li
827.612 532.797 li
823.622 532.797 li
813.932 514.497 li
813.932 532.797 li
811.052 532.797 li
811.052 510.927 li
f
849.392 510.027 mo
848.072 512.307 847.112 514.527 846.482 516.717 cv
845.822 518.907 845.522 521.127 845.522 523.377 cv
845.522 525.657 845.822 527.877 846.482 530.067 cv
847.112 532.287 848.072 534.477 849.392 536.727 cv
847.052 536.727 li
845.582 534.417 844.472 532.197 843.752 529.977 cv
843.032 527.757 842.672 525.567 842.672 523.377 cv
842.672 521.217 843.032 519.027 843.752 516.807 cv
844.472 514.587 845.552 512.337 847.052 510.027 cv
849.392 510.027 li
f
851.732 510.927 mo
870.212 510.927 li
870.212 513.417 li
862.442 513.417 li
862.442 532.797 li
859.472 532.797 li
859.472 513.417 li
851.732 513.417 li
851.732 510.927 li
f
886.982 523.917 mo
886.982 525.237 li
874.592 525.237 li
874.712 527.097 875.252 528.537 876.272 529.497 cv
877.262 530.457 878.642 530.937 880.442 530.937 cv
881.462 530.937 882.482 530.817 883.442 530.577 cv
884.402 530.337 885.392 529.947 886.352 529.407 cv
886.352 531.957 li
885.392 532.377 884.402 532.707 883.382 532.887 cv
882.362 533.067 881.312 533.187 880.292 533.187 cv
877.652 533.187 875.582 532.437 874.052 530.937 cv
872.522 529.437 871.772 527.367 871.772 524.757 cv
871.772 522.087 872.492 519.957 873.932 518.367 cv
875.372 516.807 877.352 515.997 879.812 515.997 cv
882.032 515.997 883.772 516.717 885.062 518.127 cv
886.322 519.567 886.982 521.487 886.982 523.917 cv
884.282 523.137 mo
884.252 521.667 883.832 520.497 883.052 519.597 cv
882.242 518.727 881.162 518.277 879.842 518.277 cv
878.342 518.277 877.142 518.727 876.242 519.567 cv
875.342 520.407 874.802 521.607 874.682 523.137 cv
884.282 523.137 li
f
901.862 516.867 mo
901.862 519.417 li
901.082 519.057 900.302 518.757 899.492 518.547 cv
898.652 518.367 897.812 518.247 896.942 518.247 cv
895.592 518.247 894.572 518.457 893.912 518.877 cv
893.252 519.297 892.922 519.897 892.922 520.707 cv
892.922 521.337 893.162 521.817 893.642 522.177 cv
894.122 522.537 895.082 522.897 896.522 523.197 cv
897.452 523.407 li
899.372 523.827 900.722 524.427 901.532 525.147 cv
902.312 525.897 902.732 526.947 902.732 528.267 cv
902.732 529.797 902.132 530.997 900.932 531.867 cv
899.732 532.767 898.052 533.187 895.952 533.187 cv
895.052 533.187 894.152 533.097 893.192 532.947 cv
892.232 532.797 891.242 532.557 890.192 532.197 cv
890.192 529.407 li
891.182 529.947 892.172 530.337 893.132 530.577 cv
894.092 530.847 895.052 530.967 896.012 530.967 cv
897.272 530.967 898.262 530.757 898.952 530.337 cv
899.612 529.917 899.972 529.287 899.972 528.477 cv
899.972 527.757 899.702 527.187 899.222 526.797 cv
898.742 526.407 897.662 526.017 895.982 525.657 cv
895.052 525.447 li
893.372 525.087 892.142 524.547 891.422 523.827 cv
890.672 523.107 890.312 522.117 890.312 520.827 cv
890.312 519.297 890.852 518.097 891.932 517.257 cv
893.012 516.417 894.572 515.997 896.612 515.997 cv
897.602 515.997 898.532 516.087 899.432 516.237 cv
900.302 516.387 901.112 516.597 901.862 516.867 cv
f
909.692 511.737 mo
909.692 516.387 li
915.242 516.387 li
915.242 518.487 li
909.692 518.487 li
909.692 527.397 li
909.692 528.747 909.872 529.617 910.232 529.977 cv
910.592 530.367 911.342 530.547 912.482 530.547 cv
915.242 530.547 li
915.242 532.797 li
912.482 532.797 li
910.382 532.797 908.942 532.407 908.162 531.627 cv
907.382 530.847 906.992 529.437 906.992 527.397 cv
906.992 518.487 li
905.012 518.487 li
905.012 516.387 li
906.992 516.387 li
906.992 511.737 li
909.692 511.737 li
f
918.782 516.387 mo
921.482 516.387 li
921.482 532.797 li
918.782 532.797 li
918.782 516.387 li
918.782 509.997 mo
921.482 509.997 li
921.482 513.417 li
918.782 513.417 li
918.782 509.997 li
f
940.772 522.897 mo
940.772 532.797 li
938.072 532.797 li
938.072 522.987 li
938.072 521.427 937.742 520.287 937.142 519.507 cv
936.542 518.727 935.642 518.337 934.442 518.337 cv
932.972 518.337 931.832 518.817 930.992 519.747 cv
930.152 520.677 929.732 521.937 929.732 523.527 cv
929.732 532.797 li
927.032 532.797 li
927.032 516.387 li
929.732 516.387 li
929.732 518.937 li
930.362 517.977 931.112 517.227 932.012 516.747 cv
932.882 516.267 933.902 515.997 935.042 515.997 cv
936.902 515.997 938.342 516.597 939.302 517.767 cv
940.262 518.937 940.772 520.647 940.772 522.897 cv
f
956.942 524.397 mo
956.942 522.477 956.522 520.947 955.742 519.867 cv
954.932 518.787 953.792 518.247 952.352 518.247 cv
950.912 518.247 949.772 518.787 948.962 519.867 cv
948.152 520.947 947.762 522.477 947.762 524.397 cv
947.762 526.347 948.152 527.847 948.962 528.927 cv
949.772 530.007 950.912 530.547 952.352 530.547 cv
953.792 530.547 954.932 530.007 955.742 528.927 cv
956.522 527.847 956.942 526.347 956.942 524.397 cv
959.642 530.757 mo
959.642 533.517 959.012 535.587 957.782 536.967 cv
956.522 538.317 954.632 539.007 952.082 539.007 cv
951.122 539.007 950.252 538.917 949.412 538.797 cv
948.572 538.647 947.732 538.437 946.952 538.137 cv
946.952 535.527 li
947.732 535.947 948.512 536.247 949.292 536.457 cv
950.072 536.667 950.852 536.787 951.662 536.787 cv
953.402 536.787 954.722 536.307 955.622 535.407 cv
956.492 534.477 956.942 533.097 956.942 531.237 cv
956.942 529.917 li
956.372 530.877 955.652 531.597 954.782 532.077 cv
953.912 532.557 952.892 532.797 951.692 532.797 cv
949.652 532.797 948.032 532.047 946.802 530.517 cv
945.572 528.987 944.972 526.947 944.972 524.397 cv
944.972 521.877 945.572 519.837 946.802 518.307 cv
948.032 516.777 949.652 515.997 951.692 515.997 cv
952.892 515.997 953.912 516.237 954.782 516.717 cv
955.652 517.197 956.372 517.917 956.942 518.877 cv
956.942 516.387 li
959.642 516.387 li
959.642 530.757 li
f
965.882 529.077 mo
968.972 529.077 li
968.972 531.597 li
966.572 536.247 li
964.682 536.247 li
965.882 531.597 li
965.882 529.077 li
f
984.391 510.927 mo
987.361 510.927 li
987.361 532.797 li
984.391 532.797 li
984.391 510.927 li
f
1003.59 516.867 mo
1003.59 519.417 li
1002.81 519.057 1002.03 518.757 1001.22 518.547 cv
1000.38 518.367 999.541 518.247 998.671 518.247 cv
997.321 518.247 996.301 518.457 995.641 518.877 cv
994.981 519.297 994.651 519.897 994.651 520.707 cv
994.651 521.337 994.891 521.817 995.371 522.177 cv
995.851 522.537 996.811 522.897 998.251 523.197 cv
999.181 523.407 li
1001.1 523.827 1002.45 524.427 1003.26 525.147 cv
1004.04 525.897 1004.46 526.947 1004.46 528.267 cv
1004.46 529.797 1003.86 530.997 1002.66 531.867 cv
1001.46 532.767 999.781 533.187 997.681 533.187 cv
996.781 533.187 995.881 533.097 994.921 532.947 cv
993.961 532.797 992.971 532.557 991.921 532.197 cv
991.921 529.407 li
992.911 529.947 993.901 530.337 994.861 530.577 cv
995.821 530.847 996.781 530.967 997.741 530.967 cv
999.001 530.967 999.991 530.757 1000.68 530.337 cv
1001.34 529.917 1001.7 529.287 1001.7 528.477 cv
1001.7 527.757 1001.43 527.187 1000.95 526.797 cv
1000.47 526.407 999.391 526.017 997.711 525.657 cv
996.781 525.447 li
995.101 525.087 993.871 524.547 993.151 523.827 cv
992.401 523.107 992.041 522.117 992.041 520.827 cv
992.041 519.297 992.581 518.097 993.661 517.257 cv
994.741 516.417 996.301 515.997 998.341 515.997 cv
999.331 515.997 1000.26 516.087 1001.16 516.237 cv
1002.03 516.387 1002.84 516.597 1003.59 516.867 cv
f
1008.75 516.387 mo
1011.45 516.387 li
1011.45 532.797 li
1008.75 532.797 li
1008.75 516.387 li
1008.75 509.997 mo
1011.45 509.997 li
1011.45 513.417 li
1008.75 513.417 li
1008.75 509.997 li
f
1027.89 524.397 mo
1027.89 522.477 1027.47 520.947 1026.69 519.867 cv
1025.88 518.787 1024.74 518.247 1023.3 518.247 cv
1021.86 518.247 1020.72 518.787 1019.91 519.867 cv
1019.1 520.947 1018.71 522.477 1018.71 524.397 cv
1018.71 526.347 1019.1 527.847 1019.91 528.927 cv
1020.72 530.007 1021.86 530.547 1023.3 530.547 cv
1024.74 530.547 1025.88 530.007 1026.69 528.927 cv
1027.47 527.847 1027.89 526.347 1027.89 524.397 cv
1030.59 530.757 mo
1030.59 533.517 1029.96 535.587 1028.73 536.967 cv
1027.47 538.317 1025.58 539.007 1023.03 539.007 cv
1022.07 539.007 1021.2 538.917 1020.36 538.797 cv
1019.52 538.647 1018.68 538.437 1017.9 538.137 cv
1017.9 535.527 li
1018.68 535.947 1019.46 536.247 1020.24 536.457 cv
1021.02 536.667 1021.8 536.787 1022.61 536.787 cv
1024.35 536.787 1025.67 536.307 1026.57 535.407 cv
1027.44 534.477 1027.89 533.097 1027.89 531.237 cv
1027.89 529.917 li
1027.32 530.877 1026.6 531.597 1025.73 532.077 cv
1024.86 532.557 1023.84 532.797 1022.64 532.797 cv
1020.6 532.797 1018.98 532.047 1017.75 530.517 cv
1016.52 528.987 1015.92 526.947 1015.92 524.397 cv
1015.92 521.877 1016.52 519.837 1017.75 518.307 cv
1018.98 516.777 1020.6 515.997 1022.64 515.997 cv
1023.84 515.997 1024.86 516.237 1025.73 516.717 cv
1026.6 517.197 1027.32 517.917 1027.89 518.877 cv
1027.89 516.387 li
1030.59 516.387 li
1030.59 530.757 li
f
1048.92 519.537 mo
1049.58 518.337 1050.39 517.467 1051.32 516.867 cv
1052.25 516.297 1053.36 515.997 1054.65 515.997 cv
1056.33 515.997 1057.65 516.597 1058.58 517.797 cv
1059.51 518.997 1059.99 520.707 1059.99 522.897 cv
1059.99 532.797 li
1057.29 532.797 li
1057.29 522.987 li
1057.29 521.427 1056.99 520.257 1056.45 519.477 cv
1055.88 518.727 1055.04 518.337 1053.9 518.337 cv
1052.49 518.337 1051.38 518.817 1050.57 519.747 cv
1049.76 520.677 1049.37 521.937 1049.37 523.527 cv
1049.37 532.797 li
1046.67 532.797 li
1046.67 522.987 li
1046.67 521.427 1046.37 520.257 1045.83 519.477 cv
1045.26 518.727 1044.39 518.337 1043.25 518.337 cv
1041.87 518.337 1040.76 518.817 1039.95 519.747 cv
1039.14 520.677 1038.75 521.937 1038.75 523.527 cv
1038.75 532.797 li
1036.05 532.797 li
1036.05 516.387 li
1038.75 516.387 li
1038.75 518.937 li
1039.35 517.947 1040.1 517.197 1040.97 516.717 cv
1041.81 516.237 1042.83 515.997 1044.03 515.997 cv
1045.23 515.997 1046.22 516.297 1047.06 516.897 cv
1047.9 517.497 1048.5 518.397 1048.92 519.537 cv
f
1071.72 518.277 mo
1070.28 518.277 1069.14 518.847 1068.3 519.987 cv
1067.46 521.127 1067.04 522.657 1067.04 524.607 cv
1067.04 526.587 1067.43 528.117 1068.27 529.257 cv
1069.11 530.397 1070.25 530.937 1071.72 530.937 cv
1073.16 530.937 1074.3 530.397 1075.14 529.257 cv
1075.98 528.117 1076.4 526.587 1076.4 524.607 cv
1076.4 522.687 1075.98 521.127 1075.14 519.987 cv
1074.3 518.847 1073.16 518.277 1071.72 518.277 cv
1071.72 515.997 mo
1074.06 515.997 1075.89 516.777 1077.24 518.277 cv
1078.56 519.807 1079.25 521.907 1079.25 524.607 cv
1079.25 527.307 1078.56 529.407 1077.24 530.907 cv
1075.89 532.437 1074.06 533.187 1071.72 533.187 cv
1069.35 533.187 1067.49 532.437 1066.17 530.907 cv
1064.85 529.407 1064.19 527.307 1064.19 524.607 cv
1064.19 521.907 1064.85 519.807 1066.17 518.277 cv
1067.49 516.777 1069.35 515.997 1071.72 515.997 cv
f
1083.72 516.387 mo
1086.42 516.387 li
1086.42 532.797 li
1083.72 532.797 li
1083.72 516.387 li
1083.72 509.997 mo
1086.42 509.997 li
1086.42 513.417 li
1083.72 513.417 li
1083.72 509.997 li
f
1102.86 518.877 mo
1102.86 509.997 li
1105.56 509.997 li
1105.56 532.797 li
1102.86 532.797 li
1102.86 530.337 li
1102.29 531.327 1101.57 532.047 1100.7 532.497 cv
1099.83 532.947 1098.81 533.187 1097.61 533.187 cv
1095.63 533.187 1094.01 532.407 1092.75 530.847 cv
1091.49 529.287 1090.89 527.187 1090.89 524.607 cv
1090.89 522.027 1091.49 519.957 1092.75 518.367 cv
1094.01 516.807 1095.63 515.997 1097.61 515.997 cv
1098.81 515.997 1099.83 516.237 1100.7 516.717 cv
1101.57 517.197 1102.29 517.917 1102.86 518.877 cv
1093.68 524.607 mo
1093.68 526.587 1094.07 528.147 1094.88 529.287 cv
1095.69 530.427 1096.83 530.967 1098.27 530.967 cv
1099.68 530.967 1100.79 530.427 1101.63 529.287 cv
1102.44 528.147 1102.86 526.587 1102.86 524.607 cv
1102.86 522.627 1102.44 521.097 1101.63 519.957 cv
1100.79 518.817 1099.68 518.247 1098.27 518.247 cv
1096.83 518.247 1095.69 518.817 1094.88 519.957 cv
1094.07 521.097 1093.68 522.627 1093.68 524.607 cv
f
1110.69 510.027 mo
1113.03 510.027 li
1114.47 512.337 1115.58 514.587 1116.3 516.807 cv
1117.02 519.027 1117.41 521.217 1117.41 523.377 cv
1117.41 525.567 1117.02 527.757 1116.3 529.977 cv
1115.58 532.197 1114.47 534.417 1113.03 536.727 cv
1110.69 536.727 li
1111.98 534.477 1112.94 532.287 1113.6 530.067 cv
1114.23 527.877 1114.56 525.657 1114.56 523.377 cv
1114.56 521.127 1114.23 518.907 1113.6 516.717 cv
1112.94 514.527 1111.98 512.307 1110.69 510.027 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
