%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SigmoidVSIsigmoid-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/11, 15:17:59
%%BoundingBox: 0 0 1159 602
%%HiResBoundingBox: 0 0 1158.1570 601.6880
%%CropBox: 0 0 1158.1570 601.6880
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-11T15:17:12+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-11T15:17:52+08:00"
   xmp:MetadataDate="2019-06-11T15:17:52+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:a12902f7-b35f-48cc-b6d2-e79a6d462973"
   xmpMM:InstanceID="uuid:86776427-e24d-4f27-8163-f098adf5dafd"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -601.688 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 601.688 li
1158.16 601.688 li
1158.16 0 li
cp
clp
gsave
-.820297 601.93 mo
1158.18 601.93 li
1158.18 -.06956 li
-.820297 -.06956 li
-.820297 601.93 li
clp
-97.8204 622.93 mo
1284.58 622.93 li
1284.58 -74.7496 li
-97.8204 -74.7496 li
-97.8204 622.93 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
74.9796 546.186 mo
1146.34 546.186 li
1146.34 8.9722 li
74.9796 8.9722 li
74.9796 546.186 li
f
123.678 546.186 mo
123.678 549.686 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
123.678 546.186 mo
123.678 549.686 li
@
123.678 555.109 mo
122.658 555.109 121.898 555.609 121.378 556.609 cv
120.858 557.609 120.618 559.109 120.618 561.109 cv
120.618 563.109 120.858 564.609 121.378 565.609 cv
121.898 566.609 122.658 567.109 123.678 567.109 cv
124.698 567.109 125.458 566.609 125.978 565.609 cv
126.478 564.609 126.738 563.109 126.738 561.109 cv
126.738 559.109 126.478 557.609 125.978 556.609 cv
125.458 555.609 124.698 555.109 123.678 555.109 cv
123.678 553.549 mo
125.298 553.549 126.538 554.209 127.418 555.489 cv
128.278 556.789 128.718 558.669 128.718 561.109 cv
128.718 563.569 128.278 565.449 127.418 566.729 cv
126.538 568.009 125.298 568.649 123.678 568.649 cv
122.038 568.649 120.778 568.009 119.918 566.729 cv
119.058 565.449 118.638 563.569 118.638 561.109 cv
118.638 558.669 119.058 556.789 119.918 555.489 cv
120.778 554.209 122.038 553.549 123.678 553.549 cv
f
320.438 546.186 mo
320.438 549.686 li
f
320.438 546.186 mo
320.438 549.686 li
@
305.2 566.729 mo
312.08 566.729 li
312.08 568.389 li
302.82 568.389 li
302.82 566.729 li
303.56 565.969 304.58 564.929 305.88 563.609 cv
307.16 562.309 307.98 561.469 308.32 561.089 cv
308.96 560.389 309.4 559.789 309.64 559.289 cv
309.88 558.809 310.02 558.309 310.02 557.829 cv
310.02 557.069 309.74 556.429 309.2 555.949 cv
308.66 555.469 307.96 555.209 307.08 555.209 cv
306.46 555.209 305.8 555.329 305.12 555.529 cv
304.44 555.749 303.7 556.069 302.92 556.509 cv
302.92 554.509 li
303.72 554.189 304.46 553.949 305.14 553.789 cv
305.82 553.629 306.46 553.549 307.04 553.549 cv
308.54 553.549 309.74 553.929 310.64 554.689 cv
311.54 555.449 312 556.449 312 557.709 cv
312 558.309 311.88 558.889 311.66 559.409 cv
311.44 559.949 311.04 560.589 310.44 561.309 cv
310.28 561.509 309.76 562.049 308.88 562.949 cv
308 563.849 306.78 565.109 305.2 566.729 cv
f
320.44 555.109 mo
319.42 555.109 318.66 555.609 318.14 556.609 cv
317.62 557.609 317.38 559.109 317.38 561.109 cv
317.38 563.109 317.62 564.609 318.14 565.609 cv
318.66 566.609 319.42 567.109 320.44 567.109 cv
321.46 567.109 322.22 566.609 322.74 565.609 cv
323.24 564.609 323.5 563.109 323.5 561.109 cv
323.5 559.109 323.24 557.609 322.74 556.609 cv
322.22 555.609 321.46 555.109 320.44 555.109 cv
320.44 553.549 mo
322.06 553.549 323.3 554.209 324.18 555.489 cv
325.04 556.789 325.48 558.669 325.48 561.109 cv
325.48 563.569 325.04 565.449 324.18 566.729 cv
323.3 568.009 322.06 568.649 320.44 568.649 cv
318.8 568.649 317.54 568.009 316.68 566.729 cv
315.82 565.449 315.4 563.569 315.4 561.109 cv
315.4 558.669 315.82 556.789 316.68 555.489 cv
317.54 554.209 318.8 553.549 320.44 553.549 cv
f
333.16 555.109 mo
332.14 555.109 331.38 555.609 330.86 556.609 cv
330.34 557.609 330.1 559.109 330.1 561.109 cv
330.1 563.109 330.34 564.609 330.86 565.609 cv
331.38 566.609 332.14 567.109 333.16 567.109 cv
334.18 567.109 334.94 566.609 335.46 565.609 cv
335.96 564.609 336.22 563.109 336.22 561.109 cv
336.22 559.109 335.96 557.609 335.46 556.609 cv
334.94 555.609 334.18 555.109 333.16 555.109 cv
333.16 553.549 mo
334.78 553.549 336.02 554.209 336.9 555.489 cv
337.76 556.789 338.2 558.669 338.2 561.109 cv
338.2 563.569 337.76 565.449 336.9 566.729 cv
336.02 568.009 334.78 568.649 333.16 568.649 cv
331.52 568.649 330.26 568.009 329.4 566.729 cv
328.54 565.449 328.12 563.569 328.12 561.109 cv
328.12 558.669 328.54 556.789 329.4 555.489 cv
330.26 554.209 331.52 553.549 333.16 553.549 cv
f
517.198 546.186 mo
517.198 549.686 li
f
517.198 546.186 mo
517.198 549.686 li
@
505.68 555.529 mo
500.7 563.309 li
505.68 563.309 li
505.68 555.529 li
505.16 553.809 mo
507.64 553.809 li
507.64 563.309 li
509.72 563.309 li
509.72 564.949 li
507.64 564.949 li
507.64 568.389 li
505.68 568.389 li
505.68 564.949 li
499.1 564.949 li
499.1 563.049 li
505.16 553.809 li
f
517.2 555.109 mo
516.18 555.109 515.42 555.609 514.9 556.609 cv
514.38 557.609 514.14 559.109 514.14 561.109 cv
514.14 563.109 514.38 564.609 514.9 565.609 cv
515.42 566.609 516.18 567.109 517.2 567.109 cv
518.22 567.109 518.98 566.609 519.5 565.609 cv
520 564.609 520.26 563.109 520.26 561.109 cv
520.26 559.109 520 557.609 519.5 556.609 cv
518.98 555.609 518.22 555.109 517.2 555.109 cv
517.2 553.549 mo
518.82 553.549 520.06 554.209 520.94 555.489 cv
521.8 556.789 522.24 558.669 522.24 561.109 cv
522.24 563.569 521.8 565.449 520.94 566.729 cv
520.06 568.009 518.82 568.649 517.2 568.649 cv
515.56 568.649 514.3 568.009 513.44 566.729 cv
512.58 565.449 512.16 563.569 512.16 561.109 cv
512.16 558.669 512.58 556.789 513.44 555.489 cv
514.3 554.209 515.56 553.549 517.2 553.549 cv
f
529.92 555.109 mo
528.9 555.109 528.14 555.609 527.62 556.609 cv
527.1 557.609 526.86 559.109 526.86 561.109 cv
526.86 563.109 527.1 564.609 527.62 565.609 cv
528.14 566.609 528.9 567.109 529.92 567.109 cv
530.94 567.109 531.7 566.609 532.22 565.609 cv
532.72 564.609 532.98 563.109 532.98 561.109 cv
532.98 559.109 532.72 557.609 532.22 556.609 cv
531.7 555.609 530.94 555.109 529.92 555.109 cv
529.92 553.549 mo
531.54 553.549 532.78 554.209 533.66 555.489 cv
534.52 556.789 534.96 558.669 534.96 561.109 cv
534.96 563.569 534.52 565.449 533.66 566.729 cv
532.78 568.009 531.54 568.649 529.92 568.649 cv
528.28 568.649 527.02 568.009 526.16 566.729 cv
525.3 565.449 524.88 563.569 524.88 561.109 cv
524.88 558.669 525.3 556.789 526.16 555.489 cv
527.02 554.209 528.28 553.549 529.92 553.549 cv
f
713.959 546.186 mo
713.959 549.686 li
f
713.959 546.186 mo
713.959 549.686 li
@
701.481 560.309 mo
700.601 560.309 699.901 560.629 699.381 561.229 cv
698.861 561.829 698.601 562.669 698.601 563.709 cv
698.601 564.769 698.861 565.609 699.381 566.209 cv
699.901 566.809 700.601 567.109 701.481 567.109 cv
702.361 567.109 703.061 566.809 703.581 566.209 cv
704.101 565.609 704.361 564.769 704.361 563.709 cv
704.361 562.669 704.101 561.829 703.581 561.229 cv
703.061 560.629 702.361 560.309 701.481 560.309 cv
705.401 554.129 mo
705.401 555.929 li
704.901 555.689 704.401 555.509 703.901 555.389 cv
703.381 555.269 702.881 555.209 702.401 555.209 cv
701.081 555.209 700.081 555.649 699.401 556.529 cv
698.721 557.409 698.321 558.749 698.241 560.509 cv
698.621 559.949 699.101 559.509 699.681 559.209 cv
700.261 558.909 700.901 558.749 701.601 558.749 cv
703.061 558.749 704.221 559.209 705.061 560.089 cv
705.901 560.969 706.341 562.189 706.341 563.709 cv
706.341 565.209 705.881 566.409 705.001 567.309 cv
704.121 568.209 702.941 568.649 701.481 568.649 cv
699.801 568.649 698.501 568.009 697.621 566.729 cv
696.721 565.449 696.281 563.569 696.281 561.109 cv
696.281 558.809 696.821 556.969 697.921 555.609 cv
699.001 554.249 700.481 553.549 702.321 553.549 cv
702.801 553.549 703.301 553.609 703.821 553.689 cv
704.321 553.789 704.841 553.929 705.401 554.129 cv
f
713.961 555.109 mo
712.941 555.109 712.181 555.609 711.661 556.609 cv
711.141 557.609 710.901 559.109 710.901 561.109 cv
710.901 563.109 711.141 564.609 711.661 565.609 cv
712.181 566.609 712.941 567.109 713.961 567.109 cv
714.981 567.109 715.741 566.609 716.261 565.609 cv
716.761 564.609 717.021 563.109 717.021 561.109 cv
717.021 559.109 716.761 557.609 716.261 556.609 cv
715.741 555.609 714.981 555.109 713.961 555.109 cv
713.961 553.549 mo
715.581 553.549 716.821 554.209 717.701 555.489 cv
718.561 556.789 719.001 558.669 719.001 561.109 cv
719.001 563.569 718.561 565.449 717.701 566.729 cv
716.821 568.009 715.581 568.649 713.961 568.649 cv
712.321 568.649 711.061 568.009 710.201 566.729 cv
709.341 565.449 708.921 563.569 708.921 561.109 cv
708.921 558.669 709.341 556.789 710.201 555.489 cv
711.061 554.209 712.321 553.549 713.961 553.549 cv
f
726.681 555.109 mo
725.661 555.109 724.901 555.609 724.381 556.609 cv
723.861 557.609 723.621 559.109 723.621 561.109 cv
723.621 563.109 723.861 564.609 724.381 565.609 cv
724.901 566.609 725.661 567.109 726.681 567.109 cv
727.701 567.109 728.461 566.609 728.981 565.609 cv
729.481 564.609 729.741 563.109 729.741 561.109 cv
729.741 559.109 729.481 557.609 728.981 556.609 cv
728.461 555.609 727.701 555.109 726.681 555.109 cv
726.681 553.549 mo
728.301 553.549 729.541 554.209 730.421 555.489 cv
731.281 556.789 731.721 558.669 731.721 561.109 cv
731.721 563.569 731.281 565.449 730.421 566.729 cv
729.541 568.009 728.301 568.649 726.681 568.649 cv
725.041 568.649 723.781 568.009 722.921 566.729 cv
722.061 565.449 721.641 563.569 721.641 561.109 cv
721.641 558.669 722.061 556.789 722.921 555.489 cv
723.781 554.209 725.041 553.549 726.681 553.549 cv
f
910.719 546.186 mo
910.719 549.686 li
f
910.719 546.186 mo
910.719 549.686 li
@
898.001 561.469 mo
897.061 561.469 896.321 561.729 895.781 562.229 cv
895.241 562.729 894.981 563.409 894.981 564.289 cv
894.981 565.169 895.241 565.869 895.781 566.369 cv
896.321 566.869 897.061 567.109 898.001 567.109 cv
898.921 567.109 899.661 566.869 900.201 566.349 cv
900.741 565.849 901.021 565.169 901.021 564.289 cv
901.021 563.409 900.741 562.729 900.221 562.229 cv
899.681 561.729 898.941 561.469 898.001 561.469 cv
896.021 560.629 mo
895.181 560.429 894.521 560.029 894.041 559.449 cv
893.561 558.869 893.341 558.169 893.341 557.329 cv
893.341 556.169 893.741 555.249 894.581 554.569 cv
895.401 553.889 896.541 553.549 898.001 553.549 cv
899.441 553.549 900.581 553.889 901.421 554.569 cv
902.241 555.249 902.661 556.169 902.661 557.329 cv
902.661 558.169 902.421 558.869 901.941 559.449 cv
901.461 560.029 900.821 560.429 899.981 560.629 cv
900.921 560.849 901.661 561.289 902.201 561.929 cv
902.721 562.569 903.001 563.369 903.001 564.289 cv
903.001 565.709 902.561 566.789 901.701 567.529 cv
900.821 568.289 899.601 568.649 898.001 568.649 cv
896.381 568.649 895.141 568.289 894.281 567.529 cv
893.421 566.789 893.001 565.709 893.001 564.289 cv
893.001 563.369 893.261 562.569 893.801 561.929 cv
894.321 561.289 895.061 560.849 896.021 560.629 cv
895.301 557.509 mo
895.301 558.269 895.521 558.869 896.001 559.289 cv
896.481 559.709 897.141 559.909 898.001 559.909 cv
898.841 559.909 899.501 559.709 899.981 559.289 cv
900.461 558.869 900.701 558.269 900.701 557.509 cv
900.701 556.749 900.461 556.169 899.981 555.749 cv
899.501 555.329 898.841 555.109 898.001 555.109 cv
897.141 555.109 896.481 555.329 896.001 555.749 cv
895.521 556.169 895.301 556.749 895.301 557.509 cv
f
910.721 555.109 mo
909.701 555.109 908.941 555.609 908.421 556.609 cv
907.901 557.609 907.661 559.109 907.661 561.109 cv
907.661 563.109 907.901 564.609 908.421 565.609 cv
908.941 566.609 909.701 567.109 910.721 567.109 cv
911.741 567.109 912.501 566.609 913.021 565.609 cv
913.521 564.609 913.781 563.109 913.781 561.109 cv
913.781 559.109 913.521 557.609 913.021 556.609 cv
912.501 555.609 911.741 555.109 910.721 555.109 cv
910.721 553.549 mo
912.341 553.549 913.581 554.209 914.461 555.489 cv
915.321 556.789 915.761 558.669 915.761 561.109 cv
915.761 563.569 915.321 565.449 914.461 566.729 cv
913.581 568.009 912.341 568.649 910.721 568.649 cv
909.081 568.649 907.821 568.009 906.961 566.729 cv
906.101 565.449 905.681 563.569 905.681 561.109 cv
905.681 558.669 906.101 556.789 906.961 555.489 cv
907.821 554.209 909.081 553.549 910.721 553.549 cv
f
923.441 555.109 mo
922.421 555.109 921.661 555.609 921.141 556.609 cv
920.621 557.609 920.381 559.109 920.381 561.109 cv
920.381 563.109 920.621 564.609 921.141 565.609 cv
921.661 566.609 922.421 567.109 923.441 567.109 cv
924.461 567.109 925.221 566.609 925.741 565.609 cv
926.241 564.609 926.501 563.109 926.501 561.109 cv
926.501 559.109 926.241 557.609 925.741 556.609 cv
925.221 555.609 924.461 555.109 923.441 555.109 cv
923.441 553.549 mo
925.061 553.549 926.301 554.209 927.181 555.489 cv
928.041 556.789 928.481 558.669 928.481 561.109 cv
928.481 563.569 928.041 565.449 927.181 566.729 cv
926.301 568.009 925.061 568.649 923.441 568.649 cv
921.801 568.649 920.541 568.009 919.681 566.729 cv
918.821 565.449 918.401 563.569 918.401 561.109 cv
918.401 558.669 918.821 556.789 919.681 555.489 cv
920.541 554.209 921.801 553.549 923.441 553.549 cv
f
1107.48 546.186 mo
1107.48 549.686 li
f
1107.48 546.186 mo
1107.48 549.686 li
@
1084.52 566.729 mo
1087.74 566.729 li
1087.74 555.609 li
1084.24 556.309 li
1084.24 554.509 li
1087.72 553.809 li
1089.7 553.809 li
1089.7 566.729 li
1092.92 566.729 li
1092.92 568.389 li
1084.52 568.389 li
1084.52 566.729 li
f
1101.12 555.109 mo
1100.1 555.109 1099.34 555.609 1098.82 556.609 cv
1098.3 557.609 1098.06 559.109 1098.06 561.109 cv
1098.06 563.109 1098.3 564.609 1098.82 565.609 cv
1099.34 566.609 1100.1 567.109 1101.12 567.109 cv
1102.14 567.109 1102.9 566.609 1103.42 565.609 cv
1103.92 564.609 1104.18 563.109 1104.18 561.109 cv
1104.18 559.109 1103.92 557.609 1103.42 556.609 cv
1102.9 555.609 1102.14 555.109 1101.12 555.109 cv
1101.12 553.549 mo
1102.74 553.549 1103.98 554.209 1104.86 555.489 cv
1105.72 556.789 1106.16 558.669 1106.16 561.109 cv
1106.16 563.569 1105.72 565.449 1104.86 566.729 cv
1103.98 568.009 1102.74 568.649 1101.12 568.649 cv
1099.48 568.649 1098.22 568.009 1097.36 566.729 cv
1096.5 565.449 1096.08 563.569 1096.08 561.109 cv
1096.08 558.669 1096.5 556.789 1097.36 555.489 cv
1098.22 554.209 1099.48 553.549 1101.12 553.549 cv
f
1113.84 555.109 mo
1112.82 555.109 1112.06 555.609 1111.54 556.609 cv
1111.02 557.609 1110.78 559.109 1110.78 561.109 cv
1110.78 563.109 1111.02 564.609 1111.54 565.609 cv
1112.06 566.609 1112.82 567.109 1113.84 567.109 cv
1114.86 567.109 1115.62 566.609 1116.14 565.609 cv
1116.64 564.609 1116.9 563.109 1116.9 561.109 cv
1116.9 559.109 1116.64 557.609 1116.14 556.609 cv
1115.62 555.609 1114.86 555.109 1113.84 555.109 cv
1113.84 553.549 mo
1115.46 553.549 1116.7 554.209 1117.58 555.489 cv
1118.44 556.789 1118.88 558.669 1118.88 561.109 cv
1118.88 563.569 1118.44 565.449 1117.58 566.729 cv
1116.7 568.009 1115.46 568.649 1113.84 568.649 cv
1112.2 568.649 1110.94 568.009 1110.08 566.729 cv
1109.22 565.449 1108.8 563.569 1108.8 561.109 cv
1108.8 558.669 1109.22 556.789 1110.08 555.489 cv
1110.94 554.209 1112.2 553.549 1113.84 553.549 cv
f
1126.56 555.109 mo
1125.54 555.109 1124.78 555.609 1124.26 556.609 cv
1123.74 557.609 1123.5 559.109 1123.5 561.109 cv
1123.5 563.109 1123.74 564.609 1124.26 565.609 cv
1124.78 566.609 1125.54 567.109 1126.56 567.109 cv
1127.58 567.109 1128.34 566.609 1128.86 565.609 cv
1129.36 564.609 1129.62 563.109 1129.62 561.109 cv
1129.62 559.109 1129.36 557.609 1128.86 556.609 cv
1128.34 555.609 1127.58 555.109 1126.56 555.109 cv
1126.56 553.549 mo
1128.18 553.549 1129.42 554.209 1130.3 555.489 cv
1131.16 556.789 1131.6 558.669 1131.6 561.109 cv
1131.6 563.569 1131.16 565.449 1130.3 566.729 cv
1129.42 568.009 1128.18 568.649 1126.56 568.649 cv
1124.92 568.649 1123.66 568.009 1122.8 566.729 cv
1121.94 565.449 1121.52 563.569 1121.52 561.109 cv
1121.52 558.669 1121.94 556.789 1122.8 555.489 cv
1123.66 554.209 1124.92 553.549 1126.56 553.549 cv
f
581.995 577.168 mo
591.215 577.168 li
591.215 578.828 li
583.975 578.828 li
583.975 583.148 li
590.915 583.148 li
590.915 584.808 li
583.975 584.808 li
583.975 590.088 li
591.395 590.088 li
591.395 591.748 li
581.995 591.748 li
581.995 577.168 li
f
596.295 590.108 mo
596.295 595.888 li
594.495 595.888 li
594.495 580.808 li
596.295 580.808 li
596.295 582.468 li
596.655 581.828 597.135 581.348 597.715 581.028 cv
598.295 580.708 598.995 580.548 599.795 580.548 cv
601.115 580.548 602.195 581.088 603.035 582.128 cv
603.855 583.188 604.275 584.568 604.275 586.288 cv
604.275 588.008 603.855 589.408 603.035 590.448 cv
602.195 591.488 601.115 592.008 599.795 592.008 cv
598.995 592.008 598.295 591.848 597.715 591.548 cv
597.135 591.248 596.655 590.768 596.295 590.108 cv
602.415 586.288 mo
602.415 584.968 602.135 583.948 601.595 583.188 cv
601.035 582.428 600.295 582.048 599.355 582.048 cv
598.395 582.048 597.655 582.428 597.115 583.188 cv
596.555 583.948 596.295 584.968 596.295 586.288 cv
596.295 587.608 596.555 588.648 597.115 589.408 cv
597.655 590.168 598.395 590.528 599.355 590.528 cv
600.295 590.528 601.035 590.168 601.595 589.408 cv
602.135 588.648 602.415 587.608 602.415 586.288 cv
f
611.495 582.068 mo
610.534 582.068 609.775 582.448 609.215 583.208 cv
608.655 583.968 608.375 584.988 608.375 586.288 cv
608.375 587.608 608.635 588.628 609.195 589.388 cv
609.755 590.148 610.515 590.508 611.495 590.508 cv
612.455 590.508 613.215 590.148 613.775 589.388 cv
614.335 588.628 614.615 587.608 614.615 586.288 cv
614.615 585.008 614.335 583.968 613.775 583.208 cv
613.215 582.448 612.455 582.068 611.495 582.068 cv
611.495 580.548 mo
613.055 580.548 614.275 581.068 615.174 582.068 cv
616.055 583.088 616.515 584.488 616.515 586.288 cv
616.515 588.088 616.055 589.488 615.174 590.488 cv
614.275 591.508 613.055 592.008 611.495 592.008 cv
609.914 592.008 608.674 591.508 607.794 590.488 cv
606.914 589.488 606.474 588.088 606.474 586.288 cv
606.474 584.488 606.914 583.088 607.794 582.068 cv
608.674 581.068 609.914 580.548 611.495 580.548 cv
f
627.375 581.228 mo
627.375 582.908 li
626.854 582.628 626.354 582.428 625.834 582.288 cv
625.315 582.148 624.815 582.068 624.294 582.068 cv
623.135 582.068 622.214 582.448 621.575 583.188 cv
620.935 583.928 620.615 584.968 620.615 586.288 cv
620.615 587.628 620.935 588.668 621.575 589.408 cv
622.214 590.148 623.135 590.508 624.294 590.508 cv
624.815 590.508 625.315 590.448 625.834 590.308 cv
626.354 590.168 626.854 589.948 627.375 589.668 cv
627.375 591.328 li
626.854 591.568 626.334 591.748 625.815 591.848 cv
625.274 591.948 624.695 592.008 624.094 592.008 cv
622.455 592.008 621.135 591.508 620.174 590.468 cv
619.195 589.448 618.714 588.048 618.714 586.288 cv
618.714 584.508 619.195 583.108 620.174 582.088 cv
621.154 581.068 622.495 580.548 624.214 580.548 cv
624.774 580.548 625.315 580.608 625.834 580.728 cv
626.354 580.848 626.875 581.008 627.375 581.228 cv
f
639.595 585.148 mo
639.595 591.748 li
637.795 591.748 li
637.795 585.208 li
637.795 584.168 637.575 583.408 637.175 582.888 cv
636.775 582.368 636.175 582.108 635.375 582.108 cv
634.395 582.108 633.635 582.428 633.075 583.048 cv
632.515 583.668 632.235 584.508 632.235 585.568 cv
632.235 591.748 li
630.435 591.748 li
630.435 576.548 li
632.235 576.548 li
632.235 582.508 li
632.655 581.868 633.155 581.368 633.755 581.048 cv
634.335 580.728 635.015 580.548 635.775 580.548 cv
637.015 580.548 637.975 580.948 638.615 581.728 cv
639.255 582.508 639.595 583.648 639.595 585.148 cv
f
74.9796 514.89 mo
71.4796 514.89 li
f
74.9796 514.89 mo
71.4796 514.89 li
@
42.5427 509.212 mo
41.5227 509.212 40.7627 509.712 40.2427 510.712 cv
39.7227 511.712 39.4827 513.212 39.4827 515.212 cv
39.4827 517.212 39.7227 518.712 40.2427 519.712 cv
40.7627 520.712 41.5227 521.212 42.5427 521.212 cv
43.5627 521.212 44.3227 520.712 44.8427 519.712 cv
45.3427 518.712 45.6027 517.212 45.6027 515.212 cv
45.6027 513.212 45.3427 511.712 44.8427 510.712 cv
44.3227 509.712 43.5627 509.212 42.5427 509.212 cv
42.5427 507.652 mo
44.1627 507.652 45.4027 508.312 46.2827 509.592 cv
47.1427 510.892 47.5827 512.772 47.5827 515.212 cv
47.5827 517.672 47.1427 519.552 46.2827 520.832 cv
45.4027 522.112 44.1627 522.752 42.5427 522.752 cv
40.9027 522.752 39.6427 522.112 38.7827 520.832 cv
37.9227 519.552 37.5027 517.672 37.5027 515.212 cv
37.5027 512.772 37.9227 510.892 38.7827 509.592 cv
39.6427 508.312 40.9027 507.652 42.5427 507.652 cv
f
51.0427 520.012 mo
53.1027 520.012 li
53.1027 522.492 li
51.0427 522.492 li
51.0427 520.012 li
f
59.1026 520.832 mo
65.9826 520.832 li
65.9826 522.492 li
56.7226 522.492 li
56.7226 520.832 li
57.4626 520.072 58.4826 519.032 59.7826 517.712 cv
61.0626 516.412 61.8826 515.572 62.2226 515.192 cv
62.8626 514.492 63.3026 513.892 63.5426 513.392 cv
63.7826 512.912 63.9226 512.412 63.9226 511.932 cv
63.9226 511.172 63.6426 510.532 63.1026 510.052 cv
62.5626 509.572 61.8626 509.312 60.9826 509.312 cv
60.3626 509.312 59.7026 509.432 59.0226 509.632 cv
58.3426 509.852 57.6026 510.172 56.8226 510.612 cv
56.8226 508.612 li
57.6226 508.292 58.3626 508.052 59.0426 507.892 cv
59.7226 507.732 60.3626 507.652 60.9426 507.652 cv
62.4426 507.652 63.6426 508.032 64.5426 508.792 cv
65.4426 509.552 65.9026 510.552 65.9026 511.812 cv
65.9026 512.412 65.7826 512.992 65.5626 513.512 cv
65.3426 514.052 64.9426 514.692 64.3426 515.412 cv
64.1826 515.612 63.6626 516.152 62.7826 517.052 cv
61.9026 517.952 60.6826 519.212 59.1026 520.832 cv
f
74.9796 453.126 mo
71.4796 453.126 li
f
74.9796 453.126 mo
71.4796 453.126 li
@
42.5427 447.448 mo
41.5227 447.448 40.7627 447.948 40.2427 448.948 cv
39.7227 449.948 39.4827 451.448 39.4827 453.448 cv
39.4827 455.448 39.7227 456.948 40.2427 457.948 cv
40.7627 458.948 41.5227 459.448 42.5427 459.448 cv
43.5627 459.448 44.3227 458.948 44.8427 457.948 cv
45.3427 456.948 45.6027 455.448 45.6027 453.448 cv
45.6027 451.448 45.3427 449.948 44.8427 448.948 cv
44.3227 447.948 43.5627 447.448 42.5427 447.448 cv
42.5427 445.888 mo
44.1627 445.888 45.4027 446.548 46.2827 447.828 cv
47.1427 449.128 47.5827 451.008 47.5827 453.448 cv
47.5827 455.908 47.1427 457.788 46.2827 459.068 cv
45.4027 460.348 44.1627 460.988 42.5427 460.988 cv
40.9027 460.988 39.6427 460.348 38.7827 459.068 cv
37.9227 457.788 37.5027 455.908 37.5027 453.448 cv
37.5027 451.008 37.9227 449.128 38.7827 447.828 cv
39.6427 446.548 40.9027 445.888 42.5427 445.888 cv
f
51.0427 458.248 mo
53.1027 458.248 li
53.1027 460.728 li
51.0427 460.728 li
51.0427 458.248 li
f
63.3826 452.868 mo
64.3226 453.068 65.0626 453.488 65.5826 454.128 cv
66.1026 454.768 66.3826 455.568 66.3826 456.488 cv
66.3826 457.928 65.8826 459.048 64.9026 459.828 cv
63.9026 460.608 62.5026 460.988 60.6826 460.988 cv
60.0626 460.988 59.4226 460.928 58.7826 460.808 cv
58.1426 460.708 57.4626 460.528 56.7826 460.288 cv
56.7826 458.388 li
57.3226 458.708 57.9226 458.948 58.5826 459.108 cv
59.2226 459.268 59.9026 459.348 60.6226 459.348 cv
61.8626 459.348 62.8026 459.108 63.4426 458.628 cv
64.0826 458.148 64.4226 457.428 64.4226 456.488 cv
64.4226 455.648 64.1226 454.968 63.5226 454.488 cv
62.9226 454.008 62.0826 453.748 61.0026 453.748 cv
59.3026 453.748 li
59.3026 452.128 li
61.0826 452.128 li
62.0426 452.128 62.7826 451.948 63.3026 451.548 cv
63.8226 451.168 64.0826 450.608 64.0826 449.868 cv
64.0826 449.128 63.8026 448.548 63.2826 448.148 cv
62.7426 447.748 61.9826 447.548 61.0026 447.548 cv
60.4626 447.548 59.8826 447.608 59.2626 447.728 cv
58.6426 447.848 57.9626 448.028 57.2226 448.268 cv
57.2226 446.508 li
57.9626 446.308 58.6626 446.148 59.3226 446.048 cv
59.9626 445.948 60.5826 445.888 61.1826 445.888 cv
62.6626 445.888 63.8426 446.228 64.7226 446.908 cv
65.6026 447.588 66.0426 448.508 66.0426 449.668 cv
66.0426 450.468 65.8026 451.148 65.3426 451.708 cv
64.8826 452.268 64.2226 452.668 63.3826 452.868 cv
f
74.9796 391.362 mo
71.4796 391.362 li
f
74.9796 391.362 mo
71.4796 391.362 li
@
42.5427 385.684 mo
41.5227 385.684 40.7627 386.184 40.2427 387.184 cv
39.7227 388.184 39.4827 389.684 39.4827 391.684 cv
39.4827 393.684 39.7227 395.184 40.2427 396.184 cv
40.7627 397.184 41.5227 397.684 42.5427 397.684 cv
43.5627 397.684 44.3227 397.184 44.8427 396.184 cv
45.3427 395.184 45.6027 393.684 45.6027 391.684 cv
45.6027 389.684 45.3427 388.184 44.8427 387.184 cv
44.3227 386.184 43.5627 385.684 42.5427 385.684 cv
42.5427 384.124 mo
44.1627 384.124 45.4027 384.784 46.2827 386.064 cv
47.1427 387.364 47.5827 389.244 47.5827 391.684 cv
47.5827 394.144 47.1427 396.024 46.2827 397.304 cv
45.4027 398.584 44.1627 399.224 42.5427 399.224 cv
40.9027 399.224 39.6427 398.584 38.7827 397.304 cv
37.9227 396.024 37.5027 394.144 37.5027 391.684 cv
37.5027 389.244 37.9227 387.364 38.7827 386.064 cv
39.6427 384.784 40.9027 384.124 42.5427 384.124 cv
f
51.0427 396.484 mo
53.1027 396.484 li
53.1027 398.964 li
51.0427 398.964 li
51.0427 396.484 li
f
62.8226 386.104 mo
57.8426 393.884 li
62.8226 393.884 li
62.8226 386.104 li
62.3026 384.384 mo
64.7826 384.384 li
64.7826 393.884 li
66.8626 393.884 li
66.8626 395.524 li
64.7826 395.524 li
64.7826 398.964 li
62.8226 398.964 li
62.8226 395.524 li
56.2426 395.524 li
56.2426 393.624 li
62.3026 384.384 li
f
74.9796 329.598 mo
71.4796 329.598 li
f
74.9796 329.598 mo
71.4796 329.598 li
@
42.5427 323.92 mo
41.5227 323.92 40.7627 324.42 40.2427 325.42 cv
39.7227 326.42 39.4827 327.92 39.4827 329.92 cv
39.4827 331.92 39.7227 333.42 40.2427 334.42 cv
40.7627 335.42 41.5227 335.92 42.5427 335.92 cv
43.5627 335.92 44.3227 335.42 44.8427 334.42 cv
45.3427 333.42 45.6027 331.92 45.6027 329.92 cv
45.6027 327.92 45.3427 326.42 44.8427 325.42 cv
44.3227 324.42 43.5627 323.92 42.5427 323.92 cv
42.5427 322.36 mo
44.1627 322.36 45.4027 323.02 46.2827 324.3 cv
47.1427 325.6 47.5827 327.48 47.5827 329.92 cv
47.5827 332.38 47.1427 334.26 46.2827 335.54 cv
45.4027 336.82 44.1627 337.46 42.5427 337.46 cv
40.9027 337.46 39.6427 336.82 38.7827 335.54 cv
37.9227 334.26 37.5027 332.38 37.5027 329.92 cv
37.5027 327.48 37.9227 325.6 38.7827 324.3 cv
39.6427 323.02 40.9027 322.36 42.5427 322.36 cv
f
51.0427 334.72 mo
53.1027 334.72 li
53.1027 337.2 li
51.0427 337.2 li
51.0427 334.72 li
f
57.4226 322.62 mo
65.1626 322.62 li
65.1626 324.28 li
59.2226 324.28 li
59.2226 327.86 li
59.5026 327.76 59.8026 327.68 60.0826 327.64 cv
60.3626 327.6 60.6626 327.56 60.9426 327.56 cv
62.5626 327.56 63.8426 328.02 64.8026 328.9 cv
65.7626 329.8 66.2426 331 66.2426 332.52 cv
66.2426 334.1 65.7426 335.32 64.7626 336.18 cv
63.7826 337.04 62.4026 337.46 60.6426 337.46 cv
60.0226 337.46 59.4026 337.4 58.7626 337.32 cv
58.1226 337.22 57.4826 337.08 56.8026 336.86 cv
56.8026 334.88 li
57.3826 335.2 57.9826 335.44 58.6226 335.6 cv
59.2426 335.76 59.9026 335.82 60.6026 335.82 cv
61.7226 335.82 62.6226 335.54 63.2826 334.94 cv
63.9226 334.34 64.2626 333.54 64.2626 332.52 cv
64.2626 331.52 63.9226 330.72 63.2826 330.12 cv
62.6226 329.52 61.7226 329.22 60.6026 329.22 cv
60.0826 329.22 59.5426 329.28 59.0226 329.4 cv
58.5026 329.52 57.9626 329.7 57.4226 329.94 cv
57.4226 322.62 li
f
74.9796 267.834 mo
71.4796 267.834 li
f
74.9796 267.834 mo
71.4796 267.834 li
@
42.5427 262.155 mo
41.5227 262.155 40.7627 262.655 40.2427 263.655 cv
39.7227 264.655 39.4827 266.155 39.4827 268.155 cv
39.4827 270.155 39.7227 271.655 40.2427 272.655 cv
40.7627 273.655 41.5227 274.155 42.5427 274.155 cv
43.5627 274.155 44.3227 273.655 44.8427 272.655 cv
45.3427 271.655 45.6027 270.155 45.6027 268.155 cv
45.6027 266.155 45.3427 264.655 44.8427 263.655 cv
44.3227 262.655 43.5627 262.155 42.5427 262.155 cv
42.5427 260.595 mo
44.1627 260.595 45.4027 261.255 46.2827 262.535 cv
47.1427 263.835 47.5827 265.715 47.5827 268.155 cv
47.5827 270.615 47.1427 272.495 46.2827 273.775 cv
45.4027 275.055 44.1627 275.695 42.5427 275.695 cv
40.9027 275.695 39.6427 275.055 38.7827 273.775 cv
37.9227 272.495 37.5027 270.615 37.5027 268.155 cv
37.5027 265.715 37.9227 263.835 38.7827 262.535 cv
39.6427 261.255 40.9027 260.595 42.5427 260.595 cv
f
51.0427 272.955 mo
53.1027 272.955 li
53.1027 275.435 li
51.0427 275.435 li
51.0427 272.955 li
f
61.8626 267.355 mo
60.9826 267.355 60.2826 267.675 59.7626 268.275 cv
59.2426 268.875 58.9826 269.715 58.9826 270.755 cv
58.9826 271.815 59.2426 272.655 59.7626 273.255 cv
60.2826 273.855 60.9826 274.155 61.8626 274.155 cv
62.7426 274.155 63.4426 273.855 63.9626 273.255 cv
64.4826 272.655 64.7426 271.815 64.7426 270.755 cv
64.7426 269.715 64.4826 268.875 63.9626 268.275 cv
63.4426 267.675 62.7426 267.355 61.8626 267.355 cv
65.7826 261.175 mo
65.7826 262.975 li
65.2826 262.735 64.7826 262.555 64.2826 262.435 cv
63.7626 262.315 63.2626 262.255 62.7826 262.255 cv
61.4626 262.255 60.4626 262.695 59.7826 263.575 cv
59.1026 264.455 58.7026 265.795 58.6226 267.555 cv
59.0026 266.995 59.4826 266.555 60.0626 266.255 cv
60.6426 265.955 61.2826 265.795 61.9826 265.795 cv
63.4426 265.795 64.6026 266.255 65.4426 267.135 cv
66.2826 268.015 66.7226 269.235 66.7226 270.755 cv
66.7226 272.255 66.2626 273.455 65.3826 274.355 cv
64.5026 275.255 63.3226 275.695 61.8626 275.695 cv
60.1826 275.695 58.8826 275.055 58.0026 273.775 cv
57.1026 272.495 56.6626 270.615 56.6626 268.155 cv
56.6626 265.855 57.2026 264.015 58.3026 262.655 cv
59.3826 261.295 60.8626 260.595 62.7026 260.595 cv
63.1826 260.595 63.6826 260.655 64.2026 260.735 cv
64.7026 260.835 65.2226 260.975 65.7826 261.175 cv
f
74.9796 206.07 mo
71.4796 206.07 li
f
74.9796 206.07 mo
71.4796 206.07 li
@
42.5427 200.391 mo
41.5227 200.391 40.7627 200.891 40.2427 201.891 cv
39.7227 202.891 39.4827 204.391 39.4827 206.391 cv
39.4827 208.391 39.7227 209.891 40.2427 210.891 cv
40.7627 211.891 41.5227 212.391 42.5427 212.391 cv
43.5627 212.391 44.3227 211.891 44.8427 210.891 cv
45.3427 209.891 45.6027 208.391 45.6027 206.391 cv
45.6027 204.391 45.3427 202.891 44.8427 201.891 cv
44.3227 200.891 43.5627 200.391 42.5427 200.391 cv
42.5427 198.831 mo
44.1627 198.831 45.4027 199.491 46.2827 200.771 cv
47.1427 202.071 47.5827 203.951 47.5827 206.391 cv
47.5827 208.851 47.1427 210.731 46.2827 212.011 cv
45.4027 213.291 44.1627 213.931 42.5427 213.931 cv
40.9027 213.931 39.6427 213.291 38.7827 212.011 cv
37.9227 210.731 37.5027 208.851 37.5027 206.391 cv
37.5027 203.951 37.9227 202.071 38.7827 200.771 cv
39.6427 199.491 40.9027 198.831 42.5427 198.831 cv
f
51.0427 211.191 mo
53.1027 211.191 li
53.1027 213.671 li
51.0427 213.671 li
51.0427 211.191 li
f
56.9026 199.091 mo
66.2826 199.091 li
66.2826 199.931 li
60.9826 213.671 li
58.9226 213.671 li
63.9026 200.751 li
56.9026 200.751 li
56.9026 199.091 li
f
74.9796 144.306 mo
71.4796 144.306 li
f
74.9796 144.306 mo
71.4796 144.306 li
@
42.5427 138.627 mo
41.5227 138.627 40.7627 139.127 40.2427 140.127 cv
39.7227 141.127 39.4827 142.627 39.4827 144.627 cv
39.4827 146.627 39.7227 148.127 40.2427 149.127 cv
40.7627 150.127 41.5227 150.627 42.5427 150.627 cv
43.5627 150.627 44.3227 150.127 44.8427 149.127 cv
45.3427 148.127 45.6027 146.627 45.6027 144.627 cv
45.6027 142.627 45.3427 141.127 44.8427 140.127 cv
44.3227 139.127 43.5627 138.627 42.5427 138.627 cv
42.5427 137.067 mo
44.1627 137.067 45.4027 137.727 46.2827 139.007 cv
47.1427 140.307 47.5827 142.187 47.5827 144.627 cv
47.5827 147.087 47.1427 148.967 46.2827 150.247 cv
45.4027 151.527 44.1627 152.167 42.5427 152.167 cv
40.9027 152.167 39.6427 151.527 38.7827 150.247 cv
37.9227 148.967 37.5027 147.087 37.5027 144.627 cv
37.5027 142.187 37.9227 140.307 38.7827 139.007 cv
39.6427 137.727 40.9027 137.067 42.5427 137.067 cv
f
51.0427 149.427 mo
53.1027 149.427 li
53.1027 151.907 li
51.0427 151.907 li
51.0427 149.427 li
f
61.6226 144.987 mo
60.6826 144.987 59.9426 145.247 59.4026 145.747 cv
58.8626 146.247 58.6026 146.927 58.6026 147.807 cv
58.6026 148.687 58.8626 149.387 59.4026 149.887 cv
59.9426 150.387 60.6826 150.627 61.6226 150.627 cv
62.5426 150.627 63.2826 150.387 63.8226 149.867 cv
64.3626 149.367 64.6426 148.687 64.6426 147.807 cv
64.6426 146.927 64.3626 146.247 63.8426 145.747 cv
63.3026 145.247 62.5626 144.987 61.6226 144.987 cv
59.6426 144.147 mo
58.8026 143.947 58.1426 143.547 57.6626 142.967 cv
57.1826 142.387 56.9626 141.687 56.9626 140.847 cv
56.9626 139.687 57.3626 138.767 58.2026 138.087 cv
59.0226 137.407 60.1626 137.067 61.6226 137.067 cv
63.0626 137.067 64.2026 137.407 65.0426 138.087 cv
65.8626 138.767 66.2826 139.687 66.2826 140.847 cv
66.2826 141.687 66.0426 142.387 65.5626 142.967 cv
65.0826 143.547 64.4426 143.947 63.6026 144.147 cv
64.5426 144.367 65.2826 144.807 65.8226 145.447 cv
66.3426 146.087 66.6226 146.887 66.6226 147.807 cv
66.6226 149.227 66.1826 150.307 65.3226 151.047 cv
64.4426 151.807 63.2226 152.167 61.6226 152.167 cv
60.0026 152.167 58.7626 151.807 57.9026 151.047 cv
57.0426 150.307 56.6226 149.227 56.6226 147.807 cv
56.6226 146.887 56.8826 146.087 57.4226 145.447 cv
57.9426 144.807 58.6826 144.367 59.6426 144.147 cv
58.9226 141.027 mo
58.9226 141.787 59.1426 142.387 59.6226 142.807 cv
60.1026 143.227 60.7626 143.427 61.6226 143.427 cv
62.4626 143.427 63.1226 143.227 63.6026 142.807 cv
64.0826 142.387 64.3226 141.787 64.3226 141.027 cv
64.3226 140.267 64.0826 139.687 63.6026 139.267 cv
63.1226 138.847 62.4626 138.627 61.6226 138.627 cv
60.7626 138.627 60.1026 138.847 59.6226 139.267 cv
59.1426 139.687 58.9226 140.267 58.9226 141.027 cv
f
74.9796 82.5414 mo
71.4796 82.5414 li
f
74.9796 82.5414 mo
71.4796 82.5414 li
@
42.5427 76.8629 mo
41.5227 76.8629 40.7627 77.3629 40.2427 78.3629 cv
39.7227 79.3629 39.4827 80.8629 39.4827 82.8629 cv
39.4827 84.8629 39.7227 86.3629 40.2427 87.3629 cv
40.7627 88.3629 41.5227 88.8629 42.5427 88.8629 cv
43.5627 88.8629 44.3227 88.3629 44.8427 87.3629 cv
45.3427 86.3629 45.6027 84.8629 45.6027 82.8629 cv
45.6027 80.8629 45.3427 79.3629 44.8427 78.3629 cv
44.3227 77.3629 43.5627 76.8629 42.5427 76.8629 cv
42.5427 75.3029 mo
44.1627 75.3029 45.4027 75.9629 46.2827 77.2429 cv
47.1427 78.5429 47.5827 80.4229 47.5827 82.8629 cv
47.5827 85.3229 47.1427 87.2029 46.2827 88.4829 cv
45.4027 89.7629 44.1627 90.4029 42.5427 90.4029 cv
40.9027 90.4029 39.6427 89.7629 38.7827 88.4829 cv
37.9227 87.2029 37.5027 85.3229 37.5027 82.8629 cv
37.5027 80.4229 37.9227 78.5429 38.7827 77.2429 cv
39.6427 75.9629 40.9027 75.3029 42.5427 75.3029 cv
f
51.0427 87.6629 mo
53.1027 87.6629 li
53.1027 90.1429 li
51.0427 90.1429 li
51.0427 87.6629 li
f
57.4626 89.8429 mo
57.4626 88.0429 li
57.9426 88.2829 58.4426 88.4629 58.9626 88.5829 cv
59.4626 88.7029 59.9626 88.7629 60.4626 88.7629 cv
61.7426 88.7629 62.7426 88.3429 63.4226 87.4629 cv
64.1026 86.5829 64.5026 85.2629 64.6226 83.4629 cv
64.2226 84.0229 63.7426 84.4629 63.1826 84.7629 cv
62.6026 85.0629 61.9626 85.2029 61.2626 85.2029 cv
59.7826 85.2029 58.6226 84.7629 57.7826 83.8829 cv
56.9426 83.0029 56.5226 81.8029 56.5226 80.2629 cv
56.5226 78.7829 56.9626 77.5829 57.8426 76.6629 cv
58.7226 75.7629 59.9026 75.3029 61.3826 75.3029 cv
63.0626 75.3029 64.3626 75.9629 65.2426 77.2429 cv
66.1226 78.5429 66.5826 80.4229 66.5826 82.8629 cv
66.5826 85.1829 66.0226 87.0029 64.9426 88.3629 cv
63.8426 89.7229 62.3826 90.4029 60.5426 90.4029 cv
60.0426 90.4029 59.5426 90.3429 59.0426 90.2629 cv
58.5226 90.1829 58.0026 90.0429 57.4626 89.8429 cv
61.3826 83.6629 mo
62.2626 83.6629 62.9626 83.3629 63.4826 82.7629 cv
64.0026 82.1629 64.2626 81.3229 64.2626 80.2629 cv
64.2626 79.2229 64.0026 78.3829 63.4826 77.7829 cv
62.9626 77.1829 62.2626 76.8629 61.3826 76.8629 cv
60.5026 76.8629 59.8026 77.1829 59.2826 77.7829 cv
58.7626 78.3829 58.5026 79.2229 58.5026 80.2629 cv
58.5026 81.3229 58.7626 82.1629 59.2826 82.7629 cv
59.8026 83.3629 60.5026 83.6629 61.3826 83.6629 cv
f
74.9796 20.7772 mo
71.4796 20.7772 li
f
74.9796 20.7772 mo
71.4796 20.7772 li
@
38.6627 26.7188 mo
41.8827 26.7188 li
41.8827 15.5988 li
38.3827 16.2988 li
38.3827 14.4988 li
41.8627 13.7988 li
43.8427 13.7988 li
43.8427 26.7188 li
47.0627 26.7188 li
47.0627 28.3788 li
38.6627 28.3788 li
38.6627 26.7188 li
f
51.0427 25.8988 mo
53.1027 25.8988 li
53.1027 28.3788 li
51.0427 28.3788 li
51.0427 25.8988 li
f
61.6226 15.0988 mo
60.6026 15.0988 59.8426 15.5988 59.3226 16.5988 cv
58.8026 17.5988 58.5626 19.0988 58.5626 21.0988 cv
58.5626 23.0988 58.8026 24.5988 59.3226 25.5988 cv
59.8426 26.5988 60.6026 27.0988 61.6226 27.0988 cv
62.6426 27.0988 63.4026 26.5988 63.9226 25.5988 cv
64.4226 24.5988 64.6826 23.0988 64.6826 21.0988 cv
64.6826 19.0988 64.4226 17.5988 63.9226 16.5988 cv
63.4026 15.5988 62.6426 15.0988 61.6226 15.0988 cv
61.6226 13.5388 mo
63.2426 13.5388 64.4826 14.1988 65.3626 15.4788 cv
66.2226 16.7788 66.6626 18.6588 66.6626 21.0988 cv
66.6626 23.5588 66.2226 25.4388 65.3626 26.7188 cv
64.4826 27.9988 63.2426 28.6388 61.6226 28.6388 cv
59.9826 28.6388 58.7226 27.9988 57.8626 26.7188 cv
57.0026 25.4388 56.5826 23.5588 56.5826 21.0988 cv
56.5826 18.6588 57.0026 16.7788 57.8626 15.4788 cv
58.7226 14.1988 59.9826 13.5388 61.6226 13.5388 cv
f
15.3864 342.903 mo
22.6464 345.583 li
22.6464 340.223 li
15.3864 342.903 li
13.4464 344.023 mo
13.4464 341.783 li
28.0264 336.223 li
28.0264 338.283 li
24.2864 339.603 li
24.2864 346.183 li
28.0264 347.503 li
28.0264 349.583 li
13.4464 344.023 li
f
17.5064 326.303 mo
19.1864 326.303 li
18.9064 326.823 18.7064 327.323 18.5664 327.843 cv
18.4264 328.363 18.3464 328.863 18.3464 329.383 cv
18.3464 330.543 18.7264 331.463 19.4664 332.103 cv
20.2064 332.743 21.2464 333.063 22.5664 333.063 cv
23.9064 333.063 24.9464 332.743 25.6864 332.103 cv
26.4264 331.463 26.7864 330.543 26.7864 329.383 cv
26.7864 328.863 26.7264 328.363 26.5864 327.843 cv
26.4464 327.323 26.2264 326.823 25.9464 326.303 cv
27.6064 326.303 li
27.8464 326.823 28.0264 327.343 28.1264 327.863 cv
28.2264 328.403 28.2864 328.983 28.2864 329.583 cv
28.2864 331.223 27.7864 332.543 26.7464 333.503 cv
25.7264 334.483 24.3264 334.963 22.5664 334.963 cv
20.7864 334.963 19.3864 334.483 18.3664 333.503 cv
17.3464 332.523 16.8264 331.183 16.8264 329.463 cv
16.8264 328.903 16.8864 328.363 17.0064 327.843 cv
17.1264 327.323 17.2864 326.803 17.5064 326.303 cv
f
17.5064 315.303 mo
19.1864 315.303 li
18.9064 315.823 18.7064 316.323 18.5664 316.843 cv
18.4264 317.363 18.3464 317.863 18.3464 318.383 cv
18.3464 319.543 18.7264 320.463 19.4664 321.103 cv
20.2064 321.743 21.2464 322.063 22.5664 322.063 cv
23.9064 322.063 24.9464 321.743 25.6864 321.103 cv
26.4264 320.463 26.7864 319.543 26.7864 318.383 cv
26.7864 317.863 26.7264 317.363 26.5864 316.843 cv
26.4464 316.323 26.2264 315.823 25.9464 315.303 cv
27.6064 315.303 li
27.8464 315.823 28.0264 316.343 28.1264 316.863 cv
28.2264 317.403 28.2864 317.983 28.2864 318.583 cv
28.2864 320.223 27.7864 321.543 26.7464 322.503 cv
25.7264 323.483 24.3264 323.963 22.5664 323.963 cv
20.7864 323.963 19.3864 323.483 18.3664 322.503 cv
17.3464 321.523 16.8264 320.183 16.8264 318.463 cv
16.8264 317.903 16.8864 317.363 17.0064 316.843 cv
17.1264 316.323 17.2864 315.803 17.5064 315.303 cv
f
23.7064 312.363 mo
17.0864 312.363 li
17.0864 310.563 li
23.6464 310.563 li
24.6864 310.563 25.4464 310.363 25.9664 309.963 cv
26.4864 309.563 26.7464 308.963 26.7464 308.143 cv
26.7464 307.183 26.4464 306.403 25.8264 305.843 cv
25.2064 305.283 24.3664 305.003 23.2864 305.003 cv
17.0864 305.003 li
17.0864 303.203 li
28.0264 303.203 li
28.0264 305.003 li
26.3464 305.003 li
27.0264 305.443 27.5064 305.963 27.8264 306.523 cv
28.1264 307.103 28.2864 307.763 28.2864 308.523 cv
28.2864 309.783 27.9064 310.743 27.1264 311.383 cv
26.3664 312.043 25.2264 312.363 23.7064 312.363 cv
16.8264 307.843 mo
16.8264 307.843 li
f
18.7664 293.163 mo
18.6464 293.363 18.5664 293.583 18.5064 293.823 cv
18.4664 294.063 18.4264 294.323 18.4264 294.603 cv
18.4264 295.623 18.7664 296.403 19.4264 296.943 cv
20.0864 297.503 21.0264 297.763 22.2664 297.763 cv
28.0264 297.763 li
28.0264 299.563 li
17.0864 299.563 li
17.0864 297.763 li
18.7864 297.763 li
18.1264 297.403 17.6264 296.903 17.3064 296.303 cv
16.9864 295.703 16.8264 294.963 16.8264 294.083 cv
16.8264 293.963 16.8464 293.823 16.8464 293.663 cv
16.8664 293.523 16.8864 293.363 16.9264 293.163 cv
18.7664 293.163 li
f
22.5264 286.303 mo
22.5264 287.763 22.7064 288.763 23.0264 289.323 cv
23.3664 289.883 23.9264 290.163 24.7264 290.163 cv
25.3664 290.163 25.8864 289.963 26.2464 289.543 cv
26.6264 289.123 26.8064 288.543 26.8064 287.823 cv
26.8064 286.823 26.4664 286.023 25.7464 285.423 cv
25.0464 284.823 24.1064 284.523 22.9264 284.523 cv
22.5264 284.523 li
22.5264 286.303 li
21.7864 282.723 mo
28.0264 282.723 li
28.0264 284.523 li
26.3664 284.523 li
27.0464 284.943 27.5264 285.463 27.8264 286.063 cv
28.1264 286.663 28.2864 287.423 28.2864 288.303 cv
28.2864 289.423 27.9864 290.323 27.3664 290.983 cv
26.7464 291.643 25.9064 291.963 24.8464 291.963 cv
23.6264 291.963 22.7064 291.563 22.0664 290.723 cv
21.4464 289.903 21.1264 288.683 21.1264 287.043 cv
21.1264 284.523 li
20.9464 284.523 li
20.1264 284.523 19.4864 284.803 19.0264 285.343 cv
18.5864 285.883 18.3464 286.643 18.3464 287.623 cv
18.3464 288.263 18.4264 288.863 18.5864 289.463 cv
18.7464 290.063 18.9664 290.623 19.2464 291.163 cv
17.5864 291.163 li
17.3464 290.523 17.1464 289.883 17.0264 289.263 cv
16.9064 288.643 16.8264 288.043 16.8264 287.443 cv
16.8264 285.863 17.2464 284.683 18.0664 283.903 cv
18.8864 283.123 20.1264 282.723 21.7864 282.723 cv
f
17.5064 271.143 mo
19.1864 271.143 li
18.9064 271.663 18.7064 272.163 18.5664 272.683 cv
18.4264 273.203 18.3464 273.703 18.3464 274.223 cv
18.3464 275.383 18.7264 276.303 19.4664 276.943 cv
20.2064 277.583 21.2464 277.903 22.5664 277.903 cv
23.9064 277.903 24.9464 277.583 25.6864 276.943 cv
26.4264 276.303 26.7864 275.383 26.7864 274.223 cv
26.7864 273.703 26.7264 273.203 26.5864 272.683 cv
26.4464 272.163 26.2264 271.663 25.9464 271.143 cv
27.6064 271.143 li
27.8464 271.663 28.0264 272.183 28.1264 272.703 cv
28.2264 273.243 28.2864 273.823 28.2864 274.423 cv
28.2864 276.063 27.7864 277.383 26.7464 278.343 cv
25.7264 279.323 24.3264 279.803 22.5664 279.803 cv
20.7864 279.803 19.3864 279.323 18.3664 278.343 cv
17.3464 277.363 16.8264 276.023 16.8264 274.303 cv
16.8264 273.743 16.8864 273.203 17.0064 272.683 cv
17.1264 272.163 17.2864 271.643 17.5064 271.143 cv
f
29.0264 263.462 mo
30.3064 263.982 31.1664 264.482 31.5664 264.962 cv
31.9664 265.443 32.1664 266.082 32.1664 266.883 cv
32.1664 268.323 li
30.6664 268.323 li
30.6664 267.262 li
30.6664 266.783 30.5464 266.402 30.3064 266.122 cv
30.0664 265.842 29.5264 265.543 28.6464 265.202 cv
27.8464 264.883 li
17.0864 269.302 li
17.0864 267.402 li
25.6464 263.982 li
17.0864 260.563 li
17.0864 258.663 li
29.0264 263.462 li
f
21.1864 242.823 mo
21.3464 242.403 21.6464 241.983 22.1064 241.583 cv
22.5864 241.183 23.2264 240.783 24.0464 240.383 cv
28.0264 238.383 li
28.0264 240.503 li
24.2864 242.363 li
23.3264 242.843 22.6664 243.323 22.3464 243.763 cv
22.0264 244.223 21.8664 244.843 21.8664 245.623 cv
21.8664 247.763 li
28.0264 247.763 li
28.0264 249.743 li
13.4464 249.743 li
13.4464 245.283 li
13.4464 243.623 13.8064 242.383 14.4864 241.563 cv
15.1864 240.743 16.2464 240.323 17.6464 240.323 cv
18.5664 240.323 19.3464 240.543 19.9464 240.963 cv
20.5464 241.403 20.9664 242.023 21.1864 242.823 cv
15.0664 247.763 mo
20.2464 247.763 li
20.2464 245.283 li
20.2464 244.343 20.0264 243.623 19.5864 243.143 cv
19.1464 242.663 18.5064 242.403 17.6464 242.403 cv
16.8064 242.403 16.1664 242.663 15.7264 243.143 cv
15.2864 243.623 15.0664 244.343 15.0664 245.283 cv
15.0664 247.763 li
f
22.5264 230.943 mo
22.5264 232.403 22.7064 233.403 23.0264 233.963 cv
23.3664 234.523 23.9264 234.803 24.7264 234.803 cv
25.3664 234.803 25.8864 234.603 26.2464 234.183 cv
26.6264 233.763 26.8064 233.183 26.8064 232.463 cv
26.8064 231.463 26.4664 230.663 25.7464 230.063 cv
25.0464 229.463 24.1064 229.163 22.9264 229.163 cv
22.5264 229.163 li
22.5264 230.943 li
21.7864 227.363 mo
28.0264 227.363 li
28.0264 229.163 li
26.3664 229.163 li
27.0464 229.583 27.5264 230.103 27.8264 230.703 cv
28.1264 231.303 28.2864 232.063 28.2864 232.943 cv
28.2864 234.063 27.9864 234.963 27.3664 235.623 cv
26.7464 236.283 25.9064 236.603 24.8464 236.603 cv
23.6264 236.603 22.7064 236.203 22.0664 235.363 cv
21.4464 234.543 21.1264 233.323 21.1264 231.683 cv
21.1264 229.163 li
20.9464 229.163 li
20.1264 229.163 19.4864 229.443 19.0264 229.983 cv
18.5864 230.523 18.3464 231.283 18.3464 232.263 cv
18.3464 232.903 18.4264 233.503 18.5864 234.103 cv
18.7464 234.703 18.9664 235.263 19.2464 235.803 cv
17.5864 235.803 li
17.3464 235.163 17.1464 234.523 17.0264 233.903 cv
16.9064 233.283 16.8264 232.683 16.8264 232.083 cv
16.8264 230.503 17.2464 229.323 18.0664 228.543 cv
18.8864 227.763 20.1264 227.363 21.7864 227.363 cv
f
13.9864 221.882 mo
17.0864 221.882 li
17.0864 218.182 li
18.4864 218.182 li
18.4864 221.882 li
24.4264 221.882 li
25.3264 221.882 25.9064 221.762 26.1464 221.522 cv
26.4064 221.282 26.5264 220.782 26.5264 220.022 cv
26.5264 218.182 li
28.0264 218.182 li
28.0264 220.022 li
28.0264 221.422 27.7664 222.382 27.2464 222.902 cv
26.7264 223.422 25.7864 223.682 24.4264 223.682 cv
18.4864 223.682 li
18.4864 225.002 li
17.0864 225.002 li
17.0864 223.682 li
13.9864 223.682 li
13.9864 221.882 li
f
22.1064 206.462 mo
22.9864 206.462 li
22.9864 214.722 li
24.2264 214.642 25.1864 214.282 25.8264 213.602 cv
26.4664 212.942 26.7864 212.022 26.7864 210.822 cv
26.7864 210.142 26.7064 209.462 26.5464 208.822 cv
26.3864 208.182 26.1264 207.522 25.7664 206.882 cv
27.4664 206.882 li
27.7464 207.522 27.9664 208.182 28.0864 208.862 cv
28.2064 209.542 28.2864 210.242 28.2864 210.922 cv
28.2864 212.682 27.7864 214.062 26.7864 215.082 cv
25.7864 216.102 24.4064 216.602 22.6664 216.602 cv
20.8864 216.602 19.4664 216.122 18.4064 215.162 cv
17.3664 214.202 16.8264 212.882 16.8264 211.242 cv
16.8264 209.762 17.3064 208.602 18.2464 207.742 cv
19.2064 206.902 20.4864 206.462 22.1064 206.462 cv
21.5864 208.262 mo
20.6064 208.282 19.8264 208.562 19.2264 209.082 cv
18.6464 209.622 18.3464 210.342 18.3464 211.222 cv
18.3464 212.222 18.6464 213.022 19.2064 213.622 cv
19.7664 214.222 20.5664 214.582 21.5864 214.662 cv
21.5864 208.262 li
f
1.5 lw
2 lc
123.678 513.779 mo
133.516 380.999 li
143.354 324.231 li
153.192 290.398 li
163.03 264.128 li
172.868 254.905 li
182.706 243.43 li
192.544 226.315 li
202.382 207.195 li
212.22 183.135 li
222.058 162.107 li
231.896 147.407 li
241.734 134.739 li
251.572 123.484 li
261.41 111.667 li
271.248 103.376 li
281.086 97.3647 li
290.924 88.7864 li
300.762 83.0767 li
310.6 79.1786 li
320.438 77.9159 li
330.276 75.0885 li
340.114 71.712 li
349.952 68.0611 li
359.79 64.9454 li
369.628 62.8455 li
379.466 60.7592 li
389.304 58.8239 li
399.142 57.7534 li
408.98 55.8593 li
418.818 54.6377 li
428.656 53.3475 li
438.494 52.0436 li
448.332 51.3436 li
458.17 50.5338 li
468.008 49.4769 li
477.846 48.626 li
487.684 48.3926 li
497.522 48.4887 li
507.36 48.6122 li
517.198 47.528 li
527.036 46.9652 li
536.874 47.3358 li
546.712 46.0045 li
556.55 45.126 li
566.388 44.5358 li
576.227 44.4672 li
586.065 44.0554 li
595.903 42.8476 li
605.741 41.9966 li
615.579 41.1594 li
625.417 41.2554 li
635.255 40.2398 li
645.093 39.9241 li
654.931 39.6633 li
664.769 39.3339 li
674.607 39.1281 li
684.445 39.0045 li
694.283 38.6202 li
704.121 38.6476 li
713.959 38.7986 li
723.797 38.9084 li
733.635 38.3045 li
743.473 38.5927 li
753.311 38.5927 li
763.149 38.5927 li
772.987 37.632 li
782.825 34.9555 li
792.663 34.928 li
802.501 34.832 li
812.339 34.7634 li
822.177 34.7496 li
832.015 34.6947 li
841.853 34.6947 li
851.691 34.6398 li
861.529 34.5712 li
871.367 34.5438 li
881.205 34.5163 li
891.043 34.4477 li
900.881 34.434 li
910.719 34.4065 li
920.557 34.379 li
930.395 34.379 li
940.233 34.3242 li
950.071 34.2555 li
959.909 34.2281 li
969.747 34.2281 li
979.585 34.2418 li
989.423 34.1732 li
999.261 34.1869 li
1009.1 34.1732 li
1018.94 34.1594 li
1028.78 34.132 li
1038.61 34.0908 li
1048.45 34.0634 li
1058.29 34.0496 li
1068.13 34.0222 li
1077.97 33.9948 li
1087.8 34.0085 li
1097.64 33.9673 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
123.678 521.767 mo
133.516 400.03 li
143.354 338.821 li
153.192 302.628 li
163.03 274.587 li
172.868 265.96 li
182.706 254.081 li
192.544 236.437 li
202.382 216.24 li
212.22 192.337 li
222.058 168.949 li
231.896 154.764 li
241.734 141.135 li
251.572 129.894 li
261.41 118.879 li
271.248 109.944 li
281.086 103.562 li
290.924 94.4207 li
300.762 87.009 li
310.6 83.6119 li
320.438 82.5208 li
330.276 80.1119 li
340.114 77.1061 li
349.952 73.462 li
359.79 70.5385 li
369.628 68.5003 li
379.466 66.5856 li
389.304 64.9592 li
399.142 63.8474 li
408.98 61.6033 li
418.818 60.2651 li
428.656 58.5563 li
438.494 57.3004 li
448.332 56.0034 li
458.17 55.4063 li
468.008 54.3769 li
477.846 53.4092 li
487.684 53.3681 li
497.522 54.2328 li
507.36 54.1505 li
517.198 53.5328 li
527.036 52.7711 li
536.874 53.3063 li
546.712 51.2269 li
556.55 50.5475 li
566.388 50.1152 li
576.227 50.1564 li
586.065 49.5593 li
595.903 48.777 li
605.741 48.3446 li
615.579 47.5828 li
625.417 47.3358 li
635.255 46.5328 li
645.093 46.5328 li
654.931 46.0593 li
664.769 45.8535 li
674.607 45.6887 li
684.445 45.2358 li
694.283 44.9681 li
704.121 44.7417 li
713.959 44.9681 li
723.797 44.7829 li
733.635 44.3917 li
743.473 44.824 li
753.311 44.8035 li
763.149 44.8652 li
772.987 44.1858 li
782.825 42.1682 li
792.663 42.1682 li
802.501 42.1064 li
812.339 42.024 li
822.177 42.0035 li
832.015 41.9829 li
841.853 42.0035 li
851.691 42.024 li
861.529 41.8799 li
871.367 41.8799 li
881.205 41.8799 li
891.043 41.7976 li
900.881 41.777 li
910.719 41.6946 li
920.557 41.7153 li
930.395 41.777 li
940.233 41.777 li
950.071 41.7564 li
959.909 41.6946 li
969.747 41.6329 li
979.585 41.6329 li
989.423 41.5712 li
999.261 41.5505 li
1009.1 41.4476 li
1018.94 41.4682 li
1028.78 41.4682 li
1038.61 41.4888 li
1048.45 41.4682 li
1058.29 41.4476 li
1068.13 41.427 li
1077.97 41.3859 li
1087.8 41.3652 li
1097.64 41.3859 li
@
gsave
120.178 525.267 mo
127.178 525.267 li
127.178 518.267 li
120.178 518.267 li
120.178 525.267 li
clp
120.678 524.767 mo
126.678 518.767 li
120.678 518.767 mo
126.678 524.767 li
f
1 lw
0 lc
120.678 524.767 mo
126.678 518.767 li
120.678 518.767 mo
126.678 524.767 li
@
grestore
gsave
130.016 403.53 mo
137.016 403.53 li
137.016 396.53 li
130.016 396.53 li
130.016 403.53 li
clp
130.516 403.03 mo
136.516 397.03 li
130.516 397.03 mo
136.516 403.03 li
f
1 lw
0 lc
130.516 403.03 mo
136.516 397.03 li
130.516 397.03 mo
136.516 403.03 li
@
grestore
gsave
139.854 342.321 mo
146.854 342.321 li
146.854 335.322 li
139.854 335.322 li
139.854 342.321 li
clp
140.354 341.821 mo
146.354 335.821 li
140.354 335.821 mo
146.354 341.821 li
f
1 lw
0 lc
140.354 341.821 mo
146.354 335.821 li
140.354 335.821 mo
146.354 341.821 li
@
grestore
gsave
149.692 306.127 mo
156.692 306.127 li
156.692 299.128 li
149.692 299.128 li
149.692 306.127 li
clp
150.192 305.628 mo
156.192 299.628 li
150.192 299.628 mo
156.192 305.628 li
f
1 lw
0 lc
150.192 305.628 mo
156.192 299.628 li
150.192 299.628 mo
156.192 305.628 li
@
grestore
gsave
159.53 278.087 mo
166.53 278.087 li
166.53 271.087 li
159.53 271.087 li
159.53 278.087 li
clp
160.03 277.587 mo
166.03 271.587 li
160.03 271.587 mo
166.03 277.587 li
f
1 lw
0 lc
160.03 277.587 mo
166.03 271.587 li
160.03 271.587 mo
166.03 277.587 li
@
grestore
gsave
169.368 269.46 mo
176.368 269.46 li
176.368 262.46 li
169.368 262.46 li
169.368 269.46 li
clp
169.868 268.96 mo
175.868 262.96 li
169.868 262.96 mo
175.868 268.96 li
f
1 lw
0 lc
169.868 268.96 mo
175.868 262.96 li
169.868 262.96 mo
175.868 268.96 li
@
grestore
gsave
179.206 257.581 mo
186.206 257.581 li
186.206 250.581 li
179.206 250.581 li
179.206 257.581 li
clp
179.706 257.081 mo
185.706 251.081 li
179.706 251.081 mo
185.706 257.081 li
f
1 lw
0 lc
179.706 257.081 mo
185.706 251.081 li
179.706 251.081 mo
185.706 257.081 li
@
grestore
gsave
189.044 239.937 mo
196.044 239.937 li
196.044 232.937 li
189.044 232.937 li
189.044 239.937 li
clp
189.544 239.437 mo
195.544 233.437 li
189.544 233.437 mo
195.544 239.437 li
f
1 lw
0 lc
189.544 239.437 mo
195.544 233.437 li
189.544 233.437 mo
195.544 239.437 li
@
grestore
gsave
198.882 219.74 mo
205.882 219.74 li
205.882 212.74 li
198.882 212.74 li
198.882 219.74 li
clp
199.382 219.24 mo
205.382 213.24 li
199.382 213.24 mo
205.382 219.24 li
f
1 lw
0 lc
199.382 219.24 mo
205.382 213.24 li
199.382 213.24 mo
205.382 219.24 li
@
grestore
gsave
208.72 195.838 mo
215.72 195.838 li
215.72 188.837 li
208.72 188.837 li
208.72 195.838 li
clp
209.22 195.337 mo
215.22 189.337 li
209.22 189.337 mo
215.22 195.337 li
f
1 lw
0 lc
209.22 195.337 mo
215.22 189.337 li
209.22 189.337 mo
215.22 195.337 li
@
grestore
gsave
218.558 172.449 mo
225.558 172.449 li
225.558 165.45 li
218.558 165.45 li
218.558 172.449 li
clp
219.058 171.949 mo
225.058 165.949 li
219.058 165.949 mo
225.058 171.949 li
f
1 lw
0 lc
219.058 171.949 mo
225.058 165.949 li
219.058 165.949 mo
225.058 171.949 li
@
grestore
gsave
228.396 158.264 mo
235.396 158.264 li
235.396 151.264 li
228.396 151.264 li
228.396 158.264 li
clp
228.896 157.764 mo
234.896 151.764 li
228.896 151.764 mo
234.896 157.764 li
f
1 lw
0 lc
228.896 157.764 mo
234.896 151.764 li
228.896 151.764 mo
234.896 157.764 li
@
grestore
gsave
238.234 144.635 mo
245.234 144.635 li
245.234 137.635 li
238.234 137.635 li
238.234 144.635 li
clp
238.734 144.135 mo
244.734 138.135 li
238.734 138.135 mo
244.734 144.135 li
f
1 lw
0 lc
238.734 144.135 mo
244.734 138.135 li
238.734 138.135 mo
244.734 144.135 li
@
grestore
gsave
248.072 133.394 mo
255.072 133.394 li
255.072 126.394 li
248.072 126.394 li
248.072 133.394 li
clp
248.572 132.894 mo
254.572 126.894 li
248.572 126.894 mo
254.572 132.894 li
f
1 lw
0 lc
248.572 132.894 mo
254.572 126.894 li
248.572 126.894 mo
254.572 132.894 li
@
grestore
gsave
257.91 122.379 mo
264.91 122.379 li
264.91 115.379 li
257.91 115.379 li
257.91 122.379 li
clp
258.41 121.879 mo
264.41 115.879 li
258.41 115.879 mo
264.41 121.879 li
f
1 lw
0 lc
258.41 121.879 mo
264.41 115.879 li
258.41 115.879 mo
264.41 121.879 li
@
grestore
gsave
267.748 113.444 mo
274.748 113.444 li
274.748 106.444 li
267.748 106.444 li
267.748 113.444 li
clp
268.248 112.944 mo
274.248 106.944 li
268.248 106.944 mo
274.248 112.944 li
f
1 lw
0 lc
268.248 112.944 mo
274.248 106.944 li
268.248 106.944 mo
274.248 112.944 li
@
grestore
gsave
277.586 107.062 mo
284.586 107.062 li
284.586 100.062 li
277.586 100.062 li
277.586 107.062 li
clp
278.086 106.562 mo
284.086 100.562 li
278.086 100.562 mo
284.086 106.562 li
f
1 lw
0 lc
278.086 106.562 mo
284.086 100.562 li
278.086 100.562 mo
284.086 106.562 li
@
grestore
gsave
287.424 97.9207 mo
294.424 97.9207 li
294.424 90.9204 li
287.424 90.9204 li
287.424 97.9207 li
clp
287.924 97.4205 mo
293.924 91.4205 li
287.924 91.4205 mo
293.924 97.4205 li
f
1 lw
0 lc
287.924 97.4205 mo
293.924 91.4205 li
287.924 91.4205 mo
293.924 97.4205 li
@
grestore
gsave
297.262 90.5089 mo
304.262 90.5089 li
304.262 83.509 li
297.262 83.509 li
297.262 90.5089 li
clp
297.762 90.0089 mo
303.762 84.0089 li
297.762 84.0089 mo
303.762 90.0089 li
f
1 lw
0 lc
297.762 90.0089 mo
303.762 84.0089 li
297.762 84.0089 mo
303.762 90.0089 li
@
grestore
gsave
307.1 87.1119 mo
314.1 87.1119 li
314.1 80.112 li
307.1 80.112 li
307.1 87.1119 li
clp
307.6 86.6118 mo
313.6 80.6118 li
307.6 80.6118 mo
313.6 86.6118 li
f
1 lw
0 lc
307.6 86.6118 mo
313.6 80.6118 li
307.6 80.6118 mo
313.6 86.6118 li
@
grestore
gsave
316.938 86.0207 mo
323.938 86.0207 li
323.938 79.0208 li
316.938 79.0208 li
316.938 86.0207 li
clp
317.438 85.5206 mo
323.438 79.5206 li
317.438 79.5206 mo
323.438 85.5206 li
f
1 lw
0 lc
317.438 85.5206 mo
323.438 79.5206 li
317.438 79.5206 mo
323.438 85.5206 li
@
grestore
gsave
326.776 83.6118 mo
333.776 83.6118 li
333.776 76.6118 li
326.776 76.6118 li
326.776 83.6118 li
clp
327.276 83.1118 mo
333.276 77.1118 li
327.276 77.1118 mo
333.276 83.1118 li
f
1 lw
0 lc
327.276 83.1118 mo
333.276 77.1118 li
327.276 77.1118 mo
333.276 83.1118 li
@
grestore
gsave
336.614 80.6058 mo
343.614 80.6058 li
343.614 73.6059 li
336.614 73.6059 li
336.614 80.6058 li
clp
337.114 80.106 mo
343.114 74.106 li
337.114 74.106 mo
343.114 80.106 li
f
1 lw
0 lc
337.114 80.106 mo
343.114 74.106 li
337.114 74.106 mo
343.114 80.106 li
@
grestore
gsave
346.452 76.9617 mo
353.452 76.9617 li
353.452 69.9617 li
346.452 69.9617 li
346.452 76.9617 li
clp
346.952 76.4619 mo
352.952 70.4619 li
346.952 70.4619 mo
352.952 76.4619 li
f
1 lw
0 lc
346.952 76.4619 mo
352.952 70.4619 li
346.952 70.4619 mo
352.952 76.4619 li
@
grestore
gsave
356.29 74.0384 mo
363.29 74.0384 li
363.29 67.0385 li
356.29 67.0385 li
356.29 74.0384 li
clp
356.79 73.5383 mo
362.79 67.5383 li
356.79 67.5383 mo
362.79 73.5383 li
f
1 lw
0 lc
356.79 73.5383 mo
362.79 67.5383 li
356.79 67.5383 mo
362.79 73.5383 li
@
grestore
gsave
366.128 72.0001 mo
373.128 72.0001 li
373.128 65.0001 li
366.128 65.0001 li
366.128 72.0001 li
clp
366.628 71.5001 mo
372.628 65.5001 li
366.628 65.5001 mo
372.628 71.5001 li
f
1 lw
0 lc
366.628 71.5001 mo
372.628 65.5001 li
366.628 65.5001 mo
372.628 71.5001 li
@
grestore
gsave
375.966 70.0853 mo
382.966 70.0853 li
382.966 63.0853 li
375.966 63.0853 li
375.966 70.0853 li
clp
376.466 69.5854 mo
382.466 63.5854 li
376.466 63.5854 mo
382.466 69.5854 li
f
1 lw
0 lc
376.466 69.5854 mo
382.466 63.5854 li
376.466 63.5854 mo
382.466 69.5854 li
@
grestore
gsave
385.804 68.4591 mo
392.804 68.4591 li
392.804 61.4588 li
385.804 61.4588 li
385.804 68.4591 li
clp
386.304 67.959 mo
392.304 61.959 li
386.304 61.959 mo
392.304 67.959 li
f
1 lw
0 lc
386.304 67.959 mo
392.304 61.959 li
386.304 61.959 mo
392.304 67.959 li
@
grestore
gsave
395.642 67.3472 mo
402.642 67.3472 li
402.642 60.3472 li
395.642 60.3472 li
395.642 67.3472 li
clp
396.142 66.8472 mo
402.142 60.8472 li
396.142 60.8472 mo
402.142 66.8472 li
f
1 lw
0 lc
396.142 66.8472 mo
402.142 60.8472 li
396.142 60.8472 mo
402.142 66.8472 li
@
grestore
gsave
405.48 65.1033 mo
412.48 65.1033 li
412.48 58.103 li
405.48 58.103 li
405.48 65.1033 li
clp
405.98 64.6031 mo
411.98 58.6031 li
405.98 58.6031 mo
411.98 64.6031 li
f
1 lw
0 lc
405.98 64.6031 mo
411.98 58.6031 li
405.98 58.6031 mo
411.98 64.6031 li
@
grestore
gsave
415.318 63.765 mo
422.318 63.765 li
422.318 56.7651 li
415.318 56.7651 li
415.318 63.765 li
clp
415.818 63.265 mo
421.818 57.265 li
415.818 57.265 mo
421.818 63.265 li
f
1 lw
0 lc
415.818 63.265 mo
421.818 57.265 li
415.818 57.265 mo
421.818 63.265 li
@
grestore
gsave
425.156 62.0561 mo
432.156 62.0561 li
432.156 55.0562 li
425.156 55.0562 li
425.156 62.0561 li
clp
425.656 61.5562 mo
431.656 55.5562 li
425.656 55.5562 mo
431.656 61.5562 li
f
1 lw
0 lc
425.656 61.5562 mo
431.656 55.5562 li
425.656 55.5562 mo
431.656 61.5562 li
@
grestore
gsave
434.994 60.8002 mo
441.994 60.8002 li
441.994 53.8003 li
434.994 53.8003 li
434.994 60.8002 li
clp
435.494 60.3003 mo
441.494 54.3003 li
435.494 54.3003 mo
441.494 60.3003 li
f
1 lw
0 lc
435.494 60.3003 mo
441.494 54.3003 li
435.494 54.3003 mo
441.494 60.3003 li
@
grestore
gsave
444.832 59.5032 mo
451.832 59.5032 li
451.832 52.5032 li
444.832 52.5032 li
444.832 59.5032 li
clp
445.332 59.0032 mo
451.332 53.0032 li
445.332 53.0032 mo
451.332 59.0032 li
f
1 lw
0 lc
445.332 59.0032 mo
451.332 53.0032 li
445.332 53.0032 mo
451.332 59.0032 li
@
grestore
gsave
454.67 58.9062 mo
461.67 58.9062 li
461.67 51.9063 li
454.67 51.9063 li
454.67 58.9062 li
clp
455.17 58.4062 mo
461.17 52.4062 li
455.17 52.4062 mo
461.17 58.4062 li
f
1 lw
0 lc
455.17 58.4062 mo
461.17 52.4062 li
455.17 52.4062 mo
461.17 58.4062 li
@
grestore
gsave
464.508 57.8766 mo
471.508 57.8766 li
471.508 50.8767 li
464.508 50.8767 li
464.508 57.8766 li
clp
465.008 57.3768 mo
471.008 51.3768 li
465.008 51.3768 mo
471.008 57.3768 li
f
1 lw
0 lc
465.008 57.3768 mo
471.008 51.3768 li
465.008 51.3768 mo
471.008 57.3768 li
@
grestore
gsave
474.346 56.909 mo
481.346 56.909 li
481.346 49.9091 li
474.346 49.9091 li
474.346 56.909 li
clp
474.846 56.4091 mo
480.846 50.4091 li
474.846 50.4091 mo
480.846 56.4091 li
f
1 lw
0 lc
474.846 56.4091 mo
480.846 50.4091 li
474.846 50.4091 mo
480.846 56.4091 li
@
grestore
gsave
484.184 56.8679 mo
491.184 56.8679 li
491.184 49.8679 li
484.184 49.8679 li
484.184 56.8679 li
clp
484.684 56.3679 mo
490.684 50.3679 li
484.684 50.3679 mo
490.684 56.3679 li
f
1 lw
0 lc
484.684 56.3679 mo
490.684 50.3679 li
484.684 50.3679 mo
490.684 56.3679 li
@
grestore
gsave
494.022 57.7327 mo
501.022 57.7327 li
501.022 50.7327 li
494.022 50.7327 li
494.022 57.7327 li
clp
494.522 57.2326 mo
500.522 51.2326 li
494.522 51.2326 mo
500.522 57.2326 li
f
1 lw
0 lc
494.522 57.2326 mo
500.522 51.2326 li
494.522 51.2326 mo
500.522 57.2326 li
@
grestore
gsave
503.86 57.6503 mo
510.86 57.6503 li
510.86 50.6504 li
503.86 50.6504 li
503.86 57.6503 li
clp
504.36 57.1503 mo
510.36 51.1503 li
504.36 51.1503 mo
510.36 57.1503 li
f
1 lw
0 lc
504.36 57.1503 mo
510.36 51.1503 li
504.36 51.1503 mo
510.36 57.1503 li
@
grestore
gsave
513.698 57.0326 mo
520.698 57.0326 li
520.698 50.0326 li
513.698 50.0326 li
513.698 57.0326 li
clp
514.198 56.5327 mo
520.198 50.5327 li
514.198 50.5327 mo
520.198 56.5327 li
f
1 lw
0 lc
514.198 56.5327 mo
520.198 50.5327 li
514.198 50.5327 mo
520.198 56.5327 li
@
grestore
gsave
523.536 56.2709 mo
530.536 56.2709 li
530.536 49.2709 li
523.536 49.2709 li
523.536 56.2709 li
clp
524.036 55.7709 mo
530.036 49.7709 li
524.036 49.7709 mo
530.036 55.7709 li
f
1 lw
0 lc
524.036 55.7709 mo
530.036 49.7709 li
524.036 49.7709 mo
530.036 55.7709 li
@
grestore
gsave
533.374 56.8063 mo
540.374 56.8063 li
540.374 49.8063 li
533.374 49.8063 li
533.374 56.8063 li
clp
533.874 56.3062 mo
539.874 50.3062 li
533.874 50.3062 mo
539.874 56.3062 li
f
1 lw
0 lc
533.874 56.3062 mo
539.874 50.3062 li
533.874 50.3062 mo
539.874 56.3062 li
@
grestore
gsave
543.212 54.7267 mo
550.212 54.7267 li
550.212 47.7268 li
543.212 47.7268 li
543.212 54.7267 li
clp
543.712 54.2267 mo
549.712 48.2267 li
543.712 48.2267 mo
549.712 54.2267 li
f
1 lw
0 lc
543.712 54.2267 mo
549.712 48.2267 li
543.712 48.2267 mo
549.712 54.2267 li
@
grestore
gsave
553.05 54.0474 mo
560.05 54.0474 li
560.05 47.0474 li
553.05 47.0474 li
553.05 54.0474 li
clp
553.55 53.5474 mo
559.55 47.5474 li
553.55 47.5474 mo
559.55 53.5474 li
f
1 lw
0 lc
553.55 53.5474 mo
559.55 47.5474 li
553.55 47.5474 mo
559.55 53.5474 li
@
grestore
gsave
562.888 53.6152 mo
569.888 53.6152 li
569.888 46.6149 li
562.888 46.6149 li
562.888 53.6152 li
clp
563.388 53.115 mo
569.388 47.115 li
563.388 47.115 mo
569.388 53.115 li
f
1 lw
0 lc
563.388 53.115 mo
569.388 47.115 li
563.388 47.115 mo
569.388 53.115 li
@
grestore
gsave
572.726 53.6563 mo
579.726 53.6563 li
579.726 46.656 li
572.726 46.656 li
572.726 53.6563 li
clp
573.226 53.1562 mo
579.226 47.1562 li
573.226 47.1562 mo
579.226 53.1562 li
f
1 lw
0 lc
573.226 53.1562 mo
579.226 47.1562 li
573.226 47.1562 mo
579.226 53.1562 li
@
grestore
gsave
582.564 53.059 mo
589.564 53.059 li
589.564 46.0591 li
582.564 46.0591 li
582.564 53.059 li
clp
583.064 52.5591 mo
589.064 46.5591 li
583.064 46.5591 mo
589.064 52.5591 li
f
1 lw
0 lc
583.064 52.5591 mo
589.064 46.5591 li
583.064 46.5591 mo
589.064 52.5591 li
@
grestore
gsave
592.403 52.2769 mo
599.402 52.2769 li
599.402 45.277 li
592.403 45.277 li
592.403 52.2769 li
clp
592.902 51.7768 mo
598.902 45.7768 li
592.902 45.7768 mo
598.902 51.7768 li
f
1 lw
0 lc
592.902 51.7768 mo
598.902 45.7768 li
592.902 45.7768 mo
598.902 51.7768 li
@
grestore
gsave
602.24 51.8443 mo
609.241 51.8443 li
609.241 44.8444 li
602.24 44.8444 li
602.24 51.8443 li
clp
602.74 51.3444 mo
608.74 45.3444 li
602.74 45.3444 mo
608.74 51.3444 li
f
1 lw
0 lc
602.74 51.3444 mo
608.74 45.3444 li
602.74 45.3444 mo
608.74 51.3444 li
@
grestore
gsave
612.078 51.0826 mo
619.078 51.0826 li
619.078 44.0827 li
612.078 44.0827 li
612.078 51.0826 li
clp
612.578 50.5826 mo
618.578 44.5826 li
612.578 44.5826 mo
618.578 50.5826 li
f
1 lw
0 lc
612.578 50.5826 mo
618.578 44.5826 li
612.578 44.5826 mo
618.578 50.5826 li
@
grestore
gsave
621.916 50.8355 mo
628.916 50.8355 li
628.916 43.8356 li
621.916 43.8356 li
621.916 50.8355 li
clp
622.416 50.3356 mo
628.416 44.3356 li
622.416 44.3356 mo
628.416 50.3356 li
f
1 lw
0 lc
622.416 50.3356 mo
628.416 44.3356 li
622.416 44.3356 mo
628.416 50.3356 li
@
grestore
gsave
631.754 50.0326 mo
638.754 50.0326 li
638.754 43.0327 li
631.754 43.0327 li
631.754 50.0326 li
clp
632.254 49.5327 mo
638.254 43.5327 li
632.254 43.5327 mo
638.254 49.5327 li
f
1 lw
0 lc
632.254 49.5327 mo
638.254 43.5327 li
632.254 43.5327 mo
638.254 49.5327 li
@
grestore
gsave
641.593 50.0326 mo
648.592 50.0326 li
648.592 43.0327 li
641.593 43.0327 li
641.593 50.0326 li
clp
642.092 49.5327 mo
648.092 43.5327 li
642.092 43.5327 mo
648.092 49.5327 li
f
1 lw
0 lc
642.092 49.5327 mo
648.092 43.5327 li
642.092 43.5327 mo
648.092 49.5327 li
@
grestore
gsave
651.431 49.5592 mo
658.43 49.5592 li
658.43 42.5593 li
651.431 42.5593 li
651.431 49.5592 li
clp
651.93 49.0591 mo
657.93 43.0591 li
651.93 43.0591 mo
657.93 49.0591 li
f
1 lw
0 lc
651.93 49.0591 mo
657.93 43.0591 li
651.93 43.0591 mo
657.93 49.0591 li
@
grestore
gsave
661.269 49.3533 mo
668.269 49.3533 li
668.269 42.3534 li
661.269 42.3534 li
661.269 49.3533 li
clp
661.768 48.8533 mo
667.768 42.8533 li
661.768 42.8533 mo
667.768 48.8533 li
f
1 lw
0 lc
661.768 48.8533 mo
667.768 42.8533 li
661.768 42.8533 mo
667.768 48.8533 li
@
grestore
gsave
671.106 49.1886 mo
678.107 49.1886 li
678.107 42.1886 li
671.106 42.1886 li
671.106 49.1886 li
clp
671.607 48.6885 mo
677.607 42.6885 li
671.607 42.6885 mo
677.607 48.6885 li
f
1 lw
0 lc
671.607 48.6885 mo
677.607 42.6885 li
671.607 42.6885 mo
677.607 48.6885 li
@
grestore
gsave
680.944 48.7356 mo
687.944 48.7356 li
687.944 41.7356 li
680.944 41.7356 li
680.944 48.7356 li
clp
681.445 48.2356 mo
687.445 42.2356 li
681.445 42.2356 mo
687.445 48.2356 li
f
1 lw
0 lc
681.445 48.2356 mo
687.445 42.2356 li
681.445 42.2356 mo
687.445 48.2356 li
@
grestore
gsave
690.782 48.4681 mo
697.782 48.4681 li
697.782 41.4681 li
690.782 41.4681 li
690.782 48.4681 li
clp
691.283 47.968 mo
697.283 41.968 li
691.283 41.968 mo
697.283 47.968 li
f
1 lw
0 lc
691.283 47.968 mo
697.283 41.968 li
691.283 41.968 mo
697.283 47.968 li
@
grestore
gsave
700.621 48.2414 mo
707.62 48.2414 li
707.62 41.2414 li
700.621 41.2414 li
700.621 48.2414 li
clp
701.121 47.7415 mo
707.121 41.7415 li
701.121 41.7415 mo
707.121 47.7415 li
f
1 lw
0 lc
701.121 47.7415 mo
707.121 41.7415 li
701.121 41.7415 mo
707.121 47.7415 li
@
grestore
gsave
710.459 48.4681 mo
717.459 48.4681 li
717.459 41.4681 li
710.459 41.4681 li
710.459 48.4681 li
clp
710.959 47.968 mo
716.959 41.968 li
710.959 41.968 mo
716.959 47.968 li
f
1 lw
0 lc
710.959 47.968 mo
716.959 41.968 li
710.959 41.968 mo
716.959 47.968 li
@
grestore
gsave
720.297 48.2826 mo
727.297 48.2826 li
727.297 41.2826 li
720.297 41.2826 li
720.297 48.2826 li
clp
720.797 47.7827 mo
726.797 41.7827 li
720.797 41.7827 mo
726.797 47.7827 li
f
1 lw
0 lc
720.797 47.7827 mo
726.797 41.7827 li
720.797 41.7827 mo
726.797 47.7827 li
@
grestore
gsave
730.135 47.8915 mo
737.135 47.8915 li
737.135 40.8916 li
730.135 40.8916 li
730.135 47.8915 li
clp
730.635 47.3915 mo
736.635 41.3915 li
730.635 41.3915 mo
736.635 47.3915 li
f
1 lw
0 lc
730.635 47.3915 mo
736.635 41.3915 li
730.635 41.3915 mo
736.635 47.3915 li
@
grestore
gsave
739.973 48.3237 mo
746.973 48.3237 li
746.973 41.3238 li
739.973 41.3238 li
739.973 48.3237 li
clp
740.473 47.8239 mo
746.473 41.8239 li
740.473 41.8239 mo
746.473 47.8239 li
f
1 lw
0 lc
740.473 47.8239 mo
746.473 41.8239 li
740.473 41.8239 mo
746.473 47.8239 li
@
grestore
gsave
749.81 48.3033 mo
756.811 48.3033 li
756.811 41.3034 li
749.81 41.3034 li
749.81 48.3033 li
clp
750.311 47.8033 mo
756.311 41.8033 li
750.311 41.8033 mo
756.311 47.8033 li
f
1 lw
0 lc
750.311 47.8033 mo
756.311 41.8033 li
750.311 41.8033 mo
756.311 47.8033 li
@
grestore
gsave
759.649 48.3649 mo
766.648 48.3649 li
766.648 41.365 li
759.649 41.365 li
759.649 48.3649 li
clp
760.149 47.8651 mo
766.149 41.8651 li
760.149 41.8651 mo
766.149 47.8651 li
f
1 lw
0 lc
760.149 47.8651 mo
766.149 41.8651 li
760.149 41.8651 mo
766.149 47.8651 li
@
grestore
gsave
769.487 47.6856 mo
776.487 47.6856 li
776.487 40.6856 li
769.487 40.6856 li
769.487 47.6856 li
clp
769.987 47.1857 mo
775.987 41.1857 li
769.987 41.1857 mo
775.987 47.1857 li
f
1 lw
0 lc
769.987 47.1857 mo
775.987 41.1857 li
769.987 41.1857 mo
775.987 47.1857 li
@
grestore
gsave
779.325 45.668 mo
786.325 45.668 li
786.325 38.6681 li
779.325 38.6681 li
779.325 45.668 li
clp
779.825 45.168 mo
785.825 39.168 li
779.825 39.168 mo
785.825 45.168 li
f
1 lw
0 lc
779.825 45.168 mo
785.825 39.168 li
779.825 39.168 mo
785.825 45.168 li
@
grestore
gsave
789.163 45.668 mo
796.163 45.668 li
796.163 38.6681 li
789.163 38.6681 li
789.163 45.668 li
clp
789.663 45.168 mo
795.663 39.168 li
789.663 39.168 mo
795.663 45.168 li
f
1 lw
0 lc
789.663 45.168 mo
795.663 39.168 li
789.663 39.168 mo
795.663 45.168 li
@
grestore
gsave
799.001 45.6064 mo
806.001 45.6064 li
806.001 38.6061 li
799.001 38.6061 li
799.001 45.6064 li
clp
799.501 45.1063 mo
805.501 39.1063 li
799.501 39.1063 mo
805.501 45.1063 li
f
1 lw
0 lc
799.501 45.1063 mo
805.501 39.1063 li
799.501 39.1063 mo
805.501 45.1063 li
@
grestore
gsave
808.839 45.524 mo
815.839 45.524 li
815.839 38.5238 li
808.839 38.5238 li
808.839 45.524 li
clp
809.339 45.0239 mo
815.339 39.0239 li
809.339 39.0239 mo
815.339 45.0239 li
f
1 lw
0 lc
809.339 45.0239 mo
815.339 39.0239 li
809.339 39.0239 mo
815.339 45.0239 li
@
grestore
gsave
818.677 45.5033 mo
825.677 45.5033 li
825.677 38.5033 li
818.677 38.5033 li
818.677 45.5033 li
clp
819.177 45.0034 mo
825.177 39.0034 li
819.177 39.0034 mo
825.177 45.0034 li
f
1 lw
0 lc
819.177 45.0034 mo
825.177 39.0034 li
819.177 39.0034 mo
825.177 45.0034 li
@
grestore
gsave
828.515 45.4829 mo
835.515 45.4829 li
835.515 38.4829 li
828.515 38.4829 li
828.515 45.4829 li
clp
829.015 44.9828 mo
835.015 38.9828 li
829.015 38.9828 mo
835.015 44.9828 li
f
1 lw
0 lc
829.015 44.9828 mo
835.015 38.9828 li
829.015 38.9828 mo
835.015 44.9828 li
@
grestore
gsave
838.353 45.5033 mo
845.353 45.5033 li
845.353 38.5033 li
838.353 38.5033 li
838.353 45.5033 li
clp
838.853 45.0034 mo
844.853 39.0034 li
838.853 39.0034 mo
844.853 45.0034 li
f
1 lw
0 lc
838.853 45.0034 mo
844.853 39.0034 li
838.853 39.0034 mo
844.853 45.0034 li
@
grestore
gsave
848.191 45.524 mo
855.191 45.524 li
855.191 38.5238 li
848.191 38.5238 li
848.191 45.524 li
clp
848.691 45.0239 mo
854.691 39.0239 li
848.691 39.0239 mo
854.691 45.0239 li
f
1 lw
0 lc
848.691 45.0239 mo
854.691 39.0239 li
848.691 39.0239 mo
854.691 45.0239 li
@
grestore
gsave
858.029 45.3797 mo
865.029 45.3797 li
865.029 38.3798 li
858.029 38.3798 li
858.029 45.3797 li
clp
858.529 44.8798 mo
864.529 38.8798 li
858.529 38.8798 mo
864.529 44.8798 li
f
1 lw
0 lc
858.529 44.8798 mo
864.529 38.8798 li
858.529 38.8798 mo
864.529 44.8798 li
@
grestore
gsave
867.867 45.3797 mo
874.867 45.3797 li
874.867 38.3798 li
867.867 38.3798 li
867.867 45.3797 li
clp
868.367 44.8798 mo
874.367 38.8798 li
868.367 38.8798 mo
874.367 44.8798 li
f
1 lw
0 lc
868.367 44.8798 mo
874.367 38.8798 li
868.367 38.8798 mo
874.367 44.8798 li
@
grestore
gsave
877.705 45.3797 mo
884.705 45.3797 li
884.705 38.3798 li
877.705 38.3798 li
877.705 45.3797 li
clp
878.205 44.8798 mo
884.205 38.8798 li
878.205 38.8798 mo
884.205 44.8798 li
f
1 lw
0 lc
878.205 44.8798 mo
884.205 38.8798 li
878.205 38.8798 mo
884.205 44.8798 li
@
grestore
gsave
887.543 45.2974 mo
894.543 45.2974 li
894.543 38.2974 li
887.543 38.2974 li
887.543 45.2974 li
clp
888.043 44.7975 mo
894.043 38.7975 li
888.043 38.7975 mo
894.043 44.7975 li
f
1 lw
0 lc
888.043 44.7975 mo
894.043 38.7975 li
888.043 38.7975 mo
894.043 44.7975 li
@
grestore
gsave
897.381 45.277 mo
904.381 45.277 li
904.381 38.277 li
897.381 38.277 li
897.381 45.277 li
clp
897.881 44.7769 mo
903.881 38.7769 li
897.881 38.7769 mo
903.881 44.7769 li
f
1 lw
0 lc
897.881 44.7769 mo
903.881 38.7769 li
897.881 38.7769 mo
903.881 44.7769 li
@
grestore
gsave
907.219 45.1946 mo
914.219 45.1946 li
914.219 38.1946 li
907.219 38.1946 li
907.219 45.1946 li
clp
907.719 44.6946 mo
913.719 38.6946 li
907.719 38.6946 mo
913.719 44.6946 li
f
1 lw
0 lc
907.719 44.6946 mo
913.719 38.6946 li
907.719 38.6946 mo
913.719 44.6946 li
@
grestore
gsave
917.057 45.215 mo
924.057 45.215 li
924.057 38.2151 li
917.057 38.2151 li
917.057 45.215 li
clp
917.557 44.7151 mo
923.557 38.7151 li
917.557 38.7151 mo
923.557 44.7151 li
f
1 lw
0 lc
917.557 44.7151 mo
923.557 38.7151 li
917.557 38.7151 mo
923.557 44.7151 li
@
grestore
gsave
926.895 45.277 mo
933.895 45.277 li
933.895 38.277 li
926.895 38.277 li
926.895 45.277 li
clp
927.395 44.7769 mo
933.395 38.7769 li
927.395 38.7769 mo
933.395 44.7769 li
f
1 lw
0 lc
927.395 44.7769 mo
933.395 38.7769 li
927.395 38.7769 mo
933.395 44.7769 li
@
grestore
gsave
936.733 45.277 mo
943.733 45.277 li
943.733 38.277 li
936.733 38.277 li
936.733 45.277 li
clp
937.233 44.7769 mo
943.233 38.7769 li
937.233 38.7769 mo
943.233 44.7769 li
f
1 lw
0 lc
937.233 44.7769 mo
943.233 38.7769 li
937.233 38.7769 mo
943.233 44.7769 li
@
grestore
gsave
946.571 45.2562 mo
953.571 45.2562 li
953.571 38.2562 li
946.571 38.2562 li
946.571 45.2562 li
clp
947.071 44.7563 mo
953.071 38.7563 li
947.071 38.7563 mo
953.071 44.7563 li
f
1 lw
0 lc
947.071 44.7563 mo
953.071 38.7563 li
947.071 38.7563 mo
953.071 44.7563 li
@
grestore
gsave
956.409 45.1946 mo
963.409 45.1946 li
963.409 38.1946 li
956.409 38.1946 li
956.409 45.1946 li
clp
956.909 44.6946 mo
962.909 38.6946 li
956.909 38.6946 mo
962.909 44.6946 li
f
1 lw
0 lc
956.909 44.6946 mo
962.909 38.6946 li
956.909 38.6946 mo
962.909 44.6946 li
@
grestore
gsave
966.247 45.1326 mo
973.247 45.1326 li
973.247 38.1327 li
966.247 38.1327 li
966.247 45.1326 li
clp
966.747 44.6328 mo
972.747 38.6328 li
966.747 38.6328 mo
972.747 44.6328 li
f
1 lw
0 lc
966.747 44.6328 mo
972.747 38.6328 li
966.747 38.6328 mo
972.747 44.6328 li
@
grestore
gsave
976.085 45.1326 mo
983.085 45.1326 li
983.085 38.1327 li
976.085 38.1327 li
976.085 45.1326 li
clp
976.585 44.6328 mo
982.585 38.6328 li
976.585 38.6328 mo
982.585 44.6328 li
f
1 lw
0 lc
976.585 44.6328 mo
982.585 38.6328 li
976.585 38.6328 mo
982.585 44.6328 li
@
grestore
gsave
985.923 45.071 mo
992.923 45.071 li
992.923 38.0711 li
985.923 38.0711 li
985.923 45.071 li
clp
986.423 44.571 mo
992.423 38.571 li
986.423 38.571 mo
992.423 44.571 li
f
1 lw
0 lc
986.423 44.571 mo
992.423 38.571 li
986.423 38.571 mo
992.423 44.571 li
@
grestore
gsave
995.761 45.0506 mo
1002.76 45.0506 li
1002.76 38.0503 li
995.761 38.0503 li
995.761 45.0506 li
clp
996.261 44.5505 mo
1002.26 38.5505 li
996.261 38.5505 mo
1002.26 44.5505 li
f
1 lw
0 lc
996.261 44.5505 mo
1002.26 38.5505 li
996.261 38.5505 mo
1002.26 44.5505 li
@
grestore
gsave
1005.6 44.9475 mo
1012.6 44.9475 li
1012.6 37.9475 li
1005.6 37.9475 li
1005.6 44.9475 li
clp
1006.1 44.4475 mo
1012.1 38.4475 li
1006.1 38.4475 mo
1012.1 44.4475 li
f
1 lw
0 lc
1006.1 44.4475 mo
1012.1 38.4475 li
1006.1 38.4475 mo
1012.1 44.4475 li
@
grestore
gsave
1015.44 44.9679 mo
1022.44 44.9679 li
1022.44 37.968 li
1015.44 37.968 li
1015.44 44.9679 li
clp
1015.94 44.4681 mo
1021.94 38.4681 li
1015.94 38.4681 mo
1021.94 44.4681 li
f
1 lw
0 lc
1015.94 44.4681 mo
1021.94 38.4681 li
1015.94 38.4681 mo
1021.94 44.4681 li
@
grestore
gsave
1025.28 44.9679 mo
1032.28 44.9679 li
1032.28 37.968 li
1025.28 37.968 li
1025.28 44.9679 li
clp
1025.78 44.4681 mo
1031.78 38.4681 li
1025.78 38.4681 mo
1031.78 44.4681 li
f
1 lw
0 lc
1025.78 44.4681 mo
1031.78 38.4681 li
1025.78 38.4681 mo
1031.78 44.4681 li
@
grestore
gsave
1035.11 44.9887 mo
1042.11 44.9887 li
1042.11 37.9887 li
1035.11 37.9887 li
1035.11 44.9887 li
clp
1035.61 44.4886 mo
1041.61 38.4886 li
1035.61 38.4886 mo
1041.61 44.4886 li
f
1 lw
0 lc
1035.61 44.4886 mo
1041.61 38.4886 li
1035.61 38.4886 mo
1041.61 44.4886 li
@
grestore
gsave
1044.95 44.9679 mo
1051.95 44.9679 li
1051.95 37.968 li
1044.95 37.968 li
1044.95 44.9679 li
clp
1045.45 44.4681 mo
1051.45 38.4681 li
1045.45 38.4681 mo
1051.45 44.4681 li
f
1 lw
0 lc
1045.45 44.4681 mo
1051.45 38.4681 li
1045.45 38.4681 mo
1051.45 44.4681 li
@
grestore
gsave
1054.79 44.9475 mo
1061.79 44.9475 li
1061.79 37.9475 li
1054.79 37.9475 li
1054.79 44.9475 li
clp
1055.29 44.4475 mo
1061.29 38.4475 li
1055.29 38.4475 mo
1061.29 44.4475 li
f
1 lw
0 lc
1055.29 44.4475 mo
1061.29 38.4475 li
1055.29 38.4475 mo
1061.29 44.4475 li
@
grestore
gsave
1064.63 44.9271 mo
1071.63 44.9271 li
1071.63 37.9268 li
1064.63 37.9268 li
1064.63 44.9271 li
clp
1065.13 44.4269 mo
1071.13 38.4269 li
1065.13 38.4269 mo
1071.13 44.4269 li
f
1 lw
0 lc
1065.13 44.4269 mo
1071.13 38.4269 li
1065.13 38.4269 mo
1071.13 44.4269 li
@
grestore
gsave
1074.47 44.8859 mo
1081.47 44.8859 li
1081.47 37.8856 li
1074.47 37.8856 li
1074.47 44.8859 li
clp
1074.97 44.3857 mo
1080.97 38.3857 li
1074.97 38.3857 mo
1080.97 44.3857 li
f
1 lw
0 lc
1074.97 44.3857 mo
1080.97 38.3857 li
1074.97 38.3857 mo
1080.97 44.3857 li
@
grestore
gsave
1084.3 44.8651 mo
1091.3 44.8651 li
1091.3 37.8652 li
1084.3 37.8652 li
1084.3 44.8651 li
clp
1084.8 44.3652 mo
1090.8 38.3652 li
1084.8 38.3652 mo
1090.8 44.3652 li
f
1 lw
0 lc
1084.8 44.3652 mo
1090.8 38.3652 li
1084.8 38.3652 mo
1090.8 44.3652 li
@
grestore
gsave
1094.14 44.8859 mo
1101.14 44.8859 li
1101.14 37.8856 li
1094.14 37.8856 li
1094.14 44.8859 li
clp
1094.64 44.3857 mo
1100.64 38.3857 li
1094.64 38.3857 mo
1100.64 44.3857 li
f
1 lw
0 lc
1094.64 44.3857 mo
1100.64 38.3857 li
1094.64 38.3857 mo
1100.64 44.3857 li
@
grestore
123.678 511.418 mo
133.516 379.05 li
143.354 331.067 li
153.192 288.216 li
163.03 266.859 li
172.868 258.295 li
182.706 251.24 li
192.544 234.509 li
202.382 206.605 li
212.22 183.629 li
222.058 160.845 li
231.896 143.537 li
241.734 125.241 li
251.572 111.584 li
261.41 103.047 li
271.248 96.3217 li
281.086 89.2943 li
290.924 83.9551 li
300.762 79.5355 li
310.6 75.0748 li
320.438 71.5199 li
330.276 68.3356 li
340.114 65.8788 li
349.952 63.1611 li
359.79 61.6376 li
369.628 59.222 li
379.466 56.8475 li
389.304 55.2965 li
399.142 53.9926 li
408.98 52.1808 li
418.818 51.3299 li
428.656 50.2593 li
438.494 49.4495 li
448.332 48.9554 li
458.17 48.077 li
468.008 47.226 li
477.846 45.8809 li
487.684 45.126 li
497.522 44.975 li
507.36 44.028 li
517.198 43.8633 li
527.036 44.1378 li
536.874 44.577 li
546.712 43.9731 li
556.55 43.7397 li
566.388 44.4809 li
576.227 42.4907 li
586.065 41.8731 li
595.903 41.6123 li
605.741 40.528 li
615.579 40.4457 li
625.417 40.5966 li
635.255 40.5692 li
645.093 40.3359 li
654.931 40.3221 li
664.769 40.0065 li
674.607 39.7594 li
684.445 39.3065 li
694.283 38.7162 li
704.121 38.7437 li
713.959 38.881 li
723.797 38.881 li
733.635 38.3182 li
743.473 38.0026 li
753.311 37.4124 li
763.149 36.4379 li
772.987 36.4653 li
782.825 34.5849 li
792.663 34.53 li
802.501 34.4477 li
812.339 34.379 li
822.177 34.2692 li
832.015 34.1869 li
841.853 34.1732 li
851.691 34.0908 li
861.529 33.9948 li
871.367 33.9673 li
881.205 33.8987 li
891.043 33.9261 li
900.881 33.9261 li
910.719 33.9124 li
920.557 33.8849 li
930.395 33.7889 li
940.233 33.7614 li
950.071 33.6791 li
959.909 33.6653 li
969.747 33.6653 li
979.585 33.6379 li
989.423 33.5967 li
999.261 33.5829 li
1009.1 33.5555 li
1018.94 33.5143 li
1028.78 33.5006 li
1038.61 33.4731 li
1048.45 33.4457 li
1058.29 33.4595 li
1068.13 33.4457 li
1077.97 33.4045 li
1087.8 33.3908 li
1097.64 33.3908 li
1 /0 /CSD get_res sepcs
1 sep
@
123.678 520.779 mo
133.516 395.253 li
143.354 345.698 li
153.192 300.898 li
163.03 277.366 li
172.868 268.554 li
182.706 263.181 li
192.544 245.928 li
202.382 217.949 li
212.22 193.408 li
222.058 169.567 li
231.896 148.691 li
241.734 129.791 li
251.572 115.4 li
261.41 106.65 li
271.248 100.062 li
281.086 93.7206 li
290.924 88.8619 li
300.762 84.6619 li
310.6 80.8737 li
320.438 77.2708 li
330.276 74.0591 li
340.114 71.218 li
349.952 68.2327 li
359.79 66.6268 li
369.628 64.0533 li
379.466 61.8915 li
389.304 60.8004 li
399.142 59.7092 li
408.98 58.2681 li
418.818 56.9504 li
428.656 55.8387 li
438.494 55.0563 li
448.332 54.5622 li
458.17 54.274 li
468.008 53.8416 li
477.846 53.1005 li
487.684 52.0505 li
497.522 51.8857 li
507.36 51.0416 li
517.198 51.5358 li
527.036 51.474 li
536.874 51.7416 li
546.712 51.4328 li
556.55 51.0211 li
566.388 51.8652 li
576.227 49.9505 li
586.065 49.0652 li
595.903 49.1475 li
605.741 49.0446 li
615.579 48.7563 li
625.417 48.9005 li
635.255 48.9005 li
645.093 48.6328 li
654.931 48.8181 li
664.769 48.4476 li
674.607 48.1593 li
684.445 47.5211 li
694.283 47.2123 li
704.121 46.8211 li
713.959 47.0064 li
723.797 47.0682 li
733.635 46.8417 li
743.473 46.4505 li
753.311 46.1417 li
763.149 45.1946 li
772.987 45.4623 li
782.825 43.4446 li
792.663 43.4446 li
802.501 43.3211 li
812.339 43.4035 li
822.177 43.3829 li
832.015 43.3005 li
841.853 43.3005 li
851.691 43.3623 li
861.529 43.2593 li
871.367 43.2593 li
881.205 43.28 li
891.043 43.2388 li
900.881 43.2182 li
910.719 43.1358 li
920.557 43.074 li
930.395 43.074 li
940.233 43.074 li
950.071 43.074 li
959.909 43.0123 li
969.747 43.0329 li
979.585 43.0947 li
989.423 43.0535 li
999.261 43.0329 li
1009.1 43.0535 li
1018.94 43.0535 li
1028.78 43.074 li
1038.61 43.074 li
1048.45 43.074 li
1058.29 43.074 li
1068.13 43.0947 li
1077.97 43.1564 li
1087.8 43.1152 li
1097.64 43.074 li
@
gsave
120.178 524.279 mo
127.178 524.279 li
127.178 517.279 li
120.178 517.279 li
120.178 524.279 li
clp
120.678 523.779 mo
126.678 517.779 li
120.678 517.779 mo
126.678 523.779 li
f
1 lw
0 lc
120.678 523.779 mo
126.678 517.779 li
120.678 517.779 mo
126.678 523.779 li
@
grestore
gsave
130.016 398.753 mo
137.016 398.753 li
137.016 391.753 li
130.016 391.753 li
130.016 398.753 li
clp
130.516 398.253 mo
136.516 392.253 li
130.516 392.253 mo
136.516 398.253 li
f
1 lw
0 lc
130.516 398.253 mo
136.516 392.253 li
130.516 392.253 mo
136.516 398.253 li
@
grestore
gsave
139.854 349.198 mo
146.854 349.198 li
146.854 342.198 li
139.854 342.198 li
139.854 349.198 li
clp
140.354 348.698 mo
146.354 342.698 li
140.354 342.698 mo
146.354 348.698 li
f
1 lw
0 lc
140.354 348.698 mo
146.354 342.698 li
140.354 342.698 mo
146.354 348.698 li
@
grestore
gsave
149.692 304.398 mo
156.692 304.398 li
156.692 297.398 li
149.692 297.398 li
149.692 304.398 li
clp
150.192 303.898 mo
156.192 297.898 li
150.192 297.898 mo
156.192 303.898 li
f
1 lw
0 lc
150.192 303.898 mo
156.192 297.898 li
150.192 297.898 mo
156.192 303.898 li
@
grestore
gsave
159.53 280.866 mo
166.53 280.866 li
166.53 273.866 li
159.53 273.866 li
159.53 280.866 li
clp
160.03 280.366 mo
166.03 274.366 li
160.03 274.366 mo
166.03 280.366 li
f
1 lw
0 lc
160.03 280.366 mo
166.03 274.366 li
160.03 274.366 mo
166.03 280.366 li
@
grestore
gsave
169.368 272.055 mo
176.368 272.055 li
176.368 265.055 li
169.368 265.055 li
169.368 272.055 li
clp
169.868 271.554 mo
175.868 265.554 li
169.868 265.554 mo
175.868 271.554 li
f
1 lw
0 lc
169.868 271.554 mo
175.868 265.554 li
169.868 265.554 mo
175.868 271.554 li
@
grestore
gsave
179.206 266.681 mo
186.206 266.681 li
186.206 259.681 li
179.206 259.681 li
179.206 266.681 li
clp
179.706 266.181 mo
185.706 260.181 li
179.706 260.181 mo
185.706 266.181 li
f
1 lw
0 lc
179.706 266.181 mo
185.706 260.181 li
179.706 260.181 mo
185.706 266.181 li
@
grestore
gsave
189.044 249.428 mo
196.044 249.428 li
196.044 242.428 li
189.044 242.428 li
189.044 249.428 li
clp
189.544 248.928 mo
195.544 242.928 li
189.544 242.928 mo
195.544 248.928 li
f
1 lw
0 lc
189.544 248.928 mo
195.544 242.928 li
189.544 242.928 mo
195.544 248.928 li
@
grestore
gsave
198.882 221.449 mo
205.882 221.449 li
205.882 214.449 li
198.882 214.449 li
198.882 221.449 li
clp
199.382 220.949 mo
205.382 214.949 li
199.382 214.949 mo
205.382 220.949 li
f
1 lw
0 lc
199.382 220.949 mo
205.382 214.949 li
199.382 214.949 mo
205.382 220.949 li
@
grestore
gsave
208.72 196.908 mo
215.72 196.908 li
215.72 189.908 li
208.72 189.908 li
208.72 196.908 li
clp
209.22 196.408 mo
215.22 190.408 li
209.22 190.408 mo
215.22 196.408 li
f
1 lw
0 lc
209.22 196.408 mo
215.22 190.408 li
209.22 190.408 mo
215.22 196.408 li
@
grestore
gsave
218.558 173.067 mo
225.558 173.067 li
225.558 166.067 li
218.558 166.067 li
218.558 173.067 li
clp
219.058 172.567 mo
225.058 166.567 li
219.058 166.567 mo
225.058 172.567 li
f
1 lw
0 lc
219.058 172.567 mo
225.058 166.567 li
219.058 166.567 mo
225.058 172.567 li
@
grestore
gsave
228.396 152.191 mo
235.396 152.191 li
235.396 145.191 li
228.396 145.191 li
228.396 152.191 li
clp
228.896 151.691 mo
234.896 145.691 li
228.896 145.691 mo
234.896 151.691 li
f
1 lw
0 lc
228.896 151.691 mo
234.896 145.691 li
228.896 145.691 mo
234.896 151.691 li
@
grestore
gsave
238.234 133.291 mo
245.234 133.291 li
245.234 126.291 li
238.234 126.291 li
238.234 133.291 li
clp
238.734 132.791 mo
244.734 126.791 li
238.734 126.791 mo
244.734 132.791 li
f
1 lw
0 lc
238.734 132.791 mo
244.734 126.791 li
238.734 126.791 mo
244.734 132.791 li
@
grestore
gsave
248.072 118.9 mo
255.072 118.9 li
255.072 111.9 li
248.072 111.9 li
248.072 118.9 li
clp
248.572 118.4 mo
254.572 112.4 li
248.572 112.4 mo
254.572 118.4 li
f
1 lw
0 lc
248.572 118.4 mo
254.572 112.4 li
248.572 112.4 mo
254.572 118.4 li
@
grestore
gsave
257.91 110.15 mo
264.91 110.15 li
264.91 103.15 li
257.91 103.15 li
257.91 110.15 li
clp
258.41 109.65 mo
264.41 103.65 li
258.41 103.65 mo
264.41 109.65 li
f
1 lw
0 lc
258.41 109.65 mo
264.41 103.65 li
258.41 103.65 mo
264.41 109.65 li
@
grestore
gsave
267.748 103.562 mo
274.748 103.562 li
274.748 96.5617 li
267.748 96.5617 li
267.748 103.562 li
clp
268.248 103.062 mo
274.248 97.0618 li
268.248 97.0618 mo
274.248 103.062 li
f
1 lw
0 lc
268.248 103.062 mo
274.248 97.0618 li
268.248 97.0618 mo
274.248 103.062 li
@
grestore
gsave
277.586 97.2206 mo
284.586 97.2206 li
284.586 90.2206 li
277.586 90.2206 li
277.586 97.2206 li
clp
278.086 96.7206 mo
284.086 90.7206 li
278.086 90.7206 mo
284.086 96.7206 li
f
1 lw
0 lc
278.086 96.7206 mo
284.086 90.7206 li
278.086 90.7206 mo
284.086 96.7206 li
@
grestore
gsave
287.424 92.3618 mo
294.424 92.3618 li
294.424 85.3618 li
287.424 85.3618 li
287.424 92.3618 li
clp
287.924 91.8619 mo
293.924 85.8619 li
287.924 85.8619 mo
293.924 91.8619 li
f
1 lw
0 lc
287.924 91.8619 mo
293.924 85.8619 li
287.924 85.8619 mo
293.924 91.8619 li
@
grestore
gsave
297.262 88.1619 mo
304.262 88.1619 li
304.262 81.1619 li
297.262 81.1619 li
297.262 88.1619 li
clp
297.762 87.6619 mo
303.762 81.6619 li
297.762 81.6619 mo
303.762 87.6619 li
f
1 lw
0 lc
297.762 87.6619 mo
303.762 81.6619 li
297.762 81.6619 mo
303.762 87.6619 li
@
grestore
gsave
307.1 84.3738 mo
314.1 84.3738 li
314.1 77.3739 li
307.1 77.3739 li
307.1 84.3738 li
clp
307.6 83.8737 mo
313.6 77.8737 li
307.6 77.8737 mo
313.6 83.8737 li
f
1 lw
0 lc
307.6 83.8737 mo
313.6 77.8737 li
307.6 77.8737 mo
313.6 83.8737 li
@
grestore
gsave
316.938 80.7709 mo
323.938 80.7709 li
323.938 73.7709 li
316.938 73.7709 li
316.938 80.7709 li
clp
317.438 80.2708 mo
323.438 74.2708 li
317.438 74.2708 mo
323.438 80.2708 li
f
1 lw
0 lc
317.438 80.2708 mo
323.438 74.2708 li
317.438 74.2708 mo
323.438 80.2708 li
@
grestore
gsave
326.776 77.559 mo
333.776 77.559 li
333.776 70.5591 li
326.776 70.5591 li
326.776 77.559 li
clp
327.276 77.0591 mo
333.276 71.0591 li
327.276 71.0591 mo
333.276 77.0591 li
f
1 lw
0 lc
327.276 77.0591 mo
333.276 71.0591 li
327.276 71.0591 mo
333.276 77.0591 li
@
grestore
gsave
336.614 74.7181 mo
343.614 74.7181 li
343.614 67.7178 li
336.614 67.7178 li
336.614 74.7181 li
clp
337.114 74.218 mo
343.114 68.218 li
337.114 68.218 mo
343.114 74.218 li
f
1 lw
0 lc
337.114 74.218 mo
343.114 68.218 li
337.114 68.218 mo
343.114 74.218 li
@
grestore
gsave
346.452 71.7326 mo
353.452 71.7326 li
353.452 64.7326 li
346.452 64.7326 li
346.452 71.7326 li
clp
346.952 71.2327 mo
352.952 65.2327 li
346.952 65.2327 mo
352.952 71.2327 li
f
1 lw
0 lc
346.952 71.2327 mo
352.952 65.2327 li
346.952 65.2327 mo
352.952 71.2327 li
@
grestore
gsave
356.29 70.1268 mo
363.29 70.1268 li
363.29 63.1269 li
356.29 63.1269 li
356.29 70.1268 li
clp
356.79 69.6268 mo
362.79 63.6268 li
356.79 63.6268 mo
362.79 69.6268 li
f
1 lw
0 lc
356.79 69.6268 mo
362.79 63.6268 li
356.79 63.6268 mo
362.79 69.6268 li
@
grestore
gsave
366.128 67.5534 mo
373.128 67.5534 li
373.128 60.5532 li
366.128 60.5532 li
366.128 67.5534 li
clp
366.628 67.0533 mo
372.628 61.0533 li
366.628 61.0533 mo
372.628 67.0533 li
f
1 lw
0 lc
366.628 67.0533 mo
372.628 61.0533 li
366.628 61.0533 mo
372.628 67.0533 li
@
grestore
gsave
375.966 65.3915 mo
382.966 65.3915 li
382.966 58.3916 li
375.966 58.3916 li
375.966 65.3915 li
clp
376.466 64.8915 mo
382.466 58.8915 li
376.466 58.8915 mo
382.466 64.8915 li
f
1 lw
0 lc
376.466 64.8915 mo
382.466 58.8915 li
376.466 58.8915 mo
382.466 64.8915 li
@
grestore
gsave
385.804 64.3004 mo
392.804 64.3004 li
392.804 57.3004 li
385.804 57.3004 li
385.804 64.3004 li
clp
386.304 63.8004 mo
392.304 57.8004 li
386.304 57.8004 mo
392.304 63.8004 li
f
1 lw
0 lc
386.304 63.8004 mo
392.304 57.8004 li
386.304 57.8004 mo
392.304 63.8004 li
@
grestore
gsave
395.642 63.2092 mo
402.642 63.2092 li
402.642 56.2093 li
395.642 56.2093 li
395.642 63.2092 li
clp
396.142 62.7092 mo
402.142 56.7092 li
396.142 56.7092 mo
402.142 62.7092 li
f
1 lw
0 lc
396.142 62.7092 mo
402.142 56.7092 li
396.142 56.7092 mo
402.142 62.7092 li
@
grestore
gsave
405.48 61.7679 mo
412.48 61.7679 li
412.48 54.7679 li
405.48 54.7679 li
405.48 61.7679 li
clp
405.98 61.268 mo
411.98 55.268 li
405.98 55.268 mo
411.98 61.268 li
f
1 lw
0 lc
405.98 61.268 mo
411.98 55.268 li
405.98 55.268 mo
411.98 61.268 li
@
grestore
gsave
415.318 60.4504 mo
422.318 60.4504 li
422.318 53.4504 li
415.318 53.4504 li
415.318 60.4504 li
clp
415.818 59.9504 mo
421.818 53.9504 li
415.818 53.9504 mo
421.818 59.9504 li
f
1 lw
0 lc
415.818 59.9504 mo
421.818 53.9504 li
415.818 53.9504 mo
421.818 59.9504 li
@
grestore
gsave
425.156 59.3388 mo
432.156 59.3388 li
432.156 52.3385 li
425.156 52.3385 li
425.156 59.3388 li
clp
425.656 58.8386 mo
431.656 52.8386 li
425.656 52.8386 mo
431.656 58.8386 li
f
1 lw
0 lc
425.656 58.8386 mo
431.656 52.8386 li
425.656 52.8386 mo
431.656 58.8386 li
@
grestore
gsave
434.994 58.5563 mo
441.994 58.5563 li
441.994 51.5564 li
434.994 51.5564 li
434.994 58.5563 li
clp
435.494 58.0563 mo
441.494 52.0563 li
435.494 52.0563 mo
441.494 58.0563 li
f
1 lw
0 lc
435.494 58.0563 mo
441.494 52.0563 li
435.494 52.0563 mo
441.494 58.0563 li
@
grestore
gsave
444.832 58.0621 mo
451.832 58.0621 li
451.832 51.0622 li
444.832 51.0622 li
444.832 58.0621 li
clp
445.332 57.5621 mo
451.332 51.5621 li
445.332 51.5621 mo
451.332 57.5621 li
f
1 lw
0 lc
445.332 57.5621 mo
451.332 51.5621 li
445.332 51.5621 mo
451.332 57.5621 li
@
grestore
gsave
454.67 57.7739 mo
461.67 57.7739 li
461.67 50.7739 li
454.67 50.7739 li
454.67 57.7739 li
clp
455.17 57.2739 mo
461.17 51.2739 li
455.17 51.2739 mo
461.17 57.2739 li
f
1 lw
0 lc
455.17 57.2739 mo
461.17 51.2739 li
455.17 51.2739 mo
461.17 57.2739 li
@
grestore
gsave
464.508 57.3416 mo
471.508 57.3416 li
471.508 50.3417 li
464.508 50.3417 li
464.508 57.3416 li
clp
465.008 56.8416 mo
471.008 50.8416 li
465.008 50.8416 mo
471.008 56.8416 li
f
1 lw
0 lc
465.008 56.8416 mo
471.008 50.8416 li
465.008 50.8416 mo
471.008 56.8416 li
@
grestore
gsave
474.346 56.6003 mo
481.346 56.6003 li
481.346 49.6004 li
474.346 49.6004 li
474.346 56.6003 li
clp
474.846 56.1004 mo
480.846 50.1004 li
474.846 50.1004 mo
480.846 56.1004 li
f
1 lw
0 lc
474.846 56.1004 mo
480.846 50.1004 li
474.846 50.1004 mo
480.846 56.1004 li
@
grestore
gsave
484.184 55.5504 mo
491.184 55.5504 li
491.184 48.5504 li
484.184 48.5504 li
484.184 55.5504 li
clp
484.684 55.0504 mo
490.684 49.0504 li
484.684 49.0504 mo
490.684 55.0504 li
f
1 lw
0 lc
484.684 55.0504 mo
490.684 49.0504 li
484.684 49.0504 mo
490.684 55.0504 li
@
grestore
gsave
494.022 55.3856 mo
501.022 55.3856 li
501.022 48.3857 li
494.022 48.3857 li
494.022 55.3856 li
clp
494.522 54.8857 mo
500.522 48.8857 li
494.522 48.8857 mo
500.522 54.8857 li
f
1 lw
0 lc
494.522 54.8857 mo
500.522 48.8857 li
494.522 48.8857 mo
500.522 54.8857 li
@
grestore
gsave
503.86 54.5416 mo
510.86 54.5416 li
510.86 47.5416 li
503.86 47.5416 li
503.86 54.5416 li
clp
504.36 54.0416 mo
510.36 48.0416 li
504.36 48.0416 mo
510.36 54.0416 li
f
1 lw
0 lc
504.36 54.0416 mo
510.36 48.0416 li
504.36 48.0416 mo
510.36 54.0416 li
@
grestore
gsave
513.698 55.0358 mo
520.698 55.0358 li
520.698 48.0358 li
513.698 48.0358 li
513.698 55.0358 li
clp
514.198 54.5357 mo
520.198 48.5357 li
514.198 48.5357 mo
520.198 54.5357 li
f
1 lw
0 lc
514.198 54.5357 mo
520.198 48.5357 li
514.198 48.5357 mo
520.198 54.5357 li
@
grestore
gsave
523.536 54.9738 mo
530.536 54.9738 li
530.536 47.9739 li
523.536 47.9739 li
523.536 54.9738 li
clp
524.036 54.4739 mo
530.036 48.4739 li
524.036 48.4739 mo
530.036 54.4739 li
f
1 lw
0 lc
524.036 54.4739 mo
530.036 48.4739 li
524.036 48.4739 mo
530.036 54.4739 li
@
grestore
gsave
533.374 55.2417 mo
540.374 55.2417 li
540.374 48.2417 li
533.374 48.2417 li
533.374 55.2417 li
clp
533.874 54.7416 mo
539.874 48.7416 li
533.874 48.7416 mo
539.874 54.7416 li
f
1 lw
0 lc
533.874 54.7416 mo
539.874 48.7416 li
533.874 48.7416 mo
539.874 54.7416 li
@
grestore
gsave
543.212 54.9326 mo
550.212 54.9326 li
550.212 47.9327 li
543.212 47.9327 li
543.212 54.9326 li
clp
543.712 54.4327 mo
549.712 48.4327 li
543.712 48.4327 mo
549.712 54.4327 li
f
1 lw
0 lc
543.712 54.4327 mo
549.712 48.4327 li
543.712 48.4327 mo
549.712 54.4327 li
@
grestore
gsave
553.05 54.5212 mo
560.05 54.5212 li
560.05 47.5209 li
553.05 47.5209 li
553.05 54.5212 li
clp
553.55 54.021 mo
559.55 48.021 li
553.55 48.021 mo
559.55 54.021 li
f
1 lw
0 lc
553.55 54.021 mo
559.55 48.021 li
553.55 48.021 mo
559.55 54.021 li
@
grestore
gsave
562.888 55.3652 mo
569.888 55.3652 li
569.888 48.3653 li
562.888 48.3653 li
562.888 55.3652 li
clp
563.388 54.8651 mo
569.388 48.8651 li
563.388 48.8651 mo
569.388 54.8651 li
f
1 lw
0 lc
563.388 54.8651 mo
569.388 48.8651 li
563.388 48.8651 mo
569.388 54.8651 li
@
grestore
gsave
572.726 53.4504 mo
579.726 53.4504 li
579.726 46.4505 li
572.726 46.4505 li
572.726 53.4504 li
clp
573.226 52.9504 mo
579.226 46.9504 li
573.226 46.9504 mo
579.226 52.9504 li
f
1 lw
0 lc
573.226 52.9504 mo
579.226 46.9504 li
573.226 46.9504 mo
579.226 52.9504 li
@
grestore
gsave
582.564 52.5652 mo
589.564 52.5652 li
589.564 45.5652 li
582.564 45.5652 li
582.564 52.5652 li
clp
583.064 52.0651 mo
589.064 46.0651 li
583.064 46.0651 mo
589.064 52.0651 li
f
1 lw
0 lc
583.064 52.0651 mo
589.064 46.0651 li
583.064 46.0651 mo
589.064 52.0651 li
@
grestore
gsave
592.403 52.6475 mo
599.402 52.6475 li
599.402 45.6476 li
592.403 45.6476 li
592.403 52.6475 li
clp
592.902 52.1475 mo
598.902 46.1475 li
592.902 46.1475 mo
598.902 52.1475 li
f
1 lw
0 lc
592.902 52.1475 mo
598.902 46.1475 li
592.902 46.1475 mo
598.902 52.1475 li
@
grestore
gsave
602.24 52.5444 mo
609.241 52.5444 li
609.241 45.5445 li
602.24 45.5445 li
602.24 52.5444 li
clp
602.74 52.0445 mo
608.74 46.0445 li
602.74 46.0445 mo
608.74 52.0445 li
f
1 lw
0 lc
602.74 52.0445 mo
608.74 46.0445 li
602.74 46.0445 mo
608.74 52.0445 li
@
grestore
gsave
612.078 52.2561 mo
619.078 52.2561 li
619.078 45.2562 li
612.078 45.2562 li
612.078 52.2561 li
clp
612.578 51.7563 mo
618.578 45.7563 li
612.578 45.7563 mo
618.578 51.7563 li
f
1 lw
0 lc
612.578 51.7563 mo
618.578 45.7563 li
612.578 45.7563 mo
618.578 51.7563 li
@
grestore
gsave
621.916 52.4004 mo
628.916 52.4004 li
628.916 45.4005 li
621.916 45.4005 li
621.916 52.4004 li
clp
622.416 51.9004 mo
628.416 45.9004 li
622.416 45.9004 mo
628.416 51.9004 li
f
1 lw
0 lc
622.416 51.9004 mo
628.416 45.9004 li
622.416 45.9004 mo
628.416 51.9004 li
@
grestore
gsave
631.754 52.4004 mo
638.754 52.4004 li
638.754 45.4005 li
631.754 45.4005 li
631.754 52.4004 li
clp
632.254 51.9004 mo
638.254 45.9004 li
632.254 45.9004 mo
638.254 51.9004 li
f
1 lw
0 lc
632.254 51.9004 mo
638.254 45.9004 li
632.254 45.9004 mo
638.254 51.9004 li
@
grestore
gsave
641.593 52.1326 mo
648.592 52.1326 li
648.592 45.1326 li
641.593 45.1326 li
641.593 52.1326 li
clp
642.092 51.6328 mo
648.092 45.6328 li
642.092 45.6328 mo
648.092 51.6328 li
f
1 lw
0 lc
642.092 51.6328 mo
648.092 45.6328 li
642.092 45.6328 mo
648.092 51.6328 li
@
grestore
gsave
651.431 52.3181 mo
658.43 52.3181 li
658.43 45.3181 li
651.431 45.3181 li
651.431 52.3181 li
clp
651.93 51.8181 mo
657.93 45.8181 li
651.93 45.8181 mo
657.93 51.8181 li
f
1 lw
0 lc
651.93 51.8181 mo
657.93 45.8181 li
651.93 45.8181 mo
657.93 51.8181 li
@
grestore
gsave
661.269 51.9474 mo
668.269 51.9474 li
668.269 44.9475 li
661.269 44.9475 li
661.269 51.9474 li
clp
661.768 51.4474 mo
667.768 45.4474 li
661.768 45.4474 mo
667.768 51.4474 li
f
1 lw
0 lc
661.768 51.4474 mo
667.768 45.4474 li
661.768 45.4474 mo
667.768 51.4474 li
@
grestore
gsave
671.106 51.6592 mo
678.107 51.6592 li
678.107 44.6592 li
671.106 44.6592 li
671.106 51.6592 li
clp
671.607 51.1592 mo
677.607 45.1592 li
671.607 45.1592 mo
677.607 51.1592 li
f
1 lw
0 lc
671.607 51.1592 mo
677.607 45.1592 li
671.607 45.1592 mo
677.607 51.1592 li
@
grestore
gsave
680.944 51.021 mo
687.944 51.021 li
687.944 44.0211 li
680.944 44.0211 li
680.944 51.021 li
clp
681.445 50.521 mo
687.445 44.521 li
681.445 44.521 mo
687.445 50.521 li
f
1 lw
0 lc
681.445 50.521 mo
687.445 44.521 li
681.445 44.521 mo
687.445 50.521 li
@
grestore
gsave
690.782 50.7123 mo
697.782 50.7123 li
697.782 43.712 li
690.782 43.712 li
690.782 50.7123 li
clp
691.283 50.2122 mo
697.283 44.2122 li
691.283 44.2122 mo
697.283 50.2122 li
f
1 lw
0 lc
691.283 50.2122 mo
697.283 44.2122 li
691.283 44.2122 mo
697.283 50.2122 li
@
grestore
gsave
700.621 50.3209 mo
707.62 50.3209 li
707.62 43.321 li
700.621 43.321 li
700.621 50.3209 li
clp
701.121 49.821 mo
707.121 43.821 li
701.121 43.821 mo
707.121 49.821 li
f
1 lw
0 lc
701.121 49.821 mo
707.121 43.821 li
701.121 43.821 mo
707.121 49.821 li
@
grestore
gsave
710.459 50.5064 mo
717.459 50.5064 li
717.459 43.5061 li
710.459 43.5061 li
710.459 50.5064 li
clp
710.959 50.0063 mo
716.959 44.0063 li
710.959 44.0063 mo
716.959 50.0063 li
f
1 lw
0 lc
710.959 50.0063 mo
716.959 44.0063 li
710.959 44.0063 mo
716.959 50.0063 li
@
grestore
gsave
720.297 50.568 mo
727.297 50.568 li
727.297 43.5681 li
720.297 43.5681 li
720.297 50.568 li
clp
720.797 50.0681 mo
726.797 44.0681 li
720.797 44.0681 mo
726.797 50.0681 li
f
1 lw
0 lc
720.797 50.0681 mo
726.797 44.0681 li
720.797 44.0681 mo
726.797 50.0681 li
@
grestore
gsave
730.135 50.3417 mo
737.135 50.3417 li
737.135 43.3417 li
730.135 43.3417 li
730.135 50.3417 li
clp
730.635 49.8416 mo
736.635 43.8416 li
730.635 43.8416 mo
736.635 49.8416 li
f
1 lw
0 lc
730.635 49.8416 mo
736.635 43.8416 li
730.635 43.8416 mo
736.635 49.8416 li
@
grestore
gsave
739.973 49.9503 mo
746.973 49.9503 li
746.973 42.9503 li
739.973 42.9503 li
739.973 49.9503 li
clp
740.473 49.4504 mo
746.473 43.4504 li
740.473 43.4504 mo
746.473 49.4504 li
f
1 lw
0 lc
740.473 49.4504 mo
746.473 43.4504 li
740.473 43.4504 mo
746.473 49.4504 li
@
grestore
gsave
749.81 49.6416 mo
756.811 49.6416 li
756.811 42.6416 li
749.81 42.6416 li
749.81 49.6416 li
clp
750.311 49.1416 mo
756.311 43.1416 li
750.311 43.1416 mo
756.311 49.1416 li
f
1 lw
0 lc
750.311 49.1416 mo
756.311 43.1416 li
750.311 43.1416 mo
756.311 49.1416 li
@
grestore
gsave
759.649 48.6947 mo
766.648 48.6947 li
766.648 41.6944 li
759.649 41.6944 li
759.649 48.6947 li
clp
760.149 48.1946 mo
766.149 42.1946 li
760.149 42.1946 mo
766.149 48.1946 li
f
1 lw
0 lc
760.149 48.1946 mo
766.149 42.1946 li
760.149 42.1946 mo
766.149 48.1946 li
@
grestore
gsave
769.487 48.9622 mo
776.487 48.9622 li
776.487 41.9623 li
769.487 41.9623 li
769.487 48.9622 li
clp
769.987 48.4622 mo
775.987 42.4622 li
769.987 42.4622 mo
775.987 48.4622 li
f
1 lw
0 lc
769.987 48.4622 mo
775.987 42.4622 li
769.987 42.4622 mo
775.987 48.4622 li
@
grestore
gsave
779.325 46.9447 mo
786.325 46.9447 li
786.325 39.9447 li
779.325 39.9447 li
779.325 46.9447 li
clp
779.825 46.4446 mo
785.825 40.4446 li
779.825 40.4446 mo
785.825 46.4446 li
f
1 lw
0 lc
779.825 46.4446 mo
785.825 40.4446 li
779.825 40.4446 mo
785.825 46.4446 li
@
grestore
gsave
789.163 46.9447 mo
796.163 46.9447 li
796.163 39.9447 li
789.163 39.9447 li
789.163 46.9447 li
clp
789.663 46.4446 mo
795.663 40.4446 li
789.663 40.4446 mo
795.663 46.4446 li
f
1 lw
0 lc
789.663 46.4446 mo
795.663 40.4446 li
789.663 40.4446 mo
795.663 46.4446 li
@
grestore
gsave
799.001 46.8211 mo
806.001 46.8211 li
806.001 39.8212 li
799.001 39.8212 li
799.001 46.8211 li
clp
799.501 46.321 mo
805.501 40.321 li
799.501 40.321 mo
805.501 46.321 li
f
1 lw
0 lc
799.501 46.321 mo
805.501 40.321 li
799.501 40.321 mo
805.501 46.321 li
@
grestore
gsave
808.839 46.9035 mo
815.839 46.9035 li
815.839 39.9035 li
808.839 39.9035 li
808.839 46.9035 li
clp
809.339 46.4034 mo
815.339 40.4034 li
809.339 40.4034 mo
815.339 46.4034 li
f
1 lw
0 lc
809.339 46.4034 mo
815.339 40.4034 li
809.339 40.4034 mo
815.339 46.4034 li
@
grestore
gsave
818.677 46.8827 mo
825.677 46.8827 li
825.677 39.8828 li
818.677 39.8828 li
818.677 46.8827 li
clp
819.177 46.3828 mo
825.177 40.3828 li
819.177 40.3828 mo
825.177 46.3828 li
f
1 lw
0 lc
819.177 46.3828 mo
825.177 40.3828 li
819.177 40.3828 mo
825.177 46.3828 li
@
grestore
gsave
828.515 46.8004 mo
835.515 46.8004 li
835.515 39.8004 li
828.515 39.8004 li
828.515 46.8004 li
clp
829.015 46.3005 mo
835.015 40.3005 li
829.015 40.3005 mo
835.015 46.3005 li
f
1 lw
0 lc
829.015 46.3005 mo
835.015 40.3005 li
829.015 40.3005 mo
835.015 46.3005 li
@
grestore
gsave
838.353 46.8004 mo
845.353 46.8004 li
845.353 39.8004 li
838.353 39.8004 li
838.353 46.8004 li
clp
838.853 46.3005 mo
844.853 40.3005 li
838.853 40.3005 mo
844.853 46.3005 li
f
1 lw
0 lc
838.853 46.3005 mo
844.853 40.3005 li
838.853 40.3005 mo
844.853 46.3005 li
@
grestore
gsave
848.191 46.8623 mo
855.191 46.8623 li
855.191 39.8624 li
848.191 39.8624 li
848.191 46.8623 li
clp
848.691 46.3622 mo
854.691 40.3622 li
848.691 40.3622 mo
854.691 46.3622 li
f
1 lw
0 lc
848.691 46.3622 mo
854.691 40.3622 li
848.691 40.3622 mo
854.691 46.3622 li
@
grestore
gsave
858.029 46.7592 mo
865.029 46.7592 li
865.029 39.7592 li
858.029 39.7592 li
858.029 46.7592 li
clp
858.529 46.2593 mo
864.529 40.2593 li
858.529 40.2593 mo
864.529 46.2593 li
f
1 lw
0 lc
858.529 46.2593 mo
864.529 40.2593 li
858.529 40.2593 mo
864.529 46.2593 li
@
grestore
gsave
867.867 46.7592 mo
874.867 46.7592 li
874.867 39.7592 li
867.867 39.7592 li
867.867 46.7592 li
clp
868.367 46.2593 mo
874.367 40.2593 li
868.367 40.2593 mo
874.367 46.2593 li
f
1 lw
0 lc
868.367 46.2593 mo
874.367 40.2593 li
868.367 40.2593 mo
874.367 46.2593 li
@
grestore
gsave
877.705 46.7799 mo
884.705 46.7799 li
884.705 39.78 li
877.705 39.78 li
877.705 46.7799 li
clp
878.205 46.2798 mo
884.205 40.2798 li
878.205 40.2798 mo
884.205 46.2798 li
f
1 lw
0 lc
878.205 46.2798 mo
884.205 40.2798 li
878.205 40.2798 mo
884.205 46.2798 li
@
grestore
gsave
887.543 46.7388 mo
894.543 46.7388 li
894.543 39.7388 li
887.543 39.7388 li
887.543 46.7388 li
clp
888.043 46.2386 mo
894.043 40.2386 li
888.043 40.2386 mo
894.043 46.2386 li
f
1 lw
0 lc
888.043 46.2386 mo
894.043 40.2386 li
888.043 40.2386 mo
894.043 46.2386 li
@
grestore
gsave
897.381 46.718 mo
904.381 46.718 li
904.381 39.718 li
897.381 39.718 li
897.381 46.718 li
clp
897.881 46.2181 mo
903.881 40.2181 li
897.881 40.2181 mo
903.881 46.2181 li
f
1 lw
0 lc
897.881 46.2181 mo
903.881 40.2181 li
897.881 40.2181 mo
903.881 46.2181 li
@
grestore
gsave
907.219 46.6356 mo
914.219 46.6356 li
914.219 39.6357 li
907.219 39.6357 li
907.219 46.6356 li
clp
907.719 46.1357 mo
913.719 40.1357 li
907.719 40.1357 mo
913.719 46.1357 li
f
1 lw
0 lc
907.719 46.1357 mo
913.719 40.1357 li
907.719 40.1357 mo
913.719 46.1357 li
@
grestore
gsave
917.057 46.574 mo
924.057 46.574 li
924.057 39.5741 li
917.057 39.5741 li
917.057 46.574 li
clp
917.557 46.074 mo
923.557 40.074 li
917.557 40.074 mo
923.557 46.074 li
f
1 lw
0 lc
917.557 46.074 mo
923.557 40.074 li
917.557 40.074 mo
923.557 46.074 li
@
grestore
gsave
926.895 46.574 mo
933.895 46.574 li
933.895 39.5741 li
926.895 39.5741 li
926.895 46.574 li
clp
927.395 46.074 mo
933.395 40.074 li
927.395 40.074 mo
933.395 46.074 li
f
1 lw
0 lc
927.395 46.074 mo
933.395 40.074 li
927.395 40.074 mo
933.395 46.074 li
@
grestore
gsave
936.733 46.574 mo
943.733 46.574 li
943.733 39.5741 li
936.733 39.5741 li
936.733 46.574 li
clp
937.233 46.074 mo
943.233 40.074 li
937.233 40.074 mo
943.233 46.074 li
f
1 lw
0 lc
937.233 46.074 mo
943.233 40.074 li
937.233 40.074 mo
943.233 46.074 li
@
grestore
gsave
946.571 46.574 mo
953.571 46.574 li
953.571 39.5741 li
946.571 39.5741 li
946.571 46.574 li
clp
947.071 46.074 mo
953.071 40.074 li
947.071 40.074 mo
953.071 46.074 li
f
1 lw
0 lc
947.071 46.074 mo
953.071 40.074 li
947.071 40.074 mo
953.071 46.074 li
@
grestore
gsave
956.409 46.5121 mo
963.409 46.5121 li
963.409 39.5121 li
956.409 39.5121 li
956.409 46.5121 li
clp
956.909 46.0122 mo
962.909 40.0122 li
956.909 40.0122 mo
962.909 46.0122 li
f
1 lw
0 lc
956.909 46.0122 mo
962.909 40.0122 li
956.909 40.0122 mo
962.909 46.0122 li
@
grestore
gsave
966.247 46.5328 mo
973.247 46.5328 li
973.247 39.5329 li
966.247 39.5329 li
966.247 46.5328 li
clp
966.747 46.0328 mo
972.747 40.0328 li
966.747 40.0328 mo
972.747 46.0328 li
f
1 lw
0 lc
966.747 46.0328 mo
972.747 40.0328 li
966.747 40.0328 mo
972.747 46.0328 li
@
grestore
gsave
976.085 46.5944 mo
983.085 46.5944 li
983.085 39.5945 li
976.085 39.5945 li
976.085 46.5944 li
clp
976.585 46.0945 mo
982.585 40.0945 li
976.585 40.0945 mo
982.585 46.0945 li
f
1 lw
0 lc
976.585 46.0945 mo
982.585 40.0945 li
976.585 40.0945 mo
982.585 46.0945 li
@
grestore
gsave
985.923 46.5533 mo
992.923 46.5533 li
992.923 39.5533 li
985.923 39.5533 li
985.923 46.5533 li
clp
986.423 46.0533 mo
992.423 40.0533 li
986.423 40.0533 mo
992.423 46.0533 li
f
1 lw
0 lc
986.423 46.0533 mo
992.423 40.0533 li
986.423 40.0533 mo
992.423 46.0533 li
@
grestore
gsave
995.761 46.5328 mo
1002.76 46.5328 li
1002.76 39.5329 li
995.761 39.5329 li
995.761 46.5328 li
clp
996.261 46.0328 mo
1002.26 40.0328 li
996.261 40.0328 mo
1002.26 46.0328 li
f
1 lw
0 lc
996.261 46.0328 mo
1002.26 40.0328 li
996.261 40.0328 mo
1002.26 46.0328 li
@
grestore
gsave
1005.6 46.5533 mo
1012.6 46.5533 li
1012.6 39.5533 li
1005.6 39.5533 li
1005.6 46.5533 li
clp
1006.1 46.0533 mo
1012.1 40.0533 li
1006.1 40.0533 mo
1012.1 46.0533 li
f
1 lw
0 lc
1006.1 46.0533 mo
1012.1 40.0533 li
1006.1 40.0533 mo
1012.1 46.0533 li
@
grestore
gsave
1015.44 46.5533 mo
1022.44 46.5533 li
1022.44 39.5533 li
1015.44 39.5533 li
1015.44 46.5533 li
clp
1015.94 46.0533 mo
1021.94 40.0533 li
1015.94 40.0533 mo
1021.94 46.0533 li
f
1 lw
0 lc
1015.94 46.0533 mo
1021.94 40.0533 li
1015.94 40.0533 mo
1021.94 46.0533 li
@
grestore
gsave
1025.28 46.574 mo
1032.28 46.574 li
1032.28 39.5741 li
1025.28 39.5741 li
1025.28 46.574 li
clp
1025.78 46.0739 mo
1031.78 40.0739 li
1025.78 40.0739 mo
1031.78 46.0739 li
f
1 lw
0 lc
1025.78 46.0739 mo
1031.78 40.0739 li
1025.78 40.0739 mo
1031.78 46.0739 li
@
grestore
gsave
1035.11 46.574 mo
1042.11 46.574 li
1042.11 39.5741 li
1035.11 39.5741 li
1035.11 46.574 li
clp
1035.61 46.0739 mo
1041.61 40.0739 li
1035.61 40.0739 mo
1041.61 46.0739 li
f
1 lw
0 lc
1035.61 46.0739 mo
1041.61 40.0739 li
1035.61 40.0739 mo
1041.61 46.0739 li
@
grestore
gsave
1044.95 46.574 mo
1051.95 46.574 li
1051.95 39.5741 li
1044.95 39.5741 li
1044.95 46.574 li
clp
1045.45 46.0739 mo
1051.45 40.0739 li
1045.45 40.0739 mo
1051.45 46.0739 li
f
1 lw
0 lc
1045.45 46.0739 mo
1051.45 40.0739 li
1045.45 40.0739 mo
1051.45 46.0739 li
@
grestore
gsave
1054.79 46.574 mo
1061.79 46.574 li
1061.79 39.5741 li
1054.79 39.5741 li
1054.79 46.574 li
clp
1055.29 46.0739 mo
1061.29 40.0739 li
1055.29 40.0739 mo
1061.29 46.0739 li
f
1 lw
0 lc
1055.29 46.0739 mo
1061.29 40.0739 li
1055.29 40.0739 mo
1061.29 46.0739 li
@
grestore
gsave
1064.63 46.5944 mo
1071.63 46.5944 li
1071.63 39.5945 li
1064.63 39.5945 li
1064.63 46.5944 li
clp
1065.13 46.0945 mo
1071.13 40.0945 li
1065.13 40.0945 mo
1071.13 46.0945 li
f
1 lw
0 lc
1065.13 46.0945 mo
1071.13 40.0945 li
1065.13 40.0945 mo
1071.13 46.0945 li
@
grestore
gsave
1074.47 46.6564 mo
1081.47 46.6564 li
1081.47 39.6561 li
1074.47 39.6561 li
1074.47 46.6564 li
clp
1074.97 46.1563 mo
1080.97 40.1563 li
1074.97 40.1563 mo
1080.97 46.1563 li
f
1 lw
0 lc
1074.97 46.1563 mo
1080.97 40.1563 li
1074.97 40.1563 mo
1080.97 46.1563 li
@
grestore
gsave
1084.3 46.6152 mo
1091.3 46.6152 li
1091.3 39.6149 li
1084.3 39.6149 li
1084.3 46.6152 li
clp
1084.8 46.1151 mo
1090.8 40.1151 li
1084.8 40.1151 mo
1090.8 46.1151 li
f
1 lw
0 lc
1084.8 46.1151 mo
1090.8 40.1151 li
1084.8 40.1151 mo
1090.8 46.1151 li
@
grestore
gsave
1094.14 46.574 mo
1101.14 46.574 li
1101.14 39.5737 li
1094.14 39.5737 li
1094.14 46.574 li
clp
1094.64 46.0739 mo
1100.64 40.0739 li
1094.64 40.0739 mo
1100.64 46.0739 li
f
1 lw
0 lc
1094.64 46.0739 mo
1100.64 40.0739 li
1094.64 40.0739 mo
1100.64 46.0739 li
@
grestore
.8 lw
0 lj
74.9796 546.186 mo
74.9796 8.97205 li
@
1146.34 546.186 mo
1146.34 8.97205 li
@
74.9796 546.186 mo
1146.34 546.186 li
@
74.9796 8.97205 mo
1146.34 8.97205 li
@
gsave
1139.34 540.686 mo
862.183 540.686 li
861.593 540.684 861.246 540.542 861.037 540.332 cv
860.827 540.123 860.685 539.776 860.683 539.185 cv
860.683 442.748 li
860.685 442.158 860.827 441.811 861.037 441.602 cv
861.246 441.392 861.593 441.25 862.183 441.248 cv
1139.34 441.248 li
1139.93 441.25 1140.28 441.392 1140.49 441.602 cv
1140.7 441.811 1140.84 442.158 1140.84 442.748 cv
1140.84 539.185 li
1140.84 539.776 1140.7 540.123 1140.49 540.332 cv
1140.28 540.542 1139.93 540.684 1139.34 540.686 cv
clp
860.683 441.248 mo
1140.84 441.248 li
1140.84 540.686 li
860.683 540.686 li
cp
0 0 0 0 cmyk
f
grestore
1139.35 541.685 mo
1139.35 541.685 1139.34 541.685 1139.34 541.685 cv
862.183 541.685 li
862.18 541.685 862.177 541.685 862.173 541.685 cv
861.434 541.685 860.785 541.494 860.33 541.039 cv
859.873 540.582 859.681 539.929 859.683 539.185 cv
859.683 442.748 li
859.681 442.005 859.873 441.352 860.33 440.895 cv
860.785 440.439 861.434 440.248 862.173 440.248 cv
862.177 440.248 862.18 440.248 862.183 440.248 cv
1139.34 440.248 li
1139.34 440.248 1139.35 440.248 1139.35 440.248 cv
1140.09 440.248 1140.74 440.439 1141.19 440.895 cv
1141.65 441.352 1141.84 442.005 1141.84 442.748 cv
1141.84 539.185 li
1141.84 539.929 1141.65 540.582 1141.19 541.039 cv
1140.74 541.494 1140.09 541.685 1139.35 541.685 cv
862.183 540.686 mo
1139.34 540.686 li
1139.93 540.684 1140.28 540.542 1140.49 540.332 cv
1140.7 540.123 1140.84 539.776 1140.84 539.185 cv
1140.84 442.748 li
1140.84 442.158 1140.7 441.811 1140.49 441.602 cv
1140.28 441.392 1139.93 441.25 1139.34 441.248 cv
862.183 441.248 li
861.593 441.25 861.246 441.392 861.037 441.602 cv
860.827 441.811 860.685 442.158 860.683 442.748 cv
860.683 539.185 li
860.685 539.776 860.827 540.123 861.037 540.332 cv
861.246 540.542 861.593 540.684 862.183 540.686 cv
862.183 540.686 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
864.183 456.451 mo
884.183 456.451 li
0 1 1 0 cmyk
@
896.123 446.991 mo
896.123 458.331 li
898.503 458.331 li
900.503 458.331 901.983 457.891 902.923 456.971 cv
903.843 456.051 904.323 454.611 904.323 452.651 cv
904.323 450.691 903.843 449.271 902.923 448.351 cv
901.983 447.451 900.503 446.991 898.503 446.991 cv
896.123 446.991 li
894.143 445.371 mo
898.203 445.371 li
901.023 445.371 903.103 445.971 904.423 447.131 cv
905.743 448.311 906.403 450.151 906.403 452.651 cv
906.403 455.171 905.723 457.011 904.403 458.191 cv
903.083 459.371 901.003 459.951 898.203 459.951 cv
894.143 459.951 li
894.143 445.371 li
1 /0 /CSD get_res sepcs
1 sep
f
911.523 452.991 mo
911.523 458.331 li
914.683 458.331 li
915.743 458.331 916.523 458.111 917.043 457.671 cv
917.543 457.231 917.803 456.571 917.803 455.651 cv
917.803 454.751 917.543 454.091 917.043 453.651 cv
916.523 453.211 915.743 452.991 914.683 452.991 cv
911.523 452.991 li
911.523 446.991 mo
911.523 451.391 li
914.443 451.391 li
915.403 451.391 916.103 451.211 916.583 450.851 cv
917.063 450.491 917.303 449.951 917.303 449.191 cv
917.303 448.471 917.063 447.911 916.583 447.551 cv
916.103 447.191 915.403 446.991 914.443 446.991 cv
911.523 446.991 li
909.543 445.371 mo
914.583 445.371 li
916.083 445.371 917.243 445.691 918.063 446.311 cv
918.863 446.951 919.283 447.831 919.283 448.971 cv
919.283 449.871 919.063 450.591 918.643 451.111 cv
918.223 451.631 917.623 451.971 916.823 452.091 cv
917.783 452.311 918.543 452.751 919.083 453.411 cv
919.603 454.071 919.883 454.891 919.883 455.871 cv
919.883 457.191 919.423 458.191 918.543 458.891 cv
917.663 459.611 916.403 459.951 914.783 459.951 cv
909.543 459.951 li
909.543 445.371 li
f
923.263 445.371 mo
925.923 445.371 li
932.383 457.571 li
932.383 445.371 li
934.303 445.371 li
934.303 459.951 li
931.643 459.951 li
925.183 447.751 li
925.183 459.951 li
923.263 459.951 li
923.263 445.371 li
f
948.823 444.771 mo
947.943 446.291 947.303 447.771 946.883 449.231 cv
946.443 450.691 946.243 452.171 946.243 453.671 cv
946.243 455.191 946.443 456.671 946.883 458.131 cv
947.303 459.611 947.943 461.071 948.823 462.571 cv
947.263 462.571 li
946.283 461.031 945.543 459.551 945.063 458.071 cv
944.583 456.591 944.343 455.131 944.343 453.671 cv
944.343 452.231 944.583 450.771 945.063 449.291 cv
945.543 447.811 946.263 446.311 947.263 444.771 cv
948.823 444.771 li
f
950.383 445.371 mo
962.703 445.371 li
962.703 447.031 li
957.523 447.031 li
957.523 459.951 li
955.543 459.951 li
955.543 447.031 li
950.383 447.031 li
950.383 445.371 li
f
970.863 450.691 mo
970.663 450.571 970.443 450.491 970.203 450.431 cv
969.963 450.391 969.703 450.351 969.423 450.351 cv
968.403 450.351 967.623 450.691 967.083 451.351 cv
966.523 452.011 966.263 452.951 966.263 454.191 cv
966.263 459.951 li
964.463 459.951 li
964.463 449.011 li
966.263 449.011 li
966.263 450.711 li
966.623 450.051 967.123 449.551 967.723 449.231 cv
968.323 448.911 969.063 448.751 969.943 448.751 cv
970.063 448.751 970.203 448.771 970.363 448.771 cv
970.503 448.791 970.663 448.811 970.863 448.851 cv
970.863 450.691 li
f
977.723 454.451 mo
976.263 454.451 975.263 454.631 974.703 454.951 cv
974.143 455.291 973.863 455.851 973.863 456.651 cv
973.863 457.291 974.063 457.811 974.483 458.171 cv
974.903 458.551 975.483 458.731 976.203 458.731 cv
977.203 458.731 978.003 458.391 978.603 457.671 cv
979.203 456.971 979.503 456.031 979.503 454.851 cv
979.503 454.451 li
977.723 454.451 li
981.303 453.711 mo
981.303 459.951 li
979.503 459.951 li
979.503 458.291 li
979.083 458.971 978.563 459.451 977.963 459.751 cv
977.363 460.051 976.603 460.211 975.723 460.211 cv
974.603 460.211 973.703 459.911 973.043 459.291 cv
972.383 458.671 972.063 457.831 972.063 456.771 cv
972.063 455.551 972.463 454.631 973.303 453.991 cv
974.123 453.371 975.343 453.051 976.983 453.051 cv
979.503 453.051 li
979.503 452.871 li
979.503 452.051 979.223 451.411 978.683 450.951 cv
978.143 450.511 977.383 450.271 976.403 450.271 cv
975.763 450.271 975.163 450.351 974.563 450.511 cv
973.963 450.671 973.403 450.891 972.863 451.171 cv
972.863 449.511 li
973.503 449.271 974.143 449.071 974.763 448.951 cv
975.383 448.831 975.983 448.751 976.583 448.751 cv
978.163 448.751 979.343 449.171 980.123 449.991 cv
980.903 450.811 981.303 452.051 981.303 453.711 cv
f
985.003 449.011 mo
986.803 449.011 li
986.803 459.951 li
985.003 459.951 li
985.003 449.011 li
985.003 444.751 mo
986.803 444.751 li
986.803 447.031 li
985.003 447.031 li
985.003 444.751 li
f
999.663 453.351 mo
999.663 459.951 li
997.863 459.951 li
997.863 453.411 li
997.863 452.371 997.643 451.611 997.243 451.091 cv
996.843 450.571 996.243 450.311 995.443 450.311 cv
994.463 450.311 993.703 450.631 993.143 451.251 cv
992.583 451.871 992.303 452.711 992.303 453.771 cv
992.303 459.951 li
990.503 459.951 li
990.503 449.011 li
992.303 449.011 li
992.303 450.711 li
992.723 450.071 993.223 449.571 993.823 449.251 cv
994.403 448.931 995.083 448.751 995.843 448.751 cv
997.083 448.751 998.043 449.151 998.683 449.931 cv
999.323 450.711 999.663 451.851 999.663 453.351 cv
f
1003.24 449.011 mo
1005.04 449.011 li
1005.04 459.951 li
1003.24 459.951 li
1003.24 449.011 li
1003.24 444.751 mo
1005.04 444.751 li
1005.04 447.031 li
1003.24 447.031 li
1003.24 444.751 li
f
1017.9 453.351 mo
1017.9 459.951 li
1016.1 459.951 li
1016.1 453.411 li
1016.1 452.371 1015.88 451.611 1015.48 451.091 cv
1015.08 450.571 1014.48 450.311 1013.68 450.311 cv
1012.7 450.311 1011.94 450.631 1011.38 451.251 cv
1010.82 451.871 1010.54 452.711 1010.54 453.771 cv
1010.54 459.951 li
1008.74 459.951 li
1008.74 449.011 li
1010.54 449.011 li
1010.54 450.711 li
1010.96 450.071 1011.46 449.571 1012.06 449.251 cv
1012.64 448.931 1013.32 448.751 1014.08 448.751 cv
1015.32 448.751 1016.28 449.151 1016.92 449.931 cv
1017.56 450.711 1017.9 451.851 1017.9 453.351 cv
f
1028.68 454.351 mo
1028.68 453.071 1028.4 452.051 1027.88 451.331 cv
1027.34 450.611 1026.58 450.251 1025.62 450.251 cv
1024.66 450.251 1023.9 450.611 1023.36 451.331 cv
1022.82 452.051 1022.56 453.071 1022.56 454.351 cv
1022.56 455.651 1022.82 456.651 1023.36 457.371 cv
1023.9 458.091 1024.66 458.451 1025.62 458.451 cv
1026.58 458.451 1027.34 458.091 1027.88 457.371 cv
1028.4 456.651 1028.68 455.651 1028.68 454.351 cv
1030.48 458.591 mo
1030.48 460.431 1030.06 461.811 1029.24 462.731 cv
1028.4 463.631 1027.14 464.091 1025.44 464.091 cv
1024.8 464.091 1024.22 464.031 1023.66 463.951 cv
1023.1 463.851 1022.54 463.711 1022.02 463.511 cv
1022.02 461.771 li
1022.54 462.051 1023.06 462.251 1023.58 462.391 cv
1024.1 462.531 1024.62 462.611 1025.16 462.611 cv
1026.32 462.611 1027.2 462.291 1027.8 461.691 cv
1028.38 461.071 1028.68 460.151 1028.68 458.911 cv
1028.68 458.031 li
1028.3 458.671 1027.82 459.151 1027.24 459.471 cv
1026.66 459.791 1025.98 459.951 1025.18 459.951 cv
1023.82 459.951 1022.74 459.451 1021.92 458.431 cv
1021.1 457.411 1020.7 456.051 1020.7 454.351 cv
1020.7 452.671 1021.1 451.311 1021.92 450.291 cv
1022.74 449.271 1023.82 448.751 1025.18 448.751 cv
1025.98 448.751 1026.66 448.911 1027.24 449.231 cv
1027.82 449.551 1028.3 450.031 1028.68 450.671 cv
1028.68 449.011 li
1030.48 449.011 li
1030.48 458.591 li
f
1034.64 457.471 mo
1036.7 457.471 li
1036.7 459.151 li
1035.1 462.251 li
1033.84 462.251 li
1034.64 459.151 li
1034.64 457.471 li
f
1055.72 445.851 mo
1055.72 447.771 li
1054.96 447.411 1054.26 447.151 1053.6 446.971 cv
1052.92 446.811 1052.28 446.711 1051.68 446.711 cv
1050.6 446.711 1049.76 446.931 1049.18 447.331 cv
1048.6 447.751 1048.32 448.351 1048.32 449.111 cv
1048.32 449.751 1048.5 450.251 1048.9 450.571 cv
1049.28 450.911 1050.02 451.171 1051.1 451.371 cv
1052.3 451.611 li
1053.76 451.891 1054.84 452.391 1055.54 453.091 cv
1056.24 453.811 1056.6 454.751 1056.6 455.931 cv
1056.6 457.351 1056.12 458.411 1055.18 459.131 cv
1054.22 459.851 1052.84 460.211 1051.02 460.211 cv
1050.32 460.211 1049.58 460.131 1048.8 459.991 cv
1048.02 459.851 1047.22 459.631 1046.4 459.311 cv
1046.4 457.271 li
1047.2 457.731 1047.98 458.071 1048.74 458.291 cv
1049.5 458.531 1050.26 458.631 1051.02 458.631 cv
1052.14 458.631 1053 458.411 1053.62 457.971 cv
1054.22 457.531 1054.54 456.911 1054.54 456.071 cv
1054.54 455.351 1054.32 454.791 1053.88 454.391 cv
1053.44 453.991 1052.72 453.691 1051.72 453.491 cv
1050.52 453.251 li
1049.04 452.971 1047.98 452.511 1047.32 451.871 cv
1046.66 451.251 1046.34 450.391 1046.34 449.271 cv
1046.34 447.991 1046.78 446.971 1047.7 446.231 cv
1048.6 445.491 1049.86 445.111 1051.46 445.111 cv
1052.14 445.111 1052.82 445.171 1053.54 445.291 cv
1054.24 445.411 1054.96 445.611 1055.72 445.851 cv
f
1059.6 449.011 mo
1061.4 449.011 li
1061.4 459.951 li
1059.6 459.951 li
1059.6 449.011 li
1059.6 444.751 mo
1061.4 444.751 li
1061.4 447.031 li
1059.6 447.031 li
1059.6 444.751 li
f
1072.36 454.351 mo
1072.36 453.071 1072.08 452.051 1071.56 451.331 cv
1071.02 450.611 1070.26 450.251 1069.3 450.251 cv
1068.34 450.251 1067.58 450.611 1067.04 451.331 cv
1066.5 452.051 1066.24 453.071 1066.24 454.351 cv
1066.24 455.651 1066.5 456.651 1067.04 457.371 cv
1067.58 458.091 1068.34 458.451 1069.3 458.451 cv
1070.26 458.451 1071.02 458.091 1071.56 457.371 cv
1072.08 456.651 1072.36 455.651 1072.36 454.351 cv
1074.16 458.591 mo
1074.16 460.431 1073.74 461.811 1072.92 462.731 cv
1072.08 463.631 1070.82 464.091 1069.12 464.091 cv
1068.48 464.091 1067.9 464.031 1067.34 463.951 cv
1066.78 463.851 1066.22 463.711 1065.7 463.511 cv
1065.7 461.771 li
1066.22 462.051 1066.74 462.251 1067.26 462.391 cv
1067.78 462.531 1068.3 462.611 1068.84 462.611 cv
1070 462.611 1070.88 462.291 1071.48 461.691 cv
1072.06 461.071 1072.36 460.151 1072.36 458.911 cv
1072.36 458.031 li
1071.98 458.671 1071.5 459.151 1070.92 459.471 cv
1070.34 459.791 1069.66 459.951 1068.86 459.951 cv
1067.5 459.951 1066.42 459.451 1065.6 458.431 cv
1064.78 457.411 1064.38 456.051 1064.38 454.351 cv
1064.38 452.671 1064.78 451.311 1065.6 450.291 cv
1066.42 449.271 1067.5 448.751 1068.86 448.751 cv
1069.66 448.751 1070.34 448.911 1070.92 449.231 cv
1071.5 449.551 1071.98 450.031 1072.36 450.671 cv
1072.36 449.011 li
1074.16 449.011 li
1074.16 458.591 li
f
1086.38 451.111 mo
1086.82 450.311 1087.36 449.731 1087.98 449.331 cv
1088.6 448.951 1089.34 448.751 1090.2 448.751 cv
1091.32 448.751 1092.2 449.151 1092.82 449.951 cv
1093.44 450.751 1093.76 451.891 1093.76 453.351 cv
1093.76 459.951 li
1091.96 459.951 li
1091.96 453.411 li
1091.96 452.371 1091.76 451.591 1091.4 451.071 cv
1091.02 450.571 1090.46 450.311 1089.7 450.311 cv
1088.76 450.311 1088.02 450.631 1087.48 451.251 cv
1086.94 451.871 1086.68 452.711 1086.68 453.771 cv
1086.68 459.951 li
1084.88 459.951 li
1084.88 453.411 li
1084.88 452.371 1084.68 451.591 1084.32 451.071 cv
1083.94 450.571 1083.36 450.311 1082.6 450.311 cv
1081.68 450.311 1080.94 450.631 1080.4 451.251 cv
1079.86 451.871 1079.6 452.711 1079.6 453.771 cv
1079.6 459.951 li
1077.8 459.951 li
1077.8 449.011 li
1079.6 449.011 li
1079.6 450.711 li
1080 450.051 1080.5 449.551 1081.08 449.231 cv
1081.64 448.911 1082.32 448.751 1083.12 448.751 cv
1083.92 448.751 1084.58 448.951 1085.14 449.351 cv
1085.7 449.751 1086.1 450.351 1086.38 451.111 cv
f
1101.58 450.271 mo
1100.62 450.271 1099.86 450.651 1099.3 451.411 cv
1098.74 452.171 1098.46 453.191 1098.46 454.491 cv
1098.46 455.811 1098.72 456.831 1099.28 457.591 cv
1099.84 458.351 1100.6 458.711 1101.58 458.711 cv
1102.54 458.711 1103.3 458.351 1103.86 457.591 cv
1104.42 456.831 1104.7 455.811 1104.7 454.491 cv
1104.7 453.211 1104.42 452.171 1103.86 451.411 cv
1103.3 450.651 1102.54 450.271 1101.58 450.271 cv
1101.58 448.751 mo
1103.14 448.751 1104.36 449.271 1105.26 450.271 cv
1106.14 451.291 1106.6 452.691 1106.6 454.491 cv
1106.6 456.291 1106.14 457.691 1105.26 458.691 cv
1104.36 459.711 1103.14 460.211 1101.58 460.211 cv
1100 460.211 1098.76 459.711 1097.88 458.691 cv
1097 457.691 1096.56 456.291 1096.56 454.491 cv
1096.56 452.691 1097 451.291 1097.88 450.271 cv
1098.76 449.271 1100 448.751 1101.58 448.751 cv
f
1109.58 449.011 mo
1111.38 449.011 li
1111.38 459.951 li
1109.58 459.951 li
1109.58 449.011 li
1109.58 444.751 mo
1111.38 444.751 li
1111.38 447.031 li
1109.58 447.031 li
1109.58 444.751 li
f
1122.34 450.671 mo
1122.34 444.751 li
1124.14 444.751 li
1124.14 459.951 li
1122.34 459.951 li
1122.34 458.311 li
1121.96 458.971 1121.48 459.451 1120.9 459.751 cv
1120.32 460.051 1119.64 460.211 1118.84 460.211 cv
1117.52 460.211 1116.44 459.691 1115.6 458.651 cv
1114.76 457.611 1114.36 456.211 1114.36 454.491 cv
1114.36 452.771 1114.76 451.391 1115.6 450.331 cv
1116.44 449.291 1117.52 448.751 1118.84 448.751 cv
1119.64 448.751 1120.32 448.911 1120.9 449.231 cv
1121.48 449.551 1121.96 450.031 1122.34 450.671 cv
1116.22 454.491 mo
1116.22 455.811 1116.48 456.851 1117.02 457.611 cv
1117.56 458.371 1118.32 458.731 1119.28 458.731 cv
1120.22 458.731 1120.96 458.371 1121.52 457.611 cv
1122.06 456.851 1122.34 455.811 1122.34 454.491 cv
1122.34 453.171 1122.06 452.151 1121.52 451.391 cv
1120.96 450.631 1120.22 450.251 1119.28 450.251 cv
1118.32 450.251 1117.56 450.631 1117.02 451.391 cv
1116.48 452.151 1116.22 453.171 1116.22 454.491 cv
f
1127.56 444.771 mo
1129.12 444.771 li
1130.08 446.311 1130.82 447.811 1131.3 449.291 cv
1131.78 450.771 1132.04 452.231 1132.04 453.671 cv
1132.04 455.131 1131.78 456.591 1131.3 458.071 cv
1130.82 459.551 1130.08 461.031 1129.12 462.571 cv
1127.56 462.571 li
1128.42 461.071 1129.06 459.611 1129.5 458.131 cv
1129.92 456.671 1130.14 455.191 1130.14 453.671 cv
1130.14 452.171 1129.92 450.691 1129.5 449.231 cv
1129.06 447.771 1128.42 446.291 1127.56 444.771 cv
f
864.183 480.811 mo
884.183 480.811 li
0 1 1 0 cmyk
@
871.183 483.811 mo
877.183 477.811 li
871.183 477.811 mo
877.183 483.811 li
f
1 lw
0 lc
871.183 483.811 mo
877.183 477.811 li
871.183 477.811 mo
877.183 483.811 li
@
896.123 471.351 mo
896.123 482.691 li
898.503 482.691 li
900.503 482.691 901.983 482.251 902.923 481.331 cv
903.843 480.411 904.323 478.971 904.323 477.011 cv
904.323 475.051 903.843 473.631 902.923 472.711 cv
901.983 471.811 900.503 471.351 898.503 471.351 cv
896.123 471.351 li
894.143 469.731 mo
898.203 469.731 li
901.023 469.731 903.103 470.331 904.423 471.491 cv
905.743 472.671 906.403 474.511 906.403 477.011 cv
906.403 479.531 905.723 481.371 904.403 482.551 cv
903.083 483.731 901.003 484.311 898.203 484.311 cv
894.143 484.311 li
894.143 469.731 li
1 /0 /CSD get_res sepcs
1 sep
f
911.523 477.351 mo
911.523 482.691 li
914.683 482.691 li
915.743 482.691 916.523 482.471 917.043 482.031 cv
917.543 481.591 917.803 480.931 917.803 480.011 cv
917.803 479.111 917.543 478.451 917.043 478.011 cv
916.523 477.571 915.743 477.351 914.683 477.351 cv
911.523 477.351 li
911.523 471.351 mo
911.523 475.751 li
914.443 475.751 li
915.403 475.751 916.103 475.571 916.583 475.211 cv
917.063 474.851 917.303 474.311 917.303 473.551 cv
917.303 472.831 917.063 472.271 916.583 471.911 cv
916.103 471.551 915.403 471.351 914.443 471.351 cv
911.523 471.351 li
909.543 469.731 mo
914.583 469.731 li
916.083 469.731 917.243 470.051 918.063 470.671 cv
918.863 471.311 919.283 472.191 919.283 473.331 cv
919.283 474.231 919.063 474.951 918.643 475.471 cv
918.223 475.991 917.623 476.331 916.823 476.451 cv
917.783 476.671 918.543 477.111 919.083 477.771 cv
919.603 478.431 919.883 479.251 919.883 480.231 cv
919.883 481.551 919.423 482.551 918.543 483.251 cv
917.663 483.971 916.403 484.311 914.783 484.311 cv
909.543 484.311 li
909.543 469.731 li
f
923.263 469.731 mo
925.923 469.731 li
932.383 481.931 li
932.383 469.731 li
934.303 469.731 li
934.303 484.311 li
931.643 484.311 li
925.183 472.111 li
925.183 484.311 li
923.263 484.311 li
923.263 469.731 li
f
948.823 469.131 mo
947.943 470.651 947.303 472.131 946.883 473.591 cv
946.443 475.051 946.243 476.531 946.243 478.031 cv
946.243 479.551 946.443 481.031 946.883 482.491 cv
947.303 483.971 947.943 485.431 948.823 486.931 cv
947.263 486.931 li
946.283 485.391 945.543 483.911 945.063 482.431 cv
944.583 480.951 944.343 479.491 944.343 478.031 cv
944.343 476.591 944.583 475.131 945.063 473.651 cv
945.543 472.171 946.263 470.671 947.263 469.131 cv
948.823 469.131 li
f
950.383 469.731 mo
962.703 469.731 li
962.703 471.391 li
957.523 471.391 li
957.523 484.311 li
955.543 484.311 li
955.543 471.391 li
950.383 471.391 li
950.383 469.731 li
f
973.883 478.391 mo
973.883 479.271 li
965.623 479.271 li
965.703 480.511 966.063 481.471 966.743 482.111 cv
967.403 482.751 968.323 483.071 969.523 483.071 cv
970.203 483.071 970.883 482.991 971.523 482.831 cv
972.163 482.671 972.823 482.411 973.463 482.051 cv
973.463 483.751 li
972.823 484.031 972.163 484.251 971.483 484.371 cv
970.803 484.491 970.103 484.571 969.423 484.571 cv
967.663 484.571 966.283 484.071 965.263 483.071 cv
964.243 482.071 963.743 480.691 963.743 478.951 cv
963.743 477.171 964.223 475.751 965.183 474.691 cv
966.143 473.651 967.463 473.111 969.103 473.111 cv
970.583 473.111 971.743 473.591 972.603 474.531 cv
973.443 475.491 973.883 476.771 973.883 478.391 cv
972.083 477.871 mo
972.063 476.891 971.783 476.111 971.263 475.511 cv
970.723 474.931 970.003 474.631 969.123 474.631 cv
968.123 474.631 967.323 474.931 966.723 475.491 cv
966.123 476.051 965.763 476.851 965.683 477.871 cv
972.083 477.871 li
f
983.803 473.691 mo
983.803 475.391 li
983.283 475.151 982.763 474.951 982.223 474.811 cv
981.663 474.691 981.103 474.611 980.523 474.611 cv
979.623 474.611 978.943 474.751 978.503 475.031 cv
978.063 475.311 977.843 475.711 977.843 476.251 cv
977.843 476.671 978.003 476.991 978.323 477.231 cv
978.643 477.471 979.283 477.711 980.243 477.911 cv
980.863 478.051 li
982.143 478.331 983.043 478.731 983.583 479.211 cv
984.103 479.711 984.383 480.411 984.383 481.291 cv
984.383 482.311 983.983 483.111 983.183 483.691 cv
982.383 484.291 981.263 484.571 979.863 484.571 cv
979.263 484.571 978.663 484.511 978.023 484.411 cv
977.383 484.311 976.723 484.151 976.023 483.911 cv
976.023 482.051 li
976.683 482.411 977.343 482.671 977.983 482.831 cv
978.623 483.011 979.263 483.091 979.903 483.091 cv
980.743 483.091 981.403 482.951 981.863 482.671 cv
982.303 482.391 982.543 481.971 982.543 481.431 cv
982.543 480.951 982.363 480.571 982.043 480.311 cv
981.723 480.051 981.003 479.791 979.883 479.551 cv
979.263 479.411 li
978.143 479.171 977.323 478.811 976.843 478.331 cv
976.343 477.851 976.103 477.191 976.103 476.331 cv
976.103 475.311 976.463 474.511 977.183 473.951 cv
977.903 473.391 978.943 473.111 980.303 473.111 cv
980.963 473.111 981.583 473.171 982.183 473.271 cv
982.763 473.371 983.303 473.511 983.803 473.691 cv
f
989.023 470.271 mo
989.023 473.371 li
992.723 473.371 li
992.723 474.771 li
989.023 474.771 li
989.023 480.711 li
989.023 481.611 989.143 482.191 989.383 482.431 cv
989.623 482.691 990.123 482.811 990.883 482.811 cv
992.723 482.811 li
992.723 484.311 li
990.883 484.311 li
989.483 484.311 988.523 484.051 988.003 483.531 cv
987.483 483.011 987.223 482.071 987.223 480.711 cv
987.223 474.771 li
985.903 474.771 li
985.903 473.371 li
987.223 473.371 li
987.223 470.271 li
989.023 470.271 li
f
995.083 473.371 mo
996.883 473.371 li
996.883 484.311 li
995.083 484.311 li
995.083 473.371 li
995.083 469.111 mo
996.883 469.111 li
996.883 471.391 li
995.083 471.391 li
995.083 469.111 li
f
1009.74 477.711 mo
1009.74 484.311 li
1007.94 484.311 li
1007.94 477.771 li
1007.94 476.731 1007.72 475.971 1007.32 475.451 cv
1006.92 474.931 1006.32 474.671 1005.52 474.671 cv
1004.54 474.671 1003.78 474.991 1003.22 475.611 cv
1002.66 476.231 1002.38 477.071 1002.38 478.131 cv
1002.38 484.311 li
1000.58 484.311 li
1000.58 473.371 li
1002.38 473.371 li
1002.38 475.071 li
1002.8 474.431 1003.3 473.931 1003.9 473.611 cv
1004.48 473.291 1005.16 473.111 1005.92 473.111 cv
1007.16 473.111 1008.12 473.511 1008.76 474.291 cv
1009.4 475.071 1009.74 476.211 1009.74 477.711 cv
f
1020.52 478.711 mo
1020.52 477.431 1020.24 476.411 1019.72 475.691 cv
1019.18 474.971 1018.42 474.611 1017.46 474.611 cv
1016.5 474.611 1015.74 474.971 1015.2 475.691 cv
1014.66 476.411 1014.4 477.431 1014.4 478.711 cv
1014.4 480.011 1014.66 481.011 1015.2 481.731 cv
1015.74 482.451 1016.5 482.811 1017.46 482.811 cv
1018.42 482.811 1019.18 482.451 1019.72 481.731 cv
1020.24 481.011 1020.52 480.011 1020.52 478.711 cv
1022.32 482.951 mo
1022.32 484.791 1021.9 486.171 1021.08 487.091 cv
1020.24 487.991 1018.98 488.451 1017.28 488.451 cv
1016.64 488.451 1016.06 488.391 1015.5 488.311 cv
1014.94 488.211 1014.38 488.071 1013.86 487.871 cv
1013.86 486.131 li
1014.38 486.411 1014.9 486.611 1015.42 486.751 cv
1015.94 486.891 1016.46 486.971 1017 486.971 cv
1018.16 486.971 1019.04 486.651 1019.64 486.051 cv
1020.22 485.431 1020.52 484.511 1020.52 483.271 cv
1020.52 482.391 li
1020.14 483.031 1019.66 483.511 1019.08 483.831 cv
1018.5 484.151 1017.82 484.311 1017.02 484.311 cv
1015.66 484.311 1014.58 483.811 1013.76 482.791 cv
1012.94 481.771 1012.54 480.411 1012.54 478.711 cv
1012.54 477.031 1012.94 475.671 1013.76 474.651 cv
1014.58 473.631 1015.66 473.111 1017.02 473.111 cv
1017.82 473.111 1018.5 473.271 1019.08 473.591 cv
1019.66 473.911 1020.14 474.391 1020.52 475.031 cv
1020.52 473.371 li
1022.32 473.371 li
1022.32 482.951 li
f
1026.48 481.831 mo
1028.54 481.831 li
1028.54 483.511 li
1026.94 486.611 li
1025.68 486.611 li
1026.48 483.511 li
1026.48 481.831 li
f
1047.56 470.211 mo
1047.56 472.131 li
1046.8 471.771 1046.1 471.511 1045.44 471.331 cv
1044.76 471.171 1044.12 471.071 1043.52 471.071 cv
1042.44 471.071 1041.6 471.291 1041.02 471.691 cv
1040.44 472.111 1040.16 472.711 1040.16 473.471 cv
1040.16 474.111 1040.34 474.611 1040.74 474.931 cv
1041.12 475.271 1041.86 475.531 1042.94 475.731 cv
1044.14 475.971 li
1045.6 476.251 1046.68 476.751 1047.38 477.451 cv
1048.08 478.171 1048.44 479.111 1048.44 480.291 cv
1048.44 481.711 1047.96 482.771 1047.02 483.491 cv
1046.06 484.211 1044.68 484.571 1042.86 484.571 cv
1042.16 484.571 1041.42 484.491 1040.64 484.351 cv
1039.86 484.211 1039.06 483.991 1038.24 483.671 cv
1038.24 481.631 li
1039.04 482.091 1039.82 482.431 1040.58 482.651 cv
1041.34 482.891 1042.1 482.991 1042.86 482.991 cv
1043.98 482.991 1044.84 482.771 1045.46 482.331 cv
1046.06 481.891 1046.38 481.271 1046.38 480.431 cv
1046.38 479.711 1046.16 479.151 1045.72 478.751 cv
1045.28 478.351 1044.56 478.051 1043.56 477.851 cv
1042.36 477.611 li
1040.88 477.331 1039.82 476.871 1039.16 476.231 cv
1038.5 475.611 1038.18 474.751 1038.18 473.631 cv
1038.18 472.351 1038.62 471.331 1039.54 470.591 cv
1040.44 469.851 1041.7 469.471 1043.3 469.471 cv
1043.98 469.471 1044.66 469.531 1045.38 469.651 cv
1046.08 469.771 1046.8 469.971 1047.56 470.211 cv
f
1051.44 473.371 mo
1053.24 473.371 li
1053.24 484.311 li
1051.44 484.311 li
1051.44 473.371 li
1051.44 469.111 mo
1053.24 469.111 li
1053.24 471.391 li
1051.44 471.391 li
1051.44 469.111 li
f
1064.2 478.711 mo
1064.2 477.431 1063.92 476.411 1063.4 475.691 cv
1062.86 474.971 1062.1 474.611 1061.14 474.611 cv
1060.18 474.611 1059.42 474.971 1058.88 475.691 cv
1058.34 476.411 1058.08 477.431 1058.08 478.711 cv
1058.08 480.011 1058.34 481.011 1058.88 481.731 cv
1059.42 482.451 1060.18 482.811 1061.14 482.811 cv
1062.1 482.811 1062.86 482.451 1063.4 481.731 cv
1063.92 481.011 1064.2 480.011 1064.2 478.711 cv
1066 482.951 mo
1066 484.791 1065.58 486.171 1064.76 487.091 cv
1063.92 487.991 1062.66 488.451 1060.96 488.451 cv
1060.32 488.451 1059.74 488.391 1059.18 488.311 cv
1058.62 488.211 1058.06 488.071 1057.54 487.871 cv
1057.54 486.131 li
1058.06 486.411 1058.58 486.611 1059.1 486.751 cv
1059.62 486.891 1060.14 486.971 1060.68 486.971 cv
1061.84 486.971 1062.72 486.651 1063.32 486.051 cv
1063.9 485.431 1064.2 484.511 1064.2 483.271 cv
1064.2 482.391 li
1063.82 483.031 1063.34 483.511 1062.76 483.831 cv
1062.18 484.151 1061.5 484.311 1060.7 484.311 cv
1059.34 484.311 1058.26 483.811 1057.44 482.791 cv
1056.62 481.771 1056.22 480.411 1056.22 478.711 cv
1056.22 477.031 1056.62 475.671 1057.44 474.651 cv
1058.26 473.631 1059.34 473.111 1060.7 473.111 cv
1061.5 473.111 1062.18 473.271 1062.76 473.591 cv
1063.34 473.911 1063.82 474.391 1064.2 475.031 cv
1064.2 473.371 li
1066 473.371 li
1066 482.951 li
f
1078.22 475.471 mo
1078.66 474.671 1079.2 474.091 1079.82 473.691 cv
1080.44 473.311 1081.18 473.111 1082.04 473.111 cv
1083.16 473.111 1084.04 473.511 1084.66 474.311 cv
1085.28 475.111 1085.6 476.251 1085.6 477.711 cv
1085.6 484.311 li
1083.8 484.311 li
1083.8 477.771 li
1083.8 476.731 1083.6 475.951 1083.24 475.431 cv
1082.86 474.931 1082.3 474.671 1081.54 474.671 cv
1080.6 474.671 1079.86 474.991 1079.32 475.611 cv
1078.78 476.231 1078.52 477.071 1078.52 478.131 cv
1078.52 484.311 li
1076.72 484.311 li
1076.72 477.771 li
1076.72 476.731 1076.52 475.951 1076.16 475.431 cv
1075.78 474.931 1075.2 474.671 1074.44 474.671 cv
1073.52 474.671 1072.78 474.991 1072.24 475.611 cv
1071.7 476.231 1071.44 477.071 1071.44 478.131 cv
1071.44 484.311 li
1069.64 484.311 li
1069.64 473.371 li
1071.44 473.371 li
1071.44 475.071 li
1071.84 474.411 1072.34 473.911 1072.92 473.591 cv
1073.48 473.271 1074.16 473.111 1074.96 473.111 cv
1075.76 473.111 1076.42 473.311 1076.98 473.711 cv
1077.54 474.111 1077.94 474.711 1078.22 475.471 cv
f
1093.42 474.631 mo
1092.46 474.631 1091.7 475.011 1091.14 475.771 cv
1090.58 476.531 1090.3 477.551 1090.3 478.851 cv
1090.3 480.171 1090.56 481.191 1091.12 481.951 cv
1091.68 482.711 1092.44 483.071 1093.42 483.071 cv
1094.38 483.071 1095.14 482.711 1095.7 481.951 cv
1096.26 481.191 1096.54 480.171 1096.54 478.851 cv
1096.54 477.571 1096.26 476.531 1095.7 475.771 cv
1095.14 475.011 1094.38 474.631 1093.42 474.631 cv
1093.42 473.111 mo
1094.98 473.111 1096.2 473.631 1097.1 474.631 cv
1097.98 475.651 1098.44 477.051 1098.44 478.851 cv
1098.44 480.651 1097.98 482.051 1097.1 483.051 cv
1096.2 484.071 1094.98 484.571 1093.42 484.571 cv
1091.84 484.571 1090.6 484.071 1089.72 483.051 cv
1088.84 482.051 1088.4 480.651 1088.4 478.851 cv
1088.4 477.051 1088.84 475.651 1089.72 474.631 cv
1090.6 473.631 1091.84 473.111 1093.42 473.111 cv
f
1101.42 473.371 mo
1103.22 473.371 li
1103.22 484.311 li
1101.42 484.311 li
1101.42 473.371 li
1101.42 469.111 mo
1103.22 469.111 li
1103.22 471.391 li
1101.42 471.391 li
1101.42 469.111 li
f
1114.18 475.031 mo
1114.18 469.111 li
1115.98 469.111 li
1115.98 484.311 li
1114.18 484.311 li
1114.18 482.671 li
1113.8 483.331 1113.32 483.811 1112.74 484.111 cv
1112.16 484.411 1111.48 484.571 1110.68 484.571 cv
1109.36 484.571 1108.28 484.051 1107.44 483.011 cv
1106.6 481.971 1106.2 480.571 1106.2 478.851 cv
1106.2 477.131 1106.6 475.751 1107.44 474.691 cv
1108.28 473.651 1109.36 473.111 1110.68 473.111 cv
1111.48 473.111 1112.16 473.271 1112.74 473.591 cv
1113.32 473.911 1113.8 474.391 1114.18 475.031 cv
1108.06 478.851 mo
1108.06 480.171 1108.32 481.211 1108.86 481.971 cv
1109.4 482.731 1110.16 483.091 1111.12 483.091 cv
1112.06 483.091 1112.8 482.731 1113.36 481.971 cv
1113.9 481.211 1114.18 480.171 1114.18 478.851 cv
1114.18 477.531 1113.9 476.511 1113.36 475.751 cv
1112.8 474.991 1112.06 474.611 1111.12 474.611 cv
1110.16 474.611 1109.4 474.991 1108.86 475.751 cv
1108.32 476.511 1108.06 477.531 1108.06 478.851 cv
f
1119.4 469.131 mo
1120.96 469.131 li
1121.92 470.671 1122.66 472.171 1123.14 473.651 cv
1123.62 475.131 1123.88 476.591 1123.88 478.031 cv
1123.88 479.491 1123.62 480.951 1123.14 482.431 cv
1122.66 483.911 1121.92 485.391 1120.96 486.931 cv
1119.4 486.931 li
1120.26 485.431 1120.9 483.971 1121.34 482.491 cv
1121.76 481.031 1121.98 479.551 1121.98 478.031 cv
1121.98 476.531 1121.76 475.051 1121.34 473.591 cv
1120.9 472.131 1120.26 470.651 1119.4 469.131 cv
f
1.5 lw
2 lc
864.183 505.17 mo
884.183 505.17 li
@
896.123 495.71 mo
896.123 507.05 li
898.503 507.05 li
900.503 507.05 901.983 506.61 902.923 505.69 cv
903.843 504.77 904.323 503.33 904.323 501.37 cv
904.323 499.41 903.843 497.99 902.923 497.07 cv
901.983 496.17 900.503 495.71 898.503 495.71 cv
896.123 495.71 li
894.143 494.09 mo
898.203 494.09 li
901.023 494.09 903.103 494.69 904.423 495.85 cv
905.743 497.03 906.403 498.87 906.403 501.37 cv
906.403 503.89 905.723 505.73 904.403 506.91 cv
903.083 508.09 901.003 508.67 898.203 508.67 cv
894.143 508.67 li
894.143 494.09 li
f
911.523 501.71 mo
911.523 507.05 li
914.683 507.05 li
915.743 507.05 916.523 506.83 917.043 506.39 cv
917.543 505.95 917.803 505.29 917.803 504.37 cv
917.803 503.47 917.543 502.81 917.043 502.37 cv
916.523 501.93 915.743 501.71 914.683 501.71 cv
911.523 501.71 li
911.523 495.71 mo
911.523 500.11 li
914.443 500.11 li
915.403 500.11 916.103 499.93 916.583 499.57 cv
917.063 499.21 917.303 498.67 917.303 497.91 cv
917.303 497.19 917.063 496.63 916.583 496.27 cv
916.103 495.91 915.403 495.71 914.443 495.71 cv
911.523 495.71 li
909.543 494.09 mo
914.583 494.09 li
916.083 494.09 917.243 494.41 918.063 495.03 cv
918.863 495.67 919.283 496.55 919.283 497.69 cv
919.283 498.59 919.063 499.31 918.643 499.83 cv
918.223 500.35 917.623 500.69 916.823 500.81 cv
917.783 501.03 918.543 501.47 919.083 502.13 cv
919.603 502.79 919.883 503.61 919.883 504.59 cv
919.883 505.91 919.423 506.91 918.543 507.61 cv
917.663 508.33 916.403 508.67 914.783 508.67 cv
909.543 508.67 li
909.543 494.09 li
f
923.263 494.09 mo
925.923 494.09 li
932.383 506.29 li
932.383 494.09 li
934.303 494.09 li
934.303 508.67 li
931.643 508.67 li
925.183 496.47 li
925.183 508.67 li
923.263 508.67 li
923.263 494.09 li
f
948.823 493.49 mo
947.943 495.01 947.303 496.49 946.883 497.95 cv
946.443 499.41 946.243 500.89 946.243 502.39 cv
946.243 503.91 946.443 505.39 946.883 506.85 cv
947.303 508.33 947.943 509.79 948.823 511.29 cv
947.263 511.29 li
946.283 509.75 945.543 508.27 945.063 506.79 cv
944.583 505.31 944.343 503.85 944.343 502.39 cv
944.343 500.95 944.583 499.49 945.063 498.01 cv
945.543 496.53 946.263 495.03 947.263 493.49 cv
948.823 493.49 li
f
950.383 494.09 mo
962.703 494.09 li
962.703 495.75 li
957.523 495.75 li
957.523 508.67 li
955.543 508.67 li
955.543 495.75 li
950.383 495.75 li
950.383 494.09 li
f
970.863 499.41 mo
970.663 499.29 970.443 499.21 970.203 499.15 cv
969.963 499.11 969.703 499.07 969.423 499.07 cv
968.403 499.07 967.623 499.41 967.083 500.07 cv
966.523 500.73 966.263 501.67 966.263 502.91 cv
966.263 508.67 li
964.463 508.67 li
964.463 497.73 li
966.263 497.73 li
966.263 499.43 li
966.623 498.77 967.123 498.27 967.723 497.95 cv
968.323 497.63 969.063 497.47 969.943 497.47 cv
970.063 497.47 970.203 497.49 970.363 497.49 cv
970.503 497.51 970.663 497.53 970.863 497.57 cv
970.863 499.41 li
f
977.723 503.17 mo
976.263 503.17 975.263 503.35 974.703 503.67 cv
974.143 504.01 973.863 504.57 973.863 505.37 cv
973.863 506.01 974.063 506.53 974.483 506.89 cv
974.903 507.27 975.483 507.45 976.203 507.45 cv
977.203 507.45 978.003 507.11 978.603 506.39 cv
979.203 505.69 979.503 504.75 979.503 503.57 cv
979.503 503.17 li
977.723 503.17 li
981.303 502.43 mo
981.303 508.67 li
979.503 508.67 li
979.503 507.01 li
979.083 507.69 978.563 508.17 977.963 508.47 cv
977.363 508.77 976.603 508.93 975.723 508.93 cv
974.603 508.93 973.703 508.63 973.043 508.01 cv
972.383 507.39 972.063 506.55 972.063 505.49 cv
972.063 504.27 972.463 503.35 973.303 502.71 cv
974.123 502.09 975.343 501.77 976.983 501.77 cv
979.503 501.77 li
979.503 501.59 li
979.503 500.77 979.223 500.13 978.683 499.67 cv
978.143 499.23 977.383 498.99 976.403 498.99 cv
975.763 498.99 975.163 499.07 974.563 499.23 cv
973.963 499.39 973.403 499.61 972.863 499.89 cv
972.863 498.23 li
973.503 497.99 974.143 497.79 974.763 497.67 cv
975.383 497.55 975.983 497.47 976.583 497.47 cv
978.163 497.47 979.343 497.89 980.123 498.71 cv
980.903 499.53 981.303 500.77 981.303 502.43 cv
f
985.003 497.73 mo
986.803 497.73 li
986.803 508.67 li
985.003 508.67 li
985.003 497.73 li
985.003 493.47 mo
986.803 493.47 li
986.803 495.75 li
985.003 495.75 li
985.003 493.47 li
f
999.663 502.07 mo
999.663 508.67 li
997.863 508.67 li
997.863 502.13 li
997.863 501.09 997.643 500.33 997.243 499.81 cv
996.843 499.29 996.243 499.03 995.443 499.03 cv
994.463 499.03 993.703 499.35 993.143 499.97 cv
992.583 500.59 992.303 501.43 992.303 502.49 cv
992.303 508.67 li
990.503 508.67 li
990.503 497.73 li
992.303 497.73 li
992.303 499.43 li
992.723 498.79 993.223 498.29 993.823 497.97 cv
994.403 497.65 995.083 497.47 995.843 497.47 cv
997.083 497.47 998.043 497.87 998.683 498.65 cv
999.323 499.43 999.663 500.57 999.663 502.07 cv
f
1003.24 497.73 mo
1005.04 497.73 li
1005.04 508.67 li
1003.24 508.67 li
1003.24 497.73 li
1003.24 493.47 mo
1005.04 493.47 li
1005.04 495.75 li
1003.24 495.75 li
1003.24 493.47 li
f
1017.9 502.07 mo
1017.9 508.67 li
1016.1 508.67 li
1016.1 502.13 li
1016.1 501.09 1015.88 500.33 1015.48 499.81 cv
1015.08 499.29 1014.48 499.03 1013.68 499.03 cv
1012.7 499.03 1011.94 499.35 1011.38 499.97 cv
1010.82 500.59 1010.54 501.43 1010.54 502.49 cv
1010.54 508.67 li
1008.74 508.67 li
1008.74 497.73 li
1010.54 497.73 li
1010.54 499.43 li
1010.96 498.79 1011.46 498.29 1012.06 497.97 cv
1012.64 497.65 1013.32 497.47 1014.08 497.47 cv
1015.32 497.47 1016.28 497.87 1016.92 498.65 cv
1017.56 499.43 1017.9 500.57 1017.9 502.07 cv
f
1028.68 503.07 mo
1028.68 501.79 1028.4 500.77 1027.88 500.05 cv
1027.34 499.33 1026.58 498.97 1025.62 498.97 cv
1024.66 498.97 1023.9 499.33 1023.36 500.05 cv
1022.82 500.77 1022.56 501.79 1022.56 503.07 cv
1022.56 504.37 1022.82 505.37 1023.36 506.09 cv
1023.9 506.81 1024.66 507.17 1025.62 507.17 cv
1026.58 507.17 1027.34 506.81 1027.88 506.09 cv
1028.4 505.37 1028.68 504.37 1028.68 503.07 cv
1030.48 507.31 mo
1030.48 509.15 1030.06 510.53 1029.24 511.45 cv
1028.4 512.35 1027.14 512.81 1025.44 512.81 cv
1024.8 512.81 1024.22 512.75 1023.66 512.67 cv
1023.1 512.57 1022.54 512.43 1022.02 512.23 cv
1022.02 510.49 li
1022.54 510.77 1023.06 510.97 1023.58 511.11 cv
1024.1 511.25 1024.62 511.33 1025.16 511.33 cv
1026.32 511.33 1027.2 511.01 1027.8 510.41 cv
1028.38 509.79 1028.68 508.87 1028.68 507.63 cv
1028.68 506.75 li
1028.3 507.39 1027.82 507.87 1027.24 508.19 cv
1026.66 508.51 1025.98 508.67 1025.18 508.67 cv
1023.82 508.67 1022.74 508.17 1021.92 507.15 cv
1021.1 506.13 1020.7 504.77 1020.7 503.07 cv
1020.7 501.39 1021.1 500.03 1021.92 499.01 cv
1022.74 497.99 1023.82 497.47 1025.18 497.47 cv
1025.98 497.47 1026.66 497.63 1027.24 497.95 cv
1027.82 498.27 1028.3 498.75 1028.68 499.39 cv
1028.68 497.73 li
1030.48 497.73 li
1030.48 507.31 li
f
1034.64 506.19 mo
1036.7 506.19 li
1036.7 507.87 li
1035.1 510.97 li
1033.84 510.97 li
1034.64 507.87 li
1034.64 506.19 li
f
1046.98 494.09 mo
1048.96 494.09 li
1048.96 508.67 li
1046.98 508.67 li
1046.98 494.09 li
f
1059.78 498.05 mo
1059.78 499.75 li
1059.26 499.51 1058.74 499.31 1058.2 499.17 cv
1057.64 499.05 1057.08 498.97 1056.5 498.97 cv
1055.6 498.97 1054.92 499.11 1054.48 499.39 cv
1054.04 499.67 1053.82 500.07 1053.82 500.61 cv
1053.82 501.03 1053.98 501.35 1054.3 501.59 cv
1054.62 501.83 1055.26 502.07 1056.22 502.27 cv
1056.84 502.41 li
1058.12 502.69 1059.02 503.09 1059.56 503.57 cv
1060.08 504.07 1060.36 504.77 1060.36 505.65 cv
1060.36 506.67 1059.96 507.47 1059.16 508.05 cv
1058.36 508.65 1057.24 508.93 1055.84 508.93 cv
1055.24 508.93 1054.64 508.87 1054 508.77 cv
1053.36 508.67 1052.7 508.51 1052 508.27 cv
1052 506.41 li
1052.66 506.77 1053.32 507.03 1053.96 507.19 cv
1054.6 507.37 1055.24 507.45 1055.88 507.45 cv
1056.72 507.45 1057.38 507.31 1057.84 507.03 cv
1058.28 506.75 1058.52 506.33 1058.52 505.79 cv
1058.52 505.31 1058.34 504.93 1058.02 504.67 cv
1057.7 504.41 1056.98 504.15 1055.86 503.91 cv
1055.24 503.77 li
1054.12 503.53 1053.3 503.17 1052.82 502.69 cv
1052.32 502.21 1052.08 501.55 1052.08 500.69 cv
1052.08 499.67 1052.44 498.87 1053.16 498.31 cv
1053.88 497.75 1054.92 497.47 1056.28 497.47 cv
1056.94 497.47 1057.56 497.53 1058.16 497.63 cv
1058.74 497.73 1059.28 497.87 1059.78 498.05 cv
f
1063.22 497.73 mo
1065.02 497.73 li
1065.02 508.67 li
1063.22 508.67 li
1063.22 497.73 li
1063.22 493.47 mo
1065.02 493.47 li
1065.02 495.75 li
1063.22 495.75 li
1063.22 493.47 li
f
1075.98 503.07 mo
1075.98 501.79 1075.7 500.77 1075.18 500.05 cv
1074.64 499.33 1073.88 498.97 1072.92 498.97 cv
1071.96 498.97 1071.2 499.33 1070.66 500.05 cv
1070.12 500.77 1069.86 501.79 1069.86 503.07 cv
1069.86 504.37 1070.12 505.37 1070.66 506.09 cv
1071.2 506.81 1071.96 507.17 1072.92 507.17 cv
1073.88 507.17 1074.64 506.81 1075.18 506.09 cv
1075.7 505.37 1075.98 504.37 1075.98 503.07 cv
1077.78 507.31 mo
1077.78 509.15 1077.36 510.53 1076.54 511.45 cv
1075.7 512.35 1074.44 512.81 1072.74 512.81 cv
1072.1 512.81 1071.52 512.75 1070.96 512.67 cv
1070.4 512.57 1069.84 512.43 1069.32 512.23 cv
1069.32 510.49 li
1069.84 510.77 1070.36 510.97 1070.88 511.11 cv
1071.4 511.25 1071.92 511.33 1072.46 511.33 cv
1073.62 511.33 1074.5 511.01 1075.1 510.41 cv
1075.68 509.79 1075.98 508.87 1075.98 507.63 cv
1075.98 506.75 li
1075.6 507.39 1075.12 507.87 1074.54 508.19 cv
1073.96 508.51 1073.28 508.67 1072.48 508.67 cv
1071.12 508.67 1070.04 508.17 1069.22 507.15 cv
1068.4 506.13 1068 504.77 1068 503.07 cv
1068 501.39 1068.4 500.03 1069.22 499.01 cv
1070.04 497.99 1071.12 497.47 1072.48 497.47 cv
1073.28 497.47 1073.96 497.63 1074.54 497.95 cv
1075.12 498.27 1075.6 498.75 1075.98 499.39 cv
1075.98 497.73 li
1077.78 497.73 li
1077.78 507.31 li
f
1090 499.83 mo
1090.44 499.03 1090.98 498.45 1091.6 498.05 cv
1092.22 497.67 1092.96 497.47 1093.82 497.47 cv
1094.94 497.47 1095.82 497.87 1096.44 498.67 cv
1097.06 499.47 1097.38 500.61 1097.38 502.07 cv
1097.38 508.67 li
1095.58 508.67 li
1095.58 502.13 li
1095.58 501.09 1095.38 500.31 1095.02 499.79 cv
1094.64 499.29 1094.08 499.03 1093.32 499.03 cv
1092.38 499.03 1091.64 499.35 1091.1 499.97 cv
1090.56 500.59 1090.3 501.43 1090.3 502.49 cv
1090.3 508.67 li
1088.5 508.67 li
1088.5 502.13 li
1088.5 501.09 1088.3 500.31 1087.94 499.79 cv
1087.56 499.29 1086.98 499.03 1086.22 499.03 cv
1085.3 499.03 1084.56 499.35 1084.02 499.97 cv
1083.48 500.59 1083.22 501.43 1083.22 502.49 cv
1083.22 508.67 li
1081.42 508.67 li
1081.42 497.73 li
1083.22 497.73 li
1083.22 499.43 li
1083.62 498.77 1084.12 498.27 1084.7 497.95 cv
1085.26 497.63 1085.94 497.47 1086.74 497.47 cv
1087.54 497.47 1088.2 497.67 1088.76 498.07 cv
1089.32 498.47 1089.72 499.07 1090 499.83 cv
f
1105.2 498.99 mo
1104.24 498.99 1103.48 499.37 1102.92 500.13 cv
1102.36 500.89 1102.08 501.91 1102.08 503.21 cv
1102.08 504.53 1102.34 505.55 1102.9 506.31 cv
1103.46 507.07 1104.22 507.43 1105.2 507.43 cv
1106.16 507.43 1106.92 507.07 1107.48 506.31 cv
1108.04 505.55 1108.32 504.53 1108.32 503.21 cv
1108.32 501.93 1108.04 500.89 1107.48 500.13 cv
1106.92 499.37 1106.16 498.99 1105.2 498.99 cv
1105.2 497.47 mo
1106.76 497.47 1107.98 497.99 1108.88 498.99 cv
1109.76 500.01 1110.22 501.41 1110.22 503.21 cv
1110.22 505.01 1109.76 506.41 1108.88 507.41 cv
1107.98 508.43 1106.76 508.93 1105.2 508.93 cv
1103.62 508.93 1102.38 508.43 1101.5 507.41 cv
1100.62 506.41 1100.18 505.01 1100.18 503.21 cv
1100.18 501.41 1100.62 500.01 1101.5 498.99 cv
1102.38 497.99 1103.62 497.47 1105.2 497.47 cv
f
1113.2 497.73 mo
1115 497.73 li
1115 508.67 li
1113.2 508.67 li
1113.2 497.73 li
1113.2 493.47 mo
1115 493.47 li
1115 495.75 li
1113.2 495.75 li
1113.2 493.47 li
f
1125.96 499.39 mo
1125.96 493.47 li
1127.76 493.47 li
1127.76 508.67 li
1125.96 508.67 li
1125.96 507.03 li
1125.58 507.69 1125.1 508.17 1124.52 508.47 cv
1123.94 508.77 1123.26 508.93 1122.46 508.93 cv
1121.14 508.93 1120.06 508.41 1119.22 507.37 cv
1118.38 506.33 1117.98 504.93 1117.98 503.21 cv
1117.98 501.49 1118.38 500.11 1119.22 499.05 cv
1120.06 498.01 1121.14 497.47 1122.46 497.47 cv
1123.26 497.47 1123.94 497.63 1124.52 497.95 cv
1125.1 498.27 1125.58 498.75 1125.96 499.39 cv
1119.84 503.21 mo
1119.84 504.53 1120.1 505.57 1120.64 506.33 cv
1121.18 507.09 1121.94 507.45 1122.9 507.45 cv
1123.84 507.45 1124.58 507.09 1125.14 506.33 cv
1125.68 505.57 1125.96 504.53 1125.96 503.21 cv
1125.96 501.89 1125.68 500.87 1125.14 500.11 cv
1124.58 499.35 1123.84 498.97 1122.9 498.97 cv
1121.94 498.97 1121.18 499.35 1120.64 500.11 cv
1120.1 500.87 1119.84 501.89 1119.84 503.21 cv
f
1131.18 493.49 mo
1132.74 493.49 li
1133.7 495.03 1134.44 496.53 1134.92 498.01 cv
1135.4 499.49 1135.66 500.95 1135.66 502.39 cv
1135.66 503.85 1135.4 505.31 1134.92 506.79 cv
1134.44 508.27 1133.7 509.75 1132.74 511.29 cv
1131.18 511.29 li
1132.04 509.79 1132.68 508.33 1133.12 506.85 cv
1133.54 505.39 1133.76 503.91 1133.76 502.39 cv
1133.76 500.89 1133.54 499.41 1133.12 497.95 cv
1132.68 496.49 1132.04 495.01 1131.18 493.49 cv
f
864.183 529.529 mo
884.183 529.529 li
@
871.183 532.529 mo
877.183 526.529 li
871.183 526.529 mo
877.183 532.529 li
f
1 lw
0 lc
871.183 532.529 mo
877.183 526.529 li
871.183 526.529 mo
877.183 532.529 li
@
896.123 520.069 mo
896.123 531.409 li
898.503 531.409 li
900.503 531.409 901.983 530.969 902.923 530.049 cv
903.843 529.129 904.323 527.689 904.323 525.729 cv
904.323 523.769 903.843 522.349 902.923 521.429 cv
901.983 520.529 900.503 520.069 898.503 520.069 cv
896.123 520.069 li
894.143 518.449 mo
898.203 518.449 li
901.023 518.449 903.103 519.049 904.423 520.209 cv
905.743 521.389 906.403 523.229 906.403 525.729 cv
906.403 528.249 905.723 530.089 904.403 531.269 cv
903.083 532.449 901.003 533.029 898.203 533.029 cv
894.143 533.029 li
894.143 518.449 li
f
911.523 526.069 mo
911.523 531.409 li
914.683 531.409 li
915.743 531.409 916.523 531.189 917.043 530.749 cv
917.543 530.309 917.803 529.649 917.803 528.729 cv
917.803 527.829 917.543 527.169 917.043 526.729 cv
916.523 526.289 915.743 526.069 914.683 526.069 cv
911.523 526.069 li
911.523 520.069 mo
911.523 524.469 li
914.443 524.469 li
915.403 524.469 916.103 524.289 916.583 523.929 cv
917.063 523.569 917.303 523.029 917.303 522.269 cv
917.303 521.549 917.063 520.989 916.583 520.629 cv
916.103 520.269 915.403 520.069 914.443 520.069 cv
911.523 520.069 li
909.543 518.449 mo
914.583 518.449 li
916.083 518.449 917.243 518.769 918.063 519.389 cv
918.863 520.029 919.283 520.909 919.283 522.049 cv
919.283 522.949 919.063 523.669 918.643 524.189 cv
918.223 524.709 917.623 525.049 916.823 525.169 cv
917.783 525.389 918.543 525.829 919.083 526.489 cv
919.603 527.149 919.883 527.969 919.883 528.949 cv
919.883 530.269 919.423 531.269 918.543 531.969 cv
917.663 532.689 916.403 533.029 914.783 533.029 cv
909.543 533.029 li
909.543 518.449 li
f
923.263 518.449 mo
925.923 518.449 li
932.383 530.649 li
932.383 518.449 li
934.303 518.449 li
934.303 533.029 li
931.643 533.029 li
925.183 520.829 li
925.183 533.029 li
923.263 533.029 li
923.263 518.449 li
f
948.823 517.849 mo
947.943 519.369 947.303 520.849 946.883 522.309 cv
946.443 523.769 946.243 525.249 946.243 526.749 cv
946.243 528.269 946.443 529.749 946.883 531.209 cv
947.303 532.689 947.943 534.149 948.823 535.649 cv
947.263 535.649 li
946.283 534.109 945.543 532.629 945.063 531.149 cv
944.583 529.669 944.343 528.209 944.343 526.749 cv
944.343 525.309 944.583 523.849 945.063 522.369 cv
945.543 520.889 946.263 519.389 947.263 517.849 cv
948.823 517.849 li
f
950.383 518.449 mo
962.703 518.449 li
962.703 520.109 li
957.523 520.109 li
957.523 533.029 li
955.543 533.029 li
955.543 520.109 li
950.383 520.109 li
950.383 518.449 li
f
973.883 527.109 mo
973.883 527.989 li
965.623 527.989 li
965.703 529.229 966.063 530.189 966.743 530.829 cv
967.403 531.469 968.323 531.789 969.523 531.789 cv
970.203 531.789 970.883 531.709 971.523 531.549 cv
972.163 531.389 972.823 531.129 973.463 530.769 cv
973.463 532.469 li
972.823 532.749 972.163 532.969 971.483 533.089 cv
970.803 533.209 970.103 533.289 969.423 533.289 cv
967.663 533.289 966.283 532.789 965.263 531.789 cv
964.243 530.789 963.743 529.409 963.743 527.669 cv
963.743 525.889 964.223 524.469 965.183 523.409 cv
966.143 522.369 967.463 521.829 969.103 521.829 cv
970.583 521.829 971.743 522.309 972.603 523.249 cv
973.443 524.209 973.883 525.489 973.883 527.109 cv
972.083 526.589 mo
972.063 525.609 971.783 524.829 971.263 524.229 cv
970.723 523.649 970.003 523.349 969.123 523.349 cv
968.123 523.349 967.323 523.649 966.723 524.209 cv
966.123 524.769 965.763 525.569 965.683 526.589 cv
972.083 526.589 li
f
983.803 522.409 mo
983.803 524.109 li
983.283 523.869 982.763 523.669 982.223 523.529 cv
981.663 523.409 981.103 523.329 980.523 523.329 cv
979.623 523.329 978.943 523.469 978.503 523.749 cv
978.063 524.029 977.843 524.429 977.843 524.969 cv
977.843 525.389 978.003 525.709 978.323 525.949 cv
978.643 526.189 979.283 526.429 980.243 526.629 cv
980.863 526.769 li
982.143 527.049 983.043 527.449 983.583 527.929 cv
984.103 528.429 984.383 529.129 984.383 530.009 cv
984.383 531.029 983.983 531.829 983.183 532.409 cv
982.383 533.009 981.263 533.289 979.863 533.289 cv
979.263 533.289 978.663 533.229 978.023 533.129 cv
977.383 533.029 976.723 532.869 976.023 532.629 cv
976.023 530.769 li
976.683 531.129 977.343 531.389 977.983 531.549 cv
978.623 531.729 979.263 531.809 979.903 531.809 cv
980.743 531.809 981.403 531.669 981.863 531.389 cv
982.303 531.109 982.543 530.689 982.543 530.149 cv
982.543 529.669 982.363 529.289 982.043 529.029 cv
981.723 528.769 981.003 528.509 979.883 528.269 cv
979.263 528.129 li
978.143 527.889 977.323 527.529 976.843 527.049 cv
976.343 526.569 976.103 525.909 976.103 525.049 cv
976.103 524.029 976.463 523.229 977.183 522.669 cv
977.903 522.109 978.943 521.829 980.303 521.829 cv
980.963 521.829 981.583 521.889 982.183 521.989 cv
982.763 522.089 983.303 522.229 983.803 522.409 cv
f
989.023 518.989 mo
989.023 522.089 li
992.723 522.089 li
992.723 523.489 li
989.023 523.489 li
989.023 529.429 li
989.023 530.329 989.143 530.909 989.383 531.149 cv
989.623 531.409 990.123 531.529 990.883 531.529 cv
992.723 531.529 li
992.723 533.029 li
990.883 533.029 li
989.483 533.029 988.523 532.769 988.003 532.249 cv
987.483 531.729 987.223 530.789 987.223 529.429 cv
987.223 523.489 li
985.903 523.489 li
985.903 522.089 li
987.223 522.089 li
987.223 518.989 li
989.023 518.989 li
f
995.083 522.089 mo
996.883 522.089 li
996.883 533.029 li
995.083 533.029 li
995.083 522.089 li
995.083 517.829 mo
996.883 517.829 li
996.883 520.109 li
995.083 520.109 li
995.083 517.829 li
f
1009.74 526.429 mo
1009.74 533.029 li
1007.94 533.029 li
1007.94 526.489 li
1007.94 525.449 1007.72 524.689 1007.32 524.169 cv
1006.92 523.649 1006.32 523.389 1005.52 523.389 cv
1004.54 523.389 1003.78 523.709 1003.22 524.329 cv
1002.66 524.949 1002.38 525.789 1002.38 526.849 cv
1002.38 533.029 li
1000.58 533.029 li
1000.58 522.089 li
1002.38 522.089 li
1002.38 523.789 li
1002.8 523.149 1003.3 522.649 1003.9 522.329 cv
1004.48 522.009 1005.16 521.829 1005.92 521.829 cv
1007.16 521.829 1008.12 522.229 1008.76 523.009 cv
1009.4 523.789 1009.74 524.929 1009.74 526.429 cv
f
1020.52 527.429 mo
1020.52 526.149 1020.24 525.129 1019.72 524.409 cv
1019.18 523.689 1018.42 523.329 1017.46 523.329 cv
1016.5 523.329 1015.74 523.689 1015.2 524.409 cv
1014.66 525.129 1014.4 526.149 1014.4 527.429 cv
1014.4 528.729 1014.66 529.729 1015.2 530.449 cv
1015.74 531.169 1016.5 531.529 1017.46 531.529 cv
1018.42 531.529 1019.18 531.169 1019.72 530.449 cv
1020.24 529.729 1020.52 528.729 1020.52 527.429 cv
1022.32 531.669 mo
1022.32 533.509 1021.9 534.889 1021.08 535.809 cv
1020.24 536.709 1018.98 537.169 1017.28 537.169 cv
1016.64 537.169 1016.06 537.109 1015.5 537.029 cv
1014.94 536.929 1014.38 536.789 1013.86 536.589 cv
1013.86 534.849 li
1014.38 535.129 1014.9 535.329 1015.42 535.469 cv
1015.94 535.609 1016.46 535.689 1017 535.689 cv
1018.16 535.689 1019.04 535.369 1019.64 534.769 cv
1020.22 534.149 1020.52 533.229 1020.52 531.989 cv
1020.52 531.109 li
1020.14 531.749 1019.66 532.229 1019.08 532.549 cv
1018.5 532.869 1017.82 533.029 1017.02 533.029 cv
1015.66 533.029 1014.58 532.529 1013.76 531.509 cv
1012.94 530.489 1012.54 529.129 1012.54 527.429 cv
1012.54 525.749 1012.94 524.389 1013.76 523.369 cv
1014.58 522.349 1015.66 521.829 1017.02 521.829 cv
1017.82 521.829 1018.5 521.989 1019.08 522.309 cv
1019.66 522.629 1020.14 523.109 1020.52 523.749 cv
1020.52 522.089 li
1022.32 522.089 li
1022.32 531.669 li
f
1026.48 530.549 mo
1028.54 530.549 li
1028.54 532.229 li
1026.94 535.329 li
1025.68 535.329 li
1026.48 532.229 li
1026.48 530.549 li
f
1038.82 518.449 mo
1040.8 518.449 li
1040.8 533.029 li
1038.82 533.029 li
1038.82 518.449 li
f
1051.62 522.409 mo
1051.62 524.109 li
1051.1 523.869 1050.58 523.669 1050.04 523.529 cv
1049.48 523.409 1048.92 523.329 1048.34 523.329 cv
1047.44 523.329 1046.76 523.469 1046.32 523.749 cv
1045.88 524.029 1045.66 524.429 1045.66 524.969 cv
1045.66 525.389 1045.82 525.709 1046.14 525.949 cv
1046.46 526.189 1047.1 526.429 1048.06 526.629 cv
1048.68 526.769 li
1049.96 527.049 1050.86 527.449 1051.4 527.929 cv
1051.92 528.429 1052.2 529.129 1052.2 530.009 cv
1052.2 531.029 1051.8 531.829 1051 532.409 cv
1050.2 533.009 1049.08 533.289 1047.68 533.289 cv
1047.08 533.289 1046.48 533.229 1045.84 533.129 cv
1045.2 533.029 1044.54 532.869 1043.84 532.629 cv
1043.84 530.769 li
1044.5 531.129 1045.16 531.389 1045.8 531.549 cv
1046.44 531.729 1047.08 531.809 1047.72 531.809 cv
1048.56 531.809 1049.22 531.669 1049.68 531.389 cv
1050.12 531.109 1050.36 530.689 1050.36 530.149 cv
1050.36 529.669 1050.18 529.289 1049.86 529.029 cv
1049.54 528.769 1048.82 528.509 1047.7 528.269 cv
1047.08 528.129 li
1045.96 527.889 1045.14 527.529 1044.66 527.049 cv
1044.16 526.569 1043.92 525.909 1043.92 525.049 cv
1043.92 524.029 1044.28 523.229 1045 522.669 cv
1045.72 522.109 1046.76 521.829 1048.12 521.829 cv
1048.78 521.829 1049.4 521.889 1050 521.989 cv
1050.58 522.089 1051.12 522.229 1051.62 522.409 cv
f
1055.06 522.089 mo
1056.86 522.089 li
1056.86 533.029 li
1055.06 533.029 li
1055.06 522.089 li
1055.06 517.829 mo
1056.86 517.829 li
1056.86 520.109 li
1055.06 520.109 li
1055.06 517.829 li
f
1067.82 527.429 mo
1067.82 526.149 1067.54 525.129 1067.02 524.409 cv
1066.48 523.689 1065.72 523.329 1064.76 523.329 cv
1063.8 523.329 1063.04 523.689 1062.5 524.409 cv
1061.96 525.129 1061.7 526.149 1061.7 527.429 cv
1061.7 528.729 1061.96 529.729 1062.5 530.449 cv
1063.04 531.169 1063.8 531.529 1064.76 531.529 cv
1065.72 531.529 1066.48 531.169 1067.02 530.449 cv
1067.54 529.729 1067.82 528.729 1067.82 527.429 cv
1069.62 531.669 mo
1069.62 533.509 1069.2 534.889 1068.38 535.809 cv
1067.54 536.709 1066.28 537.169 1064.58 537.169 cv
1063.94 537.169 1063.36 537.109 1062.8 537.029 cv
1062.24 536.929 1061.68 536.789 1061.16 536.589 cv
1061.16 534.849 li
1061.68 535.129 1062.2 535.329 1062.72 535.469 cv
1063.24 535.609 1063.76 535.689 1064.3 535.689 cv
1065.46 535.689 1066.34 535.369 1066.94 534.769 cv
1067.52 534.149 1067.82 533.229 1067.82 531.989 cv
1067.82 531.109 li
1067.44 531.749 1066.96 532.229 1066.38 532.549 cv
1065.8 532.869 1065.12 533.029 1064.32 533.029 cv
1062.96 533.029 1061.88 532.529 1061.06 531.509 cv
1060.24 530.489 1059.84 529.129 1059.84 527.429 cv
1059.84 525.749 1060.24 524.389 1061.06 523.369 cv
1061.88 522.349 1062.96 521.829 1064.32 521.829 cv
1065.12 521.829 1065.8 521.989 1066.38 522.309 cv
1066.96 522.629 1067.44 523.109 1067.82 523.749 cv
1067.82 522.089 li
1069.62 522.089 li
1069.62 531.669 li
f
1081.84 524.189 mo
1082.28 523.389 1082.82 522.809 1083.44 522.409 cv
1084.06 522.029 1084.8 521.829 1085.66 521.829 cv
1086.78 521.829 1087.66 522.229 1088.28 523.029 cv
1088.9 523.829 1089.22 524.969 1089.22 526.429 cv
1089.22 533.029 li
1087.42 533.029 li
1087.42 526.489 li
1087.42 525.449 1087.22 524.669 1086.86 524.149 cv
1086.48 523.649 1085.92 523.389 1085.16 523.389 cv
1084.22 523.389 1083.48 523.709 1082.94 524.329 cv
1082.4 524.949 1082.14 525.789 1082.14 526.849 cv
1082.14 533.029 li
1080.34 533.029 li
1080.34 526.489 li
1080.34 525.449 1080.14 524.669 1079.78 524.149 cv
1079.4 523.649 1078.82 523.389 1078.06 523.389 cv
1077.14 523.389 1076.4 523.709 1075.86 524.329 cv
1075.32 524.949 1075.06 525.789 1075.06 526.849 cv
1075.06 533.029 li
1073.26 533.029 li
1073.26 522.089 li
1075.06 522.089 li
1075.06 523.789 li
1075.46 523.129 1075.96 522.629 1076.54 522.309 cv
1077.1 521.989 1077.78 521.829 1078.58 521.829 cv
1079.38 521.829 1080.04 522.029 1080.6 522.429 cv
1081.16 522.829 1081.56 523.429 1081.84 524.189 cv
f
1097.04 523.349 mo
1096.08 523.349 1095.32 523.729 1094.76 524.489 cv
1094.2 525.249 1093.92 526.269 1093.92 527.569 cv
1093.92 528.889 1094.18 529.909 1094.74 530.669 cv
1095.3 531.429 1096.06 531.789 1097.04 531.789 cv
1098 531.789 1098.76 531.429 1099.32 530.669 cv
1099.88 529.909 1100.16 528.889 1100.16 527.569 cv
1100.16 526.289 1099.88 525.249 1099.32 524.489 cv
1098.76 523.729 1098 523.349 1097.04 523.349 cv
1097.04 521.829 mo
1098.6 521.829 1099.82 522.349 1100.72 523.349 cv
1101.6 524.369 1102.06 525.769 1102.06 527.569 cv
1102.06 529.369 1101.6 530.769 1100.72 531.769 cv
1099.82 532.789 1098.6 533.289 1097.04 533.289 cv
1095.46 533.289 1094.22 532.789 1093.34 531.769 cv
1092.46 530.769 1092.02 529.369 1092.02 527.569 cv
1092.02 525.769 1092.46 524.369 1093.34 523.349 cv
1094.22 522.349 1095.46 521.829 1097.04 521.829 cv
f
1105.04 522.089 mo
1106.84 522.089 li
1106.84 533.029 li
1105.04 533.029 li
1105.04 522.089 li
1105.04 517.829 mo
1106.84 517.829 li
1106.84 520.109 li
1105.04 520.109 li
1105.04 517.829 li
f
1117.8 523.749 mo
1117.8 517.829 li
1119.6 517.829 li
1119.6 533.029 li
1117.8 533.029 li
1117.8 531.389 li
1117.42 532.049 1116.94 532.529 1116.36 532.829 cv
1115.78 533.129 1115.1 533.289 1114.3 533.289 cv
1112.98 533.289 1111.9 532.769 1111.06 531.729 cv
1110.22 530.689 1109.82 529.289 1109.82 527.569 cv
1109.82 525.849 1110.22 524.469 1111.06 523.409 cv
1111.9 522.369 1112.98 521.829 1114.3 521.829 cv
1115.1 521.829 1115.78 521.989 1116.36 522.309 cv
1116.94 522.629 1117.42 523.109 1117.8 523.749 cv
1111.68 527.569 mo
1111.68 528.889 1111.94 529.929 1112.48 530.689 cv
1113.02 531.449 1113.78 531.809 1114.74 531.809 cv
1115.68 531.809 1116.42 531.449 1116.98 530.689 cv
1117.52 529.929 1117.8 528.889 1117.8 527.569 cv
1117.8 526.249 1117.52 525.229 1116.98 524.469 cv
1116.42 523.709 1115.68 523.329 1114.74 523.329 cv
1113.78 523.329 1113.02 523.709 1112.48 524.469 cv
1111.94 525.229 1111.68 526.249 1111.68 527.569 cv
f
1123.02 517.849 mo
1124.58 517.849 li
1125.54 519.389 1126.28 520.889 1126.76 522.369 cv
1127.24 523.849 1127.5 525.309 1127.5 526.749 cv
1127.5 528.209 1127.24 529.669 1126.76 531.149 cv
1126.28 532.629 1125.54 534.109 1124.58 535.649 cv
1123.02 535.649 li
1123.88 534.149 1124.52 532.689 1124.96 531.209 cv
1125.38 529.749 1125.6 528.269 1125.6 526.749 cv
1125.6 525.249 1125.38 523.769 1124.96 522.309 cv
1124.52 520.849 1123.88 519.369 1123.02 517.849 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
