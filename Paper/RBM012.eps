%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: RBM012-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/10, 16:31:03
%%BoundingBox: 0 0 1171 600
%%HiResBoundingBox: 0 0 1170.1539 599.8423
%%CropBox: 0 0 1170.1539 599.8423
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-10T16:28:59+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-10T16:30:55+08:00"
   xmp:MetadataDate="2019-06-10T16:30:55+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:6e4f9726-08eb-42ce-b5ac-5eba850b7005"
   xmpMM:InstanceID="uuid:b27c6f1d-142d-4308-ab32-e35cc4b79b8b"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -599.842 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 599.842 li
1170.15 599.842 li
1170.15 0 li
cp
clp
gsave
-.900711 600.008 mo
1171.1 600.008 li
1171.1 -.992527 li
-.900711 -.992527 li
-.900711 600.008 li
clp
-84.9008 622.008 mo
1297.5 622.008 li
1297.5 -75.6726 li
-84.9008 -75.6726 li
-84.9008 622.008 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
87.8993 545.263 mo
1159.26 545.263 li
1159.26 8.04923 li
87.8993 8.04923 li
87.8993 545.263 li
f
136.597 545.263 mo
136.597 548.763 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
136.597 545.263 mo
136.597 548.763 li
@
136.598 554.186 mo
135.578 554.186 134.818 554.686 134.298 555.686 cv
133.778 556.686 133.538 558.186 133.538 560.186 cv
133.538 562.186 133.778 563.686 134.298 564.686 cv
134.818 565.686 135.578 566.186 136.598 566.186 cv
137.618 566.186 138.378 565.686 138.898 564.686 cv
139.398 563.686 139.658 562.186 139.658 560.186 cv
139.658 558.186 139.398 556.686 138.898 555.686 cv
138.378 554.686 137.618 554.186 136.598 554.186 cv
136.598 552.626 mo
138.218 552.626 139.458 553.286 140.338 554.566 cv
141.198 555.866 141.638 557.746 141.638 560.186 cv
141.638 562.646 141.198 564.526 140.338 565.806 cv
139.458 567.086 138.218 567.726 136.598 567.726 cv
134.958 567.726 133.698 567.086 132.838 565.806 cv
131.978 564.526 131.558 562.646 131.558 560.186 cv
131.558 557.746 131.978 555.866 132.838 554.566 cv
133.698 553.286 134.958 552.626 136.598 552.626 cv
f
341.642 545.263 mo
341.642 548.763 li
f
341.642 545.263 mo
341.642 548.763 li
@
332.764 565.806 mo
339.644 565.806 li
339.644 567.466 li
330.384 567.466 li
330.384 565.806 li
331.124 565.046 332.144 564.006 333.444 562.686 cv
334.724 561.386 335.544 560.546 335.884 560.166 cv
336.524 559.466 336.964 558.866 337.204 558.366 cv
337.444 557.886 337.584 557.386 337.584 556.906 cv
337.584 556.146 337.304 555.506 336.764 555.026 cv
336.224 554.546 335.524 554.286 334.644 554.286 cv
334.024 554.286 333.364 554.406 332.684 554.606 cv
332.004 554.826 331.264 555.146 330.484 555.586 cv
330.484 553.586 li
331.284 553.266 332.024 553.026 332.704 552.866 cv
333.384 552.706 334.024 552.626 334.604 552.626 cv
336.104 552.626 337.304 553.006 338.204 553.766 cv
339.104 554.526 339.564 555.526 339.564 556.786 cv
339.564 557.386 339.444 557.966 339.224 558.486 cv
339.004 559.026 338.604 559.666 338.004 560.386 cv
337.844 560.586 337.324 561.126 336.444 562.026 cv
335.564 562.926 334.344 564.186 332.764 565.806 cv
f
348.004 554.186 mo
346.984 554.186 346.224 554.686 345.704 555.686 cv
345.184 556.686 344.944 558.186 344.944 560.186 cv
344.944 562.186 345.184 563.686 345.704 564.686 cv
346.224 565.686 346.984 566.186 348.004 566.186 cv
349.024 566.186 349.784 565.686 350.304 564.686 cv
350.804 563.686 351.064 562.186 351.064 560.186 cv
351.064 558.186 350.804 556.686 350.304 555.686 cv
349.784 554.686 349.024 554.186 348.004 554.186 cv
348.004 552.626 mo
349.624 552.626 350.864 553.286 351.744 554.566 cv
352.604 555.866 353.044 557.746 353.044 560.186 cv
353.044 562.646 352.604 564.526 351.744 565.806 cv
350.864 567.086 349.624 567.726 348.004 567.726 cv
346.364 567.726 345.104 567.086 344.244 565.806 cv
343.384 564.526 342.964 562.646 342.964 560.186 cv
342.964 557.746 343.384 555.866 344.244 554.566 cv
345.104 553.286 346.364 552.626 348.004 552.626 cv
f
546.687 545.263 mo
546.687 548.763 li
f
546.687 545.263 mo
546.687 548.763 li
@
541.529 554.606 mo
536.549 562.386 li
541.529 562.386 li
541.529 554.606 li
541.009 552.886 mo
543.489 552.886 li
543.489 562.386 li
545.569 562.386 li
545.569 564.026 li
543.489 564.026 li
543.489 567.466 li
541.529 567.466 li
541.529 564.026 li
534.949 564.026 li
534.949 562.126 li
541.009 552.886 li
f
553.049 554.186 mo
552.029 554.186 551.269 554.686 550.749 555.686 cv
550.229 556.686 549.989 558.186 549.989 560.186 cv
549.989 562.186 550.229 563.686 550.749 564.686 cv
551.269 565.686 552.029 566.186 553.049 566.186 cv
554.069 566.186 554.829 565.686 555.349 564.686 cv
555.849 563.686 556.109 562.186 556.109 560.186 cv
556.109 558.186 555.849 556.686 555.349 555.686 cv
554.829 554.686 554.069 554.186 553.049 554.186 cv
553.049 552.626 mo
554.669 552.626 555.909 553.286 556.789 554.566 cv
557.649 555.866 558.089 557.746 558.089 560.186 cv
558.089 562.646 557.649 564.526 556.789 565.806 cv
555.909 567.086 554.669 567.726 553.049 567.726 cv
551.409 567.726 550.149 567.086 549.289 565.806 cv
548.429 564.526 548.009 562.646 548.009 560.186 cv
548.009 557.746 548.429 555.866 549.289 554.566 cv
550.149 553.286 551.409 552.626 553.049 552.626 cv
f
751.732 545.263 mo
751.732 548.763 li
f
751.732 545.263 mo
751.732 548.763 li
@
745.614 559.386 mo
744.734 559.386 744.034 559.706 743.514 560.306 cv
742.994 560.906 742.734 561.746 742.734 562.786 cv
742.734 563.846 742.994 564.686 743.514 565.286 cv
744.034 565.886 744.734 566.186 745.614 566.186 cv
746.494 566.186 747.194 565.886 747.714 565.286 cv
748.234 564.686 748.494 563.846 748.494 562.786 cv
748.494 561.746 748.234 560.906 747.714 560.306 cv
747.194 559.706 746.494 559.386 745.614 559.386 cv
749.534 553.206 mo
749.534 555.006 li
749.034 554.766 748.534 554.586 748.034 554.466 cv
747.514 554.346 747.014 554.286 746.534 554.286 cv
745.214 554.286 744.214 554.726 743.534 555.606 cv
742.854 556.486 742.454 557.826 742.374 559.586 cv
742.754 559.026 743.234 558.586 743.814 558.286 cv
744.394 557.986 745.034 557.826 745.734 557.826 cv
747.194 557.826 748.354 558.286 749.194 559.166 cv
750.034 560.046 750.474 561.266 750.474 562.786 cv
750.474 564.286 750.014 565.486 749.134 566.386 cv
748.254 567.286 747.074 567.726 745.614 567.726 cv
743.934 567.726 742.634 567.086 741.754 565.806 cv
740.854 564.526 740.414 562.646 740.414 560.186 cv
740.414 557.886 740.954 556.046 742.054 554.686 cv
743.134 553.326 744.614 552.626 746.454 552.626 cv
746.934 552.626 747.434 552.686 747.954 552.766 cv
748.454 552.866 748.974 553.006 749.534 553.206 cv
f
758.094 554.186 mo
757.074 554.186 756.314 554.686 755.794 555.686 cv
755.274 556.686 755.034 558.186 755.034 560.186 cv
755.034 562.186 755.274 563.686 755.794 564.686 cv
756.314 565.686 757.074 566.186 758.094 566.186 cv
759.114 566.186 759.874 565.686 760.394 564.686 cv
760.894 563.686 761.154 562.186 761.154 560.186 cv
761.154 558.186 760.894 556.686 760.394 555.686 cv
759.874 554.686 759.114 554.186 758.094 554.186 cv
758.094 552.626 mo
759.714 552.626 760.954 553.286 761.834 554.566 cv
762.694 555.866 763.134 557.746 763.134 560.186 cv
763.134 562.646 762.694 564.526 761.834 565.806 cv
760.954 567.086 759.714 567.726 758.094 567.726 cv
756.454 567.726 755.194 567.086 754.334 565.806 cv
753.474 564.526 753.054 562.646 753.054 560.186 cv
753.054 557.746 753.474 555.866 754.334 554.566 cv
755.194 553.286 756.454 552.626 758.094 552.626 cv
f
956.777 545.263 mo
956.777 548.763 li
f
956.777 545.263 mo
956.777 548.763 li
@
950.419 560.546 mo
949.479 560.546 948.739 560.806 948.199 561.306 cv
947.659 561.806 947.399 562.486 947.399 563.366 cv
947.399 564.246 947.659 564.946 948.199 565.446 cv
948.739 565.946 949.479 566.186 950.419 566.186 cv
951.339 566.186 952.079 565.946 952.619 565.426 cv
953.159 564.926 953.439 564.246 953.439 563.366 cv
953.439 562.486 953.159 561.806 952.639 561.306 cv
952.099 560.806 951.359 560.546 950.419 560.546 cv
948.439 559.706 mo
947.599 559.506 946.939 559.106 946.459 558.526 cv
945.979 557.946 945.759 557.246 945.759 556.406 cv
945.759 555.246 946.159 554.326 946.999 553.646 cv
947.819 552.966 948.959 552.626 950.419 552.626 cv
951.859 552.626 952.999 552.966 953.839 553.646 cv
954.659 554.326 955.079 555.246 955.079 556.406 cv
955.079 557.246 954.839 557.946 954.359 558.526 cv
953.879 559.106 953.239 559.506 952.399 559.706 cv
953.339 559.926 954.079 560.366 954.619 561.006 cv
955.139 561.646 955.419 562.446 955.419 563.366 cv
955.419 564.786 954.979 565.866 954.119 566.606 cv
953.239 567.366 952.019 567.726 950.419 567.726 cv
948.799 567.726 947.559 567.366 946.699 566.606 cv
945.839 565.866 945.419 564.786 945.419 563.366 cv
945.419 562.446 945.679 561.646 946.219 561.006 cv
946.739 560.366 947.479 559.926 948.439 559.706 cv
947.719 556.586 mo
947.719 557.346 947.939 557.946 948.419 558.366 cv
948.899 558.786 949.559 558.986 950.419 558.986 cv
951.259 558.986 951.919 558.786 952.399 558.366 cv
952.879 557.946 953.119 557.346 953.119 556.586 cv
953.119 555.826 952.879 555.246 952.399 554.826 cv
951.919 554.406 951.259 554.186 950.419 554.186 cv
949.559 554.186 948.899 554.406 948.419 554.826 cv
947.939 555.246 947.719 555.826 947.719 556.586 cv
f
963.139 554.186 mo
962.119 554.186 961.359 554.686 960.839 555.686 cv
960.319 556.686 960.079 558.186 960.079 560.186 cv
960.079 562.186 960.319 563.686 960.839 564.686 cv
961.359 565.686 962.119 566.186 963.139 566.186 cv
964.159 566.186 964.919 565.686 965.439 564.686 cv
965.939 563.686 966.199 562.186 966.199 560.186 cv
966.199 558.186 965.939 556.686 965.439 555.686 cv
964.919 554.686 964.159 554.186 963.139 554.186 cv
963.139 552.626 mo
964.759 552.626 965.999 553.286 966.879 554.566 cv
967.739 555.866 968.179 557.746 968.179 560.186 cv
968.179 562.646 967.739 564.526 966.879 565.806 cv
965.999 567.086 964.759 567.726 963.139 567.726 cv
961.499 567.726 960.239 567.086 959.379 565.806 cv
958.519 564.526 958.099 562.646 958.099 560.186 cv
958.099 557.746 958.519 555.866 959.379 554.566 cv
960.239 553.286 961.499 552.626 963.139 552.626 cv
f
594.914 576.245 mo
604.134 576.245 li
604.134 577.905 li
596.894 577.905 li
596.894 582.225 li
603.834 582.225 li
603.834 583.885 li
596.894 583.885 li
596.894 589.165 li
604.314 589.165 li
604.314 590.825 li
594.914 590.825 li
594.914 576.245 li
f
609.214 589.185 mo
609.214 594.965 li
607.414 594.965 li
607.414 579.885 li
609.214 579.885 li
609.214 581.545 li
609.574 580.905 610.054 580.425 610.634 580.105 cv
611.214 579.785 611.914 579.625 612.714 579.625 cv
614.034 579.625 615.114 580.165 615.954 581.205 cv
616.774 582.265 617.194 583.645 617.194 585.365 cv
617.194 587.085 616.774 588.485 615.954 589.525 cv
615.114 590.565 614.034 591.085 612.714 591.085 cv
611.914 591.085 611.214 590.925 610.634 590.625 cv
610.054 590.325 609.574 589.845 609.214 589.185 cv
615.334 585.365 mo
615.334 584.045 615.054 583.025 614.514 582.265 cv
613.954 581.505 613.214 581.125 612.274 581.125 cv
611.314 581.125 610.574 581.505 610.034 582.265 cv
609.474 583.025 609.214 584.045 609.214 585.365 cv
609.214 586.685 609.474 587.725 610.034 588.485 cv
610.574 589.245 611.314 589.605 612.274 589.605 cv
613.214 589.605 613.954 589.245 614.514 588.485 cv
615.054 587.725 615.334 586.685 615.334 585.365 cv
f
624.414 581.145 mo
623.454 581.145 622.694 581.525 622.134 582.285 cv
621.574 583.045 621.294 584.065 621.294 585.365 cv
621.294 586.685 621.554 587.705 622.114 588.465 cv
622.674 589.225 623.434 589.585 624.414 589.585 cv
625.374 589.585 626.134 589.225 626.694 588.465 cv
627.254 587.705 627.534 586.685 627.534 585.365 cv
627.534 584.085 627.254 583.045 626.694 582.285 cv
626.134 581.525 625.374 581.145 624.414 581.145 cv
624.414 579.625 mo
625.974 579.625 627.194 580.145 628.094 581.145 cv
628.974 582.165 629.434 583.565 629.434 585.365 cv
629.434 587.165 628.974 588.565 628.094 589.565 cv
627.194 590.585 625.974 591.085 624.414 591.085 cv
622.834 591.085 621.594 590.585 620.714 589.565 cv
619.834 588.565 619.394 587.165 619.394 585.365 cv
619.394 583.565 619.834 582.165 620.714 581.145 cv
621.594 580.145 622.834 579.625 624.414 579.625 cv
f
640.294 580.305 mo
640.294 581.985 li
639.774 581.705 639.274 581.505 638.754 581.365 cv
638.234 581.225 637.734 581.145 637.214 581.145 cv
636.054 581.145 635.134 581.525 634.494 582.265 cv
633.854 583.005 633.534 584.045 633.534 585.365 cv
633.534 586.705 633.854 587.745 634.494 588.485 cv
635.134 589.225 636.054 589.585 637.214 589.585 cv
637.734 589.585 638.234 589.525 638.754 589.385 cv
639.274 589.245 639.774 589.025 640.294 588.745 cv
640.294 590.405 li
639.774 590.645 639.254 590.825 638.734 590.925 cv
638.194 591.025 637.614 591.085 637.014 591.085 cv
635.374 591.085 634.054 590.585 633.094 589.545 cv
632.114 588.525 631.634 587.125 631.634 585.365 cv
631.634 583.585 632.114 582.185 633.094 581.165 cv
634.074 580.145 635.414 579.625 637.134 579.625 cv
637.694 579.625 638.234 579.685 638.754 579.805 cv
639.274 579.925 639.794 580.085 640.294 580.305 cv
f
652.514 584.225 mo
652.514 590.825 li
650.714 590.825 li
650.714 584.285 li
650.714 583.245 650.494 582.485 650.094 581.965 cv
649.694 581.445 649.094 581.185 648.294 581.185 cv
647.314 581.185 646.554 581.505 645.994 582.125 cv
645.434 582.745 645.154 583.585 645.154 584.645 cv
645.154 590.825 li
643.354 590.825 li
643.354 575.625 li
645.154 575.625 li
645.154 581.585 li
645.574 580.945 646.074 580.445 646.674 580.125 cv
647.254 579.805 647.934 579.625 648.694 579.625 cv
649.934 579.625 650.894 580.025 651.534 580.805 cv
652.174 581.585 652.514 582.725 652.514 584.225 cv
f
87.8992 526.694 mo
84.3992 526.694 li
f
87.8992 526.694 mo
84.3992 526.694 li
@
32.5042 532.636 mo
35.7242 532.636 li
35.7242 521.516 li
32.2242 522.216 li
32.2242 520.416 li
35.7042 519.716 li
37.6842 519.716 li
37.6842 532.636 li
40.9043 532.636 li
40.9043 534.296 li
32.5042 534.296 li
32.5042 532.636 li
f
49.1043 521.016 mo
48.0843 521.016 47.3243 521.516 46.8043 522.516 cv
46.2843 523.516 46.0443 525.016 46.0443 527.016 cv
46.0443 529.016 46.2843 530.516 46.8043 531.516 cv
47.3243 532.516 48.0843 533.016 49.1043 533.016 cv
50.1243 533.016 50.8843 532.516 51.4043 531.516 cv
51.9043 530.516 52.1643 529.016 52.1643 527.016 cv
52.1643 525.016 51.9043 523.516 51.4043 522.516 cv
50.8843 521.516 50.1243 521.016 49.1043 521.016 cv
49.1043 519.456 mo
50.7243 519.456 51.9643 520.116 52.8443 521.396 cv
53.7043 522.696 54.1443 524.576 54.1443 527.016 cv
54.1443 529.476 53.7043 531.356 52.8443 532.636 cv
51.9643 533.916 50.7243 534.556 49.1043 534.556 cv
47.4643 534.556 46.2043 533.916 45.3443 532.636 cv
44.4843 531.356 44.0643 529.476 44.0643 527.016 cv
44.0643 524.576 44.4843 522.696 45.3443 521.396 cv
46.2043 520.116 47.4643 519.456 49.1043 519.456 cv
f
61.8243 521.016 mo
60.8043 521.016 60.0443 521.516 59.5243 522.516 cv
59.0043 523.516 58.7643 525.016 58.7643 527.016 cv
58.7643 529.016 59.0043 530.516 59.5243 531.516 cv
60.0443 532.516 60.8043 533.016 61.8243 533.016 cv
62.8443 533.016 63.6043 532.516 64.1243 531.516 cv
64.6243 530.516 64.8843 529.016 64.8843 527.016 cv
64.8843 525.016 64.6243 523.516 64.1243 522.516 cv
63.6043 521.516 62.8443 521.016 61.8243 521.016 cv
61.8243 519.456 mo
63.4443 519.456 64.6843 520.116 65.5643 521.396 cv
66.4243 522.696 66.8643 524.576 66.8643 527.016 cv
66.8643 529.476 66.4243 531.356 65.5643 532.636 cv
64.6843 533.916 63.4443 534.556 61.8243 534.556 cv
60.1843 534.556 58.9243 533.916 58.0643 532.636 cv
57.2043 531.356 56.7843 529.476 56.7843 527.016 cv
56.7843 524.576 57.2043 522.696 58.0643 521.396 cv
58.9243 520.116 60.1843 519.456 61.8243 519.456 cv
f
74.5443 521.016 mo
73.5243 521.016 72.7643 521.516 72.2443 522.516 cv
71.7243 523.516 71.4843 525.016 71.4843 527.016 cv
71.4843 529.016 71.7243 530.516 72.2443 531.516 cv
72.7643 532.516 73.5243 533.016 74.5443 533.016 cv
75.5643 533.016 76.3243 532.516 76.8443 531.516 cv
77.3443 530.516 77.6043 529.016 77.6043 527.016 cv
77.6043 525.016 77.3443 523.516 76.8443 522.516 cv
76.3243 521.516 75.5643 521.016 74.5443 521.016 cv
74.5443 519.456 mo
76.1643 519.456 77.4043 520.116 78.2843 521.396 cv
79.1443 522.696 79.5843 524.576 79.5843 527.016 cv
79.5843 529.476 79.1443 531.356 78.2843 532.636 cv
77.4043 533.916 76.1643 534.556 74.5443 534.556 cv
72.9043 534.556 71.6443 533.916 70.7843 532.636 cv
69.9243 531.356 69.5043 529.476 69.5043 527.016 cv
69.5043 524.576 69.9243 522.696 70.7843 521.396 cv
71.6443 520.116 72.9043 519.456 74.5443 519.456 cv
f
87.8992 439.307 mo
84.3992 439.307 li
f
87.8992 439.307 mo
84.3992 439.307 li
@
33.8642 445.249 mo
40.7442 445.249 li
40.7442 446.909 li
31.4842 446.909 li
31.4842 445.249 li
32.2242 444.489 33.2442 443.449 34.5443 442.129 cv
35.8242 440.829 36.6442 439.989 36.9842 439.609 cv
37.6242 438.909 38.0642 438.309 38.3042 437.809 cv
38.5443 437.329 38.6842 436.829 38.6842 436.349 cv
38.6842 435.589 38.4043 434.949 37.8643 434.469 cv
37.3242 433.989 36.6242 433.729 35.7442 433.729 cv
35.1242 433.729 34.4642 433.849 33.7842 434.049 cv
33.1042 434.269 32.3642 434.589 31.5842 435.029 cv
31.5842 433.029 li
32.3842 432.709 33.1242 432.469 33.8042 432.309 cv
34.4842 432.149 35.1242 432.069 35.7042 432.069 cv
37.2042 432.069 38.4043 432.449 39.3042 433.209 cv
40.2042 433.969 40.6642 434.969 40.6642 436.229 cv
40.6642 436.829 40.5443 437.409 40.3242 437.929 cv
40.1042 438.469 39.7042 439.109 39.1042 439.829 cv
38.9442 440.029 38.4242 440.569 37.5443 441.469 cv
36.6642 442.369 35.4442 443.629 33.8642 445.249 cv
f
49.1043 433.629 mo
48.0843 433.629 47.3243 434.129 46.8043 435.129 cv
46.2843 436.129 46.0443 437.629 46.0443 439.629 cv
46.0443 441.629 46.2843 443.129 46.8043 444.129 cv
47.3243 445.129 48.0843 445.629 49.1043 445.629 cv
50.1243 445.629 50.8843 445.129 51.4043 444.129 cv
51.9043 443.129 52.1643 441.629 52.1643 439.629 cv
52.1643 437.629 51.9043 436.129 51.4043 435.129 cv
50.8843 434.129 50.1243 433.629 49.1043 433.629 cv
49.1043 432.069 mo
50.7243 432.069 51.9643 432.729 52.8443 434.009 cv
53.7043 435.309 54.1443 437.189 54.1443 439.629 cv
54.1443 442.089 53.7043 443.969 52.8443 445.249 cv
51.9643 446.529 50.7243 447.169 49.1043 447.169 cv
47.4643 447.169 46.2043 446.529 45.3443 445.249 cv
44.4843 443.969 44.0643 442.089 44.0643 439.629 cv
44.0643 437.189 44.4843 435.309 45.3443 434.009 cv
46.2043 432.729 47.4643 432.069 49.1043 432.069 cv
f
61.8243 433.629 mo
60.8043 433.629 60.0443 434.129 59.5243 435.129 cv
59.0043 436.129 58.7643 437.629 58.7643 439.629 cv
58.7643 441.629 59.0043 443.129 59.5243 444.129 cv
60.0443 445.129 60.8043 445.629 61.8243 445.629 cv
62.8443 445.629 63.6043 445.129 64.1243 444.129 cv
64.6243 443.129 64.8843 441.629 64.8843 439.629 cv
64.8843 437.629 64.6243 436.129 64.1243 435.129 cv
63.6043 434.129 62.8443 433.629 61.8243 433.629 cv
61.8243 432.069 mo
63.4443 432.069 64.6843 432.729 65.5643 434.009 cv
66.4243 435.309 66.8643 437.189 66.8643 439.629 cv
66.8643 442.089 66.4243 443.969 65.5643 445.249 cv
64.6843 446.529 63.4443 447.169 61.8243 447.169 cv
60.1843 447.169 58.9243 446.529 58.0643 445.249 cv
57.2043 443.969 56.7843 442.089 56.7843 439.629 cv
56.7843 437.189 57.2043 435.309 58.0643 434.009 cv
58.9243 432.729 60.1843 432.069 61.8243 432.069 cv
f
74.5443 433.629 mo
73.5243 433.629 72.7643 434.129 72.2443 435.129 cv
71.7243 436.129 71.4843 437.629 71.4843 439.629 cv
71.4843 441.629 71.7243 443.129 72.2443 444.129 cv
72.7643 445.129 73.5243 445.629 74.5443 445.629 cv
75.5643 445.629 76.3243 445.129 76.8443 444.129 cv
77.3443 443.129 77.6043 441.629 77.6043 439.629 cv
77.6043 437.629 77.3443 436.129 76.8443 435.129 cv
76.3243 434.129 75.5643 433.629 74.5443 433.629 cv
74.5443 432.069 mo
76.1643 432.069 77.4043 432.729 78.2843 434.009 cv
79.1443 435.309 79.5843 437.189 79.5843 439.629 cv
79.5843 442.089 79.1443 443.969 78.2843 445.249 cv
77.4043 446.529 76.1643 447.169 74.5443 447.169 cv
72.9043 447.169 71.6443 446.529 70.7843 445.249 cv
69.9243 443.969 69.5043 442.089 69.5043 439.629 cv
69.5043 437.189 69.9243 435.309 70.7843 434.009 cv
71.6443 432.729 72.9043 432.069 74.5443 432.069 cv
f
87.8992 351.92 mo
84.3992 351.92 li
f
87.8992 351.92 mo
84.3992 351.92 li
@
38.1442 351.662 mo
39.0842 351.862 39.8242 352.282 40.3442 352.922 cv
40.8643 353.562 41.1442 354.362 41.1442 355.282 cv
41.1442 356.722 40.6442 357.842 39.6642 358.622 cv
38.6642 359.402 37.2642 359.782 35.4442 359.782 cv
34.8242 359.782 34.1842 359.722 33.5442 359.602 cv
32.9042 359.502 32.2242 359.322 31.5442 359.082 cv
31.5442 357.182 li
32.0842 357.502 32.6842 357.742 33.3442 357.902 cv
33.9842 358.062 34.6642 358.142 35.3842 358.142 cv
36.6242 358.142 37.5642 357.902 38.2042 357.422 cv
38.8442 356.942 39.1842 356.222 39.1842 355.282 cv
39.1842 354.442 38.8842 353.762 38.2842 353.282 cv
37.6842 352.802 36.8442 352.542 35.7642 352.542 cv
34.0642 352.542 li
34.0642 350.922 li
35.8442 350.922 li
36.8042 350.922 37.5443 350.742 38.0642 350.342 cv
38.5842 349.962 38.8442 349.402 38.8442 348.662 cv
38.8442 347.922 38.5642 347.342 38.0443 346.942 cv
37.5042 346.542 36.7442 346.342 35.7642 346.342 cv
35.2242 346.342 34.6442 346.402 34.0242 346.522 cv
33.4042 346.642 32.7242 346.822 31.9842 347.062 cv
31.9842 345.302 li
32.7242 345.102 33.4242 344.942 34.0842 344.842 cv
34.7242 344.742 35.3442 344.682 35.9442 344.682 cv
37.4242 344.682 38.6042 345.022 39.4842 345.702 cv
40.3643 346.382 40.8042 347.302 40.8042 348.462 cv
40.8042 349.262 40.5642 349.942 40.1042 350.502 cv
39.6442 351.062 38.9842 351.462 38.1442 351.662 cv
f
49.1043 346.242 mo
48.0843 346.242 47.3243 346.742 46.8043 347.742 cv
46.2843 348.742 46.0443 350.242 46.0443 352.242 cv
46.0443 354.242 46.2843 355.742 46.8043 356.742 cv
47.3243 357.742 48.0843 358.242 49.1043 358.242 cv
50.1243 358.242 50.8843 357.742 51.4043 356.742 cv
51.9043 355.742 52.1643 354.242 52.1643 352.242 cv
52.1643 350.242 51.9043 348.742 51.4043 347.742 cv
50.8843 346.742 50.1243 346.242 49.1043 346.242 cv
49.1043 344.682 mo
50.7243 344.682 51.9643 345.342 52.8443 346.622 cv
53.7043 347.922 54.1443 349.802 54.1443 352.242 cv
54.1443 354.702 53.7043 356.582 52.8443 357.862 cv
51.9643 359.142 50.7243 359.782 49.1043 359.782 cv
47.4643 359.782 46.2043 359.142 45.3443 357.862 cv
44.4843 356.582 44.0643 354.702 44.0643 352.242 cv
44.0643 349.802 44.4843 347.922 45.3443 346.622 cv
46.2043 345.342 47.4643 344.682 49.1043 344.682 cv
f
61.8243 346.242 mo
60.8043 346.242 60.0443 346.742 59.5243 347.742 cv
59.0043 348.742 58.7643 350.242 58.7643 352.242 cv
58.7643 354.242 59.0043 355.742 59.5243 356.742 cv
60.0443 357.742 60.8043 358.242 61.8243 358.242 cv
62.8443 358.242 63.6043 357.742 64.1243 356.742 cv
64.6243 355.742 64.8843 354.242 64.8843 352.242 cv
64.8843 350.242 64.6243 348.742 64.1243 347.742 cv
63.6043 346.742 62.8443 346.242 61.8243 346.242 cv
61.8243 344.682 mo
63.4443 344.682 64.6843 345.342 65.5643 346.622 cv
66.4243 347.922 66.8643 349.802 66.8643 352.242 cv
66.8643 354.702 66.4243 356.582 65.5643 357.862 cv
64.6843 359.142 63.4443 359.782 61.8243 359.782 cv
60.1843 359.782 58.9243 359.142 58.0643 357.862 cv
57.2043 356.582 56.7843 354.702 56.7843 352.242 cv
56.7843 349.802 57.2043 347.922 58.0643 346.622 cv
58.9243 345.342 60.1843 344.682 61.8243 344.682 cv
f
74.5443 346.242 mo
73.5243 346.242 72.7643 346.742 72.2443 347.742 cv
71.7243 348.742 71.4843 350.242 71.4843 352.242 cv
71.4843 354.242 71.7243 355.742 72.2443 356.742 cv
72.7643 357.742 73.5243 358.242 74.5443 358.242 cv
75.5643 358.242 76.3243 357.742 76.8443 356.742 cv
77.3443 355.742 77.6043 354.242 77.6043 352.242 cv
77.6043 350.242 77.3443 348.742 76.8443 347.742 cv
76.3243 346.742 75.5643 346.242 74.5443 346.242 cv
74.5443 344.682 mo
76.1643 344.682 77.4043 345.342 78.2843 346.622 cv
79.1443 347.922 79.5843 349.802 79.5843 352.242 cv
79.5843 354.702 79.1443 356.582 78.2843 357.862 cv
77.4043 359.142 76.1643 359.782 74.5443 359.782 cv
72.9043 359.782 71.6443 359.142 70.7843 357.862 cv
69.9243 356.582 69.5043 354.702 69.5043 352.242 cv
69.5043 349.802 69.9243 347.922 70.7843 346.622 cv
71.6443 345.342 72.9043 344.682 74.5443 344.682 cv
f
87.8992 264.533 mo
84.3992 264.533 li
f
87.8992 264.533 mo
84.3992 264.533 li
@
37.5842 259.274 mo
32.6042 267.054 li
37.5842 267.054 li
37.5842 259.274 li
37.0642 257.554 mo
39.5443 257.554 li
39.5443 267.054 li
41.6242 267.054 li
41.6242 268.694 li
39.5443 268.694 li
39.5443 272.134 li
37.5842 272.134 li
37.5842 268.694 li
31.0042 268.694 li
31.0042 266.794 li
37.0642 257.554 li
f
49.1043 258.854 mo
48.0843 258.854 47.3243 259.354 46.8043 260.354 cv
46.2843 261.354 46.0443 262.854 46.0443 264.854 cv
46.0443 266.854 46.2843 268.354 46.8043 269.354 cv
47.3243 270.354 48.0843 270.854 49.1043 270.854 cv
50.1243 270.854 50.8843 270.354 51.4043 269.354 cv
51.9043 268.354 52.1643 266.854 52.1643 264.854 cv
52.1643 262.854 51.9043 261.354 51.4043 260.354 cv
50.8843 259.354 50.1243 258.854 49.1043 258.854 cv
49.1043 257.294 mo
50.7243 257.294 51.9643 257.954 52.8443 259.234 cv
53.7043 260.534 54.1443 262.414 54.1443 264.854 cv
54.1443 267.314 53.7043 269.194 52.8443 270.474 cv
51.9643 271.754 50.7243 272.394 49.1043 272.394 cv
47.4643 272.394 46.2043 271.754 45.3443 270.474 cv
44.4843 269.194 44.0643 267.314 44.0643 264.854 cv
44.0643 262.414 44.4843 260.534 45.3443 259.234 cv
46.2043 257.954 47.4643 257.294 49.1043 257.294 cv
f
61.8243 258.854 mo
60.8043 258.854 60.0443 259.354 59.5243 260.354 cv
59.0043 261.354 58.7643 262.854 58.7643 264.854 cv
58.7643 266.854 59.0043 268.354 59.5243 269.354 cv
60.0443 270.354 60.8043 270.854 61.8243 270.854 cv
62.8443 270.854 63.6043 270.354 64.1243 269.354 cv
64.6243 268.354 64.8843 266.854 64.8843 264.854 cv
64.8843 262.854 64.6243 261.354 64.1243 260.354 cv
63.6043 259.354 62.8443 258.854 61.8243 258.854 cv
61.8243 257.294 mo
63.4443 257.294 64.6843 257.954 65.5643 259.234 cv
66.4243 260.534 66.8643 262.414 66.8643 264.854 cv
66.8643 267.314 66.4243 269.194 65.5643 270.474 cv
64.6843 271.754 63.4443 272.394 61.8243 272.394 cv
60.1843 272.394 58.9243 271.754 58.0643 270.474 cv
57.2043 269.194 56.7843 267.314 56.7843 264.854 cv
56.7843 262.414 57.2043 260.534 58.0643 259.234 cv
58.9243 257.954 60.1843 257.294 61.8243 257.294 cv
f
74.5443 258.854 mo
73.5243 258.854 72.7643 259.354 72.2443 260.354 cv
71.7243 261.354 71.4843 262.854 71.4843 264.854 cv
71.4843 266.854 71.7243 268.354 72.2443 269.354 cv
72.7643 270.354 73.5243 270.854 74.5443 270.854 cv
75.5643 270.854 76.3243 270.354 76.8443 269.354 cv
77.3443 268.354 77.6043 266.854 77.6043 264.854 cv
77.6043 262.854 77.3443 261.354 76.8443 260.354 cv
76.3243 259.354 75.5643 258.854 74.5443 258.854 cv
74.5443 257.294 mo
76.1643 257.294 77.4043 257.954 78.2843 259.234 cv
79.1443 260.534 79.5843 262.414 79.5843 264.854 cv
79.5843 267.314 79.1443 269.194 78.2843 270.474 cv
77.4043 271.754 76.1643 272.394 74.5443 272.394 cv
72.9043 272.394 71.6443 271.754 70.7843 270.474 cv
69.9243 269.194 69.5043 267.314 69.5043 264.854 cv
69.5043 262.414 69.9243 260.534 70.7843 259.234 cv
71.6443 257.954 72.9043 257.294 74.5443 257.294 cv
f
87.8992 177.146 mo
84.3992 177.146 li
f
87.8992 177.146 mo
84.3992 177.146 li
@
32.1842 170.167 mo
39.9242 170.167 li
39.9242 171.827 li
33.9842 171.827 li
33.9842 175.407 li
34.2642 175.307 34.5642 175.227 34.8442 175.187 cv
35.1242 175.147 35.4242 175.107 35.7042 175.107 cv
37.3242 175.107 38.6042 175.567 39.5642 176.447 cv
40.5242 177.347 41.0042 178.547 41.0042 180.067 cv
41.0042 181.647 40.5042 182.867 39.5242 183.727 cv
38.5443 184.587 37.1642 185.007 35.4042 185.007 cv
34.7842 185.007 34.1642 184.947 33.5242 184.867 cv
32.8842 184.767 32.2442 184.627 31.5642 184.407 cv
31.5642 182.427 li
32.1442 182.747 32.7442 182.987 33.3842 183.147 cv
34.0042 183.307 34.6642 183.367 35.3642 183.367 cv
36.4842 183.367 37.3842 183.087 38.0443 182.487 cv
38.6842 181.887 39.0242 181.087 39.0242 180.067 cv
39.0242 179.067 38.6842 178.267 38.0443 177.667 cv
37.3842 177.067 36.4842 176.767 35.3642 176.767 cv
34.8442 176.767 34.3042 176.827 33.7842 176.947 cv
33.2642 177.067 32.7242 177.247 32.1842 177.487 cv
32.1842 170.167 li
f
49.1043 171.467 mo
48.0843 171.467 47.3243 171.967 46.8043 172.967 cv
46.2843 173.967 46.0443 175.467 46.0443 177.467 cv
46.0443 179.467 46.2843 180.967 46.8043 181.967 cv
47.3243 182.967 48.0843 183.467 49.1043 183.467 cv
50.1243 183.467 50.8843 182.967 51.4043 181.967 cv
51.9043 180.967 52.1643 179.467 52.1643 177.467 cv
52.1643 175.467 51.9043 173.967 51.4043 172.967 cv
50.8843 171.967 50.1243 171.467 49.1043 171.467 cv
49.1043 169.907 mo
50.7243 169.907 51.9643 170.567 52.8443 171.847 cv
53.7043 173.147 54.1443 175.027 54.1443 177.467 cv
54.1443 179.927 53.7043 181.807 52.8443 183.087 cv
51.9643 184.367 50.7243 185.007 49.1043 185.007 cv
47.4643 185.007 46.2043 184.367 45.3443 183.087 cv
44.4843 181.807 44.0643 179.927 44.0643 177.467 cv
44.0643 175.027 44.4843 173.147 45.3443 171.847 cv
46.2043 170.567 47.4643 169.907 49.1043 169.907 cv
f
61.8243 171.467 mo
60.8043 171.467 60.0443 171.967 59.5243 172.967 cv
59.0043 173.967 58.7643 175.467 58.7643 177.467 cv
58.7643 179.467 59.0043 180.967 59.5243 181.967 cv
60.0443 182.967 60.8043 183.467 61.8243 183.467 cv
62.8443 183.467 63.6043 182.967 64.1243 181.967 cv
64.6243 180.967 64.8843 179.467 64.8843 177.467 cv
64.8843 175.467 64.6243 173.967 64.1243 172.967 cv
63.6043 171.967 62.8443 171.467 61.8243 171.467 cv
61.8243 169.907 mo
63.4443 169.907 64.6843 170.567 65.5643 171.847 cv
66.4243 173.147 66.8643 175.027 66.8643 177.467 cv
66.8643 179.927 66.4243 181.807 65.5643 183.087 cv
64.6843 184.367 63.4443 185.007 61.8243 185.007 cv
60.1843 185.007 58.9243 184.367 58.0643 183.087 cv
57.2043 181.807 56.7843 179.927 56.7843 177.467 cv
56.7843 175.027 57.2043 173.147 58.0643 171.847 cv
58.9243 170.567 60.1843 169.907 61.8243 169.907 cv
f
74.5443 171.467 mo
73.5243 171.467 72.7643 171.967 72.2443 172.967 cv
71.7243 173.967 71.4843 175.467 71.4843 177.467 cv
71.4843 179.467 71.7243 180.967 72.2443 181.967 cv
72.7643 182.967 73.5243 183.467 74.5443 183.467 cv
75.5643 183.467 76.3243 182.967 76.8443 181.967 cv
77.3443 180.967 77.6043 179.467 77.6043 177.467 cv
77.6043 175.467 77.3443 173.967 76.8443 172.967 cv
76.3243 171.967 75.5643 171.467 74.5443 171.467 cv
74.5443 169.907 mo
76.1643 169.907 77.4043 170.567 78.2843 171.847 cv
79.1443 173.147 79.5843 175.027 79.5843 177.467 cv
79.5843 179.927 79.1443 181.807 78.2843 183.087 cv
77.4043 184.367 76.1643 185.007 74.5443 185.007 cv
72.9043 185.007 71.6443 184.367 70.7843 183.087 cv
69.9243 181.807 69.5043 179.927 69.5043 177.467 cv
69.5043 175.027 69.9243 173.147 70.7843 171.847 cv
71.6443 170.567 72.9043 169.907 74.5443 169.907 cv
f
87.8992 89.7585 mo
84.3992 89.7585 li
f
87.8992 89.7585 mo
84.3992 89.7585 li
@
36.6242 89.2801 mo
35.7442 89.2801 35.0443 89.6001 34.5242 90.2001 cv
34.0042 90.8001 33.7442 91.6401 33.7442 92.6801 cv
33.7442 93.7401 34.0042 94.5801 34.5242 95.1801 cv
35.0443 95.7801 35.7442 96.0801 36.6242 96.0801 cv
37.5042 96.0801 38.2042 95.7801 38.7242 95.1801 cv
39.2442 94.5801 39.5042 93.7401 39.5042 92.6801 cv
39.5042 91.6401 39.2442 90.8001 38.7242 90.2001 cv
38.2042 89.6001 37.5042 89.2801 36.6242 89.2801 cv
40.5443 83.1001 mo
40.5443 84.9001 li
40.0443 84.6601 39.5443 84.4801 39.0443 84.3601 cv
38.5242 84.2401 38.0242 84.1801 37.5443 84.1801 cv
36.2242 84.1801 35.2242 84.6201 34.5443 85.5001 cv
33.8642 86.3801 33.4642 87.7201 33.3842 89.4801 cv
33.7642 88.9201 34.2442 88.4801 34.8242 88.1801 cv
35.4042 87.8801 36.0443 87.7201 36.7442 87.7201 cv
38.2042 87.7201 39.3643 88.1801 40.2042 89.0601 cv
41.0443 89.9401 41.4842 91.1601 41.4842 92.6801 cv
41.4842 94.1801 41.0242 95.3801 40.1442 96.2801 cv
39.2642 97.1801 38.0842 97.6201 36.6242 97.6201 cv
34.9442 97.6201 33.6442 96.9801 32.7642 95.7001 cv
31.8642 94.4201 31.4242 92.5401 31.4242 90.0801 cv
31.4242 87.7801 31.9642 85.9401 33.0642 84.5801 cv
34.1442 83.2201 35.6242 82.5201 37.4642 82.5201 cv
37.9442 82.5201 38.4442 82.5801 38.9642 82.6601 cv
39.4642 82.7601 39.9842 82.9001 40.5443 83.1001 cv
f
49.1043 84.0801 mo
48.0843 84.0801 47.3243 84.5801 46.8043 85.5801 cv
46.2843 86.5801 46.0443 88.0801 46.0443 90.0801 cv
46.0443 92.0801 46.2843 93.5801 46.8043 94.5801 cv
47.3243 95.5801 48.0843 96.0801 49.1043 96.0801 cv
50.1243 96.0801 50.8843 95.5801 51.4043 94.5801 cv
51.9043 93.5801 52.1643 92.0801 52.1643 90.0801 cv
52.1643 88.0801 51.9043 86.5801 51.4043 85.5801 cv
50.8843 84.5801 50.1243 84.0801 49.1043 84.0801 cv
49.1043 82.5201 mo
50.7243 82.5201 51.9643 83.1801 52.8443 84.4601 cv
53.7043 85.7601 54.1443 87.6401 54.1443 90.0801 cv
54.1443 92.5401 53.7043 94.4201 52.8443 95.7001 cv
51.9643 96.9801 50.7243 97.6201 49.1043 97.6201 cv
47.4643 97.6201 46.2043 96.9801 45.3443 95.7001 cv
44.4843 94.4201 44.0643 92.5401 44.0643 90.0801 cv
44.0643 87.6401 44.4843 85.7601 45.3443 84.4601 cv
46.2043 83.1801 47.4643 82.5201 49.1043 82.5201 cv
f
61.8243 84.0801 mo
60.8043 84.0801 60.0443 84.5801 59.5243 85.5801 cv
59.0043 86.5801 58.7643 88.0801 58.7643 90.0801 cv
58.7643 92.0801 59.0043 93.5801 59.5243 94.5801 cv
60.0443 95.5801 60.8043 96.0801 61.8243 96.0801 cv
62.8443 96.0801 63.6043 95.5801 64.1243 94.5801 cv
64.6243 93.5801 64.8843 92.0801 64.8843 90.0801 cv
64.8843 88.0801 64.6243 86.5801 64.1243 85.5801 cv
63.6043 84.5801 62.8443 84.0801 61.8243 84.0801 cv
61.8243 82.5201 mo
63.4443 82.5201 64.6843 83.1801 65.5643 84.4601 cv
66.4243 85.7601 66.8643 87.6401 66.8643 90.0801 cv
66.8643 92.5401 66.4243 94.4201 65.5643 95.7001 cv
64.6843 96.9801 63.4443 97.6201 61.8243 97.6201 cv
60.1843 97.6201 58.9243 96.9801 58.0643 95.7001 cv
57.2043 94.4201 56.7843 92.5401 56.7843 90.0801 cv
56.7843 87.6401 57.2043 85.7601 58.0643 84.4601 cv
58.9243 83.1801 60.1843 82.5201 61.8243 82.5201 cv
f
74.5443 84.0801 mo
73.5243 84.0801 72.7643 84.5801 72.2443 85.5801 cv
71.7243 86.5801 71.4843 88.0801 71.4843 90.0801 cv
71.4843 92.0801 71.7243 93.5801 72.2443 94.5801 cv
72.7643 95.5801 73.5243 96.0801 74.5443 96.0801 cv
75.5643 96.0801 76.3243 95.5801 76.8443 94.5801 cv
77.3443 93.5801 77.6043 92.0801 77.6043 90.0801 cv
77.6043 88.0801 77.3443 86.5801 76.8443 85.5801 cv
76.3243 84.5801 75.5643 84.0801 74.5443 84.0801 cv
74.5443 82.5201 mo
76.1643 82.5201 77.4043 83.1801 78.2843 84.4601 cv
79.1443 85.7601 79.5843 87.6401 79.5843 90.0801 cv
79.5843 92.5401 79.1443 94.4201 78.2843 95.7001 cv
77.4043 96.9801 76.1643 97.6201 74.5443 97.6201 cv
72.9043 97.6201 71.6443 96.9801 70.7843 95.7001 cv
69.9243 94.4201 69.5043 92.5401 69.5043 90.0801 cv
69.5043 87.6401 69.9243 85.7601 70.7843 84.4601 cv
71.6443 83.1801 72.9043 82.5201 74.5443 82.5201 cv
f
7.28799 299.462 mo
7.28799 290.242 li
8.948 290.242 li
8.948 297.482 li
13.268 297.482 li
13.268 290.542 li
14.928 290.542 li
14.928 297.482 li
20.208 297.482 li
20.208 290.062 li
21.868 290.062 li
21.868 299.462 li
7.28799 299.462 li
f
12.608 280.562 mo
12.488 280.762 12.408 280.982 12.348 281.222 cv
12.308 281.462 12.268 281.722 12.268 282.002 cv
12.268 283.022 12.608 283.802 13.268 284.342 cv
13.928 284.902 14.868 285.162 16.108 285.162 cv
21.868 285.162 li
21.868 286.962 li
10.928 286.962 li
10.928 285.162 li
12.628 285.162 li
11.968 284.802 11.468 284.302 11.148 283.702 cv
10.828 283.102 10.668 282.362 10.668 281.482 cv
10.668 281.362 10.688 281.222 10.688 281.062 cv
10.708 280.922 10.728 280.762 10.768 280.562 cv
12.608 280.562 li
f
12.608 272.342 mo
12.488 272.542 12.408 272.762 12.348 273.002 cv
12.308 273.242 12.268 273.502 12.268 273.782 cv
12.268 274.802 12.608 275.582 13.268 276.122 cv
13.928 276.682 14.868 276.942 16.108 276.942 cv
21.868 276.942 li
21.868 278.742 li
10.928 278.742 li
10.928 276.942 li
12.628 276.942 li
11.968 276.582 11.468 276.082 11.148 275.482 cv
10.828 274.882 10.668 274.142 10.668 273.262 cv
10.668 273.142 10.688 273.002 10.688 272.842 cv
10.708 272.702 10.728 272.542 10.768 272.342 cv
12.608 272.342 li
f
12.188 266.222 mo
12.188 267.182 12.568 267.942 13.328 268.502 cv
14.088 269.062 15.108 269.342 16.408 269.342 cv
17.728 269.342 18.748 269.082 19.508 268.522 cv
20.268 267.962 20.628 267.202 20.628 266.222 cv
20.628 265.262 20.268 264.502 19.508 263.942 cv
18.748 263.382 17.728 263.102 16.408 263.102 cv
15.128 263.102 14.088 263.382 13.328 263.942 cv
12.568 264.502 12.188 265.262 12.188 266.222 cv
10.668 266.222 mo
10.668 264.662 11.188 263.442 12.188 262.542 cv
13.208 261.662 14.608 261.202 16.408 261.202 cv
18.208 261.202 19.608 261.662 20.608 262.542 cv
21.628 263.442 22.128 264.662 22.128 266.222 cv
22.128 267.802 21.628 269.042 20.608 269.922 cv
19.608 270.802 18.208 271.242 16.408 271.242 cv
14.608 271.242 13.208 270.802 12.188 269.922 cv
11.188 269.042 10.668 267.802 10.668 266.222 cv
f
12.608 251.882 mo
12.488 252.082 12.408 252.302 12.348 252.542 cv
12.308 252.782 12.268 253.042 12.268 253.322 cv
12.268 254.342 12.608 255.122 13.268 255.662 cv
13.928 256.222 14.868 256.482 16.108 256.482 cv
21.868 256.482 li
21.868 258.282 li
10.928 258.282 li
10.928 256.482 li
12.628 256.482 li
11.968 256.122 11.468 255.622 11.148 255.022 cv
10.828 254.422 10.668 253.682 10.668 252.802 cv
10.668 252.682 10.688 252.542 10.688 252.382 cv
10.708 252.242 10.728 252.082 10.768 251.882 cv
12.608 251.882 li
f
1.5 lw
2 lc
136.597 82.4617 mo
187.859 144.562 li
239.12 158.361 li
290.381 166.32 li
341.642 172.478 li
392.904 172.701 li
444.165 174.416 li
495.426 178.736 li
546.687 181.153 li
597.949 180.243 li
649.21 179.159 li
700.471 181.347 li
751.732 185.143 li
802.994 186.506 li
854.255 186.238 li
905.516 185.75 li
956.777 189.373 li
1008.04 186.977 li
1059.3 187.443 li
1110.56 187.904 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
136.597 293.647 mo
187.859 360.363 li
239.12 386.038 li
290.381 394.422 li
341.642 399.726 li
392.904 400.264 li
444.165 401.58 li
495.426 400.226 li
546.687 403.952 li
597.949 404.115 li
649.21 402.939 li
700.471 404.457 li
751.732 401.07 li
802.994 402.893 li
854.255 404.272 li
905.516 403.611 li
956.777 403.558 li
1008.04 406.63 li
1059.3 406.512 li
1110.56 406.289 li
@
gsave
133.097 297.147 mo
140.097 297.147 li
140.097 290.147 li
133.097 290.147 li
133.097 297.147 li
clp
133.597 296.647 mo
139.597 290.647 li
133.597 290.647 mo
139.597 296.647 li
f
1 lw
0 lc
133.597 296.647 mo
139.597 290.647 li
133.597 290.647 mo
139.597 296.647 li
@
grestore
gsave
184.359 363.863 mo
191.359 363.863 li
191.359 356.863 li
184.359 356.863 li
184.359 363.863 li
clp
184.859 363.363 mo
190.859 357.363 li
184.859 357.363 mo
190.859 363.363 li
f
1 lw
0 lc
184.859 363.363 mo
190.859 357.363 li
184.859 357.363 mo
190.859 363.363 li
@
grestore
gsave
235.62 389.538 mo
242.62 389.538 li
242.62 382.538 li
235.62 382.538 li
235.62 389.538 li
clp
236.12 389.038 mo
242.12 383.038 li
236.12 383.038 mo
242.12 389.038 li
f
1 lw
0 lc
236.12 389.038 mo
242.12 383.038 li
236.12 383.038 mo
242.12 389.038 li
@
grestore
gsave
286.881 397.922 mo
293.881 397.922 li
293.881 390.922 li
286.881 390.922 li
286.881 397.922 li
clp
287.381 397.422 mo
293.381 391.422 li
287.381 391.422 mo
293.381 397.422 li
f
1 lw
0 lc
287.381 397.422 mo
293.381 391.422 li
287.381 391.422 mo
293.381 397.422 li
@
grestore
gsave
338.142 403.226 mo
345.142 403.226 li
345.142 396.226 li
338.142 396.226 li
338.142 403.226 li
clp
338.642 402.726 mo
344.642 396.726 li
338.642 396.726 mo
344.642 402.726 li
f
1 lw
0 lc
338.642 402.726 mo
344.642 396.726 li
338.642 396.726 mo
344.642 402.726 li
@
grestore
gsave
389.404 403.764 mo
396.404 403.764 li
396.404 396.764 li
389.404 396.764 li
389.404 403.764 li
clp
389.904 403.264 mo
395.904 397.264 li
389.904 397.264 mo
395.904 403.264 li
f
1 lw
0 lc
389.904 403.264 mo
395.904 397.264 li
389.904 397.264 mo
395.904 403.264 li
@
grestore
gsave
440.665 405.08 mo
447.665 405.08 li
447.665 398.08 li
440.665 398.08 li
440.665 405.08 li
clp
441.165 404.58 mo
447.165 398.58 li
441.165 398.58 mo
447.165 404.58 li
f
1 lw
0 lc
441.165 404.58 mo
447.165 398.58 li
441.165 398.58 mo
447.165 404.58 li
@
grestore
gsave
491.926 403.726 mo
498.926 403.726 li
498.926 396.726 li
491.926 396.726 li
491.926 403.726 li
clp
492.426 403.226 mo
498.426 397.226 li
492.426 397.226 mo
498.426 403.226 li
f
1 lw
0 lc
492.426 403.226 mo
498.426 397.226 li
492.426 397.226 mo
498.426 403.226 li
@
grestore
gsave
543.187 407.452 mo
550.188 407.452 li
550.188 400.452 li
543.187 400.452 li
543.187 407.452 li
clp
543.687 406.952 mo
549.687 400.952 li
543.687 400.952 mo
549.687 406.952 li
f
1 lw
0 lc
543.687 406.952 mo
549.687 400.952 li
543.687 400.952 mo
549.687 406.952 li
@
grestore
gsave
594.449 407.615 mo
601.449 407.615 li
601.449 400.615 li
594.449 400.615 li
594.449 407.615 li
clp
594.949 407.115 mo
600.949 401.115 li
594.949 401.115 mo
600.949 407.115 li
f
1 lw
0 lc
594.949 407.115 mo
600.949 401.115 li
594.949 401.115 mo
600.949 407.115 li
@
grestore
gsave
645.71 406.439 mo
652.71 406.439 li
652.71 399.44 li
645.71 399.44 li
645.71 406.439 li
clp
646.21 405.939 mo
652.21 399.939 li
646.21 399.939 mo
652.21 405.939 li
f
1 lw
0 lc
646.21 405.939 mo
652.21 399.939 li
646.21 399.939 mo
652.21 405.939 li
@
grestore
gsave
696.971 407.957 mo
703.971 407.957 li
703.971 400.957 li
696.971 400.957 li
696.971 407.957 li
clp
697.471 407.457 mo
703.471 401.457 li
697.471 401.457 mo
703.471 407.457 li
f
1 lw
0 lc
697.471 407.457 mo
703.471 401.457 li
697.471 401.457 mo
703.471 407.457 li
@
grestore
gsave
748.232 404.57 mo
755.232 404.57 li
755.232 397.57 li
748.232 397.57 li
748.232 404.57 li
clp
748.732 404.07 mo
754.732 398.07 li
748.732 398.07 mo
754.732 404.07 li
f
1 lw
0 lc
748.732 404.07 mo
754.732 398.07 li
748.732 398.07 mo
754.732 404.07 li
@
grestore
gsave
799.493 406.393 mo
806.493 406.393 li
806.493 399.393 li
799.493 399.393 li
799.493 406.393 li
clp
799.993 405.893 mo
805.993 399.893 li
799.993 399.893 mo
805.993 405.893 li
f
1 lw
0 lc
799.993 405.893 mo
805.993 399.893 li
799.993 399.893 mo
805.993 405.893 li
@
grestore
gsave
850.755 407.772 mo
857.755 407.772 li
857.755 400.772 li
850.755 400.772 li
850.755 407.772 li
clp
851.255 407.272 mo
857.255 401.272 li
851.255 401.272 mo
857.255 407.272 li
f
1 lw
0 lc
851.255 407.272 mo
857.255 401.272 li
851.255 401.272 mo
857.255 407.272 li
@
grestore
gsave
902.016 407.111 mo
909.016 407.111 li
909.016 400.111 li
902.016 400.111 li
902.016 407.111 li
clp
902.516 406.611 mo
908.516 400.611 li
902.516 400.611 mo
908.516 406.611 li
f
1 lw
0 lc
902.516 406.611 mo
908.516 400.611 li
902.516 400.611 mo
908.516 406.611 li
@
grestore
gsave
953.277 407.059 mo
960.277 407.059 li
960.277 400.058 li
953.277 400.058 li
953.277 407.059 li
clp
953.777 406.558 mo
959.777 400.558 li
953.777 400.558 mo
959.777 406.558 li
f
1 lw
0 lc
953.777 406.558 mo
959.777 400.558 li
953.777 400.558 mo
959.777 406.558 li
@
grestore
gsave
1004.54 410.13 mo
1011.54 410.13 li
1011.54 403.13 li
1004.54 403.13 li
1004.54 410.13 li
clp
1005.04 409.63 mo
1011.04 403.63 li
1005.04 403.63 mo
1011.04 409.63 li
f
1 lw
0 lc
1005.04 409.63 mo
1011.04 403.63 li
1005.04 403.63 mo
1011.04 409.63 li
@
grestore
gsave
1055.8 410.012 mo
1062.8 410.012 li
1062.8 403.012 li
1055.8 403.012 li
1055.8 410.012 li
clp
1056.3 409.512 mo
1062.3 403.512 li
1056.3 403.512 mo
1062.3 409.512 li
f
1 lw
0 lc
1056.3 409.512 mo
1062.3 403.512 li
1056.3 403.512 mo
1062.3 409.512 li
@
grestore
gsave
1107.06 409.789 mo
1114.06 409.789 li
1114.06 402.789 li
1107.06 402.789 li
1107.06 409.789 li
clp
1107.56 409.289 mo
1113.56 403.289 li
1107.56 403.289 mo
1113.56 409.289 li
f
1 lw
0 lc
1107.56 409.289 mo
1113.56 403.289 li
1107.56 403.289 mo
1113.56 409.289 li
@
grestore
136.597 446.81 mo
187.859 512.479 li
239.12 516.228 li
290.381 519.447 li
341.642 519.522 li
392.904 518.576 li
444.165 519.098 li
495.426 517.558 li
546.687 519.828 li
597.949 517.282 li
649.21 518.538 li
700.471 518.769 li
751.732 519.101 li
802.994 517.984 li
854.255 518.575 li
905.516 518.76 li
956.777 520.844 li
1008.04 519.453 li
1059.3 520.363 li
1110.56 519.275 li
@
gsave
136.097 450.31 mo
137.098 450.31 li
137.098 443.31 li
136.097 443.31 li
136.097 450.31 li
clp
136.597 449.81 mo
136.597 443.81 li
f
1 lw
0 lc
136.597 449.81 mo
136.597 443.81 li
@
grestore
gsave
187.359 515.979 mo
188.359 515.979 li
188.359 508.979 li
187.359 508.979 li
187.359 515.979 li
clp
187.859 515.479 mo
187.859 509.479 li
f
1 lw
0 lc
187.859 515.479 mo
187.859 509.479 li
@
grestore
gsave
238.62 519.728 mo
239.62 519.728 li
239.62 512.728 li
238.62 512.728 li
238.62 519.728 li
clp
239.12 519.228 mo
239.12 513.228 li
f
1 lw
0 lc
239.12 519.228 mo
239.12 513.228 li
@
grestore
gsave
289.881 522.947 mo
290.881 522.947 li
290.881 515.947 li
289.881 515.947 li
289.881 522.947 li
clp
290.381 522.447 mo
290.381 516.447 li
f
1 lw
0 lc
290.381 522.447 mo
290.381 516.447 li
@
grestore
gsave
341.143 523.022 mo
342.142 523.022 li
342.142 516.022 li
341.143 516.022 li
341.143 523.022 li
clp
341.642 522.522 mo
341.642 516.522 li
f
1 lw
0 lc
341.642 522.522 mo
341.642 516.522 li
@
grestore
gsave
392.404 522.076 mo
393.404 522.076 li
393.404 515.077 li
392.404 515.077 li
392.404 522.076 li
clp
392.904 521.576 mo
392.904 515.576 li
f
1 lw
0 lc
392.904 521.576 mo
392.904 515.576 li
@
grestore
gsave
443.665 522.598 mo
444.665 522.598 li
444.665 515.598 li
443.665 515.598 li
443.665 522.598 li
clp
444.165 522.098 mo
444.165 516.098 li
f
1 lw
0 lc
444.165 522.098 mo
444.165 516.098 li
@
grestore
gsave
494.926 521.058 mo
495.926 521.058 li
495.926 514.058 li
494.926 514.058 li
494.926 521.058 li
clp
495.426 520.558 mo
495.426 514.558 li
f
1 lw
0 lc
495.426 520.558 mo
495.426 514.558 li
@
grestore
gsave
546.187 523.328 mo
547.187 523.328 li
547.187 516.328 li
546.187 516.328 li
546.187 523.328 li
clp
546.687 522.828 mo
546.687 516.828 li
f
1 lw
0 lc
546.687 522.828 mo
546.687 516.828 li
@
grestore
gsave
597.448 520.782 mo
598.449 520.782 li
598.449 513.782 li
597.448 513.782 li
597.448 520.782 li
clp
597.949 520.282 mo
597.949 514.282 li
f
1 lw
0 lc
597.949 520.282 mo
597.949 514.282 li
@
grestore
gsave
648.71 522.038 mo
649.71 522.038 li
649.71 515.038 li
648.71 515.038 li
648.71 522.038 li
clp
649.21 521.538 mo
649.21 515.538 li
f
1 lw
0 lc
649.21 521.538 mo
649.21 515.538 li
@
grestore
gsave
699.971 522.269 mo
700.971 522.269 li
700.971 515.269 li
699.971 515.269 li
699.971 522.269 li
clp
700.471 521.769 mo
700.471 515.769 li
f
1 lw
0 lc
700.471 521.769 mo
700.471 515.769 li
@
grestore
gsave
751.232 522.601 mo
752.232 522.601 li
752.232 515.601 li
751.232 515.601 li
751.232 522.601 li
clp
751.732 522.101 mo
751.732 516.101 li
f
1 lw
0 lc
751.732 522.101 mo
751.732 516.101 li
@
grestore
gsave
802.494 521.484 mo
803.493 521.484 li
803.493 514.484 li
802.494 514.484 li
802.494 521.484 li
clp
802.993 520.984 mo
802.993 514.984 li
f
1 lw
0 lc
802.993 520.984 mo
802.993 514.984 li
@
grestore
gsave
853.755 522.075 mo
854.755 522.075 li
854.755 515.076 li
853.755 515.076 li
853.755 522.075 li
clp
854.255 521.575 mo
854.255 515.575 li
f
1 lw
0 lc
854.255 521.575 mo
854.255 515.575 li
@
grestore
gsave
905.016 522.26 mo
906.016 522.26 li
906.016 515.26 li
905.016 515.26 li
905.016 522.26 li
clp
905.516 521.76 mo
905.516 515.76 li
f
1 lw
0 lc
905.516 521.76 mo
905.516 515.76 li
@
grestore
gsave
956.277 524.344 mo
957.277 524.344 li
957.277 517.344 li
956.277 517.344 li
956.277 524.344 li
clp
956.777 523.844 mo
956.777 517.844 li
f
1 lw
0 lc
956.777 523.844 mo
956.777 517.844 li
@
grestore
gsave
1007.54 522.953 mo
1008.54 522.953 li
1008.54 515.953 li
1007.54 515.953 li
1007.54 522.953 li
clp
1008.04 522.453 mo
1008.04 516.453 li
f
1 lw
0 lc
1008.04 522.453 mo
1008.04 516.453 li
@
grestore
gsave
1058.8 523.863 mo
1059.8 523.863 li
1059.8 516.863 li
1058.8 516.863 li
1058.8 523.863 li
clp
1059.3 523.363 mo
1059.3 517.363 li
f
1 lw
0 lc
1059.3 523.363 mo
1059.3 517.363 li
@
grestore
gsave
1110.06 522.775 mo
1111.06 522.775 li
1111.06 515.775 li
1110.06 515.775 li
1110.06 522.775 li
clp
1110.56 522.275 mo
1110.56 516.275 li
f
1 lw
0 lc
1110.56 522.275 mo
1110.56 516.275 li
@
grestore
136.597 32.468 mo
187.859 142.898 li
239.12 156.371 li
290.381 172.319 li
341.642 185.372 li
392.904 186.122 li
444.165 193.114 li
495.426 192.54 li
546.687 198.437 li
597.949 194.267 li
649.21 196.924 li
700.471 195.535 li
751.732 198.011 li
802.994 198.014 li
854.255 198.142 li
905.516 200.736 li
956.777 198.509 li
1008.04 198.581 li
1059.3 197.835 li
1110.56 198.235 li
1 /0 /CSD get_res sepcs
1 sep
@
136.597 390.091 mo
187.859 415.806 li
239.12 450.901 li
290.381 458.296 li
341.642 458.655 li
392.904 463.055 li
444.165 464.834 li
495.426 467.777 li
546.687 466.628 li
597.949 469.4 li
649.21 469.335 li
700.471 470.096 li
751.732 471.466 li
802.994 469.755 li
854.255 471.585 li
905.516 474.186 li
956.777 473.969 li
1008.04 473.705 li
1059.3 474.779 li
1110.56 474.471 li
@
gsave
133.097 393.591 mo
140.097 393.591 li
140.097 386.591 li
133.097 386.591 li
133.097 393.591 li
clp
133.597 393.091 mo
139.597 387.091 li
133.597 387.091 mo
139.597 393.091 li
f
1 lw
0 lc
133.597 393.091 mo
139.597 387.091 li
133.597 387.091 mo
139.597 393.091 li
@
grestore
gsave
184.359 419.306 mo
191.359 419.306 li
191.359 412.306 li
184.359 412.306 li
184.359 419.306 li
clp
184.859 418.806 mo
190.859 412.806 li
184.859 412.806 mo
190.859 418.806 li
f
1 lw
0 lc
184.859 418.806 mo
190.859 412.806 li
184.859 412.806 mo
190.859 418.806 li
@
grestore
gsave
235.62 454.401 mo
242.62 454.401 li
242.62 447.401 li
235.62 447.401 li
235.62 454.401 li
clp
236.12 453.901 mo
242.12 447.901 li
236.12 447.901 mo
242.12 453.901 li
f
1 lw
0 lc
236.12 453.901 mo
242.12 447.901 li
236.12 447.901 mo
242.12 453.901 li
@
grestore
gsave
286.881 461.795 mo
293.881 461.795 li
293.881 454.795 li
286.881 454.795 li
286.881 461.795 li
clp
287.381 461.296 mo
293.381 455.296 li
287.381 455.296 mo
293.381 461.296 li
f
1 lw
0 lc
287.381 461.296 mo
293.381 455.296 li
287.381 455.296 mo
293.381 461.296 li
@
grestore
gsave
338.142 462.155 mo
345.142 462.155 li
345.142 455.155 li
338.142 455.155 li
338.142 462.155 li
clp
338.642 461.655 mo
344.642 455.655 li
338.642 455.655 mo
344.642 461.655 li
f
1 lw
0 lc
338.642 461.655 mo
344.642 455.655 li
338.642 455.655 mo
344.642 461.655 li
@
grestore
gsave
389.404 466.555 mo
396.404 466.555 li
396.404 459.555 li
389.404 459.555 li
389.404 466.555 li
clp
389.904 466.055 mo
395.904 460.055 li
389.904 460.055 mo
395.904 466.055 li
f
1 lw
0 lc
389.904 466.055 mo
395.904 460.055 li
389.904 460.055 mo
395.904 466.055 li
@
grestore
gsave
440.665 468.334 mo
447.665 468.334 li
447.665 461.334 li
440.665 461.334 li
440.665 468.334 li
clp
441.165 467.834 mo
447.165 461.834 li
441.165 461.834 mo
447.165 467.834 li
f
1 lw
0 lc
441.165 467.834 mo
447.165 461.834 li
441.165 461.834 mo
447.165 467.834 li
@
grestore
gsave
491.926 471.277 mo
498.926 471.277 li
498.926 464.277 li
491.926 464.277 li
491.926 471.277 li
clp
492.426 470.777 mo
498.426 464.777 li
492.426 464.777 mo
498.426 470.777 li
f
1 lw
0 lc
492.426 470.777 mo
498.426 464.777 li
492.426 464.777 mo
498.426 470.777 li
@
grestore
gsave
543.187 470.128 mo
550.188 470.128 li
550.188 463.128 li
543.187 463.128 li
543.187 470.128 li
clp
543.687 469.628 mo
549.687 463.628 li
543.687 463.628 mo
549.687 469.628 li
f
1 lw
0 lc
543.687 469.628 mo
549.687 463.628 li
543.687 463.628 mo
549.687 469.628 li
@
grestore
gsave
594.449 472.9 mo
601.449 472.9 li
601.449 465.9 li
594.449 465.9 li
594.449 472.9 li
clp
594.949 472.4 mo
600.949 466.4 li
594.949 466.4 mo
600.949 472.4 li
f
1 lw
0 lc
594.949 472.4 mo
600.949 466.4 li
594.949 466.4 mo
600.949 472.4 li
@
grestore
gsave
645.71 472.835 mo
652.71 472.835 li
652.71 465.835 li
645.71 465.835 li
645.71 472.835 li
clp
646.21 472.335 mo
652.21 466.335 li
646.21 466.335 mo
652.21 472.335 li
f
1 lw
0 lc
646.21 472.335 mo
652.21 466.335 li
646.21 466.335 mo
652.21 472.335 li
@
grestore
gsave
696.971 473.596 mo
703.971 473.596 li
703.971 466.596 li
696.971 466.596 li
696.971 473.596 li
clp
697.471 473.096 mo
703.471 467.096 li
697.471 467.096 mo
703.471 473.096 li
f
1 lw
0 lc
697.471 473.096 mo
703.471 467.096 li
697.471 467.096 mo
703.471 473.096 li
@
grestore
gsave
748.232 474.966 mo
755.232 474.966 li
755.232 467.966 li
748.232 467.966 li
748.232 474.966 li
clp
748.732 474.466 mo
754.732 468.466 li
748.732 468.466 mo
754.732 474.466 li
f
1 lw
0 lc
748.732 474.466 mo
754.732 468.466 li
748.732 468.466 mo
754.732 474.466 li
@
grestore
gsave
799.493 473.255 mo
806.493 473.255 li
806.493 466.255 li
799.493 466.255 li
799.493 473.255 li
clp
799.993 472.755 mo
805.993 466.755 li
799.993 466.755 mo
805.993 472.755 li
f
1 lw
0 lc
799.993 472.755 mo
805.993 466.755 li
799.993 466.755 mo
805.993 472.755 li
@
grestore
gsave
850.755 475.084 mo
857.755 475.084 li
857.755 468.084 li
850.755 468.084 li
850.755 475.084 li
clp
851.255 474.585 mo
857.255 468.585 li
851.255 468.585 mo
857.255 474.585 li
f
1 lw
0 lc
851.255 474.585 mo
857.255 468.585 li
851.255 468.585 mo
857.255 474.585 li
@
grestore
gsave
902.016 477.686 mo
909.016 477.686 li
909.016 470.686 li
902.016 470.686 li
902.016 477.686 li
clp
902.516 477.186 mo
908.516 471.186 li
902.516 471.186 mo
908.516 477.186 li
f
1 lw
0 lc
902.516 477.186 mo
908.516 471.186 li
902.516 471.186 mo
908.516 477.186 li
@
grestore
gsave
953.277 477.469 mo
960.277 477.469 li
960.277 470.469 li
953.277 470.469 li
953.277 477.469 li
clp
953.777 476.969 mo
959.777 470.969 li
953.777 470.969 mo
959.777 476.969 li
f
1 lw
0 lc
953.777 476.969 mo
959.777 470.969 li
953.777 470.969 mo
959.777 476.969 li
@
grestore
gsave
1004.54 477.205 mo
1011.54 477.205 li
1011.54 470.205 li
1004.54 470.205 li
1004.54 477.205 li
clp
1005.04 476.705 mo
1011.04 470.705 li
1005.04 470.705 mo
1011.04 476.705 li
f
1 lw
0 lc
1005.04 476.705 mo
1011.04 470.705 li
1005.04 470.705 mo
1011.04 476.705 li
@
grestore
gsave
1055.8 478.279 mo
1062.8 478.279 li
1062.8 471.279 li
1055.8 471.279 li
1055.8 478.279 li
clp
1056.3 477.779 mo
1062.3 471.779 li
1056.3 471.779 mo
1062.3 477.779 li
f
1 lw
0 lc
1056.3 477.779 mo
1062.3 471.779 li
1056.3 471.779 mo
1062.3 477.779 li
@
grestore
gsave
1107.06 477.971 mo
1114.06 477.971 li
1114.06 470.971 li
1107.06 470.971 li
1107.06 477.971 li
clp
1107.56 477.471 mo
1113.56 471.471 li
1107.56 471.471 mo
1113.56 477.471 li
f
1 lw
0 lc
1107.56 477.471 mo
1113.56 471.471 li
1107.56 471.471 mo
1113.56 477.471 li
@
grestore
136.597 472.639 mo
187.859 476.896 li
239.12 497.468 li
290.381 506.011 li
341.642 511.83 li
392.904 510.062 li
444.165 512.993 li
495.426 513.885 li
546.687 514.048 li
597.949 514.218 li
649.21 513.866 li
700.471 515.064 li
751.732 515.255 li
802.994 516.481 li
854.255 516.564 li
905.516 515.016 li
956.777 517.36 li
1008.04 516.968 li
1059.3 517.489 li
1110.56 516.707 li
@
gsave
136.097 476.139 mo
137.098 476.139 li
137.098 469.139 li
136.097 469.139 li
136.097 476.139 li
clp
136.597 475.639 mo
136.597 469.639 li
f
1 lw
0 lc
136.597 475.639 mo
136.597 469.639 li
@
grestore
gsave
187.359 480.396 mo
188.359 480.396 li
188.359 473.396 li
187.359 473.396 li
187.359 480.396 li
clp
187.859 479.896 mo
187.859 473.896 li
f
1 lw
0 lc
187.859 479.896 mo
187.859 473.896 li
@
grestore
gsave
238.62 500.968 mo
239.62 500.968 li
239.62 493.968 li
238.62 493.968 li
238.62 500.968 li
clp
239.12 500.468 mo
239.12 494.468 li
f
1 lw
0 lc
239.12 500.468 mo
239.12 494.468 li
@
grestore
gsave
289.881 509.511 mo
290.881 509.511 li
290.881 502.511 li
289.881 502.511 li
289.881 509.511 li
clp
290.381 509.011 mo
290.381 503.011 li
f
1 lw
0 lc
290.381 509.011 mo
290.381 503.011 li
@
grestore
gsave
341.143 515.33 mo
342.142 515.33 li
342.142 508.33 li
341.143 508.33 li
341.143 515.33 li
clp
341.642 514.83 mo
341.642 508.83 li
f
1 lw
0 lc
341.642 514.83 mo
341.642 508.83 li
@
grestore
gsave
392.404 513.563 mo
393.404 513.563 li
393.404 506.563 li
392.404 506.563 li
392.404 513.563 li
clp
392.904 513.062 mo
392.904 507.062 li
f
1 lw
0 lc
392.904 513.062 mo
392.904 507.062 li
@
grestore
gsave
443.665 516.493 mo
444.665 516.493 li
444.665 509.493 li
443.665 509.493 li
443.665 516.493 li
clp
444.165 515.993 mo
444.165 509.993 li
f
1 lw
0 lc
444.165 515.993 mo
444.165 509.993 li
@
grestore
gsave
494.926 517.385 mo
495.926 517.385 li
495.926 510.385 li
494.926 510.385 li
494.926 517.385 li
clp
495.426 516.885 mo
495.426 510.885 li
f
1 lw
0 lc
495.426 516.885 mo
495.426 510.885 li
@
grestore
gsave
546.187 517.549 mo
547.187 517.549 li
547.187 510.548 li
546.187 510.548 li
546.187 517.549 li
clp
546.687 517.048 mo
546.687 511.048 li
f
1 lw
0 lc
546.687 517.048 mo
546.687 511.048 li
@
grestore
gsave
597.448 517.718 mo
598.449 517.718 li
598.449 510.718 li
597.448 510.718 li
597.448 517.718 li
clp
597.949 517.218 mo
597.949 511.218 li
f
1 lw
0 lc
597.949 517.218 mo
597.949 511.218 li
@
grestore
gsave
648.71 517.366 mo
649.71 517.366 li
649.71 510.366 li
648.71 510.366 li
648.71 517.366 li
clp
649.21 516.866 mo
649.21 510.866 li
f
1 lw
0 lc
649.21 516.866 mo
649.21 510.866 li
@
grestore
gsave
699.971 518.564 mo
700.971 518.564 li
700.971 511.564 li
699.971 511.564 li
699.971 518.564 li
clp
700.471 518.064 mo
700.471 512.064 li
f
1 lw
0 lc
700.471 518.064 mo
700.471 512.064 li
@
grestore
gsave
751.232 518.755 mo
752.232 518.755 li
752.232 511.755 li
751.232 511.755 li
751.232 518.755 li
clp
751.732 518.255 mo
751.732 512.255 li
f
1 lw
0 lc
751.732 518.255 mo
751.732 512.255 li
@
grestore
gsave
802.494 519.981 mo
803.493 519.981 li
803.493 512.981 li
802.494 512.981 li
802.494 519.981 li
clp
802.993 519.481 mo
802.993 513.481 li
f
1 lw
0 lc
802.993 519.481 mo
802.993 513.481 li
@
grestore
gsave
853.755 520.064 mo
854.755 520.064 li
854.755 513.064 li
853.755 513.064 li
853.755 520.064 li
clp
854.255 519.564 mo
854.255 513.564 li
f
1 lw
0 lc
854.255 519.564 mo
854.255 513.564 li
@
grestore
gsave
905.016 518.516 mo
906.016 518.516 li
906.016 511.517 li
905.016 511.517 li
905.016 518.516 li
clp
905.516 518.016 mo
905.516 512.016 li
f
1 lw
0 lc
905.516 518.016 mo
905.516 512.016 li
@
grestore
gsave
956.277 520.86 mo
957.277 520.86 li
957.277 513.86 li
956.277 513.86 li
956.277 520.86 li
clp
956.777 520.36 mo
956.777 514.36 li
f
1 lw
0 lc
956.777 520.36 mo
956.777 514.36 li
@
grestore
gsave
1007.54 520.468 mo
1008.54 520.468 li
1008.54 513.468 li
1007.54 513.468 li
1007.54 520.468 li
clp
1008.04 519.968 mo
1008.04 513.968 li
f
1 lw
0 lc
1008.04 519.968 mo
1008.04 513.968 li
@
grestore
gsave
1058.8 520.989 mo
1059.8 520.989 li
1059.8 513.989 li
1058.8 513.989 li
1058.8 520.989 li
clp
1059.3 520.489 mo
1059.3 514.489 li
f
1 lw
0 lc
1059.3 520.489 mo
1059.3 514.489 li
@
grestore
gsave
1110.06 520.207 mo
1111.06 520.207 li
1111.06 513.207 li
1110.06 513.207 li
1110.06 520.207 li
clp
1110.56 519.707 mo
1110.56 513.707 li
f
1 lw
0 lc
1110.56 519.707 mo
1110.56 513.707 li
@
grestore
.8 lw
0 lj
87.8992 545.263 mo
87.8992 8.04919 li
@
1159.26 545.263 mo
1159.26 8.04919 li
@
87.8992 545.263 mo
1159.26 545.263 li
@
87.8992 8.04919 mo
1159.26 8.04919 li
@
gsave
1152.26 161.705 mo
971.228 161.705 li
970.638 161.704 970.291 161.561 970.081 161.352 cv
969.872 161.143 969.73 160.795 969.728 160.206 cv
969.728 15.0492 li
969.73 14.4591 969.872 14.112 970.081 13.9026 cv
970.291 13.6933 970.638 13.551 971.228 13.5493 cv
1152.26 13.5493 li
1152.85 13.551 1153.2 13.6933 1153.41 13.9026 cv
1153.62 14.112 1153.76 14.4595 1153.76 15.0492 cv
1153.76 160.206 li
1153.76 160.795 1153.62 161.143 1153.41 161.352 cv
1153.2 161.561 1152.85 161.704 1152.26 161.705 cv
clp
969.728 13.5493 mo
1153.76 13.5493 li
1153.76 161.705 li
969.728 161.705 li
cp
0 0 0 0 cmyk
f
grestore
1152.27 162.706 mo
1152.27 162.706 1152.26 162.706 1152.26 162.706 cv
971.228 162.706 li
971.225 162.706 971.221 162.706 971.218 162.706 cv
970.479 162.706 969.83 162.514 969.374 162.059 cv
968.917 161.602 968.726 160.949 968.728 160.206 cv
968.728 15.0492 li
968.726 14.3058 968.917 13.6531 969.374 13.1956 cv
969.83 12.7405 970.479 12.5492 971.218 12.5492 cv
971.221 12.5492 971.225 12.5492 971.228 12.5492 cv
1152.26 12.5492 li
1152.26 12.5492 1152.27 12.5492 1152.27 12.5492 cv
1153.01 12.5492 1153.66 12.7405 1154.11 13.1956 cv
1154.57 13.6531 1154.76 14.3058 1154.76 15.0492 cv
1154.76 160.206 li
1154.76 160.949 1154.57 161.602 1154.11 162.059 cv
1153.66 162.514 1153.01 162.706 1152.27 162.706 cv
971.228 161.705 mo
1152.26 161.705 li
1152.85 161.704 1153.2 161.561 1153.41 161.352 cv
1153.62 161.143 1153.76 160.795 1153.76 160.206 cv
1153.76 15.0492 li
1153.76 14.4595 1153.62 14.112 1153.41 13.9026 cv
1153.2 13.6933 1152.85 13.551 1152.26 13.5493 cv
971.228 13.5493 li
970.638 13.551 970.291 13.6933 970.081 13.9026 cv
969.872 14.112 969.73 14.4591 969.728 15.0492 cv
969.728 160.206 li
969.73 160.795 969.872 161.143 970.081 161.352 cv
970.291 161.561 970.638 161.704 971.228 161.705 cv
971.228 161.705 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
973.228 28.7523 mo
993.228 28.7523 li
0 1 1 0 cmyk
@
1005.17 19.2923 mo
1005.17 30.6323 li
1007.55 30.6323 li
1009.55 30.6323 1011.03 30.1923 1011.97 29.2723 cv
1012.89 28.3523 1013.37 26.9123 1013.37 24.9523 cv
1013.37 22.9923 1012.89 21.5723 1011.97 20.6523 cv
1011.03 19.7523 1009.55 19.2923 1007.55 19.2923 cv
1005.17 19.2923 li
1003.19 17.6723 mo
1007.25 17.6723 li
1010.07 17.6723 1012.15 18.2723 1013.47 19.4323 cv
1014.79 20.6123 1015.45 22.4523 1015.45 24.9523 cv
1015.45 27.4723 1014.77 29.3123 1013.45 30.4923 cv
1012.13 31.6723 1010.05 32.2523 1007.25 32.2523 cv
1003.19 32.2523 li
1003.19 17.6723 li
1 /0 /CSD get_res sepcs
1 sep
f
1020.57 25.2923 mo
1020.57 30.6323 li
1023.73 30.6323 li
1024.79 30.6323 1025.57 30.4123 1026.09 29.9723 cv
1026.59 29.5323 1026.85 28.8723 1026.85 27.9523 cv
1026.85 27.0523 1026.59 26.3923 1026.09 25.9523 cv
1025.57 25.5123 1024.79 25.2923 1023.73 25.2923 cv
1020.57 25.2923 li
1020.57 19.2923 mo
1020.57 23.6923 li
1023.49 23.6923 li
1024.45 23.6923 1025.15 23.5123 1025.63 23.1523 cv
1026.11 22.7923 1026.35 22.2523 1026.35 21.4923 cv
1026.35 20.7723 1026.11 20.2123 1025.63 19.8523 cv
1025.15 19.4923 1024.45 19.2923 1023.49 19.2923 cv
1020.57 19.2923 li
1018.59 17.6723 mo
1023.63 17.6723 li
1025.13 17.6723 1026.29 17.9923 1027.11 18.6123 cv
1027.91 19.2523 1028.33 20.1323 1028.33 21.2723 cv
1028.33 22.1723 1028.11 22.8923 1027.69 23.4123 cv
1027.27 23.9323 1026.67 24.2723 1025.87 24.3923 cv
1026.83 24.6123 1027.59 25.0523 1028.13 25.7123 cv
1028.65 26.3723 1028.93 27.1923 1028.93 28.1723 cv
1028.93 29.4923 1028.47 30.4923 1027.59 31.1923 cv
1026.71 31.9123 1025.45 32.2523 1023.83 32.2523 cv
1018.59 32.2523 li
1018.59 17.6723 li
f
1032.31 17.6723 mo
1034.97 17.6723 li
1041.43 29.8723 li
1041.43 17.6723 li
1043.35 17.6723 li
1043.35 32.2523 li
1040.69 32.2523 li
1034.23 20.0523 li
1034.23 32.2523 li
1032.31 32.2523 li
1032.31 17.6723 li
f
1057.87 17.0723 mo
1056.99 18.5923 1056.35 20.0723 1055.93 21.5323 cv
1055.49 22.9923 1055.29 24.4723 1055.29 25.9723 cv
1055.29 27.4923 1055.49 28.9723 1055.93 30.4323 cv
1056.35 31.9123 1056.99 33.3723 1057.87 34.8723 cv
1056.31 34.8723 li
1055.33 33.3323 1054.59 31.8523 1054.11 30.3723 cv
1053.63 28.8923 1053.39 27.4323 1053.39 25.9723 cv
1053.39 24.5323 1053.63 23.0723 1054.11 21.5923 cv
1054.59 20.1123 1055.31 18.6123 1056.31 17.0723 cv
1057.87 17.0723 li
f
1068.35 25.4123 mo
1068.77 25.5723 1069.19 25.8723 1069.59 26.3323 cv
1069.99 26.8123 1070.39 27.4523 1070.79 28.2723 cv
1072.79 32.2523 li
1070.67 32.2523 li
1068.81 28.5123 li
1068.33 27.5523 1067.85 26.8923 1067.41 26.5723 cv
1066.95 26.2523 1066.33 26.0923 1065.55 26.0923 cv
1063.41 26.0923 li
1063.41 32.2523 li
1061.43 32.2523 li
1061.43 17.6723 li
1065.89 17.6723 li
1067.55 17.6723 1068.79 18.0323 1069.61 18.7123 cv
1070.43 19.4123 1070.85 20.4723 1070.85 21.8723 cv
1070.85 22.7923 1070.63 23.5723 1070.21 24.1723 cv
1069.77 24.7723 1069.15 25.1923 1068.35 25.4123 cv
1063.41 19.2923 mo
1063.41 24.4723 li
1065.89 24.4723 li
1066.83 24.4723 1067.55 24.2523 1068.03 23.8123 cv
1068.51 23.3723 1068.77 22.7323 1068.77 21.8723 cv
1068.77 21.0323 1068.51 20.3923 1068.03 19.9523 cv
1067.55 19.5123 1066.83 19.2923 1065.89 19.2923 cv
1063.41 19.2923 li
f
1077.31 25.2923 mo
1077.31 30.6323 li
1080.47 30.6323 li
1081.53 30.6323 1082.31 30.4123 1082.83 29.9723 cv
1083.33 29.5323 1083.59 28.8723 1083.59 27.9523 cv
1083.59 27.0523 1083.33 26.3923 1082.83 25.9523 cv
1082.31 25.5123 1081.53 25.2923 1080.47 25.2923 cv
1077.31 25.2923 li
1077.31 19.2923 mo
1077.31 23.6923 li
1080.23 23.6923 li
1081.19 23.6923 1081.89 23.5123 1082.37 23.1523 cv
1082.85 22.7923 1083.09 22.2523 1083.09 21.4923 cv
1083.09 20.7723 1082.85 20.2123 1082.37 19.8523 cv
1081.89 19.4923 1081.19 19.2923 1080.23 19.2923 cv
1077.31 19.2923 li
1075.33 17.6723 mo
1080.37 17.6723 li
1081.87 17.6723 1083.03 17.9923 1083.85 18.6123 cv
1084.65 19.2523 1085.07 20.1323 1085.07 21.2723 cv
1085.07 22.1723 1084.85 22.8923 1084.43 23.4123 cv
1084.01 23.9323 1083.41 24.2723 1082.61 24.3923 cv
1083.57 24.6123 1084.33 25.0523 1084.87 25.7123 cv
1085.39 26.3723 1085.67 27.1923 1085.67 28.1723 cv
1085.67 29.4923 1085.21 30.4923 1084.33 31.1923 cv
1083.45 31.9123 1082.19 32.2523 1080.57 32.2523 cv
1075.33 32.2523 li
1075.33 17.6723 li
f
1089.05 17.6723 mo
1091.99 17.6723 li
1095.71 27.5923 li
1099.45 17.6723 li
1102.39 17.6723 li
1102.39 32.2523 li
1100.47 32.2523 li
1100.47 19.4523 li
1096.71 29.4523 li
1094.73 29.4523 li
1090.97 19.4523 li
1090.97 32.2523 li
1089.05 32.2523 li
1089.05 17.6723 li
f
1110.71 18.9723 mo
1109.69 18.9723 1108.93 19.4723 1108.41 20.4723 cv
1107.89 21.4723 1107.65 22.9723 1107.65 24.9723 cv
1107.65 26.9723 1107.89 28.4723 1108.41 29.4723 cv
1108.93 30.4723 1109.69 30.9723 1110.71 30.9723 cv
1111.73 30.9723 1112.49 30.4723 1113.01 29.4723 cv
1113.51 28.4723 1113.77 26.9723 1113.77 24.9723 cv
1113.77 22.9723 1113.51 21.4723 1113.01 20.4723 cv
1112.49 19.4723 1111.73 18.9723 1110.71 18.9723 cv
1110.71 17.4123 mo
1112.33 17.4123 1113.57 18.0723 1114.45 19.3523 cv
1115.31 20.6523 1115.75 22.5323 1115.75 24.9723 cv
1115.75 27.4323 1115.31 29.3123 1114.45 30.5923 cv
1113.57 31.8723 1112.33 32.5123 1110.71 32.5123 cv
1109.07 32.5123 1107.81 31.8723 1106.95 30.5923 cv
1106.09 29.3123 1105.67 27.4323 1105.67 24.9723 cv
1105.67 22.5323 1106.09 20.6523 1106.95 19.3523 cv
1107.81 18.0723 1109.07 17.4123 1110.71 17.4123 cv
f
1118.67 17.0723 mo
1120.23 17.0723 li
1121.19 18.6123 1121.93 20.1123 1122.41 21.5923 cv
1122.89 23.0723 1123.15 24.5323 1123.15 25.9723 cv
1123.15 27.4323 1122.89 28.8923 1122.41 30.3723 cv
1121.93 31.8523 1121.19 33.3323 1120.23 34.8723 cv
1118.67 34.8723 li
1119.53 33.3723 1120.17 31.9123 1120.61 30.4323 cv
1121.03 28.9723 1121.25 27.4923 1121.25 25.9723 cv
1121.25 24.4723 1121.03 22.9923 1120.61 21.5323 cv
1120.17 20.0723 1119.53 18.5923 1118.67 17.0723 cv
f
973.228 53.1117 mo
993.228 53.1117 li
0 1 1 0 cmyk
@
980.228 56.1117 mo
986.228 50.1117 li
980.228 50.1117 mo
986.228 56.1117 li
f
1 lw
0 lc
980.228 56.1117 mo
986.228 50.1117 li
980.228 50.1117 mo
986.228 56.1117 li
@
1005.17 43.6517 mo
1005.17 54.9917 li
1007.55 54.9917 li
1009.55 54.9917 1011.03 54.5517 1011.97 53.6317 cv
1012.89 52.7117 1013.37 51.2717 1013.37 49.3117 cv
1013.37 47.3517 1012.89 45.9317 1011.97 45.0117 cv
1011.03 44.1117 1009.55 43.6517 1007.55 43.6517 cv
1005.17 43.6517 li
1003.19 42.0317 mo
1007.25 42.0317 li
1010.07 42.0317 1012.15 42.6317 1013.47 43.7917 cv
1014.79 44.9717 1015.45 46.8117 1015.45 49.3117 cv
1015.45 51.8317 1014.77 53.6717 1013.45 54.8517 cv
1012.13 56.0317 1010.05 56.6117 1007.25 56.6117 cv
1003.19 56.6117 li
1003.19 42.0317 li
1 /0 /CSD get_res sepcs
1 sep
f
1020.57 49.6517 mo
1020.57 54.9917 li
1023.73 54.9917 li
1024.79 54.9917 1025.57 54.7717 1026.09 54.3317 cv
1026.59 53.8917 1026.85 53.2317 1026.85 52.3117 cv
1026.85 51.4117 1026.59 50.7517 1026.09 50.3117 cv
1025.57 49.8717 1024.79 49.6517 1023.73 49.6517 cv
1020.57 49.6517 li
1020.57 43.6517 mo
1020.57 48.0517 li
1023.49 48.0517 li
1024.45 48.0517 1025.15 47.8717 1025.63 47.5117 cv
1026.11 47.1517 1026.35 46.6117 1026.35 45.8517 cv
1026.35 45.1317 1026.11 44.5717 1025.63 44.2117 cv
1025.15 43.8517 1024.45 43.6517 1023.49 43.6517 cv
1020.57 43.6517 li
1018.59 42.0317 mo
1023.63 42.0317 li
1025.13 42.0317 1026.29 42.3517 1027.11 42.9717 cv
1027.91 43.6117 1028.33 44.4917 1028.33 45.6317 cv
1028.33 46.5317 1028.11 47.2517 1027.69 47.7717 cv
1027.27 48.2917 1026.67 48.6317 1025.87 48.7517 cv
1026.83 48.9717 1027.59 49.4117 1028.13 50.0717 cv
1028.65 50.7317 1028.93 51.5517 1028.93 52.5317 cv
1028.93 53.8517 1028.47 54.8517 1027.59 55.5517 cv
1026.71 56.2717 1025.45 56.6117 1023.83 56.6117 cv
1018.59 56.6117 li
1018.59 42.0317 li
f
1032.31 42.0317 mo
1034.97 42.0317 li
1041.43 54.2317 li
1041.43 42.0317 li
1043.35 42.0317 li
1043.35 56.6117 li
1040.69 56.6117 li
1034.23 44.4117 li
1034.23 56.6117 li
1032.31 56.6117 li
1032.31 42.0317 li
f
1057.87 41.4317 mo
1056.99 42.9517 1056.35 44.4317 1055.93 45.8917 cv
1055.49 47.3517 1055.29 48.8317 1055.29 50.3317 cv
1055.29 51.8517 1055.49 53.3317 1055.93 54.7917 cv
1056.35 56.2717 1056.99 57.7317 1057.87 59.2317 cv
1056.31 59.2317 li
1055.33 57.6917 1054.59 56.2117 1054.11 54.7317 cv
1053.63 53.2517 1053.39 51.7917 1053.39 50.3317 cv
1053.39 48.8917 1053.63 47.4317 1054.11 45.9517 cv
1054.59 44.4717 1055.31 42.9717 1056.31 41.4317 cv
1057.87 41.4317 li
f
1068.35 49.7717 mo
1068.77 49.9317 1069.19 50.2317 1069.59 50.6917 cv
1069.99 51.1717 1070.39 51.8117 1070.79 52.6317 cv
1072.79 56.6117 li
1070.67 56.6117 li
1068.81 52.8717 li
1068.33 51.9117 1067.85 51.2517 1067.41 50.9317 cv
1066.95 50.6117 1066.33 50.4517 1065.55 50.4517 cv
1063.41 50.4517 li
1063.41 56.6117 li
1061.43 56.6117 li
1061.43 42.0317 li
1065.89 42.0317 li
1067.55 42.0317 1068.79 42.3917 1069.61 43.0717 cv
1070.43 43.7717 1070.85 44.8317 1070.85 46.2317 cv
1070.85 47.1517 1070.63 47.9317 1070.21 48.5317 cv
1069.77 49.1317 1069.15 49.5517 1068.35 49.7717 cv
1063.41 43.6517 mo
1063.41 48.8317 li
1065.89 48.8317 li
1066.83 48.8317 1067.55 48.6117 1068.03 48.1717 cv
1068.51 47.7317 1068.77 47.0917 1068.77 46.2317 cv
1068.77 45.3917 1068.51 44.7517 1068.03 44.3117 cv
1067.55 43.8717 1066.83 43.6517 1065.89 43.6517 cv
1063.41 43.6517 li
f
1077.31 49.6517 mo
1077.31 54.9917 li
1080.47 54.9917 li
1081.53 54.9917 1082.31 54.7717 1082.83 54.3317 cv
1083.33 53.8917 1083.59 53.2317 1083.59 52.3117 cv
1083.59 51.4117 1083.33 50.7517 1082.83 50.3117 cv
1082.31 49.8717 1081.53 49.6517 1080.47 49.6517 cv
1077.31 49.6517 li
1077.31 43.6517 mo
1077.31 48.0517 li
1080.23 48.0517 li
1081.19 48.0517 1081.89 47.8717 1082.37 47.5117 cv
1082.85 47.1517 1083.09 46.6117 1083.09 45.8517 cv
1083.09 45.1317 1082.85 44.5717 1082.37 44.2117 cv
1081.89 43.8517 1081.19 43.6517 1080.23 43.6517 cv
1077.31 43.6517 li
1075.33 42.0317 mo
1080.37 42.0317 li
1081.87 42.0317 1083.03 42.3517 1083.85 42.9717 cv
1084.65 43.6117 1085.07 44.4917 1085.07 45.6317 cv
1085.07 46.5317 1084.85 47.2517 1084.43 47.7717 cv
1084.01 48.2917 1083.41 48.6317 1082.61 48.7517 cv
1083.57 48.9717 1084.33 49.4117 1084.87 50.0717 cv
1085.39 50.7317 1085.67 51.5517 1085.67 52.5317 cv
1085.67 53.8517 1085.21 54.8517 1084.33 55.5517 cv
1083.45 56.2717 1082.19 56.6117 1080.57 56.6117 cv
1075.33 56.6117 li
1075.33 42.0317 li
f
1089.05 42.0317 mo
1091.99 42.0317 li
1095.71 51.9517 li
1099.45 42.0317 li
1102.39 42.0317 li
1102.39 56.6117 li
1100.47 56.6117 li
1100.47 43.8117 li
1096.71 53.8117 li
1094.73 53.8117 li
1090.97 43.8117 li
1090.97 56.6117 li
1089.05 56.6117 li
1089.05 42.0317 li
f
1106.83 54.9517 mo
1110.05 54.9517 li
1110.05 43.8317 li
1106.55 44.5317 li
1106.55 42.7317 li
1110.03 42.0317 li
1112.01 42.0317 li
1112.01 54.9517 li
1115.23 54.9517 li
1115.23 56.6117 li
1106.83 56.6117 li
1106.83 54.9517 li
f
1118.67 41.4317 mo
1120.23 41.4317 li
1121.19 42.9717 1121.93 44.4717 1122.41 45.9517 cv
1122.89 47.4317 1123.15 48.8917 1123.15 50.3317 cv
1123.15 51.7917 1122.89 53.2517 1122.41 54.7317 cv
1121.93 56.2117 1121.19 57.6917 1120.23 59.2317 cv
1118.67 59.2317 li
1119.53 57.7317 1120.17 56.2717 1120.61 54.7917 cv
1121.03 53.3317 1121.25 51.8517 1121.25 50.3317 cv
1121.25 48.8317 1121.03 47.3517 1120.61 45.8917 cv
1120.17 44.4317 1119.53 42.9517 1118.67 41.4317 cv
f
1.5 lw
2 lc
973.228 77.4711 mo
993.228 77.4711 li
0 1 1 0 cmyk
@
983.228 80.4711 mo
983.228 74.4711 li
f
1 lw
0 lc
983.228 80.4711 mo
983.228 74.4711 li
@
1005.17 68.0111 mo
1005.17 79.3511 li
1007.55 79.3511 li
1009.55 79.3511 1011.03 78.9111 1011.97 77.9911 cv
1012.89 77.0711 1013.37 75.6311 1013.37 73.6711 cv
1013.37 71.7111 1012.89 70.2911 1011.97 69.3711 cv
1011.03 68.4711 1009.55 68.0111 1007.55 68.0111 cv
1005.17 68.0111 li
1003.19 66.3911 mo
1007.25 66.3911 li
1010.07 66.3911 1012.15 66.9911 1013.47 68.1511 cv
1014.79 69.3311 1015.45 71.1711 1015.45 73.6711 cv
1015.45 76.1911 1014.77 78.0311 1013.45 79.2111 cv
1012.13 80.3911 1010.05 80.9711 1007.25 80.9711 cv
1003.19 80.9711 li
1003.19 66.3911 li
1 /0 /CSD get_res sepcs
1 sep
f
1020.57 74.0111 mo
1020.57 79.3511 li
1023.73 79.3511 li
1024.79 79.3511 1025.57 79.1311 1026.09 78.6911 cv
1026.59 78.2511 1026.85 77.5911 1026.85 76.6711 cv
1026.85 75.7711 1026.59 75.1111 1026.09 74.6711 cv
1025.57 74.2311 1024.79 74.0111 1023.73 74.0111 cv
1020.57 74.0111 li
1020.57 68.0111 mo
1020.57 72.4111 li
1023.49 72.4111 li
1024.45 72.4111 1025.15 72.2311 1025.63 71.8711 cv
1026.11 71.5111 1026.35 70.9711 1026.35 70.2111 cv
1026.35 69.4911 1026.11 68.9311 1025.63 68.5711 cv
1025.15 68.2111 1024.45 68.0111 1023.49 68.0111 cv
1020.57 68.0111 li
1018.59 66.3911 mo
1023.63 66.3911 li
1025.13 66.3911 1026.29 66.7111 1027.11 67.3311 cv
1027.91 67.9711 1028.33 68.8511 1028.33 69.9911 cv
1028.33 70.8911 1028.11 71.6111 1027.69 72.1311 cv
1027.27 72.6511 1026.67 72.9911 1025.87 73.1111 cv
1026.83 73.3311 1027.59 73.7711 1028.13 74.4311 cv
1028.65 75.0911 1028.93 75.9111 1028.93 76.8911 cv
1028.93 78.2111 1028.47 79.2111 1027.59 79.9111 cv
1026.71 80.6311 1025.45 80.9711 1023.83 80.9711 cv
1018.59 80.9711 li
1018.59 66.3911 li
f
1032.31 66.3911 mo
1034.97 66.3911 li
1041.43 78.5911 li
1041.43 66.3911 li
1043.35 66.3911 li
1043.35 80.9711 li
1040.69 80.9711 li
1034.23 68.7711 li
1034.23 80.9711 li
1032.31 80.9711 li
1032.31 66.3911 li
f
1057.87 65.7911 mo
1056.99 67.3111 1056.35 68.7911 1055.93 70.2511 cv
1055.49 71.7111 1055.29 73.1911 1055.29 74.6911 cv
1055.29 76.2111 1055.49 77.6911 1055.93 79.1511 cv
1056.35 80.6311 1056.99 82.0911 1057.87 83.5911 cv
1056.31 83.5911 li
1055.33 82.0511 1054.59 80.5711 1054.11 79.0911 cv
1053.63 77.6111 1053.39 76.1511 1053.39 74.6911 cv
1053.39 73.2511 1053.63 71.7911 1054.11 70.3111 cv
1054.59 68.8311 1055.31 67.3311 1056.31 65.7911 cv
1057.87 65.7911 li
f
1068.35 74.1311 mo
1068.77 74.2911 1069.19 74.5911 1069.59 75.0511 cv
1069.99 75.5311 1070.39 76.1711 1070.79 76.9911 cv
1072.79 80.9711 li
1070.67 80.9711 li
1068.81 77.2311 li
1068.33 76.2711 1067.85 75.6111 1067.41 75.2911 cv
1066.95 74.9711 1066.33 74.8111 1065.55 74.8111 cv
1063.41 74.8111 li
1063.41 80.9711 li
1061.43 80.9711 li
1061.43 66.3911 li
1065.89 66.3911 li
1067.55 66.3911 1068.79 66.7511 1069.61 67.4311 cv
1070.43 68.1311 1070.85 69.1911 1070.85 70.5911 cv
1070.85 71.5111 1070.63 72.2911 1070.21 72.8911 cv
1069.77 73.4911 1069.15 73.9111 1068.35 74.1311 cv
1063.41 68.0111 mo
1063.41 73.1911 li
1065.89 73.1911 li
1066.83 73.1911 1067.55 72.9711 1068.03 72.5311 cv
1068.51 72.0911 1068.77 71.4511 1068.77 70.5911 cv
1068.77 69.7511 1068.51 69.1111 1068.03 68.6711 cv
1067.55 68.2311 1066.83 68.0111 1065.89 68.0111 cv
1063.41 68.0111 li
f
1077.31 74.0111 mo
1077.31 79.3511 li
1080.47 79.3511 li
1081.53 79.3511 1082.31 79.1311 1082.83 78.6911 cv
1083.33 78.2511 1083.59 77.5911 1083.59 76.6711 cv
1083.59 75.7711 1083.33 75.1111 1082.83 74.6711 cv
1082.31 74.2311 1081.53 74.0111 1080.47 74.0111 cv
1077.31 74.0111 li
1077.31 68.0111 mo
1077.31 72.4111 li
1080.23 72.4111 li
1081.19 72.4111 1081.89 72.2311 1082.37 71.8711 cv
1082.85 71.5111 1083.09 70.9711 1083.09 70.2111 cv
1083.09 69.4911 1082.85 68.9311 1082.37 68.5711 cv
1081.89 68.2111 1081.19 68.0111 1080.23 68.0111 cv
1077.31 68.0111 li
1075.33 66.3911 mo
1080.37 66.3911 li
1081.87 66.3911 1083.03 66.7111 1083.85 67.3311 cv
1084.65 67.9711 1085.07 68.8511 1085.07 69.9911 cv
1085.07 70.8911 1084.85 71.6111 1084.43 72.1311 cv
1084.01 72.6511 1083.41 72.9911 1082.61 73.1111 cv
1083.57 73.3311 1084.33 73.7711 1084.87 74.4311 cv
1085.39 75.0911 1085.67 75.9111 1085.67 76.8911 cv
1085.67 78.2111 1085.21 79.2111 1084.33 79.9111 cv
1083.45 80.6311 1082.19 80.9711 1080.57 80.9711 cv
1075.33 80.9711 li
1075.33 66.3911 li
f
1089.05 66.3911 mo
1091.99 66.3911 li
1095.71 76.3111 li
1099.45 66.3911 li
1102.39 66.3911 li
1102.39 80.9711 li
1100.47 80.9711 li
1100.47 68.1711 li
1096.71 78.1711 li
1094.73 78.1711 li
1090.97 68.1711 li
1090.97 80.9711 li
1089.05 80.9711 li
1089.05 66.3911 li
f
1108.19 79.3111 mo
1115.07 79.3111 li
1115.07 80.9711 li
1105.81 80.9711 li
1105.81 79.3111 li
1106.55 78.5511 1107.57 77.5111 1108.87 76.1911 cv
1110.15 74.8911 1110.97 74.0511 1111.31 73.6711 cv
1111.95 72.9711 1112.39 72.3711 1112.63 71.8711 cv
1112.87 71.3911 1113.01 70.8911 1113.01 70.4111 cv
1113.01 69.6511 1112.73 69.0111 1112.19 68.5311 cv
1111.65 68.0511 1110.95 67.7911 1110.07 67.7911 cv
1109.45 67.7911 1108.79 67.9111 1108.11 68.1111 cv
1107.43 68.3311 1106.69 68.6511 1105.91 69.0911 cv
1105.91 67.0911 li
1106.71 66.7711 1107.45 66.5311 1108.13 66.3711 cv
1108.81 66.2111 1109.45 66.1311 1110.03 66.1311 cv
1111.53 66.1311 1112.73 66.5111 1113.63 67.2711 cv
1114.53 68.0311 1114.99 69.0311 1114.99 70.2911 cv
1114.99 70.8911 1114.87 71.4711 1114.65 71.9911 cv
1114.43 72.5311 1114.03 73.1711 1113.43 73.8911 cv
1113.27 74.0911 1112.75 74.6311 1111.87 75.5311 cv
1110.99 76.4311 1109.77 77.6911 1108.19 79.3111 cv
f
1118.67 65.7911 mo
1120.23 65.7911 li
1121.19 67.3311 1121.93 68.8311 1122.41 70.3111 cv
1122.89 71.7911 1123.15 73.2511 1123.15 74.6911 cv
1123.15 76.1511 1122.89 77.6111 1122.41 79.0911 cv
1121.93 80.5711 1121.19 82.0511 1120.23 83.5911 cv
1118.67 83.5911 li
1119.53 82.0911 1120.17 80.6311 1120.61 79.1511 cv
1121.03 77.6911 1121.25 76.2111 1121.25 74.6911 cv
1121.25 73.1911 1121.03 71.7111 1120.61 70.2511 cv
1120.17 68.7911 1119.53 67.3111 1118.67 65.7911 cv
f
1.5 lw
2 lc
973.228 101.83 mo
993.228 101.83 li
@
1011.93 91.2304 mo
1011.93 93.1504 li
1011.17 92.7904 1010.47 92.5304 1009.81 92.3504 cv
1009.13 92.1904 1008.49 92.0904 1007.89 92.0904 cv
1006.81 92.0904 1005.97 92.3104 1005.39 92.7104 cv
1004.81 93.1304 1004.53 93.7304 1004.53 94.4904 cv
1004.53 95.1304 1004.71 95.6304 1005.11 95.9504 cv
1005.49 96.2904 1006.23 96.5504 1007.31 96.7504 cv
1008.51 96.9904 li
1009.97 97.2704 1011.05 97.7704 1011.75 98.4704 cv
1012.45 99.1904 1012.81 100.13 1012.81 101.31 cv
1012.81 102.73 1012.33 103.79 1011.39 104.51 cv
1010.43 105.23 1009.05 105.59 1007.23 105.59 cv
1006.53 105.59 1005.79 105.51 1005.01 105.37 cv
1004.23 105.23 1003.43 105.01 1002.61 104.69 cv
1002.61 102.65 li
1003.41 103.11 1004.19 103.45 1004.95 103.67 cv
1005.71 103.91 1006.47 104.01 1007.23 104.01 cv
1008.35 104.01 1009.21 103.79 1009.83 103.35 cv
1010.43 102.91 1010.75 102.29 1010.75 101.45 cv
1010.75 100.73 1010.53 100.17 1010.09 99.7704 cv
1009.65 99.3704 1008.93 99.0704 1007.93 98.8704 cv
1006.73 98.6304 li
1005.25 98.3504 1004.19 97.8904 1003.53 97.2504 cv
1002.87 96.6304 1002.55 95.7704 1002.55 94.6504 cv
1002.55 93.3704 1002.99 92.3504 1003.91 91.6104 cv
1004.81 90.8704 1006.07 90.4904 1007.67 90.4904 cv
1008.35 90.4904 1009.03 90.5504 1009.75 90.6704 cv
1010.45 90.7904 1011.17 90.9904 1011.93 91.2304 cv
f
1024.63 91.2304 mo
1024.63 93.1504 li
1023.87 92.7904 1023.17 92.5304 1022.51 92.3504 cv
1021.83 92.1904 1021.19 92.0904 1020.59 92.0904 cv
1019.51 92.0904 1018.67 92.3104 1018.09 92.7104 cv
1017.51 93.1304 1017.23 93.7304 1017.23 94.4904 cv
1017.23 95.1304 1017.41 95.6304 1017.81 95.9504 cv
1018.19 96.2904 1018.93 96.5504 1020.01 96.7504 cv
1021.21 96.9904 li
1022.67 97.2704 1023.75 97.7704 1024.45 98.4704 cv
1025.15 99.1904 1025.51 100.13 1025.51 101.31 cv
1025.51 102.73 1025.03 103.79 1024.09 104.51 cv
1023.13 105.23 1021.75 105.59 1019.93 105.59 cv
1019.23 105.59 1018.49 105.51 1017.71 105.37 cv
1016.93 105.23 1016.13 105.01 1015.31 104.69 cv
1015.31 102.65 li
1016.11 103.11 1016.89 103.45 1017.65 103.67 cv
1018.41 103.91 1019.17 104.01 1019.93 104.01 cv
1021.05 104.01 1021.91 103.79 1022.53 103.35 cv
1023.13 102.91 1023.45 102.29 1023.45 101.45 cv
1023.45 100.73 1023.23 100.17 1022.79 99.7704 cv
1022.35 99.3704 1021.63 99.0704 1020.63 98.8704 cv
1019.43 98.6304 li
1017.95 98.3504 1016.89 97.8904 1016.23 97.2504 cv
1015.57 96.6304 1015.25 95.7704 1015.25 94.6504 cv
1015.25 93.3704 1015.69 92.3504 1016.61 91.6104 cv
1017.51 90.8704 1018.77 90.4904 1020.37 90.4904 cv
1021.05 90.4904 1021.73 90.5504 1022.45 90.6704 cv
1023.15 90.7904 1023.87 90.9904 1024.63 91.2304 cv
f
1030.57 92.3704 mo
1030.57 103.71 li
1032.95 103.71 li
1034.95 103.71 1036.43 103.27 1037.37 102.35 cv
1038.29 101.43 1038.77 99.9904 1038.77 98.0304 cv
1038.77 96.0704 1038.29 94.6504 1037.37 93.7304 cv
1036.43 92.8304 1034.95 92.3704 1032.95 92.3704 cv
1030.57 92.3704 li
1028.59 90.7504 mo
1032.65 90.7504 li
1035.47 90.7504 1037.55 91.3504 1038.87 92.5104 cv
1040.19 93.6904 1040.85 95.5304 1040.85 98.0304 cv
1040.85 100.55 1040.17 102.39 1038.85 103.57 cv
1037.53 104.75 1035.45 105.33 1032.65 105.33 cv
1028.59 105.33 li
1028.59 90.7504 li
f
1045.97 98.3704 mo
1045.97 103.71 li
1049.13 103.71 li
1050.19 103.71 1050.97 103.49 1051.49 103.05 cv
1051.99 102.61 1052.25 101.95 1052.25 101.03 cv
1052.25 100.13 1051.99 99.4704 1051.49 99.0304 cv
1050.97 98.5904 1050.19 98.3704 1049.13 98.3704 cv
1045.97 98.3704 li
1045.97 92.3704 mo
1045.97 96.7704 li
1048.89 96.7704 li
1049.85 96.7704 1050.55 96.5904 1051.03 96.2304 cv
1051.51 95.8704 1051.75 95.3304 1051.75 94.5704 cv
1051.75 93.8504 1051.51 93.2904 1051.03 92.9304 cv
1050.55 92.5704 1049.85 92.3704 1048.89 92.3704 cv
1045.97 92.3704 li
1043.99 90.7504 mo
1049.03 90.7504 li
1050.53 90.7504 1051.69 91.0704 1052.51 91.6904 cv
1053.31 92.3304 1053.73 93.2104 1053.73 94.3504 cv
1053.73 95.2504 1053.51 95.9704 1053.09 96.4904 cv
1052.67 97.0104 1052.07 97.3504 1051.27 97.4704 cv
1052.23 97.6904 1052.99 98.1304 1053.53 98.7904 cv
1054.05 99.4504 1054.33 100.27 1054.33 101.25 cv
1054.33 102.57 1053.87 103.57 1052.99 104.27 cv
1052.11 104.99 1050.85 105.33 1049.23 105.33 cv
1043.99 105.33 li
1043.99 90.7504 li
f
1057.71 90.7504 mo
1060.37 90.7504 li
1066.83 102.95 li
1066.83 90.7504 li
1068.75 90.7504 li
1068.75 105.33 li
1066.09 105.33 li
1059.63 93.1304 li
1059.63 105.33 li
1057.71 105.33 li
1057.71 90.7504 li
f
1083.27 90.1504 mo
1082.39 91.6704 1081.75 93.1504 1081.33 94.6104 cv
1080.89 96.0704 1080.69 97.5504 1080.69 99.0504 cv
1080.69 100.57 1080.89 102.05 1081.33 103.51 cv
1081.75 104.99 1082.39 106.45 1083.27 107.95 cv
1081.71 107.95 li
1080.73 106.41 1079.99 104.93 1079.51 103.45 cv
1079.03 101.97 1078.79 100.51 1078.79 99.0504 cv
1078.79 97.6104 1079.03 96.1504 1079.51 94.6704 cv
1079.99 93.1904 1080.71 91.6904 1081.71 90.1504 cv
1083.27 90.1504 li
f
1093.75 98.4904 mo
1094.17 98.6504 1094.59 98.9504 1094.99 99.4104 cv
1095.39 99.8904 1095.79 100.53 1096.19 101.35 cv
1098.19 105.33 li
1096.07 105.33 li
1094.21 101.59 li
1093.73 100.63 1093.25 99.9704 1092.81 99.6504 cv
1092.35 99.3304 1091.73 99.1704 1090.95 99.1704 cv
1088.81 99.1704 li
1088.81 105.33 li
1086.83 105.33 li
1086.83 90.7504 li
1091.29 90.7504 li
1092.95 90.7504 1094.19 91.1104 1095.01 91.7904 cv
1095.83 92.4904 1096.25 93.5504 1096.25 94.9504 cv
1096.25 95.8704 1096.03 96.6504 1095.61 97.2504 cv
1095.17 97.8504 1094.55 98.2704 1093.75 98.4904 cv
1088.81 92.3704 mo
1088.81 97.5504 li
1091.29 97.5504 li
1092.23 97.5504 1092.95 97.3304 1093.43 96.8904 cv
1093.91 96.4504 1094.17 95.8104 1094.17 94.9504 cv
1094.17 94.1104 1093.91 93.4704 1093.43 93.0304 cv
1092.95 92.5904 1092.23 92.3704 1091.29 92.3704 cv
1088.81 92.3704 li
f
1102.71 98.3704 mo
1102.71 103.71 li
1105.87 103.71 li
1106.93 103.71 1107.71 103.49 1108.23 103.05 cv
1108.73 102.61 1108.99 101.95 1108.99 101.03 cv
1108.99 100.13 1108.73 99.4704 1108.23 99.0304 cv
1107.71 98.5904 1106.93 98.3704 1105.87 98.3704 cv
1102.71 98.3704 li
1102.71 92.3704 mo
1102.71 96.7704 li
1105.63 96.7704 li
1106.59 96.7704 1107.29 96.5904 1107.77 96.2304 cv
1108.25 95.8704 1108.49 95.3304 1108.49 94.5704 cv
1108.49 93.8504 1108.25 93.2904 1107.77 92.9304 cv
1107.29 92.5704 1106.59 92.3704 1105.63 92.3704 cv
1102.71 92.3704 li
1100.73 90.7504 mo
1105.77 90.7504 li
1107.27 90.7504 1108.43 91.0704 1109.25 91.6904 cv
1110.05 92.3304 1110.47 93.2104 1110.47 94.3504 cv
1110.47 95.2504 1110.25 95.9704 1109.83 96.4904 cv
1109.41 97.0104 1108.81 97.3504 1108.01 97.4704 cv
1108.97 97.6904 1109.73 98.1304 1110.27 98.7904 cv
1110.79 99.4504 1111.07 100.27 1111.07 101.25 cv
1111.07 102.57 1110.61 103.57 1109.73 104.27 cv
1108.85 104.99 1107.59 105.33 1105.97 105.33 cv
1100.73 105.33 li
1100.73 90.7504 li
f
1114.45 90.7504 mo
1117.39 90.7504 li
1121.11 100.67 li
1124.85 90.7504 li
1127.79 90.7504 li
1127.79 105.33 li
1125.87 105.33 li
1125.87 92.5304 li
1122.11 102.53 li
1120.13 102.53 li
1116.37 92.5304 li
1116.37 105.33 li
1114.45 105.33 li
1114.45 90.7504 li
f
1136.11 92.0504 mo
1135.09 92.0504 1134.33 92.5504 1133.81 93.5504 cv
1133.29 94.5504 1133.05 96.0504 1133.05 98.0504 cv
1133.05 100.05 1133.29 101.55 1133.81 102.55 cv
1134.33 103.55 1135.09 104.05 1136.11 104.05 cv
1137.13 104.05 1137.89 103.55 1138.41 102.55 cv
1138.91 101.55 1139.17 100.05 1139.17 98.0504 cv
1139.17 96.0504 1138.91 94.5504 1138.41 93.5504 cv
1137.89 92.5504 1137.13 92.0504 1136.11 92.0504 cv
1136.11 90.4904 mo
1137.73 90.4904 1138.97 91.1504 1139.85 92.4304 cv
1140.71 93.7304 1141.15 95.6104 1141.15 98.0504 cv
1141.15 100.51 1140.71 102.39 1139.85 103.67 cv
1138.97 104.95 1137.73 105.59 1136.11 105.59 cv
1134.47 105.59 1133.21 104.95 1132.35 103.67 cv
1131.49 102.39 1131.07 100.51 1131.07 98.0504 cv
1131.07 95.6104 1131.49 93.7304 1132.35 92.4304 cv
1133.21 91.1504 1134.47 90.4904 1136.11 90.4904 cv
f
1144.07 90.1504 mo
1145.63 90.1504 li
1146.59 91.6904 1147.33 93.1904 1147.81 94.6704 cv
1148.29 96.1504 1148.55 97.6104 1148.55 99.0504 cv
1148.55 100.51 1148.29 101.97 1147.81 103.45 cv
1147.33 104.93 1146.59 106.41 1145.63 107.95 cv
1144.07 107.95 li
1144.93 106.45 1145.57 104.99 1146.01 103.51 cv
1146.43 102.05 1146.65 100.57 1146.65 99.0504 cv
1146.65 97.5504 1146.43 96.0704 1146.01 94.6104 cv
1145.57 93.1504 1144.93 91.6704 1144.07 90.1504 cv
f
973.228 126.19 mo
993.228 126.19 li
@
980.228 129.19 mo
986.228 123.19 li
980.228 123.19 mo
986.228 129.19 li
f
1 lw
0 lc
980.228 129.19 mo
986.228 123.19 li
980.228 123.19 mo
986.228 129.19 li
@
1011.93 115.59 mo
1011.93 117.51 li
1011.17 117.15 1010.47 116.89 1009.81 116.71 cv
1009.13 116.55 1008.49 116.45 1007.89 116.45 cv
1006.81 116.45 1005.97 116.67 1005.39 117.07 cv
1004.81 117.49 1004.53 118.09 1004.53 118.85 cv
1004.53 119.49 1004.71 119.99 1005.11 120.31 cv
1005.49 120.65 1006.23 120.91 1007.31 121.11 cv
1008.51 121.35 li
1009.97 121.63 1011.05 122.13 1011.75 122.83 cv
1012.45 123.55 1012.81 124.49 1012.81 125.67 cv
1012.81 127.09 1012.33 128.15 1011.39 128.87 cv
1010.43 129.59 1009.05 129.95 1007.23 129.95 cv
1006.53 129.95 1005.79 129.87 1005.01 129.73 cv
1004.23 129.59 1003.43 129.37 1002.61 129.05 cv
1002.61 127.01 li
1003.41 127.47 1004.19 127.81 1004.95 128.03 cv
1005.71 128.27 1006.47 128.37 1007.23 128.37 cv
1008.35 128.37 1009.21 128.15 1009.83 127.71 cv
1010.43 127.27 1010.75 126.65 1010.75 125.81 cv
1010.75 125.09 1010.53 124.53 1010.09 124.13 cv
1009.65 123.73 1008.93 123.43 1007.93 123.23 cv
1006.73 122.99 li
1005.25 122.71 1004.19 122.25 1003.53 121.61 cv
1002.87 120.99 1002.55 120.13 1002.55 119.01 cv
1002.55 117.73 1002.99 116.71 1003.91 115.97 cv
1004.81 115.23 1006.07 114.85 1007.67 114.85 cv
1008.35 114.85 1009.03 114.91 1009.75 115.03 cv
1010.45 115.15 1011.17 115.35 1011.93 115.59 cv
f
1024.63 115.59 mo
1024.63 117.51 li
1023.87 117.15 1023.17 116.89 1022.51 116.71 cv
1021.83 116.55 1021.19 116.45 1020.59 116.45 cv
1019.51 116.45 1018.67 116.67 1018.09 117.07 cv
1017.51 117.49 1017.23 118.09 1017.23 118.85 cv
1017.23 119.49 1017.41 119.99 1017.81 120.31 cv
1018.19 120.65 1018.93 120.91 1020.01 121.11 cv
1021.21 121.35 li
1022.67 121.63 1023.75 122.13 1024.45 122.83 cv
1025.15 123.55 1025.51 124.49 1025.51 125.67 cv
1025.51 127.09 1025.03 128.15 1024.09 128.87 cv
1023.13 129.59 1021.75 129.95 1019.93 129.95 cv
1019.23 129.95 1018.49 129.87 1017.71 129.73 cv
1016.93 129.59 1016.13 129.37 1015.31 129.05 cv
1015.31 127.01 li
1016.11 127.47 1016.89 127.81 1017.65 128.03 cv
1018.41 128.27 1019.17 128.37 1019.93 128.37 cv
1021.05 128.37 1021.91 128.15 1022.53 127.71 cv
1023.13 127.27 1023.45 126.65 1023.45 125.81 cv
1023.45 125.09 1023.23 124.53 1022.79 124.13 cv
1022.35 123.73 1021.63 123.43 1020.63 123.23 cv
1019.43 122.99 li
1017.95 122.71 1016.89 122.25 1016.23 121.61 cv
1015.57 120.99 1015.25 120.13 1015.25 119.01 cv
1015.25 117.73 1015.69 116.71 1016.61 115.97 cv
1017.51 115.23 1018.77 114.85 1020.37 114.85 cv
1021.05 114.85 1021.73 114.91 1022.45 115.03 cv
1023.15 115.15 1023.87 115.35 1024.63 115.59 cv
f
1030.57 116.73 mo
1030.57 128.07 li
1032.95 128.07 li
1034.95 128.07 1036.43 127.63 1037.37 126.71 cv
1038.29 125.79 1038.77 124.35 1038.77 122.39 cv
1038.77 120.43 1038.29 119.01 1037.37 118.09 cv
1036.43 117.19 1034.95 116.73 1032.95 116.73 cv
1030.57 116.73 li
1028.59 115.11 mo
1032.65 115.11 li
1035.47 115.11 1037.55 115.71 1038.87 116.87 cv
1040.19 118.05 1040.85 119.89 1040.85 122.39 cv
1040.85 124.91 1040.17 126.75 1038.85 127.93 cv
1037.53 129.11 1035.45 129.69 1032.65 129.69 cv
1028.59 129.69 li
1028.59 115.11 li
f
1045.97 122.73 mo
1045.97 128.07 li
1049.13 128.07 li
1050.19 128.07 1050.97 127.85 1051.49 127.41 cv
1051.99 126.97 1052.25 126.31 1052.25 125.39 cv
1052.25 124.49 1051.99 123.83 1051.49 123.39 cv
1050.97 122.95 1050.19 122.73 1049.13 122.73 cv
1045.97 122.73 li
1045.97 116.73 mo
1045.97 121.13 li
1048.89 121.13 li
1049.85 121.13 1050.55 120.95 1051.03 120.59 cv
1051.51 120.23 1051.75 119.69 1051.75 118.93 cv
1051.75 118.21 1051.51 117.65 1051.03 117.29 cv
1050.55 116.93 1049.85 116.73 1048.89 116.73 cv
1045.97 116.73 li
1043.99 115.11 mo
1049.03 115.11 li
1050.53 115.11 1051.69 115.43 1052.51 116.05 cv
1053.31 116.69 1053.73 117.57 1053.73 118.71 cv
1053.73 119.61 1053.51 120.33 1053.09 120.85 cv
1052.67 121.37 1052.07 121.71 1051.27 121.83 cv
1052.23 122.05 1052.99 122.49 1053.53 123.15 cv
1054.05 123.81 1054.33 124.63 1054.33 125.61 cv
1054.33 126.93 1053.87 127.93 1052.99 128.63 cv
1052.11 129.35 1050.85 129.69 1049.23 129.69 cv
1043.99 129.69 li
1043.99 115.11 li
f
1057.71 115.11 mo
1060.37 115.11 li
1066.83 127.31 li
1066.83 115.11 li
1068.75 115.11 li
1068.75 129.69 li
1066.09 129.69 li
1059.63 117.49 li
1059.63 129.69 li
1057.71 129.69 li
1057.71 115.11 li
f
1083.27 114.51 mo
1082.39 116.03 1081.75 117.51 1081.33 118.97 cv
1080.89 120.43 1080.69 121.91 1080.69 123.41 cv
1080.69 124.93 1080.89 126.41 1081.33 127.87 cv
1081.75 129.35 1082.39 130.81 1083.27 132.31 cv
1081.71 132.31 li
1080.73 130.77 1079.99 129.29 1079.51 127.81 cv
1079.03 126.33 1078.79 124.87 1078.79 123.41 cv
1078.79 121.97 1079.03 120.51 1079.51 119.03 cv
1079.99 117.55 1080.71 116.05 1081.71 114.51 cv
1083.27 114.51 li
f
1093.75 122.85 mo
1094.17 123.01 1094.59 123.31 1094.99 123.77 cv
1095.39 124.25 1095.79 124.89 1096.19 125.71 cv
1098.19 129.69 li
1096.07 129.69 li
1094.21 125.95 li
1093.73 124.99 1093.25 124.33 1092.81 124.01 cv
1092.35 123.69 1091.73 123.53 1090.95 123.53 cv
1088.81 123.53 li
1088.81 129.69 li
1086.83 129.69 li
1086.83 115.11 li
1091.29 115.11 li
1092.95 115.11 1094.19 115.47 1095.01 116.15 cv
1095.83 116.85 1096.25 117.91 1096.25 119.31 cv
1096.25 120.23 1096.03 121.01 1095.61 121.61 cv
1095.17 122.21 1094.55 122.63 1093.75 122.85 cv
1088.81 116.73 mo
1088.81 121.91 li
1091.29 121.91 li
1092.23 121.91 1092.95 121.69 1093.43 121.25 cv
1093.91 120.81 1094.17 120.17 1094.17 119.31 cv
1094.17 118.47 1093.91 117.83 1093.43 117.39 cv
1092.95 116.95 1092.23 116.73 1091.29 116.73 cv
1088.81 116.73 li
f
1102.71 122.73 mo
1102.71 128.07 li
1105.87 128.07 li
1106.93 128.07 1107.71 127.85 1108.23 127.41 cv
1108.73 126.97 1108.99 126.31 1108.99 125.39 cv
1108.99 124.49 1108.73 123.83 1108.23 123.39 cv
1107.71 122.95 1106.93 122.73 1105.87 122.73 cv
1102.71 122.73 li
1102.71 116.73 mo
1102.71 121.13 li
1105.63 121.13 li
1106.59 121.13 1107.29 120.95 1107.77 120.59 cv
1108.25 120.23 1108.49 119.69 1108.49 118.93 cv
1108.49 118.21 1108.25 117.65 1107.77 117.29 cv
1107.29 116.93 1106.59 116.73 1105.63 116.73 cv
1102.71 116.73 li
1100.73 115.11 mo
1105.77 115.11 li
1107.27 115.11 1108.43 115.43 1109.25 116.05 cv
1110.05 116.69 1110.47 117.57 1110.47 118.71 cv
1110.47 119.61 1110.25 120.33 1109.83 120.85 cv
1109.41 121.37 1108.81 121.71 1108.01 121.83 cv
1108.97 122.05 1109.73 122.49 1110.27 123.15 cv
1110.79 123.81 1111.07 124.63 1111.07 125.61 cv
1111.07 126.93 1110.61 127.93 1109.73 128.63 cv
1108.85 129.35 1107.59 129.69 1105.97 129.69 cv
1100.73 129.69 li
1100.73 115.11 li
f
1114.45 115.11 mo
1117.39 115.11 li
1121.11 125.03 li
1124.85 115.11 li
1127.79 115.11 li
1127.79 129.69 li
1125.87 129.69 li
1125.87 116.89 li
1122.11 126.89 li
1120.13 126.89 li
1116.37 116.89 li
1116.37 129.69 li
1114.45 129.69 li
1114.45 115.11 li
f
1132.23 128.03 mo
1135.45 128.03 li
1135.45 116.91 li
1131.95 117.61 li
1131.95 115.81 li
1135.43 115.11 li
1137.41 115.11 li
1137.41 128.03 li
1140.63 128.03 li
1140.63 129.69 li
1132.23 129.69 li
1132.23 128.03 li
f
1144.07 114.51 mo
1145.63 114.51 li
1146.59 116.05 1147.33 117.55 1147.81 119.03 cv
1148.29 120.51 1148.55 121.97 1148.55 123.41 cv
1148.55 124.87 1148.29 126.33 1147.81 127.81 cv
1147.33 129.29 1146.59 130.77 1145.63 132.31 cv
1144.07 132.31 li
1144.93 130.81 1145.57 129.35 1146.01 127.87 cv
1146.43 126.41 1146.65 124.93 1146.65 123.41 cv
1146.65 121.91 1146.43 120.43 1146.01 118.97 cv
1145.57 117.51 1144.93 116.03 1144.07 114.51 cv
f
1.5 lw
2 lc
973.228 150.549 mo
993.228 150.549 li
@
983.228 153.549 mo
983.228 147.549 li
f
1 lw
0 lc
983.228 153.549 mo
983.228 147.549 li
@
1011.93 139.949 mo
1011.93 141.869 li
1011.17 141.509 1010.47 141.249 1009.81 141.069 cv
1009.13 140.909 1008.49 140.809 1007.89 140.809 cv
1006.81 140.809 1005.97 141.029 1005.39 141.429 cv
1004.81 141.849 1004.53 142.449 1004.53 143.209 cv
1004.53 143.849 1004.71 144.349 1005.11 144.669 cv
1005.49 145.009 1006.23 145.269 1007.31 145.469 cv
1008.51 145.709 li
1009.97 145.989 1011.05 146.489 1011.75 147.189 cv
1012.45 147.909 1012.81 148.849 1012.81 150.029 cv
1012.81 151.449 1012.33 152.509 1011.39 153.229 cv
1010.43 153.949 1009.05 154.309 1007.23 154.309 cv
1006.53 154.309 1005.79 154.229 1005.01 154.089 cv
1004.23 153.949 1003.43 153.729 1002.61 153.409 cv
1002.61 151.369 li
1003.41 151.829 1004.19 152.169 1004.95 152.389 cv
1005.71 152.629 1006.47 152.729 1007.23 152.729 cv
1008.35 152.729 1009.21 152.509 1009.83 152.069 cv
1010.43 151.629 1010.75 151.009 1010.75 150.169 cv
1010.75 149.449 1010.53 148.889 1010.09 148.489 cv
1009.65 148.089 1008.93 147.789 1007.93 147.589 cv
1006.73 147.349 li
1005.25 147.069 1004.19 146.609 1003.53 145.969 cv
1002.87 145.349 1002.55 144.489 1002.55 143.369 cv
1002.55 142.089 1002.99 141.069 1003.91 140.329 cv
1004.81 139.589 1006.07 139.209 1007.67 139.209 cv
1008.35 139.209 1009.03 139.269 1009.75 139.389 cv
1010.45 139.509 1011.17 139.709 1011.93 139.949 cv
f
1024.63 139.949 mo
1024.63 141.869 li
1023.87 141.509 1023.17 141.249 1022.51 141.069 cv
1021.83 140.909 1021.19 140.809 1020.59 140.809 cv
1019.51 140.809 1018.67 141.029 1018.09 141.429 cv
1017.51 141.849 1017.23 142.449 1017.23 143.209 cv
1017.23 143.849 1017.41 144.349 1017.81 144.669 cv
1018.19 145.009 1018.93 145.269 1020.01 145.469 cv
1021.21 145.709 li
1022.67 145.989 1023.75 146.489 1024.45 147.189 cv
1025.15 147.909 1025.51 148.849 1025.51 150.029 cv
1025.51 151.449 1025.03 152.509 1024.09 153.229 cv
1023.13 153.949 1021.75 154.309 1019.93 154.309 cv
1019.23 154.309 1018.49 154.229 1017.71 154.089 cv
1016.93 153.949 1016.13 153.729 1015.31 153.409 cv
1015.31 151.369 li
1016.11 151.829 1016.89 152.169 1017.65 152.389 cv
1018.41 152.629 1019.17 152.729 1019.93 152.729 cv
1021.05 152.729 1021.91 152.509 1022.53 152.069 cv
1023.13 151.629 1023.45 151.009 1023.45 150.169 cv
1023.45 149.449 1023.23 148.889 1022.79 148.489 cv
1022.35 148.089 1021.63 147.789 1020.63 147.589 cv
1019.43 147.349 li
1017.95 147.069 1016.89 146.609 1016.23 145.969 cv
1015.57 145.349 1015.25 144.489 1015.25 143.369 cv
1015.25 142.089 1015.69 141.069 1016.61 140.329 cv
1017.51 139.589 1018.77 139.209 1020.37 139.209 cv
1021.05 139.209 1021.73 139.269 1022.45 139.389 cv
1023.15 139.509 1023.87 139.709 1024.63 139.949 cv
f
1030.57 141.089 mo
1030.57 152.429 li
1032.95 152.429 li
1034.95 152.429 1036.43 151.989 1037.37 151.069 cv
1038.29 150.149 1038.77 148.709 1038.77 146.749 cv
1038.77 144.789 1038.29 143.369 1037.37 142.449 cv
1036.43 141.549 1034.95 141.089 1032.95 141.089 cv
1030.57 141.089 li
1028.59 139.469 mo
1032.65 139.469 li
1035.47 139.469 1037.55 140.069 1038.87 141.229 cv
1040.19 142.409 1040.85 144.249 1040.85 146.749 cv
1040.85 149.269 1040.17 151.109 1038.85 152.289 cv
1037.53 153.469 1035.45 154.049 1032.65 154.049 cv
1028.59 154.049 li
1028.59 139.469 li
f
1045.97 147.089 mo
1045.97 152.429 li
1049.13 152.429 li
1050.19 152.429 1050.97 152.209 1051.49 151.769 cv
1051.99 151.329 1052.25 150.669 1052.25 149.749 cv
1052.25 148.849 1051.99 148.189 1051.49 147.749 cv
1050.97 147.309 1050.19 147.089 1049.13 147.089 cv
1045.97 147.089 li
1045.97 141.089 mo
1045.97 145.489 li
1048.89 145.489 li
1049.85 145.489 1050.55 145.309 1051.03 144.949 cv
1051.51 144.589 1051.75 144.049 1051.75 143.289 cv
1051.75 142.569 1051.51 142.009 1051.03 141.649 cv
1050.55 141.289 1049.85 141.089 1048.89 141.089 cv
1045.97 141.089 li
1043.99 139.469 mo
1049.03 139.469 li
1050.53 139.469 1051.69 139.789 1052.51 140.409 cv
1053.31 141.049 1053.73 141.929 1053.73 143.069 cv
1053.73 143.969 1053.51 144.689 1053.09 145.209 cv
1052.67 145.729 1052.07 146.069 1051.27 146.189 cv
1052.23 146.409 1052.99 146.849 1053.53 147.509 cv
1054.05 148.169 1054.33 148.989 1054.33 149.969 cv
1054.33 151.289 1053.87 152.289 1052.99 152.989 cv
1052.11 153.709 1050.85 154.049 1049.23 154.049 cv
1043.99 154.049 li
1043.99 139.469 li
f
1057.71 139.469 mo
1060.37 139.469 li
1066.83 151.669 li
1066.83 139.469 li
1068.75 139.469 li
1068.75 154.049 li
1066.09 154.049 li
1059.63 141.849 li
1059.63 154.049 li
1057.71 154.049 li
1057.71 139.469 li
f
1083.27 138.869 mo
1082.39 140.389 1081.75 141.869 1081.33 143.329 cv
1080.89 144.789 1080.69 146.269 1080.69 147.769 cv
1080.69 149.289 1080.89 150.769 1081.33 152.229 cv
1081.75 153.709 1082.39 155.169 1083.27 156.669 cv
1081.71 156.669 li
1080.73 155.129 1079.99 153.649 1079.51 152.169 cv
1079.03 150.689 1078.79 149.229 1078.79 147.769 cv
1078.79 146.329 1079.03 144.869 1079.51 143.389 cv
1079.99 141.909 1080.71 140.409 1081.71 138.869 cv
1083.27 138.869 li
f
1093.75 147.209 mo
1094.17 147.369 1094.59 147.669 1094.99 148.129 cv
1095.39 148.609 1095.79 149.249 1096.19 150.069 cv
1098.19 154.049 li
1096.07 154.049 li
1094.21 150.309 li
1093.73 149.349 1093.25 148.689 1092.81 148.369 cv
1092.35 148.049 1091.73 147.889 1090.95 147.889 cv
1088.81 147.889 li
1088.81 154.049 li
1086.83 154.049 li
1086.83 139.469 li
1091.29 139.469 li
1092.95 139.469 1094.19 139.829 1095.01 140.509 cv
1095.83 141.209 1096.25 142.269 1096.25 143.669 cv
1096.25 144.589 1096.03 145.369 1095.61 145.969 cv
1095.17 146.569 1094.55 146.989 1093.75 147.209 cv
1088.81 141.089 mo
1088.81 146.269 li
1091.29 146.269 li
1092.23 146.269 1092.95 146.049 1093.43 145.609 cv
1093.91 145.169 1094.17 144.529 1094.17 143.669 cv
1094.17 142.829 1093.91 142.189 1093.43 141.749 cv
1092.95 141.309 1092.23 141.089 1091.29 141.089 cv
1088.81 141.089 li
f
1102.71 147.089 mo
1102.71 152.429 li
1105.87 152.429 li
1106.93 152.429 1107.71 152.209 1108.23 151.769 cv
1108.73 151.329 1108.99 150.669 1108.99 149.749 cv
1108.99 148.849 1108.73 148.189 1108.23 147.749 cv
1107.71 147.309 1106.93 147.089 1105.87 147.089 cv
1102.71 147.089 li
1102.71 141.089 mo
1102.71 145.489 li
1105.63 145.489 li
1106.59 145.489 1107.29 145.309 1107.77 144.949 cv
1108.25 144.589 1108.49 144.049 1108.49 143.289 cv
1108.49 142.569 1108.25 142.009 1107.77 141.649 cv
1107.29 141.289 1106.59 141.089 1105.63 141.089 cv
1102.71 141.089 li
1100.73 139.469 mo
1105.77 139.469 li
1107.27 139.469 1108.43 139.789 1109.25 140.409 cv
1110.05 141.049 1110.47 141.929 1110.47 143.069 cv
1110.47 143.969 1110.25 144.689 1109.83 145.209 cv
1109.41 145.729 1108.81 146.069 1108.01 146.189 cv
1108.97 146.409 1109.73 146.849 1110.27 147.509 cv
1110.79 148.169 1111.07 148.989 1111.07 149.969 cv
1111.07 151.289 1110.61 152.289 1109.73 152.989 cv
1108.85 153.709 1107.59 154.049 1105.97 154.049 cv
1100.73 154.049 li
1100.73 139.469 li
f
1114.45 139.469 mo
1117.39 139.469 li
1121.11 149.389 li
1124.85 139.469 li
1127.79 139.469 li
1127.79 154.049 li
1125.87 154.049 li
1125.87 141.249 li
1122.11 151.249 li
1120.13 151.249 li
1116.37 141.249 li
1116.37 154.049 li
1114.45 154.049 li
1114.45 139.469 li
f
1133.59 152.389 mo
1140.47 152.389 li
1140.47 154.049 li
1131.21 154.049 li
1131.21 152.389 li
1131.95 151.629 1132.97 150.589 1134.27 149.269 cv
1135.55 147.969 1136.37 147.129 1136.71 146.749 cv
1137.35 146.049 1137.79 145.449 1138.03 144.949 cv
1138.27 144.469 1138.41 143.969 1138.41 143.489 cv
1138.41 142.729 1138.13 142.089 1137.59 141.609 cv
1137.05 141.129 1136.35 140.869 1135.47 140.869 cv
1134.85 140.869 1134.19 140.989 1133.51 141.189 cv
1132.83 141.409 1132.09 141.729 1131.31 142.169 cv
1131.31 140.169 li
1132.11 139.849 1132.85 139.609 1133.53 139.449 cv
1134.21 139.289 1134.85 139.209 1135.43 139.209 cv
1136.93 139.209 1138.13 139.589 1139.03 140.349 cv
1139.93 141.109 1140.39 142.109 1140.39 143.369 cv
1140.39 143.969 1140.27 144.549 1140.05 145.069 cv
1139.83 145.609 1139.43 146.249 1138.83 146.969 cv
1138.67 147.169 1138.15 147.709 1137.27 148.609 cv
1136.39 149.509 1135.17 150.769 1133.59 152.389 cv
f
1144.07 138.869 mo
1145.63 138.869 li
1146.59 140.409 1147.33 141.909 1147.81 143.389 cv
1148.29 144.869 1148.55 146.329 1148.55 147.769 cv
1148.55 149.229 1148.29 150.689 1147.81 152.169 cv
1147.33 153.649 1146.59 155.129 1145.63 156.669 cv
1144.07 156.669 li
1144.93 155.169 1145.57 153.709 1146.01 152.229 cv
1146.43 150.769 1146.65 149.289 1146.65 147.769 cv
1146.65 146.269 1146.43 144.789 1146.01 143.329 cv
1145.57 141.869 1144.93 140.389 1144.07 138.869 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
