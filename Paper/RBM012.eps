%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: RBM012-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/12, 9:17:04
%%BoundingBox: 0 0 1184 609
%%HiResBoundingBox: 0 0 1183.0737 608.1478
%%CropBox: 0 0 1183.0737 608.1478
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-12T08:46:24+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-12T09:16:57+08:00"
   xmp:MetadataDate="2019-06-12T09:16:57+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:bc23495a-fae3-4169-aa9f-6232438ab6f4"
   xmpMM:InstanceID="uuid:7c5cad0c-b239-495a-9dfc-b8390c9ecf32"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -608.148 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05176e-5 0 mo
3.05176e-5 608.148 li
1183.07 608.148 li
1183.07 0 li
cp
clp
gsave
-.595261 608.39 mo
1183.4 608.39 li
1183.4 -.609774 li
-.595261 -.609774 li
-.595261 608.39 li
clp
-76.5952 629.39 mo
1305.8 629.39 li
1305.8 -68.2899 li
-76.5952 -68.2899 li
-76.5952 629.39 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
96.2048 552.646 mo
1167.56 552.646 li
1167.56 15.4319 li
96.2048 15.4319 li
96.2048 552.646 li
f
144.903 552.645 mo
144.903 556.145 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
144.903 552.645 mo
144.903 556.145 li
@
144.904 561.569 mo
143.884 561.569 143.124 562.069 142.604 563.069 cv
142.084 564.069 141.844 565.569 141.844 567.569 cv
141.844 569.569 142.084 571.069 142.604 572.069 cv
143.124 573.069 143.884 573.569 144.904 573.569 cv
145.924 573.569 146.684 573.069 147.204 572.069 cv
147.704 571.069 147.964 569.569 147.964 567.569 cv
147.964 565.569 147.704 564.069 147.204 563.069 cv
146.684 562.069 145.924 561.569 144.904 561.569 cv
144.904 560.009 mo
146.524 560.009 147.764 560.669 148.644 561.949 cv
149.504 563.249 149.944 565.129 149.944 567.569 cv
149.944 570.029 149.504 571.909 148.644 573.189 cv
147.764 574.469 146.524 575.109 144.904 575.109 cv
143.264 575.109 142.004 574.469 141.144 573.189 cv
140.284 571.909 139.864 570.029 139.864 567.569 cv
139.864 565.129 140.284 563.249 141.144 561.949 cv
142.004 560.669 143.264 560.009 144.904 560.009 cv
f
341.663 552.645 mo
341.663 556.145 li
f
341.663 552.645 mo
341.663 556.145 li
@
332.785 573.189 mo
339.665 573.189 li
339.665 574.849 li
330.405 574.849 li
330.405 573.189 li
331.145 572.429 332.165 571.389 333.465 570.069 cv
334.745 568.769 335.565 567.929 335.905 567.549 cv
336.545 566.849 336.985 566.249 337.225 565.749 cv
337.465 565.269 337.605 564.769 337.605 564.289 cv
337.605 563.529 337.325 562.889 336.785 562.409 cv
336.245 561.929 335.545 561.669 334.665 561.669 cv
334.045 561.669 333.385 561.789 332.705 561.989 cv
332.025 562.209 331.285 562.529 330.505 562.969 cv
330.505 560.969 li
331.305 560.649 332.045 560.409 332.725 560.249 cv
333.405 560.089 334.045 560.009 334.625 560.009 cv
336.125 560.009 337.325 560.389 338.225 561.149 cv
339.125 561.909 339.585 562.909 339.585 564.169 cv
339.585 564.769 339.465 565.349 339.245 565.869 cv
339.025 566.409 338.625 567.049 338.025 567.769 cv
337.865 567.969 337.345 568.509 336.465 569.409 cv
335.585 570.309 334.365 571.569 332.785 573.189 cv
f
348.025 561.569 mo
347.005 561.569 346.245 562.069 345.725 563.069 cv
345.205 564.069 344.965 565.569 344.965 567.569 cv
344.965 569.569 345.205 571.069 345.725 572.069 cv
346.245 573.069 347.005 573.569 348.025 573.569 cv
349.045 573.569 349.805 573.069 350.325 572.069 cv
350.825 571.069 351.085 569.569 351.085 567.569 cv
351.085 565.569 350.825 564.069 350.325 563.069 cv
349.805 562.069 349.045 561.569 348.025 561.569 cv
348.025 560.009 mo
349.645 560.009 350.885 560.669 351.765 561.949 cv
352.625 563.249 353.065 565.129 353.065 567.569 cv
353.065 570.029 352.625 571.909 351.765 573.189 cv
350.885 574.469 349.645 575.109 348.025 575.109 cv
346.385 575.109 345.125 574.469 344.265 573.189 cv
343.405 571.909 342.985 570.029 342.985 567.569 cv
342.985 565.129 343.405 563.249 344.265 561.949 cv
345.125 560.669 346.385 560.009 348.025 560.009 cv
f
538.424 552.645 mo
538.424 556.145 li
f
538.424 552.645 mo
538.424 556.145 li
@
533.265 561.989 mo
528.285 569.769 li
533.265 569.769 li
533.265 561.989 li
532.745 560.269 mo
535.225 560.269 li
535.225 569.769 li
537.305 569.769 li
537.305 571.409 li
535.225 571.409 li
535.225 574.849 li
533.265 574.849 li
533.265 571.409 li
526.685 571.409 li
526.685 569.509 li
532.745 560.269 li
f
544.785 561.569 mo
543.765 561.569 543.005 562.069 542.485 563.069 cv
541.965 564.069 541.725 565.569 541.725 567.569 cv
541.725 569.569 541.965 571.069 542.485 572.069 cv
543.005 573.069 543.765 573.569 544.785 573.569 cv
545.805 573.569 546.565 573.069 547.085 572.069 cv
547.585 571.069 547.845 569.569 547.845 567.569 cv
547.845 565.569 547.585 564.069 547.085 563.069 cv
546.565 562.069 545.805 561.569 544.785 561.569 cv
544.785 560.009 mo
546.405 560.009 547.645 560.669 548.525 561.949 cv
549.385 563.249 549.825 565.129 549.825 567.569 cv
549.825 570.029 549.385 571.909 548.525 573.189 cv
547.645 574.469 546.405 575.109 544.785 575.109 cv
543.145 575.109 541.885 574.469 541.025 573.189 cv
540.165 571.909 539.745 570.029 539.745 567.569 cv
539.745 565.129 540.165 563.249 541.025 561.949 cv
541.885 560.669 543.145 560.009 544.785 560.009 cv
f
735.184 552.645 mo
735.184 556.145 li
f
735.184 552.645 mo
735.184 556.145 li
@
729.065 566.769 mo
728.185 566.769 727.485 567.089 726.965 567.689 cv
726.445 568.289 726.185 569.129 726.185 570.169 cv
726.185 571.229 726.445 572.069 726.965 572.669 cv
727.485 573.269 728.185 573.569 729.065 573.569 cv
729.945 573.569 730.645 573.269 731.165 572.669 cv
731.685 572.069 731.945 571.229 731.945 570.169 cv
731.945 569.129 731.685 568.289 731.165 567.689 cv
730.645 567.089 729.945 566.769 729.065 566.769 cv
732.985 560.589 mo
732.985 562.389 li
732.485 562.149 731.985 561.969 731.485 561.849 cv
730.965 561.729 730.465 561.669 729.985 561.669 cv
728.665 561.669 727.665 562.109 726.985 562.989 cv
726.305 563.869 725.905 565.209 725.825 566.969 cv
726.205 566.409 726.685 565.969 727.265 565.669 cv
727.845 565.369 728.485 565.209 729.185 565.209 cv
730.645 565.209 731.805 565.669 732.645 566.549 cv
733.485 567.429 733.925 568.649 733.925 570.169 cv
733.925 571.669 733.465 572.869 732.585 573.769 cv
731.705 574.669 730.525 575.109 729.065 575.109 cv
727.385 575.109 726.085 574.469 725.205 573.189 cv
724.305 571.909 723.865 570.029 723.865 567.569 cv
723.865 565.269 724.405 563.429 725.505 562.069 cv
726.585 560.709 728.065 560.009 729.905 560.009 cv
730.385 560.009 730.885 560.069 731.405 560.149 cv
731.905 560.249 732.425 560.389 732.985 560.589 cv
f
741.545 561.569 mo
740.525 561.569 739.765 562.069 739.245 563.069 cv
738.725 564.069 738.485 565.569 738.485 567.569 cv
738.485 569.569 738.725 571.069 739.245 572.069 cv
739.765 573.069 740.525 573.569 741.545 573.569 cv
742.565 573.569 743.325 573.069 743.845 572.069 cv
744.345 571.069 744.605 569.569 744.605 567.569 cv
744.605 565.569 744.345 564.069 743.845 563.069 cv
743.325 562.069 742.565 561.569 741.545 561.569 cv
741.545 560.009 mo
743.165 560.009 744.405 560.669 745.285 561.949 cv
746.145 563.249 746.585 565.129 746.585 567.569 cv
746.585 570.029 746.145 571.909 745.285 573.189 cv
744.405 574.469 743.165 575.109 741.545 575.109 cv
739.905 575.109 738.645 574.469 737.785 573.189 cv
736.925 571.909 736.505 570.029 736.505 567.569 cv
736.505 565.129 736.925 563.249 737.785 561.949 cv
738.645 560.669 739.905 560.009 741.545 560.009 cv
f
931.944 552.645 mo
931.944 556.145 li
f
931.944 552.645 mo
931.944 556.145 li
@
925.586 567.929 mo
924.646 567.929 923.906 568.189 923.366 568.689 cv
922.826 569.189 922.566 569.869 922.566 570.749 cv
922.566 571.629 922.826 572.329 923.366 572.829 cv
923.906 573.329 924.646 573.569 925.586 573.569 cv
926.506 573.569 927.246 573.329 927.786 572.809 cv
928.326 572.309 928.606 571.629 928.606 570.749 cv
928.606 569.869 928.326 569.189 927.806 568.689 cv
927.266 568.189 926.526 567.929 925.586 567.929 cv
923.606 567.089 mo
922.766 566.889 922.106 566.489 921.626 565.909 cv
921.146 565.329 920.926 564.629 920.926 563.789 cv
920.926 562.629 921.326 561.709 922.166 561.029 cv
922.986 560.349 924.126 560.009 925.586 560.009 cv
927.026 560.009 928.166 560.349 929.006 561.029 cv
929.826 561.709 930.246 562.629 930.246 563.789 cv
930.246 564.629 930.006 565.329 929.526 565.909 cv
929.046 566.489 928.406 566.889 927.566 567.089 cv
928.506 567.309 929.246 567.749 929.786 568.389 cv
930.306 569.029 930.586 569.829 930.586 570.749 cv
930.586 572.169 930.146 573.249 929.286 573.989 cv
928.406 574.749 927.186 575.109 925.586 575.109 cv
923.966 575.109 922.726 574.749 921.866 573.989 cv
921.006 573.249 920.586 572.169 920.586 570.749 cv
920.586 569.829 920.846 569.029 921.385 568.389 cv
921.906 567.749 922.646 567.309 923.606 567.089 cv
922.885 563.969 mo
922.885 564.729 923.106 565.329 923.586 565.749 cv
924.066 566.169 924.726 566.369 925.586 566.369 cv
926.426 566.369 927.086 566.169 927.566 565.749 cv
928.046 565.329 928.286 564.729 928.286 563.969 cv
928.286 563.209 928.046 562.629 927.566 562.209 cv
927.086 561.789 926.426 561.569 925.586 561.569 cv
924.726 561.569 924.066 561.789 923.586 562.209 cv
923.106 562.629 922.885 563.209 922.885 563.969 cv
f
938.306 561.569 mo
937.286 561.569 936.526 562.069 936.006 563.069 cv
935.486 564.069 935.246 565.569 935.246 567.569 cv
935.246 569.569 935.486 571.069 936.006 572.069 cv
936.526 573.069 937.286 573.569 938.306 573.569 cv
939.326 573.569 940.086 573.069 940.606 572.069 cv
941.106 571.069 941.366 569.569 941.366 567.569 cv
941.366 565.569 941.106 564.069 940.606 563.069 cv
940.086 562.069 939.326 561.569 938.306 561.569 cv
938.306 560.009 mo
939.926 560.009 941.166 560.669 942.046 561.949 cv
942.906 563.249 943.346 565.129 943.346 567.569 cv
943.346 570.029 942.906 571.909 942.046 573.189 cv
941.166 574.469 939.926 575.109 938.306 575.109 cv
936.666 575.109 935.406 574.469 934.546 573.189 cv
933.686 571.909 933.266 570.029 933.266 567.569 cv
933.266 565.129 933.686 563.249 934.546 561.949 cv
935.406 560.669 936.666 560.009 938.306 560.009 cv
f
1128.7 552.645 mo
1128.7 556.145 li
f
1128.7 552.645 mo
1128.7 556.145 li
@
1112.11 573.189 mo
1115.33 573.189 li
1115.33 562.069 li
1111.83 562.769 li
1111.83 560.969 li
1115.31 560.269 li
1117.29 560.269 li
1117.29 573.189 li
1120.51 573.189 li
1120.51 574.849 li
1112.11 574.849 li
1112.11 573.189 li
f
1128.71 561.569 mo
1127.69 561.569 1126.93 562.069 1126.41 563.069 cv
1125.89 564.069 1125.65 565.569 1125.65 567.569 cv
1125.65 569.569 1125.89 571.069 1126.41 572.069 cv
1126.93 573.069 1127.69 573.569 1128.71 573.569 cv
1129.73 573.569 1130.49 573.069 1131.01 572.069 cv
1131.51 571.069 1131.77 569.569 1131.77 567.569 cv
1131.77 565.569 1131.51 564.069 1131.01 563.069 cv
1130.49 562.069 1129.73 561.569 1128.71 561.569 cv
1128.71 560.009 mo
1130.33 560.009 1131.57 560.669 1132.45 561.949 cv
1133.31 563.249 1133.75 565.129 1133.75 567.569 cv
1133.75 570.029 1133.31 571.909 1132.45 573.189 cv
1131.57 574.469 1130.33 575.109 1128.71 575.109 cv
1127.07 575.109 1125.81 574.469 1124.95 573.189 cv
1124.09 571.909 1123.67 570.029 1123.67 567.569 cv
1123.67 565.129 1124.09 563.249 1124.95 561.949 cv
1125.81 560.669 1127.07 560.009 1128.71 560.009 cv
f
1141.43 561.569 mo
1140.41 561.569 1139.65 562.069 1139.13 563.069 cv
1138.61 564.069 1138.37 565.569 1138.37 567.569 cv
1138.37 569.569 1138.61 571.069 1139.13 572.069 cv
1139.65 573.069 1140.41 573.569 1141.43 573.569 cv
1142.45 573.569 1143.21 573.069 1143.73 572.069 cv
1144.23 571.069 1144.49 569.569 1144.49 567.569 cv
1144.49 565.569 1144.23 564.069 1143.73 563.069 cv
1143.21 562.069 1142.45 561.569 1141.43 561.569 cv
1141.43 560.009 mo
1143.05 560.009 1144.29 560.669 1145.17 561.949 cv
1146.03 563.249 1146.47 565.129 1146.47 567.569 cv
1146.47 570.029 1146.03 571.909 1145.17 573.189 cv
1144.29 574.469 1143.05 575.109 1141.43 575.109 cv
1139.79 575.109 1138.53 574.469 1137.67 573.189 cv
1136.81 571.909 1136.39 570.029 1136.39 567.569 cv
1136.39 565.129 1136.81 563.249 1137.67 561.949 cv
1138.53 560.669 1139.79 560.009 1141.43 560.009 cv
f
603.22 583.628 mo
612.44 583.628 li
612.44 585.288 li
605.2 585.288 li
605.2 589.608 li
612.14 589.608 li
612.14 591.268 li
605.2 591.268 li
605.2 596.548 li
612.62 596.548 li
612.62 598.208 li
603.22 598.208 li
603.22 583.628 li
f
617.52 596.568 mo
617.52 602.348 li
615.72 602.348 li
615.72 587.268 li
617.52 587.268 li
617.52 588.928 li
617.88 588.288 618.36 587.808 618.94 587.488 cv
619.52 587.168 620.22 587.008 621.02 587.008 cv
622.34 587.008 623.42 587.548 624.26 588.588 cv
625.08 589.648 625.5 591.028 625.5 592.748 cv
625.5 594.468 625.08 595.868 624.26 596.908 cv
623.42 597.948 622.34 598.468 621.02 598.468 cv
620.22 598.468 619.52 598.308 618.94 598.008 cv
618.36 597.708 617.88 597.228 617.52 596.568 cv
623.64 592.748 mo
623.64 591.428 623.36 590.408 622.82 589.648 cv
622.26 588.888 621.52 588.508 620.58 588.508 cv
619.62 588.508 618.88 588.888 618.34 589.648 cv
617.78 590.408 617.52 591.428 617.52 592.748 cv
617.52 594.068 617.78 595.108 618.34 595.868 cv
618.88 596.628 619.62 596.988 620.58 596.988 cv
621.52 596.988 622.26 596.628 622.82 595.868 cv
623.36 595.108 623.64 594.068 623.64 592.748 cv
f
632.72 588.528 mo
631.76 588.528 631 588.908 630.44 589.668 cv
629.88 590.428 629.6 591.448 629.6 592.748 cv
629.6 594.068 629.86 595.088 630.42 595.848 cv
630.98 596.608 631.74 596.968 632.72 596.968 cv
633.68 596.968 634.44 596.608 635 595.848 cv
635.56 595.088 635.84 594.068 635.84 592.748 cv
635.84 591.468 635.56 590.428 635 589.668 cv
634.44 588.908 633.68 588.528 632.72 588.528 cv
632.72 587.008 mo
634.28 587.008 635.5 587.528 636.4 588.528 cv
637.28 589.548 637.74 590.948 637.74 592.748 cv
637.74 594.548 637.28 595.948 636.4 596.948 cv
635.5 597.968 634.28 598.468 632.72 598.468 cv
631.14 598.468 629.9 597.968 629.02 596.948 cv
628.14 595.948 627.7 594.548 627.7 592.748 cv
627.7 590.948 628.14 589.548 629.02 588.528 cv
629.9 587.528 631.14 587.008 632.72 587.008 cv
f
648.6 587.688 mo
648.6 589.368 li
648.08 589.088 647.58 588.888 647.06 588.748 cv
646.54 588.608 646.04 588.528 645.52 588.528 cv
644.36 588.528 643.44 588.908 642.8 589.648 cv
642.16 590.388 641.84 591.428 641.84 592.748 cv
641.84 594.088 642.16 595.128 642.8 595.868 cv
643.44 596.608 644.36 596.968 645.52 596.968 cv
646.04 596.968 646.54 596.908 647.06 596.768 cv
647.58 596.628 648.08 596.408 648.6 596.128 cv
648.6 597.788 li
648.08 598.028 647.56 598.208 647.04 598.308 cv
646.5 598.408 645.92 598.468 645.32 598.468 cv
643.68 598.468 642.36 597.968 641.4 596.928 cv
640.42 595.908 639.94 594.508 639.94 592.748 cv
639.94 590.968 640.42 589.568 641.4 588.548 cv
642.38 587.528 643.72 587.008 645.44 587.008 cv
646 587.008 646.54 587.068 647.06 587.188 cv
647.58 587.308 648.1 587.468 648.6 587.688 cv
f
660.82 591.608 mo
660.82 598.208 li
659.02 598.208 li
659.02 591.668 li
659.02 590.628 658.8 589.868 658.4 589.348 cv
658 588.828 657.4 588.568 656.6 588.568 cv
655.62 588.568 654.86 588.888 654.3 589.508 cv
653.74 590.128 653.46 590.968 653.46 592.028 cv
653.46 598.208 li
651.66 598.208 li
651.66 583.008 li
653.46 583.008 li
653.46 588.968 li
653.88 588.328 654.38 587.828 654.98 587.508 cv
655.56 587.188 656.24 587.008 657 587.008 cv
658.24 587.008 659.2 587.408 659.84 588.188 cv
660.48 588.968 660.82 590.108 660.82 591.608 cv
f
96.2048 544.17 mo
92.7048 544.17 li
f
96.2048 544.17 mo
92.7048 544.17 li
@
40.8098 550.112 mo
44.0298 550.112 li
44.0298 538.991 li
40.5298 539.691 li
40.5298 537.891 li
44.0098 537.191 li
45.9898 537.191 li
45.9898 550.112 li
49.2098 550.112 li
49.2098 551.771 li
40.8098 551.771 li
40.8098 550.112 li
f
57.4098 538.491 mo
56.3898 538.491 55.6298 538.991 55.1098 539.991 cv
54.5898 540.991 54.3498 542.491 54.3498 544.491 cv
54.3498 546.491 54.5898 547.991 55.1098 548.991 cv
55.6298 549.991 56.3898 550.491 57.4098 550.491 cv
58.4298 550.491 59.1898 549.991 59.7098 548.991 cv
60.2098 547.991 60.4698 546.491 60.4698 544.491 cv
60.4698 542.491 60.2098 540.991 59.7098 539.991 cv
59.1898 538.991 58.4298 538.491 57.4098 538.491 cv
57.4098 536.931 mo
59.0298 536.931 60.2698 537.591 61.1498 538.871 cv
62.0098 540.172 62.4498 542.052 62.4498 544.491 cv
62.4498 546.951 62.0098 548.831 61.1498 550.112 cv
60.2698 551.391 59.0298 552.031 57.4098 552.031 cv
55.7698 552.031 54.5098 551.391 53.6498 550.112 cv
52.7898 548.831 52.3698 546.951 52.3698 544.491 cv
52.3698 542.052 52.7898 540.172 53.6498 538.871 cv
54.5098 537.591 55.7698 536.931 57.4098 536.931 cv
f
70.1299 538.491 mo
69.1098 538.491 68.3499 538.991 67.8298 539.991 cv
67.3098 540.991 67.0699 542.491 67.0699 544.491 cv
67.0699 546.491 67.3098 547.991 67.8298 548.991 cv
68.3499 549.991 69.1098 550.491 70.1299 550.491 cv
71.1499 550.491 71.9099 549.991 72.4299 548.991 cv
72.9299 547.991 73.1898 546.491 73.1898 544.491 cv
73.1898 542.491 72.9299 540.991 72.4299 539.991 cv
71.9099 538.991 71.1499 538.491 70.1299 538.491 cv
70.1299 536.931 mo
71.7498 536.931 72.9899 537.591 73.8699 538.871 cv
74.7299 540.172 75.1698 542.052 75.1698 544.491 cv
75.1698 546.951 74.7299 548.831 73.8699 550.112 cv
72.9899 551.391 71.7498 552.031 70.1299 552.031 cv
68.4899 552.031 67.2299 551.391 66.3699 550.112 cv
65.5099 548.831 65.0899 546.951 65.0899 544.491 cv
65.0899 542.052 65.5099 540.172 66.3699 538.871 cv
67.2299 537.591 68.4899 536.931 70.1299 536.931 cv
f
82.8499 538.491 mo
81.8299 538.491 81.0699 538.991 80.5499 539.991 cv
80.0299 540.991 79.7899 542.491 79.7899 544.491 cv
79.7899 546.491 80.0299 547.991 80.5499 548.991 cv
81.0699 549.991 81.8299 550.491 82.8499 550.491 cv
83.8699 550.491 84.6299 549.991 85.1499 548.991 cv
85.6499 547.991 85.9099 546.491 85.9099 544.491 cv
85.9099 542.491 85.6499 540.991 85.1499 539.991 cv
84.6299 538.991 83.8699 538.491 82.8499 538.491 cv
82.8499 536.931 mo
84.4699 536.931 85.7099 537.591 86.5899 538.871 cv
87.4499 540.172 87.8899 542.052 87.8899 544.491 cv
87.8899 546.951 87.4499 548.831 86.5899 550.112 cv
85.7099 551.391 84.4699 552.031 82.8499 552.031 cv
81.2099 552.031 79.9499 551.391 79.0899 550.112 cv
78.2299 548.831 77.8099 546.951 77.8099 544.491 cv
77.8099 542.052 78.2299 540.172 79.0899 538.871 cv
79.9499 537.591 81.2099 536.931 82.8499 536.931 cv
f
96.2048 455.677 mo
92.7048 455.677 li
f
96.2048 455.677 mo
92.7048 455.677 li
@
42.1698 461.619 mo
49.0498 461.619 li
49.0498 463.279 li
39.7898 463.279 li
39.7898 461.619 li
40.5298 460.859 41.5498 459.819 42.8498 458.499 cv
44.1298 457.199 44.9498 456.359 45.2898 455.979 cv
45.9298 455.279 46.3698 454.679 46.6098 454.179 cv
46.8498 453.699 46.9898 453.199 46.9898 452.719 cv
46.9898 451.959 46.7098 451.319 46.1698 450.839 cv
45.6298 450.359 44.9298 450.099 44.0498 450.099 cv
43.4298 450.099 42.7698 450.219 42.0898 450.419 cv
41.4098 450.639 40.6698 450.959 39.8898 451.399 cv
39.8898 449.399 li
40.6898 449.079 41.4298 448.839 42.1098 448.679 cv
42.7898 448.519 43.4298 448.439 44.0098 448.439 cv
45.5098 448.439 46.7098 448.819 47.6098 449.579 cv
48.5098 450.339 48.9698 451.339 48.9698 452.599 cv
48.9698 453.199 48.8498 453.779 48.6298 454.299 cv
48.4098 454.839 48.0098 455.479 47.4098 456.199 cv
47.2498 456.399 46.7298 456.939 45.8498 457.839 cv
44.9698 458.739 43.7498 459.999 42.1698 461.619 cv
f
57.4098 449.999 mo
56.3898 449.999 55.6298 450.499 55.1098 451.499 cv
54.5898 452.499 54.3498 453.999 54.3498 455.999 cv
54.3498 457.999 54.5898 459.499 55.1098 460.499 cv
55.6298 461.499 56.3898 461.999 57.4098 461.999 cv
58.4298 461.999 59.1898 461.499 59.7098 460.499 cv
60.2098 459.499 60.4698 457.999 60.4698 455.999 cv
60.4698 453.999 60.2098 452.499 59.7098 451.499 cv
59.1898 450.499 58.4298 449.999 57.4098 449.999 cv
57.4098 448.439 mo
59.0298 448.439 60.2698 449.099 61.1498 450.379 cv
62.0098 451.679 62.4498 453.559 62.4498 455.999 cv
62.4498 458.459 62.0098 460.339 61.1498 461.619 cv
60.2698 462.899 59.0298 463.539 57.4098 463.539 cv
55.7698 463.539 54.5098 462.899 53.6498 461.619 cv
52.7898 460.339 52.3698 458.459 52.3698 455.999 cv
52.3698 453.559 52.7898 451.679 53.6498 450.379 cv
54.5098 449.099 55.7698 448.439 57.4098 448.439 cv
f
70.1299 449.999 mo
69.1098 449.999 68.3499 450.499 67.8298 451.499 cv
67.3098 452.499 67.0699 453.999 67.0699 455.999 cv
67.0699 457.999 67.3098 459.499 67.8298 460.499 cv
68.3499 461.499 69.1098 461.999 70.1299 461.999 cv
71.1499 461.999 71.9099 461.499 72.4299 460.499 cv
72.9299 459.499 73.1898 457.999 73.1898 455.999 cv
73.1898 453.999 72.9299 452.499 72.4299 451.499 cv
71.9099 450.499 71.1499 449.999 70.1299 449.999 cv
70.1299 448.439 mo
71.7498 448.439 72.9899 449.099 73.8699 450.379 cv
74.7299 451.679 75.1698 453.559 75.1698 455.999 cv
75.1698 458.459 74.7299 460.339 73.8699 461.619 cv
72.9899 462.899 71.7498 463.539 70.1299 463.539 cv
68.4899 463.539 67.2299 462.899 66.3699 461.619 cv
65.5099 460.339 65.0899 458.459 65.0899 455.999 cv
65.0899 453.559 65.5099 451.679 66.3699 450.379 cv
67.2299 449.099 68.4899 448.439 70.1299 448.439 cv
f
82.8499 449.999 mo
81.8299 449.999 81.0699 450.499 80.5499 451.499 cv
80.0299 452.499 79.7899 453.999 79.7899 455.999 cv
79.7899 457.999 80.0299 459.499 80.5499 460.499 cv
81.0699 461.499 81.8299 461.999 82.8499 461.999 cv
83.8699 461.999 84.6299 461.499 85.1499 460.499 cv
85.6499 459.499 85.9099 457.999 85.9099 455.999 cv
85.9099 453.999 85.6499 452.499 85.1499 451.499 cv
84.6299 450.499 83.8699 449.999 82.8499 449.999 cv
82.8499 448.439 mo
84.4699 448.439 85.7099 449.099 86.5899 450.379 cv
87.4499 451.679 87.8899 453.559 87.8899 455.999 cv
87.8899 458.459 87.4499 460.339 86.5899 461.619 cv
85.7099 462.899 84.4699 463.539 82.8499 463.539 cv
81.2099 463.539 79.9499 462.899 79.0899 461.619 cv
78.2299 460.339 77.8099 458.459 77.8099 455.999 cv
77.8099 453.559 78.2299 451.679 79.0899 450.379 cv
79.9499 449.099 81.2099 448.439 82.8499 448.439 cv
f
96.2048 367.184 mo
92.7048 367.184 li
f
96.2048 367.184 mo
92.7048 367.184 li
@
46.4498 366.926 mo
47.3898 367.126 48.1298 367.546 48.6498 368.186 cv
49.1698 368.826 49.4498 369.626 49.4498 370.546 cv
49.4498 371.986 48.9498 373.106 47.9698 373.886 cv
46.9698 374.666 45.5698 375.046 43.7498 375.046 cv
43.1298 375.046 42.4898 374.986 41.8498 374.866 cv
41.2098 374.766 40.5298 374.586 39.8498 374.346 cv
39.8498 372.446 li
40.3898 372.766 40.9898 373.006 41.6498 373.166 cv
42.2898 373.326 42.9698 373.406 43.6898 373.406 cv
44.9298 373.406 45.8698 373.166 46.5098 372.686 cv
47.1498 372.206 47.4898 371.486 47.4898 370.546 cv
47.4898 369.706 47.1898 369.026 46.5898 368.546 cv
45.9898 368.066 45.1498 367.806 44.0698 367.806 cv
42.3698 367.806 li
42.3698 366.186 li
44.1498 366.186 li
45.1098 366.186 45.8498 366.006 46.3698 365.606 cv
46.8898 365.226 47.1498 364.666 47.1498 363.926 cv
47.1498 363.186 46.8698 362.606 46.3498 362.206 cv
45.8098 361.806 45.0498 361.606 44.0698 361.606 cv
43.5298 361.606 42.9498 361.666 42.3298 361.786 cv
41.7098 361.906 41.0298 362.086 40.2898 362.326 cv
40.2898 360.566 li
41.0298 360.366 41.7298 360.206 42.3898 360.106 cv
43.0298 360.006 43.6498 359.946 44.2498 359.946 cv
45.7298 359.946 46.9098 360.286 47.7898 360.966 cv
48.6698 361.646 49.1098 362.566 49.1098 363.726 cv
49.1098 364.526 48.8698 365.206 48.4098 365.766 cv
47.9498 366.326 47.2898 366.726 46.4498 366.926 cv
f
57.4098 361.506 mo
56.3898 361.506 55.6298 362.006 55.1098 363.006 cv
54.5898 364.006 54.3498 365.506 54.3498 367.506 cv
54.3498 369.506 54.5898 371.006 55.1098 372.006 cv
55.6298 373.006 56.3898 373.506 57.4098 373.506 cv
58.4298 373.506 59.1898 373.006 59.7098 372.006 cv
60.2098 371.006 60.4698 369.506 60.4698 367.506 cv
60.4698 365.506 60.2098 364.006 59.7098 363.006 cv
59.1898 362.006 58.4298 361.506 57.4098 361.506 cv
57.4098 359.946 mo
59.0298 359.946 60.2698 360.606 61.1498 361.886 cv
62.0098 363.186 62.4498 365.066 62.4498 367.506 cv
62.4498 369.966 62.0098 371.846 61.1498 373.126 cv
60.2698 374.406 59.0298 375.046 57.4098 375.046 cv
55.7698 375.046 54.5098 374.406 53.6498 373.126 cv
52.7898 371.846 52.3698 369.966 52.3698 367.506 cv
52.3698 365.066 52.7898 363.186 53.6498 361.886 cv
54.5098 360.606 55.7698 359.946 57.4098 359.946 cv
f
70.1299 361.506 mo
69.1098 361.506 68.3499 362.006 67.8298 363.006 cv
67.3098 364.006 67.0699 365.506 67.0699 367.506 cv
67.0699 369.506 67.3098 371.006 67.8298 372.006 cv
68.3499 373.006 69.1098 373.506 70.1299 373.506 cv
71.1499 373.506 71.9099 373.006 72.4299 372.006 cv
72.9299 371.006 73.1898 369.506 73.1898 367.506 cv
73.1898 365.506 72.9299 364.006 72.4299 363.006 cv
71.9099 362.006 71.1499 361.506 70.1299 361.506 cv
70.1299 359.946 mo
71.7498 359.946 72.9899 360.606 73.8699 361.886 cv
74.7299 363.186 75.1698 365.066 75.1698 367.506 cv
75.1698 369.966 74.7299 371.846 73.8699 373.126 cv
72.9899 374.406 71.7498 375.046 70.1299 375.046 cv
68.4899 375.046 67.2299 374.406 66.3699 373.126 cv
65.5099 371.846 65.0899 369.966 65.0899 367.506 cv
65.0899 365.066 65.5099 363.186 66.3699 361.886 cv
67.2299 360.606 68.4899 359.946 70.1299 359.946 cv
f
82.8499 361.506 mo
81.8299 361.506 81.0699 362.006 80.5499 363.006 cv
80.0299 364.006 79.7899 365.506 79.7899 367.506 cv
79.7899 369.506 80.0299 371.006 80.5499 372.006 cv
81.0699 373.006 81.8299 373.506 82.8499 373.506 cv
83.8699 373.506 84.6299 373.006 85.1499 372.006 cv
85.6499 371.006 85.9099 369.506 85.9099 367.506 cv
85.9099 365.506 85.6499 364.006 85.1499 363.006 cv
84.6299 362.006 83.8699 361.506 82.8499 361.506 cv
82.8499 359.946 mo
84.4699 359.946 85.7099 360.606 86.5899 361.886 cv
87.4499 363.186 87.8899 365.066 87.8899 367.506 cv
87.8899 369.966 87.4499 371.846 86.5899 373.126 cv
85.7099 374.406 84.4699 375.046 82.8499 375.046 cv
81.2099 375.046 79.9499 374.406 79.0899 373.126 cv
78.2299 371.846 77.8099 369.966 77.8099 367.506 cv
77.8099 365.066 78.2299 363.186 79.0899 361.886 cv
79.9499 360.606 81.2099 359.946 82.8499 359.946 cv
f
96.2048 278.691 mo
92.7048 278.691 li
f
96.2048 278.691 mo
92.7048 278.691 li
@
45.8898 273.433 mo
40.9098 281.213 li
45.8898 281.213 li
45.8898 273.433 li
45.3698 271.713 mo
47.8498 271.713 li
47.8498 281.213 li
49.9298 281.213 li
49.9298 282.853 li
47.8498 282.853 li
47.8498 286.293 li
45.8898 286.293 li
45.8898 282.853 li
39.3098 282.853 li
39.3098 280.953 li
45.3698 271.713 li
f
57.4098 273.013 mo
56.3898 273.013 55.6298 273.513 55.1098 274.513 cv
54.5898 275.513 54.3498 277.013 54.3498 279.013 cv
54.3498 281.013 54.5898 282.513 55.1098 283.513 cv
55.6298 284.513 56.3898 285.013 57.4098 285.013 cv
58.4298 285.013 59.1898 284.513 59.7098 283.513 cv
60.2098 282.513 60.4698 281.013 60.4698 279.013 cv
60.4698 277.013 60.2098 275.513 59.7098 274.513 cv
59.1898 273.513 58.4298 273.013 57.4098 273.013 cv
57.4098 271.453 mo
59.0298 271.453 60.2698 272.113 61.1498 273.393 cv
62.0098 274.693 62.4498 276.573 62.4498 279.013 cv
62.4498 281.473 62.0098 283.353 61.1498 284.633 cv
60.2698 285.913 59.0298 286.553 57.4098 286.553 cv
55.7698 286.553 54.5098 285.913 53.6498 284.633 cv
52.7898 283.353 52.3698 281.473 52.3698 279.013 cv
52.3698 276.573 52.7898 274.693 53.6498 273.393 cv
54.5098 272.113 55.7698 271.453 57.4098 271.453 cv
f
70.1299 273.013 mo
69.1098 273.013 68.3499 273.513 67.8298 274.513 cv
67.3098 275.513 67.0699 277.013 67.0699 279.013 cv
67.0699 281.013 67.3098 282.513 67.8298 283.513 cv
68.3499 284.513 69.1098 285.013 70.1299 285.013 cv
71.1499 285.013 71.9099 284.513 72.4299 283.513 cv
72.9299 282.513 73.1898 281.013 73.1898 279.013 cv
73.1898 277.013 72.9299 275.513 72.4299 274.513 cv
71.9099 273.513 71.1499 273.013 70.1299 273.013 cv
70.1299 271.453 mo
71.7498 271.453 72.9899 272.113 73.8699 273.393 cv
74.7299 274.693 75.1698 276.573 75.1698 279.013 cv
75.1698 281.473 74.7299 283.353 73.8699 284.633 cv
72.9899 285.913 71.7498 286.553 70.1299 286.553 cv
68.4899 286.553 67.2299 285.913 66.3699 284.633 cv
65.5099 283.353 65.0899 281.473 65.0899 279.013 cv
65.0899 276.573 65.5099 274.693 66.3699 273.393 cv
67.2299 272.113 68.4899 271.453 70.1299 271.453 cv
f
82.8499 273.013 mo
81.8299 273.013 81.0699 273.513 80.5499 274.513 cv
80.0299 275.513 79.7899 277.013 79.7899 279.013 cv
79.7899 281.013 80.0299 282.513 80.5499 283.513 cv
81.0699 284.513 81.8299 285.013 82.8499 285.013 cv
83.8699 285.013 84.6299 284.513 85.1499 283.513 cv
85.6499 282.513 85.9099 281.013 85.9099 279.013 cv
85.9099 277.013 85.6499 275.513 85.1499 274.513 cv
84.6299 273.513 83.8699 273.013 82.8499 273.013 cv
82.8499 271.453 mo
84.4699 271.453 85.7099 272.113 86.5899 273.393 cv
87.4499 274.693 87.8899 276.573 87.8899 279.013 cv
87.8899 281.473 87.4499 283.353 86.5899 284.633 cv
85.7099 285.913 84.4699 286.553 82.8499 286.553 cv
81.2099 286.553 79.9499 285.913 79.0899 284.633 cv
78.2299 283.353 77.8099 281.473 77.8099 279.013 cv
77.8099 276.573 78.2299 274.693 79.0899 273.393 cv
79.9499 272.113 81.2099 271.453 82.8499 271.453 cv
f
96.2048 190.198 mo
92.7048 190.198 li
f
96.2048 190.198 mo
92.7048 190.198 li
@
40.4898 183.22 mo
48.2298 183.22 li
48.2298 184.88 li
42.2898 184.88 li
42.2898 188.46 li
42.5698 188.36 42.8698 188.28 43.1498 188.24 cv
43.4298 188.2 43.7298 188.16 44.0098 188.16 cv
45.6298 188.16 46.9098 188.62 47.8698 189.5 cv
48.8298 190.4 49.3098 191.6 49.3098 193.12 cv
49.3098 194.7 48.8098 195.92 47.8298 196.78 cv
46.8498 197.64 45.4698 198.06 43.7098 198.06 cv
43.0898 198.06 42.4698 198 41.8298 197.92 cv
41.1898 197.82 40.5498 197.68 39.8698 197.46 cv
39.8698 195.48 li
40.4498 195.8 41.0498 196.04 41.6898 196.2 cv
42.3098 196.36 42.9698 196.42 43.6698 196.42 cv
44.7898 196.42 45.6898 196.14 46.3498 195.54 cv
46.9898 194.94 47.3298 194.14 47.3298 193.12 cv
47.3298 192.12 46.9898 191.32 46.3498 190.72 cv
45.6898 190.12 44.7898 189.82 43.6698 189.82 cv
43.1498 189.82 42.6098 189.88 42.0898 190 cv
41.5698 190.12 41.0298 190.3 40.4898 190.54 cv
40.4898 183.22 li
f
57.4098 184.52 mo
56.3898 184.52 55.6298 185.02 55.1098 186.02 cv
54.5898 187.02 54.3498 188.52 54.3498 190.52 cv
54.3498 192.52 54.5898 194.02 55.1098 195.02 cv
55.6298 196.02 56.3898 196.52 57.4098 196.52 cv
58.4298 196.52 59.1898 196.02 59.7098 195.02 cv
60.2098 194.02 60.4698 192.52 60.4698 190.52 cv
60.4698 188.52 60.2098 187.02 59.7098 186.02 cv
59.1898 185.02 58.4298 184.52 57.4098 184.52 cv
57.4098 182.96 mo
59.0298 182.96 60.2698 183.62 61.1498 184.9 cv
62.0098 186.2 62.4498 188.08 62.4498 190.52 cv
62.4498 192.98 62.0098 194.86 61.1498 196.14 cv
60.2698 197.42 59.0298 198.06 57.4098 198.06 cv
55.7698 198.06 54.5098 197.42 53.6498 196.14 cv
52.7898 194.86 52.3698 192.98 52.3698 190.52 cv
52.3698 188.08 52.7898 186.2 53.6498 184.9 cv
54.5098 183.62 55.7698 182.96 57.4098 182.96 cv
f
70.1299 184.52 mo
69.1098 184.52 68.3499 185.02 67.8298 186.02 cv
67.3098 187.02 67.0699 188.52 67.0699 190.52 cv
67.0699 192.52 67.3098 194.02 67.8298 195.02 cv
68.3499 196.02 69.1098 196.52 70.1299 196.52 cv
71.1499 196.52 71.9099 196.02 72.4299 195.02 cv
72.9299 194.02 73.1898 192.52 73.1898 190.52 cv
73.1898 188.52 72.9299 187.02 72.4299 186.02 cv
71.9099 185.02 71.1499 184.52 70.1299 184.52 cv
70.1299 182.96 mo
71.7498 182.96 72.9899 183.62 73.8699 184.9 cv
74.7299 186.2 75.1698 188.08 75.1698 190.52 cv
75.1698 192.98 74.7299 194.86 73.8699 196.14 cv
72.9899 197.42 71.7498 198.06 70.1299 198.06 cv
68.4899 198.06 67.2299 197.42 66.3699 196.14 cv
65.5099 194.86 65.0899 192.98 65.0899 190.52 cv
65.0899 188.08 65.5099 186.2 66.3699 184.9 cv
67.2299 183.62 68.4899 182.96 70.1299 182.96 cv
f
82.8499 184.52 mo
81.8299 184.52 81.0699 185.02 80.5499 186.02 cv
80.0299 187.02 79.7899 188.52 79.7899 190.52 cv
79.7899 192.52 80.0299 194.02 80.5499 195.02 cv
81.0699 196.02 81.8299 196.52 82.8499 196.52 cv
83.8699 196.52 84.6299 196.02 85.1499 195.02 cv
85.6499 194.02 85.9099 192.52 85.9099 190.52 cv
85.9099 188.52 85.6499 187.02 85.1499 186.02 cv
84.6299 185.02 83.8699 184.52 82.8499 184.52 cv
82.8499 182.96 mo
84.4699 182.96 85.7099 183.62 86.5899 184.9 cv
87.4499 186.2 87.8899 188.08 87.8899 190.52 cv
87.8899 192.98 87.4499 194.86 86.5899 196.14 cv
85.7099 197.42 84.4699 198.06 82.8499 198.06 cv
81.2099 198.06 79.9499 197.42 79.0899 196.14 cv
78.2299 194.86 77.8099 192.98 77.8099 190.52 cv
77.8099 188.08 78.2299 186.2 79.0899 184.9 cv
79.9499 183.62 81.2099 182.96 82.8499 182.96 cv
f
96.2048 101.706 mo
92.7048 101.706 li
f
96.2048 101.706 mo
92.7048 101.706 li
@
44.9298 101.227 mo
44.0498 101.227 43.3498 101.547 42.8298 102.147 cv
42.3098 102.747 42.0498 103.587 42.0498 104.627 cv
42.0498 105.687 42.3098 106.527 42.8298 107.127 cv
43.3498 107.727 44.0498 108.027 44.9298 108.027 cv
45.8098 108.027 46.5098 107.727 47.0298 107.127 cv
47.5498 106.527 47.8098 105.687 47.8098 104.627 cv
47.8098 103.587 47.5498 102.747 47.0298 102.147 cv
46.5098 101.547 45.8098 101.227 44.9298 101.227 cv
48.8498 95.0472 mo
48.8498 96.8472 li
48.3498 96.6072 47.8498 96.4272 47.3498 96.3072 cv
46.8298 96.1872 46.3298 96.1272 45.8498 96.1272 cv
44.5298 96.1272 43.5298 96.5672 42.8498 97.4472 cv
42.1698 98.3272 41.7698 99.6672 41.6898 101.427 cv
42.0698 100.867 42.5498 100.427 43.1298 100.127 cv
43.7098 99.8272 44.3498 99.6672 45.0498 99.6672 cv
46.5098 99.6672 47.6698 100.127 48.5098 101.007 cv
49.3498 101.887 49.7898 103.107 49.7898 104.627 cv
49.7898 106.127 49.3298 107.327 48.4498 108.227 cv
47.5698 109.127 46.3898 109.567 44.9298 109.567 cv
43.2498 109.567 41.9498 108.927 41.0698 107.647 cv
40.1698 106.367 39.7298 104.487 39.7298 102.027 cv
39.7298 99.7272 40.2698 97.8872 41.3698 96.5272 cv
42.4498 95.1672 43.9298 94.4672 45.7698 94.4672 cv
46.2498 94.4672 46.7498 94.5272 47.2698 94.6072 cv
47.7698 94.7072 48.2898 94.8472 48.8498 95.0472 cv
f
57.4098 96.0272 mo
56.3898 96.0272 55.6298 96.5272 55.1098 97.5272 cv
54.5898 98.5272 54.3498 100.027 54.3498 102.027 cv
54.3498 104.027 54.5898 105.527 55.1098 106.527 cv
55.6298 107.527 56.3898 108.027 57.4098 108.027 cv
58.4298 108.027 59.1898 107.527 59.7098 106.527 cv
60.2098 105.527 60.4698 104.027 60.4698 102.027 cv
60.4698 100.027 60.2098 98.5272 59.7098 97.5272 cv
59.1898 96.5272 58.4298 96.0272 57.4098 96.0272 cv
57.4098 94.4672 mo
59.0298 94.4672 60.2698 95.1272 61.1498 96.4072 cv
62.0098 97.7072 62.4498 99.5872 62.4498 102.027 cv
62.4498 104.487 62.0098 106.367 61.1498 107.647 cv
60.2698 108.927 59.0298 109.567 57.4098 109.567 cv
55.7698 109.567 54.5098 108.927 53.6498 107.647 cv
52.7898 106.367 52.3698 104.487 52.3698 102.027 cv
52.3698 99.5872 52.7898 97.7072 53.6498 96.4072 cv
54.5098 95.1272 55.7698 94.4672 57.4098 94.4672 cv
f
70.1299 96.0272 mo
69.1098 96.0272 68.3499 96.5272 67.8298 97.5272 cv
67.3098 98.5272 67.0699 100.027 67.0699 102.027 cv
67.0699 104.027 67.3098 105.527 67.8298 106.527 cv
68.3499 107.527 69.1098 108.027 70.1299 108.027 cv
71.1499 108.027 71.9099 107.527 72.4299 106.527 cv
72.9299 105.527 73.1898 104.027 73.1898 102.027 cv
73.1898 100.027 72.9299 98.5272 72.4299 97.5272 cv
71.9099 96.5272 71.1499 96.0272 70.1299 96.0272 cv
70.1299 94.4672 mo
71.7498 94.4672 72.9899 95.1272 73.8699 96.4072 cv
74.7299 97.7072 75.1698 99.5872 75.1698 102.027 cv
75.1698 104.487 74.7299 106.367 73.8699 107.647 cv
72.9899 108.927 71.7498 109.567 70.1299 109.567 cv
68.4899 109.567 67.2299 108.927 66.3699 107.647 cv
65.5099 106.367 65.0899 104.487 65.0899 102.027 cv
65.0899 99.5872 65.5099 97.7072 66.3699 96.4072 cv
67.2299 95.1272 68.4899 94.4672 70.1299 94.4672 cv
f
82.8499 96.0272 mo
81.8299 96.0272 81.0699 96.5272 80.5499 97.5272 cv
80.0299 98.5272 79.7899 100.027 79.7899 102.027 cv
79.7899 104.027 80.0299 105.527 80.5499 106.527 cv
81.0699 107.527 81.8299 108.027 82.8499 108.027 cv
83.8699 108.027 84.6299 107.527 85.1499 106.527 cv
85.6499 105.527 85.9099 104.027 85.9099 102.027 cv
85.9099 100.027 85.6499 98.5272 85.1499 97.5272 cv
84.6299 96.5272 83.8699 96.0272 82.8499 96.0272 cv
82.8499 94.4672 mo
84.4699 94.4672 85.7099 95.1272 86.5899 96.4072 cv
87.4499 97.7072 87.8899 99.5872 87.8899 102.027 cv
87.8899 104.487 87.4499 106.367 86.5899 107.647 cv
85.7099 108.927 84.4699 109.567 82.8499 109.567 cv
81.2099 109.567 79.9499 108.927 79.0899 107.647 cv
78.2299 106.367 77.8099 104.487 77.8099 102.027 cv
77.8099 99.5872 78.2299 97.7072 79.0899 96.4072 cv
79.9499 95.1272 81.2099 94.4672 82.8499 94.4672 cv
f
15.5935 306.844 mo
15.5935 297.624 li
17.2535 297.624 li
17.2535 304.864 li
21.5735 304.864 li
21.5735 297.924 li
23.2335 297.924 li
23.2335 304.864 li
28.5135 304.864 li
28.5135 297.444 li
30.1735 297.444 li
30.1735 306.844 li
15.5935 306.844 li
f
20.9135 287.944 mo
20.7935 288.144 20.7135 288.364 20.6535 288.604 cv
20.6135 288.844 20.5735 289.104 20.5735 289.384 cv
20.5735 290.404 20.9135 291.184 21.5735 291.724 cv
22.2335 292.284 23.1735 292.544 24.4135 292.544 cv
30.1735 292.544 li
30.1735 294.344 li
19.2335 294.344 li
19.2335 292.544 li
20.9335 292.544 li
20.2735 292.184 19.7735 291.684 19.4535 291.084 cv
19.1335 290.484 18.9735 289.744 18.9735 288.864 cv
18.9735 288.744 18.9935 288.604 18.9935 288.444 cv
19.0135 288.304 19.0335 288.144 19.0735 287.944 cv
20.9135 287.944 li
f
20.9135 279.724 mo
20.7935 279.924 20.7135 280.144 20.6535 280.384 cv
20.6135 280.624 20.5735 280.884 20.5735 281.164 cv
20.5735 282.184 20.9135 282.964 21.5735 283.504 cv
22.2335 284.064 23.1735 284.324 24.4135 284.324 cv
30.1735 284.324 li
30.1735 286.124 li
19.2335 286.124 li
19.2335 284.324 li
20.9335 284.324 li
20.2735 283.964 19.7735 283.464 19.4535 282.864 cv
19.1335 282.264 18.9735 281.524 18.9735 280.644 cv
18.9735 280.524 18.9935 280.384 18.9935 280.224 cv
19.0135 280.084 19.0335 279.924 19.0735 279.724 cv
20.9135 279.724 li
f
20.4935 273.604 mo
20.4935 274.564 20.8735 275.324 21.6335 275.884 cv
22.3935 276.444 23.4135 276.724 24.7135 276.724 cv
26.0335 276.724 27.0535 276.464 27.8135 275.904 cv
28.5735 275.344 28.9335 274.584 28.9335 273.604 cv
28.9335 272.644 28.5735 271.884 27.8135 271.324 cv
27.0535 270.764 26.0335 270.484 24.7135 270.484 cv
23.4335 270.484 22.3935 270.764 21.6335 271.324 cv
20.8735 271.884 20.4935 272.644 20.4935 273.604 cv
18.9735 273.604 mo
18.9735 272.044 19.4935 270.824 20.4935 269.924 cv
21.5135 269.044 22.9135 268.584 24.7135 268.584 cv
26.5135 268.584 27.9135 269.044 28.9135 269.924 cv
29.9335 270.824 30.4335 272.044 30.4335 273.604 cv
30.4335 275.184 29.9335 276.424 28.9135 277.304 cv
27.9135 278.184 26.5135 278.624 24.7135 278.624 cv
22.9135 278.624 21.5135 278.184 20.4935 277.304 cv
19.4935 276.424 18.9735 275.184 18.9735 273.604 cv
f
20.9135 259.264 mo
20.7935 259.464 20.7135 259.684 20.6535 259.924 cv
20.6135 260.164 20.5735 260.424 20.5735 260.704 cv
20.5735 261.724 20.9135 262.504 21.5735 263.044 cv
22.2335 263.604 23.1735 263.864 24.4135 263.864 cv
30.1735 263.864 li
30.1735 265.664 li
19.2335 265.664 li
19.2335 263.864 li
20.9335 263.864 li
20.2735 263.504 19.7735 263.004 19.4535 262.404 cv
19.1335 261.804 18.9735 261.064 18.9735 260.184 cv
18.9735 260.064 18.9935 259.924 18.9935 259.764 cv
19.0135 259.624 19.0335 259.464 19.0735 259.264 cv
20.9135 259.264 li
f
1.5 lw
2 lc
144.903 86.3757 mo
154.741 122.48 li
164.579 137.886 li
174.417 146.265 li
184.255 150.539 li
194.093 155.596 li
203.931 156.285 li
213.769 158.191 li
223.607 160.699 li
233.445 163.774 li
243.283 164.134 li
253.121 166.905 li
262.959 168.569 li
272.797 171.475 li
282.635 172.391 li
292.473 174.179 li
302.311 174.268 li
312.149 175.256 li
321.987 177.424 li
331.825 176.999 li
341.663 179.611 li
351.501 178.446 li
361.339 179.834 li
371.177 179.216 li
381.015 180.547 li
390.853 180.162 li
400.691 179.534 li
410.529 181.249 li
420.367 180.886 li
430.205 180.439 li
440.043 183.196 li
449.881 182.132 li
459.719 183.024 li
469.557 184.145 li
479.396 183.785 li
489.234 184.601 li
499.072 184.063 li
508.91 183.098 li
518.748 185.923 li
528.586 184.869 li
538.424 185.444 li
548.262 184.903 li
558.1 185.798 li
567.938 186.193 li
577.776 188.255 li
587.614 188.194 li
597.452 188.391 li
607.29 187.144 li
617.128 188.694 li
626.966 187.597 li
636.804 188.151 li
646.642 190.881 li
656.48 189.985 li
666.318 189.484 li
676.156 189.566 li
685.994 189.352 li
695.832 189.966 li
705.67 192.053 li
715.508 192.279 li
725.346 191.357 li
735.184 191.231 li
745.022 190.745 li
754.86 191.859 li
764.698 192.213 li
774.536 193.395 li
784.374 193.428 li
794.212 192.679 li
804.05 193.375 li
813.888 193.607 li
823.726 193.69 li
833.564 194.383 li
843.402 194.35 li
853.24 193.143 li
863.078 194.818 li
872.916 194.57 li
882.754 194.033 li
892.592 194.653 li
902.43 195.683 li
912.268 194.475 li
922.106 196.974 li
931.944 196.551 li
941.782 195.291 li
951.62 196.503 li
961.458 195.746 li
971.296 196.944 li
981.134 196.793 li
990.972 196.693 li
1000.81 196.915 li
1010.65 197.769 li
1020.49 197.321 li
1030.32 197.293 li
1040.16 198.019 li
1050 196.684 li
1059.84 197.327 li
1069.68 197.623 li
1079.51 198.916 li
1089.35 198.783 li
1099.19 198.743 li
1109.03 199.177 li
1118.87 198.749 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
144.903 291.611 mo
154.741 308.877 li
164.579 332.389 li
174.417 352.461 li
184.255 366.213 li
194.093 376.835 li
203.931 383.082 li
213.769 389.072 li
223.607 394.541 li
233.445 397.224 li
243.283 399.566 li
253.121 401.331 li
262.959 403.296 li
272.797 405.832 li
282.635 406.443 li
292.473 407.626 li
302.311 408.966 li
312.149 409.128 li
321.987 409.969 li
331.825 410.015 li
341.663 411.24 li
351.501 411.409 li
361.339 411.833 li
371.177 411.963 li
381.015 411.546 li
390.853 412.188 li
400.691 411.998 li
410.529 412.727 li
420.367 412.857 li
430.205 411.768 li
440.043 413.075 li
449.881 413.581 li
459.719 414.011 li
469.557 414.127 li
479.396 414.12 li
489.234 413.514 li
499.072 413.517 li
508.91 413.813 li
518.748 414.744 li
528.586 415.838 li
538.424 415.091 li
548.262 415.327 li
558.1 415.261 li
567.938 414.873 li
577.776 414.819 li
587.614 414.985 li
597.452 413.78 li
607.29 414.872 li
617.128 415.78 li
626.966 416.279 li
636.804 415.521 li
646.642 415.453 li
656.48 415.687 li
666.318 416.76 li
676.156 416.319 li
685.994 417.04 li
695.832 416.729 li
705.67 416.184 li
715.508 416.547 li
725.346 416.002 li
735.184 416.361 li
745.022 416.748 li
754.86 417.38 li
764.698 416.675 li
774.536 416.794 li
784.374 417.592 li
794.212 416.475 li
804.05 417.19 li
813.888 416.866 li
823.726 416.958 li
833.564 416.642 li
843.402 416.409 li
853.24 417.969 li
863.078 416.548 li
872.916 418.153 li
882.754 417.017 li
892.592 417.933 li
902.43 417.671 li
912.268 417.527 li
922.106 417.781 li
931.944 418.532 li
941.782 418.05 li
951.62 417.685 li
961.458 418.394 li
971.296 417.333 li
981.134 417.454 li
990.972 418.108 li
1000.81 418.116 li
1010.65 419.097 li
1020.49 417.624 li
1030.32 418.91 li
1040.16 418.835 li
1050 417.707 li
1059.84 417.931 li
1069.68 418.819 li
1079.51 418.513 li
1089.35 418.639 li
1099.19 418.599 li
1109.03 418.664 li
1118.87 418.071 li
@
gsave
141.403 295.111 mo
148.403 295.111 li
148.403 288.111 li
141.403 288.111 li
141.403 295.111 li
clp
141.903 294.611 mo
147.903 288.611 li
141.903 288.611 mo
147.903 294.611 li
f
1 lw
0 lc
141.903 294.611 mo
147.903 288.611 li
141.903 288.611 mo
147.903 294.611 li
@
grestore
gsave
151.241 312.377 mo
158.241 312.377 li
158.241 305.376 li
151.241 305.376 li
151.241 312.377 li
clp
151.741 311.877 mo
157.741 305.877 li
151.741 305.877 mo
157.741 311.877 li
f
1 lw
0 lc
151.741 311.877 mo
157.741 305.877 li
151.741 305.877 mo
157.741 311.877 li
@
grestore
gsave
161.079 335.889 mo
168.079 335.889 li
168.079 328.889 li
161.079 328.889 li
161.079 335.889 li
clp
161.579 335.389 mo
167.579 329.389 li
161.579 329.389 mo
167.579 335.389 li
f
1 lw
0 lc
161.579 335.389 mo
167.579 329.389 li
161.579 329.389 mo
167.579 335.389 li
@
grestore
gsave
170.917 355.961 mo
177.917 355.961 li
177.917 348.961 li
170.917 348.961 li
170.917 355.961 li
clp
171.417 355.461 mo
177.417 349.461 li
171.417 349.461 mo
177.417 355.461 li
f
1 lw
0 lc
171.417 355.461 mo
177.417 349.461 li
171.417 349.461 mo
177.417 355.461 li
@
grestore
gsave
180.755 369.713 mo
187.755 369.713 li
187.755 362.713 li
180.755 362.713 li
180.755 369.713 li
clp
181.255 369.213 mo
187.255 363.213 li
181.255 363.213 mo
187.255 369.213 li
f
1 lw
0 lc
181.255 369.213 mo
187.255 363.213 li
181.255 363.213 mo
187.255 369.213 li
@
grestore
gsave
190.593 380.335 mo
197.593 380.335 li
197.593 373.335 li
190.593 373.335 li
190.593 380.335 li
clp
191.093 379.835 mo
197.093 373.835 li
191.093 373.835 mo
197.093 379.835 li
f
1 lw
0 lc
191.093 379.835 mo
197.093 373.835 li
191.093 373.835 mo
197.093 379.835 li
@
grestore
gsave
200.431 386.582 mo
207.431 386.582 li
207.431 379.582 li
200.431 379.582 li
200.431 386.582 li
clp
200.931 386.082 mo
206.931 380.082 li
200.931 380.082 mo
206.931 386.082 li
f
1 lw
0 lc
200.931 386.082 mo
206.931 380.082 li
200.931 380.082 mo
206.931 386.082 li
@
grestore
gsave
210.269 392.572 mo
217.269 392.572 li
217.269 385.572 li
210.269 385.572 li
210.269 392.572 li
clp
210.769 392.072 mo
216.769 386.072 li
210.769 386.072 mo
216.769 392.072 li
f
1 lw
0 lc
210.769 392.072 mo
216.769 386.072 li
210.769 386.072 mo
216.769 392.072 li
@
grestore
gsave
220.107 398.041 mo
227.107 398.041 li
227.107 391.041 li
220.107 391.041 li
220.107 398.041 li
clp
220.607 397.541 mo
226.607 391.541 li
220.607 391.541 mo
226.607 397.541 li
f
1 lw
0 lc
220.607 397.541 mo
226.607 391.541 li
220.607 391.541 mo
226.607 397.541 li
@
grestore
gsave
229.945 400.724 mo
236.945 400.724 li
236.945 393.724 li
229.945 393.724 li
229.945 400.724 li
clp
230.445 400.224 mo
236.445 394.224 li
230.445 394.224 mo
236.445 400.224 li
f
1 lw
0 lc
230.445 400.224 mo
236.445 394.224 li
230.445 394.224 mo
236.445 400.224 li
@
grestore
gsave
239.783 403.066 mo
246.783 403.066 li
246.783 396.066 li
239.783 396.066 li
239.783 403.066 li
clp
240.283 402.566 mo
246.283 396.566 li
240.283 396.566 mo
246.283 402.566 li
f
1 lw
0 lc
240.283 402.566 mo
246.283 396.566 li
240.283 396.566 mo
246.283 402.566 li
@
grestore
gsave
249.621 404.831 mo
256.621 404.831 li
256.621 397.831 li
249.621 397.831 li
249.621 404.831 li
clp
250.121 404.331 mo
256.121 398.331 li
250.121 398.331 mo
256.121 404.331 li
f
1 lw
0 lc
250.121 404.331 mo
256.121 398.331 li
250.121 398.331 mo
256.121 404.331 li
@
grestore
gsave
259.459 406.796 mo
266.459 406.796 li
266.459 399.796 li
259.459 399.796 li
259.459 406.796 li
clp
259.959 406.296 mo
265.959 400.296 li
259.959 400.296 mo
265.959 406.296 li
f
1 lw
0 lc
259.959 406.296 mo
265.959 400.296 li
259.959 400.296 mo
265.959 406.296 li
@
grestore
gsave
269.297 409.332 mo
276.297 409.332 li
276.297 402.332 li
269.297 402.332 li
269.297 409.332 li
clp
269.797 408.832 mo
275.797 402.832 li
269.797 402.832 mo
275.797 408.832 li
f
1 lw
0 lc
269.797 408.832 mo
275.797 402.832 li
269.797 402.832 mo
275.797 408.832 li
@
grestore
gsave
279.135 409.943 mo
286.135 409.943 li
286.135 402.943 li
279.135 402.943 li
279.135 409.943 li
clp
279.635 409.443 mo
285.635 403.443 li
279.635 403.443 mo
285.635 409.443 li
f
1 lw
0 lc
279.635 409.443 mo
285.635 403.443 li
279.635 403.443 mo
285.635 409.443 li
@
grestore
gsave
288.973 411.126 mo
295.973 411.126 li
295.973 404.126 li
288.973 404.126 li
288.973 411.126 li
clp
289.473 410.626 mo
295.473 404.626 li
289.473 404.626 mo
295.473 410.626 li
f
1 lw
0 lc
289.473 410.626 mo
295.473 404.626 li
289.473 404.626 mo
295.473 410.626 li
@
grestore
gsave
298.811 412.466 mo
305.811 412.466 li
305.811 405.466 li
298.811 405.466 li
298.811 412.466 li
clp
299.311 411.966 mo
305.311 405.966 li
299.311 405.966 mo
305.311 411.966 li
f
1 lw
0 lc
299.311 411.966 mo
305.311 405.966 li
299.311 405.966 mo
305.311 411.966 li
@
grestore
gsave
308.649 412.628 mo
315.649 412.628 li
315.649 405.628 li
308.649 405.628 li
308.649 412.628 li
clp
309.149 412.128 mo
315.149 406.128 li
309.149 406.128 mo
315.149 412.128 li
f
1 lw
0 lc
309.149 412.128 mo
315.149 406.128 li
309.149 406.128 mo
315.149 412.128 li
@
grestore
gsave
318.487 413.469 mo
325.487 413.469 li
325.487 406.469 li
318.487 406.469 li
318.487 413.469 li
clp
318.987 412.969 mo
324.987 406.969 li
318.987 406.969 mo
324.987 412.969 li
f
1 lw
0 lc
318.987 412.969 mo
324.987 406.969 li
318.987 406.969 mo
324.987 412.969 li
@
grestore
gsave
328.325 413.515 mo
335.325 413.515 li
335.325 406.515 li
328.325 406.515 li
328.325 413.515 li
clp
328.825 413.015 mo
334.825 407.015 li
328.825 407.015 mo
334.825 413.015 li
f
1 lw
0 lc
328.825 413.015 mo
334.825 407.015 li
328.825 407.015 mo
334.825 413.015 li
@
grestore
gsave
338.163 414.74 mo
345.163 414.74 li
345.163 407.74 li
338.163 407.74 li
338.163 414.74 li
clp
338.663 414.24 mo
344.663 408.24 li
338.663 408.24 mo
344.663 414.24 li
f
1 lw
0 lc
338.663 414.24 mo
344.663 408.24 li
338.663 408.24 mo
344.663 414.24 li
@
grestore
gsave
348.001 414.91 mo
355.001 414.91 li
355.001 407.91 li
348.001 407.91 li
348.001 414.91 li
clp
348.501 414.41 mo
354.501 408.41 li
348.501 408.41 mo
354.501 414.41 li
f
1 lw
0 lc
348.501 414.41 mo
354.501 408.41 li
348.501 408.41 mo
354.501 414.41 li
@
grestore
gsave
357.839 415.333 mo
364.839 415.333 li
364.839 408.333 li
357.839 408.333 li
357.839 415.333 li
clp
358.339 414.833 mo
364.339 408.833 li
358.339 408.833 mo
364.339 414.833 li
f
1 lw
0 lc
358.339 414.833 mo
364.339 408.833 li
358.339 408.833 mo
364.339 414.833 li
@
grestore
gsave
367.677 415.463 mo
374.677 415.463 li
374.677 408.463 li
367.677 408.463 li
367.677 415.463 li
clp
368.177 414.963 mo
374.177 408.963 li
368.177 408.963 mo
374.177 414.963 li
f
1 lw
0 lc
368.177 414.963 mo
374.177 408.963 li
368.177 408.963 mo
374.177 414.963 li
@
grestore
gsave
377.515 415.046 mo
384.515 415.046 li
384.515 408.046 li
377.515 408.046 li
377.515 415.046 li
clp
378.015 414.546 mo
384.015 408.546 li
378.015 408.546 mo
384.015 414.546 li
f
1 lw
0 lc
378.015 414.546 mo
384.015 408.546 li
378.015 408.546 mo
384.015 414.546 li
@
grestore
gsave
387.353 415.688 mo
394.353 415.688 li
394.353 408.688 li
387.353 408.688 li
387.353 415.688 li
clp
387.853 415.188 mo
393.853 409.188 li
387.853 409.188 mo
393.853 415.188 li
f
1 lw
0 lc
387.853 415.188 mo
393.853 409.188 li
387.853 409.188 mo
393.853 415.188 li
@
grestore
gsave
397.191 415.498 mo
404.191 415.498 li
404.191 408.498 li
397.191 408.498 li
397.191 415.498 li
clp
397.691 414.998 mo
403.691 408.998 li
397.691 408.998 mo
403.691 414.998 li
f
1 lw
0 lc
397.691 414.998 mo
403.691 408.998 li
397.691 408.998 mo
403.691 414.998 li
@
grestore
gsave
407.029 416.227 mo
414.029 416.227 li
414.029 409.227 li
407.029 409.227 li
407.029 416.227 li
clp
407.529 415.727 mo
413.529 409.727 li
407.529 409.727 mo
413.529 415.727 li
f
1 lw
0 lc
407.529 415.727 mo
413.529 409.727 li
407.529 409.727 mo
413.529 415.727 li
@
grestore
gsave
416.867 416.357 mo
423.867 416.357 li
423.867 409.357 li
416.867 409.357 li
416.867 416.357 li
clp
417.367 415.857 mo
423.367 409.857 li
417.367 409.857 mo
423.367 415.857 li
f
1 lw
0 lc
417.367 415.857 mo
423.367 409.857 li
417.367 409.857 mo
423.367 415.857 li
@
grestore
gsave
426.705 415.268 mo
433.705 415.268 li
433.705 408.267 li
426.705 408.267 li
426.705 415.268 li
clp
427.205 414.768 mo
433.205 408.768 li
427.205 408.768 mo
433.205 414.768 li
f
1 lw
0 lc
427.205 414.768 mo
433.205 408.768 li
427.205 408.768 mo
433.205 414.768 li
@
grestore
gsave
436.543 416.575 mo
443.543 416.575 li
443.543 409.575 li
436.543 409.575 li
436.543 416.575 li
clp
437.043 416.075 mo
443.043 410.075 li
437.043 410.075 mo
443.043 416.075 li
f
1 lw
0 lc
437.043 416.075 mo
443.043 410.075 li
437.043 410.075 mo
443.043 416.075 li
@
grestore
gsave
446.381 417.081 mo
453.381 417.081 li
453.381 410.082 li
446.381 410.082 li
446.381 417.081 li
clp
446.881 416.581 mo
452.881 410.581 li
446.881 410.581 mo
452.881 416.581 li
f
1 lw
0 lc
446.881 416.581 mo
452.881 410.581 li
446.881 410.581 mo
452.881 416.581 li
@
grestore
gsave
456.219 417.511 mo
463.219 417.511 li
463.219 410.511 li
456.219 410.511 li
456.219 417.511 li
clp
456.719 417.011 mo
462.719 411.011 li
456.719 411.011 mo
462.719 417.011 li
f
1 lw
0 lc
456.719 417.011 mo
462.719 411.011 li
456.719 411.011 mo
462.719 417.011 li
@
grestore
gsave
466.058 417.627 mo
473.057 417.627 li
473.057 410.627 li
466.058 410.627 li
466.058 417.627 li
clp
466.557 417.127 mo
472.557 411.127 li
466.557 411.127 mo
472.557 417.127 li
f
1 lw
0 lc
466.557 417.127 mo
472.557 411.127 li
466.557 411.127 mo
472.557 417.127 li
@
grestore
gsave
475.896 417.62 mo
482.896 417.62 li
482.896 410.62 li
475.896 410.62 li
475.896 417.62 li
clp
476.395 417.12 mo
482.395 411.12 li
476.395 411.12 mo
482.395 417.12 li
f
1 lw
0 lc
476.395 417.12 mo
482.395 411.12 li
476.395 411.12 mo
482.395 417.12 li
@
grestore
gsave
485.733 417.014 mo
492.734 417.014 li
492.734 410.014 li
485.733 410.014 li
485.733 417.014 li
clp
486.233 416.514 mo
492.233 410.514 li
486.233 410.514 mo
492.233 416.514 li
f
1 lw
0 lc
486.233 416.514 mo
492.233 410.514 li
486.233 410.514 mo
492.233 416.514 li
@
grestore
gsave
495.571 417.017 mo
502.571 417.017 li
502.571 410.017 li
495.571 410.017 li
495.571 417.017 li
clp
496.071 416.517 mo
502.071 410.517 li
496.071 410.517 mo
502.071 416.517 li
f
1 lw
0 lc
496.071 416.517 mo
502.071 410.517 li
496.071 410.517 mo
502.071 416.517 li
@
grestore
gsave
505.409 417.313 mo
512.409 417.313 li
512.409 410.313 li
505.409 410.313 li
505.409 417.313 li
clp
505.909 416.813 mo
511.909 410.813 li
505.909 410.813 mo
511.909 416.813 li
f
1 lw
0 lc
505.909 416.813 mo
511.909 410.813 li
505.909 410.813 mo
511.909 416.813 li
@
grestore
gsave
515.247 418.244 mo
522.247 418.244 li
522.247 411.244 li
515.247 411.244 li
515.247 418.244 li
clp
515.747 417.744 mo
521.747 411.744 li
515.747 411.744 mo
521.747 417.744 li
f
1 lw
0 lc
515.747 417.744 mo
521.747 411.744 li
515.747 411.744 mo
521.747 417.744 li
@
grestore
gsave
525.086 419.338 mo
532.086 419.338 li
532.086 412.338 li
525.086 412.338 li
525.086 419.338 li
clp
525.586 418.838 mo
531.586 412.838 li
525.586 412.838 mo
531.586 418.838 li
f
1 lw
0 lc
525.586 418.838 mo
531.586 412.838 li
525.586 412.838 mo
531.586 418.838 li
@
grestore
gsave
534.924 418.591 mo
541.924 418.591 li
541.924 411.591 li
534.924 411.591 li
534.924 418.591 li
clp
535.424 418.091 mo
541.424 412.091 li
535.424 412.091 mo
541.424 418.091 li
f
1 lw
0 lc
535.424 418.091 mo
541.424 412.091 li
535.424 412.091 mo
541.424 418.091 li
@
grestore
gsave
544.762 418.827 mo
551.762 418.827 li
551.762 411.827 li
544.762 411.827 li
544.762 418.827 li
clp
545.262 418.327 mo
551.262 412.327 li
545.262 412.327 mo
551.262 418.327 li
f
1 lw
0 lc
545.262 418.327 mo
551.262 412.327 li
545.262 412.327 mo
551.262 418.327 li
@
grestore
gsave
554.599 418.761 mo
561.6 418.761 li
561.6 411.761 li
554.599 411.761 li
554.599 418.761 li
clp
555.1 418.261 mo
561.1 412.261 li
555.1 412.261 mo
561.1 418.261 li
f
1 lw
0 lc
555.1 418.261 mo
561.1 412.261 li
555.1 412.261 mo
561.1 418.261 li
@
grestore
gsave
564.437 418.373 mo
571.437 418.373 li
571.437 411.373 li
564.437 411.373 li
564.437 418.373 li
clp
564.938 417.873 mo
570.938 411.873 li
564.938 411.873 mo
570.938 417.873 li
f
1 lw
0 lc
564.938 417.873 mo
570.938 411.873 li
564.938 411.873 mo
570.938 417.873 li
@
grestore
gsave
574.276 418.319 mo
581.275 418.319 li
581.275 411.319 li
574.276 411.319 li
574.276 418.319 li
clp
574.776 417.819 mo
580.776 411.819 li
574.776 411.819 mo
580.776 417.819 li
f
1 lw
0 lc
574.776 417.819 mo
580.776 411.819 li
574.776 411.819 mo
580.776 417.819 li
@
grestore
gsave
584.114 418.485 mo
591.114 418.485 li
591.114 411.485 li
584.114 411.485 li
584.114 418.485 li
clp
584.614 417.985 mo
590.614 411.985 li
584.614 411.985 mo
590.614 417.985 li
f
1 lw
0 lc
584.614 417.985 mo
590.614 411.985 li
584.614 411.985 mo
590.614 417.985 li
@
grestore
gsave
593.952 417.28 mo
600.952 417.28 li
600.952 410.28 li
593.952 410.28 li
593.952 417.28 li
clp
594.452 416.78 mo
600.452 410.78 li
594.452 410.78 mo
600.452 416.78 li
f
1 lw
0 lc
594.452 416.78 mo
600.452 410.78 li
594.452 410.78 mo
600.452 416.78 li
@
grestore
gsave
603.79 418.372 mo
610.79 418.372 li
610.79 411.372 li
603.79 411.372 li
603.79 418.372 li
clp
604.29 417.872 mo
610.29 411.872 li
604.29 411.872 mo
610.29 417.872 li
f
1 lw
0 lc
604.29 417.872 mo
610.29 411.872 li
604.29 411.872 mo
610.29 417.872 li
@
grestore
gsave
613.628 419.28 mo
620.628 419.28 li
620.628 412.28 li
613.628 412.28 li
613.628 419.28 li
clp
614.128 418.78 mo
620.128 412.78 li
614.128 412.78 mo
620.128 418.78 li
f
1 lw
0 lc
614.128 418.78 mo
620.128 412.78 li
614.128 412.78 mo
620.128 418.78 li
@
grestore
gsave
623.465 419.779 mo
630.466 419.779 li
630.466 412.779 li
623.465 412.779 li
623.465 419.779 li
clp
623.966 419.279 mo
629.966 413.279 li
623.966 413.279 mo
629.966 419.279 li
f
1 lw
0 lc
623.966 419.279 mo
629.966 413.279 li
623.966 413.279 mo
629.966 419.279 li
@
grestore
gsave
633.304 419.021 mo
640.303 419.021 li
640.303 412.021 li
633.304 412.021 li
633.304 419.021 li
clp
633.804 418.521 mo
639.804 412.521 li
633.804 412.521 mo
639.804 418.521 li
f
1 lw
0 lc
633.804 418.521 mo
639.804 412.521 li
633.804 412.521 mo
639.804 418.521 li
@
grestore
gsave
643.142 418.953 mo
650.142 418.953 li
650.142 411.953 li
643.142 411.953 li
643.142 418.953 li
clp
643.642 418.453 mo
649.642 412.453 li
643.642 412.453 mo
649.642 418.453 li
f
1 lw
0 lc
643.642 418.453 mo
649.642 412.453 li
643.642 412.453 mo
649.642 418.453 li
@
grestore
gsave
652.98 419.187 mo
659.98 419.187 li
659.98 412.187 li
652.98 412.187 li
652.98 419.187 li
clp
653.48 418.687 mo
659.48 412.687 li
653.48 412.687 mo
659.48 418.687 li
f
1 lw
0 lc
653.48 418.687 mo
659.48 412.687 li
653.48 412.687 mo
659.48 418.687 li
@
grestore
gsave
662.818 420.26 mo
669.818 420.26 li
669.818 413.261 li
662.818 413.261 li
662.818 420.26 li
clp
663.318 419.76 mo
669.318 413.76 li
663.318 413.76 mo
669.318 419.76 li
f
1 lw
0 lc
663.318 419.76 mo
669.318 413.76 li
663.318 413.76 mo
669.318 419.76 li
@
grestore
gsave
672.656 419.819 mo
679.656 419.819 li
679.656 412.819 li
672.656 412.819 li
672.656 419.819 li
clp
673.156 419.318 mo
679.156 413.318 li
673.156 413.318 mo
679.156 419.318 li
f
1 lw
0 lc
673.156 419.318 mo
679.156 413.318 li
673.156 413.318 mo
679.156 419.318 li
@
grestore
gsave
682.494 420.54 mo
689.494 420.54 li
689.494 413.54 li
682.494 413.54 li
682.494 420.54 li
clp
682.994 420.04 mo
688.994 414.04 li
682.994 414.04 mo
688.994 420.04 li
f
1 lw
0 lc
682.994 420.04 mo
688.994 414.04 li
682.994 414.04 mo
688.994 420.04 li
@
grestore
gsave
692.332 420.229 mo
699.332 420.229 li
699.332 413.229 li
692.332 413.229 li
692.332 420.229 li
clp
692.832 419.729 mo
698.832 413.729 li
692.832 413.729 mo
698.832 419.729 li
f
1 lw
0 lc
692.832 419.729 mo
698.832 413.729 li
692.832 413.729 mo
698.832 419.729 li
@
grestore
gsave
702.17 419.684 mo
709.17 419.684 li
709.17 412.684 li
702.17 412.684 li
702.17 419.684 li
clp
702.67 419.184 mo
708.67 413.184 li
702.67 413.184 mo
708.67 419.184 li
f
1 lw
0 lc
702.67 419.184 mo
708.67 413.184 li
702.67 413.184 mo
708.67 419.184 li
@
grestore
gsave
712.008 420.047 mo
719.008 420.047 li
719.008 413.047 li
712.008 413.047 li
712.008 420.047 li
clp
712.508 419.547 mo
718.508 413.547 li
712.508 413.547 mo
718.508 419.547 li
f
1 lw
0 lc
712.508 419.547 mo
718.508 413.547 li
712.508 413.547 mo
718.508 419.547 li
@
grestore
gsave
721.846 419.502 mo
728.846 419.502 li
728.846 412.502 li
721.846 412.502 li
721.846 419.502 li
clp
722.346 419.002 mo
728.346 413.002 li
722.346 413.002 mo
728.346 419.002 li
f
1 lw
0 lc
722.346 419.002 mo
728.346 413.002 li
722.346 413.002 mo
728.346 419.002 li
@
grestore
gsave
731.684 419.861 mo
738.684 419.861 li
738.684 412.862 li
731.684 412.862 li
731.684 419.861 li
clp
732.184 419.361 mo
738.184 413.361 li
732.184 413.361 mo
738.184 419.361 li
f
1 lw
0 lc
732.184 419.361 mo
738.184 413.361 li
732.184 413.361 mo
738.184 419.361 li
@
grestore
gsave
741.522 420.248 mo
748.522 420.248 li
748.522 413.248 li
741.522 413.248 li
741.522 420.248 li
clp
742.022 419.748 mo
748.022 413.748 li
742.022 413.748 mo
748.022 419.748 li
f
1 lw
0 lc
742.022 419.748 mo
748.022 413.748 li
742.022 413.748 mo
748.022 419.748 li
@
grestore
gsave
751.36 420.88 mo
758.36 420.88 li
758.36 413.88 li
751.36 413.88 li
751.36 420.88 li
clp
751.86 420.38 mo
757.86 414.38 li
751.86 414.38 mo
757.86 420.38 li
f
1 lw
0 lc
751.86 420.38 mo
757.86 414.38 li
751.86 414.38 mo
757.86 420.38 li
@
grestore
gsave
761.198 420.175 mo
768.198 420.175 li
768.198 413.175 li
761.198 413.175 li
761.198 420.175 li
clp
761.698 419.675 mo
767.698 413.675 li
761.698 413.675 mo
767.698 419.675 li
f
1 lw
0 lc
761.698 419.675 mo
767.698 413.675 li
761.698 413.675 mo
767.698 419.675 li
@
grestore
gsave
771.036 420.294 mo
778.036 420.294 li
778.036 413.294 li
771.036 413.294 li
771.036 420.294 li
clp
771.536 419.794 mo
777.536 413.794 li
771.536 413.794 mo
777.536 419.794 li
f
1 lw
0 lc
771.536 419.794 mo
777.536 413.794 li
771.536 413.794 mo
777.536 419.794 li
@
grestore
gsave
780.874 421.092 mo
787.874 421.092 li
787.874 414.092 li
780.874 414.092 li
780.874 421.092 li
clp
781.374 420.592 mo
787.374 414.592 li
781.374 414.592 mo
787.374 420.592 li
f
1 lw
0 lc
781.374 420.592 mo
787.374 414.592 li
781.374 414.592 mo
787.374 420.592 li
@
grestore
gsave
790.712 419.975 mo
797.712 419.975 li
797.712 412.975 li
790.712 412.975 li
790.712 419.975 li
clp
791.212 419.475 mo
797.212 413.475 li
791.212 413.475 mo
797.212 419.475 li
f
1 lw
0 lc
791.212 419.475 mo
797.212 413.475 li
791.212 413.475 mo
797.212 419.475 li
@
grestore
gsave
800.55 420.69 mo
807.55 420.69 li
807.55 413.69 li
800.55 413.69 li
800.55 420.69 li
clp
801.05 420.19 mo
807.05 414.19 li
801.05 414.19 mo
807.05 420.19 li
f
1 lw
0 lc
801.05 420.19 mo
807.05 414.19 li
801.05 414.19 mo
807.05 420.19 li
@
grestore
gsave
810.388 420.366 mo
817.388 420.366 li
817.388 413.366 li
810.388 413.366 li
810.388 420.366 li
clp
810.888 419.866 mo
816.888 413.866 li
810.888 413.866 mo
816.888 419.866 li
f
1 lw
0 lc
810.888 419.866 mo
816.888 413.866 li
810.888 413.866 mo
816.888 419.866 li
@
grestore
gsave
820.226 420.458 mo
827.226 420.458 li
827.226 413.458 li
820.226 413.458 li
820.226 420.458 li
clp
820.726 419.958 mo
826.726 413.958 li
820.726 413.958 mo
826.726 419.958 li
f
1 lw
0 lc
820.726 419.958 mo
826.726 413.958 li
820.726 413.958 mo
826.726 419.958 li
@
grestore
gsave
830.064 420.142 mo
837.064 420.142 li
837.064 413.142 li
830.064 413.142 li
830.064 420.142 li
clp
830.564 419.642 mo
836.564 413.642 li
830.564 413.642 mo
836.564 419.642 li
f
1 lw
0 lc
830.564 419.642 mo
836.564 413.642 li
830.564 413.642 mo
836.564 419.642 li
@
grestore
gsave
839.902 419.909 mo
846.902 419.909 li
846.902 412.909 li
839.902 412.909 li
839.902 419.909 li
clp
840.402 419.409 mo
846.402 413.409 li
840.402 413.409 mo
846.402 419.409 li
f
1 lw
0 lc
840.402 419.409 mo
846.402 413.409 li
840.402 413.409 mo
846.402 419.409 li
@
grestore
gsave
849.74 421.469 mo
856.74 421.469 li
856.74 414.469 li
849.74 414.469 li
849.74 421.469 li
clp
850.24 420.969 mo
856.24 414.969 li
850.24 414.969 mo
856.24 420.969 li
f
1 lw
0 lc
850.24 420.969 mo
856.24 414.969 li
850.24 414.969 mo
856.24 420.969 li
@
grestore
gsave
859.578 420.048 mo
866.578 420.048 li
866.578 413.048 li
859.578 413.048 li
859.578 420.048 li
clp
860.078 419.548 mo
866.078 413.548 li
860.078 413.548 mo
866.078 419.548 li
f
1 lw
0 lc
860.078 419.548 mo
866.078 413.548 li
860.078 413.548 mo
866.078 419.548 li
@
grestore
gsave
869.416 421.653 mo
876.416 421.653 li
876.416 414.653 li
869.416 414.653 li
869.416 421.653 li
clp
869.916 421.153 mo
875.916 415.153 li
869.916 415.153 mo
875.916 421.153 li
f
1 lw
0 lc
869.916 421.153 mo
875.916 415.153 li
869.916 415.153 mo
875.916 421.153 li
@
grestore
gsave
879.254 420.517 mo
886.254 420.517 li
886.254 413.517 li
879.254 413.517 li
879.254 420.517 li
clp
879.754 420.017 mo
885.754 414.017 li
879.754 414.017 mo
885.754 420.017 li
f
1 lw
0 lc
879.754 420.017 mo
885.754 414.017 li
879.754 414.017 mo
885.754 420.017 li
@
grestore
gsave
889.092 421.433 mo
896.092 421.433 li
896.092 414.433 li
889.092 414.433 li
889.092 421.433 li
clp
889.592 420.933 mo
895.592 414.933 li
889.592 414.933 mo
895.592 420.933 li
f
1 lw
0 lc
889.592 420.933 mo
895.592 414.933 li
889.592 414.933 mo
895.592 420.933 li
@
grestore
gsave
898.93 421.171 mo
905.93 421.171 li
905.93 414.171 li
898.93 414.171 li
898.93 421.171 li
clp
899.43 420.671 mo
905.43 414.671 li
899.43 414.671 mo
905.43 420.671 li
f
1 lw
0 lc
899.43 420.671 mo
905.43 414.671 li
899.43 414.671 mo
905.43 420.671 li
@
grestore
gsave
908.768 421.027 mo
915.768 421.027 li
915.768 414.027 li
908.768 414.027 li
908.768 421.027 li
clp
909.268 420.527 mo
915.268 414.527 li
909.268 414.527 mo
915.268 420.527 li
f
1 lw
0 lc
909.268 420.527 mo
915.268 414.527 li
909.268 414.527 mo
915.268 420.527 li
@
grestore
gsave
918.606 421.281 mo
925.606 421.281 li
925.606 414.281 li
918.606 414.281 li
918.606 421.281 li
clp
919.106 420.781 mo
925.106 414.781 li
919.106 414.781 mo
925.106 420.781 li
f
1 lw
0 lc
919.106 420.781 mo
925.106 414.781 li
919.106 414.781 mo
925.106 420.781 li
@
grestore
gsave
928.444 422.032 mo
935.444 422.032 li
935.444 415.032 li
928.444 415.032 li
928.444 422.032 li
clp
928.944 421.532 mo
934.944 415.532 li
928.944 415.532 mo
934.944 421.532 li
f
1 lw
0 lc
928.944 421.532 mo
934.944 415.532 li
928.944 415.532 mo
934.944 421.532 li
@
grestore
gsave
938.282 421.55 mo
945.282 421.55 li
945.282 414.55 li
938.282 414.55 li
938.282 421.55 li
clp
938.782 421.05 mo
944.782 415.05 li
938.782 415.05 mo
944.782 421.05 li
f
1 lw
0 lc
938.782 421.05 mo
944.782 415.05 li
938.782 415.05 mo
944.782 421.05 li
@
grestore
gsave
948.12 421.185 mo
955.12 421.185 li
955.12 414.185 li
948.12 414.185 li
948.12 421.185 li
clp
948.62 420.685 mo
954.62 414.685 li
948.62 414.685 mo
954.62 420.685 li
f
1 lw
0 lc
948.62 420.685 mo
954.62 414.685 li
948.62 414.685 mo
954.62 420.685 li
@
grestore
gsave
957.958 421.894 mo
964.958 421.894 li
964.958 414.894 li
957.958 414.894 li
957.958 421.894 li
clp
958.458 421.394 mo
964.458 415.394 li
958.458 415.394 mo
964.458 421.394 li
f
1 lw
0 lc
958.458 421.394 mo
964.458 415.394 li
958.458 415.394 mo
964.458 421.394 li
@
grestore
gsave
967.796 420.833 mo
974.796 420.833 li
974.796 413.833 li
967.796 413.833 li
967.796 420.833 li
clp
968.296 420.333 mo
974.296 414.333 li
968.296 414.333 mo
974.296 420.333 li
f
1 lw
0 lc
968.296 420.333 mo
974.296 414.333 li
968.296 414.333 mo
974.296 420.333 li
@
grestore
gsave
977.634 420.954 mo
984.634 420.954 li
984.634 413.954 li
977.634 413.954 li
977.634 420.954 li
clp
978.134 420.454 mo
984.134 414.454 li
978.134 414.454 mo
984.134 420.454 li
f
1 lw
0 lc
978.134 420.454 mo
984.134 414.454 li
978.134 414.454 mo
984.134 420.454 li
@
grestore
gsave
987.472 421.608 mo
994.472 421.608 li
994.472 414.608 li
987.472 414.608 li
987.472 421.608 li
clp
987.972 421.108 mo
993.972 415.108 li
987.972 415.108 mo
993.972 421.108 li
f
1 lw
0 lc
987.972 421.108 mo
993.972 415.108 li
987.972 415.108 mo
993.972 421.108 li
@
grestore
gsave
997.31 421.616 mo
1004.31 421.616 li
1004.31 414.616 li
997.31 414.616 li
997.31 421.616 li
clp
997.81 421.116 mo
1003.81 415.116 li
997.81 415.116 mo
1003.81 421.116 li
f
1 lw
0 lc
997.81 421.116 mo
1003.81 415.116 li
997.81 415.116 mo
1003.81 421.116 li
@
grestore
gsave
1007.15 422.597 mo
1014.15 422.597 li
1014.15 415.597 li
1007.15 415.597 li
1007.15 422.597 li
clp
1007.65 422.097 mo
1013.65 416.097 li
1007.65 416.097 mo
1013.65 422.097 li
f
1 lw
0 lc
1007.65 422.097 mo
1013.65 416.097 li
1007.65 416.097 mo
1013.65 422.097 li
@
grestore
gsave
1016.99 421.124 mo
1023.99 421.124 li
1023.99 414.124 li
1016.99 414.124 li
1016.99 421.124 li
clp
1017.49 420.624 mo
1023.49 414.624 li
1017.49 414.624 mo
1023.49 420.624 li
f
1 lw
0 lc
1017.49 420.624 mo
1023.49 414.624 li
1017.49 414.624 mo
1023.49 420.624 li
@
grestore
gsave
1026.82 422.41 mo
1033.82 422.41 li
1033.82 415.41 li
1026.82 415.41 li
1026.82 422.41 li
clp
1027.32 421.91 mo
1033.32 415.91 li
1027.32 415.91 mo
1033.32 421.91 li
f
1 lw
0 lc
1027.32 421.91 mo
1033.32 415.91 li
1027.32 415.91 mo
1033.32 421.91 li
@
grestore
gsave
1036.66 422.335 mo
1043.66 422.335 li
1043.66 415.335 li
1036.66 415.335 li
1036.66 422.335 li
clp
1037.16 421.835 mo
1043.16 415.835 li
1037.16 415.835 mo
1043.16 421.835 li
f
1 lw
0 lc
1037.16 421.835 mo
1043.16 415.835 li
1037.16 415.835 mo
1043.16 421.835 li
@
grestore
gsave
1046.5 421.207 mo
1053.5 421.207 li
1053.5 414.207 li
1046.5 414.207 li
1046.5 421.207 li
clp
1047 420.707 mo
1053 414.707 li
1047 414.707 mo
1053 420.707 li
f
1 lw
0 lc
1047 420.707 mo
1053 414.707 li
1047 414.707 mo
1053 420.707 li
@
grestore
gsave
1056.34 421.431 mo
1063.34 421.431 li
1063.34 414.431 li
1056.34 414.431 li
1056.34 421.431 li
clp
1056.84 420.931 mo
1062.84 414.931 li
1056.84 414.931 mo
1062.84 420.931 li
f
1 lw
0 lc
1056.84 420.931 mo
1062.84 414.931 li
1056.84 414.931 mo
1062.84 420.931 li
@
grestore
gsave
1066.18 422.319 mo
1073.18 422.319 li
1073.18 415.319 li
1066.18 415.319 li
1066.18 422.319 li
clp
1066.68 421.819 mo
1072.68 415.819 li
1066.68 415.819 mo
1072.68 421.819 li
f
1 lw
0 lc
1066.68 421.819 mo
1072.68 415.819 li
1066.68 415.819 mo
1072.68 421.819 li
@
grestore
gsave
1076.01 422.013 mo
1083.01 422.013 li
1083.01 415.013 li
1076.01 415.013 li
1076.01 422.013 li
clp
1076.51 421.513 mo
1082.51 415.513 li
1076.51 415.513 mo
1082.51 421.513 li
f
1 lw
0 lc
1076.51 421.513 mo
1082.51 415.513 li
1076.51 415.513 mo
1082.51 421.513 li
@
grestore
gsave
1085.85 422.139 mo
1092.85 422.139 li
1092.85 415.139 li
1085.85 415.139 li
1085.85 422.139 li
clp
1086.35 421.639 mo
1092.35 415.639 li
1086.35 415.639 mo
1092.35 421.639 li
f
1 lw
0 lc
1086.35 421.639 mo
1092.35 415.639 li
1086.35 415.639 mo
1092.35 421.639 li
@
grestore
gsave
1095.69 422.099 mo
1102.69 422.099 li
1102.69 415.099 li
1095.69 415.099 li
1095.69 422.099 li
clp
1096.19 421.599 mo
1102.19 415.599 li
1096.19 415.599 mo
1102.19 421.599 li
f
1 lw
0 lc
1096.19 421.599 mo
1102.19 415.599 li
1096.19 415.599 mo
1102.19 421.599 li
@
grestore
gsave
1105.53 422.164 mo
1112.53 422.164 li
1112.53 415.164 li
1105.53 415.164 li
1105.53 422.164 li
clp
1106.03 421.664 mo
1112.03 415.664 li
1106.03 415.664 mo
1112.03 421.664 li
f
1 lw
0 lc
1106.03 421.664 mo
1112.03 415.664 li
1106.03 415.664 mo
1112.03 421.664 li
@
grestore
gsave
1115.37 421.571 mo
1122.37 421.571 li
1122.37 414.571 li
1115.37 414.571 li
1115.37 421.571 li
clp
1115.87 421.071 mo
1121.87 415.071 li
1115.87 415.071 mo
1121.87 421.071 li
f
1 lw
0 lc
1115.87 421.071 mo
1121.87 415.071 li
1115.87 415.071 mo
1121.87 421.071 li
@
grestore
144.903 442.938 mo
154.741 469.165 li
164.579 495.752 li
174.417 509.966 li
184.255 516.688 li
194.093 519.895 li
203.931 521.639 li
213.769 523.062 li
223.607 523.909 li
233.445 524.801 li
243.283 524.546 li
253.121 524.615 li
262.959 524.083 li
272.797 525.141 li
282.635 525.2 li
292.473 525.385 li
302.311 525.584 li
312.149 525.522 li
321.987 526.206 li
331.825 525.175 li
341.663 525.247 li
351.501 525.366 li
361.339 525.542 li
371.177 525.779 li
381.015 525.581 li
390.853 525.207 li
400.691 525.94 li
410.529 525.149 li
420.367 525.821 li
430.205 525.693 li
440.043 525.669 li
449.881 526.159 li
459.719 525.209 li
469.557 526.61 li
479.396 526.153 li
489.234 526.827 li
499.072 526.635 li
508.91 526.054 li
518.748 526.703 li
528.586 526.43 li
538.424 526.777 li
548.262 526.095 li
558.1 526.149 li
567.938 526.422 li
577.776 526.138 li
587.614 526.88 li
597.452 525.824 li
607.29 526.94 li
617.128 526.386 li
626.966 526.235 li
636.804 526.766 li
646.642 526.081 li
656.48 526.653 li
666.318 527.05 li
676.156 526.834 li
685.994 526.537 li
695.832 526.381 li
705.67 527.07 li
715.508 526.89 li
725.346 526.922 li
735.184 527.107 li
745.022 526.806 li
754.86 527.052 li
764.698 527.085 li
774.536 527.557 li
784.374 528.063 li
794.212 526.835 li
804.05 527.192 li
813.888 526.39 li
823.726 526.756 li
833.564 526.113 li
843.402 527.288 li
853.24 527.457 li
863.078 527.137 li
872.916 526.991 li
882.754 526.921 li
892.592 526.749 li
902.43 527.16 li
912.268 527.058 li
922.106 527.399 li
931.944 527.092 li
941.782 527.396 li
951.62 526.961 li
961.458 527.123 li
971.296 527.263 li
981.134 527.435 li
990.972 527.72 li
1000.81 528.022 li
1010.65 527.426 li
1020.49 528.192 li
1030.32 527.455 li
1040.16 527.667 li
1050 528.227 li
1059.84 527.386 li
1069.68 527.379 li
1079.51 526.604 li
1089.35 527.189 li
1099.19 527.316 li
1109.03 526.586 li
1118.87 526.956 li
@
gsave
144.403 446.438 mo
145.403 446.438 li
145.403 439.438 li
144.403 439.438 li
144.403 446.438 li
clp
144.903 445.938 mo
144.903 439.938 li
f
1 lw
0 lc
144.903 445.938 mo
144.903 439.938 li
@
grestore
gsave
154.241 472.665 mo
155.241 472.665 li
155.241 465.665 li
154.241 465.665 li
154.241 472.665 li
clp
154.741 472.165 mo
154.741 466.165 li
f
1 lw
0 lc
154.741 472.165 mo
154.741 466.165 li
@
grestore
gsave
164.079 499.252 mo
165.079 499.252 li
165.079 492.252 li
164.079 492.252 li
164.079 499.252 li
clp
164.579 498.752 mo
164.579 492.752 li
f
1 lw
0 lc
164.579 498.752 mo
164.579 492.752 li
@
grestore
gsave
173.917 513.466 mo
174.917 513.466 li
174.917 506.466 li
173.917 506.466 li
173.917 513.466 li
clp
174.417 512.966 mo
174.417 506.966 li
f
1 lw
0 lc
174.417 512.966 mo
174.417 506.966 li
@
grestore
gsave
183.755 520.188 mo
184.755 520.188 li
184.755 513.188 li
183.755 513.188 li
183.755 520.188 li
clp
184.255 519.688 mo
184.255 513.688 li
f
1 lw
0 lc
184.255 519.688 mo
184.255 513.688 li
@
grestore
gsave
193.593 523.395 mo
194.593 523.395 li
194.593 516.395 li
193.593 516.395 li
193.593 523.395 li
clp
194.093 522.895 mo
194.093 516.895 li
f
1 lw
0 lc
194.093 522.895 mo
194.093 516.895 li
@
grestore
gsave
203.431 525.139 mo
204.431 525.139 li
204.431 518.139 li
203.431 518.139 li
203.431 525.139 li
clp
203.931 524.639 mo
203.931 518.639 li
f
1 lw
0 lc
203.931 524.639 mo
203.931 518.639 li
@
grestore
gsave
213.269 526.562 mo
214.269 526.562 li
214.269 519.562 li
213.269 519.562 li
213.269 526.562 li
clp
213.769 526.062 mo
213.769 520.062 li
f
1 lw
0 lc
213.769 526.062 mo
213.769 520.062 li
@
grestore
gsave
223.107 527.409 mo
224.107 527.409 li
224.107 520.409 li
223.107 520.409 li
223.107 527.409 li
clp
223.607 526.909 mo
223.607 520.909 li
f
1 lw
0 lc
223.607 526.909 mo
223.607 520.909 li
@
grestore
gsave
232.945 528.301 mo
233.945 528.301 li
233.945 521.301 li
232.945 521.301 li
232.945 528.301 li
clp
233.445 527.801 mo
233.445 521.801 li
f
1 lw
0 lc
233.445 527.801 mo
233.445 521.801 li
@
grestore
gsave
242.783 528.046 mo
243.783 528.046 li
243.783 521.046 li
242.783 521.046 li
242.783 528.046 li
clp
243.283 527.546 mo
243.283 521.546 li
f
1 lw
0 lc
243.283 527.546 mo
243.283 521.546 li
@
grestore
gsave
252.621 528.115 mo
253.621 528.115 li
253.621 521.115 li
252.621 521.115 li
252.621 528.115 li
clp
253.121 527.615 mo
253.121 521.615 li
f
1 lw
0 lc
253.121 527.615 mo
253.121 521.615 li
@
grestore
gsave
262.459 527.583 mo
263.459 527.583 li
263.459 520.583 li
262.459 520.583 li
262.459 527.583 li
clp
262.959 527.083 mo
262.959 521.083 li
f
1 lw
0 lc
262.959 527.083 mo
262.959 521.083 li
@
grestore
gsave
272.297 528.641 mo
273.297 528.641 li
273.297 521.641 li
272.297 521.641 li
272.297 528.641 li
clp
272.797 528.141 mo
272.797 522.141 li
f
1 lw
0 lc
272.797 528.141 mo
272.797 522.141 li
@
grestore
gsave
282.135 528.7 mo
283.135 528.7 li
283.135 521.7 li
282.135 521.7 li
282.135 528.7 li
clp
282.635 528.2 mo
282.635 522.2 li
f
1 lw
0 lc
282.635 528.2 mo
282.635 522.2 li
@
grestore
gsave
291.973 528.884 mo
292.973 528.884 li
292.973 521.884 li
291.973 521.884 li
291.973 528.884 li
clp
292.473 528.385 mo
292.473 522.385 li
f
1 lw
0 lc
292.473 528.385 mo
292.473 522.385 li
@
grestore
gsave
301.811 529.084 mo
302.811 529.084 li
302.811 522.084 li
301.811 522.084 li
301.811 529.084 li
clp
302.311 528.584 mo
302.311 522.584 li
f
1 lw
0 lc
302.311 528.584 mo
302.311 522.584 li
@
grestore
gsave
311.649 529.022 mo
312.649 529.022 li
312.649 522.022 li
311.649 522.022 li
311.649 529.022 li
clp
312.149 528.522 mo
312.149 522.522 li
f
1 lw
0 lc
312.149 528.522 mo
312.149 522.522 li
@
grestore
gsave
321.487 529.706 mo
322.487 529.706 li
322.487 522.706 li
321.487 522.706 li
321.487 529.706 li
clp
321.987 529.206 mo
321.987 523.206 li
f
1 lw
0 lc
321.987 529.206 mo
321.987 523.206 li
@
grestore
gsave
331.325 528.675 mo
332.325 528.675 li
332.325 521.675 li
331.325 521.675 li
331.325 528.675 li
clp
331.825 528.175 mo
331.825 522.175 li
f
1 lw
0 lc
331.825 528.175 mo
331.825 522.175 li
@
grestore
gsave
341.163 528.747 mo
342.163 528.747 li
342.163 521.747 li
341.163 521.747 li
341.163 528.747 li
clp
341.663 528.247 mo
341.663 522.247 li
f
1 lw
0 lc
341.663 528.247 mo
341.663 522.247 li
@
grestore
gsave
351.001 528.866 mo
352.001 528.866 li
352.001 521.866 li
351.001 521.866 li
351.001 528.866 li
clp
351.501 528.366 mo
351.501 522.366 li
f
1 lw
0 lc
351.501 528.366 mo
351.501 522.366 li
@
grestore
gsave
360.839 529.042 mo
361.839 529.042 li
361.839 522.042 li
360.839 522.042 li
360.839 529.042 li
clp
361.339 528.542 mo
361.339 522.542 li
f
1 lw
0 lc
361.339 528.542 mo
361.339 522.542 li
@
grestore
gsave
370.677 529.279 mo
371.677 529.279 li
371.677 522.279 li
370.677 522.279 li
370.677 529.279 li
clp
371.177 528.779 mo
371.177 522.779 li
f
1 lw
0 lc
371.177 528.779 mo
371.177 522.779 li
@
grestore
gsave
380.515 529.081 mo
381.515 529.081 li
381.515 522.081 li
380.515 522.081 li
380.515 529.081 li
clp
381.015 528.581 mo
381.015 522.581 li
f
1 lw
0 lc
381.015 528.581 mo
381.015 522.581 li
@
grestore
gsave
390.353 528.707 mo
391.353 528.707 li
391.353 521.707 li
390.353 521.707 li
390.353 528.707 li
clp
390.853 528.207 mo
390.853 522.207 li
f
1 lw
0 lc
390.853 528.207 mo
390.853 522.207 li
@
grestore
gsave
400.191 529.44 mo
401.191 529.44 li
401.191 522.44 li
400.191 522.44 li
400.191 529.44 li
clp
400.691 528.94 mo
400.691 522.94 li
f
1 lw
0 lc
400.691 528.94 mo
400.691 522.94 li
@
grestore
gsave
410.029 528.649 mo
411.029 528.649 li
411.029 521.649 li
410.029 521.649 li
410.029 528.649 li
clp
410.529 528.149 mo
410.529 522.149 li
f
1 lw
0 lc
410.529 528.149 mo
410.529 522.149 li
@
grestore
gsave
419.867 529.321 mo
420.867 529.321 li
420.867 522.321 li
419.867 522.321 li
419.867 529.321 li
clp
420.367 528.821 mo
420.367 522.821 li
f
1 lw
0 lc
420.367 528.821 mo
420.367 522.821 li
@
grestore
gsave
429.705 529.192 mo
430.706 529.192 li
430.706 522.192 li
429.705 522.192 li
429.705 529.192 li
clp
430.205 528.692 mo
430.205 522.692 li
f
1 lw
0 lc
430.205 528.692 mo
430.205 522.692 li
@
grestore
gsave
439.543 529.169 mo
440.543 529.169 li
440.543 522.169 li
439.543 522.169 li
439.543 529.169 li
clp
440.043 528.669 mo
440.043 522.669 li
f
1 lw
0 lc
440.043 528.669 mo
440.043 522.669 li
@
grestore
gsave
449.381 529.659 mo
450.381 529.659 li
450.381 522.659 li
449.381 522.659 li
449.381 529.659 li
clp
449.881 529.159 mo
449.881 523.159 li
f
1 lw
0 lc
449.881 529.159 mo
449.881 523.159 li
@
grestore
gsave
459.22 528.709 mo
460.219 528.709 li
460.219 521.709 li
459.22 521.709 li
459.22 528.709 li
clp
459.719 528.209 mo
459.719 522.209 li
f
1 lw
0 lc
459.719 528.209 mo
459.719 522.209 li
@
grestore
gsave
469.057 530.11 mo
470.057 530.11 li
470.057 523.11 li
469.057 523.11 li
469.057 530.11 li
clp
469.557 529.61 mo
469.557 523.61 li
f
1 lw
0 lc
469.557 529.61 mo
469.557 523.61 li
@
grestore
gsave
478.895 529.653 mo
479.895 529.653 li
479.895 522.653 li
478.895 522.653 li
478.895 529.653 li
clp
479.395 529.153 mo
479.395 523.153 li
f
1 lw
0 lc
479.395 529.153 mo
479.395 523.153 li
@
grestore
gsave
488.733 530.326 mo
489.734 530.326 li
489.734 523.326 li
488.733 523.326 li
488.733 530.326 li
clp
489.233 529.827 mo
489.233 523.827 li
f
1 lw
0 lc
489.233 529.827 mo
489.233 523.827 li
@
grestore
gsave
498.571 530.135 mo
499.572 530.135 li
499.572 523.135 li
498.571 523.135 li
498.571 530.135 li
clp
499.071 529.635 mo
499.071 523.635 li
f
1 lw
0 lc
499.071 529.635 mo
499.071 523.635 li
@
grestore
gsave
508.409 529.554 mo
509.41 529.554 li
509.41 522.554 li
508.409 522.554 li
508.409 529.554 li
clp
508.909 529.054 mo
508.909 523.054 li
f
1 lw
0 lc
508.909 529.054 mo
508.909 523.054 li
@
grestore
gsave
518.248 530.203 mo
519.247 530.203 li
519.247 523.203 li
518.248 523.203 li
518.248 530.203 li
clp
518.747 529.703 mo
518.747 523.703 li
f
1 lw
0 lc
518.747 529.703 mo
518.747 523.703 li
@
grestore
gsave
528.086 529.93 mo
529.085 529.93 li
529.085 522.93 li
528.086 522.93 li
528.086 529.93 li
clp
528.586 529.43 mo
528.586 523.43 li
f
1 lw
0 lc
528.586 529.43 mo
528.586 523.43 li
@
grestore
gsave
537.924 530.277 mo
538.923 530.277 li
538.923 523.277 li
537.924 523.277 li
537.924 530.277 li
clp
538.424 529.777 mo
538.424 523.777 li
f
1 lw
0 lc
538.424 529.777 mo
538.424 523.777 li
@
grestore
gsave
547.761 529.595 mo
548.762 529.595 li
548.762 522.595 li
547.761 522.595 li
547.761 529.595 li
clp
548.262 529.095 mo
548.262 523.095 li
f
1 lw
0 lc
548.262 529.095 mo
548.262 523.095 li
@
grestore
gsave
557.599 529.649 mo
558.6 529.649 li
558.6 522.649 li
557.599 522.649 li
557.599 529.649 li
clp
558.1 529.149 mo
558.1 523.149 li
f
1 lw
0 lc
558.1 529.149 mo
558.1 523.149 li
@
grestore
gsave
567.438 529.922 mo
568.438 529.922 li
568.438 522.922 li
567.438 522.922 li
567.438 529.922 li
clp
567.938 529.422 mo
567.938 523.422 li
f
1 lw
0 lc
567.938 529.422 mo
567.938 523.422 li
@
grestore
gsave
577.276 529.638 mo
578.276 529.638 li
578.276 522.638 li
577.276 522.638 li
577.276 529.638 li
clp
577.776 529.138 mo
577.776 523.138 li
f
1 lw
0 lc
577.776 529.138 mo
577.776 523.138 li
@
grestore
gsave
587.114 530.379 mo
588.113 530.379 li
588.113 523.379 li
587.114 523.379 li
587.114 530.379 li
clp
587.614 529.88 mo
587.614 523.88 li
f
1 lw
0 lc
587.614 529.88 mo
587.614 523.88 li
@
grestore
gsave
596.952 529.324 mo
597.952 529.324 li
597.952 522.324 li
596.952 522.324 li
596.952 529.324 li
clp
597.452 528.824 mo
597.452 522.824 li
f
1 lw
0 lc
597.452 528.824 mo
597.452 522.824 li
@
grestore
gsave
606.79 530.44 mo
607.79 530.44 li
607.79 523.44 li
606.79 523.44 li
606.79 530.44 li
clp
607.29 529.94 mo
607.29 523.94 li
f
1 lw
0 lc
607.29 529.94 mo
607.29 523.94 li
@
grestore
gsave
616.628 529.886 mo
617.628 529.886 li
617.628 522.886 li
616.628 522.886 li
616.628 529.886 li
clp
617.128 529.386 mo
617.128 523.386 li
f
1 lw
0 lc
617.128 529.386 mo
617.128 523.386 li
@
grestore
gsave
626.466 529.735 mo
627.466 529.735 li
627.466 522.735 li
626.466 522.735 li
626.466 529.735 li
clp
626.966 529.235 mo
626.966 523.235 li
f
1 lw
0 lc
626.966 529.235 mo
626.966 523.235 li
@
grestore
gsave
636.304 530.266 mo
637.304 530.266 li
637.304 523.266 li
636.304 523.266 li
636.304 530.266 li
clp
636.804 529.766 mo
636.804 523.766 li
f
1 lw
0 lc
636.804 529.766 mo
636.804 523.766 li
@
grestore
gsave
646.142 529.581 mo
647.142 529.581 li
647.142 522.581 li
646.142 522.581 li
646.142 529.581 li
clp
646.642 529.081 mo
646.642 523.081 li
f
1 lw
0 lc
646.642 529.081 mo
646.642 523.081 li
@
grestore
gsave
655.98 530.153 mo
656.98 530.153 li
656.98 523.153 li
655.98 523.153 li
655.98 530.153 li
clp
656.48 529.653 mo
656.48 523.653 li
f
1 lw
0 lc
656.48 529.653 mo
656.48 523.653 li
@
grestore
gsave
665.818 530.55 mo
666.818 530.55 li
666.818 523.55 li
665.818 523.55 li
665.818 530.55 li
clp
666.318 530.05 mo
666.318 524.05 li
f
1 lw
0 lc
666.318 530.05 mo
666.318 524.05 li
@
grestore
gsave
675.656 530.334 mo
676.656 530.334 li
676.656 523.334 li
675.656 523.334 li
675.656 530.334 li
clp
676.156 529.834 mo
676.156 523.834 li
f
1 lw
0 lc
676.156 529.834 mo
676.156 523.834 li
@
grestore
gsave
685.494 530.037 mo
686.494 530.037 li
686.494 523.037 li
685.494 523.037 li
685.494 530.037 li
clp
685.994 529.537 mo
685.994 523.537 li
f
1 lw
0 lc
685.994 529.537 mo
685.994 523.537 li
@
grestore
gsave
695.332 529.881 mo
696.332 529.881 li
696.332 522.881 li
695.332 522.881 li
695.332 529.881 li
clp
695.832 529.381 mo
695.832 523.381 li
f
1 lw
0 lc
695.832 529.381 mo
695.832 523.381 li
@
grestore
gsave
705.17 530.57 mo
706.17 530.57 li
706.17 523.57 li
705.17 523.57 li
705.17 530.57 li
clp
705.67 530.07 mo
705.67 524.07 li
f
1 lw
0 lc
705.67 530.07 mo
705.67 524.07 li
@
grestore
gsave
715.008 530.389 mo
716.008 530.389 li
716.008 523.389 li
715.008 523.389 li
715.008 530.389 li
clp
715.508 529.89 mo
715.508 523.89 li
f
1 lw
0 lc
715.508 529.89 mo
715.508 523.89 li
@
grestore
gsave
724.846 530.422 mo
725.846 530.422 li
725.846 523.422 li
724.846 523.422 li
724.846 530.422 li
clp
725.346 529.922 mo
725.346 523.922 li
f
1 lw
0 lc
725.346 529.922 mo
725.346 523.922 li
@
grestore
gsave
734.684 530.607 mo
735.684 530.607 li
735.684 523.608 li
734.684 523.608 li
734.684 530.607 li
clp
735.184 530.107 mo
735.184 524.107 li
f
1 lw
0 lc
735.184 530.107 mo
735.184 524.107 li
@
grestore
gsave
744.522 530.306 mo
745.522 530.306 li
745.522 523.306 li
744.522 523.306 li
744.522 530.306 li
clp
745.022 529.806 mo
745.022 523.806 li
f
1 lw
0 lc
745.022 529.806 mo
745.022 523.806 li
@
grestore
gsave
754.36 530.552 mo
755.36 530.552 li
755.36 523.552 li
754.36 523.552 li
754.36 530.552 li
clp
754.86 530.052 mo
754.86 524.052 li
f
1 lw
0 lc
754.86 530.052 mo
754.86 524.052 li
@
grestore
gsave
764.198 530.585 mo
765.198 530.585 li
765.198 523.585 li
764.198 523.585 li
764.198 530.585 li
clp
764.698 530.085 mo
764.698 524.085 li
f
1 lw
0 lc
764.698 530.085 mo
764.698 524.085 li
@
grestore
gsave
774.036 531.057 mo
775.036 531.057 li
775.036 524.057 li
774.036 524.057 li
774.036 531.057 li
clp
774.536 530.557 mo
774.536 524.557 li
f
1 lw
0 lc
774.536 530.557 mo
774.536 524.557 li
@
grestore
gsave
783.874 531.563 mo
784.874 531.563 li
784.874 524.563 li
783.874 524.563 li
783.874 531.563 li
clp
784.374 531.063 mo
784.374 525.063 li
f
1 lw
0 lc
784.374 531.063 mo
784.374 525.063 li
@
grestore
gsave
793.712 530.335 mo
794.712 530.335 li
794.712 523.335 li
793.712 523.335 li
793.712 530.335 li
clp
794.212 529.835 mo
794.212 523.835 li
f
1 lw
0 lc
794.212 529.835 mo
794.212 523.835 li
@
grestore
gsave
803.55 530.692 mo
804.55 530.692 li
804.55 523.692 li
803.55 523.692 li
803.55 530.692 li
clp
804.05 530.192 mo
804.05 524.192 li
f
1 lw
0 lc
804.05 530.192 mo
804.05 524.192 li
@
grestore
gsave
813.388 529.89 mo
814.388 529.89 li
814.388 522.89 li
813.388 522.89 li
813.388 529.89 li
clp
813.888 529.39 mo
813.888 523.39 li
f
1 lw
0 lc
813.888 529.39 mo
813.888 523.39 li
@
grestore
gsave
823.226 530.256 mo
824.226 530.256 li
824.226 523.256 li
823.226 523.256 li
823.226 530.256 li
clp
823.726 529.756 mo
823.726 523.756 li
f
1 lw
0 lc
823.726 529.756 mo
823.726 523.756 li
@
grestore
gsave
833.064 529.614 mo
834.064 529.614 li
834.064 522.614 li
833.064 522.614 li
833.064 529.614 li
clp
833.564 529.113 mo
833.564 523.113 li
f
1 lw
0 lc
833.564 529.113 mo
833.564 523.113 li
@
grestore
gsave
842.902 530.787 mo
843.902 530.787 li
843.902 523.787 li
842.902 523.787 li
842.902 530.787 li
clp
843.402 530.288 mo
843.402 524.288 li
f
1 lw
0 lc
843.402 530.288 mo
843.402 524.288 li
@
grestore
gsave
852.74 530.957 mo
853.74 530.957 li
853.74 523.957 li
852.74 523.957 li
852.74 530.957 li
clp
853.24 530.457 mo
853.24 524.457 li
f
1 lw
0 lc
853.24 530.457 mo
853.24 524.457 li
@
grestore
gsave
862.578 530.638 mo
863.578 530.638 li
863.578 523.638 li
862.578 523.638 li
862.578 530.638 li
clp
863.078 530.137 mo
863.078 524.137 li
f
1 lw
0 lc
863.078 530.137 mo
863.078 524.137 li
@
grestore
gsave
872.416 530.491 mo
873.416 530.491 li
873.416 523.491 li
872.416 523.491 li
872.416 530.491 li
clp
872.916 529.991 mo
872.916 523.991 li
f
1 lw
0 lc
872.916 529.991 mo
872.916 523.991 li
@
grestore
gsave
882.254 530.421 mo
883.254 530.421 li
883.254 523.421 li
882.254 523.421 li
882.254 530.421 li
clp
882.754 529.921 mo
882.754 523.921 li
f
1 lw
0 lc
882.754 529.921 mo
882.754 523.921 li
@
grestore
gsave
892.092 530.249 mo
893.092 530.249 li
893.092 523.249 li
892.092 523.249 li
892.092 530.249 li
clp
892.592 529.749 mo
892.592 523.749 li
f
1 lw
0 lc
892.592 529.749 mo
892.592 523.749 li
@
grestore
gsave
901.93 530.66 mo
902.93 530.66 li
902.93 523.66 li
901.93 523.66 li
901.93 530.66 li
clp
902.43 530.16 mo
902.43 524.16 li
f
1 lw
0 lc
902.43 530.16 mo
902.43 524.16 li
@
grestore
gsave
911.768 530.558 mo
912.768 530.558 li
912.768 523.558 li
911.768 523.558 li
911.768 530.558 li
clp
912.268 530.058 mo
912.268 524.058 li
f
1 lw
0 lc
912.268 530.058 mo
912.268 524.058 li
@
grestore
gsave
921.606 530.899 mo
922.606 530.899 li
922.606 523.899 li
921.606 523.899 li
921.606 530.899 li
clp
922.106 530.399 mo
922.106 524.399 li
f
1 lw
0 lc
922.106 530.399 mo
922.106 524.399 li
@
grestore
gsave
931.444 530.592 mo
932.444 530.592 li
932.444 523.592 li
931.444 523.592 li
931.444 530.592 li
clp
931.944 530.092 mo
931.944 524.092 li
f
1 lw
0 lc
931.944 530.092 mo
931.944 524.092 li
@
grestore
gsave
941.282 530.895 mo
942.282 530.895 li
942.282 523.895 li
941.282 523.895 li
941.282 530.895 li
clp
941.782 530.396 mo
941.782 524.396 li
f
1 lw
0 lc
941.782 530.396 mo
941.782 524.396 li
@
grestore
gsave
951.12 530.461 mo
952.12 530.461 li
952.12 523.461 li
951.12 523.461 li
951.12 530.461 li
clp
951.62 529.961 mo
951.62 523.961 li
f
1 lw
0 lc
951.62 529.961 mo
951.62 523.961 li
@
grestore
gsave
960.958 530.623 mo
961.958 530.623 li
961.958 523.623 li
960.958 523.623 li
960.958 530.623 li
clp
961.458 530.123 mo
961.458 524.123 li
f
1 lw
0 lc
961.458 530.123 mo
961.458 524.123 li
@
grestore
gsave
970.796 530.764 mo
971.796 530.764 li
971.796 523.764 li
970.796 523.764 li
970.796 530.764 li
clp
971.296 530.263 mo
971.296 524.263 li
f
1 lw
0 lc
971.296 530.263 mo
971.296 524.263 li
@
grestore
gsave
980.634 530.935 mo
981.634 530.935 li
981.634 523.935 li
980.634 523.935 li
980.634 530.935 li
clp
981.134 530.435 mo
981.134 524.435 li
f
1 lw
0 lc
981.134 530.435 mo
981.134 524.435 li
@
grestore
gsave
990.472 531.22 mo
991.472 531.22 li
991.472 524.22 li
990.472 524.22 li
990.472 531.22 li
clp
990.972 530.72 mo
990.972 524.72 li
f
1 lw
0 lc
990.972 530.72 mo
990.972 524.72 li
@
grestore
gsave
1000.31 531.522 mo
1001.31 531.522 li
1001.31 524.522 li
1000.31 524.522 li
1000.31 531.522 li
clp
1000.81 531.022 mo
1000.81 525.022 li
f
1 lw
0 lc
1000.81 531.022 mo
1000.81 525.022 li
@
grestore
gsave
1010.15 530.926 mo
1011.15 530.926 li
1011.15 523.926 li
1010.15 523.926 li
1010.15 530.926 li
clp
1010.65 530.426 mo
1010.65 524.426 li
f
1 lw
0 lc
1010.65 530.426 mo
1010.65 524.426 li
@
grestore
gsave
1019.99 531.692 mo
1020.99 531.692 li
1020.99 524.692 li
1019.99 524.692 li
1019.99 531.692 li
clp
1020.49 531.192 mo
1020.49 525.192 li
f
1 lw
0 lc
1020.49 531.192 mo
1020.49 525.192 li
@
grestore
gsave
1029.82 530.955 mo
1030.82 530.955 li
1030.82 523.955 li
1029.82 523.955 li
1029.82 530.955 li
clp
1030.32 530.455 mo
1030.32 524.455 li
f
1 lw
0 lc
1030.32 530.455 mo
1030.32 524.455 li
@
grestore
gsave
1039.66 531.167 mo
1040.66 531.167 li
1040.66 524.167 li
1039.66 524.167 li
1039.66 531.167 li
clp
1040.16 530.667 mo
1040.16 524.667 li
f
1 lw
0 lc
1040.16 530.667 mo
1040.16 524.667 li
@
grestore
gsave
1049.5 531.727 mo
1050.5 531.727 li
1050.5 524.727 li
1049.5 524.727 li
1049.5 531.727 li
clp
1050 531.227 mo
1050 525.227 li
f
1 lw
0 lc
1050 531.227 mo
1050 525.227 li
@
grestore
gsave
1059.34 530.886 mo
1060.34 530.886 li
1060.34 523.886 li
1059.34 523.886 li
1059.34 530.886 li
clp
1059.84 530.386 mo
1059.84 524.386 li
f
1 lw
0 lc
1059.84 530.386 mo
1059.84 524.386 li
@
grestore
gsave
1069.18 530.879 mo
1070.18 530.879 li
1070.18 523.879 li
1069.18 523.879 li
1069.18 530.879 li
clp
1069.68 530.379 mo
1069.68 524.379 li
f
1 lw
0 lc
1069.68 530.379 mo
1069.68 524.379 li
@
grestore
gsave
1079.01 530.104 mo
1080.01 530.104 li
1080.01 523.104 li
1079.01 523.104 li
1079.01 530.104 li
clp
1079.51 529.604 mo
1079.51 523.604 li
f
1 lw
0 lc
1079.51 529.604 mo
1079.51 523.604 li
@
grestore
gsave
1088.85 530.689 mo
1089.85 530.689 li
1089.85 523.69 li
1088.85 523.69 li
1088.85 530.689 li
clp
1089.35 530.189 mo
1089.35 524.189 li
f
1 lw
0 lc
1089.35 530.189 mo
1089.35 524.189 li
@
grestore
gsave
1098.69 530.816 mo
1099.69 530.816 li
1099.69 523.816 li
1098.69 523.816 li
1098.69 530.816 li
clp
1099.19 530.316 mo
1099.19 524.316 li
f
1 lw
0 lc
1099.19 530.316 mo
1099.19 524.316 li
@
grestore
gsave
1108.53 530.086 mo
1109.53 530.086 li
1109.53 523.086 li
1108.53 523.086 li
1108.53 530.086 li
clp
1109.03 529.586 mo
1109.03 523.586 li
f
1 lw
0 lc
1109.03 529.586 mo
1109.03 523.586 li
@
grestore
gsave
1118.37 530.456 mo
1119.37 530.456 li
1119.37 523.456 li
1118.37 523.456 li
1118.37 530.456 li
clp
1118.87 529.956 mo
1118.87 523.956 li
f
1 lw
0 lc
1118.87 529.956 mo
1118.87 523.956 li
@
grestore
144.903 39.8506 mo
154.741 87.4862 li
164.579 124.444 li
174.417 140.619 li
184.255 147.678 li
194.093 151.515 li
203.931 157.762 li
213.769 162.266 li
223.607 165.043 li
233.445 170.104 li
243.283 173.822 li
253.121 178.316 li
262.959 178.431 li
272.797 182.403 li
282.635 184.924 li
292.473 185.615 li
302.311 188.106 li
312.149 189.589 li
321.987 188.969 li
331.825 190.267 li
341.663 192.7 li
351.501 193.476 li
361.339 191.61 li
371.177 193.963 li
381.015 193.897 li
390.853 193.882 li
400.691 193.649 li
410.529 196.282 li
420.367 193.727 li
430.205 195.359 li
440.043 195.245 li
449.881 195.383 li
459.719 194.204 li
469.557 195.64 li
479.396 195.608 li
489.234 196.523 li
499.072 199.172 li
508.91 197.16 li
518.748 196.606 li
528.586 198.486 li
538.424 197.984 li
548.262 198.101 li
558.1 196.866 li
567.938 196.824 li
577.776 199.202 li
587.614 197.59 li
597.452 198.931 li
607.29 199.722 li
617.128 198.943 li
626.966 197.444 li
636.804 196.871 li
646.642 200.059 li
656.48 200.131 li
666.318 198.789 li
676.156 199.962 li
685.994 200.1 li
695.832 199.951 li
705.67 200.859 li
715.508 200.326 li
725.346 200.368 li
735.184 199.146 li
745.022 200.207 li
754.86 200.114 li
764.698 200.738 li
774.536 201.56 li
784.374 200.871 li
794.212 202.094 li
804.05 200.897 li
813.888 201.69 li
823.726 201.31 li
833.564 201.643 li
843.402 200.171 li
853.24 200.85 li
863.078 200.96 li
872.916 201.522 li
882.754 200.641 li
892.592 201.02 li
902.43 201.688 li
912.268 200.882 li
922.106 202.411 li
931.944 200.433 li
941.782 203.022 li
951.62 201.724 li
961.458 202.227 li
971.296 202.283 li
981.134 201.746 li
990.972 201.24 li
1000.81 203.495 li
1010.65 203.054 li
1020.49 203.072 li
1030.32 201.631 li
1040.16 201.042 li
1050 203.174 li
1059.84 203.18 li
1069.68 202.333 li
1079.51 202.348 li
1089.35 203.645 li
1099.19 202.29 li
1109.03 202.737 li
1118.87 202.585 li
1 /0 /CSD get_res sepcs
1 sep
@
144.903 328.352 mo
154.741 331.978 li
164.579 344.05 li
174.417 361.759 li
184.255 382.763 li
194.093 394.987 li
203.931 407.687 li
213.769 412.132 li
223.607 417.836 li
233.445 422.404 li
243.283 424.785 li
253.121 426.941 li
262.959 428.771 li
272.797 430.202 li
282.635 432.84 li
292.473 434.38 li
302.311 435.901 li
312.149 436.137 li
321.987 440.224 li
331.825 440.095 li
341.663 441.573 li
351.501 442 li
361.339 442.316 li
371.177 443.219 li
381.015 443.455 li
390.853 445.065 li
400.691 446.15 li
410.529 447.095 li
420.367 446.469 li
430.205 446.906 li
440.043 446.985 li
449.881 448.541 li
459.719 448.176 li
469.557 448.186 li
479.396 449.484 li
489.234 449.008 li
499.072 450.013 li
508.91 450.316 li
518.748 450.519 li
528.586 451.744 li
538.424 451.648 li
548.262 450.947 li
558.1 451.65 li
567.938 453.352 li
577.776 451.655 li
587.614 452.818 li
597.452 453.618 li
607.29 452.734 li
617.128 453.76 li
626.966 454.009 li
636.804 454.148 li
646.642 455.505 li
656.48 454.814 li
666.318 454.669 li
676.156 455.549 li
685.994 454.857 li
695.832 455.472 li
705.67 455.37 li
715.508 456.801 li
725.346 455.373 li
735.184 456.099 li
745.022 456.252 li
754.86 456.147 li
764.698 456.427 li
774.536 455.713 li
784.374 456.803 li
794.212 457.047 li
804.05 456.172 li
813.888 456.341 li
823.726 457.416 li
833.564 456.53 li
843.402 456.61 li
853.24 457.207 li
863.078 456.733 li
872.916 458.002 li
882.754 458.065 li
892.592 457.712 li
902.43 457.802 li
912.268 458.229 li
922.106 457.308 li
931.944 458.138 li
941.782 458.171 li
951.62 457.887 li
961.458 457.625 li
971.296 458.495 li
981.134 458.384 li
990.972 457.398 li
1000.81 457.999 li
1010.65 459.092 li
1020.49 459.094 li
1030.32 458.112 li
1040.16 458.547 li
1050 460.049 li
1059.84 458.038 li
1069.68 458.712 li
1079.51 458.332 li
1089.35 458.259 li
1099.19 460.362 li
1109.03 458.848 li
1118.87 459.173 li
@
gsave
141.403 331.852 mo
148.403 331.852 li
148.403 324.852 li
141.403 324.852 li
141.403 331.852 li
clp
141.903 331.352 mo
147.903 325.352 li
141.903 325.352 mo
147.903 331.352 li
f
1 lw
0 lc
141.903 331.352 mo
147.903 325.352 li
141.903 325.352 mo
147.903 331.352 li
@
grestore
gsave
151.241 335.478 mo
158.241 335.478 li
158.241 328.478 li
151.241 328.478 li
151.241 335.478 li
clp
151.741 334.978 mo
157.741 328.978 li
151.741 328.978 mo
157.741 334.978 li
f
1 lw
0 lc
151.741 334.978 mo
157.741 328.978 li
151.741 328.978 mo
157.741 334.978 li
@
grestore
gsave
161.079 347.55 mo
168.079 347.55 li
168.079 340.55 li
161.079 340.55 li
161.079 347.55 li
clp
161.579 347.05 mo
167.579 341.05 li
161.579 341.05 mo
167.579 347.05 li
f
1 lw
0 lc
161.579 347.05 mo
167.579 341.05 li
161.579 341.05 mo
167.579 347.05 li
@
grestore
gsave
170.917 365.259 mo
177.917 365.259 li
177.917 358.259 li
170.917 358.259 li
170.917 365.259 li
clp
171.417 364.759 mo
177.417 358.759 li
171.417 358.759 mo
177.417 364.759 li
f
1 lw
0 lc
171.417 364.759 mo
177.417 358.759 li
171.417 358.759 mo
177.417 364.759 li
@
grestore
gsave
180.755 386.263 mo
187.755 386.263 li
187.755 379.263 li
180.755 379.263 li
180.755 386.263 li
clp
181.255 385.763 mo
187.255 379.763 li
181.255 379.763 mo
187.255 385.763 li
f
1 lw
0 lc
181.255 385.763 mo
187.255 379.763 li
181.255 379.763 mo
187.255 385.763 li
@
grestore
gsave
190.593 398.488 mo
197.593 398.488 li
197.593 391.488 li
190.593 391.488 li
190.593 398.488 li
clp
191.093 397.987 mo
197.093 391.987 li
191.093 391.987 mo
197.093 397.987 li
f
1 lw
0 lc
191.093 397.987 mo
197.093 391.987 li
191.093 391.987 mo
197.093 397.987 li
@
grestore
gsave
200.431 411.187 mo
207.431 411.187 li
207.431 404.187 li
200.431 404.187 li
200.431 411.187 li
clp
200.931 410.687 mo
206.931 404.687 li
200.931 404.687 mo
206.931 410.687 li
f
1 lw
0 lc
200.931 410.687 mo
206.931 404.687 li
200.931 404.687 mo
206.931 410.687 li
@
grestore
gsave
210.269 415.632 mo
217.269 415.632 li
217.269 408.633 li
210.269 408.633 li
210.269 415.632 li
clp
210.769 415.132 mo
216.769 409.132 li
210.769 409.132 mo
216.769 415.132 li
f
1 lw
0 lc
210.769 415.132 mo
216.769 409.132 li
210.769 409.132 mo
216.769 415.132 li
@
grestore
gsave
220.107 421.336 mo
227.107 421.336 li
227.107 414.336 li
220.107 414.336 li
220.107 421.336 li
clp
220.607 420.836 mo
226.607 414.836 li
220.607 414.836 mo
226.607 420.836 li
f
1 lw
0 lc
220.607 420.836 mo
226.607 414.836 li
220.607 414.836 mo
226.607 420.836 li
@
grestore
gsave
229.945 425.904 mo
236.945 425.904 li
236.945 418.904 li
229.945 418.904 li
229.945 425.904 li
clp
230.445 425.404 mo
236.445 419.404 li
230.445 419.404 mo
236.445 425.404 li
f
1 lw
0 lc
230.445 425.404 mo
236.445 419.404 li
230.445 419.404 mo
236.445 425.404 li
@
grestore
gsave
239.783 428.284 mo
246.783 428.284 li
246.783 421.284 li
239.783 421.284 li
239.783 428.284 li
clp
240.283 427.785 mo
246.283 421.785 li
240.283 421.785 mo
246.283 427.785 li
f
1 lw
0 lc
240.283 427.785 mo
246.283 421.785 li
240.283 421.785 mo
246.283 427.785 li
@
grestore
gsave
249.621 430.441 mo
256.621 430.441 li
256.621 423.442 li
249.621 423.442 li
249.621 430.441 li
clp
250.121 429.941 mo
256.121 423.941 li
250.121 423.941 mo
256.121 429.941 li
f
1 lw
0 lc
250.121 429.941 mo
256.121 423.941 li
250.121 423.941 mo
256.121 429.941 li
@
grestore
gsave
259.459 432.271 mo
266.459 432.271 li
266.459 425.271 li
259.459 425.271 li
259.459 432.271 li
clp
259.959 431.771 mo
265.959 425.771 li
259.959 425.771 mo
265.959 431.771 li
f
1 lw
0 lc
259.959 431.771 mo
265.959 425.771 li
259.959 425.771 mo
265.959 431.771 li
@
grestore
gsave
269.297 433.702 mo
276.297 433.702 li
276.297 426.702 li
269.297 426.702 li
269.297 433.702 li
clp
269.797 433.202 mo
275.797 427.202 li
269.797 427.202 mo
275.797 433.202 li
f
1 lw
0 lc
269.797 433.202 mo
275.797 427.202 li
269.797 427.202 mo
275.797 433.202 li
@
grestore
gsave
279.135 436.34 mo
286.135 436.34 li
286.135 429.34 li
279.135 429.34 li
279.135 436.34 li
clp
279.635 435.84 mo
285.635 429.84 li
279.635 429.84 mo
285.635 435.84 li
f
1 lw
0 lc
279.635 435.84 mo
285.635 429.84 li
279.635 429.84 mo
285.635 435.84 li
@
grestore
gsave
288.973 437.88 mo
295.973 437.88 li
295.973 430.88 li
288.973 430.88 li
288.973 437.88 li
clp
289.473 437.38 mo
295.473 431.38 li
289.473 431.38 mo
295.473 437.38 li
f
1 lw
0 lc
289.473 437.38 mo
295.473 431.38 li
289.473 431.38 mo
295.473 437.38 li
@
grestore
gsave
298.811 439.401 mo
305.811 439.401 li
305.811 432.401 li
298.811 432.401 li
298.811 439.401 li
clp
299.311 438.901 mo
305.311 432.901 li
299.311 432.901 mo
305.311 438.901 li
f
1 lw
0 lc
299.311 438.901 mo
305.311 432.901 li
299.311 432.901 mo
305.311 438.901 li
@
grestore
gsave
308.649 439.637 mo
315.649 439.637 li
315.649 432.637 li
308.649 432.637 li
308.649 439.637 li
clp
309.149 439.137 mo
315.149 433.137 li
309.149 433.137 mo
315.149 439.137 li
f
1 lw
0 lc
309.149 439.137 mo
315.149 433.137 li
309.149 433.137 mo
315.149 439.137 li
@
grestore
gsave
318.487 443.724 mo
325.487 443.724 li
325.487 436.724 li
318.487 436.724 li
318.487 443.724 li
clp
318.987 443.224 mo
324.987 437.224 li
318.987 437.224 mo
324.987 443.224 li
f
1 lw
0 lc
318.987 443.224 mo
324.987 437.224 li
318.987 437.224 mo
324.987 443.224 li
@
grestore
gsave
328.325 443.595 mo
335.325 443.595 li
335.325 436.595 li
328.325 436.595 li
328.325 443.595 li
clp
328.825 443.095 mo
334.825 437.095 li
328.825 437.095 mo
334.825 443.095 li
f
1 lw
0 lc
328.825 443.095 mo
334.825 437.095 li
328.825 437.095 mo
334.825 443.095 li
@
grestore
gsave
338.163 445.073 mo
345.163 445.073 li
345.163 438.073 li
338.163 438.073 li
338.163 445.073 li
clp
338.663 444.573 mo
344.663 438.573 li
338.663 438.573 mo
344.663 444.573 li
f
1 lw
0 lc
338.663 444.573 mo
344.663 438.573 li
338.663 438.573 mo
344.663 444.573 li
@
grestore
gsave
348.001 445.5 mo
355.001 445.5 li
355.001 438.5 li
348.001 438.5 li
348.001 445.5 li
clp
348.501 445 mo
354.501 439 li
348.501 439 mo
354.501 445 li
f
1 lw
0 lc
348.501 445 mo
354.501 439 li
348.501 439 mo
354.501 445 li
@
grestore
gsave
357.839 445.816 mo
364.839 445.816 li
364.839 438.816 li
357.839 438.816 li
357.839 445.816 li
clp
358.339 445.316 mo
364.339 439.316 li
358.339 439.316 mo
364.339 445.316 li
f
1 lw
0 lc
358.339 445.316 mo
364.339 439.316 li
358.339 439.316 mo
364.339 445.316 li
@
grestore
gsave
367.677 446.72 mo
374.677 446.72 li
374.677 439.719 li
367.677 439.719 li
367.677 446.72 li
clp
368.177 446.219 mo
374.177 440.219 li
368.177 440.219 mo
374.177 446.219 li
f
1 lw
0 lc
368.177 446.219 mo
374.177 440.219 li
368.177 440.219 mo
374.177 446.219 li
@
grestore
gsave
377.515 446.955 mo
384.515 446.955 li
384.515 439.955 li
377.515 439.955 li
377.515 446.955 li
clp
378.015 446.455 mo
384.015 440.455 li
378.015 440.455 mo
384.015 446.455 li
f
1 lw
0 lc
378.015 446.455 mo
384.015 440.455 li
378.015 440.455 mo
384.015 446.455 li
@
grestore
gsave
387.353 448.565 mo
394.353 448.565 li
394.353 441.565 li
387.353 441.565 li
387.353 448.565 li
clp
387.853 448.065 mo
393.853 442.065 li
387.853 442.065 mo
393.853 448.065 li
f
1 lw
0 lc
387.853 448.065 mo
393.853 442.065 li
387.853 442.065 mo
393.853 448.065 li
@
grestore
gsave
397.191 449.65 mo
404.191 449.65 li
404.191 442.65 li
397.191 442.65 li
397.191 449.65 li
clp
397.691 449.15 mo
403.691 443.15 li
397.691 443.15 mo
403.691 449.15 li
f
1 lw
0 lc
397.691 449.15 mo
403.691 443.15 li
397.691 443.15 mo
403.691 449.15 li
@
grestore
gsave
407.029 450.595 mo
414.029 450.595 li
414.029 443.595 li
407.029 443.595 li
407.029 450.595 li
clp
407.529 450.095 mo
413.529 444.095 li
407.529 444.095 mo
413.529 450.095 li
f
1 lw
0 lc
407.529 450.095 mo
413.529 444.095 li
407.529 444.095 mo
413.529 450.095 li
@
grestore
gsave
416.867 449.969 mo
423.867 449.969 li
423.867 442.969 li
416.867 442.969 li
416.867 449.969 li
clp
417.367 449.469 mo
423.367 443.469 li
417.367 443.469 mo
423.367 449.469 li
f
1 lw
0 lc
417.367 449.469 mo
423.367 443.469 li
417.367 443.469 mo
423.367 449.469 li
@
grestore
gsave
426.705 450.407 mo
433.705 450.407 li
433.705 443.407 li
426.705 443.407 li
426.705 450.407 li
clp
427.205 449.906 mo
433.205 443.906 li
427.205 443.906 mo
433.205 449.906 li
f
1 lw
0 lc
427.205 449.906 mo
433.205 443.906 li
427.205 443.906 mo
433.205 449.906 li
@
grestore
gsave
436.543 450.485 mo
443.543 450.485 li
443.543 443.484 li
436.543 443.484 li
436.543 450.485 li
clp
437.043 449.985 mo
443.043 443.985 li
437.043 443.985 mo
443.043 449.985 li
f
1 lw
0 lc
437.043 449.985 mo
443.043 443.985 li
437.043 443.985 mo
443.043 449.985 li
@
grestore
gsave
446.381 452.041 mo
453.381 452.041 li
453.381 445.041 li
446.381 445.041 li
446.381 452.041 li
clp
446.881 451.541 mo
452.881 445.541 li
446.881 445.541 mo
452.881 451.541 li
f
1 lw
0 lc
446.881 451.541 mo
452.881 445.541 li
446.881 445.541 mo
452.881 451.541 li
@
grestore
gsave
456.219 451.676 mo
463.219 451.676 li
463.219 444.676 li
456.219 444.676 li
456.219 451.676 li
clp
456.719 451.176 mo
462.719 445.176 li
456.719 445.176 mo
462.719 451.176 li
f
1 lw
0 lc
456.719 451.176 mo
462.719 445.176 li
456.719 445.176 mo
462.719 451.176 li
@
grestore
gsave
466.058 451.686 mo
473.057 451.686 li
473.057 444.686 li
466.058 444.686 li
466.058 451.686 li
clp
466.557 451.186 mo
472.557 445.186 li
466.557 445.186 mo
472.557 451.186 li
f
1 lw
0 lc
466.557 451.186 mo
472.557 445.186 li
466.557 445.186 mo
472.557 451.186 li
@
grestore
gsave
475.896 452.984 mo
482.896 452.984 li
482.896 445.984 li
475.896 445.984 li
475.896 452.984 li
clp
476.395 452.484 mo
482.395 446.484 li
476.395 446.484 mo
482.395 452.484 li
f
1 lw
0 lc
476.395 452.484 mo
482.395 446.484 li
476.395 446.484 mo
482.395 452.484 li
@
grestore
gsave
485.733 452.508 mo
492.734 452.508 li
492.734 445.508 li
485.733 445.508 li
485.733 452.508 li
clp
486.233 452.008 mo
492.233 446.008 li
486.233 446.008 mo
492.233 452.008 li
f
1 lw
0 lc
486.233 452.008 mo
492.233 446.008 li
486.233 446.008 mo
492.233 452.008 li
@
grestore
gsave
495.571 453.513 mo
502.571 453.513 li
502.571 446.513 li
495.571 446.513 li
495.571 453.513 li
clp
496.071 453.013 mo
502.071 447.013 li
496.071 447.013 mo
502.071 453.013 li
f
1 lw
0 lc
496.071 453.013 mo
502.071 447.013 li
496.071 447.013 mo
502.071 453.013 li
@
grestore
gsave
505.409 453.816 mo
512.409 453.816 li
512.409 446.816 li
505.409 446.816 li
505.409 453.816 li
clp
505.909 453.316 mo
511.909 447.316 li
505.909 447.316 mo
511.909 453.316 li
f
1 lw
0 lc
505.909 453.316 mo
511.909 447.316 li
505.909 447.316 mo
511.909 453.316 li
@
grestore
gsave
515.247 454.018 mo
522.247 454.018 li
522.247 447.019 li
515.247 447.019 li
515.247 454.018 li
clp
515.747 453.519 mo
521.747 447.519 li
515.747 447.519 mo
521.747 453.519 li
f
1 lw
0 lc
515.747 453.519 mo
521.747 447.519 li
515.747 447.519 mo
521.747 453.519 li
@
grestore
gsave
525.086 455.244 mo
532.086 455.244 li
532.086 448.244 li
525.086 448.244 li
525.086 455.244 li
clp
525.586 454.744 mo
531.586 448.744 li
525.586 448.744 mo
531.586 454.744 li
f
1 lw
0 lc
525.586 454.744 mo
531.586 448.744 li
525.586 448.744 mo
531.586 454.744 li
@
grestore
gsave
534.924 455.148 mo
541.924 455.148 li
541.924 448.148 li
534.924 448.148 li
534.924 455.148 li
clp
535.424 454.648 mo
541.424 448.648 li
535.424 448.648 mo
541.424 454.648 li
f
1 lw
0 lc
535.424 454.648 mo
541.424 448.648 li
535.424 448.648 mo
541.424 454.648 li
@
grestore
gsave
544.762 454.447 mo
551.762 454.447 li
551.762 447.447 li
544.762 447.447 li
544.762 454.447 li
clp
545.262 453.947 mo
551.262 447.947 li
545.262 447.947 mo
551.262 453.947 li
f
1 lw
0 lc
545.262 453.947 mo
551.262 447.947 li
545.262 447.947 mo
551.262 453.947 li
@
grestore
gsave
554.599 455.15 mo
561.6 455.15 li
561.6 448.15 li
554.599 448.15 li
554.599 455.15 li
clp
555.1 454.65 mo
561.1 448.65 li
555.1 448.65 mo
561.1 454.65 li
f
1 lw
0 lc
555.1 454.65 mo
561.1 448.65 li
555.1 448.65 mo
561.1 454.65 li
@
grestore
gsave
564.437 456.852 mo
571.437 456.852 li
571.437 449.852 li
564.437 449.852 li
564.437 456.852 li
clp
564.938 456.352 mo
570.938 450.352 li
564.938 450.352 mo
570.938 456.352 li
f
1 lw
0 lc
564.938 456.352 mo
570.938 450.352 li
564.938 450.352 mo
570.938 456.352 li
@
grestore
gsave
574.276 455.155 mo
581.275 455.155 li
581.275 448.155 li
574.276 448.155 li
574.276 455.155 li
clp
574.776 454.655 mo
580.776 448.655 li
574.776 448.655 mo
580.776 454.655 li
f
1 lw
0 lc
574.776 454.655 mo
580.776 448.655 li
574.776 448.655 mo
580.776 454.655 li
@
grestore
gsave
584.114 456.318 mo
591.114 456.318 li
591.114 449.317 li
584.114 449.317 li
584.114 456.318 li
clp
584.614 455.818 mo
590.614 449.818 li
584.614 449.818 mo
590.614 455.818 li
f
1 lw
0 lc
584.614 455.818 mo
590.614 449.818 li
584.614 449.818 mo
590.614 455.818 li
@
grestore
gsave
593.952 457.118 mo
600.952 457.118 li
600.952 450.118 li
593.952 450.118 li
593.952 457.118 li
clp
594.452 456.618 mo
600.452 450.618 li
594.452 450.618 mo
600.452 456.618 li
f
1 lw
0 lc
594.452 456.618 mo
600.452 450.618 li
594.452 450.618 mo
600.452 456.618 li
@
grestore
gsave
603.79 456.234 mo
610.79 456.234 li
610.79 449.234 li
603.79 449.234 li
603.79 456.234 li
clp
604.29 455.734 mo
610.29 449.734 li
604.29 449.734 mo
610.29 455.734 li
f
1 lw
0 lc
604.29 455.734 mo
610.29 449.734 li
604.29 449.734 mo
610.29 455.734 li
@
grestore
gsave
613.628 457.26 mo
620.628 457.26 li
620.628 450.26 li
613.628 450.26 li
613.628 457.26 li
clp
614.128 456.76 mo
620.128 450.76 li
614.128 450.76 mo
620.128 456.76 li
f
1 lw
0 lc
614.128 456.76 mo
620.128 450.76 li
614.128 450.76 mo
620.128 456.76 li
@
grestore
gsave
623.465 457.509 mo
630.466 457.509 li
630.466 450.509 li
623.465 450.509 li
623.465 457.509 li
clp
623.966 457.009 mo
629.966 451.009 li
623.966 451.009 mo
629.966 457.009 li
f
1 lw
0 lc
623.966 457.009 mo
629.966 451.009 li
623.966 451.009 mo
629.966 457.009 li
@
grestore
gsave
633.304 457.648 mo
640.303 457.648 li
640.303 450.648 li
633.304 450.648 li
633.304 457.648 li
clp
633.804 457.148 mo
639.804 451.148 li
633.804 451.148 mo
639.804 457.148 li
f
1 lw
0 lc
633.804 457.148 mo
639.804 451.148 li
633.804 451.148 mo
639.804 457.148 li
@
grestore
gsave
643.142 459.005 mo
650.142 459.005 li
650.142 452.005 li
643.142 452.005 li
643.142 459.005 li
clp
643.642 458.505 mo
649.642 452.505 li
643.642 452.505 mo
649.642 458.505 li
f
1 lw
0 lc
643.642 458.505 mo
649.642 452.505 li
643.642 452.505 mo
649.642 458.505 li
@
grestore
gsave
652.98 458.314 mo
659.98 458.314 li
659.98 451.314 li
652.98 451.314 li
652.98 458.314 li
clp
653.48 457.814 mo
659.48 451.814 li
653.48 451.814 mo
659.48 457.814 li
f
1 lw
0 lc
653.48 457.814 mo
659.48 451.814 li
653.48 451.814 mo
659.48 457.814 li
@
grestore
gsave
662.818 458.169 mo
669.818 458.169 li
669.818 451.169 li
662.818 451.169 li
662.818 458.169 li
clp
663.318 457.669 mo
669.318 451.669 li
663.318 451.669 mo
669.318 457.669 li
f
1 lw
0 lc
663.318 457.669 mo
669.318 451.669 li
663.318 451.669 mo
669.318 457.669 li
@
grestore
gsave
672.656 459.049 mo
679.656 459.049 li
679.656 452.049 li
672.656 452.049 li
672.656 459.049 li
clp
673.156 458.549 mo
679.156 452.549 li
673.156 452.549 mo
679.156 458.549 li
f
1 lw
0 lc
673.156 458.549 mo
679.156 452.549 li
673.156 452.549 mo
679.156 458.549 li
@
grestore
gsave
682.494 458.357 mo
689.494 458.357 li
689.494 451.357 li
682.494 451.357 li
682.494 458.357 li
clp
682.994 457.857 mo
688.994 451.857 li
682.994 451.857 mo
688.994 457.857 li
f
1 lw
0 lc
682.994 457.857 mo
688.994 451.857 li
682.994 451.857 mo
688.994 457.857 li
@
grestore
gsave
692.332 458.972 mo
699.332 458.972 li
699.332 451.972 li
692.332 451.972 li
692.332 458.972 li
clp
692.832 458.472 mo
698.832 452.472 li
692.832 452.472 mo
698.832 458.472 li
f
1 lw
0 lc
692.832 458.472 mo
698.832 452.472 li
692.832 452.472 mo
698.832 458.472 li
@
grestore
gsave
702.17 458.87 mo
709.17 458.87 li
709.17 451.87 li
702.17 451.87 li
702.17 458.87 li
clp
702.67 458.37 mo
708.67 452.37 li
702.67 452.37 mo
708.67 458.37 li
f
1 lw
0 lc
702.67 458.37 mo
708.67 452.37 li
702.67 452.37 mo
708.67 458.37 li
@
grestore
gsave
712.008 460.301 mo
719.008 460.301 li
719.008 453.301 li
712.008 453.301 li
712.008 460.301 li
clp
712.508 459.801 mo
718.508 453.801 li
712.508 453.801 mo
718.508 459.801 li
f
1 lw
0 lc
712.508 459.801 mo
718.508 453.801 li
712.508 453.801 mo
718.508 459.801 li
@
grestore
gsave
721.846 458.873 mo
728.846 458.873 li
728.846 451.873 li
721.846 451.873 li
721.846 458.873 li
clp
722.346 458.373 mo
728.346 452.373 li
722.346 452.373 mo
728.346 458.373 li
f
1 lw
0 lc
722.346 458.373 mo
728.346 452.373 li
722.346 452.373 mo
728.346 458.373 li
@
grestore
gsave
731.684 459.599 mo
738.684 459.599 li
738.684 452.599 li
731.684 452.599 li
731.684 459.599 li
clp
732.184 459.099 mo
738.184 453.099 li
732.184 453.099 mo
738.184 459.099 li
f
1 lw
0 lc
732.184 459.099 mo
738.184 453.099 li
732.184 453.099 mo
738.184 459.099 li
@
grestore
gsave
741.522 459.752 mo
748.522 459.752 li
748.522 452.752 li
741.522 452.752 li
741.522 459.752 li
clp
742.022 459.252 mo
748.022 453.252 li
742.022 453.252 mo
748.022 459.252 li
f
1 lw
0 lc
742.022 459.252 mo
748.022 453.252 li
742.022 453.252 mo
748.022 459.252 li
@
grestore
gsave
751.36 459.647 mo
758.36 459.647 li
758.36 452.647 li
751.36 452.647 li
751.36 459.647 li
clp
751.86 459.147 mo
757.86 453.147 li
751.86 453.147 mo
757.86 459.147 li
f
1 lw
0 lc
751.86 459.147 mo
757.86 453.147 li
751.86 453.147 mo
757.86 459.147 li
@
grestore
gsave
761.198 459.927 mo
768.198 459.927 li
768.198 452.927 li
761.198 452.927 li
761.198 459.927 li
clp
761.698 459.427 mo
767.698 453.427 li
761.698 453.427 mo
767.698 459.427 li
f
1 lw
0 lc
761.698 459.427 mo
767.698 453.427 li
761.698 453.427 mo
767.698 459.427 li
@
grestore
gsave
771.036 459.213 mo
778.036 459.213 li
778.036 452.213 li
771.036 452.213 li
771.036 459.213 li
clp
771.536 458.713 mo
777.536 452.713 li
771.536 452.713 mo
777.536 458.713 li
f
1 lw
0 lc
771.536 458.713 mo
777.536 452.713 li
771.536 452.713 mo
777.536 458.713 li
@
grestore
gsave
780.874 460.303 mo
787.874 460.303 li
787.874 453.303 li
780.874 453.303 li
780.874 460.303 li
clp
781.374 459.803 mo
787.374 453.803 li
781.374 453.803 mo
787.374 459.803 li
f
1 lw
0 lc
781.374 459.803 mo
787.374 453.803 li
781.374 453.803 mo
787.374 459.803 li
@
grestore
gsave
790.712 460.547 mo
797.712 460.547 li
797.712 453.547 li
790.712 453.547 li
790.712 460.547 li
clp
791.212 460.047 mo
797.212 454.047 li
791.212 454.047 mo
797.212 460.047 li
f
1 lw
0 lc
791.212 460.047 mo
797.212 454.047 li
791.212 454.047 mo
797.212 460.047 li
@
grestore
gsave
800.55 459.672 mo
807.55 459.672 li
807.55 452.672 li
800.55 452.672 li
800.55 459.672 li
clp
801.05 459.172 mo
807.05 453.172 li
801.05 453.172 mo
807.05 459.172 li
f
1 lw
0 lc
801.05 459.172 mo
807.05 453.172 li
801.05 453.172 mo
807.05 459.172 li
@
grestore
gsave
810.388 459.84 mo
817.388 459.84 li
817.388 452.84 li
810.388 452.84 li
810.388 459.84 li
clp
810.888 459.341 mo
816.888 453.341 li
810.888 453.341 mo
816.888 459.341 li
f
1 lw
0 lc
810.888 459.341 mo
816.888 453.341 li
810.888 453.341 mo
816.888 459.341 li
@
grestore
gsave
820.226 460.916 mo
827.226 460.916 li
827.226 453.916 li
820.226 453.916 li
820.226 460.916 li
clp
820.726 460.416 mo
826.726 454.416 li
820.726 454.416 mo
826.726 460.416 li
f
1 lw
0 lc
820.726 460.416 mo
826.726 454.416 li
820.726 454.416 mo
826.726 460.416 li
@
grestore
gsave
830.064 460.03 mo
837.064 460.03 li
837.064 453.03 li
830.064 453.03 li
830.064 460.03 li
clp
830.564 459.53 mo
836.564 453.53 li
830.564 453.53 mo
836.564 459.53 li
f
1 lw
0 lc
830.564 459.53 mo
836.564 453.53 li
830.564 453.53 mo
836.564 459.53 li
@
grestore
gsave
839.902 460.11 mo
846.902 460.11 li
846.902 453.11 li
839.902 453.11 li
839.902 460.11 li
clp
840.402 459.61 mo
846.402 453.61 li
840.402 453.61 mo
846.402 459.61 li
f
1 lw
0 lc
840.402 459.61 mo
846.402 453.61 li
840.402 453.61 mo
846.402 459.61 li
@
grestore
gsave
849.74 460.707 mo
856.74 460.707 li
856.74 453.707 li
849.74 453.707 li
849.74 460.707 li
clp
850.24 460.207 mo
856.24 454.207 li
850.24 454.207 mo
856.24 460.207 li
f
1 lw
0 lc
850.24 460.207 mo
856.24 454.207 li
850.24 454.207 mo
856.24 460.207 li
@
grestore
gsave
859.578 460.233 mo
866.578 460.233 li
866.578 453.233 li
859.578 453.233 li
859.578 460.233 li
clp
860.078 459.733 mo
866.078 453.733 li
860.078 453.733 mo
866.078 459.733 li
f
1 lw
0 lc
860.078 459.733 mo
866.078 453.733 li
860.078 453.733 mo
866.078 459.733 li
@
grestore
gsave
869.416 461.502 mo
876.416 461.502 li
876.416 454.502 li
869.416 454.502 li
869.416 461.502 li
clp
869.916 461.002 mo
875.916 455.002 li
869.916 455.002 mo
875.916 461.002 li
f
1 lw
0 lc
869.916 461.002 mo
875.916 455.002 li
869.916 455.002 mo
875.916 461.002 li
@
grestore
gsave
879.254 461.565 mo
886.254 461.565 li
886.254 454.565 li
879.254 454.565 li
879.254 461.565 li
clp
879.754 461.065 mo
885.754 455.065 li
879.754 455.065 mo
885.754 461.065 li
f
1 lw
0 lc
879.754 461.065 mo
885.754 455.065 li
879.754 455.065 mo
885.754 461.065 li
@
grestore
gsave
889.092 461.212 mo
896.092 461.212 li
896.092 454.212 li
889.092 454.212 li
889.092 461.212 li
clp
889.592 460.712 mo
895.592 454.712 li
889.592 454.712 mo
895.592 460.712 li
f
1 lw
0 lc
889.592 460.712 mo
895.592 454.712 li
889.592 454.712 mo
895.592 460.712 li
@
grestore
gsave
898.93 461.302 mo
905.93 461.302 li
905.93 454.302 li
898.93 454.302 li
898.93 461.302 li
clp
899.43 460.802 mo
905.43 454.802 li
899.43 454.802 mo
905.43 460.802 li
f
1 lw
0 lc
899.43 460.802 mo
905.43 454.802 li
899.43 454.802 mo
905.43 460.802 li
@
grestore
gsave
908.768 461.729 mo
915.768 461.729 li
915.768 454.729 li
908.768 454.729 li
908.768 461.729 li
clp
909.268 461.229 mo
915.268 455.229 li
909.268 455.229 mo
915.268 461.229 li
f
1 lw
0 lc
909.268 461.229 mo
915.268 455.229 li
909.268 455.229 mo
915.268 461.229 li
@
grestore
gsave
918.606 460.808 mo
925.606 460.808 li
925.606 453.808 li
918.606 453.808 li
918.606 460.808 li
clp
919.106 460.308 mo
925.106 454.308 li
919.106 454.308 mo
925.106 460.308 li
f
1 lw
0 lc
919.106 460.308 mo
925.106 454.308 li
919.106 454.308 mo
925.106 460.308 li
@
grestore
gsave
928.444 461.638 mo
935.444 461.638 li
935.444 454.638 li
928.444 454.638 li
928.444 461.638 li
clp
928.944 461.138 mo
934.944 455.138 li
928.944 455.138 mo
934.944 461.138 li
f
1 lw
0 lc
928.944 461.138 mo
934.944 455.138 li
928.944 455.138 mo
934.944 461.138 li
@
grestore
gsave
938.282 461.671 mo
945.282 461.671 li
945.282 454.671 li
938.282 454.671 li
938.282 461.671 li
clp
938.782 461.171 mo
944.782 455.171 li
938.782 455.171 mo
944.782 461.171 li
f
1 lw
0 lc
938.782 461.171 mo
944.782 455.171 li
938.782 455.171 mo
944.782 461.171 li
@
grestore
gsave
948.12 461.387 mo
955.12 461.387 li
955.12 454.387 li
948.12 454.387 li
948.12 461.387 li
clp
948.62 460.887 mo
954.62 454.887 li
948.62 454.887 mo
954.62 460.887 li
f
1 lw
0 lc
948.62 460.887 mo
954.62 454.887 li
948.62 454.887 mo
954.62 460.887 li
@
grestore
gsave
957.958 461.125 mo
964.958 461.125 li
964.958 454.125 li
957.958 454.125 li
957.958 461.125 li
clp
958.458 460.625 mo
964.458 454.625 li
958.458 454.625 mo
964.458 460.625 li
f
1 lw
0 lc
958.458 460.625 mo
964.458 454.625 li
958.458 454.625 mo
964.458 460.625 li
@
grestore
gsave
967.796 461.995 mo
974.796 461.995 li
974.796 454.995 li
967.796 454.995 li
967.796 461.995 li
clp
968.296 461.495 mo
974.296 455.495 li
968.296 455.495 mo
974.296 461.495 li
f
1 lw
0 lc
968.296 461.495 mo
974.296 455.495 li
968.296 455.495 mo
974.296 461.495 li
@
grestore
gsave
977.634 461.884 mo
984.634 461.884 li
984.634 454.884 li
977.634 454.884 li
977.634 461.884 li
clp
978.134 461.384 mo
984.134 455.384 li
978.134 455.384 mo
984.134 461.384 li
f
1 lw
0 lc
978.134 461.384 mo
984.134 455.384 li
978.134 455.384 mo
984.134 461.384 li
@
grestore
gsave
987.472 460.898 mo
994.472 460.898 li
994.472 453.898 li
987.472 453.898 li
987.472 460.898 li
clp
987.972 460.398 mo
993.972 454.398 li
987.972 454.398 mo
993.972 460.398 li
f
1 lw
0 lc
987.972 460.398 mo
993.972 454.398 li
987.972 454.398 mo
993.972 460.398 li
@
grestore
gsave
997.31 461.499 mo
1004.31 461.499 li
1004.31 454.499 li
997.31 454.499 li
997.31 461.499 li
clp
997.81 460.999 mo
1003.81 454.999 li
997.81 454.999 mo
1003.81 460.999 li
f
1 lw
0 lc
997.81 460.999 mo
1003.81 454.999 li
997.81 454.999 mo
1003.81 460.999 li
@
grestore
gsave
1007.15 462.592 mo
1014.15 462.592 li
1014.15 455.592 li
1007.15 455.592 li
1007.15 462.592 li
clp
1007.65 462.093 mo
1013.65 456.093 li
1007.65 456.093 mo
1013.65 462.093 li
f
1 lw
0 lc
1007.65 462.093 mo
1013.65 456.093 li
1007.65 456.093 mo
1013.65 462.093 li
@
grestore
gsave
1016.99 462.594 mo
1023.99 462.594 li
1023.99 455.594 li
1016.99 455.594 li
1016.99 462.594 li
clp
1017.49 462.095 mo
1023.49 456.095 li
1017.49 456.095 mo
1023.49 462.095 li
f
1 lw
0 lc
1017.49 462.095 mo
1023.49 456.095 li
1017.49 456.095 mo
1023.49 462.095 li
@
grestore
gsave
1026.82 461.612 mo
1033.82 461.612 li
1033.82 454.612 li
1026.82 454.612 li
1026.82 461.612 li
clp
1027.32 461.112 mo
1033.32 455.112 li
1027.32 455.112 mo
1033.32 461.112 li
f
1 lw
0 lc
1027.32 461.112 mo
1033.32 455.112 li
1027.32 455.112 mo
1033.32 461.112 li
@
grestore
gsave
1036.66 462.047 mo
1043.66 462.047 li
1043.66 455.047 li
1036.66 455.047 li
1036.66 462.047 li
clp
1037.16 461.547 mo
1043.16 455.547 li
1037.16 455.547 mo
1043.16 461.547 li
f
1 lw
0 lc
1037.16 461.547 mo
1043.16 455.547 li
1037.16 455.547 mo
1043.16 461.547 li
@
grestore
gsave
1046.5 463.549 mo
1053.5 463.549 li
1053.5 456.549 li
1046.5 456.549 li
1046.5 463.549 li
clp
1047 463.049 mo
1053 457.049 li
1047 457.049 mo
1053 463.049 li
f
1 lw
0 lc
1047 463.049 mo
1053 457.049 li
1047 457.049 mo
1053 463.049 li
@
grestore
gsave
1056.34 461.538 mo
1063.34 461.538 li
1063.34 454.538 li
1056.34 454.538 li
1056.34 461.538 li
clp
1056.84 461.038 mo
1062.84 455.038 li
1056.84 455.038 mo
1062.84 461.038 li
f
1 lw
0 lc
1056.84 461.038 mo
1062.84 455.038 li
1056.84 455.038 mo
1062.84 461.038 li
@
grestore
gsave
1066.18 462.212 mo
1073.18 462.212 li
1073.18 455.212 li
1066.18 455.212 li
1066.18 462.212 li
clp
1066.68 461.712 mo
1072.68 455.712 li
1066.68 455.712 mo
1072.68 461.712 li
f
1 lw
0 lc
1066.68 461.712 mo
1072.68 455.712 li
1066.68 455.712 mo
1072.68 461.712 li
@
grestore
gsave
1076.01 461.832 mo
1083.01 461.832 li
1083.01 454.832 li
1076.01 454.832 li
1076.01 461.832 li
clp
1076.51 461.332 mo
1082.51 455.332 li
1076.51 455.332 mo
1082.51 461.332 li
f
1 lw
0 lc
1076.51 461.332 mo
1082.51 455.332 li
1076.51 455.332 mo
1082.51 461.332 li
@
grestore
gsave
1085.85 461.759 mo
1092.85 461.759 li
1092.85 454.759 li
1085.85 454.759 li
1085.85 461.759 li
clp
1086.35 461.259 mo
1092.35 455.259 li
1086.35 455.259 mo
1092.35 461.259 li
f
1 lw
0 lc
1086.35 461.259 mo
1092.35 455.259 li
1086.35 455.259 mo
1092.35 461.259 li
@
grestore
gsave
1095.69 463.862 mo
1102.69 463.862 li
1102.69 456.861 li
1095.69 456.861 li
1095.69 463.862 li
clp
1096.19 463.362 mo
1102.19 457.362 li
1096.19 457.362 mo
1102.19 463.362 li
f
1 lw
0 lc
1096.19 463.362 mo
1102.19 457.362 li
1096.19 457.362 mo
1102.19 463.362 li
@
grestore
gsave
1105.53 462.348 mo
1112.53 462.348 li
1112.53 455.348 li
1105.53 455.348 li
1105.53 462.348 li
clp
1106.03 461.848 mo
1112.03 455.848 li
1106.03 455.848 mo
1112.03 461.848 li
f
1 lw
0 lc
1106.03 461.848 mo
1112.03 455.848 li
1106.03 455.848 mo
1112.03 461.848 li
@
grestore
gsave
1115.37 462.673 mo
1122.37 462.673 li
1122.37 455.673 li
1115.37 455.673 li
1115.37 462.673 li
clp
1115.87 462.173 mo
1121.87 456.173 li
1115.87 456.173 mo
1121.87 462.173 li
f
1 lw
0 lc
1115.87 462.173 mo
1121.87 456.173 li
1115.87 456.173 mo
1121.87 462.173 li
@
grestore
144.903 444.283 mo
154.741 447.612 li
164.579 454.688 li
174.417 462.538 li
184.255 472.038 li
194.093 481.611 li
203.931 488.5 li
213.769 493.154 li
223.607 496.334 li
233.445 498.807 li
243.283 501.466 li
253.121 503.398 li
262.959 503.818 li
272.797 505.834 li
282.635 505.828 li
292.473 505.956 li
302.311 506.388 li
312.149 507.389 li
321.987 507.459 li
331.825 507.682 li
341.663 508.298 li
351.501 509.3 li
361.339 508.686 li
371.177 509.431 li
381.015 509.96 li
390.853 508.881 li
400.691 509.22 li
410.529 509.784 li
420.367 510.759 li
430.205 509.584 li
440.043 509.581 li
449.881 510.849 li
459.719 509.674 li
469.557 509.739 li
479.396 510.564 li
489.234 511.165 li
499.072 510.637 li
508.91 509.605 li
518.748 510.32 li
528.586 510.802 li
538.424 509.814 li
548.262 510.815 li
558.1 510.614 li
567.938 511.001 li
577.776 512.001 li
587.614 510.631 li
597.452 510.446 li
607.29 511.841 li
617.128 511.499 li
626.966 510.776 li
636.804 511.481 li
646.642 511.005 li
656.48 511.07 li
666.318 510.647 li
676.156 510.391 li
685.994 511.116 li
695.832 510.647 li
705.67 511.976 li
715.508 512.131 li
725.346 511.482 li
735.184 512.008 li
745.022 511.693 li
754.86 510.816 li
764.698 511.591 li
774.536 511.086 li
784.374 511.247 li
794.212 511.034 li
804.05 511.752 li
813.888 509.771 li
823.726 511.126 li
833.564 511.122 li
843.402 511.424 li
853.24 511.592 li
863.078 511.953 li
872.916 511.819 li
882.754 511.927 li
892.592 511.372 li
902.43 511.421 li
912.268 511.59 li
922.106 511.961 li
931.944 511.709 li
941.782 511.578 li
951.62 511.463 li
961.458 511.511 li
971.296 511.771 li
981.134 511.763 li
990.972 511.984 li
1000.81 511.5 li
1010.65 511.599 li
1020.49 511.364 li
1030.32 511.497 li
1040.16 511.694 li
1050 512.431 li
1059.84 512.077 li
1069.68 511.588 li
1079.51 511.701 li
1089.35 511.409 li
1099.19 511.313 li
1109.03 511.923 li
1118.87 512.06 li
@
gsave
144.403 447.783 mo
145.403 447.783 li
145.403 440.782 li
144.403 440.782 li
144.403 447.783 li
clp
144.903 447.283 mo
144.903 441.283 li
f
1 lw
0 lc
144.903 447.283 mo
144.903 441.283 li
@
grestore
gsave
154.241 451.112 mo
155.241 451.112 li
155.241 444.112 li
154.241 444.112 li
154.241 451.112 li
clp
154.741 450.612 mo
154.741 444.612 li
f
1 lw
0 lc
154.741 450.612 mo
154.741 444.612 li
@
grestore
gsave
164.079 458.188 mo
165.079 458.188 li
165.079 451.188 li
164.079 451.188 li
164.079 458.188 li
clp
164.579 457.688 mo
164.579 451.688 li
f
1 lw
0 lc
164.579 457.688 mo
164.579 451.688 li
@
grestore
gsave
173.917 466.038 mo
174.917 466.038 li
174.917 459.038 li
173.917 459.038 li
173.917 466.038 li
clp
174.417 465.538 mo
174.417 459.538 li
f
1 lw
0 lc
174.417 465.538 mo
174.417 459.538 li
@
grestore
gsave
183.755 475.538 mo
184.755 475.538 li
184.755 468.538 li
183.755 468.538 li
183.755 475.538 li
clp
184.255 475.038 mo
184.255 469.038 li
f
1 lw
0 lc
184.255 475.038 mo
184.255 469.038 li
@
grestore
gsave
193.593 485.111 mo
194.593 485.111 li
194.593 478.111 li
193.593 478.111 li
193.593 485.111 li
clp
194.093 484.611 mo
194.093 478.611 li
f
1 lw
0 lc
194.093 484.611 mo
194.093 478.611 li
@
grestore
gsave
203.431 492 mo
204.431 492 li
204.431 485 li
203.431 485 li
203.431 492 li
clp
203.931 491.5 mo
203.931 485.5 li
f
1 lw
0 lc
203.931 491.5 mo
203.931 485.5 li
@
grestore
gsave
213.269 496.654 mo
214.269 496.654 li
214.269 489.654 li
213.269 489.654 li
213.269 496.654 li
clp
213.769 496.154 mo
213.769 490.154 li
f
1 lw
0 lc
213.769 496.154 mo
213.769 490.154 li
@
grestore
gsave
223.107 499.834 mo
224.107 499.834 li
224.107 492.834 li
223.107 492.834 li
223.107 499.834 li
clp
223.607 499.334 mo
223.607 493.334 li
f
1 lw
0 lc
223.607 499.334 mo
223.607 493.334 li
@
grestore
gsave
232.945 502.307 mo
233.945 502.307 li
233.945 495.307 li
232.945 495.307 li
232.945 502.307 li
clp
233.445 501.807 mo
233.445 495.807 li
f
1 lw
0 lc
233.445 501.807 mo
233.445 495.807 li
@
grestore
gsave
242.783 504.966 mo
243.783 504.966 li
243.783 497.966 li
242.783 497.966 li
242.783 504.966 li
clp
243.283 504.466 mo
243.283 498.466 li
f
1 lw
0 lc
243.283 504.466 mo
243.283 498.466 li
@
grestore
gsave
252.621 506.898 mo
253.621 506.898 li
253.621 499.898 li
252.621 499.898 li
252.621 506.898 li
clp
253.121 506.398 mo
253.121 500.398 li
f
1 lw
0 lc
253.121 506.398 mo
253.121 500.398 li
@
grestore
gsave
262.459 507.318 mo
263.459 507.318 li
263.459 500.318 li
262.459 500.318 li
262.459 507.318 li
clp
262.959 506.818 mo
262.959 500.818 li
f
1 lw
0 lc
262.959 506.818 mo
262.959 500.818 li
@
grestore
gsave
272.297 509.334 mo
273.297 509.334 li
273.297 502.334 li
272.297 502.334 li
272.297 509.334 li
clp
272.797 508.834 mo
272.797 502.834 li
f
1 lw
0 lc
272.797 508.834 mo
272.797 502.834 li
@
grestore
gsave
282.135 509.328 mo
283.135 509.328 li
283.135 502.328 li
282.135 502.328 li
282.135 509.328 li
clp
282.635 508.828 mo
282.635 502.828 li
f
1 lw
0 lc
282.635 508.828 mo
282.635 502.828 li
@
grestore
gsave
291.973 509.456 mo
292.973 509.456 li
292.973 502.456 li
291.973 502.456 li
291.973 509.456 li
clp
292.473 508.956 mo
292.473 502.956 li
f
1 lw
0 lc
292.473 508.956 mo
292.473 502.956 li
@
grestore
gsave
301.811 509.889 mo
302.811 509.889 li
302.811 502.888 li
301.811 502.888 li
301.811 509.889 li
clp
302.311 509.388 mo
302.311 503.388 li
f
1 lw
0 lc
302.311 509.388 mo
302.311 503.388 li
@
grestore
gsave
311.649 510.889 mo
312.649 510.889 li
312.649 503.889 li
311.649 503.889 li
311.649 510.889 li
clp
312.149 510.389 mo
312.149 504.389 li
f
1 lw
0 lc
312.149 510.389 mo
312.149 504.389 li
@
grestore
gsave
321.487 510.959 mo
322.487 510.959 li
322.487 503.959 li
321.487 503.959 li
321.487 510.959 li
clp
321.987 510.459 mo
321.987 504.459 li
f
1 lw
0 lc
321.987 510.459 mo
321.987 504.459 li
@
grestore
gsave
331.325 511.182 mo
332.325 511.182 li
332.325 504.182 li
331.325 504.182 li
331.325 511.182 li
clp
331.825 510.682 mo
331.825 504.682 li
f
1 lw
0 lc
331.825 510.682 mo
331.825 504.682 li
@
grestore
gsave
341.163 511.798 mo
342.163 511.798 li
342.163 504.798 li
341.163 504.798 li
341.163 511.798 li
clp
341.663 511.298 mo
341.663 505.298 li
f
1 lw
0 lc
341.663 511.298 mo
341.663 505.298 li
@
grestore
gsave
351.001 512.8 mo
352.001 512.8 li
352.001 505.8 li
351.001 505.8 li
351.001 512.8 li
clp
351.501 512.3 mo
351.501 506.3 li
f
1 lw
0 lc
351.501 512.3 mo
351.501 506.3 li
@
grestore
gsave
360.839 512.186 mo
361.839 512.186 li
361.839 505.186 li
360.839 505.186 li
360.839 512.186 li
clp
361.339 511.686 mo
361.339 505.686 li
f
1 lw
0 lc
361.339 511.686 mo
361.339 505.686 li
@
grestore
gsave
370.677 512.931 mo
371.677 512.931 li
371.677 505.931 li
370.677 505.931 li
370.677 512.931 li
clp
371.177 512.431 mo
371.177 506.431 li
f
1 lw
0 lc
371.177 512.431 mo
371.177 506.431 li
@
grestore
gsave
380.515 513.46 mo
381.515 513.46 li
381.515 506.46 li
380.515 506.46 li
380.515 513.46 li
clp
381.015 512.96 mo
381.015 506.96 li
f
1 lw
0 lc
381.015 512.96 mo
381.015 506.96 li
@
grestore
gsave
390.353 512.381 mo
391.353 512.381 li
391.353 505.381 li
390.353 505.381 li
390.353 512.381 li
clp
390.853 511.881 mo
390.853 505.881 li
f
1 lw
0 lc
390.853 511.881 mo
390.853 505.881 li
@
grestore
gsave
400.191 512.72 mo
401.191 512.72 li
401.191 505.72 li
400.191 505.72 li
400.191 512.72 li
clp
400.691 512.22 mo
400.691 506.22 li
f
1 lw
0 lc
400.691 512.22 mo
400.691 506.22 li
@
grestore
gsave
410.029 513.284 mo
411.029 513.284 li
411.029 506.284 li
410.029 506.284 li
410.029 513.284 li
clp
410.529 512.784 mo
410.529 506.784 li
f
1 lw
0 lc
410.529 512.784 mo
410.529 506.784 li
@
grestore
gsave
419.867 514.259 mo
420.867 514.259 li
420.867 507.259 li
419.867 507.259 li
419.867 514.259 li
clp
420.367 513.759 mo
420.367 507.759 li
f
1 lw
0 lc
420.367 513.759 mo
420.367 507.759 li
@
grestore
gsave
429.705 513.084 mo
430.706 513.084 li
430.706 506.084 li
429.705 506.084 li
429.705 513.084 li
clp
430.205 512.584 mo
430.205 506.584 li
f
1 lw
0 lc
430.205 512.584 mo
430.205 506.584 li
@
grestore
gsave
439.543 513.08 mo
440.543 513.08 li
440.543 506.08 li
439.543 506.08 li
439.543 513.08 li
clp
440.043 512.581 mo
440.043 506.581 li
f
1 lw
0 lc
440.043 512.581 mo
440.043 506.581 li
@
grestore
gsave
449.381 514.349 mo
450.381 514.349 li
450.381 507.349 li
449.381 507.349 li
449.381 514.349 li
clp
449.881 513.849 mo
449.881 507.849 li
f
1 lw
0 lc
449.881 513.849 mo
449.881 507.849 li
@
grestore
gsave
459.22 513.174 mo
460.219 513.174 li
460.219 506.174 li
459.22 506.174 li
459.22 513.174 li
clp
459.719 512.674 mo
459.719 506.674 li
f
1 lw
0 lc
459.719 512.674 mo
459.719 506.674 li
@
grestore
gsave
469.057 513.239 mo
470.057 513.239 li
470.057 506.239 li
469.057 506.239 li
469.057 513.239 li
clp
469.557 512.739 mo
469.557 506.739 li
f
1 lw
0 lc
469.557 512.739 mo
469.557 506.739 li
@
grestore
gsave
478.895 514.064 mo
479.895 514.064 li
479.895 507.064 li
478.895 507.064 li
478.895 514.064 li
clp
479.395 513.564 mo
479.395 507.564 li
f
1 lw
0 lc
479.395 513.564 mo
479.395 507.564 li
@
grestore
gsave
488.733 514.665 mo
489.734 514.665 li
489.734 507.665 li
488.733 507.665 li
488.733 514.665 li
clp
489.233 514.165 mo
489.233 508.165 li
f
1 lw
0 lc
489.233 514.165 mo
489.233 508.165 li
@
grestore
gsave
498.571 514.137 mo
499.572 514.137 li
499.572 507.137 li
498.571 507.137 li
498.571 514.137 li
clp
499.071 513.637 mo
499.071 507.637 li
f
1 lw
0 lc
499.071 513.637 mo
499.071 507.637 li
@
grestore
gsave
508.409 513.105 mo
509.41 513.105 li
509.41 506.105 li
508.409 506.105 li
508.409 513.105 li
clp
508.909 512.605 mo
508.909 506.605 li
f
1 lw
0 lc
508.909 512.605 mo
508.909 506.605 li
@
grestore
gsave
518.248 513.82 mo
519.247 513.82 li
519.247 506.82 li
518.248 506.82 li
518.248 513.82 li
clp
518.747 513.32 mo
518.747 507.32 li
f
1 lw
0 lc
518.747 513.32 mo
518.747 507.32 li
@
grestore
gsave
528.086 514.302 mo
529.085 514.302 li
529.085 507.302 li
528.086 507.302 li
528.086 514.302 li
clp
528.586 513.802 mo
528.586 507.802 li
f
1 lw
0 lc
528.586 513.802 mo
528.586 507.802 li
@
grestore
gsave
537.924 513.314 mo
538.923 513.314 li
538.923 506.314 li
537.924 506.314 li
537.924 513.314 li
clp
538.424 512.814 mo
538.424 506.814 li
f
1 lw
0 lc
538.424 512.814 mo
538.424 506.814 li
@
grestore
gsave
547.761 514.315 mo
548.762 514.315 li
548.762 507.315 li
547.761 507.315 li
547.761 514.315 li
clp
548.262 513.815 mo
548.262 507.815 li
f
1 lw
0 lc
548.262 513.815 mo
548.262 507.815 li
@
grestore
gsave
557.599 514.115 mo
558.6 514.115 li
558.6 507.114 li
557.599 507.114 li
557.599 514.115 li
clp
558.1 513.614 mo
558.1 507.614 li
f
1 lw
0 lc
558.1 513.614 mo
558.1 507.614 li
@
grestore
gsave
567.438 514.501 mo
568.438 514.501 li
568.438 507.501 li
567.438 507.501 li
567.438 514.501 li
clp
567.938 514.001 mo
567.938 508.001 li
f
1 lw
0 lc
567.938 514.001 mo
567.938 508.001 li
@
grestore
gsave
577.276 515.501 mo
578.276 515.501 li
578.276 508.501 li
577.276 508.501 li
577.276 515.501 li
clp
577.776 515.001 mo
577.776 509.001 li
f
1 lw
0 lc
577.776 515.001 mo
577.776 509.001 li
@
grestore
gsave
587.114 514.131 mo
588.113 514.131 li
588.113 507.13 li
587.114 507.13 li
587.114 514.131 li
clp
587.614 513.631 mo
587.614 507.631 li
f
1 lw
0 lc
587.614 513.631 mo
587.614 507.631 li
@
grestore
gsave
596.952 513.946 mo
597.952 513.946 li
597.952 506.946 li
596.952 506.946 li
596.952 513.946 li
clp
597.452 513.446 mo
597.452 507.446 li
f
1 lw
0 lc
597.452 513.446 mo
597.452 507.446 li
@
grestore
gsave
606.79 515.341 mo
607.79 515.341 li
607.79 508.341 li
606.79 508.341 li
606.79 515.341 li
clp
607.29 514.841 mo
607.29 508.841 li
f
1 lw
0 lc
607.29 514.841 mo
607.29 508.841 li
@
grestore
gsave
616.628 514.999 mo
617.628 514.999 li
617.628 507.999 li
616.628 507.999 li
616.628 514.999 li
clp
617.128 514.499 mo
617.128 508.499 li
f
1 lw
0 lc
617.128 514.499 mo
617.128 508.499 li
@
grestore
gsave
626.466 514.276 mo
627.466 514.276 li
627.466 507.276 li
626.466 507.276 li
626.466 514.276 li
clp
626.966 513.776 mo
626.966 507.776 li
f
1 lw
0 lc
626.966 513.776 mo
626.966 507.776 li
@
grestore
gsave
636.304 514.981 mo
637.304 514.981 li
637.304 507.981 li
636.304 507.981 li
636.304 514.981 li
clp
636.804 514.481 mo
636.804 508.481 li
f
1 lw
0 lc
636.804 514.481 mo
636.804 508.481 li
@
grestore
gsave
646.142 514.505 mo
647.142 514.505 li
647.142 507.505 li
646.142 507.505 li
646.142 514.505 li
clp
646.642 514.005 mo
646.642 508.005 li
f
1 lw
0 lc
646.642 514.005 mo
646.642 508.005 li
@
grestore
gsave
655.98 514.57 mo
656.98 514.57 li
656.98 507.57 li
655.98 507.57 li
655.98 514.57 li
clp
656.48 514.07 mo
656.48 508.07 li
f
1 lw
0 lc
656.48 514.07 mo
656.48 508.07 li
@
grestore
gsave
665.818 514.147 mo
666.818 514.147 li
666.818 507.147 li
665.818 507.147 li
665.818 514.147 li
clp
666.318 513.647 mo
666.318 507.647 li
f
1 lw
0 lc
666.318 513.647 mo
666.318 507.647 li
@
grestore
gsave
675.656 513.891 mo
676.656 513.891 li
676.656 506.891 li
675.656 506.891 li
675.656 513.891 li
clp
676.156 513.391 mo
676.156 507.391 li
f
1 lw
0 lc
676.156 513.391 mo
676.156 507.391 li
@
grestore
gsave
685.494 514.616 mo
686.494 514.616 li
686.494 507.616 li
685.494 507.616 li
685.494 514.616 li
clp
685.994 514.116 mo
685.994 508.116 li
f
1 lw
0 lc
685.994 514.116 mo
685.994 508.116 li
@
grestore
gsave
695.332 514.147 mo
696.332 514.147 li
696.332 507.147 li
695.332 507.147 li
695.332 514.147 li
clp
695.832 513.647 mo
695.832 507.647 li
f
1 lw
0 lc
695.832 513.647 mo
695.832 507.647 li
@
grestore
gsave
705.17 515.476 mo
706.17 515.476 li
706.17 508.476 li
705.17 508.476 li
705.17 515.476 li
clp
705.67 514.976 mo
705.67 508.976 li
f
1 lw
0 lc
705.67 514.976 mo
705.67 508.976 li
@
grestore
gsave
715.008 515.631 mo
716.008 515.631 li
716.008 508.631 li
715.008 508.631 li
715.008 515.631 li
clp
715.508 515.131 mo
715.508 509.131 li
f
1 lw
0 lc
715.508 515.131 mo
715.508 509.131 li
@
grestore
gsave
724.846 514.982 mo
725.846 514.982 li
725.846 507.982 li
724.846 507.982 li
724.846 514.982 li
clp
725.346 514.482 mo
725.346 508.482 li
f
1 lw
0 lc
725.346 514.482 mo
725.346 508.482 li
@
grestore
gsave
734.684 515.508 mo
735.684 515.508 li
735.684 508.508 li
734.684 508.508 li
734.684 515.508 li
clp
735.184 515.008 mo
735.184 509.008 li
f
1 lw
0 lc
735.184 515.008 mo
735.184 509.008 li
@
grestore
gsave
744.522 515.193 mo
745.522 515.193 li
745.522 508.193 li
744.522 508.193 li
744.522 515.193 li
clp
745.022 514.693 mo
745.022 508.693 li
f
1 lw
0 lc
745.022 514.693 mo
745.022 508.693 li
@
grestore
gsave
754.36 514.316 mo
755.36 514.316 li
755.36 507.316 li
754.36 507.316 li
754.36 514.316 li
clp
754.86 513.816 mo
754.86 507.816 li
f
1 lw
0 lc
754.86 513.816 mo
754.86 507.816 li
@
grestore
gsave
764.198 515.091 mo
765.198 515.091 li
765.198 508.091 li
764.198 508.091 li
764.198 515.091 li
clp
764.698 514.591 mo
764.698 508.591 li
f
1 lw
0 lc
764.698 514.591 mo
764.698 508.591 li
@
grestore
gsave
774.036 514.586 mo
775.036 514.586 li
775.036 507.586 li
774.036 507.586 li
774.036 514.586 li
clp
774.536 514.086 mo
774.536 508.086 li
f
1 lw
0 lc
774.536 514.086 mo
774.536 508.086 li
@
grestore
gsave
783.874 514.747 mo
784.874 514.747 li
784.874 507.747 li
783.874 507.747 li
783.874 514.747 li
clp
784.374 514.247 mo
784.374 508.247 li
f
1 lw
0 lc
784.374 514.247 mo
784.374 508.247 li
@
grestore
gsave
793.712 514.534 mo
794.712 514.534 li
794.712 507.534 li
793.712 507.534 li
793.712 514.534 li
clp
794.212 514.034 mo
794.212 508.034 li
f
1 lw
0 lc
794.212 514.034 mo
794.212 508.034 li
@
grestore
gsave
803.55 515.252 mo
804.55 515.252 li
804.55 508.252 li
803.55 508.252 li
803.55 515.252 li
clp
804.05 514.752 mo
804.05 508.752 li
f
1 lw
0 lc
804.05 514.752 mo
804.05 508.752 li
@
grestore
gsave
813.388 513.271 mo
814.388 513.271 li
814.388 506.271 li
813.388 506.271 li
813.388 513.271 li
clp
813.888 512.771 mo
813.888 506.771 li
f
1 lw
0 lc
813.888 512.771 mo
813.888 506.771 li
@
grestore
gsave
823.226 514.626 mo
824.226 514.626 li
824.226 507.626 li
823.226 507.626 li
823.226 514.626 li
clp
823.726 514.126 mo
823.726 508.126 li
f
1 lw
0 lc
823.726 514.126 mo
823.726 508.126 li
@
grestore
gsave
833.064 514.622 mo
834.064 514.622 li
834.064 507.622 li
833.064 507.622 li
833.064 514.622 li
clp
833.564 514.122 mo
833.564 508.122 li
f
1 lw
0 lc
833.564 514.122 mo
833.564 508.122 li
@
grestore
gsave
842.902 514.924 mo
843.902 514.924 li
843.902 507.924 li
842.902 507.924 li
842.902 514.924 li
clp
843.402 514.424 mo
843.402 508.424 li
f
1 lw
0 lc
843.402 514.424 mo
843.402 508.424 li
@
grestore
gsave
852.74 515.092 mo
853.74 515.092 li
853.74 508.092 li
852.74 508.092 li
852.74 515.092 li
clp
853.24 514.592 mo
853.24 508.592 li
f
1 lw
0 lc
853.24 514.592 mo
853.24 508.592 li
@
grestore
gsave
862.578 515.453 mo
863.578 515.453 li
863.578 508.453 li
862.578 508.453 li
862.578 515.453 li
clp
863.078 514.953 mo
863.078 508.953 li
f
1 lw
0 lc
863.078 514.953 mo
863.078 508.953 li
@
grestore
gsave
872.416 515.32 mo
873.416 515.32 li
873.416 508.32 li
872.416 508.32 li
872.416 515.32 li
clp
872.916 514.819 mo
872.916 508.819 li
f
1 lw
0 lc
872.916 514.819 mo
872.916 508.819 li
@
grestore
gsave
882.254 515.427 mo
883.254 515.427 li
883.254 508.428 li
882.254 508.428 li
882.254 515.427 li
clp
882.754 514.927 mo
882.754 508.927 li
f
1 lw
0 lc
882.754 514.927 mo
882.754 508.927 li
@
grestore
gsave
892.092 514.872 mo
893.092 514.872 li
893.092 507.872 li
892.092 507.872 li
892.092 514.872 li
clp
892.592 514.372 mo
892.592 508.372 li
f
1 lw
0 lc
892.592 514.372 mo
892.592 508.372 li
@
grestore
gsave
901.93 514.921 mo
902.93 514.921 li
902.93 507.921 li
901.93 507.921 li
901.93 514.921 li
clp
902.43 514.421 mo
902.43 508.421 li
f
1 lw
0 lc
902.43 514.421 mo
902.43 508.421 li
@
grestore
gsave
911.768 515.09 mo
912.768 515.09 li
912.768 508.09 li
911.768 508.09 li
911.768 515.09 li
clp
912.268 514.59 mo
912.268 508.59 li
f
1 lw
0 lc
912.268 514.59 mo
912.268 508.59 li
@
grestore
gsave
921.606 515.461 mo
922.606 515.461 li
922.606 508.461 li
921.606 508.461 li
921.606 515.461 li
clp
922.106 514.961 mo
922.106 508.961 li
f
1 lw
0 lc
922.106 514.961 mo
922.106 508.961 li
@
grestore
gsave
931.444 515.208 mo
932.444 515.208 li
932.444 508.208 li
931.444 508.208 li
931.444 515.208 li
clp
931.944 514.708 mo
931.944 508.708 li
f
1 lw
0 lc
931.944 514.708 mo
931.944 508.708 li
@
grestore
gsave
941.282 515.078 mo
942.282 515.078 li
942.282 508.078 li
941.282 508.078 li
941.282 515.078 li
clp
941.782 514.578 mo
941.782 508.578 li
f
1 lw
0 lc
941.782 514.578 mo
941.782 508.578 li
@
grestore
gsave
951.12 514.963 mo
952.12 514.963 li
952.12 507.963 li
951.12 507.963 li
951.12 514.963 li
clp
951.62 514.463 mo
951.62 508.463 li
f
1 lw
0 lc
951.62 514.463 mo
951.62 508.463 li
@
grestore
gsave
960.958 515.011 mo
961.958 515.011 li
961.958 508.011 li
960.958 508.011 li
960.958 515.011 li
clp
961.458 514.511 mo
961.458 508.511 li
f
1 lw
0 lc
961.458 514.511 mo
961.458 508.511 li
@
grestore
gsave
970.796 515.271 mo
971.796 515.271 li
971.796 508.271 li
970.796 508.271 li
970.796 515.271 li
clp
971.296 514.771 mo
971.296 508.771 li
f
1 lw
0 lc
971.296 514.771 mo
971.296 508.771 li
@
grestore
gsave
980.634 515.263 mo
981.634 515.263 li
981.634 508.263 li
980.634 508.263 li
980.634 515.263 li
clp
981.134 514.763 mo
981.134 508.763 li
f
1 lw
0 lc
981.134 514.763 mo
981.134 508.763 li
@
grestore
gsave
990.472 515.485 mo
991.472 515.485 li
991.472 508.484 li
990.472 508.484 li
990.472 515.485 li
clp
990.972 514.984 mo
990.972 508.984 li
f
1 lw
0 lc
990.972 514.984 mo
990.972 508.984 li
@
grestore
gsave
1000.31 515 mo
1001.31 515 li
1001.31 508 li
1000.31 508 li
1000.31 515 li
clp
1000.81 514.5 mo
1000.81 508.5 li
f
1 lw
0 lc
1000.81 514.5 mo
1000.81 508.5 li
@
grestore
gsave
1010.15 515.099 mo
1011.15 515.099 li
1011.15 508.099 li
1010.15 508.099 li
1010.15 515.099 li
clp
1010.65 514.599 mo
1010.65 508.599 li
f
1 lw
0 lc
1010.65 514.599 mo
1010.65 508.599 li
@
grestore
gsave
1019.99 514.864 mo
1020.99 514.864 li
1020.99 507.864 li
1019.99 507.864 li
1019.99 514.864 li
clp
1020.49 514.364 mo
1020.49 508.364 li
f
1 lw
0 lc
1020.49 514.364 mo
1020.49 508.364 li
@
grestore
gsave
1029.82 514.997 mo
1030.82 514.997 li
1030.82 507.997 li
1029.82 507.997 li
1029.82 514.997 li
clp
1030.32 514.497 mo
1030.32 508.497 li
f
1 lw
0 lc
1030.32 514.497 mo
1030.32 508.497 li
@
grestore
gsave
1039.66 515.194 mo
1040.66 515.194 li
1040.66 508.194 li
1039.66 508.194 li
1039.66 515.194 li
clp
1040.16 514.694 mo
1040.16 508.694 li
f
1 lw
0 lc
1040.16 514.694 mo
1040.16 508.694 li
@
grestore
gsave
1049.5 515.931 mo
1050.5 515.931 li
1050.5 508.931 li
1049.5 508.931 li
1049.5 515.931 li
clp
1050 515.431 mo
1050 509.431 li
f
1 lw
0 lc
1050 515.431 mo
1050 509.431 li
@
grestore
gsave
1059.34 515.577 mo
1060.34 515.577 li
1060.34 508.577 li
1059.34 508.577 li
1059.34 515.577 li
clp
1059.84 515.077 mo
1059.84 509.077 li
f
1 lw
0 lc
1059.84 515.077 mo
1059.84 509.077 li
@
grestore
gsave
1069.18 515.088 mo
1070.18 515.088 li
1070.18 508.088 li
1069.18 508.088 li
1069.18 515.088 li
clp
1069.68 514.588 mo
1069.68 508.588 li
f
1 lw
0 lc
1069.68 514.588 mo
1069.68 508.588 li
@
grestore
gsave
1079.01 515.201 mo
1080.01 515.201 li
1080.01 508.201 li
1079.01 508.201 li
1079.01 515.201 li
clp
1079.51 514.701 mo
1079.51 508.701 li
f
1 lw
0 lc
1079.51 514.701 mo
1079.51 508.701 li
@
grestore
gsave
1088.85 514.909 mo
1089.85 514.909 li
1089.85 507.909 li
1088.85 507.909 li
1088.85 514.909 li
clp
1089.35 514.409 mo
1089.35 508.409 li
f
1 lw
0 lc
1089.35 514.409 mo
1089.35 508.409 li
@
grestore
gsave
1098.69 514.813 mo
1099.69 514.813 li
1099.69 507.813 li
1098.69 507.813 li
1098.69 514.813 li
clp
1099.19 514.313 mo
1099.19 508.313 li
f
1 lw
0 lc
1099.19 514.313 mo
1099.19 508.313 li
@
grestore
gsave
1108.53 515.423 mo
1109.53 515.423 li
1109.53 508.423 li
1108.53 508.423 li
1108.53 515.423 li
clp
1109.03 514.923 mo
1109.03 508.923 li
f
1 lw
0 lc
1109.03 514.923 mo
1109.03 508.923 li
@
grestore
gsave
1118.37 515.56 mo
1119.37 515.56 li
1119.37 508.56 li
1118.37 508.56 li
1118.37 515.56 li
clp
1118.87 515.06 mo
1118.87 509.06 li
f
1 lw
0 lc
1118.87 515.06 mo
1118.87 509.06 li
@
grestore
.8 lw
0 lj
96.2048 552.645 mo
96.2048 15.4319 li
@
1167.56 552.645 mo
1167.56 15.4319 li
@
96.2048 552.645 mo
1167.56 552.645 li
@
96.2048 15.4319 mo
1167.56 15.4319 li
@
1160.56 169.088 mo
979.534 169.088 li
978.944 169.086 978.596 168.944 978.387 168.734 cv
978.178 168.525 978.035 168.178 978.034 167.588 cv
978.034 22.4319 li
978.035 21.8418 978.178 21.4947 978.387 21.2853 cv
978.596 21.076 978.944 20.9337 979.534 20.932 cv
1160.56 20.932 li
1161.15 20.9337 1161.5 21.076 1161.71 21.2853 cv
1161.92 21.4947 1162.06 21.8422 1162.06 22.4319 cv
1162.06 167.588 li
1162.06 168.178 1161.92 168.525 1161.71 168.734 cv
1161.5 168.944 1161.15 169.086 1160.56 169.088 cv
0 0 0 0 cmyk
f
1160.57 170.088 mo
1160.57 170.088 1160.57 170.088 1160.56 170.088 cv
979.534 170.088 li
979.53 170.088 979.527 170.088 979.524 170.088 cv
978.784 170.088 978.135 169.897 977.68 169.442 cv
977.223 168.984 977.032 168.332 977.034 167.588 cv
977.034 22.4319 li
977.032 21.6885 977.223 21.0358 977.68 20.5783 cv
978.135 20.1232 978.784 19.9319 979.524 19.9319 cv
979.527 19.9319 979.53 19.9319 979.534 19.9319 cv
1160.56 19.9319 li
1160.57 19.9319 1160.57 19.9319 1160.57 19.9319 cv
1161.31 19.9319 1161.96 20.1232 1162.42 20.5783 cv
1162.88 21.0358 1163.07 21.6885 1163.06 22.4319 cv
1163.06 167.588 li
1163.07 168.332 1162.88 168.984 1162.42 169.442 cv
1161.96 169.897 1161.31 170.088 1160.57 170.088 cv
979.534 169.088 mo
1160.56 169.088 li
1161.15 169.086 1161.5 168.944 1161.71 168.734 cv
1161.92 168.525 1162.06 168.178 1162.06 167.588 cv
1162.06 22.4319 li
1162.06 21.8422 1161.92 21.4947 1161.71 21.2853 cv
1161.5 21.076 1161.15 20.9337 1160.56 20.932 cv
979.534 20.932 li
978.944 20.9337 978.596 21.076 978.387 21.2853 cv
978.178 21.4947 978.035 21.8418 978.034 22.4319 cv
978.034 167.588 li
978.035 168.178 978.178 168.525 978.387 168.734 cv
978.596 168.944 978.944 169.086 979.534 169.088 cv
979.534 169.088 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
981.534 36.135 mo
1001.53 36.135 li
0 1 1 0 cmyk
@
1013.47 26.675 mo
1013.47 38.015 li
1015.85 38.015 li
1017.85 38.015 1019.33 37.575 1020.27 36.655 cv
1021.19 35.735 1021.67 34.295 1021.67 32.335 cv
1021.67 30.375 1021.19 28.955 1020.27 28.035 cv
1019.33 27.135 1017.85 26.675 1015.85 26.675 cv
1013.47 26.675 li
1011.49 25.055 mo
1015.55 25.055 li
1018.37 25.055 1020.45 25.655 1021.77 26.815 cv
1023.09 27.995 1023.75 29.835 1023.75 32.335 cv
1023.75 34.855 1023.07 36.695 1021.75 37.875 cv
1020.43 39.055 1018.35 39.635 1015.55 39.635 cv
1011.49 39.635 li
1011.49 25.055 li
1 /0 /CSD get_res sepcs
1 sep
f
1028.87 32.675 mo
1028.87 38.015 li
1032.03 38.015 li
1033.09 38.015 1033.87 37.795 1034.39 37.355 cv
1034.89 36.915 1035.15 36.255 1035.15 35.335 cv
1035.15 34.435 1034.89 33.775 1034.39 33.335 cv
1033.87 32.895 1033.09 32.675 1032.03 32.675 cv
1028.87 32.675 li
1028.87 26.675 mo
1028.87 31.075 li
1031.79 31.075 li
1032.75 31.075 1033.45 30.895 1033.93 30.535 cv
1034.41 30.175 1034.65 29.635 1034.65 28.875 cv
1034.65 28.155 1034.41 27.595 1033.93 27.235 cv
1033.45 26.875 1032.75 26.675 1031.79 26.675 cv
1028.87 26.675 li
1026.89 25.055 mo
1031.93 25.055 li
1033.43 25.055 1034.59 25.375 1035.41 25.995 cv
1036.21 26.635 1036.63 27.515 1036.63 28.655 cv
1036.63 29.555 1036.41 30.275 1035.99 30.795 cv
1035.57 31.315 1034.97 31.655 1034.17 31.775 cv
1035.13 31.995 1035.89 32.435 1036.43 33.095 cv
1036.95 33.755 1037.23 34.575 1037.23 35.555 cv
1037.23 36.875 1036.77 37.875 1035.89 38.575 cv
1035.01 39.295 1033.75 39.635 1032.13 39.635 cv
1026.89 39.635 li
1026.89 25.055 li
f
1040.61 25.055 mo
1043.27 25.055 li
1049.73 37.255 li
1049.73 25.055 li
1051.65 25.055 li
1051.65 39.635 li
1048.99 39.635 li
1042.53 27.435 li
1042.53 39.635 li
1040.61 39.635 li
1040.61 25.055 li
f
1066.17 24.455 mo
1065.29 25.975 1064.65 27.455 1064.23 28.915 cv
1063.79 30.375 1063.59 31.855 1063.59 33.355 cv
1063.59 34.875 1063.79 36.355 1064.23 37.815 cv
1064.65 39.295 1065.29 40.755 1066.17 42.255 cv
1064.61 42.255 li
1063.63 40.715 1062.89 39.235 1062.41 37.755 cv
1061.93 36.275 1061.69 34.815 1061.69 33.355 cv
1061.69 31.915 1061.93 30.455 1062.41 28.975 cv
1062.89 27.495 1063.61 25.995 1064.61 24.455 cv
1066.17 24.455 li
f
1076.65 32.795 mo
1077.07 32.955 1077.49 33.255 1077.89 33.715 cv
1078.29 34.195 1078.69 34.835 1079.09 35.655 cv
1081.09 39.635 li
1078.97 39.635 li
1077.11 35.895 li
1076.63 34.935 1076.15 34.275 1075.71 33.955 cv
1075.25 33.635 1074.63 33.475 1073.85 33.475 cv
1071.71 33.475 li
1071.71 39.635 li
1069.73 39.635 li
1069.73 25.055 li
1074.19 25.055 li
1075.85 25.055 1077.09 25.415 1077.91 26.095 cv
1078.73 26.795 1079.15 27.855 1079.15 29.255 cv
1079.15 30.175 1078.93 30.955 1078.51 31.555 cv
1078.07 32.155 1077.45 32.575 1076.65 32.795 cv
1071.71 26.675 mo
1071.71 31.855 li
1074.19 31.855 li
1075.13 31.855 1075.85 31.635 1076.33 31.195 cv
1076.81 30.755 1077.07 30.115 1077.07 29.255 cv
1077.07 28.415 1076.81 27.775 1076.33 27.335 cv
1075.85 26.895 1075.13 26.675 1074.19 26.675 cv
1071.71 26.675 li
f
1085.61 32.675 mo
1085.61 38.015 li
1088.77 38.015 li
1089.83 38.015 1090.61 37.795 1091.13 37.355 cv
1091.63 36.915 1091.89 36.255 1091.89 35.335 cv
1091.89 34.435 1091.63 33.775 1091.13 33.335 cv
1090.61 32.895 1089.83 32.675 1088.77 32.675 cv
1085.61 32.675 li
1085.61 26.675 mo
1085.61 31.075 li
1088.53 31.075 li
1089.49 31.075 1090.19 30.895 1090.67 30.535 cv
1091.15 30.175 1091.39 29.635 1091.39 28.875 cv
1091.39 28.155 1091.15 27.595 1090.67 27.235 cv
1090.19 26.875 1089.49 26.675 1088.53 26.675 cv
1085.61 26.675 li
1083.63 25.055 mo
1088.67 25.055 li
1090.17 25.055 1091.33 25.375 1092.15 25.995 cv
1092.95 26.635 1093.37 27.515 1093.37 28.655 cv
1093.37 29.555 1093.15 30.275 1092.73 30.795 cv
1092.31 31.315 1091.71 31.655 1090.91 31.775 cv
1091.87 31.995 1092.63 32.435 1093.17 33.095 cv
1093.69 33.755 1093.97 34.575 1093.97 35.555 cv
1093.97 36.875 1093.51 37.875 1092.63 38.575 cv
1091.75 39.295 1090.49 39.635 1088.87 39.635 cv
1083.63 39.635 li
1083.63 25.055 li
f
1097.35 25.055 mo
1100.29 25.055 li
1104.01 34.975 li
1107.75 25.055 li
1110.69 25.055 li
1110.69 39.635 li
1108.77 39.635 li
1108.77 26.835 li
1105.01 36.835 li
1103.03 36.835 li
1099.27 26.835 li
1099.27 39.635 li
1097.35 39.635 li
1097.35 25.055 li
f
1119.01 26.355 mo
1117.99 26.355 1117.23 26.855 1116.71 27.855 cv
1116.19 28.855 1115.95 30.355 1115.95 32.355 cv
1115.95 34.355 1116.19 35.855 1116.71 36.855 cv
1117.23 37.855 1117.99 38.355 1119.01 38.355 cv
1120.03 38.355 1120.79 37.855 1121.31 36.855 cv
1121.81 35.855 1122.07 34.355 1122.07 32.355 cv
1122.07 30.355 1121.81 28.855 1121.31 27.855 cv
1120.79 26.855 1120.03 26.355 1119.01 26.355 cv
1119.01 24.795 mo
1120.63 24.795 1121.87 25.455 1122.75 26.735 cv
1123.61 28.035 1124.05 29.915 1124.05 32.355 cv
1124.05 34.815 1123.61 36.695 1122.75 37.975 cv
1121.87 39.255 1120.63 39.895 1119.01 39.895 cv
1117.37 39.895 1116.11 39.255 1115.25 37.975 cv
1114.39 36.695 1113.97 34.815 1113.97 32.355 cv
1113.97 29.915 1114.39 28.035 1115.25 26.735 cv
1116.11 25.455 1117.37 24.795 1119.01 24.795 cv
f
1126.97 24.455 mo
1128.53 24.455 li
1129.49 25.995 1130.23 27.495 1130.71 28.975 cv
1131.19 30.455 1131.45 31.915 1131.45 33.355 cv
1131.45 34.815 1131.19 36.275 1130.71 37.755 cv
1130.23 39.235 1129.49 40.715 1128.53 42.255 cv
1126.97 42.255 li
1127.83 40.755 1128.47 39.295 1128.91 37.815 cv
1129.33 36.355 1129.55 34.875 1129.55 33.355 cv
1129.55 31.855 1129.33 30.375 1128.91 28.915 cv
1128.47 27.455 1127.83 25.975 1126.97 24.455 cv
f
981.534 60.4944 mo
1001.53 60.4944 li
0 1 1 0 cmyk
@
988.534 63.4944 mo
994.534 57.4944 li
988.534 57.4944 mo
994.534 63.4944 li
f
1 lw
0 lc
988.534 63.4944 mo
994.534 57.4944 li
988.534 57.4944 mo
994.534 63.4944 li
@
1013.47 51.0344 mo
1013.47 62.3744 li
1015.85 62.3744 li
1017.85 62.3744 1019.33 61.9344 1020.27 61.0144 cv
1021.19 60.0944 1021.67 58.6544 1021.67 56.6944 cv
1021.67 54.7344 1021.19 53.3144 1020.27 52.3944 cv
1019.33 51.4944 1017.85 51.0344 1015.85 51.0344 cv
1013.47 51.0344 li
1011.49 49.4144 mo
1015.55 49.4144 li
1018.37 49.4144 1020.45 50.0144 1021.77 51.1744 cv
1023.09 52.3544 1023.75 54.1944 1023.75 56.6944 cv
1023.75 59.2144 1023.07 61.0544 1021.75 62.2344 cv
1020.43 63.4144 1018.35 63.9944 1015.55 63.9944 cv
1011.49 63.9944 li
1011.49 49.4144 li
1 /0 /CSD get_res sepcs
1 sep
f
1028.87 57.0344 mo
1028.87 62.3744 li
1032.03 62.3744 li
1033.09 62.3744 1033.87 62.1544 1034.39 61.7144 cv
1034.89 61.2744 1035.15 60.6144 1035.15 59.6944 cv
1035.15 58.7944 1034.89 58.1344 1034.39 57.6944 cv
1033.87 57.2544 1033.09 57.0344 1032.03 57.0344 cv
1028.87 57.0344 li
1028.87 51.0344 mo
1028.87 55.4344 li
1031.79 55.4344 li
1032.75 55.4344 1033.45 55.2544 1033.93 54.8944 cv
1034.41 54.5344 1034.65 53.9944 1034.65 53.2344 cv
1034.65 52.5144 1034.41 51.9544 1033.93 51.5944 cv
1033.45 51.2344 1032.75 51.0344 1031.79 51.0344 cv
1028.87 51.0344 li
1026.89 49.4144 mo
1031.93 49.4144 li
1033.43 49.4144 1034.59 49.7344 1035.41 50.3544 cv
1036.21 50.9944 1036.63 51.8744 1036.63 53.0144 cv
1036.63 53.9144 1036.41 54.6344 1035.99 55.1544 cv
1035.57 55.6744 1034.97 56.0144 1034.17 56.1344 cv
1035.13 56.3544 1035.89 56.7944 1036.43 57.4544 cv
1036.95 58.1144 1037.23 58.9344 1037.23 59.9144 cv
1037.23 61.2344 1036.77 62.2344 1035.89 62.9344 cv
1035.01 63.6544 1033.75 63.9944 1032.13 63.9944 cv
1026.89 63.9944 li
1026.89 49.4144 li
f
1040.61 49.4144 mo
1043.27 49.4144 li
1049.73 61.6144 li
1049.73 49.4144 li
1051.65 49.4144 li
1051.65 63.9944 li
1048.99 63.9944 li
1042.53 51.7944 li
1042.53 63.9944 li
1040.61 63.9944 li
1040.61 49.4144 li
f
1066.17 48.8144 mo
1065.29 50.3344 1064.65 51.8144 1064.23 53.2744 cv
1063.79 54.7344 1063.59 56.2144 1063.59 57.7144 cv
1063.59 59.2344 1063.79 60.7144 1064.23 62.1744 cv
1064.65 63.6544 1065.29 65.1144 1066.17 66.6144 cv
1064.61 66.6144 li
1063.63 65.0744 1062.89 63.5944 1062.41 62.1144 cv
1061.93 60.6344 1061.69 59.1744 1061.69 57.7144 cv
1061.69 56.2744 1061.93 54.8144 1062.41 53.3344 cv
1062.89 51.8544 1063.61 50.3544 1064.61 48.8144 cv
1066.17 48.8144 li
f
1076.65 57.1544 mo
1077.07 57.3144 1077.49 57.6144 1077.89 58.0744 cv
1078.29 58.5544 1078.69 59.1944 1079.09 60.0144 cv
1081.09 63.9944 li
1078.97 63.9944 li
1077.11 60.2544 li
1076.63 59.2944 1076.15 58.6344 1075.71 58.3144 cv
1075.25 57.9944 1074.63 57.8344 1073.85 57.8344 cv
1071.71 57.8344 li
1071.71 63.9944 li
1069.73 63.9944 li
1069.73 49.4144 li
1074.19 49.4144 li
1075.85 49.4144 1077.09 49.7744 1077.91 50.4544 cv
1078.73 51.1544 1079.15 52.2144 1079.15 53.6144 cv
1079.15 54.5344 1078.93 55.3144 1078.51 55.9144 cv
1078.07 56.5144 1077.45 56.9344 1076.65 57.1544 cv
1071.71 51.0344 mo
1071.71 56.2144 li
1074.19 56.2144 li
1075.13 56.2144 1075.85 55.9944 1076.33 55.5544 cv
1076.81 55.1144 1077.07 54.4744 1077.07 53.6144 cv
1077.07 52.7744 1076.81 52.1344 1076.33 51.6944 cv
1075.85 51.2544 1075.13 51.0344 1074.19 51.0344 cv
1071.71 51.0344 li
f
1085.61 57.0344 mo
1085.61 62.3744 li
1088.77 62.3744 li
1089.83 62.3744 1090.61 62.1544 1091.13 61.7144 cv
1091.63 61.2744 1091.89 60.6144 1091.89 59.6944 cv
1091.89 58.7944 1091.63 58.1344 1091.13 57.6944 cv
1090.61 57.2544 1089.83 57.0344 1088.77 57.0344 cv
1085.61 57.0344 li
1085.61 51.0344 mo
1085.61 55.4344 li
1088.53 55.4344 li
1089.49 55.4344 1090.19 55.2544 1090.67 54.8944 cv
1091.15 54.5344 1091.39 53.9944 1091.39 53.2344 cv
1091.39 52.5144 1091.15 51.9544 1090.67 51.5944 cv
1090.19 51.2344 1089.49 51.0344 1088.53 51.0344 cv
1085.61 51.0344 li
1083.63 49.4144 mo
1088.67 49.4144 li
1090.17 49.4144 1091.33 49.7344 1092.15 50.3544 cv
1092.95 50.9944 1093.37 51.8744 1093.37 53.0144 cv
1093.37 53.9144 1093.15 54.6344 1092.73 55.1544 cv
1092.31 55.6744 1091.71 56.0144 1090.91 56.1344 cv
1091.87 56.3544 1092.63 56.7944 1093.17 57.4544 cv
1093.69 58.1144 1093.97 58.9344 1093.97 59.9144 cv
1093.97 61.2344 1093.51 62.2344 1092.63 62.9344 cv
1091.75 63.6544 1090.49 63.9944 1088.87 63.9944 cv
1083.63 63.9944 li
1083.63 49.4144 li
f
1097.35 49.4144 mo
1100.29 49.4144 li
1104.01 59.3344 li
1107.75 49.4144 li
1110.69 49.4144 li
1110.69 63.9944 li
1108.77 63.9944 li
1108.77 51.1944 li
1105.01 61.1944 li
1103.03 61.1944 li
1099.27 51.1944 li
1099.27 63.9944 li
1097.35 63.9944 li
1097.35 49.4144 li
f
1115.13 62.3344 mo
1118.35 62.3344 li
1118.35 51.2144 li
1114.85 51.9144 li
1114.85 50.1144 li
1118.33 49.4144 li
1120.31 49.4144 li
1120.31 62.3344 li
1123.53 62.3344 li
1123.53 63.9944 li
1115.13 63.9944 li
1115.13 62.3344 li
f
1126.97 48.8144 mo
1128.53 48.8144 li
1129.49 50.3544 1130.23 51.8544 1130.71 53.3344 cv
1131.19 54.8144 1131.45 56.2744 1131.45 57.7144 cv
1131.45 59.1744 1131.19 60.6344 1130.71 62.1144 cv
1130.23 63.5944 1129.49 65.0744 1128.53 66.6144 cv
1126.97 66.6144 li
1127.83 65.1144 1128.47 63.6544 1128.91 62.1744 cv
1129.33 60.7144 1129.55 59.2344 1129.55 57.7144 cv
1129.55 56.2144 1129.33 54.7344 1128.91 53.2744 cv
1128.47 51.8144 1127.83 50.3344 1126.97 48.8144 cv
f
1.5 lw
2 lc
981.534 84.8538 mo
1001.53 84.8538 li
0 1 1 0 cmyk
@
991.534 87.8538 mo
991.534 81.8538 li
f
1 lw
0 lc
991.534 87.8538 mo
991.534 81.8538 li
@
1013.47 75.3938 mo
1013.47 86.7338 li
1015.85 86.7338 li
1017.85 86.7338 1019.33 86.2938 1020.27 85.3738 cv
1021.19 84.4538 1021.67 83.0138 1021.67 81.0538 cv
1021.67 79.0938 1021.19 77.6738 1020.27 76.7538 cv
1019.33 75.8538 1017.85 75.3938 1015.85 75.3938 cv
1013.47 75.3938 li
1011.49 73.7738 mo
1015.55 73.7738 li
1018.37 73.7738 1020.45 74.3738 1021.77 75.5338 cv
1023.09 76.7138 1023.75 78.5538 1023.75 81.0538 cv
1023.75 83.5738 1023.07 85.4138 1021.75 86.5938 cv
1020.43 87.7738 1018.35 88.3538 1015.55 88.3538 cv
1011.49 88.3538 li
1011.49 73.7738 li
1 /0 /CSD get_res sepcs
1 sep
f
1028.87 81.3938 mo
1028.87 86.7338 li
1032.03 86.7338 li
1033.09 86.7338 1033.87 86.5138 1034.39 86.0738 cv
1034.89 85.6338 1035.15 84.9738 1035.15 84.0538 cv
1035.15 83.1538 1034.89 82.4938 1034.39 82.0538 cv
1033.87 81.6138 1033.09 81.3938 1032.03 81.3938 cv
1028.87 81.3938 li
1028.87 75.3938 mo
1028.87 79.7938 li
1031.79 79.7938 li
1032.75 79.7938 1033.45 79.6138 1033.93 79.2538 cv
1034.41 78.8938 1034.65 78.3538 1034.65 77.5938 cv
1034.65 76.8738 1034.41 76.3138 1033.93 75.9538 cv
1033.45 75.5938 1032.75 75.3938 1031.79 75.3938 cv
1028.87 75.3938 li
1026.89 73.7738 mo
1031.93 73.7738 li
1033.43 73.7738 1034.59 74.0938 1035.41 74.7138 cv
1036.21 75.3538 1036.63 76.2338 1036.63 77.3738 cv
1036.63 78.2738 1036.41 78.9938 1035.99 79.5138 cv
1035.57 80.0338 1034.97 80.3738 1034.17 80.4938 cv
1035.13 80.7138 1035.89 81.1538 1036.43 81.8138 cv
1036.95 82.4738 1037.23 83.2938 1037.23 84.2738 cv
1037.23 85.5938 1036.77 86.5938 1035.89 87.2938 cv
1035.01 88.0138 1033.75 88.3538 1032.13 88.3538 cv
1026.89 88.3538 li
1026.89 73.7738 li
f
1040.61 73.7738 mo
1043.27 73.7738 li
1049.73 85.9738 li
1049.73 73.7738 li
1051.65 73.7738 li
1051.65 88.3538 li
1048.99 88.3538 li
1042.53 76.1538 li
1042.53 88.3538 li
1040.61 88.3538 li
1040.61 73.7738 li
f
1066.17 73.1738 mo
1065.29 74.6938 1064.65 76.1738 1064.23 77.6338 cv
1063.79 79.0938 1063.59 80.5738 1063.59 82.0738 cv
1063.59 83.5938 1063.79 85.0738 1064.23 86.5338 cv
1064.65 88.0138 1065.29 89.4738 1066.17 90.9738 cv
1064.61 90.9738 li
1063.63 89.4338 1062.89 87.9538 1062.41 86.4738 cv
1061.93 84.9938 1061.69 83.5338 1061.69 82.0738 cv
1061.69 80.6338 1061.93 79.1738 1062.41 77.6938 cv
1062.89 76.2138 1063.61 74.7138 1064.61 73.1738 cv
1066.17 73.1738 li
f
1076.65 81.5138 mo
1077.07 81.6738 1077.49 81.9738 1077.89 82.4338 cv
1078.29 82.9138 1078.69 83.5538 1079.09 84.3738 cv
1081.09 88.3538 li
1078.97 88.3538 li
1077.11 84.6138 li
1076.63 83.6538 1076.15 82.9938 1075.71 82.6738 cv
1075.25 82.3538 1074.63 82.1938 1073.85 82.1938 cv
1071.71 82.1938 li
1071.71 88.3538 li
1069.73 88.3538 li
1069.73 73.7738 li
1074.19 73.7738 li
1075.85 73.7738 1077.09 74.1338 1077.91 74.8138 cv
1078.73 75.5138 1079.15 76.5738 1079.15 77.9738 cv
1079.15 78.8938 1078.93 79.6738 1078.51 80.2738 cv
1078.07 80.8738 1077.45 81.2938 1076.65 81.5138 cv
1071.71 75.3938 mo
1071.71 80.5738 li
1074.19 80.5738 li
1075.13 80.5738 1075.85 80.3538 1076.33 79.9138 cv
1076.81 79.4738 1077.07 78.8338 1077.07 77.9738 cv
1077.07 77.1338 1076.81 76.4938 1076.33 76.0538 cv
1075.85 75.6138 1075.13 75.3938 1074.19 75.3938 cv
1071.71 75.3938 li
f
1085.61 81.3938 mo
1085.61 86.7338 li
1088.77 86.7338 li
1089.83 86.7338 1090.61 86.5138 1091.13 86.0738 cv
1091.63 85.6338 1091.89 84.9738 1091.89 84.0538 cv
1091.89 83.1538 1091.63 82.4938 1091.13 82.0538 cv
1090.61 81.6138 1089.83 81.3938 1088.77 81.3938 cv
1085.61 81.3938 li
1085.61 75.3938 mo
1085.61 79.7938 li
1088.53 79.7938 li
1089.49 79.7938 1090.19 79.6138 1090.67 79.2538 cv
1091.15 78.8938 1091.39 78.3538 1091.39 77.5938 cv
1091.39 76.8738 1091.15 76.3138 1090.67 75.9538 cv
1090.19 75.5938 1089.49 75.3938 1088.53 75.3938 cv
1085.61 75.3938 li
1083.63 73.7738 mo
1088.67 73.7738 li
1090.17 73.7738 1091.33 74.0938 1092.15 74.7138 cv
1092.95 75.3538 1093.37 76.2338 1093.37 77.3738 cv
1093.37 78.2738 1093.15 78.9938 1092.73 79.5138 cv
1092.31 80.0338 1091.71 80.3738 1090.91 80.4938 cv
1091.87 80.7138 1092.63 81.1538 1093.17 81.8138 cv
1093.69 82.4738 1093.97 83.2938 1093.97 84.2738 cv
1093.97 85.5938 1093.51 86.5938 1092.63 87.2938 cv
1091.75 88.0138 1090.49 88.3538 1088.87 88.3538 cv
1083.63 88.3538 li
1083.63 73.7738 li
f
1097.35 73.7738 mo
1100.29 73.7738 li
1104.01 83.6938 li
1107.75 73.7738 li
1110.69 73.7738 li
1110.69 88.3538 li
1108.77 88.3538 li
1108.77 75.5538 li
1105.01 85.5538 li
1103.03 85.5538 li
1099.27 75.5538 li
1099.27 88.3538 li
1097.35 88.3538 li
1097.35 73.7738 li
f
1116.49 86.6938 mo
1123.37 86.6938 li
1123.37 88.3538 li
1114.11 88.3538 li
1114.11 86.6938 li
1114.85 85.9338 1115.87 84.8938 1117.17 83.5738 cv
1118.45 82.2738 1119.27 81.4338 1119.61 81.0538 cv
1120.25 80.3538 1120.69 79.7538 1120.93 79.2538 cv
1121.17 78.7738 1121.31 78.2738 1121.31 77.7938 cv
1121.31 77.0338 1121.03 76.3938 1120.49 75.9138 cv
1119.95 75.4338 1119.25 75.1738 1118.37 75.1738 cv
1117.75 75.1738 1117.09 75.2938 1116.41 75.4938 cv
1115.73 75.7138 1114.99 76.0338 1114.21 76.4738 cv
1114.21 74.4738 li
1115.01 74.1538 1115.75 73.9138 1116.43 73.7538 cv
1117.11 73.5938 1117.75 73.5138 1118.33 73.5138 cv
1119.83 73.5138 1121.03 73.8938 1121.93 74.6538 cv
1122.83 75.4138 1123.29 76.4138 1123.29 77.6738 cv
1123.29 78.2738 1123.17 78.8538 1122.95 79.3738 cv
1122.73 79.9138 1122.33 80.5538 1121.73 81.2738 cv
1121.57 81.4738 1121.05 82.0138 1120.17 82.9138 cv
1119.29 83.8138 1118.07 85.0738 1116.49 86.6938 cv
f
1126.97 73.1738 mo
1128.53 73.1738 li
1129.49 74.7138 1130.23 76.2138 1130.71 77.6938 cv
1131.19 79.1738 1131.45 80.6338 1131.45 82.0738 cv
1131.45 83.5338 1131.19 84.9938 1130.71 86.4738 cv
1130.23 87.9538 1129.49 89.4338 1128.53 90.9738 cv
1126.97 90.9738 li
1127.83 89.4738 1128.47 88.0138 1128.91 86.5338 cv
1129.33 85.0738 1129.55 83.5938 1129.55 82.0738 cv
1129.55 80.5738 1129.33 79.0938 1128.91 77.6338 cv
1128.47 76.1738 1127.83 74.6938 1126.97 73.1738 cv
f
1.5 lw
2 lc
981.534 109.213 mo
1001.53 109.213 li
@
1020.23 98.6131 mo
1020.23 100.533 li
1019.47 100.173 1018.77 99.9131 1018.11 99.7331 cv
1017.43 99.5731 1016.79 99.4731 1016.19 99.4731 cv
1015.11 99.4731 1014.27 99.6931 1013.69 100.093 cv
1013.11 100.513 1012.83 101.113 1012.83 101.873 cv
1012.83 102.513 1013.01 103.013 1013.41 103.333 cv
1013.79 103.673 1014.53 103.933 1015.61 104.133 cv
1016.81 104.373 li
1018.27 104.653 1019.35 105.153 1020.05 105.853 cv
1020.75 106.573 1021.11 107.513 1021.11 108.693 cv
1021.11 110.113 1020.63 111.173 1019.69 111.893 cv
1018.73 112.613 1017.35 112.973 1015.53 112.973 cv
1014.83 112.973 1014.09 112.893 1013.31 112.753 cv
1012.53 112.613 1011.73 112.393 1010.91 112.073 cv
1010.91 110.033 li
1011.71 110.493 1012.49 110.833 1013.25 111.053 cv
1014.01 111.293 1014.77 111.393 1015.53 111.393 cv
1016.65 111.393 1017.51 111.173 1018.13 110.733 cv
1018.73 110.293 1019.05 109.673 1019.05 108.833 cv
1019.05 108.113 1018.83 107.553 1018.39 107.153 cv
1017.95 106.753 1017.23 106.453 1016.23 106.253 cv
1015.03 106.013 li
1013.55 105.733 1012.49 105.273 1011.83 104.633 cv
1011.17 104.013 1010.85 103.153 1010.85 102.033 cv
1010.85 100.753 1011.29 99.7331 1012.21 98.9931 cv
1013.11 98.2531 1014.37 97.8731 1015.97 97.8731 cv
1016.65 97.8731 1017.33 97.9331 1018.05 98.0531 cv
1018.75 98.1731 1019.47 98.3731 1020.23 98.6131 cv
f
1032.93 98.6131 mo
1032.93 100.533 li
1032.17 100.173 1031.47 99.9131 1030.81 99.7331 cv
1030.13 99.5731 1029.49 99.4731 1028.89 99.4731 cv
1027.81 99.4731 1026.97 99.6931 1026.39 100.093 cv
1025.81 100.513 1025.53 101.113 1025.53 101.873 cv
1025.53 102.513 1025.71 103.013 1026.11 103.333 cv
1026.49 103.673 1027.23 103.933 1028.31 104.133 cv
1029.51 104.373 li
1030.97 104.653 1032.05 105.153 1032.75 105.853 cv
1033.45 106.573 1033.81 107.513 1033.81 108.693 cv
1033.81 110.113 1033.33 111.173 1032.39 111.893 cv
1031.43 112.613 1030.05 112.973 1028.23 112.973 cv
1027.53 112.973 1026.79 112.893 1026.01 112.753 cv
1025.23 112.613 1024.43 112.393 1023.61 112.073 cv
1023.61 110.033 li
1024.41 110.493 1025.19 110.833 1025.95 111.053 cv
1026.71 111.293 1027.47 111.393 1028.23 111.393 cv
1029.35 111.393 1030.21 111.173 1030.83 110.733 cv
1031.43 110.293 1031.75 109.673 1031.75 108.833 cv
1031.75 108.113 1031.53 107.553 1031.09 107.153 cv
1030.65 106.753 1029.93 106.453 1028.93 106.253 cv
1027.73 106.013 li
1026.25 105.733 1025.19 105.273 1024.53 104.633 cv
1023.87 104.013 1023.55 103.153 1023.55 102.033 cv
1023.55 100.753 1023.99 99.7331 1024.91 98.9931 cv
1025.81 98.2531 1027.07 97.8731 1028.67 97.8731 cv
1029.35 97.8731 1030.03 97.9331 1030.75 98.0531 cv
1031.45 98.1731 1032.17 98.3731 1032.93 98.6131 cv
f
1038.87 99.7531 mo
1038.87 111.093 li
1041.25 111.093 li
1043.25 111.093 1044.73 110.653 1045.67 109.733 cv
1046.59 108.813 1047.07 107.373 1047.07 105.413 cv
1047.07 103.453 1046.59 102.033 1045.67 101.113 cv
1044.73 100.213 1043.25 99.7531 1041.25 99.7531 cv
1038.87 99.7531 li
1036.89 98.1331 mo
1040.95 98.1331 li
1043.77 98.1331 1045.85 98.7331 1047.17 99.8931 cv
1048.49 101.073 1049.15 102.913 1049.15 105.413 cv
1049.15 107.933 1048.47 109.773 1047.15 110.953 cv
1045.83 112.133 1043.75 112.713 1040.95 112.713 cv
1036.89 112.713 li
1036.89 98.1331 li
f
1054.27 105.753 mo
1054.27 111.093 li
1057.43 111.093 li
1058.49 111.093 1059.27 110.873 1059.79 110.433 cv
1060.29 109.993 1060.55 109.333 1060.55 108.413 cv
1060.55 107.513 1060.29 106.853 1059.79 106.413 cv
1059.27 105.973 1058.49 105.753 1057.43 105.753 cv
1054.27 105.753 li
1054.27 99.7531 mo
1054.27 104.153 li
1057.19 104.153 li
1058.15 104.153 1058.85 103.973 1059.33 103.613 cv
1059.81 103.253 1060.05 102.713 1060.05 101.953 cv
1060.05 101.233 1059.81 100.673 1059.33 100.313 cv
1058.85 99.9531 1058.15 99.7531 1057.19 99.7531 cv
1054.27 99.7531 li
1052.29 98.1331 mo
1057.33 98.1331 li
1058.83 98.1331 1059.99 98.4531 1060.81 99.0731 cv
1061.61 99.7131 1062.03 100.593 1062.03 101.733 cv
1062.03 102.633 1061.81 103.353 1061.39 103.873 cv
1060.97 104.393 1060.37 104.733 1059.57 104.853 cv
1060.53 105.073 1061.29 105.513 1061.83 106.173 cv
1062.35 106.833 1062.63 107.653 1062.63 108.633 cv
1062.63 109.953 1062.17 110.953 1061.29 111.653 cv
1060.41 112.373 1059.15 112.713 1057.53 112.713 cv
1052.29 112.713 li
1052.29 98.1331 li
f
1066.01 98.1331 mo
1068.67 98.1331 li
1075.13 110.333 li
1075.13 98.1331 li
1077.05 98.1331 li
1077.05 112.713 li
1074.39 112.713 li
1067.93 100.513 li
1067.93 112.713 li
1066.01 112.713 li
1066.01 98.1331 li
f
1091.57 97.5331 mo
1090.69 99.0531 1090.05 100.533 1089.63 101.993 cv
1089.19 103.453 1088.99 104.933 1088.99 106.433 cv
1088.99 107.953 1089.19 109.433 1089.63 110.893 cv
1090.05 112.373 1090.69 113.833 1091.57 115.333 cv
1090.01 115.333 li
1089.03 113.793 1088.29 112.313 1087.81 110.833 cv
1087.33 109.353 1087.09 107.893 1087.09 106.433 cv
1087.09 104.993 1087.33 103.533 1087.81 102.053 cv
1088.29 100.573 1089.01 99.0731 1090.01 97.5331 cv
1091.57 97.5331 li
f
1102.05 105.873 mo
1102.47 106.033 1102.89 106.333 1103.29 106.793 cv
1103.69 107.273 1104.09 107.913 1104.49 108.733 cv
1106.49 112.713 li
1104.37 112.713 li
1102.51 108.973 li
1102.03 108.013 1101.55 107.353 1101.11 107.033 cv
1100.65 106.713 1100.03 106.553 1099.25 106.553 cv
1097.11 106.553 li
1097.11 112.713 li
1095.13 112.713 li
1095.13 98.1331 li
1099.59 98.1331 li
1101.25 98.1331 1102.49 98.4931 1103.31 99.1731 cv
1104.13 99.8731 1104.55 100.933 1104.55 102.333 cv
1104.55 103.253 1104.33 104.033 1103.91 104.633 cv
1103.47 105.233 1102.85 105.653 1102.05 105.873 cv
1097.11 99.7531 mo
1097.11 104.933 li
1099.59 104.933 li
1100.53 104.933 1101.25 104.713 1101.73 104.273 cv
1102.21 103.833 1102.47 103.193 1102.47 102.333 cv
1102.47 101.493 1102.21 100.853 1101.73 100.413 cv
1101.25 99.9731 1100.53 99.7531 1099.59 99.7531 cv
1097.11 99.7531 li
f
1111.01 105.753 mo
1111.01 111.093 li
1114.17 111.093 li
1115.23 111.093 1116.01 110.873 1116.53 110.433 cv
1117.03 109.993 1117.29 109.333 1117.29 108.413 cv
1117.29 107.513 1117.03 106.853 1116.53 106.413 cv
1116.01 105.973 1115.23 105.753 1114.17 105.753 cv
1111.01 105.753 li
1111.01 99.7531 mo
1111.01 104.153 li
1113.93 104.153 li
1114.89 104.153 1115.59 103.973 1116.07 103.613 cv
1116.55 103.253 1116.79 102.713 1116.79 101.953 cv
1116.79 101.233 1116.55 100.673 1116.07 100.313 cv
1115.59 99.9531 1114.89 99.7531 1113.93 99.7531 cv
1111.01 99.7531 li
1109.03 98.1331 mo
1114.07 98.1331 li
1115.57 98.1331 1116.73 98.4531 1117.55 99.0731 cv
1118.35 99.7131 1118.77 100.593 1118.77 101.733 cv
1118.77 102.633 1118.55 103.353 1118.13 103.873 cv
1117.71 104.393 1117.11 104.733 1116.31 104.853 cv
1117.27 105.073 1118.03 105.513 1118.57 106.173 cv
1119.09 106.833 1119.37 107.653 1119.37 108.633 cv
1119.37 109.953 1118.91 110.953 1118.03 111.653 cv
1117.15 112.373 1115.89 112.713 1114.27 112.713 cv
1109.03 112.713 li
1109.03 98.1331 li
f
1122.75 98.1331 mo
1125.69 98.1331 li
1129.41 108.053 li
1133.15 98.1331 li
1136.09 98.1331 li
1136.09 112.713 li
1134.17 112.713 li
1134.17 99.9131 li
1130.41 109.913 li
1128.43 109.913 li
1124.67 99.9131 li
1124.67 112.713 li
1122.75 112.713 li
1122.75 98.1331 li
f
1144.41 99.4331 mo
1143.39 99.4331 1142.63 99.9331 1142.11 100.933 cv
1141.59 101.933 1141.35 103.433 1141.35 105.433 cv
1141.35 107.433 1141.59 108.933 1142.11 109.933 cv
1142.63 110.933 1143.39 111.433 1144.41 111.433 cv
1145.43 111.433 1146.19 110.933 1146.71 109.933 cv
1147.21 108.933 1147.47 107.433 1147.47 105.433 cv
1147.47 103.433 1147.21 101.933 1146.71 100.933 cv
1146.19 99.9331 1145.43 99.4331 1144.41 99.4331 cv
1144.41 97.8731 mo
1146.03 97.8731 1147.27 98.5331 1148.15 99.8131 cv
1149.01 101.113 1149.45 102.993 1149.45 105.433 cv
1149.45 107.893 1149.01 109.773 1148.15 111.053 cv
1147.27 112.333 1146.03 112.973 1144.41 112.973 cv
1142.77 112.973 1141.51 112.333 1140.65 111.053 cv
1139.79 109.773 1139.37 107.893 1139.37 105.433 cv
1139.37 102.993 1139.79 101.113 1140.65 99.8131 cv
1141.51 98.5331 1142.77 97.8731 1144.41 97.8731 cv
f
1152.37 97.5331 mo
1153.93 97.5331 li
1154.89 99.0731 1155.63 100.573 1156.11 102.053 cv
1156.59 103.533 1156.85 104.993 1156.85 106.433 cv
1156.85 107.893 1156.59 109.353 1156.11 110.833 cv
1155.63 112.313 1154.89 113.793 1153.93 115.333 cv
1152.37 115.333 li
1153.23 113.833 1153.87 112.373 1154.31 110.893 cv
1154.73 109.433 1154.95 107.953 1154.95 106.433 cv
1154.95 104.933 1154.73 103.453 1154.31 101.993 cv
1153.87 100.533 1153.23 99.0531 1152.37 97.5331 cv
f
981.534 133.572 mo
1001.53 133.572 li
@
988.534 136.572 mo
994.534 130.572 li
988.534 130.572 mo
994.534 136.572 li
f
1 lw
0 lc
988.534 136.572 mo
994.534 130.572 li
988.534 130.572 mo
994.534 136.572 li
@
1020.23 122.972 mo
1020.23 124.892 li
1019.47 124.532 1018.77 124.272 1018.11 124.092 cv
1017.43 123.932 1016.79 123.832 1016.19 123.832 cv
1015.11 123.832 1014.27 124.052 1013.69 124.452 cv
1013.11 124.872 1012.83 125.472 1012.83 126.232 cv
1012.83 126.872 1013.01 127.372 1013.41 127.692 cv
1013.79 128.032 1014.53 128.292 1015.61 128.492 cv
1016.81 128.732 li
1018.27 129.012 1019.35 129.512 1020.05 130.212 cv
1020.75 130.932 1021.11 131.872 1021.11 133.052 cv
1021.11 134.472 1020.63 135.532 1019.69 136.252 cv
1018.73 136.972 1017.35 137.332 1015.53 137.332 cv
1014.83 137.332 1014.09 137.252 1013.31 137.112 cv
1012.53 136.972 1011.73 136.752 1010.91 136.432 cv
1010.91 134.392 li
1011.71 134.852 1012.49 135.192 1013.25 135.412 cv
1014.01 135.652 1014.77 135.752 1015.53 135.752 cv
1016.65 135.752 1017.51 135.532 1018.13 135.092 cv
1018.73 134.652 1019.05 134.032 1019.05 133.192 cv
1019.05 132.472 1018.83 131.912 1018.39 131.512 cv
1017.95 131.112 1017.23 130.812 1016.23 130.612 cv
1015.03 130.372 li
1013.55 130.092 1012.49 129.632 1011.83 128.992 cv
1011.17 128.372 1010.85 127.512 1010.85 126.392 cv
1010.85 125.112 1011.29 124.092 1012.21 123.352 cv
1013.11 122.612 1014.37 122.232 1015.97 122.232 cv
1016.65 122.232 1017.33 122.292 1018.05 122.412 cv
1018.75 122.532 1019.47 122.732 1020.23 122.972 cv
f
1032.93 122.972 mo
1032.93 124.892 li
1032.17 124.532 1031.47 124.272 1030.81 124.092 cv
1030.13 123.932 1029.49 123.832 1028.89 123.832 cv
1027.81 123.832 1026.97 124.052 1026.39 124.452 cv
1025.81 124.872 1025.53 125.472 1025.53 126.232 cv
1025.53 126.872 1025.71 127.372 1026.11 127.692 cv
1026.49 128.032 1027.23 128.292 1028.31 128.492 cv
1029.51 128.732 li
1030.97 129.012 1032.05 129.512 1032.75 130.212 cv
1033.45 130.932 1033.81 131.872 1033.81 133.052 cv
1033.81 134.472 1033.33 135.532 1032.39 136.252 cv
1031.43 136.972 1030.05 137.332 1028.23 137.332 cv
1027.53 137.332 1026.79 137.252 1026.01 137.112 cv
1025.23 136.972 1024.43 136.752 1023.61 136.432 cv
1023.61 134.392 li
1024.41 134.852 1025.19 135.192 1025.95 135.412 cv
1026.71 135.652 1027.47 135.752 1028.23 135.752 cv
1029.35 135.752 1030.21 135.532 1030.83 135.092 cv
1031.43 134.652 1031.75 134.032 1031.75 133.192 cv
1031.75 132.472 1031.53 131.912 1031.09 131.512 cv
1030.65 131.112 1029.93 130.812 1028.93 130.612 cv
1027.73 130.372 li
1026.25 130.092 1025.19 129.632 1024.53 128.992 cv
1023.87 128.372 1023.55 127.512 1023.55 126.392 cv
1023.55 125.112 1023.99 124.092 1024.91 123.352 cv
1025.81 122.612 1027.07 122.232 1028.67 122.232 cv
1029.35 122.232 1030.03 122.292 1030.75 122.412 cv
1031.45 122.532 1032.17 122.732 1032.93 122.972 cv
f
1038.87 124.112 mo
1038.87 135.452 li
1041.25 135.452 li
1043.25 135.452 1044.73 135.012 1045.67 134.092 cv
1046.59 133.172 1047.07 131.732 1047.07 129.772 cv
1047.07 127.812 1046.59 126.392 1045.67 125.472 cv
1044.73 124.572 1043.25 124.112 1041.25 124.112 cv
1038.87 124.112 li
1036.89 122.492 mo
1040.95 122.492 li
1043.77 122.492 1045.85 123.092 1047.17 124.252 cv
1048.49 125.432 1049.15 127.272 1049.15 129.772 cv
1049.15 132.292 1048.47 134.132 1047.15 135.312 cv
1045.83 136.492 1043.75 137.072 1040.95 137.072 cv
1036.89 137.072 li
1036.89 122.492 li
f
1054.27 130.112 mo
1054.27 135.452 li
1057.43 135.452 li
1058.49 135.452 1059.27 135.232 1059.79 134.792 cv
1060.29 134.352 1060.55 133.692 1060.55 132.772 cv
1060.55 131.872 1060.29 131.212 1059.79 130.772 cv
1059.27 130.332 1058.49 130.112 1057.43 130.112 cv
1054.27 130.112 li
1054.27 124.112 mo
1054.27 128.512 li
1057.19 128.512 li
1058.15 128.512 1058.85 128.332 1059.33 127.972 cv
1059.81 127.612 1060.05 127.072 1060.05 126.312 cv
1060.05 125.592 1059.81 125.032 1059.33 124.672 cv
1058.85 124.312 1058.15 124.112 1057.19 124.112 cv
1054.27 124.112 li
1052.29 122.492 mo
1057.33 122.492 li
1058.83 122.492 1059.99 122.812 1060.81 123.432 cv
1061.61 124.072 1062.03 124.952 1062.03 126.092 cv
1062.03 126.992 1061.81 127.712 1061.39 128.232 cv
1060.97 128.752 1060.37 129.092 1059.57 129.212 cv
1060.53 129.432 1061.29 129.872 1061.83 130.532 cv
1062.35 131.192 1062.63 132.012 1062.63 132.992 cv
1062.63 134.312 1062.17 135.312 1061.29 136.012 cv
1060.41 136.732 1059.15 137.072 1057.53 137.072 cv
1052.29 137.072 li
1052.29 122.492 li
f
1066.01 122.492 mo
1068.67 122.492 li
1075.13 134.692 li
1075.13 122.492 li
1077.05 122.492 li
1077.05 137.072 li
1074.39 137.072 li
1067.93 124.872 li
1067.93 137.072 li
1066.01 137.072 li
1066.01 122.492 li
f
1091.57 121.892 mo
1090.69 123.412 1090.05 124.892 1089.63 126.352 cv
1089.19 127.812 1088.99 129.292 1088.99 130.792 cv
1088.99 132.312 1089.19 133.792 1089.63 135.252 cv
1090.05 136.732 1090.69 138.192 1091.57 139.692 cv
1090.01 139.692 li
1089.03 138.152 1088.29 136.672 1087.81 135.192 cv
1087.33 133.712 1087.09 132.252 1087.09 130.792 cv
1087.09 129.352 1087.33 127.892 1087.81 126.412 cv
1088.29 124.932 1089.01 123.432 1090.01 121.892 cv
1091.57 121.892 li
f
1102.05 130.232 mo
1102.47 130.392 1102.89 130.692 1103.29 131.152 cv
1103.69 131.632 1104.09 132.272 1104.49 133.092 cv
1106.49 137.072 li
1104.37 137.072 li
1102.51 133.332 li
1102.03 132.372 1101.55 131.712 1101.11 131.392 cv
1100.65 131.072 1100.03 130.912 1099.25 130.912 cv
1097.11 130.912 li
1097.11 137.072 li
1095.13 137.072 li
1095.13 122.492 li
1099.59 122.492 li
1101.25 122.492 1102.49 122.852 1103.31 123.532 cv
1104.13 124.232 1104.55 125.292 1104.55 126.692 cv
1104.55 127.612 1104.33 128.392 1103.91 128.992 cv
1103.47 129.592 1102.85 130.012 1102.05 130.232 cv
1097.11 124.112 mo
1097.11 129.292 li
1099.59 129.292 li
1100.53 129.292 1101.25 129.072 1101.73 128.632 cv
1102.21 128.192 1102.47 127.552 1102.47 126.692 cv
1102.47 125.852 1102.21 125.212 1101.73 124.772 cv
1101.25 124.332 1100.53 124.112 1099.59 124.112 cv
1097.11 124.112 li
f
1111.01 130.112 mo
1111.01 135.452 li
1114.17 135.452 li
1115.23 135.452 1116.01 135.232 1116.53 134.792 cv
1117.03 134.352 1117.29 133.692 1117.29 132.772 cv
1117.29 131.872 1117.03 131.212 1116.53 130.772 cv
1116.01 130.332 1115.23 130.112 1114.17 130.112 cv
1111.01 130.112 li
1111.01 124.112 mo
1111.01 128.512 li
1113.93 128.512 li
1114.89 128.512 1115.59 128.332 1116.07 127.972 cv
1116.55 127.612 1116.79 127.072 1116.79 126.312 cv
1116.79 125.592 1116.55 125.032 1116.07 124.672 cv
1115.59 124.312 1114.89 124.112 1113.93 124.112 cv
1111.01 124.112 li
1109.03 122.492 mo
1114.07 122.492 li
1115.57 122.492 1116.73 122.812 1117.55 123.432 cv
1118.35 124.072 1118.77 124.952 1118.77 126.092 cv
1118.77 126.992 1118.55 127.712 1118.13 128.232 cv
1117.71 128.752 1117.11 129.092 1116.31 129.212 cv
1117.27 129.432 1118.03 129.872 1118.57 130.532 cv
1119.09 131.192 1119.37 132.012 1119.37 132.992 cv
1119.37 134.312 1118.91 135.312 1118.03 136.012 cv
1117.15 136.732 1115.89 137.072 1114.27 137.072 cv
1109.03 137.072 li
1109.03 122.492 li
f
1122.75 122.492 mo
1125.69 122.492 li
1129.41 132.412 li
1133.15 122.492 li
1136.09 122.492 li
1136.09 137.072 li
1134.17 137.072 li
1134.17 124.272 li
1130.41 134.272 li
1128.43 134.272 li
1124.67 124.272 li
1124.67 137.072 li
1122.75 137.072 li
1122.75 122.492 li
f
1140.53 135.412 mo
1143.75 135.412 li
1143.75 124.292 li
1140.25 124.992 li
1140.25 123.192 li
1143.73 122.492 li
1145.71 122.492 li
1145.71 135.412 li
1148.93 135.412 li
1148.93 137.072 li
1140.53 137.072 li
1140.53 135.412 li
f
1152.37 121.892 mo
1153.93 121.892 li
1154.89 123.432 1155.63 124.932 1156.11 126.412 cv
1156.59 127.892 1156.85 129.352 1156.85 130.792 cv
1156.85 132.252 1156.59 133.712 1156.11 135.192 cv
1155.63 136.672 1154.89 138.152 1153.93 139.692 cv
1152.37 139.692 li
1153.23 138.192 1153.87 136.732 1154.31 135.252 cv
1154.73 133.792 1154.95 132.312 1154.95 130.792 cv
1154.95 129.292 1154.73 127.812 1154.31 126.352 cv
1153.87 124.892 1153.23 123.412 1152.37 121.892 cv
f
1.5 lw
2 lc
981.534 157.932 mo
1001.53 157.932 li
@
991.534 160.932 mo
991.534 154.932 li
f
1 lw
0 lc
991.534 160.932 mo
991.534 154.932 li
@
1020.23 147.332 mo
1020.23 149.252 li
1019.47 148.892 1018.77 148.632 1018.11 148.452 cv
1017.43 148.292 1016.79 148.192 1016.19 148.192 cv
1015.11 148.192 1014.27 148.412 1013.69 148.812 cv
1013.11 149.232 1012.83 149.832 1012.83 150.592 cv
1012.83 151.232 1013.01 151.732 1013.41 152.052 cv
1013.79 152.392 1014.53 152.652 1015.61 152.852 cv
1016.81 153.092 li
1018.27 153.372 1019.35 153.872 1020.05 154.572 cv
1020.75 155.292 1021.11 156.232 1021.11 157.412 cv
1021.11 158.832 1020.63 159.892 1019.69 160.612 cv
1018.73 161.332 1017.35 161.692 1015.53 161.692 cv
1014.83 161.692 1014.09 161.612 1013.31 161.472 cv
1012.53 161.332 1011.73 161.112 1010.91 160.792 cv
1010.91 158.752 li
1011.71 159.212 1012.49 159.552 1013.25 159.772 cv
1014.01 160.012 1014.77 160.112 1015.53 160.112 cv
1016.65 160.112 1017.51 159.892 1018.13 159.452 cv
1018.73 159.012 1019.05 158.392 1019.05 157.552 cv
1019.05 156.832 1018.83 156.272 1018.39 155.872 cv
1017.95 155.472 1017.23 155.172 1016.23 154.972 cv
1015.03 154.732 li
1013.55 154.452 1012.49 153.992 1011.83 153.352 cv
1011.17 152.732 1010.85 151.872 1010.85 150.752 cv
1010.85 149.472 1011.29 148.452 1012.21 147.712 cv
1013.11 146.972 1014.37 146.592 1015.97 146.592 cv
1016.65 146.592 1017.33 146.652 1018.05 146.772 cv
1018.75 146.892 1019.47 147.092 1020.23 147.332 cv
f
1032.93 147.332 mo
1032.93 149.252 li
1032.17 148.892 1031.47 148.632 1030.81 148.452 cv
1030.13 148.292 1029.49 148.192 1028.89 148.192 cv
1027.81 148.192 1026.97 148.412 1026.39 148.812 cv
1025.81 149.232 1025.53 149.832 1025.53 150.592 cv
1025.53 151.232 1025.71 151.732 1026.11 152.052 cv
1026.49 152.392 1027.23 152.652 1028.31 152.852 cv
1029.51 153.092 li
1030.97 153.372 1032.05 153.872 1032.75 154.572 cv
1033.45 155.292 1033.81 156.232 1033.81 157.412 cv
1033.81 158.832 1033.33 159.892 1032.39 160.612 cv
1031.43 161.332 1030.05 161.692 1028.23 161.692 cv
1027.53 161.692 1026.79 161.612 1026.01 161.472 cv
1025.23 161.332 1024.43 161.112 1023.61 160.792 cv
1023.61 158.752 li
1024.41 159.212 1025.19 159.552 1025.95 159.772 cv
1026.71 160.012 1027.47 160.112 1028.23 160.112 cv
1029.35 160.112 1030.21 159.892 1030.83 159.452 cv
1031.43 159.012 1031.75 158.392 1031.75 157.552 cv
1031.75 156.832 1031.53 156.272 1031.09 155.872 cv
1030.65 155.472 1029.93 155.172 1028.93 154.972 cv
1027.73 154.732 li
1026.25 154.452 1025.19 153.992 1024.53 153.352 cv
1023.87 152.732 1023.55 151.872 1023.55 150.752 cv
1023.55 149.472 1023.99 148.452 1024.91 147.712 cv
1025.81 146.972 1027.07 146.592 1028.67 146.592 cv
1029.35 146.592 1030.03 146.652 1030.75 146.772 cv
1031.45 146.892 1032.17 147.092 1032.93 147.332 cv
f
1038.87 148.472 mo
1038.87 159.812 li
1041.25 159.812 li
1043.25 159.812 1044.73 159.372 1045.67 158.452 cv
1046.59 157.532 1047.07 156.092 1047.07 154.132 cv
1047.07 152.172 1046.59 150.752 1045.67 149.832 cv
1044.73 148.932 1043.25 148.472 1041.25 148.472 cv
1038.87 148.472 li
1036.89 146.852 mo
1040.95 146.852 li
1043.77 146.852 1045.85 147.452 1047.17 148.612 cv
1048.49 149.792 1049.15 151.632 1049.15 154.132 cv
1049.15 156.652 1048.47 158.492 1047.15 159.672 cv
1045.83 160.852 1043.75 161.432 1040.95 161.432 cv
1036.89 161.432 li
1036.89 146.852 li
f
1054.27 154.472 mo
1054.27 159.812 li
1057.43 159.812 li
1058.49 159.812 1059.27 159.592 1059.79 159.152 cv
1060.29 158.712 1060.55 158.052 1060.55 157.132 cv
1060.55 156.232 1060.29 155.572 1059.79 155.132 cv
1059.27 154.692 1058.49 154.472 1057.43 154.472 cv
1054.27 154.472 li
1054.27 148.472 mo
1054.27 152.872 li
1057.19 152.872 li
1058.15 152.872 1058.85 152.692 1059.33 152.332 cv
1059.81 151.972 1060.05 151.432 1060.05 150.672 cv
1060.05 149.952 1059.81 149.392 1059.33 149.032 cv
1058.85 148.672 1058.15 148.472 1057.19 148.472 cv
1054.27 148.472 li
1052.29 146.852 mo
1057.33 146.852 li
1058.83 146.852 1059.99 147.172 1060.81 147.792 cv
1061.61 148.432 1062.03 149.312 1062.03 150.452 cv
1062.03 151.352 1061.81 152.072 1061.39 152.592 cv
1060.97 153.112 1060.37 153.452 1059.57 153.572 cv
1060.53 153.792 1061.29 154.232 1061.83 154.892 cv
1062.35 155.552 1062.63 156.372 1062.63 157.352 cv
1062.63 158.672 1062.17 159.672 1061.29 160.372 cv
1060.41 161.092 1059.15 161.432 1057.53 161.432 cv
1052.29 161.432 li
1052.29 146.852 li
f
1066.01 146.852 mo
1068.67 146.852 li
1075.13 159.052 li
1075.13 146.852 li
1077.05 146.852 li
1077.05 161.432 li
1074.39 161.432 li
1067.93 149.232 li
1067.93 161.432 li
1066.01 161.432 li
1066.01 146.852 li
f
1091.57 146.252 mo
1090.69 147.772 1090.05 149.252 1089.63 150.712 cv
1089.19 152.172 1088.99 153.652 1088.99 155.152 cv
1088.99 156.672 1089.19 158.152 1089.63 159.612 cv
1090.05 161.092 1090.69 162.552 1091.57 164.052 cv
1090.01 164.052 li
1089.03 162.512 1088.29 161.032 1087.81 159.552 cv
1087.33 158.072 1087.09 156.612 1087.09 155.152 cv
1087.09 153.712 1087.33 152.252 1087.81 150.772 cv
1088.29 149.292 1089.01 147.792 1090.01 146.252 cv
1091.57 146.252 li
f
1102.05 154.592 mo
1102.47 154.752 1102.89 155.052 1103.29 155.512 cv
1103.69 155.992 1104.09 156.632 1104.49 157.452 cv
1106.49 161.432 li
1104.37 161.432 li
1102.51 157.692 li
1102.03 156.732 1101.55 156.072 1101.11 155.752 cv
1100.65 155.432 1100.03 155.272 1099.25 155.272 cv
1097.11 155.272 li
1097.11 161.432 li
1095.13 161.432 li
1095.13 146.852 li
1099.59 146.852 li
1101.25 146.852 1102.49 147.212 1103.31 147.892 cv
1104.13 148.592 1104.55 149.652 1104.55 151.052 cv
1104.55 151.972 1104.33 152.752 1103.91 153.352 cv
1103.47 153.952 1102.85 154.372 1102.05 154.592 cv
1097.11 148.472 mo
1097.11 153.652 li
1099.59 153.652 li
1100.53 153.652 1101.25 153.432 1101.73 152.992 cv
1102.21 152.552 1102.47 151.912 1102.47 151.052 cv
1102.47 150.212 1102.21 149.572 1101.73 149.132 cv
1101.25 148.692 1100.53 148.472 1099.59 148.472 cv
1097.11 148.472 li
f
1111.01 154.472 mo
1111.01 159.812 li
1114.17 159.812 li
1115.23 159.812 1116.01 159.592 1116.53 159.152 cv
1117.03 158.712 1117.29 158.052 1117.29 157.132 cv
1117.29 156.232 1117.03 155.572 1116.53 155.132 cv
1116.01 154.692 1115.23 154.472 1114.17 154.472 cv
1111.01 154.472 li
1111.01 148.472 mo
1111.01 152.872 li
1113.93 152.872 li
1114.89 152.872 1115.59 152.692 1116.07 152.332 cv
1116.55 151.972 1116.79 151.432 1116.79 150.672 cv
1116.79 149.952 1116.55 149.392 1116.07 149.032 cv
1115.59 148.672 1114.89 148.472 1113.93 148.472 cv
1111.01 148.472 li
1109.03 146.852 mo
1114.07 146.852 li
1115.57 146.852 1116.73 147.172 1117.55 147.792 cv
1118.35 148.432 1118.77 149.312 1118.77 150.452 cv
1118.77 151.352 1118.55 152.072 1118.13 152.592 cv
1117.71 153.112 1117.11 153.452 1116.31 153.572 cv
1117.27 153.792 1118.03 154.232 1118.57 154.892 cv
1119.09 155.552 1119.37 156.372 1119.37 157.352 cv
1119.37 158.672 1118.91 159.672 1118.03 160.372 cv
1117.15 161.092 1115.89 161.432 1114.27 161.432 cv
1109.03 161.432 li
1109.03 146.852 li
f
1122.75 146.852 mo
1125.69 146.852 li
1129.41 156.772 li
1133.15 146.852 li
1136.09 146.852 li
1136.09 161.432 li
1134.17 161.432 li
1134.17 148.632 li
1130.41 158.632 li
1128.43 158.632 li
1124.67 148.632 li
1124.67 161.432 li
1122.75 161.432 li
1122.75 146.852 li
f
1141.89 159.772 mo
1148.77 159.772 li
1148.77 161.432 li
1139.51 161.432 li
1139.51 159.772 li
1140.25 159.012 1141.27 157.972 1142.57 156.652 cv
1143.85 155.352 1144.67 154.512 1145.01 154.132 cv
1145.65 153.432 1146.09 152.832 1146.33 152.332 cv
1146.57 151.852 1146.71 151.352 1146.71 150.872 cv
1146.71 150.112 1146.43 149.472 1145.89 148.992 cv
1145.35 148.512 1144.65 148.252 1143.77 148.252 cv
1143.15 148.252 1142.49 148.372 1141.81 148.572 cv
1141.13 148.792 1140.39 149.112 1139.61 149.552 cv
1139.61 147.552 li
1140.41 147.232 1141.15 146.992 1141.83 146.832 cv
1142.51 146.672 1143.15 146.592 1143.73 146.592 cv
1145.23 146.592 1146.43 146.972 1147.33 147.732 cv
1148.23 148.492 1148.69 149.492 1148.69 150.752 cv
1148.69 151.352 1148.57 151.932 1148.35 152.452 cv
1148.13 152.992 1147.73 153.632 1147.13 154.352 cv
1146.97 154.552 1146.45 155.092 1145.57 155.992 cv
1144.69 156.892 1143.47 158.152 1141.89 159.772 cv
f
1152.37 146.252 mo
1153.93 146.252 li
1154.89 147.792 1155.63 149.292 1156.11 150.772 cv
1156.59 152.252 1156.85 153.712 1156.85 155.152 cv
1156.85 156.612 1156.59 158.072 1156.11 159.552 cv
1155.63 161.032 1154.89 162.512 1153.93 164.052 cv
1152.37 164.052 li
1153.23 162.552 1153.87 161.092 1154.31 159.612 cv
1154.73 158.152 1154.95 156.672 1154.95 155.152 cv
1154.95 153.652 1154.73 152.172 1154.31 150.712 cv
1153.87 149.252 1153.23 147.772 1152.37 146.252 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
