%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: RBM012-eps-converted-to.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: sun
%%CreationDate: 2019/6/11, 11:47:22
%%BoundingBox: 0 0 1168 599
%%HiResBoundingBox: 0 0 1168 599
%%CropBox: 0 0 1168 599
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-06-11T11:46:39+08:00"
   xmp:CreatorTool="matplotlib 2.2.2, http://matplotlib.org"
   xmp:ModifyDate="2019-06-11T11:47:14+08:00"
   xmp:MetadataDate="2019-06-11T11:47:14+08:00"
   pdf:Producer="matplotlib pdf backend 2.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:96a4e36d-9402-479c-8ded-31b763c82797"
   xmpMM:InstanceID="uuid:1265880f-18e5-4476-ba9d-b8a0e318c220"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -599 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 599 li
1168 599 li
1168 0 li
cp
clp
gsave
-2.28882e-5 599.68 mo
1168 599.68 li
1168 -.320114 li
-2.28882e-5 -.320114 li
-2.28882e-5 599.68 li
clp
-86 618.68 mo
1296.4 618.68 li
1296.4 -79 li
-86 -79 li
-86 618.68 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
86.8001 541.935 mo
1158.16 541.935 li
1158.16 4.72177 li
86.8001 4.72177 li
86.8001 541.935 li
f
135.498 541.935 mo
135.498 545.435 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
135.498 541.935 mo
135.498 545.435 li
@
135.499 550.858 mo
134.479 550.858 133.719 551.358 133.199 552.358 cv
132.679 553.358 132.439 554.858 132.439 556.858 cv
132.439 558.858 132.679 560.358 133.199 561.358 cv
133.719 562.358 134.479 562.858 135.499 562.858 cv
136.519 562.858 137.279 562.358 137.799 561.358 cv
138.299 560.358 138.559 558.858 138.559 556.858 cv
138.559 554.858 138.299 553.358 137.799 552.358 cv
137.279 551.358 136.519 550.858 135.499 550.858 cv
135.499 549.298 mo
137.119 549.298 138.359 549.958 139.239 551.238 cv
140.099 552.538 140.539 554.418 140.539 556.858 cv
140.539 559.318 140.099 561.198 139.239 562.478 cv
138.359 563.758 137.119 564.398 135.499 564.398 cv
133.859 564.398 132.599 563.758 131.739 562.478 cv
130.879 561.198 130.459 559.318 130.459 556.858 cv
130.459 554.418 130.879 552.538 131.739 551.238 cv
132.599 549.958 133.859 549.298 135.499 549.298 cv
f
332.259 541.935 mo
332.259 545.435 li
f
332.259 541.935 mo
332.259 545.435 li
@
323.38 562.478 mo
330.26 562.478 li
330.26 564.138 li
321 564.138 li
321 562.478 li
321.74 561.718 322.76 560.678 324.06 559.358 cv
325.34 558.058 326.16 557.218 326.5 556.838 cv
327.14 556.138 327.58 555.538 327.82 555.038 cv
328.06 554.558 328.2 554.058 328.2 553.578 cv
328.2 552.818 327.92 552.178 327.38 551.698 cv
326.84 551.218 326.14 550.958 325.26 550.958 cv
324.64 550.958 323.98 551.078 323.3 551.278 cv
322.62 551.498 321.88 551.818 321.1 552.258 cv
321.1 550.258 li
321.9 549.938 322.64 549.698 323.32 549.538 cv
324 549.378 324.64 549.298 325.22 549.298 cv
326.72 549.298 327.92 549.678 328.82 550.438 cv
329.72 551.198 330.18 552.198 330.18 553.458 cv
330.18 554.058 330.06 554.638 329.84 555.158 cv
329.62 555.698 329.22 556.338 328.62 557.058 cv
328.46 557.258 327.94 557.798 327.06 558.698 cv
326.18 559.598 324.96 560.858 323.38 562.478 cv
f
338.62 550.858 mo
337.6 550.858 336.84 551.358 336.32 552.358 cv
335.8 553.358 335.56 554.858 335.56 556.858 cv
335.56 558.858 335.8 560.358 336.32 561.358 cv
336.84 562.358 337.6 562.858 338.62 562.858 cv
339.64 562.858 340.4 562.358 340.92 561.358 cv
341.42 560.358 341.68 558.858 341.68 556.858 cv
341.68 554.858 341.42 553.358 340.92 552.358 cv
340.4 551.358 339.64 550.858 338.62 550.858 cv
338.62 549.298 mo
340.24 549.298 341.48 549.958 342.36 551.238 cv
343.22 552.538 343.66 554.418 343.66 556.858 cv
343.66 559.318 343.22 561.198 342.36 562.478 cv
341.48 563.758 340.24 564.398 338.62 564.398 cv
336.98 564.398 335.72 563.758 334.86 562.478 cv
334 561.198 333.58 559.318 333.58 556.858 cv
333.58 554.418 334 552.538 334.86 551.238 cv
335.72 549.958 336.98 549.298 338.62 549.298 cv
f
529.019 541.935 mo
529.019 545.435 li
f
529.019 541.935 mo
529.019 545.435 li
@
523.86 551.278 mo
518.88 559.058 li
523.86 559.058 li
523.86 551.278 li
523.34 549.558 mo
525.82 549.558 li
525.82 559.058 li
527.9 559.058 li
527.9 560.698 li
525.82 560.698 li
525.82 564.138 li
523.86 564.138 li
523.86 560.698 li
517.28 560.698 li
517.28 558.798 li
523.34 549.558 li
f
535.38 550.858 mo
534.36 550.858 533.6 551.358 533.08 552.358 cv
532.56 553.358 532.32 554.858 532.32 556.858 cv
532.32 558.858 532.56 560.358 533.08 561.358 cv
533.6 562.358 534.36 562.858 535.38 562.858 cv
536.4 562.858 537.16 562.358 537.68 561.358 cv
538.18 560.358 538.44 558.858 538.44 556.858 cv
538.44 554.858 538.18 553.358 537.68 552.358 cv
537.16 551.358 536.4 550.858 535.38 550.858 cv
535.38 549.298 mo
537 549.298 538.24 549.958 539.12 551.238 cv
539.98 552.538 540.42 554.418 540.42 556.858 cv
540.42 559.318 539.98 561.198 539.12 562.478 cv
538.24 563.758 537 564.398 535.38 564.398 cv
533.74 564.398 532.48 563.758 531.62 562.478 cv
530.76 561.198 530.34 559.318 530.34 556.858 cv
530.34 554.418 530.76 552.538 531.62 551.238 cv
532.48 549.958 533.74 549.298 535.38 549.298 cv
f
725.779 541.935 mo
725.779 545.435 li
f
725.779 541.935 mo
725.779 545.435 li
@
719.66 556.058 mo
718.78 556.058 718.08 556.378 717.56 556.978 cv
717.04 557.578 716.78 558.418 716.78 559.458 cv
716.78 560.518 717.04 561.358 717.56 561.958 cv
718.08 562.558 718.78 562.858 719.66 562.858 cv
720.54 562.858 721.24 562.558 721.76 561.958 cv
722.28 561.358 722.54 560.518 722.54 559.458 cv
722.54 558.418 722.28 557.578 721.76 556.978 cv
721.24 556.378 720.54 556.058 719.66 556.058 cv
723.58 549.878 mo
723.58 551.678 li
723.08 551.438 722.58 551.258 722.08 551.138 cv
721.56 551.018 721.06 550.958 720.58 550.958 cv
719.26 550.958 718.26 551.398 717.58 552.278 cv
716.9 553.158 716.5 554.498 716.42 556.258 cv
716.8 555.698 717.28 555.258 717.86 554.958 cv
718.44 554.658 719.08 554.498 719.78 554.498 cv
721.24 554.498 722.4 554.958 723.24 555.838 cv
724.08 556.718 724.52 557.938 724.52 559.458 cv
724.52 560.958 724.06 562.158 723.18 563.058 cv
722.3 563.958 721.12 564.398 719.66 564.398 cv
717.98 564.398 716.68 563.758 715.8 562.478 cv
714.9 561.198 714.46 559.318 714.46 556.858 cv
714.46 554.558 715 552.718 716.1 551.358 cv
717.18 549.998 718.66 549.298 720.5 549.298 cv
720.98 549.298 721.48 549.358 722 549.438 cv
722.5 549.538 723.02 549.678 723.58 549.878 cv
f
732.14 550.858 mo
731.12 550.858 730.36 551.358 729.84 552.358 cv
729.32 553.358 729.08 554.858 729.08 556.858 cv
729.08 558.858 729.32 560.358 729.84 561.358 cv
730.36 562.358 731.12 562.858 732.14 562.858 cv
733.16 562.858 733.92 562.358 734.44 561.358 cv
734.94 560.358 735.2 558.858 735.2 556.858 cv
735.2 554.858 734.94 553.358 734.44 552.358 cv
733.92 551.358 733.16 550.858 732.14 550.858 cv
732.14 549.298 mo
733.76 549.298 735 549.958 735.88 551.238 cv
736.74 552.538 737.18 554.418 737.18 556.858 cv
737.18 559.318 736.74 561.198 735.88 562.478 cv
735 563.758 733.76 564.398 732.14 564.398 cv
730.5 564.398 729.24 563.758 728.38 562.478 cv
727.52 561.198 727.1 559.318 727.1 556.858 cv
727.1 554.418 727.52 552.538 728.38 551.238 cv
729.24 549.958 730.5 549.298 732.14 549.298 cv
f
922.539 541.935 mo
922.539 545.435 li
f
922.539 541.935 mo
922.539 545.435 li
@
916.181 557.218 mo
915.241 557.218 914.501 557.478 913.961 557.978 cv
913.421 558.478 913.161 559.158 913.161 560.038 cv
913.161 560.918 913.421 561.618 913.961 562.118 cv
914.501 562.618 915.241 562.858 916.181 562.858 cv
917.101 562.858 917.841 562.618 918.381 562.098 cv
918.921 561.598 919.201 560.918 919.201 560.038 cv
919.201 559.158 918.921 558.478 918.401 557.978 cv
917.861 557.478 917.121 557.218 916.181 557.218 cv
914.201 556.378 mo
913.361 556.178 912.701 555.778 912.221 555.198 cv
911.741 554.618 911.521 553.918 911.521 553.078 cv
911.521 551.918 911.921 550.998 912.761 550.318 cv
913.581 549.638 914.721 549.298 916.181 549.298 cv
917.621 549.298 918.761 549.638 919.601 550.318 cv
920.421 550.998 920.841 551.918 920.841 553.078 cv
920.841 553.918 920.601 554.618 920.121 555.198 cv
919.641 555.778 919.001 556.178 918.161 556.378 cv
919.101 556.598 919.841 557.038 920.381 557.678 cv
920.901 558.318 921.181 559.118 921.181 560.038 cv
921.181 561.458 920.741 562.538 919.881 563.278 cv
919.001 564.038 917.781 564.398 916.181 564.398 cv
914.561 564.398 913.321 564.038 912.461 563.278 cv
911.601 562.538 911.181 561.458 911.181 560.038 cv
911.181 559.118 911.441 558.318 911.981 557.678 cv
912.501 557.038 913.241 556.598 914.201 556.378 cv
913.481 553.258 mo
913.481 554.018 913.701 554.618 914.181 555.038 cv
914.661 555.458 915.321 555.658 916.181 555.658 cv
917.021 555.658 917.681 555.458 918.161 555.038 cv
918.641 554.618 918.881 554.018 918.881 553.258 cv
918.881 552.498 918.641 551.918 918.161 551.498 cv
917.681 551.078 917.021 550.858 916.181 550.858 cv
915.321 550.858 914.661 551.078 914.181 551.498 cv
913.701 551.918 913.481 552.498 913.481 553.258 cv
f
928.901 550.858 mo
927.881 550.858 927.121 551.358 926.601 552.358 cv
926.081 553.358 925.841 554.858 925.841 556.858 cv
925.841 558.858 926.081 560.358 926.601 561.358 cv
927.121 562.358 927.881 562.858 928.901 562.858 cv
929.921 562.858 930.681 562.358 931.201 561.358 cv
931.701 560.358 931.961 558.858 931.961 556.858 cv
931.961 554.858 931.701 553.358 931.201 552.358 cv
930.681 551.358 929.921 550.858 928.901 550.858 cv
928.901 549.298 mo
930.521 549.298 931.761 549.958 932.641 551.238 cv
933.501 552.538 933.941 554.418 933.941 556.858 cv
933.941 559.318 933.501 561.198 932.641 562.478 cv
931.761 563.758 930.521 564.398 928.901 564.398 cv
927.261 564.398 926.001 563.758 925.141 562.478 cv
924.281 561.198 923.861 559.318 923.861 556.858 cv
923.861 554.418 924.281 552.538 925.141 551.238 cv
926.001 549.958 927.261 549.298 928.901 549.298 cv
f
1119.3 541.935 mo
1119.3 545.435 li
f
1119.3 541.935 mo
1119.3 545.435 li
@
1102.7 562.478 mo
1105.92 562.478 li
1105.92 551.358 li
1102.42 552.058 li
1102.42 550.258 li
1105.9 549.558 li
1107.88 549.558 li
1107.88 562.478 li
1111.1 562.478 li
1111.1 564.138 li
1102.7 564.138 li
1102.7 562.478 li
f
1119.3 550.858 mo
1118.28 550.858 1117.52 551.358 1117 552.358 cv
1116.48 553.358 1116.24 554.858 1116.24 556.858 cv
1116.24 558.858 1116.48 560.358 1117 561.358 cv
1117.52 562.358 1118.28 562.858 1119.3 562.858 cv
1120.32 562.858 1121.08 562.358 1121.6 561.358 cv
1122.1 560.358 1122.36 558.858 1122.36 556.858 cv
1122.36 554.858 1122.1 553.358 1121.6 552.358 cv
1121.08 551.358 1120.32 550.858 1119.3 550.858 cv
1119.3 549.298 mo
1120.92 549.298 1122.16 549.958 1123.04 551.238 cv
1123.9 552.538 1124.34 554.418 1124.34 556.858 cv
1124.34 559.318 1123.9 561.198 1123.04 562.478 cv
1122.16 563.758 1120.92 564.398 1119.3 564.398 cv
1117.66 564.398 1116.4 563.758 1115.54 562.478 cv
1114.68 561.198 1114.26 559.318 1114.26 556.858 cv
1114.26 554.418 1114.68 552.538 1115.54 551.238 cv
1116.4 549.958 1117.66 549.298 1119.3 549.298 cv
f
1132.02 550.858 mo
1131 550.858 1130.24 551.358 1129.72 552.358 cv
1129.2 553.358 1128.96 554.858 1128.96 556.858 cv
1128.96 558.858 1129.2 560.358 1129.72 561.358 cv
1130.24 562.358 1131 562.858 1132.02 562.858 cv
1133.04 562.858 1133.8 562.358 1134.32 561.358 cv
1134.82 560.358 1135.08 558.858 1135.08 556.858 cv
1135.08 554.858 1134.82 553.358 1134.32 552.358 cv
1133.8 551.358 1133.04 550.858 1132.02 550.858 cv
1132.02 549.298 mo
1133.64 549.298 1134.88 549.958 1135.76 551.238 cv
1136.62 552.538 1137.06 554.418 1137.06 556.858 cv
1137.06 559.318 1136.62 561.198 1135.76 562.478 cv
1134.88 563.758 1133.64 564.398 1132.02 564.398 cv
1130.38 564.398 1129.12 563.758 1128.26 562.478 cv
1127.4 561.198 1126.98 559.318 1126.98 556.858 cv
1126.98 554.418 1127.4 552.538 1128.26 551.238 cv
1129.12 549.958 1130.38 549.298 1132.02 549.298 cv
f
593.815 572.918 mo
603.035 572.918 li
603.035 574.578 li
595.795 574.578 li
595.795 578.898 li
602.735 578.898 li
602.735 580.558 li
595.795 580.558 li
595.795 585.838 li
603.215 585.838 li
603.215 587.498 li
593.815 587.498 li
593.815 572.918 li
f
608.115 585.858 mo
608.115 591.638 li
606.315 591.638 li
606.315 576.558 li
608.115 576.558 li
608.115 578.218 li
608.475 577.578 608.955 577.098 609.535 576.778 cv
610.115 576.458 610.815 576.298 611.615 576.298 cv
612.935 576.298 614.015 576.838 614.855 577.878 cv
615.675 578.938 616.095 580.318 616.095 582.038 cv
616.095 583.758 615.675 585.158 614.855 586.198 cv
614.015 587.238 612.935 587.758 611.615 587.758 cv
610.815 587.758 610.115 587.598 609.535 587.298 cv
608.955 586.998 608.475 586.518 608.115 585.858 cv
614.235 582.038 mo
614.235 580.718 613.955 579.698 613.415 578.938 cv
612.855 578.178 612.115 577.798 611.175 577.798 cv
610.215 577.798 609.475 578.178 608.935 578.938 cv
608.375 579.698 608.115 580.718 608.115 582.038 cv
608.115 583.358 608.375 584.398 608.935 585.158 cv
609.475 585.918 610.215 586.278 611.175 586.278 cv
612.115 586.278 612.855 585.918 613.415 585.158 cv
613.955 584.398 614.235 583.358 614.235 582.038 cv
f
623.315 577.818 mo
622.355 577.818 621.595 578.198 621.035 578.958 cv
620.475 579.718 620.195 580.738 620.195 582.038 cv
620.195 583.358 620.455 584.378 621.015 585.138 cv
621.575 585.898 622.335 586.258 623.315 586.258 cv
624.275 586.258 625.035 585.898 625.595 585.138 cv
626.155 584.378 626.435 583.358 626.435 582.038 cv
626.435 580.758 626.155 579.718 625.595 578.958 cv
625.035 578.198 624.275 577.818 623.315 577.818 cv
623.315 576.298 mo
624.875 576.298 626.095 576.818 626.995 577.818 cv
627.875 578.838 628.335 580.238 628.335 582.038 cv
628.335 583.838 627.875 585.238 626.995 586.238 cv
626.095 587.258 624.875 587.758 623.315 587.758 cv
621.735 587.758 620.495 587.258 619.615 586.238 cv
618.735 585.238 618.295 583.838 618.295 582.038 cv
618.295 580.238 618.735 578.838 619.615 577.818 cv
620.495 576.818 621.735 576.298 623.315 576.298 cv
f
639.195 576.978 mo
639.195 578.658 li
638.675 578.378 638.175 578.178 637.655 578.038 cv
637.135 577.898 636.635 577.818 636.115 577.818 cv
634.955 577.818 634.035 578.198 633.395 578.938 cv
632.755 579.678 632.435 580.718 632.435 582.038 cv
632.435 583.378 632.755 584.418 633.395 585.158 cv
634.035 585.898 634.955 586.258 636.115 586.258 cv
636.635 586.258 637.135 586.198 637.655 586.058 cv
638.175 585.918 638.675 585.698 639.195 585.418 cv
639.195 587.078 li
638.675 587.318 638.155 587.498 637.635 587.598 cv
637.095 587.698 636.515 587.758 635.915 587.758 cv
634.275 587.758 632.955 587.258 631.995 586.218 cv
631.015 585.198 630.535 583.798 630.535 582.038 cv
630.535 580.258 631.015 578.858 631.995 577.838 cv
632.975 576.818 634.315 576.298 636.035 576.298 cv
636.595 576.298 637.135 576.358 637.655 576.478 cv
638.175 576.598 638.695 576.758 639.195 576.978 cv
f
651.415 580.898 mo
651.415 587.498 li
649.615 587.498 li
649.615 580.958 li
649.615 579.918 649.395 579.158 648.995 578.638 cv
648.595 578.118 647.995 577.858 647.195 577.858 cv
646.215 577.858 645.455 578.178 644.895 578.798 cv
644.335 579.418 644.055 580.258 644.055 581.318 cv
644.055 587.498 li
642.255 587.498 li
642.255 572.298 li
644.055 572.298 li
644.055 578.258 li
644.475 577.618 644.975 577.118 645.575 576.798 cv
646.155 576.478 646.835 576.298 647.595 576.298 cv
648.835 576.298 649.795 576.698 650.435 577.478 cv
651.075 578.258 651.415 579.398 651.415 580.898 cv
f
86.8 533.032 mo
83.3 533.032 li
f
86.8 533.032 mo
83.3 533.032 li
@
31.405 538.974 mo
34.625 538.974 li
34.625 527.854 li
31.125 528.554 li
31.125 526.754 li
34.605 526.054 li
36.585 526.054 li
36.585 538.974 li
39.805 538.974 li
39.805 540.634 li
31.405 540.634 li
31.405 538.974 li
f
48.005 527.354 mo
46.985 527.354 46.225 527.854 45.705 528.854 cv
45.185 529.854 44.945 531.354 44.945 533.354 cv
44.945 535.354 45.185 536.854 45.705 537.854 cv
46.225 538.854 46.985 539.354 48.005 539.354 cv
49.025 539.354 49.785 538.854 50.305 537.854 cv
50.805 536.854 51.065 535.354 51.065 533.354 cv
51.065 531.354 50.805 529.854 50.305 528.854 cv
49.785 527.854 49.025 527.354 48.005 527.354 cv
48.005 525.794 mo
49.625 525.794 50.865 526.454 51.745 527.734 cv
52.605 529.034 53.045 530.914 53.045 533.354 cv
53.045 535.814 52.605 537.694 51.745 538.974 cv
50.865 540.254 49.625 540.894 48.005 540.894 cv
46.365 540.894 45.105 540.254 44.245 538.974 cv
43.385 537.694 42.965 535.814 42.965 533.354 cv
42.965 530.914 43.385 529.034 44.245 527.734 cv
45.105 526.454 46.365 525.794 48.005 525.794 cv
f
60.7251 527.354 mo
59.7051 527.354 58.9451 527.854 58.4251 528.854 cv
57.9051 529.854 57.6651 531.354 57.6651 533.354 cv
57.6651 535.354 57.9051 536.854 58.4251 537.854 cv
58.9451 538.854 59.7051 539.354 60.7251 539.354 cv
61.7451 539.354 62.5051 538.854 63.0251 537.854 cv
63.5251 536.854 63.7851 535.354 63.7851 533.354 cv
63.7851 531.354 63.5251 529.854 63.0251 528.854 cv
62.5051 527.854 61.7451 527.354 60.7251 527.354 cv
60.7251 525.794 mo
62.3451 525.794 63.5851 526.454 64.4651 527.734 cv
65.3251 529.034 65.7651 530.914 65.7651 533.354 cv
65.7651 535.814 65.3251 537.694 64.4651 538.974 cv
63.5851 540.254 62.3451 540.894 60.7251 540.894 cv
59.0851 540.894 57.8251 540.254 56.9651 538.974 cv
56.1051 537.694 55.6851 535.814 55.6851 533.354 cv
55.6851 530.914 56.1051 529.034 56.9651 527.734 cv
57.8251 526.454 59.0851 525.794 60.7251 525.794 cv
f
73.4451 527.354 mo
72.4251 527.354 71.6651 527.854 71.1451 528.854 cv
70.6251 529.854 70.3851 531.354 70.3851 533.354 cv
70.3851 535.354 70.6251 536.854 71.1451 537.854 cv
71.6651 538.854 72.4251 539.354 73.4451 539.354 cv
74.4651 539.354 75.2251 538.854 75.7451 537.854 cv
76.2451 536.854 76.5051 535.354 76.5051 533.354 cv
76.5051 531.354 76.2451 529.854 75.7451 528.854 cv
75.2251 527.854 74.4651 527.354 73.4451 527.354 cv
73.4451 525.794 mo
75.0651 525.794 76.3051 526.454 77.1851 527.734 cv
78.0451 529.034 78.4851 530.914 78.4851 533.354 cv
78.4851 535.814 78.0451 537.694 77.1851 538.974 cv
76.3051 540.254 75.0651 540.894 73.4451 540.894 cv
71.8051 540.894 70.5451 540.254 69.6851 538.974 cv
68.8251 537.694 68.4051 535.814 68.4051 533.354 cv
68.4051 530.914 68.8251 529.034 69.6851 527.734 cv
70.5451 526.454 71.8051 525.794 73.4451 525.794 cv
f
86.8 446.911 mo
83.3 446.911 li
f
86.8 446.911 mo
83.3 446.911 li
@
32.765 452.853 mo
39.645 452.853 li
39.645 454.513 li
30.385 454.513 li
30.385 452.853 li
31.125 452.093 32.145 451.053 33.445 449.733 cv
34.725 448.433 35.545 447.593 35.885 447.213 cv
36.525 446.513 36.965 445.913 37.205 445.413 cv
37.445 444.933 37.585 444.433 37.585 443.953 cv
37.585 443.193 37.305 442.553 36.765 442.073 cv
36.225 441.593 35.525 441.333 34.645 441.333 cv
34.025 441.333 33.365 441.453 32.685 441.653 cv
32.005 441.873 31.265 442.193 30.485 442.633 cv
30.485 440.633 li
31.285 440.313 32.025 440.073 32.705 439.913 cv
33.385 439.753 34.025 439.673 34.605 439.673 cv
36.105 439.673 37.305 440.053 38.205 440.813 cv
39.105 441.573 39.565 442.573 39.565 443.833 cv
39.565 444.433 39.445 445.013 39.225 445.533 cv
39.005 446.073 38.605 446.713 38.005 447.433 cv
37.845 447.633 37.325 448.173 36.445 449.073 cv
35.565 449.973 34.345 451.233 32.765 452.853 cv
f
48.005 441.233 mo
46.985 441.233 46.225 441.733 45.705 442.733 cv
45.185 443.733 44.945 445.233 44.945 447.233 cv
44.945 449.233 45.185 450.733 45.705 451.733 cv
46.225 452.733 46.985 453.233 48.005 453.233 cv
49.025 453.233 49.785 452.733 50.305 451.733 cv
50.805 450.733 51.065 449.233 51.065 447.233 cv
51.065 445.233 50.805 443.733 50.305 442.733 cv
49.785 441.733 49.025 441.233 48.005 441.233 cv
48.005 439.673 mo
49.625 439.673 50.865 440.333 51.745 441.613 cv
52.605 442.913 53.045 444.793 53.045 447.233 cv
53.045 449.693 52.605 451.573 51.745 452.853 cv
50.865 454.133 49.625 454.773 48.005 454.773 cv
46.365 454.773 45.105 454.133 44.245 452.853 cv
43.385 451.573 42.965 449.693 42.965 447.233 cv
42.965 444.793 43.385 442.913 44.245 441.613 cv
45.105 440.333 46.365 439.673 48.005 439.673 cv
f
60.7251 441.233 mo
59.7051 441.233 58.9451 441.733 58.4251 442.733 cv
57.9051 443.733 57.6651 445.233 57.6651 447.233 cv
57.6651 449.233 57.9051 450.733 58.4251 451.733 cv
58.9451 452.733 59.7051 453.233 60.7251 453.233 cv
61.7451 453.233 62.5051 452.733 63.0251 451.733 cv
63.5251 450.733 63.7851 449.233 63.7851 447.233 cv
63.7851 445.233 63.5251 443.733 63.0251 442.733 cv
62.5051 441.733 61.7451 441.233 60.7251 441.233 cv
60.7251 439.673 mo
62.3451 439.673 63.5851 440.333 64.4651 441.613 cv
65.3251 442.913 65.7651 444.793 65.7651 447.233 cv
65.7651 449.693 65.3251 451.573 64.4651 452.853 cv
63.5851 454.133 62.3451 454.773 60.7251 454.773 cv
59.0851 454.773 57.8251 454.133 56.9651 452.853 cv
56.1051 451.573 55.6851 449.693 55.6851 447.233 cv
55.6851 444.793 56.1051 442.913 56.9651 441.613 cv
57.8251 440.333 59.0851 439.673 60.7251 439.673 cv
f
73.4451 441.233 mo
72.4251 441.233 71.6651 441.733 71.1451 442.733 cv
70.6251 443.733 70.3851 445.233 70.3851 447.233 cv
70.3851 449.233 70.6251 450.733 71.1451 451.733 cv
71.6651 452.733 72.4251 453.233 73.4451 453.233 cv
74.4651 453.233 75.2251 452.733 75.7451 451.733 cv
76.2451 450.733 76.5051 449.233 76.5051 447.233 cv
76.5051 445.233 76.2451 443.733 75.7451 442.733 cv
75.2251 441.733 74.4651 441.233 73.4451 441.233 cv
73.4451 439.673 mo
75.0651 439.673 76.3051 440.333 77.1851 441.613 cv
78.0451 442.913 78.4851 444.793 78.4851 447.233 cv
78.4851 449.693 78.0451 451.573 77.1851 452.853 cv
76.3051 454.133 75.0651 454.773 73.4451 454.773 cv
71.8051 454.773 70.5451 454.133 69.6851 452.853 cv
68.8251 451.573 68.4051 449.693 68.4051 447.233 cv
68.4051 444.793 68.8251 442.913 69.6851 441.613 cv
70.5451 440.333 71.8051 439.673 73.4451 439.673 cv
f
86.8 360.79 mo
83.3 360.79 li
f
86.8 360.79 mo
83.3 360.79 li
@
37.045 360.532 mo
37.985 360.732 38.725 361.152 39.245 361.792 cv
39.765 362.432 40.045 363.232 40.045 364.152 cv
40.045 365.592 39.545 366.712 38.565 367.492 cv
37.565 368.272 36.165 368.652 34.345 368.652 cv
33.725 368.652 33.085 368.592 32.445 368.472 cv
31.805 368.372 31.125 368.192 30.445 367.952 cv
30.445 366.052 li
30.985 366.372 31.585 366.612 32.245 366.772 cv
32.885 366.932 33.565 367.012 34.285 367.012 cv
35.525 367.012 36.465 366.772 37.105 366.292 cv
37.745 365.812 38.085 365.092 38.085 364.152 cv
38.085 363.312 37.785 362.632 37.185 362.152 cv
36.585 361.672 35.745 361.412 34.665 361.412 cv
32.965 361.412 li
32.965 359.792 li
34.745 359.792 li
35.705 359.792 36.445 359.612 36.965 359.212 cv
37.485 358.832 37.745 358.272 37.745 357.532 cv
37.745 356.792 37.465 356.212 36.945 355.812 cv
36.405 355.412 35.645 355.212 34.665 355.212 cv
34.125 355.212 33.545 355.272 32.925 355.392 cv
32.305 355.512 31.625 355.692 30.885 355.932 cv
30.885 354.172 li
31.625 353.972 32.325 353.812 32.985 353.712 cv
33.625 353.612 34.245 353.552 34.845 353.552 cv
36.325 353.552 37.505 353.892 38.385 354.572 cv
39.265 355.252 39.705 356.172 39.705 357.332 cv
39.705 358.132 39.465 358.812 39.005 359.372 cv
38.545 359.932 37.885 360.332 37.045 360.532 cv
f
48.005 355.112 mo
46.985 355.112 46.225 355.612 45.705 356.612 cv
45.185 357.612 44.945 359.112 44.945 361.112 cv
44.945 363.112 45.185 364.612 45.705 365.612 cv
46.225 366.612 46.985 367.112 48.005 367.112 cv
49.025 367.112 49.785 366.612 50.305 365.612 cv
50.805 364.612 51.065 363.112 51.065 361.112 cv
51.065 359.112 50.805 357.612 50.305 356.612 cv
49.785 355.612 49.025 355.112 48.005 355.112 cv
48.005 353.552 mo
49.625 353.552 50.865 354.212 51.745 355.492 cv
52.605 356.792 53.045 358.672 53.045 361.112 cv
53.045 363.572 52.605 365.452 51.745 366.732 cv
50.865 368.012 49.625 368.652 48.005 368.652 cv
46.365 368.652 45.105 368.012 44.245 366.732 cv
43.385 365.452 42.965 363.572 42.965 361.112 cv
42.965 358.672 43.385 356.792 44.245 355.492 cv
45.105 354.212 46.365 353.552 48.005 353.552 cv
f
60.7251 355.112 mo
59.7051 355.112 58.9451 355.612 58.4251 356.612 cv
57.9051 357.612 57.6651 359.112 57.6651 361.112 cv
57.6651 363.112 57.9051 364.612 58.4251 365.612 cv
58.9451 366.612 59.7051 367.112 60.7251 367.112 cv
61.7451 367.112 62.5051 366.612 63.0251 365.612 cv
63.5251 364.612 63.7851 363.112 63.7851 361.112 cv
63.7851 359.112 63.5251 357.612 63.0251 356.612 cv
62.5051 355.612 61.7451 355.112 60.7251 355.112 cv
60.7251 353.552 mo
62.3451 353.552 63.5851 354.212 64.4651 355.492 cv
65.3251 356.792 65.7651 358.672 65.7651 361.112 cv
65.7651 363.572 65.3251 365.452 64.4651 366.732 cv
63.5851 368.012 62.3451 368.652 60.7251 368.652 cv
59.0851 368.652 57.8251 368.012 56.9651 366.732 cv
56.1051 365.452 55.6851 363.572 55.6851 361.112 cv
55.6851 358.672 56.1051 356.792 56.9651 355.492 cv
57.8251 354.212 59.0851 353.552 60.7251 353.552 cv
f
73.4451 355.112 mo
72.4251 355.112 71.6651 355.612 71.1451 356.612 cv
70.6251 357.612 70.3851 359.112 70.3851 361.112 cv
70.3851 363.112 70.6251 364.612 71.1451 365.612 cv
71.6651 366.612 72.4251 367.112 73.4451 367.112 cv
74.4651 367.112 75.2251 366.612 75.7451 365.612 cv
76.2451 364.612 76.5051 363.112 76.5051 361.112 cv
76.5051 359.112 76.2451 357.612 75.7451 356.612 cv
75.2251 355.612 74.4651 355.112 73.4451 355.112 cv
73.4451 353.552 mo
75.0651 353.552 76.3051 354.212 77.1851 355.492 cv
78.0451 356.792 78.4851 358.672 78.4851 361.112 cv
78.4851 363.572 78.0451 365.452 77.1851 366.732 cv
76.3051 368.012 75.0651 368.652 73.4451 368.652 cv
71.8051 368.652 70.5451 368.012 69.6851 366.732 cv
68.8251 365.452 68.4051 363.572 68.4051 361.112 cv
68.4051 358.672 68.8251 356.792 69.6851 355.492 cv
70.5451 354.212 71.8051 353.552 73.4451 353.552 cv
f
86.8 274.67 mo
83.3 274.67 li
f
86.8 274.67 mo
83.3 274.67 li
@
36.485 269.411 mo
31.505 277.191 li
36.485 277.191 li
36.485 269.411 li
35.965 267.691 mo
38.445 267.691 li
38.445 277.191 li
40.525 277.191 li
40.525 278.831 li
38.445 278.831 li
38.445 282.271 li
36.485 282.271 li
36.485 278.831 li
29.905 278.831 li
29.905 276.931 li
35.965 267.691 li
f
48.005 268.991 mo
46.985 268.991 46.225 269.491 45.705 270.491 cv
45.185 271.491 44.945 272.991 44.945 274.991 cv
44.945 276.991 45.185 278.491 45.705 279.491 cv
46.225 280.491 46.985 280.991 48.005 280.991 cv
49.025 280.991 49.785 280.491 50.305 279.491 cv
50.805 278.491 51.065 276.991 51.065 274.991 cv
51.065 272.991 50.805 271.491 50.305 270.491 cv
49.785 269.491 49.025 268.991 48.005 268.991 cv
48.005 267.431 mo
49.625 267.431 50.865 268.091 51.745 269.371 cv
52.605 270.671 53.045 272.551 53.045 274.991 cv
53.045 277.451 52.605 279.331 51.745 280.611 cv
50.865 281.891 49.625 282.531 48.005 282.531 cv
46.365 282.531 45.105 281.891 44.245 280.611 cv
43.385 279.331 42.965 277.451 42.965 274.991 cv
42.965 272.551 43.385 270.671 44.245 269.371 cv
45.105 268.091 46.365 267.431 48.005 267.431 cv
f
60.7251 268.991 mo
59.7051 268.991 58.9451 269.491 58.4251 270.491 cv
57.9051 271.491 57.6651 272.991 57.6651 274.991 cv
57.6651 276.991 57.9051 278.491 58.4251 279.491 cv
58.9451 280.491 59.7051 280.991 60.7251 280.991 cv
61.7451 280.991 62.5051 280.491 63.0251 279.491 cv
63.5251 278.491 63.7851 276.991 63.7851 274.991 cv
63.7851 272.991 63.5251 271.491 63.0251 270.491 cv
62.5051 269.491 61.7451 268.991 60.7251 268.991 cv
60.7251 267.431 mo
62.3451 267.431 63.5851 268.091 64.4651 269.371 cv
65.3251 270.671 65.7651 272.551 65.7651 274.991 cv
65.7651 277.451 65.3251 279.331 64.4651 280.611 cv
63.5851 281.891 62.3451 282.531 60.7251 282.531 cv
59.0851 282.531 57.8251 281.891 56.9651 280.611 cv
56.1051 279.331 55.6851 277.451 55.6851 274.991 cv
55.6851 272.551 56.1051 270.671 56.9651 269.371 cv
57.8251 268.091 59.0851 267.431 60.7251 267.431 cv
f
73.4451 268.991 mo
72.4251 268.991 71.6651 269.491 71.1451 270.491 cv
70.6251 271.491 70.3851 272.991 70.3851 274.991 cv
70.3851 276.991 70.6251 278.491 71.1451 279.491 cv
71.6651 280.491 72.4251 280.991 73.4451 280.991 cv
74.4651 280.991 75.2251 280.491 75.7451 279.491 cv
76.2451 278.491 76.5051 276.991 76.5051 274.991 cv
76.5051 272.991 76.2451 271.491 75.7451 270.491 cv
75.2251 269.491 74.4651 268.991 73.4451 268.991 cv
73.4451 267.431 mo
75.0651 267.431 76.3051 268.091 77.1851 269.371 cv
78.0451 270.671 78.4851 272.551 78.4851 274.991 cv
78.4851 277.451 78.0451 279.331 77.1851 280.611 cv
76.3051 281.891 75.0651 282.531 73.4451 282.531 cv
71.8051 282.531 70.5451 281.891 69.6851 280.611 cv
68.8251 279.331 68.4051 277.451 68.4051 274.991 cv
68.4051 272.551 68.8251 270.671 69.6851 269.371 cv
70.5451 268.091 71.8051 267.431 73.4451 267.431 cv
f
86.8 188.549 mo
83.3 188.549 li
f
86.8 188.549 mo
83.3 188.549 li
@
31.085 181.57 mo
38.825 181.57 li
38.825 183.23 li
32.885 183.23 li
32.885 186.81 li
33.165 186.71 33.465 186.63 33.745 186.59 cv
34.025 186.55 34.325 186.51 34.605 186.51 cv
36.225 186.51 37.505 186.97 38.465 187.85 cv
39.425 188.75 39.905 189.95 39.905 191.47 cv
39.905 193.05 39.405 194.27 38.425 195.13 cv
37.445 195.99 36.065 196.41 34.305 196.41 cv
33.685 196.41 33.065 196.35 32.425 196.27 cv
31.785 196.17 31.145 196.03 30.465 195.81 cv
30.465 193.83 li
31.045 194.15 31.645 194.39 32.285 194.55 cv
32.905 194.71 33.565 194.77 34.265 194.77 cv
35.385 194.77 36.285 194.49 36.945 193.89 cv
37.585 193.29 37.925 192.49 37.925 191.47 cv
37.925 190.47 37.585 189.67 36.945 189.07 cv
36.285 188.47 35.385 188.17 34.265 188.17 cv
33.745 188.17 33.205 188.23 32.685 188.35 cv
32.165 188.47 31.625 188.65 31.085 188.89 cv
31.085 181.57 li
f
48.005 182.87 mo
46.985 182.87 46.225 183.37 45.705 184.37 cv
45.185 185.37 44.945 186.87 44.945 188.87 cv
44.945 190.87 45.185 192.37 45.705 193.37 cv
46.225 194.37 46.985 194.87 48.005 194.87 cv
49.025 194.87 49.785 194.37 50.305 193.37 cv
50.805 192.37 51.065 190.87 51.065 188.87 cv
51.065 186.87 50.805 185.37 50.305 184.37 cv
49.785 183.37 49.025 182.87 48.005 182.87 cv
48.005 181.31 mo
49.625 181.31 50.865 181.97 51.745 183.25 cv
52.605 184.55 53.045 186.43 53.045 188.87 cv
53.045 191.33 52.605 193.21 51.745 194.49 cv
50.865 195.77 49.625 196.41 48.005 196.41 cv
46.365 196.41 45.105 195.77 44.245 194.49 cv
43.385 193.21 42.965 191.33 42.965 188.87 cv
42.965 186.43 43.385 184.55 44.245 183.25 cv
45.105 181.97 46.365 181.31 48.005 181.31 cv
f
60.7251 182.87 mo
59.7051 182.87 58.9451 183.37 58.4251 184.37 cv
57.9051 185.37 57.6651 186.87 57.6651 188.87 cv
57.6651 190.87 57.9051 192.37 58.4251 193.37 cv
58.9451 194.37 59.7051 194.87 60.7251 194.87 cv
61.7451 194.87 62.5051 194.37 63.0251 193.37 cv
63.5251 192.37 63.7851 190.87 63.7851 188.87 cv
63.7851 186.87 63.5251 185.37 63.0251 184.37 cv
62.5051 183.37 61.7451 182.87 60.7251 182.87 cv
60.7251 181.31 mo
62.3451 181.31 63.5851 181.97 64.4651 183.25 cv
65.3251 184.55 65.7651 186.43 65.7651 188.87 cv
65.7651 191.33 65.3251 193.21 64.4651 194.49 cv
63.5851 195.77 62.3451 196.41 60.7251 196.41 cv
59.0851 196.41 57.8251 195.77 56.9651 194.49 cv
56.1051 193.21 55.6851 191.33 55.6851 188.87 cv
55.6851 186.43 56.1051 184.55 56.9651 183.25 cv
57.8251 181.97 59.0851 181.31 60.7251 181.31 cv
f
73.4451 182.87 mo
72.4251 182.87 71.6651 183.37 71.1451 184.37 cv
70.6251 185.37 70.3851 186.87 70.3851 188.87 cv
70.3851 190.87 70.6251 192.37 71.1451 193.37 cv
71.6651 194.37 72.4251 194.87 73.4451 194.87 cv
74.4651 194.87 75.2251 194.37 75.7451 193.37 cv
76.2451 192.37 76.5051 190.87 76.5051 188.87 cv
76.5051 186.87 76.2451 185.37 75.7451 184.37 cv
75.2251 183.37 74.4651 182.87 73.4451 182.87 cv
73.4451 181.31 mo
75.0651 181.31 76.3051 181.97 77.1851 183.25 cv
78.0451 184.55 78.4851 186.43 78.4851 188.87 cv
78.4851 191.33 78.0451 193.21 77.1851 194.49 cv
76.3051 195.77 75.0651 196.41 73.4451 196.41 cv
71.8051 196.41 70.5451 195.77 69.6851 194.49 cv
68.8251 193.21 68.4051 191.33 68.4051 188.87 cv
68.4051 186.43 68.8251 184.55 69.6851 183.25 cv
70.5451 181.97 71.8051 181.31 73.4451 181.31 cv
f
86.8 102.428 mo
83.3 102.428 li
f
86.8 102.428 mo
83.3 102.428 li
@
35.525 101.949 mo
34.645 101.949 33.945 102.269 33.425 102.869 cv
32.905 103.469 32.645 104.309 32.645 105.349 cv
32.645 106.409 32.905 107.249 33.425 107.849 cv
33.945 108.449 34.645 108.749 35.525 108.749 cv
36.405 108.749 37.105 108.449 37.625 107.849 cv
38.145 107.249 38.405 106.409 38.405 105.349 cv
38.405 104.309 38.145 103.469 37.625 102.869 cv
37.105 102.269 36.405 101.949 35.525 101.949 cv
39.445 95.7694 mo
39.445 97.5694 li
38.945 97.3294 38.445 97.1494 37.945 97.0294 cv
37.425 96.9094 36.925 96.8494 36.445 96.8494 cv
35.125 96.8494 34.125 97.2894 33.445 98.1694 cv
32.765 99.0494 32.365 100.389 32.285 102.149 cv
32.665 101.589 33.145 101.149 33.725 100.849 cv
34.305 100.549 34.945 100.389 35.645 100.389 cv
37.105 100.389 38.265 100.849 39.105 101.729 cv
39.945 102.609 40.385 103.829 40.385 105.349 cv
40.385 106.849 39.925 108.049 39.045 108.949 cv
38.165 109.849 36.985 110.289 35.525 110.289 cv
33.845 110.289 32.545 109.649 31.665 108.369 cv
30.765 107.089 30.325 105.209 30.325 102.749 cv
30.325 100.449 30.865 98.6094 31.965 97.2494 cv
33.045 95.8894 34.525 95.1894 36.365 95.1894 cv
36.845 95.1894 37.345 95.2494 37.865 95.3294 cv
38.365 95.4294 38.885 95.5694 39.445 95.7694 cv
f
48.005 96.7494 mo
46.985 96.7494 46.225 97.2494 45.705 98.2494 cv
45.185 99.2494 44.945 100.749 44.945 102.749 cv
44.945 104.749 45.185 106.249 45.705 107.249 cv
46.225 108.249 46.985 108.749 48.005 108.749 cv
49.025 108.749 49.785 108.249 50.305 107.249 cv
50.805 106.249 51.065 104.749 51.065 102.749 cv
51.065 100.749 50.805 99.2494 50.305 98.2494 cv
49.785 97.2494 49.025 96.7494 48.005 96.7494 cv
48.005 95.1894 mo
49.625 95.1894 50.865 95.8494 51.745 97.1294 cv
52.605 98.4294 53.045 100.309 53.045 102.749 cv
53.045 105.209 52.605 107.089 51.745 108.369 cv
50.865 109.649 49.625 110.289 48.005 110.289 cv
46.365 110.289 45.105 109.649 44.245 108.369 cv
43.385 107.089 42.965 105.209 42.965 102.749 cv
42.965 100.309 43.385 98.4294 44.245 97.1294 cv
45.105 95.8494 46.365 95.1894 48.005 95.1894 cv
f
60.7251 96.7494 mo
59.7051 96.7494 58.9451 97.2494 58.4251 98.2494 cv
57.9051 99.2494 57.6651 100.749 57.6651 102.749 cv
57.6651 104.749 57.9051 106.249 58.4251 107.249 cv
58.9451 108.249 59.7051 108.749 60.7251 108.749 cv
61.7451 108.749 62.5051 108.249 63.0251 107.249 cv
63.5251 106.249 63.7851 104.749 63.7851 102.749 cv
63.7851 100.749 63.5251 99.2494 63.0251 98.2494 cv
62.5051 97.2494 61.7451 96.7494 60.7251 96.7494 cv
60.7251 95.1894 mo
62.3451 95.1894 63.5851 95.8494 64.4651 97.1294 cv
65.3251 98.4294 65.7651 100.309 65.7651 102.749 cv
65.7651 105.209 65.3251 107.089 64.4651 108.369 cv
63.5851 109.649 62.3451 110.289 60.7251 110.289 cv
59.0851 110.289 57.8251 109.649 56.9651 108.369 cv
56.1051 107.089 55.6851 105.209 55.6851 102.749 cv
55.6851 100.309 56.1051 98.4294 56.9651 97.1294 cv
57.8251 95.8494 59.0851 95.1894 60.7251 95.1894 cv
f
73.4451 96.7494 mo
72.4251 96.7494 71.6651 97.2494 71.1451 98.2494 cv
70.6251 99.2494 70.3851 100.749 70.3851 102.749 cv
70.3851 104.749 70.6251 106.249 71.1451 107.249 cv
71.6651 108.249 72.4251 108.749 73.4451 108.749 cv
74.4651 108.749 75.2251 108.249 75.7451 107.249 cv
76.2451 106.249 76.5051 104.749 76.5051 102.749 cv
76.5051 100.749 76.2451 99.2494 75.7451 98.2494 cv
75.2251 97.2494 74.4651 96.7494 73.4451 96.7494 cv
73.4451 95.1894 mo
75.0651 95.1894 76.3051 95.8494 77.1851 97.1294 cv
78.0451 98.4294 78.4851 100.309 78.4851 102.749 cv
78.4851 105.209 78.0451 107.089 77.1851 108.369 cv
76.3051 109.649 75.0651 110.289 73.4451 110.289 cv
71.8051 110.289 70.5451 109.649 69.6851 108.369 cv
68.8251 107.089 68.4051 105.209 68.4051 102.749 cv
68.4051 100.309 68.8251 98.4294 69.6851 97.1294 cv
70.5451 95.8494 71.8051 95.1894 73.4451 95.1894 cv
f
86.8 16.3069 mo
83.3 16.3069 li
f
86.8 16.3069 mo
83.3 16.3069 li
@
30.565 9.32845 mo
39.945 9.32845 li
39.945 10.1684 li
34.645 23.9084 li
32.585 23.9084 li
37.565 10.9884 li
30.565 10.9884 li
30.565 9.32845 li
f
48.005 10.6284 mo
46.985 10.6284 46.225 11.1284 45.705 12.1284 cv
45.185 13.1284 44.945 14.6284 44.945 16.6284 cv
44.945 18.6284 45.185 20.1284 45.705 21.1284 cv
46.225 22.1284 46.985 22.6284 48.005 22.6284 cv
49.025 22.6284 49.785 22.1284 50.305 21.1284 cv
50.805 20.1284 51.065 18.6284 51.065 16.6284 cv
51.065 14.6284 50.805 13.1284 50.305 12.1284 cv
49.785 11.1284 49.025 10.6284 48.005 10.6284 cv
48.005 9.06845 mo
49.625 9.06845 50.865 9.72845 51.745 11.0084 cv
52.605 12.3084 53.045 14.1884 53.045 16.6284 cv
53.045 19.0884 52.605 20.9684 51.745 22.2484 cv
50.865 23.5284 49.625 24.1684 48.005 24.1684 cv
46.365 24.1684 45.105 23.5284 44.245 22.2484 cv
43.385 20.9684 42.965 19.0884 42.965 16.6284 cv
42.965 14.1884 43.385 12.3084 44.245 11.0084 cv
45.105 9.72845 46.365 9.06845 48.005 9.06845 cv
f
60.7251 10.6284 mo
59.7051 10.6284 58.9451 11.1284 58.4251 12.1284 cv
57.9051 13.1284 57.6651 14.6284 57.6651 16.6284 cv
57.6651 18.6284 57.9051 20.1284 58.4251 21.1284 cv
58.9451 22.1284 59.7051 22.6284 60.7251 22.6284 cv
61.7451 22.6284 62.5051 22.1284 63.0251 21.1284 cv
63.5251 20.1284 63.7851 18.6284 63.7851 16.6284 cv
63.7851 14.6284 63.5251 13.1284 63.0251 12.1284 cv
62.5051 11.1284 61.7451 10.6284 60.7251 10.6284 cv
60.7251 9.06845 mo
62.3451 9.06845 63.5851 9.72845 64.4651 11.0084 cv
65.3251 12.3084 65.7651 14.1884 65.7651 16.6284 cv
65.7651 19.0884 65.3251 20.9684 64.4651 22.2484 cv
63.5851 23.5284 62.3451 24.1684 60.7251 24.1684 cv
59.0851 24.1684 57.8251 23.5284 56.9651 22.2484 cv
56.1051 20.9684 55.6851 19.0884 55.6851 16.6284 cv
55.6851 14.1884 56.1051 12.3084 56.9651 11.0084 cv
57.8251 9.72845 59.0851 9.06845 60.7251 9.06845 cv
f
73.4451 10.6284 mo
72.4251 10.6284 71.6651 11.1284 71.1451 12.1284 cv
70.6251 13.1284 70.3851 14.6284 70.3851 16.6284 cv
70.3851 18.6284 70.6251 20.1284 71.1451 21.1284 cv
71.6651 22.1284 72.4251 22.6284 73.4451 22.6284 cv
74.4651 22.6284 75.2251 22.1284 75.7451 21.1284 cv
76.2451 20.1284 76.5051 18.6284 76.5051 16.6284 cv
76.5051 14.6284 76.2451 13.1284 75.7451 12.1284 cv
75.2251 11.1284 74.4651 10.6284 73.4451 10.6284 cv
73.4451 9.06845 mo
75.0651 9.06845 76.3051 9.72845 77.1851 11.0084 cv
78.0451 12.3084 78.4851 14.1884 78.4851 16.6284 cv
78.4851 19.0884 78.0451 20.9684 77.1851 22.2484 cv
76.3051 23.5284 75.0651 24.1684 73.4451 24.1684 cv
71.8051 24.1684 70.5451 23.5284 69.6851 22.2484 cv
68.8251 20.9684 68.4051 19.0884 68.4051 16.6284 cv
68.4051 14.1884 68.8251 12.3084 69.6851 11.0084 cv
70.5451 9.72845 71.8051 9.06845 73.4451 9.06845 cv
f
6.18875 296.134 mo
6.18875 286.914 li
7.84875 286.914 li
7.84875 294.154 li
12.1688 294.154 li
12.1688 287.214 li
13.8288 287.214 li
13.8288 294.154 li
19.1087 294.154 li
19.1087 286.734 li
20.7688 286.734 li
20.7688 296.134 li
6.18875 296.134 li
f
11.5088 277.234 mo
11.3887 277.434 11.3088 277.654 11.2487 277.894 cv
11.2088 278.134 11.1688 278.394 11.1688 278.674 cv
11.1688 279.694 11.5088 280.474 12.1688 281.014 cv
12.8288 281.574 13.7688 281.834 15.0088 281.834 cv
20.7688 281.834 li
20.7688 283.634 li
9.82875 283.634 li
9.82875 281.834 li
11.5288 281.834 li
10.8688 281.474 10.3688 280.974 10.0488 280.374 cv
9.72875 279.774 9.56876 279.034 9.56876 278.154 cv
9.56876 278.034 9.58875 277.894 9.58875 277.734 cv
9.60875 277.594 9.62875 277.434 9.66875 277.234 cv
11.5088 277.234 li
f
11.5088 269.014 mo
11.3887 269.214 11.3088 269.434 11.2487 269.674 cv
11.2088 269.914 11.1688 270.174 11.1688 270.454 cv
11.1688 271.474 11.5088 272.254 12.1688 272.794 cv
12.8288 273.354 13.7688 273.614 15.0088 273.614 cv
20.7688 273.614 li
20.7688 275.414 li
9.82875 275.414 li
9.82875 273.614 li
11.5288 273.614 li
10.8688 273.254 10.3688 272.754 10.0488 272.154 cv
9.72875 271.554 9.56876 270.814 9.56876 269.934 cv
9.56876 269.814 9.58875 269.674 9.58875 269.514 cv
9.60875 269.374 9.62875 269.214 9.66875 269.014 cv
11.5088 269.014 li
f
11.0888 262.894 mo
11.0888 263.854 11.4688 264.614 12.2288 265.174 cv
12.9888 265.734 14.0088 266.014 15.3088 266.014 cv
16.6288 266.014 17.6488 265.754 18.4088 265.194 cv
19.1688 264.634 19.5288 263.874 19.5288 262.894 cv
19.5288 261.934 19.1688 261.174 18.4088 260.614 cv
17.6488 260.054 16.6288 259.774 15.3088 259.774 cv
14.0288 259.774 12.9888 260.054 12.2288 260.614 cv
11.4688 261.174 11.0888 261.934 11.0888 262.894 cv
9.56876 262.894 mo
9.56876 261.334 10.0888 260.114 11.0888 259.214 cv
12.1087 258.334 13.5088 257.874 15.3088 257.874 cv
17.1087 257.874 18.5088 258.334 19.5088 259.214 cv
20.5288 260.114 21.0288 261.334 21.0288 262.894 cv
21.0288 264.474 20.5288 265.714 19.5088 266.594 cv
18.5088 267.474 17.1087 267.914 15.3088 267.914 cv
13.5088 267.914 12.1087 267.474 11.0888 266.594 cv
10.0888 265.714 9.56876 264.474 9.56876 262.894 cv
f
11.5088 248.554 mo
11.3887 248.754 11.3088 248.974 11.2487 249.214 cv
11.2088 249.454 11.1688 249.714 11.1688 249.994 cv
11.1688 251.014 11.5088 251.794 12.1688 252.334 cv
12.8288 252.894 13.7688 253.154 15.0088 253.154 cv
20.7688 253.154 li
20.7688 254.954 li
9.82875 254.954 li
9.82875 253.154 li
11.5288 253.154 li
10.8688 252.794 10.3688 252.294 10.0488 251.694 cv
9.72875 251.094 9.56876 250.354 9.56876 249.474 cv
9.56876 249.354 9.58875 249.214 9.58875 249.054 cv
9.60875 248.914 9.62875 248.754 9.66875 248.554 cv
11.5088 248.554 li
f
1.5 lw
2 lc
135.498 87.5088 mo
145.336 122.645 li
155.174 137.638 li
165.012 145.793 li
174.85 149.952 li
184.688 154.874 li
194.526 155.544 li
204.364 157.399 li
214.202 159.84 li
224.04 162.832 li
233.878 163.183 li
243.716 165.88 li
253.554 167.499 li
263.392 170.327 li
273.23 171.218 li
283.068 172.958 li
292.906 173.046 li
302.744 174.007 li
312.582 176.117 li
322.421 175.703 li
332.259 178.245 li
342.097 177.111 li
351.935 178.462 li
361.773 177.861 li
371.611 179.156 li
381.449 178.781 li
391.287 178.17 li
401.125 179.839 li
410.963 179.486 li
420.801 179.051 li
430.639 181.734 li
440.477 180.698 li
450.315 181.567 li
460.153 182.657 li
469.991 182.308 li
479.829 183.101 li
489.667 182.578 li
499.505 181.639 li
509.343 184.388 li
519.181 183.362 li
529.019 183.922 li
538.857 183.395 li
548.695 184.267 li
558.533 184.65 li
568.371 186.658 li
578.209 186.598 li
588.047 186.789 li
597.885 185.576 li
607.723 187.085 li
617.561 186.017 li
627.399 186.557 li
637.237 189.213 li
647.075 188.341 li
656.913 187.853 li
666.751 187.933 li
676.589 187.725 li
686.427 188.323 li
696.265 190.353 li
706.103 190.574 li
715.941 189.677 li
725.779 189.553 li
735.617 189.08 li
745.455 190.164 li
755.293 190.509 li
765.131 191.659 li
774.969 191.692 li
784.807 190.963 li
794.645 191.64 li
804.483 191.866 li
814.321 191.947 li
824.159 192.621 li
833.997 192.589 li
843.835 191.415 li
853.673 193.045 li
863.511 192.803 li
873.349 192.281 li
883.187 192.884 li
893.025 193.886 li
902.863 192.711 li
912.701 195.143 li
922.539 194.731 li
932.378 193.505 li
942.216 194.684 li
952.054 193.947 li
961.892 195.113 li
971.73 194.966 li
981.568 194.869 li
991.406 195.085 li
1001.24 195.917 li
1011.08 195.48 li
1020.92 195.453 li
1030.76 196.159 li
1040.6 194.861 li
1050.43 195.486 li
1060.27 195.774 li
1070.11 197.033 li
1079.95 196.903 li
1089.79 196.864 li
1099.62 197.287 li
1109.46 196.87 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
135.498 287.243 mo
145.336 304.046 li
155.174 326.928 li
165.012 346.462 li
174.85 359.845 li
184.688 370.183 li
194.526 376.262 li
204.364 382.091 li
214.202 387.414 li
224.04 390.025 li
233.878 392.305 li
243.716 394.022 li
253.554 395.934 li
263.392 398.403 li
273.23 398.997 li
283.068 400.149 li
292.906 401.452 li
302.744 401.61 li
312.582 402.428 li
322.421 402.473 li
332.259 403.666 li
342.097 403.83 li
351.935 404.243 li
361.773 404.369 li
371.611 403.963 li
381.449 404.588 li
391.287 404.403 li
401.125 405.112 li
410.963 405.239 li
420.801 404.179 li
430.639 405.451 li
440.477 405.944 li
450.315 406.362 li
460.153 406.475 li
469.991 406.468 li
479.829 405.878 li
489.667 405.881 li
499.505 406.17 li
509.343 407.076 li
519.181 408.14 li
529.019 407.413 li
538.857 407.643 li
548.695 407.579 li
558.533 407.201 li
568.371 407.149 li
578.209 407.31 li
588.047 406.138 li
597.885 407.2 li
607.723 408.083 li
617.561 408.569 li
627.399 407.831 li
637.237 407.766 li
647.075 407.993 li
656.913 409.038 li
666.751 408.608 li
676.589 409.31 li
686.427 409.007 li
696.265 408.477 li
706.103 408.83 li
715.941 408.3 li
725.779 408.65 li
735.617 409.026 li
745.455 409.641 li
755.293 408.955 li
765.131 409.071 li
774.969 409.848 li
784.807 408.76 li
794.645 409.456 li
804.483 409.141 li
814.321 409.23 li
824.159 408.923 li
833.997 408.696 li
843.835 410.214 li
853.673 408.831 li
863.511 410.393 li
873.349 409.288 li
883.187 410.179 li
893.025 409.924 li
902.863 409.784 li
912.701 410.031 li
922.539 410.762 li
932.378 410.293 li
942.216 409.937 li
952.054 410.628 li
961.892 409.595 li
971.73 409.713 li
981.568 410.349 li
991.406 410.357 li
1001.24 411.312 li
1011.08 409.879 li
1020.92 411.13 li
1030.76 411.057 li
1040.6 409.959 li
1050.43 410.177 li
1060.27 411.041 li
1070.11 410.744 li
1079.95 410.866 li
1089.79 410.827 li
1099.62 410.89 li
1109.46 410.314 li
@
gsave
131.998 290.743 mo
138.998 290.743 li
138.998 283.743 li
131.998 283.743 li
131.998 290.743 li
clp
132.498 290.243 mo
138.498 284.243 li
132.498 284.243 mo
138.498 290.243 li
f
1 lw
0 lc
132.498 290.243 mo
138.498 284.243 li
132.498 284.243 mo
138.498 290.243 li
@
grestore
gsave
141.836 307.546 mo
148.836 307.546 li
148.836 300.546 li
141.836 300.546 li
141.836 307.546 li
clp
142.336 307.046 mo
148.336 301.046 li
142.336 301.046 mo
148.336 307.046 li
f
1 lw
0 lc
142.336 307.046 mo
148.336 301.046 li
142.336 301.046 mo
148.336 307.046 li
@
grestore
gsave
151.674 330.428 mo
158.674 330.428 li
158.674 323.428 li
151.674 323.428 li
151.674 330.428 li
clp
152.174 329.928 mo
158.174 323.928 li
152.174 323.928 mo
158.174 329.928 li
f
1 lw
0 lc
152.174 329.928 mo
158.174 323.928 li
152.174 323.928 mo
158.174 329.928 li
@
grestore
gsave
161.512 349.962 mo
168.512 349.962 li
168.512 342.962 li
161.512 342.962 li
161.512 349.962 li
clp
162.012 349.462 mo
168.012 343.462 li
162.012 343.462 mo
168.012 349.462 li
f
1 lw
0 lc
162.012 349.462 mo
168.012 343.462 li
162.012 343.462 mo
168.012 349.462 li
@
grestore
gsave
171.35 363.345 mo
178.35 363.345 li
178.35 356.345 li
171.35 356.345 li
171.35 363.345 li
clp
171.85 362.845 mo
177.85 356.845 li
171.85 356.845 mo
177.85 362.845 li
f
1 lw
0 lc
171.85 362.845 mo
177.85 356.845 li
171.85 356.845 mo
177.85 362.845 li
@
grestore
gsave
181.188 373.683 mo
188.188 373.683 li
188.188 366.683 li
181.188 366.683 li
181.188 373.683 li
clp
181.688 373.183 mo
187.688 367.183 li
181.688 367.183 mo
187.688 373.183 li
f
1 lw
0 lc
181.688 373.183 mo
187.688 367.183 li
181.688 367.183 mo
187.688 373.183 li
@
grestore
gsave
191.026 379.762 mo
198.026 379.762 li
198.026 372.762 li
191.026 372.762 li
191.026 379.762 li
clp
191.526 379.262 mo
197.526 373.262 li
191.526 373.262 mo
197.526 379.262 li
f
1 lw
0 lc
191.526 379.262 mo
197.526 373.262 li
191.526 373.262 mo
197.526 379.262 li
@
grestore
gsave
200.864 385.591 mo
207.864 385.591 li
207.864 378.591 li
200.864 378.591 li
200.864 385.591 li
clp
201.364 385.091 mo
207.364 379.091 li
201.364 379.091 mo
207.364 385.091 li
f
1 lw
0 lc
201.364 385.091 mo
207.364 379.091 li
201.364 379.091 mo
207.364 385.091 li
@
grestore
gsave
210.702 390.914 mo
217.702 390.914 li
217.702 383.914 li
210.702 383.914 li
210.702 390.914 li
clp
211.202 390.414 mo
217.202 384.414 li
211.202 384.414 mo
217.202 390.414 li
f
1 lw
0 lc
211.202 390.414 mo
217.202 384.414 li
211.202 384.414 mo
217.202 390.414 li
@
grestore
gsave
220.54 393.526 mo
227.54 393.526 li
227.54 386.525 li
220.54 386.525 li
220.54 393.526 li
clp
221.04 393.025 mo
227.04 387.025 li
221.04 387.025 mo
227.04 393.025 li
f
1 lw
0 lc
221.04 393.025 mo
227.04 387.025 li
221.04 387.025 mo
227.04 393.025 li
@
grestore
gsave
230.378 395.805 mo
237.378 395.805 li
237.378 388.805 li
230.378 388.805 li
230.378 395.805 li
clp
230.878 395.305 mo
236.878 389.305 li
230.878 389.305 mo
236.878 395.305 li
f
1 lw
0 lc
230.878 395.305 mo
236.878 389.305 li
230.878 389.305 mo
236.878 395.305 li
@
grestore
gsave
240.216 397.522 mo
247.216 397.522 li
247.216 390.522 li
240.216 390.522 li
240.216 397.522 li
clp
240.716 397.022 mo
246.716 391.022 li
240.716 391.022 mo
246.716 397.022 li
f
1 lw
0 lc
240.716 397.022 mo
246.716 391.022 li
240.716 391.022 mo
246.716 397.022 li
@
grestore
gsave
250.055 399.434 mo
257.054 399.434 li
257.054 392.434 li
250.055 392.434 li
250.055 399.434 li
clp
250.554 398.934 mo
256.554 392.934 li
250.554 392.934 mo
256.554 398.934 li
f
1 lw
0 lc
250.554 398.934 mo
256.554 392.934 li
250.554 392.934 mo
256.554 398.934 li
@
grestore
gsave
259.892 401.903 mo
266.893 401.903 li
266.893 394.903 li
259.892 394.903 li
259.892 401.903 li
clp
260.392 401.403 mo
266.392 395.403 li
260.392 395.403 mo
266.392 401.403 li
f
1 lw
0 lc
260.392 401.403 mo
266.392 395.403 li
260.392 395.403 mo
266.392 401.403 li
@
grestore
gsave
269.73 402.497 mo
276.73 402.497 li
276.73 395.497 li
269.73 395.497 li
269.73 402.497 li
clp
270.23 401.997 mo
276.23 395.997 li
270.23 395.997 mo
276.23 401.997 li
f
1 lw
0 lc
270.23 401.997 mo
276.23 395.997 li
270.23 395.997 mo
276.23 401.997 li
@
grestore
gsave
279.568 403.649 mo
286.568 403.649 li
286.568 396.649 li
279.568 396.649 li
279.568 403.649 li
clp
280.068 403.149 mo
286.068 397.149 li
280.068 397.149 mo
286.068 403.149 li
f
1 lw
0 lc
280.068 403.149 mo
286.068 397.149 li
280.068 397.149 mo
286.068 403.149 li
@
grestore
gsave
289.406 404.952 mo
296.406 404.952 li
296.406 397.952 li
289.406 397.952 li
289.406 404.952 li
clp
289.906 404.452 mo
295.906 398.452 li
289.906 398.452 mo
295.906 404.452 li
f
1 lw
0 lc
289.906 404.452 mo
295.906 398.452 li
289.906 398.452 mo
295.906 404.452 li
@
grestore
gsave
299.244 405.11 mo
306.244 405.11 li
306.244 398.11 li
299.244 398.11 li
299.244 405.11 li
clp
299.744 404.61 mo
305.744 398.61 li
299.744 398.61 mo
305.744 404.61 li
f
1 lw
0 lc
299.744 404.61 mo
305.744 398.61 li
299.744 398.61 mo
305.744 404.61 li
@
grestore
gsave
309.083 405.928 mo
316.082 405.928 li
316.082 398.928 li
309.083 398.928 li
309.083 405.928 li
clp
309.582 405.428 mo
315.582 399.428 li
309.582 399.428 mo
315.582 405.428 li
f
1 lw
0 lc
309.582 405.428 mo
315.582 399.428 li
309.582 399.428 mo
315.582 405.428 li
@
grestore
gsave
318.921 405.973 mo
325.921 405.973 li
325.921 398.973 li
318.921 398.973 li
318.921 405.973 li
clp
319.42 405.473 mo
325.42 399.473 li
319.42 399.473 mo
325.42 405.473 li
f
1 lw
0 lc
319.42 405.473 mo
325.42 399.473 li
319.42 399.473 mo
325.42 405.473 li
@
grestore
gsave
328.758 407.166 mo
335.759 407.166 li
335.759 400.166 li
328.758 400.166 li
328.758 407.166 li
clp
329.258 406.666 mo
335.258 400.666 li
329.258 400.666 mo
335.258 406.666 li
f
1 lw
0 lc
329.258 406.666 mo
335.258 400.666 li
329.258 400.666 mo
335.258 406.666 li
@
grestore
gsave
338.596 407.33 mo
345.596 407.33 li
345.596 400.33 li
338.596 400.33 li
338.596 407.33 li
clp
339.096 406.83 mo
345.096 400.83 li
339.096 400.83 mo
345.096 406.83 li
f
1 lw
0 lc
339.096 406.83 mo
345.096 400.83 li
339.096 400.83 mo
345.096 406.83 li
@
grestore
gsave
348.434 407.743 mo
355.434 407.743 li
355.434 400.743 li
348.434 400.743 li
348.434 407.743 li
clp
348.934 407.243 mo
354.934 401.243 li
348.934 401.243 mo
354.934 407.243 li
f
1 lw
0 lc
348.934 407.243 mo
354.934 401.243 li
348.934 401.243 mo
354.934 407.243 li
@
grestore
gsave
358.272 407.869 mo
365.272 407.869 li
365.272 400.869 li
358.272 400.869 li
358.272 407.869 li
clp
358.772 407.369 mo
364.772 401.369 li
358.772 401.369 mo
364.772 407.369 li
f
1 lw
0 lc
358.772 407.369 mo
364.772 401.369 li
358.772 401.369 mo
364.772 407.369 li
@
grestore
gsave
368.111 407.463 mo
375.111 407.463 li
375.111 400.463 li
368.111 400.463 li
368.111 407.463 li
clp
368.611 406.963 mo
374.611 400.963 li
368.611 400.963 mo
374.611 406.963 li
f
1 lw
0 lc
368.611 406.963 mo
374.611 400.963 li
368.611 400.963 mo
374.611 406.963 li
@
grestore
gsave
377.949 408.088 mo
384.949 408.088 li
384.949 401.088 li
377.949 401.088 li
377.949 408.088 li
clp
378.449 407.588 mo
384.449 401.588 li
378.449 401.588 mo
384.449 407.588 li
f
1 lw
0 lc
378.449 407.588 mo
384.449 401.588 li
378.449 401.588 mo
384.449 407.588 li
@
grestore
gsave
387.787 407.903 mo
394.787 407.903 li
394.787 400.903 li
387.787 400.903 li
387.787 407.903 li
clp
388.287 407.403 mo
394.287 401.403 li
388.287 401.403 mo
394.287 407.403 li
f
1 lw
0 lc
388.287 407.403 mo
394.287 401.403 li
388.287 401.403 mo
394.287 407.403 li
@
grestore
gsave
397.624 408.612 mo
404.625 408.612 li
404.625 401.613 li
397.624 401.613 li
397.624 408.612 li
clp
398.125 408.112 mo
404.125 402.112 li
398.125 402.112 mo
404.125 408.112 li
f
1 lw
0 lc
398.125 408.112 mo
404.125 402.112 li
398.125 402.112 mo
404.125 408.112 li
@
grestore
gsave
407.462 408.739 mo
414.462 408.739 li
414.462 401.739 li
407.462 401.739 li
407.462 408.739 li
clp
407.963 408.239 mo
413.963 402.239 li
407.963 402.239 mo
413.963 408.239 li
f
1 lw
0 lc
407.963 408.239 mo
413.963 402.239 li
407.963 402.239 mo
413.963 408.239 li
@
grestore
gsave
417.301 407.679 mo
424.3 407.679 li
424.3 400.679 li
417.301 400.679 li
417.301 407.679 li
clp
417.801 407.179 mo
423.801 401.179 li
417.801 401.179 mo
423.801 407.179 li
f
1 lw
0 lc
417.801 407.179 mo
423.801 401.179 li
417.801 401.179 mo
423.801 407.179 li
@
grestore
gsave
427.139 408.951 mo
434.138 408.951 li
434.138 401.951 li
427.139 401.951 li
427.139 408.951 li
clp
427.639 408.451 mo
433.639 402.451 li
427.639 402.451 mo
433.639 408.451 li
f
1 lw
0 lc
427.639 408.451 mo
433.639 402.451 li
427.639 402.451 mo
433.639 408.451 li
@
grestore
gsave
436.977 409.444 mo
443.977 409.444 li
443.977 402.444 li
436.977 402.444 li
436.977 409.444 li
clp
437.477 408.944 mo
443.477 402.944 li
437.477 402.944 mo
443.477 408.944 li
f
1 lw
0 lc
437.477 408.944 mo
443.477 402.944 li
437.477 402.944 mo
443.477 408.944 li
@
grestore
gsave
446.815 409.862 mo
453.815 409.862 li
453.815 402.863 li
446.815 402.863 li
446.815 409.862 li
clp
447.315 409.362 mo
453.315 403.362 li
447.315 403.362 mo
453.315 409.362 li
f
1 lw
0 lc
447.315 409.362 mo
453.315 403.362 li
447.315 403.362 mo
453.315 409.362 li
@
grestore
gsave
456.653 409.975 mo
463.653 409.975 li
463.653 402.975 li
456.653 402.975 li
456.653 409.975 li
clp
457.153 409.475 mo
463.153 403.475 li
457.153 403.475 mo
463.153 409.475 li
f
1 lw
0 lc
457.153 409.475 mo
463.153 403.475 li
457.153 403.475 mo
463.153 409.475 li
@
grestore
gsave
466.491 409.968 mo
473.491 409.968 li
473.491 402.968 li
466.491 402.968 li
466.491 409.968 li
clp
466.991 409.468 mo
472.991 403.468 li
466.991 403.468 mo
472.991 409.468 li
f
1 lw
0 lc
466.991 409.468 mo
472.991 403.468 li
466.991 403.468 mo
472.991 409.468 li
@
grestore
gsave
476.329 409.378 mo
483.329 409.378 li
483.329 402.378 li
476.329 402.378 li
476.329 409.378 li
clp
476.829 408.878 mo
482.829 402.878 li
476.829 402.878 mo
482.829 408.878 li
f
1 lw
0 lc
476.829 408.878 mo
482.829 402.878 li
476.829 402.878 mo
482.829 408.878 li
@
grestore
gsave
486.167 409.381 mo
493.167 409.381 li
493.167 402.381 li
486.167 402.381 li
486.167 409.381 li
clp
486.667 408.881 mo
492.667 402.881 li
486.667 402.881 mo
492.667 408.881 li
f
1 lw
0 lc
486.667 408.881 mo
492.667 402.881 li
486.667 402.881 mo
492.667 408.881 li
@
grestore
gsave
496.005 409.67 mo
503.005 409.67 li
503.005 402.67 li
496.005 402.67 li
496.005 409.67 li
clp
496.505 409.17 mo
502.505 403.17 li
496.505 403.17 mo
502.505 409.17 li
f
1 lw
0 lc
496.505 409.17 mo
502.505 403.17 li
496.505 403.17 mo
502.505 409.17 li
@
grestore
gsave
505.843 410.576 mo
512.843 410.576 li
512.843 403.576 li
505.843 403.576 li
505.843 410.576 li
clp
506.343 410.076 mo
512.343 404.076 li
506.343 404.076 mo
512.343 410.076 li
f
1 lw
0 lc
506.343 410.076 mo
512.343 404.076 li
506.343 404.076 mo
512.343 410.076 li
@
grestore
gsave
515.681 411.641 mo
522.681 411.641 li
522.681 404.64 li
515.681 404.64 li
515.681 411.641 li
clp
516.181 411.14 mo
522.181 405.14 li
516.181 405.14 mo
522.181 411.14 li
f
1 lw
0 lc
516.181 411.14 mo
522.181 405.14 li
516.181 405.14 mo
522.181 411.14 li
@
grestore
gsave
525.519 410.913 mo
532.519 410.913 li
532.519 403.913 li
525.519 403.913 li
525.519 410.913 li
clp
526.019 410.413 mo
532.019 404.413 li
526.019 404.413 mo
532.019 410.413 li
f
1 lw
0 lc
526.019 410.413 mo
532.019 404.413 li
526.019 404.413 mo
532.019 410.413 li
@
grestore
gsave
535.357 411.143 mo
542.357 411.143 li
542.357 404.143 li
535.357 404.143 li
535.357 411.143 li
clp
535.857 410.643 mo
541.857 404.643 li
535.857 404.643 mo
541.857 410.643 li
f
1 lw
0 lc
535.857 410.643 mo
541.857 404.643 li
535.857 404.643 mo
541.857 410.643 li
@
grestore
gsave
545.195 411.079 mo
552.195 411.079 li
552.195 404.079 li
545.195 404.079 li
545.195 411.079 li
clp
545.695 410.579 mo
551.695 404.579 li
545.695 404.579 mo
551.695 410.579 li
f
1 lw
0 lc
545.695 410.579 mo
551.695 404.579 li
545.695 404.579 mo
551.695 410.579 li
@
grestore
gsave
555.033 410.701 mo
562.033 410.701 li
562.033 403.701 li
555.033 403.701 li
555.033 410.701 li
clp
555.533 410.201 mo
561.533 404.201 li
555.533 404.201 mo
561.533 410.201 li
f
1 lw
0 lc
555.533 410.201 mo
561.533 404.201 li
555.533 404.201 mo
561.533 410.201 li
@
grestore
gsave
564.871 410.649 mo
571.871 410.649 li
571.871 403.649 li
564.871 403.649 li
564.871 410.649 li
clp
565.371 410.149 mo
571.371 404.149 li
565.371 404.149 mo
571.371 410.149 li
f
1 lw
0 lc
565.371 410.149 mo
571.371 404.149 li
565.371 404.149 mo
571.371 410.149 li
@
grestore
gsave
574.709 410.81 mo
581.709 410.81 li
581.709 403.81 li
574.709 403.81 li
574.709 410.81 li
clp
575.209 410.31 mo
581.209 404.31 li
575.209 404.31 mo
581.209 410.31 li
f
1 lw
0 lc
575.209 410.31 mo
581.209 404.31 li
575.209 404.31 mo
581.209 410.31 li
@
grestore
gsave
584.547 409.638 mo
591.547 409.638 li
591.547 402.638 li
584.547 402.638 li
584.547 409.638 li
clp
585.047 409.138 mo
591.047 403.138 li
585.047 403.138 mo
591.047 409.138 li
f
1 lw
0 lc
585.047 409.138 mo
591.047 403.138 li
585.047 403.138 mo
591.047 409.138 li
@
grestore
gsave
594.385 410.7 mo
601.385 410.7 li
601.385 403.7 li
594.385 403.7 li
594.385 410.7 li
clp
594.885 410.2 mo
600.885 404.2 li
594.885 404.2 mo
600.885 410.2 li
f
1 lw
0 lc
594.885 410.2 mo
600.885 404.2 li
594.885 404.2 mo
600.885 410.2 li
@
grestore
gsave
604.223 411.583 mo
611.223 411.583 li
611.223 404.584 li
604.223 404.584 li
604.223 411.583 li
clp
604.723 411.083 mo
610.723 405.083 li
604.723 405.083 mo
610.723 411.083 li
f
1 lw
0 lc
604.723 411.083 mo
610.723 405.083 li
604.723 405.083 mo
610.723 411.083 li
@
grestore
gsave
614.061 412.069 mo
621.061 412.069 li
621.061 405.069 li
614.061 405.069 li
614.061 412.069 li
clp
614.561 411.569 mo
620.561 405.569 li
614.561 405.569 mo
620.561 411.569 li
f
1 lw
0 lc
614.561 411.569 mo
620.561 405.569 li
614.561 405.569 mo
620.561 411.569 li
@
grestore
gsave
623.899 411.331 mo
630.899 411.331 li
630.899 404.331 li
623.899 404.331 li
623.899 411.331 li
clp
624.399 410.831 mo
630.399 404.831 li
624.399 404.831 mo
630.399 410.831 li
f
1 lw
0 lc
624.399 410.831 mo
630.399 404.831 li
624.399 404.831 mo
630.399 410.831 li
@
grestore
gsave
633.737 411.266 mo
640.737 411.266 li
640.737 404.266 li
633.737 404.266 li
633.737 411.266 li
clp
634.237 410.766 mo
640.237 404.766 li
634.237 404.766 mo
640.237 410.766 li
f
1 lw
0 lc
634.237 410.766 mo
640.237 404.766 li
634.237 404.766 mo
640.237 410.766 li
@
grestore
gsave
643.575 411.493 mo
650.575 411.493 li
650.575 404.494 li
643.575 404.494 li
643.575 411.493 li
clp
644.075 410.993 mo
650.075 404.993 li
644.075 404.993 mo
650.075 410.993 li
f
1 lw
0 lc
644.075 410.993 mo
650.075 404.993 li
644.075 404.993 mo
650.075 410.993 li
@
grestore
gsave
653.413 412.538 mo
660.413 412.538 li
660.413 405.538 li
653.413 405.538 li
653.413 412.538 li
clp
653.913 412.038 mo
659.913 406.038 li
653.913 406.038 mo
659.913 412.038 li
f
1 lw
0 lc
653.913 412.038 mo
659.913 406.038 li
653.913 406.038 mo
659.913 412.038 li
@
grestore
gsave
663.251 412.108 mo
670.251 412.108 li
670.251 405.108 li
663.251 405.108 li
663.251 412.108 li
clp
663.751 411.608 mo
669.751 405.608 li
663.751 405.608 mo
669.751 411.608 li
f
1 lw
0 lc
663.751 411.608 mo
669.751 405.608 li
663.751 405.608 mo
669.751 411.608 li
@
grestore
gsave
673.089 412.81 mo
680.089 412.81 li
680.089 405.81 li
673.089 405.81 li
673.089 412.81 li
clp
673.589 412.31 mo
679.589 406.31 li
673.589 406.31 mo
679.589 412.31 li
f
1 lw
0 lc
673.589 412.31 mo
679.589 406.31 li
673.589 406.31 mo
679.589 412.31 li
@
grestore
gsave
682.927 412.507 mo
689.927 412.507 li
689.927 405.507 li
682.927 405.507 li
682.927 412.507 li
clp
683.427 412.007 mo
689.427 406.007 li
683.427 406.007 mo
689.427 412.007 li
f
1 lw
0 lc
683.427 412.007 mo
689.427 406.007 li
683.427 406.007 mo
689.427 412.007 li
@
grestore
gsave
692.765 411.977 mo
699.765 411.977 li
699.765 404.977 li
692.765 404.977 li
692.765 411.977 li
clp
693.265 411.477 mo
699.265 405.477 li
693.265 405.477 mo
699.265 411.477 li
f
1 lw
0 lc
693.265 411.477 mo
699.265 405.477 li
693.265 405.477 mo
699.265 411.477 li
@
grestore
gsave
702.603 412.33 mo
709.603 412.33 li
709.603 405.33 li
702.603 405.33 li
702.603 412.33 li
clp
703.103 411.83 mo
709.103 405.83 li
703.103 405.83 mo
709.103 411.83 li
f
1 lw
0 lc
703.103 411.83 mo
709.103 405.83 li
703.103 405.83 mo
709.103 411.83 li
@
grestore
gsave
712.441 411.8 mo
719.441 411.8 li
719.441 404.8 li
712.441 404.8 li
712.441 411.8 li
clp
712.941 411.3 mo
718.941 405.3 li
712.941 405.3 mo
718.941 411.3 li
f
1 lw
0 lc
712.941 411.3 mo
718.941 405.3 li
712.941 405.3 mo
718.941 411.3 li
@
grestore
gsave
722.279 412.15 mo
729.279 412.15 li
729.279 405.15 li
722.279 405.15 li
722.279 412.15 li
clp
722.779 411.65 mo
728.779 405.65 li
722.779 405.65 mo
728.779 411.65 li
f
1 lw
0 lc
722.779 411.65 mo
728.779 405.65 li
722.779 405.65 mo
728.779 411.65 li
@
grestore
gsave
732.117 412.525 mo
739.117 412.525 li
739.117 405.526 li
732.117 405.526 li
732.117 412.525 li
clp
732.617 412.026 mo
738.617 406.026 li
732.617 406.026 mo
738.617 412.026 li
f
1 lw
0 lc
732.617 412.026 mo
738.617 406.026 li
732.617 406.026 mo
738.617 412.026 li
@
grestore
gsave
741.955 413.14 mo
748.955 413.14 li
748.955 406.14 li
741.955 406.14 li
741.955 413.14 li
clp
742.455 412.641 mo
748.455 406.641 li
742.455 406.641 mo
748.455 412.641 li
f
1 lw
0 lc
742.455 412.641 mo
748.455 406.641 li
742.455 406.641 mo
748.455 412.641 li
@
grestore
gsave
751.793 412.455 mo
758.793 412.455 li
758.793 405.455 li
751.793 405.455 li
751.793 412.455 li
clp
752.293 411.955 mo
758.293 405.955 li
752.293 405.955 mo
758.293 411.955 li
f
1 lw
0 lc
752.293 411.955 mo
758.293 405.955 li
752.293 405.955 mo
758.293 411.955 li
@
grestore
gsave
761.631 412.571 mo
768.631 412.571 li
768.631 405.571 li
761.631 405.571 li
761.631 412.571 li
clp
762.131 412.071 mo
768.131 406.071 li
762.131 406.071 mo
768.131 412.071 li
f
1 lw
0 lc
762.131 412.071 mo
768.131 406.071 li
762.131 406.071 mo
768.131 412.071 li
@
grestore
gsave
771.469 413.347 mo
778.469 413.347 li
778.469 406.347 li
771.469 406.347 li
771.469 413.347 li
clp
771.969 412.848 mo
777.969 406.848 li
771.969 406.848 mo
777.969 412.848 li
f
1 lw
0 lc
771.969 412.848 mo
777.969 406.848 li
771.969 406.848 mo
777.969 412.848 li
@
grestore
gsave
781.307 412.26 mo
788.307 412.26 li
788.307 405.26 li
781.307 405.26 li
781.307 412.26 li
clp
781.807 411.76 mo
787.807 405.76 li
781.807 405.76 mo
787.807 411.76 li
f
1 lw
0 lc
781.807 411.76 mo
787.807 405.76 li
781.807 405.76 mo
787.807 411.76 li
@
grestore
gsave
791.145 412.956 mo
798.145 412.956 li
798.145 405.956 li
791.145 405.956 li
791.145 412.956 li
clp
791.645 412.456 mo
797.645 406.456 li
791.645 406.456 mo
797.645 412.456 li
f
1 lw
0 lc
791.645 412.456 mo
797.645 406.456 li
791.645 406.456 mo
797.645 412.456 li
@
grestore
gsave
800.983 412.641 mo
807.983 412.641 li
807.983 405.641 li
800.983 405.641 li
800.983 412.641 li
clp
801.483 412.141 mo
807.483 406.141 li
801.483 406.141 mo
807.483 412.141 li
f
1 lw
0 lc
801.483 412.141 mo
807.483 406.141 li
801.483 406.141 mo
807.483 412.141 li
@
grestore
gsave
810.821 412.73 mo
817.821 412.73 li
817.821 405.73 li
810.821 405.73 li
810.821 412.73 li
clp
811.321 412.23 mo
817.321 406.23 li
811.321 406.23 mo
817.321 412.23 li
f
1 lw
0 lc
811.321 412.23 mo
817.321 406.23 li
811.321 406.23 mo
817.321 412.23 li
@
grestore
gsave
820.659 412.423 mo
827.659 412.423 li
827.659 405.422 li
820.659 405.422 li
820.659 412.423 li
clp
821.159 411.923 mo
827.159 405.923 li
821.159 405.923 mo
827.159 411.923 li
f
1 lw
0 lc
821.159 411.923 mo
827.159 405.923 li
821.159 405.923 mo
827.159 411.923 li
@
grestore
gsave
830.497 412.196 mo
837.497 412.196 li
837.497 405.196 li
830.497 405.196 li
830.497 412.196 li
clp
830.997 411.696 mo
836.997 405.696 li
830.997 405.696 mo
836.997 411.696 li
f
1 lw
0 lc
830.997 411.696 mo
836.997 405.696 li
830.997 405.696 mo
836.997 411.696 li
@
grestore
gsave
840.335 413.714 mo
847.335 413.714 li
847.335 406.714 li
840.335 406.714 li
840.335 413.714 li
clp
840.835 413.214 mo
846.835 407.214 li
840.835 407.214 mo
846.835 413.214 li
f
1 lw
0 lc
840.835 413.214 mo
846.835 407.214 li
840.835 407.214 mo
846.835 413.214 li
@
grestore
gsave
850.173 412.331 mo
857.173 412.331 li
857.173 405.331 li
850.173 405.331 li
850.173 412.331 li
clp
850.673 411.831 mo
856.673 405.831 li
850.673 405.831 mo
856.673 411.831 li
f
1 lw
0 lc
850.673 411.831 mo
856.673 405.831 li
850.673 405.831 mo
856.673 411.831 li
@
grestore
gsave
860.011 413.893 mo
867.011 413.893 li
867.011 406.894 li
860.011 406.894 li
860.011 413.893 li
clp
860.511 413.393 mo
866.511 407.393 li
860.511 407.393 mo
866.511 413.393 li
f
1 lw
0 lc
860.511 413.393 mo
866.511 407.393 li
860.511 407.393 mo
866.511 413.393 li
@
grestore
gsave
869.849 412.788 mo
876.849 412.788 li
876.849 405.788 li
869.849 405.788 li
869.849 412.788 li
clp
870.349 412.288 mo
876.349 406.288 li
870.349 406.288 mo
876.349 412.288 li
f
1 lw
0 lc
870.349 412.288 mo
876.349 406.288 li
870.349 406.288 mo
876.349 412.288 li
@
grestore
gsave
879.687 413.679 mo
886.687 413.679 li
886.687 406.679 li
879.687 406.679 li
879.687 413.679 li
clp
880.187 413.179 mo
886.187 407.179 li
880.187 407.179 mo
886.187 413.179 li
f
1 lw
0 lc
880.187 413.179 mo
886.187 407.179 li
880.187 407.179 mo
886.187 413.179 li
@
grestore
gsave
889.525 413.424 mo
896.525 413.424 li
896.525 406.424 li
889.525 406.424 li
889.525 413.424 li
clp
890.025 412.924 mo
896.025 406.924 li
890.025 406.924 mo
896.025 412.924 li
f
1 lw
0 lc
890.025 412.924 mo
896.025 406.924 li
890.025 406.924 mo
896.025 412.924 li
@
grestore
gsave
899.363 413.284 mo
906.363 413.284 li
906.363 406.284 li
899.363 406.284 li
899.363 413.284 li
clp
899.863 412.784 mo
905.863 406.784 li
899.863 406.784 mo
905.863 412.784 li
f
1 lw
0 lc
899.863 412.784 mo
905.863 406.784 li
899.863 406.784 mo
905.863 412.784 li
@
grestore
gsave
909.201 413.531 mo
916.201 413.531 li
916.201 406.531 li
909.201 406.531 li
909.201 413.531 li
clp
909.701 413.031 mo
915.701 407.031 li
909.701 407.031 mo
915.701 413.031 li
f
1 lw
0 lc
909.701 413.031 mo
915.701 407.031 li
909.701 407.031 mo
915.701 413.031 li
@
grestore
gsave
919.039 414.262 mo
926.039 414.262 li
926.039 407.262 li
919.039 407.262 li
919.039 414.262 li
clp
919.539 413.762 mo
925.539 407.762 li
919.539 407.762 mo
925.539 413.762 li
f
1 lw
0 lc
919.539 413.762 mo
925.539 407.762 li
919.539 407.762 mo
925.539 413.762 li
@
grestore
gsave
928.877 413.793 mo
935.877 413.793 li
935.877 406.793 li
928.877 406.793 li
928.877 413.793 li
clp
929.377 413.293 mo
935.377 407.293 li
929.377 407.293 mo
935.377 413.293 li
f
1 lw
0 lc
929.377 413.293 mo
935.377 407.293 li
929.377 407.293 mo
935.377 413.293 li
@
grestore
gsave
938.715 413.437 mo
945.715 413.437 li
945.715 406.437 li
938.715 406.437 li
938.715 413.437 li
clp
939.215 412.937 mo
945.215 406.937 li
939.215 406.937 mo
945.215 412.937 li
f
1 lw
0 lc
939.215 412.937 mo
945.215 406.937 li
939.215 406.937 mo
945.215 412.937 li
@
grestore
gsave
948.553 414.127 mo
955.553 414.127 li
955.553 407.127 li
948.553 407.127 li
948.553 414.127 li
clp
949.053 413.628 mo
955.053 407.628 li
949.053 407.628 mo
955.053 413.628 li
f
1 lw
0 lc
949.053 413.628 mo
955.053 407.628 li
949.053 407.628 mo
955.053 413.628 li
@
grestore
gsave
958.391 413.095 mo
965.391 413.095 li
965.391 406.095 li
958.391 406.095 li
958.391 413.095 li
clp
958.891 412.595 mo
964.891 406.595 li
958.891 406.595 mo
964.891 412.595 li
f
1 lw
0 lc
958.891 412.595 mo
964.891 406.595 li
958.891 406.595 mo
964.891 412.595 li
@
grestore
gsave
968.229 413.213 mo
975.229 413.213 li
975.229 406.213 li
968.229 406.213 li
968.229 413.213 li
clp
968.729 412.713 mo
974.729 406.713 li
968.729 406.713 mo
974.729 412.713 li
f
1 lw
0 lc
968.729 412.713 mo
974.729 406.713 li
968.729 406.713 mo
974.729 412.713 li
@
grestore
gsave
978.067 413.85 mo
985.068 413.85 li
985.068 406.85 li
978.067 406.85 li
978.067 413.85 li
clp
978.567 413.349 mo
984.567 407.349 li
978.567 407.349 mo
984.567 413.349 li
f
1 lw
0 lc
978.567 413.349 mo
984.567 407.349 li
978.567 407.349 mo
984.567 413.349 li
@
grestore
gsave
987.905 413.857 mo
994.905 413.857 li
994.905 406.857 li
987.905 406.857 li
987.905 413.857 li
clp
988.405 413.357 mo
994.405 407.357 li
988.405 407.357 mo
994.405 413.357 li
f
1 lw
0 lc
988.405 413.357 mo
994.405 407.357 li
988.405 407.357 mo
994.405 413.357 li
@
grestore
gsave
997.743 414.812 mo
1004.74 414.812 li
1004.74 407.812 li
997.743 407.812 li
997.743 414.812 li
clp
998.243 414.312 mo
1004.24 408.312 li
998.243 408.312 mo
1004.24 414.312 li
f
1 lw
0 lc
998.243 414.312 mo
1004.24 408.312 li
998.243 408.312 mo
1004.24 414.312 li
@
grestore
gsave
1007.58 413.379 mo
1014.58 413.379 li
1014.58 406.379 li
1007.58 406.379 li
1007.58 413.379 li
clp
1008.08 412.879 mo
1014.08 406.879 li
1008.08 406.879 mo
1014.08 412.879 li
f
1 lw
0 lc
1008.08 412.879 mo
1014.08 406.879 li
1008.08 406.879 mo
1014.08 412.879 li
@
grestore
gsave
1017.42 414.63 mo
1024.42 414.63 li
1024.42 407.63 li
1017.42 407.63 li
1017.42 414.63 li
clp
1017.92 414.13 mo
1023.92 408.13 li
1017.92 408.13 mo
1023.92 414.13 li
f
1 lw
0 lc
1017.92 414.13 mo
1023.92 408.13 li
1017.92 408.13 mo
1023.92 414.13 li
@
grestore
gsave
1027.26 414.557 mo
1034.26 414.557 li
1034.26 407.557 li
1027.26 407.557 li
1027.26 414.557 li
clp
1027.76 414.057 mo
1033.76 408.057 li
1027.76 408.057 mo
1033.76 414.057 li
f
1 lw
0 lc
1027.76 414.057 mo
1033.76 408.057 li
1027.76 408.057 mo
1033.76 414.057 li
@
grestore
gsave
1037.1 413.46 mo
1044.1 413.46 li
1044.1 406.46 li
1037.1 406.46 li
1037.1 413.46 li
clp
1037.6 412.959 mo
1043.6 406.959 li
1037.6 406.959 mo
1043.6 412.959 li
f
1 lw
0 lc
1037.6 412.959 mo
1043.6 406.959 li
1037.6 406.959 mo
1043.6 412.959 li
@
grestore
gsave
1046.93 413.677 mo
1053.93 413.677 li
1053.93 406.677 li
1046.93 406.677 li
1046.93 413.677 li
clp
1047.43 413.177 mo
1053.43 407.177 li
1047.43 407.177 mo
1053.43 413.177 li
f
1 lw
0 lc
1047.43 413.177 mo
1053.43 407.177 li
1047.43 407.177 mo
1053.43 413.177 li
@
grestore
gsave
1056.77 414.541 mo
1063.77 414.541 li
1063.77 407.541 li
1056.77 407.541 li
1056.77 414.541 li
clp
1057.27 414.041 mo
1063.27 408.041 li
1057.27 408.041 mo
1063.27 414.041 li
f
1 lw
0 lc
1057.27 414.041 mo
1063.27 408.041 li
1057.27 408.041 mo
1063.27 414.041 li
@
grestore
gsave
1066.61 414.244 mo
1073.61 414.244 li
1073.61 407.244 li
1066.61 407.244 li
1066.61 414.244 li
clp
1067.11 413.744 mo
1073.11 407.744 li
1067.11 407.744 mo
1073.11 413.744 li
f
1 lw
0 lc
1067.11 413.744 mo
1073.11 407.744 li
1067.11 407.744 mo
1073.11 413.744 li
@
grestore
gsave
1076.45 414.366 mo
1083.45 414.366 li
1083.45 407.366 li
1076.45 407.366 li
1076.45 414.366 li
clp
1076.95 413.866 mo
1082.95 407.866 li
1076.95 407.866 mo
1082.95 413.866 li
f
1 lw
0 lc
1076.95 413.866 mo
1082.95 407.866 li
1076.95 407.866 mo
1082.95 413.866 li
@
grestore
gsave
1086.29 414.327 mo
1093.29 414.327 li
1093.29 407.327 li
1086.29 407.327 li
1086.29 414.327 li
clp
1086.79 413.827 mo
1092.79 407.827 li
1086.79 407.827 mo
1092.79 413.827 li
f
1 lw
0 lc
1086.79 413.827 mo
1092.79 407.827 li
1086.79 407.827 mo
1092.79 413.827 li
@
grestore
gsave
1096.12 414.39 mo
1103.12 414.39 li
1103.12 407.39 li
1096.12 407.39 li
1096.12 414.39 li
clp
1096.62 413.89 mo
1102.62 407.89 li
1096.62 407.89 mo
1102.62 413.89 li
f
1 lw
0 lc
1096.62 413.89 mo
1102.62 407.89 li
1096.62 407.89 mo
1102.62 413.89 li
@
grestore
gsave
1105.96 413.814 mo
1112.96 413.814 li
1112.96 406.814 li
1105.96 406.814 li
1105.96 413.814 li
clp
1106.46 413.314 mo
1112.46 407.314 li
1106.46 407.314 mo
1112.46 413.314 li
f
1 lw
0 lc
1106.46 413.314 mo
1112.46 407.314 li
1106.46 407.314 mo
1112.46 413.314 li
@
grestore
135.498 434.514 mo
145.336 460.038 li
155.174 485.912 li
165.012 499.745 li
174.85 506.288 li
184.688 509.408 li
194.526 511.106 li
204.364 512.49 li
214.202 513.314 li
224.04 514.183 li
233.878 513.934 li
243.716 514.001 li
253.554 513.484 li
263.392 514.514 li
273.23 514.57 li
283.068 514.75 li
292.906 514.945 li
302.744 514.884 li
312.582 515.55 li
322.421 514.546 li
332.259 514.617 li
342.097 514.733 li
351.935 514.903 li
361.773 515.134 li
371.611 514.942 li
381.449 514.578 li
391.287 515.291 li
401.125 514.521 li
410.963 515.175 li
420.801 515.05 li
430.639 515.028 li
440.477 515.504 li
450.315 514.58 li
460.153 515.943 li
469.991 515.498 li
479.829 516.154 li
489.667 515.968 li
499.505 515.402 li
509.343 516.034 li
519.181 515.768 li
529.019 516.105 li
538.857 515.442 li
548.695 515.494 li
558.533 515.76 li
568.371 515.484 li
578.209 516.205 li
588.047 515.178 li
597.885 516.264 li
607.723 515.725 li
617.561 515.578 li
627.399 516.094 li
637.237 515.429 li
647.075 515.985 li
656.913 516.372 li
666.751 516.161 li
676.589 515.872 li
686.427 515.72 li
696.265 516.391 li
706.103 516.215 li
715.941 516.247 li
725.779 516.427 li
735.617 516.134 li
745.455 516.373 li
755.293 516.405 li
765.131 516.865 li
774.969 517.357 li
784.807 516.162 li
794.645 516.509 li
804.483 515.729 li
814.321 516.085 li
824.159 515.46 li
833.997 516.602 li
843.835 516.767 li
853.673 516.456 li
863.511 516.314 li
873.349 516.246 li
883.187 516.078 li
893.025 516.478 li
902.863 516.379 li
912.701 516.711 li
922.539 516.412 li
932.378 516.708 li
942.216 516.285 li
952.054 516.442 li
961.892 516.579 li
971.73 516.746 li
981.568 517.024 li
991.406 517.317 li
1001.24 516.737 li
1011.08 517.482 li
1020.92 516.765 li
1030.76 516.972 li
1040.6 517.516 li
1050.43 516.698 li
1060.27 516.691 li
1070.11 515.937 li
1079.95 516.507 li
1089.79 516.63 li
1099.62 515.92 li
1109.46 516.28 li
@
gsave
134.998 438.014 mo
135.998 438.014 li
135.998 431.014 li
134.998 431.014 li
134.998 438.014 li
clp
135.498 437.514 mo
135.498 431.514 li
f
1 lw
0 lc
135.498 437.514 mo
135.498 431.514 li
@
grestore
gsave
144.836 463.538 mo
145.836 463.538 li
145.836 456.538 li
144.836 456.538 li
144.836 463.538 li
clp
145.336 463.038 mo
145.336 457.038 li
f
1 lw
0 lc
145.336 463.038 mo
145.336 457.038 li
@
grestore
gsave
154.674 489.412 mo
155.674 489.412 li
155.674 482.412 li
154.674 482.412 li
154.674 489.412 li
clp
155.174 488.912 mo
155.174 482.912 li
f
1 lw
0 lc
155.174 488.912 mo
155.174 482.912 li
@
grestore
gsave
164.512 503.245 mo
165.512 503.245 li
165.512 496.245 li
164.512 496.245 li
164.512 503.245 li
clp
165.012 502.745 mo
165.012 496.745 li
f
1 lw
0 lc
165.012 502.745 mo
165.012 496.745 li
@
grestore
gsave
174.35 509.788 mo
175.35 509.788 li
175.35 502.788 li
174.35 502.788 li
174.35 509.788 li
clp
174.85 509.288 mo
174.85 503.288 li
f
1 lw
0 lc
174.85 509.288 mo
174.85 503.288 li
@
grestore
gsave
184.188 512.908 mo
185.188 512.908 li
185.188 505.908 li
184.188 505.908 li
184.188 512.908 li
clp
184.688 512.408 mo
184.688 506.408 li
f
1 lw
0 lc
184.688 512.408 mo
184.688 506.408 li
@
grestore
gsave
194.026 514.606 mo
195.026 514.606 li
195.026 507.606 li
194.026 507.606 li
194.026 514.606 li
clp
194.526 514.106 mo
194.526 508.106 li
f
1 lw
0 lc
194.526 514.106 mo
194.526 508.106 li
@
grestore
gsave
203.864 515.991 mo
204.864 515.991 li
204.864 508.99 li
203.864 508.99 li
203.864 515.991 li
clp
204.364 515.49 mo
204.364 509.49 li
f
1 lw
0 lc
204.364 515.49 mo
204.364 509.49 li
@
grestore
gsave
213.702 516.814 mo
214.702 516.814 li
214.702 509.814 li
213.702 509.814 li
213.702 516.814 li
clp
214.202 516.314 mo
214.202 510.314 li
f
1 lw
0 lc
214.202 516.314 mo
214.202 510.314 li
@
grestore
gsave
223.54 517.683 mo
224.54 517.683 li
224.54 510.683 li
223.54 510.683 li
223.54 517.683 li
clp
224.04 517.183 mo
224.04 511.183 li
f
1 lw
0 lc
224.04 517.183 mo
224.04 511.183 li
@
grestore
gsave
233.378 517.434 mo
234.378 517.434 li
234.378 510.434 li
233.378 510.434 li
233.378 517.434 li
clp
233.878 516.934 mo
233.878 510.934 li
f
1 lw
0 lc
233.878 516.934 mo
233.878 510.934 li
@
grestore
gsave
243.216 517.501 mo
244.216 517.501 li
244.216 510.502 li
243.216 510.502 li
243.216 517.501 li
clp
243.716 517.002 mo
243.716 511.002 li
f
1 lw
0 lc
243.716 517.002 mo
243.716 511.002 li
@
grestore
gsave
253.054 516.984 mo
254.054 516.984 li
254.054 509.984 li
253.054 509.984 li
253.054 516.984 li
clp
253.554 516.484 mo
253.554 510.484 li
f
1 lw
0 lc
253.554 516.484 mo
253.554 510.484 li
@
grestore
gsave
262.892 518.014 mo
263.892 518.014 li
263.892 511.014 li
262.892 511.014 li
262.892 518.014 li
clp
263.392 517.514 mo
263.392 511.514 li
f
1 lw
0 lc
263.392 517.514 mo
263.392 511.514 li
@
grestore
gsave
272.73 518.07 mo
273.73 518.07 li
273.73 511.07 li
272.73 511.07 li
272.73 518.07 li
clp
273.23 517.57 mo
273.23 511.57 li
f
1 lw
0 lc
273.23 517.57 mo
273.23 511.57 li
@
grestore
gsave
282.568 518.25 mo
283.569 518.25 li
283.569 511.25 li
282.568 511.25 li
282.568 518.25 li
clp
283.068 517.75 mo
283.068 511.75 li
f
1 lw
0 lc
283.068 517.75 mo
283.068 511.75 li
@
grestore
gsave
292.406 518.445 mo
293.406 518.445 li
293.406 511.445 li
292.406 511.445 li
292.406 518.445 li
clp
292.906 517.945 mo
292.906 511.945 li
f
1 lw
0 lc
292.906 517.945 mo
292.906 511.945 li
@
grestore
gsave
302.245 518.384 mo
303.244 518.384 li
303.244 511.384 li
302.245 511.384 li
302.245 518.384 li
clp
302.744 517.884 mo
302.744 511.884 li
f
1 lw
0 lc
302.744 517.884 mo
302.744 511.884 li
@
grestore
gsave
312.082 519.05 mo
313.082 519.05 li
313.082 512.049 li
312.082 512.049 li
312.082 519.05 li
clp
312.582 518.55 mo
312.582 512.55 li
f
1 lw
0 lc
312.582 518.55 mo
312.582 512.55 li
@
grestore
gsave
321.92 518.046 mo
322.92 518.046 li
322.92 511.046 li
321.92 511.046 li
321.92 518.046 li
clp
322.42 517.546 mo
322.42 511.546 li
f
1 lw
0 lc
322.42 517.546 mo
322.42 511.546 li
@
grestore
gsave
331.758 518.117 mo
332.759 518.117 li
332.759 511.117 li
331.758 511.117 li
331.758 518.117 li
clp
332.258 517.617 mo
332.258 511.617 li
f
1 lw
0 lc
332.258 517.617 mo
332.258 511.617 li
@
grestore
gsave
341.596 518.233 mo
342.597 518.233 li
342.597 511.233 li
341.596 511.233 li
341.596 518.233 li
clp
342.096 517.733 mo
342.096 511.733 li
f
1 lw
0 lc
342.096 517.733 mo
342.096 511.733 li
@
grestore
gsave
351.435 518.403 mo
352.435 518.403 li
352.435 511.403 li
351.435 511.403 li
351.435 518.403 li
clp
351.934 517.903 mo
351.934 511.903 li
f
1 lw
0 lc
351.934 517.903 mo
351.934 511.903 li
@
grestore
gsave
361.273 518.634 mo
362.272 518.634 li
362.272 511.634 li
361.273 511.634 li
361.273 518.634 li
clp
361.772 518.134 mo
361.772 512.134 li
f
1 lw
0 lc
361.772 518.134 mo
361.772 512.134 li
@
grestore
gsave
371.111 518.442 mo
372.11 518.442 li
372.11 511.442 li
371.111 511.442 li
371.111 518.442 li
clp
371.611 517.942 mo
371.611 511.942 li
f
1 lw
0 lc
371.611 517.942 mo
371.611 511.942 li
@
grestore
gsave
380.949 518.078 mo
381.948 518.078 li
381.948 511.078 li
380.949 511.078 li
380.949 518.078 li
clp
381.449 517.578 mo
381.449 511.578 li
f
1 lw
0 lc
381.449 517.578 mo
381.449 511.578 li
@
grestore
gsave
390.786 518.791 mo
391.787 518.791 li
391.787 511.791 li
390.786 511.791 li
390.786 518.791 li
clp
391.287 518.291 mo
391.287 512.291 li
f
1 lw
0 lc
391.287 518.291 mo
391.287 512.291 li
@
grestore
gsave
400.624 518.021 mo
401.625 518.021 li
401.625 511.021 li
400.624 511.021 li
400.624 518.021 li
clp
401.125 517.521 mo
401.125 511.521 li
f
1 lw
0 lc
401.125 517.521 mo
401.125 511.521 li
@
grestore
gsave
410.463 518.675 mo
411.463 518.675 li
411.463 511.675 li
410.463 511.675 li
410.463 518.675 li
clp
410.963 518.175 mo
410.963 512.175 li
f
1 lw
0 lc
410.963 518.175 mo
410.963 512.175 li
@
grestore
gsave
420.301 518.55 mo
421.301 518.55 li
421.301 511.55 li
420.301 511.55 li
420.301 518.55 li
clp
420.801 518.05 mo
420.801 512.05 li
f
1 lw
0 lc
420.801 518.05 mo
420.801 512.05 li
@
grestore
gsave
430.139 518.528 mo
431.138 518.528 li
431.138 511.528 li
430.139 511.528 li
430.139 518.528 li
clp
430.639 518.028 mo
430.639 512.028 li
f
1 lw
0 lc
430.639 518.028 mo
430.639 512.028 li
@
grestore
gsave
439.977 519.004 mo
440.977 519.004 li
440.977 512.004 li
439.977 512.004 li
439.977 519.004 li
clp
440.477 518.504 mo
440.477 512.504 li
f
1 lw
0 lc
440.477 518.504 mo
440.477 512.504 li
@
grestore
gsave
449.815 518.08 mo
450.815 518.08 li
450.815 511.08 li
449.815 511.08 li
449.815 518.08 li
clp
450.315 517.58 mo
450.315 511.58 li
f
1 lw
0 lc
450.315 517.58 mo
450.315 511.58 li
@
grestore
gsave
459.652 519.443 mo
460.653 519.443 li
460.653 512.443 li
459.652 512.443 li
459.652 519.443 li
clp
460.153 518.943 mo
460.153 512.943 li
f
1 lw
0 lc
460.153 518.943 mo
460.153 512.943 li
@
grestore
gsave
469.491 518.998 mo
470.491 518.998 li
470.491 511.998 li
469.491 511.998 li
469.491 518.998 li
clp
469.991 518.498 mo
469.991 512.498 li
f
1 lw
0 lc
469.991 518.498 mo
469.991 512.498 li
@
grestore
gsave
479.329 519.654 mo
480.329 519.654 li
480.329 512.654 li
479.329 512.654 li
479.329 519.654 li
clp
479.829 519.154 mo
479.829 513.154 li
f
1 lw
0 lc
479.829 519.154 mo
479.829 513.154 li
@
grestore
gsave
489.167 519.467 mo
490.167 519.467 li
490.167 512.468 li
489.167 512.468 li
489.167 519.467 li
clp
489.667 518.968 mo
489.667 512.968 li
f
1 lw
0 lc
489.667 518.968 mo
489.667 512.968 li
@
grestore
gsave
499.005 518.902 mo
500.005 518.902 li
500.005 511.902 li
499.005 511.902 li
499.005 518.902 li
clp
499.505 518.402 mo
499.505 512.402 li
f
1 lw
0 lc
499.505 518.402 mo
499.505 512.402 li
@
grestore
gsave
508.843 519.534 mo
509.843 519.534 li
509.843 512.534 li
508.843 512.534 li
508.843 519.534 li
clp
509.343 519.034 mo
509.343 513.034 li
f
1 lw
0 lc
509.343 519.034 mo
509.343 513.034 li
@
grestore
gsave
518.681 519.268 mo
519.681 519.268 li
519.681 512.268 li
518.681 512.268 li
518.681 519.268 li
clp
519.181 518.768 mo
519.181 512.768 li
f
1 lw
0 lc
519.181 518.768 mo
519.181 512.768 li
@
grestore
gsave
528.519 519.605 mo
529.519 519.605 li
529.519 512.605 li
528.519 512.605 li
528.519 519.605 li
clp
529.019 519.105 mo
529.019 513.105 li
f
1 lw
0 lc
529.019 519.105 mo
529.019 513.105 li
@
grestore
gsave
538.357 518.942 mo
539.357 518.942 li
539.357 511.942 li
538.357 511.942 li
538.357 518.942 li
clp
538.857 518.442 mo
538.857 512.442 li
f
1 lw
0 lc
538.857 518.442 mo
538.857 512.442 li
@
grestore
gsave
548.195 518.994 mo
549.195 518.994 li
549.195 511.994 li
548.195 511.994 li
548.195 518.994 li
clp
548.695 518.494 mo
548.695 512.494 li
f
1 lw
0 lc
548.695 518.494 mo
548.695 512.494 li
@
grestore
gsave
558.033 519.26 mo
559.033 519.26 li
559.033 512.26 li
558.033 512.26 li
558.033 519.26 li
clp
558.533 518.76 mo
558.533 512.76 li
f
1 lw
0 lc
558.533 518.76 mo
558.533 512.76 li
@
grestore
gsave
567.871 518.984 mo
568.871 518.984 li
568.871 511.983 li
567.871 511.983 li
567.871 518.984 li
clp
568.371 518.484 mo
568.371 512.484 li
f
1 lw
0 lc
568.371 518.484 mo
568.371 512.484 li
@
grestore
gsave
577.709 519.705 mo
578.709 519.705 li
578.709 512.705 li
577.709 512.705 li
577.709 519.705 li
clp
578.209 519.205 mo
578.209 513.205 li
f
1 lw
0 lc
578.209 519.205 mo
578.209 513.205 li
@
grestore
gsave
587.547 518.678 mo
588.547 518.678 li
588.547 511.678 li
587.547 511.678 li
587.547 518.678 li
clp
588.047 518.178 mo
588.047 512.178 li
f
1 lw
0 lc
588.047 518.178 mo
588.047 512.178 li
@
grestore
gsave
597.385 519.764 mo
598.385 519.764 li
598.385 512.764 li
597.385 512.764 li
597.385 519.764 li
clp
597.885 519.264 mo
597.885 513.264 li
f
1 lw
0 lc
597.885 519.264 mo
597.885 513.264 li
@
grestore
gsave
607.223 519.225 mo
608.223 519.225 li
608.223 512.225 li
607.223 512.225 li
607.223 519.225 li
clp
607.723 518.725 mo
607.723 512.725 li
f
1 lw
0 lc
607.723 518.725 mo
607.723 512.725 li
@
grestore
gsave
617.061 519.078 mo
618.061 519.078 li
618.061 512.078 li
617.061 512.078 li
617.061 519.078 li
clp
617.561 518.578 mo
617.561 512.578 li
f
1 lw
0 lc
617.561 518.578 mo
617.561 512.578 li
@
grestore
gsave
626.899 519.594 mo
627.899 519.594 li
627.899 512.594 li
626.899 512.594 li
626.899 519.594 li
clp
627.399 519.094 mo
627.399 513.094 li
f
1 lw
0 lc
627.399 519.094 mo
627.399 513.094 li
@
grestore
gsave
636.737 518.929 mo
637.737 518.929 li
637.737 511.929 li
636.737 511.929 li
636.737 518.929 li
clp
637.237 518.429 mo
637.237 512.429 li
f
1 lw
0 lc
637.237 518.429 mo
637.237 512.429 li
@
grestore
gsave
646.575 519.485 mo
647.575 519.485 li
647.575 512.485 li
646.575 512.485 li
646.575 519.485 li
clp
647.075 518.985 mo
647.075 512.985 li
f
1 lw
0 lc
647.075 518.985 mo
647.075 512.985 li
@
grestore
gsave
656.413 519.872 mo
657.413 519.872 li
657.413 512.872 li
656.413 512.872 li
656.413 519.872 li
clp
656.913 519.372 mo
656.913 513.372 li
f
1 lw
0 lc
656.913 519.372 mo
656.913 513.372 li
@
grestore
gsave
666.251 519.661 mo
667.251 519.661 li
667.251 512.661 li
666.251 512.661 li
666.251 519.661 li
clp
666.751 519.161 mo
666.751 513.161 li
f
1 lw
0 lc
666.751 519.161 mo
666.751 513.161 li
@
grestore
gsave
676.089 519.372 mo
677.089 519.372 li
677.089 512.372 li
676.089 512.372 li
676.089 519.372 li
clp
676.589 518.872 mo
676.589 512.872 li
f
1 lw
0 lc
676.589 518.872 mo
676.589 512.872 li
@
grestore
gsave
685.927 519.22 mo
686.927 519.22 li
686.927 512.22 li
685.927 512.22 li
685.927 519.22 li
clp
686.427 518.72 mo
686.427 512.72 li
f
1 lw
0 lc
686.427 518.72 mo
686.427 512.72 li
@
grestore
gsave
695.765 519.891 mo
696.765 519.891 li
696.765 512.891 li
695.765 512.891 li
695.765 519.891 li
clp
696.265 519.391 mo
696.265 513.391 li
f
1 lw
0 lc
696.265 519.391 mo
696.265 513.391 li
@
grestore
gsave
705.603 519.715 mo
706.603 519.715 li
706.603 512.715 li
705.603 512.715 li
705.603 519.715 li
clp
706.103 519.215 mo
706.103 513.215 li
f
1 lw
0 lc
706.103 519.215 mo
706.103 513.215 li
@
grestore
gsave
715.441 519.747 mo
716.441 519.747 li
716.441 512.747 li
715.441 512.747 li
715.441 519.747 li
clp
715.941 519.247 mo
715.941 513.247 li
f
1 lw
0 lc
715.941 519.247 mo
715.941 513.247 li
@
grestore
gsave
725.279 519.927 mo
726.279 519.927 li
726.279 512.927 li
725.279 512.927 li
725.279 519.927 li
clp
725.779 519.427 mo
725.779 513.427 li
f
1 lw
0 lc
725.779 519.427 mo
725.779 513.427 li
@
grestore
gsave
735.117 519.634 mo
736.117 519.634 li
736.117 512.634 li
735.117 512.634 li
735.117 519.634 li
clp
735.617 519.134 mo
735.617 513.134 li
f
1 lw
0 lc
735.617 519.134 mo
735.617 513.134 li
@
grestore
gsave
744.955 519.873 mo
745.955 519.873 li
745.955 512.873 li
744.955 512.873 li
744.955 519.873 li
clp
745.455 519.373 mo
745.455 513.373 li
f
1 lw
0 lc
745.455 519.373 mo
745.455 513.373 li
@
grestore
gsave
754.793 519.905 mo
755.793 519.905 li
755.793 512.905 li
754.793 512.905 li
754.793 519.905 li
clp
755.293 519.405 mo
755.293 513.405 li
f
1 lw
0 lc
755.293 519.405 mo
755.293 513.405 li
@
grestore
gsave
764.631 520.365 mo
765.631 520.365 li
765.631 513.365 li
764.631 513.365 li
764.631 520.365 li
clp
765.131 519.865 mo
765.131 513.865 li
f
1 lw
0 lc
765.131 519.865 mo
765.131 513.865 li
@
grestore
gsave
774.469 520.857 mo
775.469 520.857 li
775.469 513.857 li
774.469 513.857 li
774.469 520.857 li
clp
774.969 520.357 mo
774.969 514.357 li
f
1 lw
0 lc
774.969 520.357 mo
774.969 514.357 li
@
grestore
gsave
784.307 519.662 mo
785.307 519.662 li
785.307 512.662 li
784.307 512.662 li
784.307 519.662 li
clp
784.807 519.162 mo
784.807 513.162 li
f
1 lw
0 lc
784.807 519.162 mo
784.807 513.162 li
@
grestore
gsave
794.145 520.009 mo
795.145 520.009 li
795.145 513.009 li
794.145 513.009 li
794.145 520.009 li
clp
794.645 519.509 mo
794.645 513.509 li
f
1 lw
0 lc
794.645 519.509 mo
794.645 513.509 li
@
grestore
gsave
803.983 519.229 mo
804.983 519.229 li
804.983 512.229 li
803.983 512.229 li
803.983 519.229 li
clp
804.483 518.729 mo
804.483 512.729 li
f
1 lw
0 lc
804.483 518.729 mo
804.483 512.729 li
@
grestore
gsave
813.821 519.585 mo
814.821 519.585 li
814.821 512.585 li
813.821 512.585 li
813.821 519.585 li
clp
814.321 519.085 mo
814.321 513.085 li
f
1 lw
0 lc
814.321 519.085 mo
814.321 513.085 li
@
grestore
gsave
823.659 518.96 mo
824.659 518.96 li
824.659 511.96 li
823.659 511.96 li
823.659 518.96 li
clp
824.159 518.46 mo
824.159 512.46 li
f
1 lw
0 lc
824.159 518.46 mo
824.159 512.46 li
@
grestore
gsave
833.497 520.103 mo
834.497 520.103 li
834.497 513.103 li
833.497 513.103 li
833.497 520.103 li
clp
833.997 519.602 mo
833.997 513.602 li
f
1 lw
0 lc
833.997 519.602 mo
833.997 513.602 li
@
grestore
gsave
843.335 520.268 mo
844.335 520.268 li
844.335 513.268 li
843.335 513.268 li
843.335 520.268 li
clp
843.835 519.768 mo
843.835 513.768 li
f
1 lw
0 lc
843.835 519.768 mo
843.835 513.768 li
@
grestore
gsave
853.173 519.956 mo
854.173 519.956 li
854.173 512.957 li
853.173 512.957 li
853.173 519.956 li
clp
853.673 519.456 mo
853.673 513.456 li
f
1 lw
0 lc
853.673 519.456 mo
853.673 513.456 li
@
grestore
gsave
863.011 519.814 mo
864.011 519.814 li
864.011 512.814 li
863.011 512.814 li
863.011 519.814 li
clp
863.511 519.314 mo
863.511 513.314 li
f
1 lw
0 lc
863.511 519.314 mo
863.511 513.314 li
@
grestore
gsave
872.849 519.746 mo
873.849 519.746 li
873.849 512.746 li
872.849 512.746 li
872.849 519.746 li
clp
873.349 519.246 mo
873.349 513.246 li
f
1 lw
0 lc
873.349 519.246 mo
873.349 513.246 li
@
grestore
gsave
882.687 519.578 mo
883.687 519.578 li
883.687 512.578 li
882.687 512.578 li
882.687 519.578 li
clp
883.187 519.078 mo
883.187 513.078 li
f
1 lw
0 lc
883.187 519.078 mo
883.187 513.078 li
@
grestore
gsave
892.525 519.978 mo
893.525 519.978 li
893.525 512.978 li
892.525 512.978 li
892.525 519.978 li
clp
893.025 519.478 mo
893.025 513.478 li
f
1 lw
0 lc
893.025 519.478 mo
893.025 513.478 li
@
grestore
gsave
902.363 519.879 mo
903.363 519.879 li
903.363 512.879 li
902.363 512.879 li
902.363 519.879 li
clp
902.863 519.379 mo
902.863 513.379 li
f
1 lw
0 lc
902.863 519.379 mo
902.863 513.379 li
@
grestore
gsave
912.201 520.211 mo
913.201 520.211 li
913.201 513.211 li
912.201 513.211 li
912.201 520.211 li
clp
912.701 519.711 mo
912.701 513.711 li
f
1 lw
0 lc
912.701 519.711 mo
912.701 513.711 li
@
grestore
gsave
922.039 519.912 mo
923.039 519.912 li
923.039 512.912 li
922.039 512.912 li
922.039 519.912 li
clp
922.539 519.412 mo
922.539 513.412 li
f
1 lw
0 lc
922.539 519.412 mo
922.539 513.412 li
@
grestore
gsave
931.877 520.207 mo
932.877 520.207 li
932.877 513.207 li
931.877 513.207 li
931.877 520.207 li
clp
932.377 519.708 mo
932.377 513.708 li
f
1 lw
0 lc
932.377 519.708 mo
932.377 513.708 li
@
grestore
gsave
941.715 519.785 mo
942.715 519.785 li
942.715 512.785 li
941.715 512.785 li
941.715 519.785 li
clp
942.215 519.285 mo
942.215 513.285 li
f
1 lw
0 lc
942.215 519.285 mo
942.215 513.285 li
@
grestore
gsave
951.553 519.942 mo
952.553 519.942 li
952.553 512.942 li
951.553 512.942 li
951.553 519.942 li
clp
952.053 519.442 mo
952.053 513.442 li
f
1 lw
0 lc
952.053 519.442 mo
952.053 513.442 li
@
grestore
gsave
961.391 520.079 mo
962.391 520.079 li
962.391 513.079 li
961.391 513.079 li
961.391 520.079 li
clp
961.891 519.579 mo
961.891 513.579 li
f
1 lw
0 lc
961.891 519.579 mo
961.891 513.579 li
@
grestore
gsave
971.229 520.246 mo
972.229 520.246 li
972.229 513.246 li
971.229 513.246 li
971.229 520.246 li
clp
971.729 519.746 mo
971.729 513.746 li
f
1 lw
0 lc
971.729 519.746 mo
971.729 513.746 li
@
grestore
gsave
981.067 520.524 mo
982.067 520.524 li
982.067 513.524 li
981.067 513.524 li
981.067 520.524 li
clp
981.567 520.024 mo
981.567 514.024 li
f
1 lw
0 lc
981.567 520.024 mo
981.567 514.024 li
@
grestore
gsave
990.905 520.817 mo
991.906 520.817 li
991.906 513.817 li
990.905 513.817 li
990.905 520.817 li
clp
991.405 520.317 mo
991.405 514.317 li
f
1 lw
0 lc
991.405 520.317 mo
991.405 514.317 li
@
grestore
gsave
1000.74 520.237 mo
1001.74 520.237 li
1001.74 513.237 li
1000.74 513.237 li
1000.74 520.237 li
clp
1001.24 519.737 mo
1001.24 513.737 li
f
1 lw
0 lc
1001.24 519.737 mo
1001.24 513.737 li
@
grestore
gsave
1010.58 520.983 mo
1011.58 520.983 li
1011.58 513.983 li
1010.58 513.983 li
1010.58 520.983 li
clp
1011.08 520.482 mo
1011.08 514.482 li
f
1 lw
0 lc
1011.08 520.482 mo
1011.08 514.482 li
@
grestore
gsave
1020.42 520.265 mo
1021.42 520.265 li
1021.42 513.265 li
1020.42 513.265 li
1020.42 520.265 li
clp
1020.92 519.765 mo
1020.92 513.765 li
f
1 lw
0 lc
1020.92 519.765 mo
1020.92 513.765 li
@
grestore
gsave
1030.26 520.472 mo
1031.26 520.472 li
1031.26 513.472 li
1030.26 513.472 li
1030.26 520.472 li
clp
1030.76 519.972 mo
1030.76 513.972 li
f
1 lw
0 lc
1030.76 519.972 mo
1030.76 513.972 li
@
grestore
gsave
1040.1 521.016 mo
1041.1 521.016 li
1041.1 514.017 li
1040.1 514.017 li
1040.1 521.016 li
clp
1040.6 520.516 mo
1040.6 514.516 li
f
1 lw
0 lc
1040.6 520.516 mo
1040.6 514.516 li
@
grestore
gsave
1049.93 520.198 mo
1050.93 520.198 li
1050.93 513.198 li
1049.93 513.198 li
1049.93 520.198 li
clp
1050.43 519.698 mo
1050.43 513.698 li
f
1 lw
0 lc
1050.43 519.698 mo
1050.43 513.698 li
@
grestore
gsave
1059.77 520.191 mo
1060.77 520.191 li
1060.77 513.191 li
1059.77 513.191 li
1059.77 520.191 li
clp
1060.27 519.691 mo
1060.27 513.691 li
f
1 lw
0 lc
1060.27 519.691 mo
1060.27 513.691 li
@
grestore
gsave
1069.61 519.437 mo
1070.61 519.437 li
1070.61 512.437 li
1069.61 512.437 li
1069.61 519.437 li
clp
1070.11 518.937 mo
1070.11 512.937 li
f
1 lw
0 lc
1070.11 518.937 mo
1070.11 512.937 li
@
grestore
gsave
1079.45 520.007 mo
1080.45 520.007 li
1080.45 513.007 li
1079.45 513.007 li
1079.45 520.007 li
clp
1079.95 519.507 mo
1079.95 513.507 li
f
1 lw
0 lc
1079.95 519.507 mo
1079.95 513.507 li
@
grestore
gsave
1089.29 520.13 mo
1090.29 520.13 li
1090.29 513.13 li
1089.29 513.13 li
1089.29 520.13 li
clp
1089.79 519.63 mo
1089.79 513.63 li
f
1 lw
0 lc
1089.79 519.63 mo
1089.79 513.63 li
@
grestore
gsave
1099.12 519.42 mo
1100.12 519.42 li
1100.12 512.42 li
1099.12 512.42 li
1099.12 519.42 li
clp
1099.62 518.92 mo
1099.62 512.92 li
f
1 lw
0 lc
1099.62 518.92 mo
1099.62 512.92 li
@
grestore
gsave
1108.96 519.78 mo
1109.96 519.78 li
1109.96 512.78 li
1108.96 512.78 li
1108.96 519.78 li
clp
1109.46 519.28 mo
1109.46 513.28 li
f
1 lw
0 lc
1109.46 519.28 mo
1109.46 513.28 li
@
grestore
135.498 29.1404 mo
145.336 67.8845 li
155.174 108.489 li
165.012 129.718 li
174.85 139.641 li
184.688 142.944 li
194.526 149.081 li
204.364 154.335 li
214.202 155.576 li
224.04 158.73 li
233.878 162.289 li
243.716 165.106 li
253.554 168.001 li
263.392 172.753 li
273.23 174.73 li
283.068 176.004 li
292.906 178.194 li
302.744 182.882 li
312.582 183.282 li
322.421 185.513 li
332.259 185.688 li
342.097 186.185 li
351.935 186.667 li
361.773 188.546 li
371.611 186.911 li
381.449 188.084 li
391.287 190.863 li
401.125 189.901 li
410.963 190.759 li
420.801 191.45 li
430.639 190.727 li
440.477 190.994 li
450.315 192.659 li
460.153 193.684 li
469.991 193.744 li
479.829 194.46 li
489.667 193.021 li
499.505 194.75 li
509.343 193.144 li
519.181 195.033 li
529.019 195.316 li
538.857 195.159 li
548.695 196.585 li
558.533 195.821 li
568.371 195.847 li
578.209 198.071 li
588.047 195.44 li
597.885 196.224 li
607.723 196.258 li
617.561 197.834 li
627.399 198.093 li
637.237 199.717 li
647.075 198.496 li
656.913 199.398 li
666.751 198.619 li
676.589 197.981 li
686.427 198.088 li
696.265 197.526 li
706.103 197.901 li
715.941 200.103 li
725.779 200.189 li
735.617 197.89 li
745.455 199.416 li
755.293 199.228 li
765.131 198.741 li
774.969 200.973 li
784.807 199.822 li
794.645 200.414 li
804.483 200.325 li
814.321 201.665 li
824.159 200.351 li
833.997 200.361 li
843.835 201.062 li
853.673 202.814 li
863.511 201.296 li
873.349 200.793 li
883.187 201.099 li
893.025 200.468 li
902.863 199.407 li
912.701 200.703 li
922.539 202.831 li
932.378 199.708 li
942.216 200.887 li
952.054 200.935 li
961.892 203.218 li
971.73 201.582 li
981.568 202.036 li
991.406 204.326 li
1001.24 200.756 li
1011.08 202.509 li
1020.92 200.89 li
1030.76 202.122 li
1040.6 204.391 li
1050.43 201.2 li
1060.27 203.188 li
1070.11 201.614 li
1079.95 203.64 li
1089.79 203.63 li
1099.62 202.335 li
1109.46 201.539 li
1 /0 /CSD get_res sepcs
1 sep
@
135.498 380.099 mo
145.336 383.128 li
155.174 389.733 li
165.012 398.348 li
174.85 410.565 li
184.688 419.824 li
194.526 429.847 li
204.364 438.048 li
214.202 441.874 li
224.04 447.029 li
233.878 450.139 li
243.716 452.898 li
253.554 454.179 li
263.392 455.873 li
273.23 455.962 li
283.068 457.924 li
292.906 459.322 li
302.744 459.837 li
312.582 459.744 li
322.421 460.943 li
332.259 462.006 li
342.097 462.206 li
351.935 463.36 li
361.773 464.171 li
371.611 463.54 li
381.449 464.024 li
391.287 465.098 li
401.125 464.712 li
410.963 465.423 li
420.801 465.453 li
430.639 466.081 li
440.477 465.928 li
450.315 466.509 li
460.153 466.985 li
469.991 466.981 li
479.829 466.285 li
489.667 467.312 li
499.505 467.912 li
509.343 468.976 li
519.181 468.901 li
529.019 468.995 li
538.857 469.16 li
548.695 468.781 li
558.533 469.518 li
568.371 470.406 li
578.209 469.494 li
588.047 470.559 li
597.885 470.852 li
607.723 470.003 li
617.561 470.43 li
627.399 471.715 li
637.237 470.59 li
647.075 472.376 li
656.913 472.63 li
666.751 471.309 li
676.589 471.271 li
686.427 472.219 li
696.265 471.559 li
706.103 471.854 li
715.941 472.147 li
725.779 472.645 li
735.617 473.264 li
745.455 473.158 li
755.293 473.024 li
765.131 473.477 li
774.969 474.064 li
784.807 472.715 li
794.645 473.221 li
804.483 472.959 li
814.321 473.806 li
824.159 473.928 li
833.997 473.667 li
843.835 473.858 li
853.673 474.755 li
863.511 474.12 li
873.349 473.66 li
883.187 474.313 li
893.025 474.552 li
902.863 474.991 li
912.701 474.731 li
922.539 474.475 li
932.378 475.365 li
942.216 474.945 li
952.054 475.365 li
961.892 474.792 li
971.73 475.112 li
981.568 475.426 li
991.406 474.469 li
1001.24 474.588 li
1011.08 475.363 li
1020.92 475.774 li
1030.76 474.363 li
1040.6 476.013 li
1050.43 475.292 li
1060.27 476.163 li
1070.11 475.911 li
1079.95 475.721 li
1089.79 475.565 li
1099.62 476.429 li
1109.46 476.668 li
@
gsave
131.998 383.599 mo
138.998 383.599 li
138.998 376.599 li
131.998 376.599 li
131.998 383.599 li
clp
132.498 383.099 mo
138.498 377.099 li
132.498 377.099 mo
138.498 383.099 li
f
1 lw
0 lc
132.498 383.099 mo
138.498 377.099 li
132.498 377.099 mo
138.498 383.099 li
@
grestore
gsave
141.836 386.628 mo
148.836 386.628 li
148.836 379.628 li
141.836 379.628 li
141.836 386.628 li
clp
142.336 386.128 mo
148.336 380.128 li
142.336 380.128 mo
148.336 386.128 li
f
1 lw
0 lc
142.336 386.128 mo
148.336 380.128 li
142.336 380.128 mo
148.336 386.128 li
@
grestore
gsave
151.674 393.233 mo
158.674 393.233 li
158.674 386.233 li
151.674 386.233 li
151.674 393.233 li
clp
152.174 392.733 mo
158.174 386.733 li
152.174 386.733 mo
158.174 392.733 li
f
1 lw
0 lc
152.174 392.733 mo
158.174 386.733 li
152.174 386.733 mo
158.174 392.733 li
@
grestore
gsave
161.512 401.848 mo
168.512 401.848 li
168.512 394.848 li
161.512 394.848 li
161.512 401.848 li
clp
162.012 401.348 mo
168.012 395.348 li
162.012 395.348 mo
168.012 401.348 li
f
1 lw
0 lc
162.012 401.348 mo
168.012 395.348 li
162.012 395.348 mo
168.012 401.348 li
@
grestore
gsave
171.35 414.065 mo
178.35 414.065 li
178.35 407.065 li
171.35 407.065 li
171.35 414.065 li
clp
171.85 413.565 mo
177.85 407.565 li
171.85 407.565 mo
177.85 413.565 li
f
1 lw
0 lc
171.85 413.565 mo
177.85 407.565 li
171.85 407.565 mo
177.85 413.565 li
@
grestore
gsave
181.188 423.324 mo
188.188 423.324 li
188.188 416.324 li
181.188 416.324 li
181.188 423.324 li
clp
181.688 422.824 mo
187.688 416.824 li
181.688 416.824 mo
187.688 422.824 li
f
1 lw
0 lc
181.688 422.824 mo
187.688 416.824 li
181.688 416.824 mo
187.688 422.824 li
@
grestore
gsave
191.026 433.347 mo
198.026 433.347 li
198.026 426.347 li
191.026 426.347 li
191.026 433.347 li
clp
191.526 432.847 mo
197.526 426.847 li
191.526 426.847 mo
197.526 432.847 li
f
1 lw
0 lc
191.526 432.847 mo
197.526 426.847 li
191.526 426.847 mo
197.526 432.847 li
@
grestore
gsave
200.864 441.548 mo
207.864 441.548 li
207.864 434.548 li
200.864 434.548 li
200.864 441.548 li
clp
201.364 441.048 mo
207.364 435.048 li
201.364 435.048 mo
207.364 441.048 li
f
1 lw
0 lc
201.364 441.048 mo
207.364 435.048 li
201.364 435.048 mo
207.364 441.048 li
@
grestore
gsave
210.702 445.374 mo
217.702 445.374 li
217.702 438.374 li
210.702 438.374 li
210.702 445.374 li
clp
211.202 444.874 mo
217.202 438.874 li
211.202 438.874 mo
217.202 444.874 li
f
1 lw
0 lc
211.202 444.874 mo
217.202 438.874 li
211.202 438.874 mo
217.202 444.874 li
@
grestore
gsave
220.54 450.529 mo
227.54 450.529 li
227.54 443.529 li
220.54 443.529 li
220.54 450.529 li
clp
221.04 450.029 mo
227.04 444.029 li
221.04 444.029 mo
227.04 450.029 li
f
1 lw
0 lc
221.04 450.029 mo
227.04 444.029 li
221.04 444.029 mo
227.04 450.029 li
@
grestore
gsave
230.378 453.639 mo
237.378 453.639 li
237.378 446.639 li
230.378 446.639 li
230.378 453.639 li
clp
230.878 453.139 mo
236.878 447.139 li
230.878 447.139 mo
236.878 453.139 li
f
1 lw
0 lc
230.878 453.139 mo
236.878 447.139 li
230.878 447.139 mo
236.878 453.139 li
@
grestore
gsave
240.216 456.398 mo
247.216 456.398 li
247.216 449.398 li
240.216 449.398 li
240.216 456.398 li
clp
240.716 455.898 mo
246.716 449.898 li
240.716 449.898 mo
246.716 455.898 li
f
1 lw
0 lc
240.716 455.898 mo
246.716 449.898 li
240.716 449.898 mo
246.716 455.898 li
@
grestore
gsave
250.055 457.679 mo
257.054 457.679 li
257.054 450.679 li
250.055 450.679 li
250.055 457.679 li
clp
250.554 457.179 mo
256.554 451.179 li
250.554 451.179 mo
256.554 457.179 li
f
1 lw
0 lc
250.554 457.179 mo
256.554 451.179 li
250.554 451.179 mo
256.554 457.179 li
@
grestore
gsave
259.892 459.373 mo
266.893 459.373 li
266.893 452.373 li
259.892 452.373 li
259.892 459.373 li
clp
260.392 458.873 mo
266.392 452.873 li
260.392 452.873 mo
266.392 458.873 li
f
1 lw
0 lc
260.392 458.873 mo
266.392 452.873 li
260.392 452.873 mo
266.392 458.873 li
@
grestore
gsave
269.73 459.462 mo
276.73 459.462 li
276.73 452.462 li
269.73 452.462 li
269.73 459.462 li
clp
270.23 458.962 mo
276.23 452.962 li
270.23 452.962 mo
276.23 458.962 li
f
1 lw
0 lc
270.23 458.962 mo
276.23 452.962 li
270.23 452.962 mo
276.23 458.962 li
@
grestore
gsave
279.568 461.424 mo
286.568 461.424 li
286.568 454.423 li
279.568 454.423 li
279.568 461.424 li
clp
280.068 460.924 mo
286.068 454.924 li
280.068 454.924 mo
286.068 460.924 li
f
1 lw
0 lc
280.068 460.924 mo
286.068 454.924 li
280.068 454.924 mo
286.068 460.924 li
@
grestore
gsave
289.406 462.822 mo
296.406 462.822 li
296.406 455.822 li
289.406 455.822 li
289.406 462.822 li
clp
289.906 462.322 mo
295.906 456.322 li
289.906 456.322 mo
295.906 462.322 li
f
1 lw
0 lc
289.906 462.322 mo
295.906 456.322 li
289.906 456.322 mo
295.906 462.322 li
@
grestore
gsave
299.244 463.337 mo
306.244 463.337 li
306.244 456.337 li
299.244 456.337 li
299.244 463.337 li
clp
299.744 462.837 mo
305.744 456.837 li
299.744 456.837 mo
305.744 462.837 li
f
1 lw
0 lc
299.744 462.837 mo
305.744 456.837 li
299.744 456.837 mo
305.744 462.837 li
@
grestore
gsave
309.083 463.244 mo
316.082 463.244 li
316.082 456.244 li
309.083 456.244 li
309.083 463.244 li
clp
309.582 462.744 mo
315.582 456.744 li
309.582 456.744 mo
315.582 462.744 li
f
1 lw
0 lc
309.582 462.744 mo
315.582 456.744 li
309.582 456.744 mo
315.582 462.744 li
@
grestore
gsave
318.921 464.443 mo
325.921 464.443 li
325.921 457.443 li
318.921 457.443 li
318.921 464.443 li
clp
319.42 463.943 mo
325.42 457.943 li
319.42 457.943 mo
325.42 463.943 li
f
1 lw
0 lc
319.42 463.943 mo
325.42 457.943 li
319.42 457.943 mo
325.42 463.943 li
@
grestore
gsave
328.758 465.506 mo
335.759 465.506 li
335.759 458.506 li
328.758 458.506 li
328.758 465.506 li
clp
329.258 465.006 mo
335.258 459.006 li
329.258 459.006 mo
335.258 465.006 li
f
1 lw
0 lc
329.258 465.006 mo
335.258 459.006 li
329.258 459.006 mo
335.258 465.006 li
@
grestore
gsave
338.596 465.706 mo
345.596 465.706 li
345.596 458.706 li
338.596 458.706 li
338.596 465.706 li
clp
339.096 465.206 mo
345.096 459.206 li
339.096 459.206 mo
345.096 465.206 li
f
1 lw
0 lc
339.096 465.206 mo
345.096 459.206 li
339.096 459.206 mo
345.096 465.206 li
@
grestore
gsave
348.434 466.86 mo
355.434 466.86 li
355.434 459.86 li
348.434 459.86 li
348.434 466.86 li
clp
348.934 466.36 mo
354.934 460.36 li
348.934 460.36 mo
354.934 466.36 li
f
1 lw
0 lc
348.934 466.36 mo
354.934 460.36 li
348.934 460.36 mo
354.934 466.36 li
@
grestore
gsave
358.272 467.671 mo
365.272 467.671 li
365.272 460.671 li
358.272 460.671 li
358.272 467.671 li
clp
358.772 467.171 mo
364.772 461.171 li
358.772 461.171 mo
364.772 467.171 li
f
1 lw
0 lc
358.772 467.171 mo
364.772 461.171 li
358.772 461.171 mo
364.772 467.171 li
@
grestore
gsave
368.111 467.04 mo
375.111 467.04 li
375.111 460.04 li
368.111 460.04 li
368.111 467.04 li
clp
368.611 466.54 mo
374.611 460.54 li
368.611 460.54 mo
374.611 466.54 li
f
1 lw
0 lc
368.611 466.54 mo
374.611 460.54 li
368.611 460.54 mo
374.611 466.54 li
@
grestore
gsave
377.949 467.524 mo
384.949 467.524 li
384.949 460.524 li
377.949 460.524 li
377.949 467.524 li
clp
378.449 467.024 mo
384.449 461.024 li
378.449 461.024 mo
384.449 467.024 li
f
1 lw
0 lc
378.449 467.024 mo
384.449 461.024 li
378.449 461.024 mo
384.449 467.024 li
@
grestore
gsave
387.787 468.598 mo
394.787 468.598 li
394.787 461.598 li
387.787 461.598 li
387.787 468.598 li
clp
388.287 468.098 mo
394.287 462.098 li
388.287 462.098 mo
394.287 468.098 li
f
1 lw
0 lc
388.287 468.098 mo
394.287 462.098 li
388.287 462.098 mo
394.287 468.098 li
@
grestore
gsave
397.624 468.212 mo
404.625 468.212 li
404.625 461.212 li
397.624 461.212 li
397.624 468.212 li
clp
398.125 467.712 mo
404.125 461.712 li
398.125 461.712 mo
404.125 467.712 li
f
1 lw
0 lc
398.125 467.712 mo
404.125 461.712 li
398.125 461.712 mo
404.125 467.712 li
@
grestore
gsave
407.462 468.923 mo
414.462 468.923 li
414.462 461.923 li
407.462 461.923 li
407.462 468.923 li
clp
407.963 468.423 mo
413.963 462.423 li
407.963 462.423 mo
413.963 468.423 li
f
1 lw
0 lc
407.963 468.423 mo
413.963 462.423 li
407.963 462.423 mo
413.963 468.423 li
@
grestore
gsave
417.301 468.953 mo
424.3 468.953 li
424.3 461.953 li
417.301 461.953 li
417.301 468.953 li
clp
417.801 468.453 mo
423.801 462.453 li
417.801 462.453 mo
423.801 468.453 li
f
1 lw
0 lc
417.801 468.453 mo
423.801 462.453 li
417.801 462.453 mo
423.801 468.453 li
@
grestore
gsave
427.139 469.581 mo
434.138 469.581 li
434.138 462.581 li
427.139 462.581 li
427.139 469.581 li
clp
427.639 469.081 mo
433.639 463.081 li
427.639 463.081 mo
433.639 469.081 li
f
1 lw
0 lc
427.639 469.081 mo
433.639 463.081 li
427.639 463.081 mo
433.639 469.081 li
@
grestore
gsave
436.977 469.428 mo
443.977 469.428 li
443.977 462.428 li
436.977 462.428 li
436.977 469.428 li
clp
437.477 468.928 mo
443.477 462.928 li
437.477 462.928 mo
443.477 468.928 li
f
1 lw
0 lc
437.477 468.928 mo
443.477 462.928 li
437.477 462.928 mo
443.477 468.928 li
@
grestore
gsave
446.815 470.009 mo
453.815 470.009 li
453.815 463.009 li
446.815 463.009 li
446.815 470.009 li
clp
447.315 469.509 mo
453.315 463.509 li
447.315 463.509 mo
453.315 469.509 li
f
1 lw
0 lc
447.315 469.509 mo
453.315 463.509 li
447.315 463.509 mo
453.315 469.509 li
@
grestore
gsave
456.653 470.485 mo
463.653 470.485 li
463.653 463.485 li
456.653 463.485 li
456.653 470.485 li
clp
457.153 469.985 mo
463.153 463.985 li
457.153 463.985 mo
463.153 469.985 li
f
1 lw
0 lc
457.153 469.985 mo
463.153 463.985 li
457.153 463.985 mo
463.153 469.985 li
@
grestore
gsave
466.491 470.481 mo
473.491 470.481 li
473.491 463.481 li
466.491 463.481 li
466.491 470.481 li
clp
466.991 469.981 mo
472.991 463.981 li
466.991 463.981 mo
472.991 469.981 li
f
1 lw
0 lc
466.991 469.981 mo
472.991 463.981 li
466.991 463.981 mo
472.991 469.981 li
@
grestore
gsave
476.329 469.785 mo
483.329 469.785 li
483.329 462.785 li
476.329 462.785 li
476.329 469.785 li
clp
476.829 469.285 mo
482.829 463.285 li
476.829 463.285 mo
482.829 469.285 li
f
1 lw
0 lc
476.829 469.285 mo
482.829 463.285 li
476.829 463.285 mo
482.829 469.285 li
@
grestore
gsave
486.167 470.812 mo
493.167 470.812 li
493.167 463.812 li
486.167 463.812 li
486.167 470.812 li
clp
486.667 470.312 mo
492.667 464.312 li
486.667 464.312 mo
492.667 470.312 li
f
1 lw
0 lc
486.667 470.312 mo
492.667 464.312 li
486.667 464.312 mo
492.667 470.312 li
@
grestore
gsave
496.005 471.412 mo
503.005 471.412 li
503.005 464.412 li
496.005 464.412 li
496.005 471.412 li
clp
496.505 470.912 mo
502.505 464.912 li
496.505 464.912 mo
502.505 470.912 li
f
1 lw
0 lc
496.505 470.912 mo
502.505 464.912 li
496.505 464.912 mo
502.505 470.912 li
@
grestore
gsave
505.843 472.475 mo
512.843 472.475 li
512.843 465.475 li
505.843 465.475 li
505.843 472.475 li
clp
506.343 471.976 mo
512.343 465.976 li
506.343 465.976 mo
512.343 471.976 li
f
1 lw
0 lc
506.343 471.976 mo
512.343 465.976 li
506.343 465.976 mo
512.343 471.976 li
@
grestore
gsave
515.681 472.401 mo
522.681 472.401 li
522.681 465.401 li
515.681 465.401 li
515.681 472.401 li
clp
516.181 471.901 mo
522.181 465.901 li
516.181 465.901 mo
522.181 471.901 li
f
1 lw
0 lc
516.181 471.901 mo
522.181 465.901 li
516.181 465.901 mo
522.181 471.901 li
@
grestore
gsave
525.519 472.495 mo
532.519 472.495 li
532.519 465.495 li
525.519 465.495 li
525.519 472.495 li
clp
526.019 471.995 mo
532.019 465.995 li
526.019 465.995 mo
532.019 471.995 li
f
1 lw
0 lc
526.019 471.995 mo
532.019 465.995 li
526.019 465.995 mo
532.019 471.995 li
@
grestore
gsave
535.357 472.66 mo
542.357 472.66 li
542.357 465.66 li
535.357 465.66 li
535.357 472.66 li
clp
535.857 472.16 mo
541.857 466.16 li
535.857 466.16 mo
541.857 472.16 li
f
1 lw
0 lc
535.857 472.16 mo
541.857 466.16 li
535.857 466.16 mo
541.857 472.16 li
@
grestore
gsave
545.195 472.281 mo
552.195 472.281 li
552.195 465.281 li
545.195 465.281 li
545.195 472.281 li
clp
545.695 471.781 mo
551.695 465.781 li
545.695 465.781 mo
551.695 471.781 li
f
1 lw
0 lc
545.695 471.781 mo
551.695 465.781 li
545.695 465.781 mo
551.695 471.781 li
@
grestore
gsave
555.033 473.018 mo
562.033 473.018 li
562.033 466.018 li
555.033 466.018 li
555.033 473.018 li
clp
555.533 472.518 mo
561.533 466.518 li
555.533 466.518 mo
561.533 472.518 li
f
1 lw
0 lc
555.533 472.518 mo
561.533 466.518 li
555.533 466.518 mo
561.533 472.518 li
@
grestore
gsave
564.871 473.906 mo
571.871 473.906 li
571.871 466.906 li
564.871 466.906 li
564.871 473.906 li
clp
565.371 473.406 mo
571.371 467.406 li
565.371 467.406 mo
571.371 473.406 li
f
1 lw
0 lc
565.371 473.406 mo
571.371 467.406 li
565.371 467.406 mo
571.371 473.406 li
@
grestore
gsave
574.709 472.994 mo
581.709 472.994 li
581.709 465.994 li
574.709 465.994 li
574.709 472.994 li
clp
575.209 472.494 mo
581.209 466.494 li
575.209 466.494 mo
581.209 472.494 li
f
1 lw
0 lc
575.209 472.494 mo
581.209 466.494 li
575.209 466.494 mo
581.209 472.494 li
@
grestore
gsave
584.547 474.059 mo
591.547 474.059 li
591.547 467.059 li
584.547 467.059 li
584.547 474.059 li
clp
585.047 473.559 mo
591.047 467.559 li
585.047 467.559 mo
591.047 473.559 li
f
1 lw
0 lc
585.047 473.559 mo
591.047 467.559 li
585.047 467.559 mo
591.047 473.559 li
@
grestore
gsave
594.385 474.352 mo
601.385 474.352 li
601.385 467.352 li
594.385 467.352 li
594.385 474.352 li
clp
594.885 473.852 mo
600.885 467.852 li
594.885 467.852 mo
600.885 473.852 li
f
1 lw
0 lc
594.885 473.852 mo
600.885 467.852 li
594.885 467.852 mo
600.885 473.852 li
@
grestore
gsave
604.223 473.503 mo
611.223 473.503 li
611.223 466.503 li
604.223 466.503 li
604.223 473.503 li
clp
604.723 473.003 mo
610.723 467.003 li
604.723 467.003 mo
610.723 473.003 li
f
1 lw
0 lc
604.723 473.003 mo
610.723 467.003 li
604.723 467.003 mo
610.723 473.003 li
@
grestore
gsave
614.061 473.93 mo
621.061 473.93 li
621.061 466.93 li
614.061 466.93 li
614.061 473.93 li
clp
614.561 473.43 mo
620.561 467.43 li
614.561 467.43 mo
620.561 473.43 li
f
1 lw
0 lc
614.561 473.43 mo
620.561 467.43 li
614.561 467.43 mo
620.561 473.43 li
@
grestore
gsave
623.899 475.216 mo
630.899 475.216 li
630.899 468.215 li
623.899 468.215 li
623.899 475.216 li
clp
624.399 474.715 mo
630.399 468.715 li
624.399 468.715 mo
630.399 474.715 li
f
1 lw
0 lc
624.399 474.715 mo
630.399 468.715 li
624.399 468.715 mo
630.399 474.715 li
@
grestore
gsave
633.737 474.09 mo
640.737 474.09 li
640.737 467.09 li
633.737 467.09 li
633.737 474.09 li
clp
634.237 473.59 mo
640.237 467.59 li
634.237 467.59 mo
640.237 473.59 li
f
1 lw
0 lc
634.237 473.59 mo
640.237 467.59 li
634.237 467.59 mo
640.237 473.59 li
@
grestore
gsave
643.575 475.876 mo
650.575 475.876 li
650.575 468.876 li
643.575 468.876 li
643.575 475.876 li
clp
644.075 475.376 mo
650.075 469.376 li
644.075 469.376 mo
650.075 475.376 li
f
1 lw
0 lc
644.075 475.376 mo
650.075 469.376 li
644.075 469.376 mo
650.075 475.376 li
@
grestore
gsave
653.413 476.13 mo
660.413 476.13 li
660.413 469.13 li
653.413 469.13 li
653.413 476.13 li
clp
653.913 475.63 mo
659.913 469.63 li
653.913 469.63 mo
659.913 475.63 li
f
1 lw
0 lc
653.913 475.63 mo
659.913 469.63 li
653.913 469.63 mo
659.913 475.63 li
@
grestore
gsave
663.251 474.809 mo
670.251 474.809 li
670.251 467.809 li
663.251 467.809 li
663.251 474.809 li
clp
663.751 474.309 mo
669.751 468.309 li
663.751 468.309 mo
669.751 474.309 li
f
1 lw
0 lc
663.751 474.309 mo
669.751 468.309 li
663.751 468.309 mo
669.751 474.309 li
@
grestore
gsave
673.089 474.771 mo
680.089 474.771 li
680.089 467.771 li
673.089 467.771 li
673.089 474.771 li
clp
673.589 474.271 mo
679.589 468.271 li
673.589 468.271 mo
679.589 474.271 li
f
1 lw
0 lc
673.589 474.271 mo
679.589 468.271 li
673.589 468.271 mo
679.589 474.271 li
@
grestore
gsave
682.927 475.719 mo
689.927 475.719 li
689.927 468.719 li
682.927 468.719 li
682.927 475.719 li
clp
683.427 475.219 mo
689.427 469.219 li
683.427 469.219 mo
689.427 475.219 li
f
1 lw
0 lc
683.427 475.219 mo
689.427 469.219 li
683.427 469.219 mo
689.427 475.219 li
@
grestore
gsave
692.765 475.058 mo
699.765 475.058 li
699.765 468.059 li
692.765 468.059 li
692.765 475.058 li
clp
693.265 474.559 mo
699.265 468.559 li
693.265 468.559 mo
699.265 474.559 li
f
1 lw
0 lc
693.265 474.559 mo
699.265 468.559 li
693.265 468.559 mo
699.265 474.559 li
@
grestore
gsave
702.603 475.354 mo
709.603 475.354 li
709.603 468.354 li
702.603 468.354 li
702.603 475.354 li
clp
703.103 474.854 mo
709.103 468.854 li
703.103 468.854 mo
709.103 474.854 li
f
1 lw
0 lc
703.103 474.854 mo
709.103 468.854 li
703.103 468.854 mo
709.103 474.854 li
@
grestore
gsave
712.441 475.647 mo
719.441 475.647 li
719.441 468.647 li
712.441 468.647 li
712.441 475.647 li
clp
712.941 475.147 mo
718.941 469.147 li
712.941 469.147 mo
718.941 475.147 li
f
1 lw
0 lc
712.941 475.147 mo
718.941 469.147 li
712.941 469.147 mo
718.941 475.147 li
@
grestore
gsave
722.279 476.145 mo
729.279 476.145 li
729.279 469.145 li
722.279 469.145 li
722.279 476.145 li
clp
722.779 475.645 mo
728.779 469.645 li
722.779 469.645 mo
728.779 475.645 li
f
1 lw
0 lc
722.779 475.645 mo
728.779 469.645 li
722.779 469.645 mo
728.779 475.645 li
@
grestore
gsave
732.117 476.764 mo
739.117 476.764 li
739.117 469.764 li
732.117 469.764 li
732.117 476.764 li
clp
732.617 476.264 mo
738.617 470.264 li
732.617 470.264 mo
738.617 476.264 li
f
1 lw
0 lc
732.617 476.264 mo
738.617 470.264 li
732.617 470.264 mo
738.617 476.264 li
@
grestore
gsave
741.955 476.658 mo
748.955 476.658 li
748.955 469.658 li
741.955 469.658 li
741.955 476.658 li
clp
742.455 476.158 mo
748.455 470.158 li
742.455 470.158 mo
748.455 476.158 li
f
1 lw
0 lc
742.455 476.158 mo
748.455 470.158 li
742.455 470.158 mo
748.455 476.158 li
@
grestore
gsave
751.793 476.524 mo
758.793 476.524 li
758.793 469.524 li
751.793 469.524 li
751.793 476.524 li
clp
752.293 476.024 mo
758.293 470.024 li
752.293 470.024 mo
758.293 476.024 li
f
1 lw
0 lc
752.293 476.024 mo
758.293 470.024 li
752.293 470.024 mo
758.293 476.024 li
@
grestore
gsave
761.631 476.977 mo
768.631 476.977 li
768.631 469.977 li
761.631 469.977 li
761.631 476.977 li
clp
762.131 476.477 mo
768.131 470.477 li
762.131 470.477 mo
768.131 476.477 li
f
1 lw
0 lc
762.131 476.477 mo
768.131 470.477 li
762.131 470.477 mo
768.131 476.477 li
@
grestore
gsave
771.469 477.564 mo
778.469 477.564 li
778.469 470.564 li
771.469 470.564 li
771.469 477.564 li
clp
771.969 477.064 mo
777.969 471.064 li
771.969 471.064 mo
777.969 477.064 li
f
1 lw
0 lc
771.969 477.064 mo
777.969 471.064 li
771.969 471.064 mo
777.969 477.064 li
@
grestore
gsave
781.307 476.215 mo
788.307 476.215 li
788.307 469.215 li
781.307 469.215 li
781.307 476.215 li
clp
781.807 475.715 mo
787.807 469.715 li
781.807 469.715 mo
787.807 475.715 li
f
1 lw
0 lc
781.807 475.715 mo
787.807 469.715 li
781.807 469.715 mo
787.807 475.715 li
@
grestore
gsave
791.145 476.721 mo
798.145 476.721 li
798.145 469.721 li
791.145 469.721 li
791.145 476.721 li
clp
791.645 476.221 mo
797.645 470.221 li
791.645 470.221 mo
797.645 476.221 li
f
1 lw
0 lc
791.645 476.221 mo
797.645 470.221 li
791.645 470.221 mo
797.645 476.221 li
@
grestore
gsave
800.983 476.459 mo
807.983 476.459 li
807.983 469.459 li
800.983 469.459 li
800.983 476.459 li
clp
801.483 475.959 mo
807.483 469.959 li
801.483 469.959 mo
807.483 475.959 li
f
1 lw
0 lc
801.483 475.959 mo
807.483 469.959 li
801.483 469.959 mo
807.483 475.959 li
@
grestore
gsave
810.821 477.306 mo
817.821 477.306 li
817.821 470.306 li
810.821 470.306 li
810.821 477.306 li
clp
811.321 476.806 mo
817.321 470.806 li
811.321 470.806 mo
817.321 476.806 li
f
1 lw
0 lc
811.321 476.806 mo
817.321 470.806 li
811.321 470.806 mo
817.321 476.806 li
@
grestore
gsave
820.659 477.428 mo
827.659 477.428 li
827.659 470.428 li
820.659 470.428 li
820.659 477.428 li
clp
821.159 476.928 mo
827.159 470.928 li
821.159 470.928 mo
827.159 476.928 li
f
1 lw
0 lc
821.159 476.928 mo
827.159 470.928 li
821.159 470.928 mo
827.159 476.928 li
@
grestore
gsave
830.497 477.167 mo
837.497 477.167 li
837.497 470.167 li
830.497 470.167 li
830.497 477.167 li
clp
830.997 476.667 mo
836.997 470.667 li
830.997 470.667 mo
836.997 476.667 li
f
1 lw
0 lc
830.997 476.667 mo
836.997 470.667 li
830.997 470.667 mo
836.997 476.667 li
@
grestore
gsave
840.335 477.358 mo
847.335 477.358 li
847.335 470.359 li
840.335 470.359 li
840.335 477.358 li
clp
840.835 476.858 mo
846.835 470.858 li
840.835 470.858 mo
846.835 476.858 li
f
1 lw
0 lc
840.835 476.858 mo
846.835 470.858 li
840.835 470.858 mo
846.835 476.858 li
@
grestore
gsave
850.173 478.255 mo
857.173 478.255 li
857.173 471.255 li
850.173 471.255 li
850.173 478.255 li
clp
850.673 477.755 mo
856.673 471.755 li
850.673 471.755 mo
856.673 477.755 li
f
1 lw
0 lc
850.673 477.755 mo
856.673 471.755 li
850.673 471.755 mo
856.673 477.755 li
@
grestore
gsave
860.011 477.62 mo
867.011 477.62 li
867.011 470.62 li
860.011 470.62 li
860.011 477.62 li
clp
860.511 477.12 mo
866.511 471.12 li
860.511 471.12 mo
866.511 477.12 li
f
1 lw
0 lc
860.511 477.12 mo
866.511 471.12 li
860.511 471.12 mo
866.511 477.12 li
@
grestore
gsave
869.849 477.16 mo
876.849 477.16 li
876.849 470.16 li
869.849 470.16 li
869.849 477.16 li
clp
870.349 476.66 mo
876.349 470.66 li
870.349 470.66 mo
876.349 476.66 li
f
1 lw
0 lc
870.349 476.66 mo
876.349 470.66 li
870.349 470.66 mo
876.349 476.66 li
@
grestore
gsave
879.687 477.813 mo
886.687 477.813 li
886.687 470.813 li
879.687 470.813 li
879.687 477.813 li
clp
880.187 477.313 mo
886.187 471.313 li
880.187 471.313 mo
886.187 477.313 li
f
1 lw
0 lc
880.187 477.313 mo
886.187 471.313 li
880.187 471.313 mo
886.187 477.313 li
@
grestore
gsave
889.525 478.052 mo
896.525 478.052 li
896.525 471.052 li
889.525 471.052 li
889.525 478.052 li
clp
890.025 477.552 mo
896.025 471.552 li
890.025 471.552 mo
896.025 477.552 li
f
1 lw
0 lc
890.025 477.552 mo
896.025 471.552 li
890.025 471.552 mo
896.025 477.552 li
@
grestore
gsave
899.363 478.491 mo
906.363 478.491 li
906.363 471.491 li
899.363 471.491 li
899.363 478.491 li
clp
899.863 477.991 mo
905.863 471.991 li
899.863 471.991 mo
905.863 477.991 li
f
1 lw
0 lc
899.863 477.991 mo
905.863 471.991 li
899.863 471.991 mo
905.863 477.991 li
@
grestore
gsave
909.201 478.231 mo
916.201 478.231 li
916.201 471.231 li
909.201 471.231 li
909.201 478.231 li
clp
909.701 477.731 mo
915.701 471.731 li
909.701 471.731 mo
915.701 477.731 li
f
1 lw
0 lc
909.701 477.731 mo
915.701 471.731 li
909.701 471.731 mo
915.701 477.731 li
@
grestore
gsave
919.039 477.975 mo
926.039 477.975 li
926.039 470.975 li
919.039 470.975 li
919.039 477.975 li
clp
919.539 477.475 mo
925.539 471.475 li
919.539 471.475 mo
925.539 477.475 li
f
1 lw
0 lc
919.539 477.475 mo
925.539 471.475 li
919.539 471.475 mo
925.539 477.475 li
@
grestore
gsave
928.877 478.865 mo
935.877 478.865 li
935.877 471.865 li
928.877 471.865 li
928.877 478.865 li
clp
929.377 478.365 mo
935.377 472.365 li
929.377 472.365 mo
935.377 478.365 li
f
1 lw
0 lc
929.377 478.365 mo
935.377 472.365 li
929.377 472.365 mo
935.377 478.365 li
@
grestore
gsave
938.715 478.445 mo
945.715 478.445 li
945.715 471.445 li
938.715 471.445 li
938.715 478.445 li
clp
939.215 477.945 mo
945.215 471.945 li
939.215 471.945 mo
945.215 477.945 li
f
1 lw
0 lc
939.215 477.945 mo
945.215 471.945 li
939.215 471.945 mo
945.215 477.945 li
@
grestore
gsave
948.553 478.865 mo
955.553 478.865 li
955.553 471.865 li
948.553 471.865 li
948.553 478.865 li
clp
949.053 478.365 mo
955.053 472.365 li
949.053 472.365 mo
955.053 478.365 li
f
1 lw
0 lc
949.053 478.365 mo
955.053 472.365 li
949.053 472.365 mo
955.053 478.365 li
@
grestore
gsave
958.391 478.292 mo
965.391 478.292 li
965.391 471.293 li
958.391 471.293 li
958.391 478.292 li
clp
958.891 477.793 mo
964.891 471.793 li
958.891 471.793 mo
964.891 477.793 li
f
1 lw
0 lc
958.891 477.793 mo
964.891 471.793 li
958.891 471.793 mo
964.891 477.793 li
@
grestore
gsave
968.229 478.612 mo
975.229 478.612 li
975.229 471.612 li
968.229 471.612 li
968.229 478.612 li
clp
968.729 478.112 mo
974.729 472.112 li
968.729 472.112 mo
974.729 478.112 li
f
1 lw
0 lc
968.729 478.112 mo
974.729 472.112 li
968.729 472.112 mo
974.729 478.112 li
@
grestore
gsave
978.067 478.926 mo
985.068 478.926 li
985.068 471.926 li
978.067 471.926 li
978.067 478.926 li
clp
978.567 478.426 mo
984.567 472.426 li
978.567 472.426 mo
984.567 478.426 li
f
1 lw
0 lc
978.567 478.426 mo
984.567 472.426 li
978.567 472.426 mo
984.567 478.426 li
@
grestore
gsave
987.905 477.969 mo
994.905 477.969 li
994.905 470.969 li
987.905 470.969 li
987.905 477.969 li
clp
988.405 477.469 mo
994.405 471.469 li
988.405 471.469 mo
994.405 477.469 li
f
1 lw
0 lc
988.405 477.469 mo
994.405 471.469 li
988.405 471.469 mo
994.405 477.469 li
@
grestore
gsave
997.743 478.088 mo
1004.74 478.088 li
1004.74 471.088 li
997.743 471.088 li
997.743 478.088 li
clp
998.243 477.588 mo
1004.24 471.588 li
998.243 471.588 mo
1004.24 477.588 li
f
1 lw
0 lc
998.243 477.588 mo
1004.24 471.588 li
998.243 471.588 mo
1004.24 477.588 li
@
grestore
gsave
1007.58 478.863 mo
1014.58 478.863 li
1014.58 471.864 li
1007.58 471.864 li
1007.58 478.863 li
clp
1008.08 478.363 mo
1014.08 472.363 li
1008.08 472.363 mo
1014.08 478.363 li
f
1 lw
0 lc
1008.08 478.363 mo
1014.08 472.363 li
1008.08 472.363 mo
1014.08 478.363 li
@
grestore
gsave
1017.42 479.274 mo
1024.42 479.274 li
1024.42 472.274 li
1017.42 472.274 li
1017.42 479.274 li
clp
1017.92 478.774 mo
1023.92 472.774 li
1017.92 472.774 mo
1023.92 478.774 li
f
1 lw
0 lc
1017.92 478.774 mo
1023.92 472.774 li
1017.92 472.774 mo
1023.92 478.774 li
@
grestore
gsave
1027.26 477.863 mo
1034.26 477.863 li
1034.26 470.863 li
1027.26 470.863 li
1027.26 477.863 li
clp
1027.76 477.363 mo
1033.76 471.363 li
1027.76 471.363 mo
1033.76 477.363 li
f
1 lw
0 lc
1027.76 477.363 mo
1033.76 471.363 li
1027.76 471.363 mo
1033.76 477.363 li
@
grestore
gsave
1037.1 479.513 mo
1044.1 479.513 li
1044.1 472.513 li
1037.1 472.513 li
1037.1 479.513 li
clp
1037.6 479.013 mo
1043.6 473.013 li
1037.6 473.013 mo
1043.6 479.013 li
f
1 lw
0 lc
1037.6 479.013 mo
1043.6 473.013 li
1037.6 473.013 mo
1043.6 479.013 li
@
grestore
gsave
1046.93 478.793 mo
1053.93 478.793 li
1053.93 471.792 li
1046.93 471.792 li
1046.93 478.793 li
clp
1047.43 478.292 mo
1053.43 472.292 li
1047.43 472.292 mo
1053.43 478.292 li
f
1 lw
0 lc
1047.43 478.292 mo
1053.43 472.292 li
1047.43 472.292 mo
1053.43 478.292 li
@
grestore
gsave
1056.77 479.663 mo
1063.77 479.663 li
1063.77 472.663 li
1056.77 472.663 li
1056.77 479.663 li
clp
1057.27 479.163 mo
1063.27 473.163 li
1057.27 473.163 mo
1063.27 479.163 li
f
1 lw
0 lc
1057.27 479.163 mo
1063.27 473.163 li
1057.27 473.163 mo
1063.27 479.163 li
@
grestore
gsave
1066.61 479.411 mo
1073.61 479.411 li
1073.61 472.411 li
1066.61 472.411 li
1066.61 479.411 li
clp
1067.11 478.911 mo
1073.11 472.911 li
1067.11 472.911 mo
1073.11 478.911 li
f
1 lw
0 lc
1067.11 478.911 mo
1073.11 472.911 li
1067.11 472.911 mo
1073.11 478.911 li
@
grestore
gsave
1076.45 479.221 mo
1083.45 479.221 li
1083.45 472.221 li
1076.45 472.221 li
1076.45 479.221 li
clp
1076.95 478.721 mo
1082.95 472.721 li
1076.95 472.721 mo
1082.95 478.721 li
f
1 lw
0 lc
1076.95 478.721 mo
1082.95 472.721 li
1076.95 472.721 mo
1082.95 478.721 li
@
grestore
gsave
1086.29 479.065 mo
1093.29 479.065 li
1093.29 472.065 li
1086.29 472.065 li
1086.29 479.065 li
clp
1086.79 478.565 mo
1092.79 472.565 li
1086.79 472.565 mo
1092.79 478.565 li
f
1 lw
0 lc
1086.79 478.565 mo
1092.79 472.565 li
1086.79 472.565 mo
1092.79 478.565 li
@
grestore
gsave
1096.12 479.929 mo
1103.12 479.929 li
1103.12 472.929 li
1096.12 472.929 li
1096.12 479.929 li
clp
1096.62 479.429 mo
1102.62 473.429 li
1096.62 473.429 mo
1102.62 479.429 li
f
1 lw
0 lc
1096.62 479.429 mo
1102.62 473.429 li
1096.62 473.429 mo
1102.62 479.429 li
@
grestore
gsave
1105.96 480.168 mo
1112.96 480.168 li
1112.96 473.168 li
1105.96 473.168 li
1105.96 480.168 li
clp
1106.46 479.668 mo
1112.46 473.668 li
1106.46 473.668 mo
1112.46 479.668 li
f
1 lw
0 lc
1106.46 479.668 mo
1112.46 473.668 li
1106.46 473.668 mo
1112.46 479.668 li
@
grestore
135.498 460.868 mo
145.336 461.689 li
155.174 464.001 li
165.012 466.563 li
174.85 470.462 li
184.688 475.635 li
194.526 481.659 li
204.364 486.249 li
214.202 492.346 li
224.04 495.975 li
233.878 498.043 li
243.716 500.794 li
253.554 502.717 li
263.392 504.49 li
273.23 505.451 li
283.068 506.101 li
292.906 507.401 li
302.744 507.2 li
312.582 507.965 li
322.421 507.712 li
332.259 509.047 li
342.097 509.719 li
351.935 509.836 li
361.773 509.496 li
371.611 509.438 li
381.449 509.773 li
391.287 511.201 li
401.125 509.649 li
410.963 511.101 li
420.801 510.644 li
430.639 511.517 li
440.477 511.214 li
450.315 510.771 li
460.153 511.362 li
469.991 511.088 li
479.829 511.362 li
489.667 510.895 li
499.505 512.242 li
509.343 511.302 li
519.181 512.072 li
529.019 511.582 li
538.857 512.253 li
548.695 511.748 li
558.533 511.859 li
568.371 511.847 li
578.209 512.179 li
588.047 512.004 li
597.885 512.436 li
607.723 512.521 li
617.561 513.093 li
627.399 512.858 li
637.237 513.064 li
647.075 511.791 li
656.913 512.55 li
666.751 512.741 li
676.589 513.128 li
686.427 512.44 li
696.265 511.985 li
706.103 512.019 li
715.941 512.012 li
725.779 512.605 li
735.617 512.36 li
745.455 512.846 li
755.293 512.593 li
765.131 512.869 li
774.969 512.464 li
784.807 510.98 li
794.645 512.297 li
804.483 512.061 li
814.321 512.449 li
824.159 512.834 li
833.997 513.381 li
843.835 512.682 li
853.673 513.869 li
863.511 512.731 li
873.349 512.595 li
883.187 513.196 li
893.025 513.231 li
902.863 513.424 li
912.701 514.059 li
922.539 513.427 li
932.378 512.879 li
942.216 513.649 li
952.054 512.44 li
961.892 513.634 li
971.73 513.68 li
981.568 513.083 li
991.406 513.11 li
1001.24 513.146 li
1011.08 513.252 li
1020.92 513.379 li
1030.76 513.425 li
1040.6 514.017 li
1050.43 513.261 li
1060.27 514.059 li
1070.11 512.708 li
1079.95 513.644 li
1089.79 513.635 li
1099.62 513.984 li
1109.46 512.897 li
@
gsave
134.998 464.368 mo
135.998 464.368 li
135.998 457.368 li
134.998 457.368 li
134.998 464.368 li
clp
135.498 463.868 mo
135.498 457.868 li
f
1 lw
0 lc
135.498 463.868 mo
135.498 457.868 li
@
grestore
gsave
144.836 465.189 mo
145.836 465.189 li
145.836 458.189 li
144.836 458.189 li
144.836 465.189 li
clp
145.336 464.689 mo
145.336 458.689 li
f
1 lw
0 lc
145.336 464.689 mo
145.336 458.689 li
@
grestore
gsave
154.674 467.501 mo
155.674 467.501 li
155.674 460.501 li
154.674 460.501 li
154.674 467.501 li
clp
155.174 467.001 mo
155.174 461.001 li
f
1 lw
0 lc
155.174 467.001 mo
155.174 461.001 li
@
grestore
gsave
164.512 470.063 mo
165.512 470.063 li
165.512 463.063 li
164.512 463.063 li
164.512 470.063 li
clp
165.012 469.563 mo
165.012 463.563 li
f
1 lw
0 lc
165.012 469.563 mo
165.012 463.563 li
@
grestore
gsave
174.35 473.962 mo
175.35 473.962 li
175.35 466.962 li
174.35 466.962 li
174.35 473.962 li
clp
174.85 473.462 mo
174.85 467.462 li
f
1 lw
0 lc
174.85 473.462 mo
174.85 467.462 li
@
grestore
gsave
184.188 479.135 mo
185.188 479.135 li
185.188 472.135 li
184.188 472.135 li
184.188 479.135 li
clp
184.688 478.635 mo
184.688 472.635 li
f
1 lw
0 lc
184.688 478.635 mo
184.688 472.635 li
@
grestore
gsave
194.026 485.159 mo
195.026 485.159 li
195.026 478.159 li
194.026 478.159 li
194.026 485.159 li
clp
194.526 484.659 mo
194.526 478.659 li
f
1 lw
0 lc
194.526 484.659 mo
194.526 478.659 li
@
grestore
gsave
203.864 489.749 mo
204.864 489.749 li
204.864 482.749 li
203.864 482.749 li
203.864 489.749 li
clp
204.364 489.249 mo
204.364 483.249 li
f
1 lw
0 lc
204.364 489.249 mo
204.364 483.249 li
@
grestore
gsave
213.702 495.846 mo
214.702 495.846 li
214.702 488.846 li
213.702 488.846 li
213.702 495.846 li
clp
214.202 495.346 mo
214.202 489.346 li
f
1 lw
0 lc
214.202 495.346 mo
214.202 489.346 li
@
grestore
gsave
223.54 499.475 mo
224.54 499.475 li
224.54 492.475 li
223.54 492.475 li
223.54 499.475 li
clp
224.04 498.975 mo
224.04 492.975 li
f
1 lw
0 lc
224.04 498.975 mo
224.04 492.975 li
@
grestore
gsave
233.378 501.543 mo
234.378 501.543 li
234.378 494.543 li
233.378 494.543 li
233.378 501.543 li
clp
233.878 501.043 mo
233.878 495.043 li
f
1 lw
0 lc
233.878 501.043 mo
233.878 495.043 li
@
grestore
gsave
243.216 504.293 mo
244.216 504.293 li
244.216 497.293 li
243.216 497.293 li
243.216 504.293 li
clp
243.716 503.794 mo
243.716 497.794 li
f
1 lw
0 lc
243.716 503.794 mo
243.716 497.794 li
@
grestore
gsave
253.054 506.216 mo
254.054 506.216 li
254.054 499.217 li
253.054 499.217 li
253.054 506.216 li
clp
253.554 505.716 mo
253.554 499.716 li
f
1 lw
0 lc
253.554 505.716 mo
253.554 499.716 li
@
grestore
gsave
262.892 507.99 mo
263.892 507.99 li
263.892 500.99 li
262.892 500.99 li
262.892 507.99 li
clp
263.392 507.49 mo
263.392 501.49 li
f
1 lw
0 lc
263.392 507.49 mo
263.392 501.49 li
@
grestore
gsave
272.73 508.951 mo
273.73 508.951 li
273.73 501.951 li
272.73 501.951 li
272.73 508.951 li
clp
273.23 508.451 mo
273.23 502.451 li
f
1 lw
0 lc
273.23 508.451 mo
273.23 502.451 li
@
grestore
gsave
282.568 509.601 mo
283.569 509.601 li
283.569 502.601 li
282.568 502.601 li
282.568 509.601 li
clp
283.068 509.101 mo
283.068 503.101 li
f
1 lw
0 lc
283.068 509.101 mo
283.068 503.101 li
@
grestore
gsave
292.406 510.901 mo
293.406 510.901 li
293.406 503.901 li
292.406 503.901 li
292.406 510.901 li
clp
292.906 510.401 mo
292.906 504.401 li
f
1 lw
0 lc
292.906 510.401 mo
292.906 504.401 li
@
grestore
gsave
302.245 510.7 mo
303.244 510.7 li
303.244 503.7 li
302.245 503.7 li
302.245 510.7 li
clp
302.744 510.2 mo
302.744 504.2 li
f
1 lw
0 lc
302.744 510.2 mo
302.744 504.2 li
@
grestore
gsave
312.082 511.465 mo
313.082 511.465 li
313.082 504.465 li
312.082 504.465 li
312.082 511.465 li
clp
312.582 510.965 mo
312.582 504.965 li
f
1 lw
0 lc
312.582 510.965 mo
312.582 504.965 li
@
grestore
gsave
321.92 511.212 mo
322.92 511.212 li
322.92 504.212 li
321.92 504.212 li
321.92 511.212 li
clp
322.42 510.712 mo
322.42 504.712 li
f
1 lw
0 lc
322.42 510.712 mo
322.42 504.712 li
@
grestore
gsave
331.758 512.547 mo
332.759 512.547 li
332.759 505.547 li
331.758 505.547 li
331.758 512.547 li
clp
332.258 512.047 mo
332.258 506.047 li
f
1 lw
0 lc
332.258 512.047 mo
332.258 506.047 li
@
grestore
gsave
341.596 513.219 mo
342.597 513.219 li
342.597 506.219 li
341.596 506.219 li
341.596 513.219 li
clp
342.096 512.719 mo
342.096 506.719 li
f
1 lw
0 lc
342.096 512.719 mo
342.096 506.719 li
@
grestore
gsave
351.435 513.337 mo
352.435 513.337 li
352.435 506.336 li
351.435 506.336 li
351.435 513.337 li
clp
351.934 512.836 mo
351.934 506.836 li
f
1 lw
0 lc
351.934 512.836 mo
351.934 506.836 li
@
grestore
gsave
361.273 512.996 mo
362.272 512.996 li
362.272 505.995 li
361.273 505.995 li
361.273 512.996 li
clp
361.772 512.495 mo
361.772 506.496 li
f
1 lw
0 lc
361.772 512.495 mo
361.772 506.496 li
@
grestore
gsave
371.111 512.938 mo
372.11 512.938 li
372.11 505.938 li
371.111 505.938 li
371.111 512.938 li
clp
371.611 512.438 mo
371.611 506.438 li
f
1 lw
0 lc
371.611 512.438 mo
371.611 506.438 li
@
grestore
gsave
380.949 513.273 mo
381.948 513.273 li
381.948 506.273 li
380.949 506.273 li
380.949 513.273 li
clp
381.449 512.773 mo
381.449 506.773 li
f
1 lw
0 lc
381.449 512.773 mo
381.449 506.773 li
@
grestore
gsave
390.786 514.701 mo
391.787 514.701 li
391.787 507.7 li
390.786 507.7 li
390.786 514.701 li
clp
391.287 514.201 mo
391.287 508.201 li
f
1 lw
0 lc
391.287 514.201 mo
391.287 508.201 li
@
grestore
gsave
400.624 513.149 mo
401.625 513.149 li
401.625 506.149 li
400.624 506.149 li
400.624 513.149 li
clp
401.125 512.648 mo
401.125 506.648 li
f
1 lw
0 lc
401.125 512.648 mo
401.125 506.648 li
@
grestore
gsave
410.463 514.601 mo
411.463 514.601 li
411.463 507.601 li
410.463 507.601 li
410.463 514.601 li
clp
410.963 514.101 mo
410.963 508.101 li
f
1 lw
0 lc
410.963 514.101 mo
410.963 508.101 li
@
grestore
gsave
420.301 514.144 mo
421.301 514.144 li
421.301 507.144 li
420.301 507.144 li
420.301 514.144 li
clp
420.801 513.644 mo
420.801 507.644 li
f
1 lw
0 lc
420.801 513.644 mo
420.801 507.644 li
@
grestore
gsave
430.139 515.017 mo
431.138 515.017 li
431.138 508.017 li
430.139 508.017 li
430.139 515.017 li
clp
430.639 514.517 mo
430.639 508.517 li
f
1 lw
0 lc
430.639 514.517 mo
430.639 508.517 li
@
grestore
gsave
439.977 514.714 mo
440.977 514.714 li
440.977 507.714 li
439.977 507.714 li
439.977 514.714 li
clp
440.477 514.214 mo
440.477 508.214 li
f
1 lw
0 lc
440.477 514.214 mo
440.477 508.214 li
@
grestore
gsave
449.815 514.271 mo
450.815 514.271 li
450.815 507.271 li
449.815 507.271 li
449.815 514.271 li
clp
450.315 513.771 mo
450.315 507.771 li
f
1 lw
0 lc
450.315 513.771 mo
450.315 507.771 li
@
grestore
gsave
459.652 514.862 mo
460.653 514.862 li
460.653 507.862 li
459.652 507.862 li
459.652 514.862 li
clp
460.153 514.362 mo
460.153 508.362 li
f
1 lw
0 lc
460.153 514.362 mo
460.153 508.362 li
@
grestore
gsave
469.491 514.588 mo
470.491 514.588 li
470.491 507.588 li
469.491 507.588 li
469.491 514.588 li
clp
469.991 514.088 mo
469.991 508.088 li
f
1 lw
0 lc
469.991 514.088 mo
469.991 508.088 li
@
grestore
gsave
479.329 514.862 mo
480.329 514.862 li
480.329 507.862 li
479.329 507.862 li
479.329 514.862 li
clp
479.829 514.362 mo
479.829 508.362 li
f
1 lw
0 lc
479.829 514.362 mo
479.829 508.362 li
@
grestore
gsave
489.167 514.395 mo
490.167 514.395 li
490.167 507.395 li
489.167 507.395 li
489.167 514.395 li
clp
489.667 513.895 mo
489.667 507.895 li
f
1 lw
0 lc
489.667 513.895 mo
489.667 507.895 li
@
grestore
gsave
499.005 515.742 mo
500.005 515.742 li
500.005 508.742 li
499.005 508.742 li
499.005 515.742 li
clp
499.505 515.242 mo
499.505 509.242 li
f
1 lw
0 lc
499.505 515.242 mo
499.505 509.242 li
@
grestore
gsave
508.843 514.802 mo
509.843 514.802 li
509.843 507.803 li
508.843 507.803 li
508.843 514.802 li
clp
509.343 514.302 mo
509.343 508.302 li
f
1 lw
0 lc
509.343 514.302 mo
509.343 508.302 li
@
grestore
gsave
518.681 515.572 mo
519.681 515.572 li
519.681 508.573 li
518.681 508.573 li
518.681 515.572 li
clp
519.181 515.072 mo
519.181 509.072 li
f
1 lw
0 lc
519.181 515.072 mo
519.181 509.072 li
@
grestore
gsave
528.519 515.082 mo
529.519 515.082 li
529.519 508.082 li
528.519 508.082 li
528.519 515.082 li
clp
529.019 514.582 mo
529.019 508.582 li
f
1 lw
0 lc
529.019 514.582 mo
529.019 508.582 li
@
grestore
gsave
538.357 515.753 mo
539.357 515.753 li
539.357 508.753 li
538.357 508.753 li
538.357 515.753 li
clp
538.857 515.253 mo
538.857 509.253 li
f
1 lw
0 lc
538.857 515.253 mo
538.857 509.253 li
@
grestore
gsave
548.195 515.249 mo
549.195 515.249 li
549.195 508.248 li
548.195 508.248 li
548.195 515.249 li
clp
548.695 514.748 mo
548.695 508.748 li
f
1 lw
0 lc
548.695 514.748 mo
548.695 508.748 li
@
grestore
gsave
558.033 515.359 mo
559.033 515.359 li
559.033 508.359 li
558.033 508.359 li
558.033 515.359 li
clp
558.533 514.859 mo
558.533 508.859 li
f
1 lw
0 lc
558.533 514.859 mo
558.533 508.859 li
@
grestore
gsave
567.871 515.347 mo
568.871 515.347 li
568.871 508.347 li
567.871 508.347 li
567.871 515.347 li
clp
568.371 514.847 mo
568.371 508.847 li
f
1 lw
0 lc
568.371 514.847 mo
568.371 508.847 li
@
grestore
gsave
577.709 515.679 mo
578.709 515.679 li
578.709 508.679 li
577.709 508.679 li
577.709 515.679 li
clp
578.209 515.179 mo
578.209 509.179 li
f
1 lw
0 lc
578.209 515.179 mo
578.209 509.179 li
@
grestore
gsave
587.547 515.504 mo
588.547 515.504 li
588.547 508.504 li
587.547 508.504 li
587.547 515.504 li
clp
588.047 515.004 mo
588.047 509.004 li
f
1 lw
0 lc
588.047 515.004 mo
588.047 509.004 li
@
grestore
gsave
597.385 515.935 mo
598.385 515.935 li
598.385 508.936 li
597.385 508.936 li
597.385 515.935 li
clp
597.885 515.436 mo
597.885 509.436 li
f
1 lw
0 lc
597.885 515.436 mo
597.885 509.436 li
@
grestore
gsave
607.223 516.021 mo
608.223 516.021 li
608.223 509.021 li
607.223 509.021 li
607.223 516.021 li
clp
607.723 515.521 mo
607.723 509.521 li
f
1 lw
0 lc
607.723 515.521 mo
607.723 509.521 li
@
grestore
gsave
617.061 516.593 mo
618.061 516.593 li
618.061 509.593 li
617.061 509.593 li
617.061 516.593 li
clp
617.561 516.093 mo
617.561 510.093 li
f
1 lw
0 lc
617.561 516.093 mo
617.561 510.093 li
@
grestore
gsave
626.899 516.358 mo
627.899 516.358 li
627.899 509.358 li
626.899 509.358 li
626.899 516.358 li
clp
627.399 515.858 mo
627.399 509.858 li
f
1 lw
0 lc
627.399 515.858 mo
627.399 509.858 li
@
grestore
gsave
636.737 516.564 mo
637.737 516.564 li
637.737 509.564 li
636.737 509.564 li
636.737 516.564 li
clp
637.237 516.064 mo
637.237 510.064 li
f
1 lw
0 lc
637.237 516.064 mo
637.237 510.064 li
@
grestore
gsave
646.575 515.291 mo
647.575 515.291 li
647.575 508.291 li
646.575 508.291 li
646.575 515.291 li
clp
647.075 514.791 mo
647.075 508.791 li
f
1 lw
0 lc
647.075 514.791 mo
647.075 508.791 li
@
grestore
gsave
656.413 516.05 mo
657.413 516.05 li
657.413 509.05 li
656.413 509.05 li
656.413 516.05 li
clp
656.913 515.55 mo
656.913 509.55 li
f
1 lw
0 lc
656.913 515.55 mo
656.913 509.55 li
@
grestore
gsave
666.251 516.241 mo
667.251 516.241 li
667.251 509.241 li
666.251 509.241 li
666.251 516.241 li
clp
666.751 515.741 mo
666.751 509.741 li
f
1 lw
0 lc
666.751 515.741 mo
666.751 509.741 li
@
grestore
gsave
676.089 516.628 mo
677.089 516.628 li
677.089 509.627 li
676.089 509.627 li
676.089 516.628 li
clp
676.589 516.128 mo
676.589 510.128 li
f
1 lw
0 lc
676.589 516.128 mo
676.589 510.128 li
@
grestore
gsave
685.927 515.94 mo
686.927 515.94 li
686.927 508.94 li
685.927 508.94 li
685.927 515.94 li
clp
686.427 515.44 mo
686.427 509.44 li
f
1 lw
0 lc
686.427 515.44 mo
686.427 509.44 li
@
grestore
gsave
695.765 515.485 mo
696.765 515.485 li
696.765 508.485 li
695.765 508.485 li
695.765 515.485 li
clp
696.265 514.985 mo
696.265 508.985 li
f
1 lw
0 lc
696.265 514.985 mo
696.265 508.985 li
@
grestore
gsave
705.603 515.519 mo
706.603 515.519 li
706.603 508.519 li
705.603 508.519 li
705.603 515.519 li
clp
706.103 515.019 mo
706.103 509.019 li
f
1 lw
0 lc
706.103 515.019 mo
706.103 509.019 li
@
grestore
gsave
715.441 515.512 mo
716.441 515.512 li
716.441 508.512 li
715.441 508.512 li
715.441 515.512 li
clp
715.941 515.012 mo
715.941 509.012 li
f
1 lw
0 lc
715.941 515.012 mo
715.941 509.012 li
@
grestore
gsave
725.279 516.105 mo
726.279 516.105 li
726.279 509.105 li
725.279 509.105 li
725.279 516.105 li
clp
725.779 515.605 mo
725.779 509.605 li
f
1 lw
0 lc
725.779 515.605 mo
725.779 509.605 li
@
grestore
gsave
735.117 515.86 mo
736.117 515.86 li
736.117 508.86 li
735.117 508.86 li
735.117 515.86 li
clp
735.617 515.36 mo
735.617 509.36 li
f
1 lw
0 lc
735.617 515.36 mo
735.617 509.36 li
@
grestore
gsave
744.955 516.346 mo
745.955 516.346 li
745.955 509.346 li
744.955 509.346 li
744.955 516.346 li
clp
745.455 515.846 mo
745.455 509.846 li
f
1 lw
0 lc
745.455 515.846 mo
745.455 509.846 li
@
grestore
gsave
754.793 516.093 mo
755.793 516.093 li
755.793 509.093 li
754.793 509.093 li
754.793 516.093 li
clp
755.293 515.593 mo
755.293 509.593 li
f
1 lw
0 lc
755.293 515.593 mo
755.293 509.593 li
@
grestore
gsave
764.631 516.369 mo
765.631 516.369 li
765.631 509.369 li
764.631 509.369 li
764.631 516.369 li
clp
765.131 515.869 mo
765.131 509.869 li
f
1 lw
0 lc
765.131 515.869 mo
765.131 509.869 li
@
grestore
gsave
774.469 515.965 mo
775.469 515.965 li
775.469 508.964 li
774.469 508.964 li
774.469 515.965 li
clp
774.969 515.464 mo
774.969 509.464 li
f
1 lw
0 lc
774.969 515.464 mo
774.969 509.464 li
@
grestore
gsave
784.307 514.48 mo
785.307 514.48 li
785.307 507.48 li
784.307 507.48 li
784.307 514.48 li
clp
784.807 513.98 mo
784.807 507.98 li
f
1 lw
0 lc
784.807 513.98 mo
784.807 507.98 li
@
grestore
gsave
794.145 515.797 mo
795.145 515.797 li
795.145 508.797 li
794.145 508.797 li
794.145 515.797 li
clp
794.645 515.297 mo
794.645 509.297 li
f
1 lw
0 lc
794.645 515.297 mo
794.645 509.297 li
@
grestore
gsave
803.983 515.561 mo
804.983 515.561 li
804.983 508.561 li
803.983 508.561 li
803.983 515.561 li
clp
804.483 515.061 mo
804.483 509.061 li
f
1 lw
0 lc
804.483 515.061 mo
804.483 509.061 li
@
grestore
gsave
813.821 515.949 mo
814.821 515.949 li
814.821 508.949 li
813.821 508.949 li
813.821 515.949 li
clp
814.321 515.449 mo
814.321 509.449 li
f
1 lw
0 lc
814.321 515.449 mo
814.321 509.449 li
@
grestore
gsave
823.659 516.334 mo
824.659 516.334 li
824.659 509.334 li
823.659 509.334 li
823.659 516.334 li
clp
824.159 515.834 mo
824.159 509.834 li
f
1 lw
0 lc
824.159 515.834 mo
824.159 509.834 li
@
grestore
gsave
833.497 516.881 mo
834.497 516.881 li
834.497 509.881 li
833.497 509.881 li
833.497 516.881 li
clp
833.997 516.381 mo
833.997 510.381 li
f
1 lw
0 lc
833.997 516.381 mo
833.997 510.381 li
@
grestore
gsave
843.335 516.182 mo
844.335 516.182 li
844.335 509.182 li
843.335 509.182 li
843.335 516.182 li
clp
843.835 515.682 mo
843.835 509.682 li
f
1 lw
0 lc
843.835 515.682 mo
843.835 509.682 li
@
grestore
gsave
853.173 517.369 mo
854.173 517.369 li
854.173 510.369 li
853.173 510.369 li
853.173 517.369 li
clp
853.673 516.869 mo
853.673 510.869 li
f
1 lw
0 lc
853.673 516.869 mo
853.673 510.869 li
@
grestore
gsave
863.011 516.231 mo
864.011 516.231 li
864.011 509.231 li
863.011 509.231 li
863.011 516.231 li
clp
863.511 515.731 mo
863.511 509.731 li
f
1 lw
0 lc
863.511 515.731 mo
863.511 509.731 li
@
grestore
gsave
872.849 516.095 mo
873.849 516.095 li
873.849 509.095 li
872.849 509.095 li
872.849 516.095 li
clp
873.349 515.595 mo
873.349 509.595 li
f
1 lw
0 lc
873.349 515.595 mo
873.349 509.595 li
@
grestore
gsave
882.687 516.697 mo
883.687 516.697 li
883.687 509.696 li
882.687 509.696 li
882.687 516.697 li
clp
883.187 516.196 mo
883.187 510.196 li
f
1 lw
0 lc
883.187 516.196 mo
883.187 510.196 li
@
grestore
gsave
892.525 516.731 mo
893.525 516.731 li
893.525 509.731 li
892.525 509.731 li
892.525 516.731 li
clp
893.025 516.231 mo
893.025 510.231 li
f
1 lw
0 lc
893.025 516.231 mo
893.025 510.231 li
@
grestore
gsave
902.363 516.924 mo
903.363 516.924 li
903.363 509.924 li
902.363 509.924 li
902.363 516.924 li
clp
902.863 516.424 mo
902.863 510.424 li
f
1 lw
0 lc
902.863 516.424 mo
902.863 510.424 li
@
grestore
gsave
912.201 517.559 mo
913.201 517.559 li
913.201 510.559 li
912.201 510.559 li
912.201 517.559 li
clp
912.701 517.059 mo
912.701 511.059 li
f
1 lw
0 lc
912.701 517.059 mo
912.701 511.059 li
@
grestore
gsave
922.039 516.927 mo
923.039 516.927 li
923.039 509.927 li
922.039 509.927 li
922.039 516.927 li
clp
922.539 516.427 mo
922.539 510.427 li
f
1 lw
0 lc
922.539 516.427 mo
922.539 510.427 li
@
grestore
gsave
931.877 516.38 mo
932.877 516.38 li
932.877 509.38 li
931.877 509.38 li
931.877 516.38 li
clp
932.377 515.879 mo
932.377 509.879 li
f
1 lw
0 lc
932.377 515.879 mo
932.377 509.879 li
@
grestore
gsave
941.715 517.149 mo
942.715 517.149 li
942.715 510.149 li
941.715 510.149 li
941.715 517.149 li
clp
942.215 516.649 mo
942.215 510.649 li
f
1 lw
0 lc
942.215 516.649 mo
942.215 510.649 li
@
grestore
gsave
951.553 515.94 mo
952.553 515.94 li
952.553 508.94 li
951.553 508.94 li
951.553 515.94 li
clp
952.053 515.44 mo
952.053 509.44 li
f
1 lw
0 lc
952.053 515.44 mo
952.053 509.44 li
@
grestore
gsave
961.391 517.134 mo
962.391 517.134 li
962.391 510.134 li
961.391 510.134 li
961.391 517.134 li
clp
961.891 516.634 mo
961.891 510.634 li
f
1 lw
0 lc
961.891 516.634 mo
961.891 510.634 li
@
grestore
gsave
971.229 517.18 mo
972.229 517.18 li
972.229 510.18 li
971.229 510.18 li
971.229 517.18 li
clp
971.729 516.68 mo
971.729 510.68 li
f
1 lw
0 lc
971.729 516.68 mo
971.729 510.68 li
@
grestore
gsave
981.067 516.583 mo
982.067 516.583 li
982.067 509.583 li
981.067 509.583 li
981.067 516.583 li
clp
981.567 516.083 mo
981.567 510.083 li
f
1 lw
0 lc
981.567 516.083 mo
981.567 510.083 li
@
grestore
gsave
990.905 516.61 mo
991.906 516.61 li
991.906 509.61 li
990.905 509.61 li
990.905 516.61 li
clp
991.405 516.11 mo
991.405 510.11 li
f
1 lw
0 lc
991.405 516.11 mo
991.405 510.11 li
@
grestore
gsave
1000.74 516.646 mo
1001.74 516.646 li
1001.74 509.646 li
1000.74 509.646 li
1000.74 516.646 li
clp
1001.24 516.146 mo
1001.24 510.146 li
f
1 lw
0 lc
1001.24 516.146 mo
1001.24 510.146 li
@
grestore
gsave
1010.58 516.752 mo
1011.58 516.752 li
1011.58 509.752 li
1010.58 509.752 li
1010.58 516.752 li
clp
1011.08 516.252 mo
1011.08 510.252 li
f
1 lw
0 lc
1011.08 516.252 mo
1011.08 510.252 li
@
grestore
gsave
1020.42 516.879 mo
1021.42 516.879 li
1021.42 509.879 li
1020.42 509.879 li
1020.42 516.879 li
clp
1020.92 516.379 mo
1020.92 510.379 li
f
1 lw
0 lc
1020.92 516.379 mo
1020.92 510.379 li
@
grestore
gsave
1030.26 516.925 mo
1031.26 516.925 li
1031.26 509.925 li
1030.26 509.925 li
1030.26 516.925 li
clp
1030.76 516.425 mo
1030.76 510.425 li
f
1 lw
0 lc
1030.76 516.425 mo
1030.76 510.425 li
@
grestore
gsave
1040.1 517.517 mo
1041.1 517.517 li
1041.1 510.517 li
1040.1 510.517 li
1040.1 517.517 li
clp
1040.6 517.017 mo
1040.6 511.017 li
f
1 lw
0 lc
1040.6 517.017 mo
1040.6 511.017 li
@
grestore
gsave
1049.93 516.761 mo
1050.93 516.761 li
1050.93 509.761 li
1049.93 509.761 li
1049.93 516.761 li
clp
1050.43 516.261 mo
1050.43 510.261 li
f
1 lw
0 lc
1050.43 516.261 mo
1050.43 510.261 li
@
grestore
gsave
1059.77 517.559 mo
1060.77 517.559 li
1060.77 510.559 li
1059.77 510.559 li
1059.77 517.559 li
clp
1060.27 517.059 mo
1060.27 511.059 li
f
1 lw
0 lc
1060.27 517.059 mo
1060.27 511.059 li
@
grestore
gsave
1069.61 516.208 mo
1070.61 516.208 li
1070.61 509.208 li
1069.61 509.208 li
1069.61 516.208 li
clp
1070.11 515.708 mo
1070.11 509.708 li
f
1 lw
0 lc
1070.11 515.708 mo
1070.11 509.708 li
@
grestore
gsave
1079.45 517.144 mo
1080.45 517.144 li
1080.45 510.144 li
1079.45 510.144 li
1079.45 517.144 li
clp
1079.95 516.644 mo
1079.95 510.644 li
f
1 lw
0 lc
1079.95 516.644 mo
1079.95 510.644 li
@
grestore
gsave
1089.29 517.135 mo
1090.29 517.135 li
1090.29 510.135 li
1089.29 510.135 li
1089.29 517.135 li
clp
1089.79 516.635 mo
1089.79 510.635 li
f
1 lw
0 lc
1089.79 516.635 mo
1089.79 510.635 li
@
grestore
gsave
1099.12 517.484 mo
1100.12 517.484 li
1100.12 510.484 li
1099.12 510.484 li
1099.12 517.484 li
clp
1099.62 516.984 mo
1099.62 510.984 li
f
1 lw
0 lc
1099.62 516.984 mo
1099.62 510.984 li
@
grestore
gsave
1108.96 516.397 mo
1109.96 516.397 li
1109.96 509.397 li
1108.96 509.397 li
1108.96 516.397 li
clp
1109.46 515.897 mo
1109.46 509.897 li
f
1 lw
0 lc
1109.46 515.897 mo
1109.46 509.897 li
@
grestore
.8 lw
0 lj
86.8 541.935 mo
86.8 4.72162 li
@
1158.16 541.935 mo
1158.16 4.72162 li
@
86.8 541.935 mo
1158.16 541.935 li
@
86.8 4.72162 mo
1158.16 4.72162 li
@
1151.16 158.378 mo
970.129 158.378 li
969.539 158.376 969.191 158.234 968.982 158.024 cv
968.773 157.815 968.631 157.468 968.629 156.878 cv
968.629 11.7217 li
968.631 11.1317 968.773 10.7842 968.982 10.5752 cv
969.191 10.3658 969.539 10.2236 970.129 10.2215 cv
1151.16 10.2215 li
1151.75 10.2236 1152.1 10.3658 1152.31 10.5752 cv
1152.52 10.7842 1152.66 11.1317 1152.66 11.7217 cv
1152.66 156.878 li
1152.66 157.468 1152.52 157.815 1152.31 158.024 cv
1152.1 158.234 1151.75 158.376 1151.16 158.378 cv
0 0 0 0 cmyk
f
1151.17 159.378 mo
1151.17 159.378 1151.16 159.378 1151.16 159.378 cv
970.129 159.378 li
970.125 159.378 970.122 159.378 970.119 159.378 cv
969.38 159.378 968.731 159.186 968.275 158.731 cv
967.818 158.274 967.627 157.621 967.629 156.878 cv
967.629 11.7217 li
967.627 10.978 967.818 10.3257 968.275 9.86817 cv
968.73 9.41347 969.378 9.22169 970.117 9.22169 cv
970.121 9.22169 970.125 9.2217 970.129 9.22171 cv
1151.16 9.22171 li
1151.16 9.2217 1151.17 9.22169 1151.17 9.22169 cv
1151.91 9.22169 1152.56 9.41344 1153.01 9.86817 cv
1153.47 10.3257 1153.66 10.978 1153.66 11.7217 cv
1153.66 156.878 li
1153.66 157.621 1153.47 158.274 1153.01 158.731 cv
1152.56 159.186 1151.91 159.378 1151.17 159.378 cv
970.129 158.378 mo
1151.16 158.378 li
1151.75 158.376 1152.1 158.234 1152.31 158.024 cv
1152.52 157.815 1152.66 157.468 1152.66 156.878 cv
1152.66 11.7217 li
1152.66 11.1317 1152.52 10.7842 1152.31 10.5752 cv
1152.1 10.3658 1151.75 10.2236 1151.16 10.2215 cv
970.129 10.2215 li
969.539 10.2236 969.191 10.3658 968.982 10.5752 cv
968.773 10.7842 968.631 11.1317 968.629 11.7217 cv
968.629 156.878 li
968.631 157.468 968.773 157.815 968.982 158.024 cv
969.191 158.234 969.539 158.376 970.129 158.378 cv
970.129 158.378 li
.19855 .149172 .144198 0 cmyk
f
1.5 lw
1 lj
972.129 25.4247 mo
992.129 25.4247 li
0 1 1 0 cmyk
@
1004.07 15.9647 mo
1004.07 27.3047 li
1006.45 27.3047 li
1008.45 27.3047 1009.93 26.8647 1010.87 25.9447 cv
1011.79 25.0247 1012.27 23.5847 1012.27 21.6247 cv
1012.27 19.6647 1011.79 18.2447 1010.87 17.3247 cv
1009.93 16.4247 1008.45 15.9647 1006.45 15.9647 cv
1004.07 15.9647 li
1002.09 14.3447 mo
1006.15 14.3447 li
1008.97 14.3447 1011.05 14.9447 1012.37 16.1047 cv
1013.69 17.2847 1014.35 19.1247 1014.35 21.6247 cv
1014.35 24.1447 1013.67 25.9847 1012.35 27.1647 cv
1011.03 28.3447 1008.95 28.9247 1006.15 28.9247 cv
1002.09 28.9247 li
1002.09 14.3447 li
1 /0 /CSD get_res sepcs
1 sep
f
1019.47 21.9647 mo
1019.47 27.3047 li
1022.63 27.3047 li
1023.69 27.3047 1024.47 27.0847 1024.99 26.6447 cv
1025.49 26.2047 1025.75 25.5447 1025.75 24.6247 cv
1025.75 23.7247 1025.49 23.0647 1024.99 22.6247 cv
1024.47 22.1847 1023.69 21.9647 1022.63 21.9647 cv
1019.47 21.9647 li
1019.47 15.9647 mo
1019.47 20.3647 li
1022.39 20.3647 li
1023.35 20.3647 1024.05 20.1847 1024.53 19.8247 cv
1025.01 19.4647 1025.25 18.9247 1025.25 18.1647 cv
1025.25 17.4447 1025.01 16.8847 1024.53 16.5247 cv
1024.05 16.1647 1023.35 15.9647 1022.39 15.9647 cv
1019.47 15.9647 li
1017.49 14.3447 mo
1022.53 14.3447 li
1024.03 14.3447 1025.19 14.6647 1026.01 15.2847 cv
1026.81 15.9247 1027.23 16.8047 1027.23 17.9447 cv
1027.23 18.8447 1027.01 19.5647 1026.59 20.0847 cv
1026.17 20.6047 1025.57 20.9447 1024.77 21.0647 cv
1025.73 21.2847 1026.49 21.7247 1027.03 22.3847 cv
1027.55 23.0447 1027.83 23.8647 1027.83 24.8447 cv
1027.83 26.1647 1027.37 27.1647 1026.49 27.8647 cv
1025.61 28.5847 1024.35 28.9247 1022.73 28.9247 cv
1017.49 28.9247 li
1017.49 14.3447 li
f
1031.21 14.3447 mo
1033.87 14.3447 li
1040.33 26.5447 li
1040.33 14.3447 li
1042.25 14.3447 li
1042.25 28.9247 li
1039.59 28.9247 li
1033.13 16.7247 li
1033.13 28.9247 li
1031.21 28.9247 li
1031.21 14.3447 li
f
1056.77 13.7447 mo
1055.89 15.2647 1055.25 16.7447 1054.83 18.2047 cv
1054.39 19.6647 1054.19 21.1447 1054.19 22.6447 cv
1054.19 24.1647 1054.39 25.6447 1054.83 27.1047 cv
1055.25 28.5847 1055.89 30.0447 1056.77 31.5447 cv
1055.21 31.5447 li
1054.23 30.0047 1053.49 28.5247 1053.01 27.0447 cv
1052.53 25.5647 1052.29 24.1047 1052.29 22.6447 cv
1052.29 21.2047 1052.53 19.7447 1053.01 18.2647 cv
1053.49 16.7847 1054.21 15.2847 1055.21 13.7447 cv
1056.77 13.7447 li
f
1067.25 22.0847 mo
1067.67 22.2447 1068.09 22.5447 1068.49 23.0047 cv
1068.89 23.4847 1069.29 24.1247 1069.69 24.9447 cv
1071.69 28.9247 li
1069.57 28.9247 li
1067.71 25.1847 li
1067.23 24.2247 1066.75 23.5647 1066.31 23.2447 cv
1065.85 22.9247 1065.23 22.7647 1064.45 22.7647 cv
1062.31 22.7647 li
1062.31 28.9247 li
1060.33 28.9247 li
1060.33 14.3447 li
1064.79 14.3447 li
1066.45 14.3447 1067.69 14.7047 1068.51 15.3847 cv
1069.33 16.0847 1069.75 17.1447 1069.75 18.5447 cv
1069.75 19.4647 1069.53 20.2447 1069.11 20.8447 cv
1068.67 21.4447 1068.05 21.8647 1067.25 22.0847 cv
1062.31 15.9647 mo
1062.31 21.1447 li
1064.79 21.1447 li
1065.73 21.1447 1066.45 20.9247 1066.93 20.4847 cv
1067.41 20.0447 1067.67 19.4047 1067.67 18.5447 cv
1067.67 17.7047 1067.41 17.0647 1066.93 16.6247 cv
1066.45 16.1847 1065.73 15.9647 1064.79 15.9647 cv
1062.31 15.9647 li
f
1076.21 21.9647 mo
1076.21 27.3047 li
1079.37 27.3047 li
1080.43 27.3047 1081.21 27.0847 1081.73 26.6447 cv
1082.23 26.2047 1082.49 25.5447 1082.49 24.6247 cv
1082.49 23.7247 1082.23 23.0647 1081.73 22.6247 cv
1081.21 22.1847 1080.43 21.9647 1079.37 21.9647 cv
1076.21 21.9647 li
1076.21 15.9647 mo
1076.21 20.3647 li
1079.13 20.3647 li
1080.09 20.3647 1080.79 20.1847 1081.27 19.8247 cv
1081.75 19.4647 1081.99 18.9247 1081.99 18.1647 cv
1081.99 17.4447 1081.75 16.8847 1081.27 16.5247 cv
1080.79 16.1647 1080.09 15.9647 1079.13 15.9647 cv
1076.21 15.9647 li
1074.23 14.3447 mo
1079.27 14.3447 li
1080.77 14.3447 1081.93 14.6647 1082.75 15.2847 cv
1083.55 15.9247 1083.97 16.8047 1083.97 17.9447 cv
1083.97 18.8447 1083.75 19.5647 1083.33 20.0847 cv
1082.91 20.6047 1082.31 20.9447 1081.51 21.0647 cv
1082.47 21.2847 1083.23 21.7247 1083.77 22.3847 cv
1084.29 23.0447 1084.57 23.8647 1084.57 24.8447 cv
1084.57 26.1647 1084.11 27.1647 1083.23 27.8647 cv
1082.35 28.5847 1081.09 28.9247 1079.47 28.9247 cv
1074.23 28.9247 li
1074.23 14.3447 li
f
1087.95 14.3447 mo
1090.89 14.3447 li
1094.61 24.2647 li
1098.35 14.3447 li
1101.29 14.3447 li
1101.29 28.9247 li
1099.37 28.9247 li
1099.37 16.1247 li
1095.61 26.1247 li
1093.63 26.1247 li
1089.87 16.1247 li
1089.87 28.9247 li
1087.95 28.9247 li
1087.95 14.3447 li
f
1109.61 15.6447 mo
1108.59 15.6447 1107.83 16.1447 1107.31 17.1447 cv
1106.79 18.1447 1106.55 19.6447 1106.55 21.6447 cv
1106.55 23.6447 1106.79 25.1447 1107.31 26.1447 cv
1107.83 27.1447 1108.59 27.6447 1109.61 27.6447 cv
1110.63 27.6447 1111.39 27.1447 1111.91 26.1447 cv
1112.41 25.1447 1112.67 23.6447 1112.67 21.6447 cv
1112.67 19.6447 1112.41 18.1447 1111.91 17.1447 cv
1111.39 16.1447 1110.63 15.6447 1109.61 15.6447 cv
1109.61 14.0847 mo
1111.23 14.0847 1112.47 14.7447 1113.35 16.0247 cv
1114.21 17.3247 1114.65 19.2047 1114.65 21.6447 cv
1114.65 24.1047 1114.21 25.9847 1113.35 27.2647 cv
1112.47 28.5447 1111.23 29.1847 1109.61 29.1847 cv
1107.97 29.1847 1106.71 28.5447 1105.85 27.2647 cv
1104.99 25.9847 1104.57 24.1047 1104.57 21.6447 cv
1104.57 19.2047 1104.99 17.3247 1105.85 16.0247 cv
1106.71 14.7447 1107.97 14.0847 1109.61 14.0847 cv
f
1117.57 13.7447 mo
1119.13 13.7447 li
1120.09 15.2847 1120.83 16.7847 1121.31 18.2647 cv
1121.79 19.7447 1122.05 21.2047 1122.05 22.6447 cv
1122.05 24.1047 1121.79 25.5647 1121.31 27.0447 cv
1120.83 28.5247 1120.09 30.0047 1119.13 31.5447 cv
1117.57 31.5447 li
1118.43 30.0447 1119.07 28.5847 1119.51 27.1047 cv
1119.93 25.6447 1120.15 24.1647 1120.15 22.6447 cv
1120.15 21.1447 1119.93 19.6647 1119.51 18.2047 cv
1119.07 16.7447 1118.43 15.2647 1117.57 13.7447 cv
f
972.129 49.7841 mo
992.129 49.7841 li
0 1 1 0 cmyk
@
979.129 52.7841 mo
985.129 46.7841 li
979.129 46.7841 mo
985.129 52.7841 li
f
1 lw
0 lc
979.129 52.7841 mo
985.129 46.7841 li
979.129 46.7841 mo
985.129 52.7841 li
@
1004.07 40.3241 mo
1004.07 51.6641 li
1006.45 51.6641 li
1008.45 51.6641 1009.93 51.2241 1010.87 50.3041 cv
1011.79 49.3841 1012.27 47.9441 1012.27 45.9841 cv
1012.27 44.0241 1011.79 42.6041 1010.87 41.6841 cv
1009.93 40.7841 1008.45 40.3241 1006.45 40.3241 cv
1004.07 40.3241 li
1002.09 38.7041 mo
1006.15 38.7041 li
1008.97 38.7041 1011.05 39.3041 1012.37 40.4641 cv
1013.69 41.6441 1014.35 43.4841 1014.35 45.9841 cv
1014.35 48.5041 1013.67 50.3441 1012.35 51.5241 cv
1011.03 52.7041 1008.95 53.2841 1006.15 53.2841 cv
1002.09 53.2841 li
1002.09 38.7041 li
1 /0 /CSD get_res sepcs
1 sep
f
1019.47 46.3241 mo
1019.47 51.6641 li
1022.63 51.6641 li
1023.69 51.6641 1024.47 51.4441 1024.99 51.0041 cv
1025.49 50.5641 1025.75 49.9041 1025.75 48.9841 cv
1025.75 48.0841 1025.49 47.4241 1024.99 46.9841 cv
1024.47 46.5441 1023.69 46.3241 1022.63 46.3241 cv
1019.47 46.3241 li
1019.47 40.3241 mo
1019.47 44.7241 li
1022.39 44.7241 li
1023.35 44.7241 1024.05 44.5441 1024.53 44.1841 cv
1025.01 43.8241 1025.25 43.2841 1025.25 42.5241 cv
1025.25 41.8041 1025.01 41.2441 1024.53 40.8841 cv
1024.05 40.5241 1023.35 40.3241 1022.39 40.3241 cv
1019.47 40.3241 li
1017.49 38.7041 mo
1022.53 38.7041 li
1024.03 38.7041 1025.19 39.0241 1026.01 39.6441 cv
1026.81 40.2841 1027.23 41.1641 1027.23 42.3041 cv
1027.23 43.2041 1027.01 43.9241 1026.59 44.4441 cv
1026.17 44.9641 1025.57 45.3041 1024.77 45.4241 cv
1025.73 45.6441 1026.49 46.0841 1027.03 46.7441 cv
1027.55 47.4041 1027.83 48.2241 1027.83 49.2041 cv
1027.83 50.5241 1027.37 51.5241 1026.49 52.2241 cv
1025.61 52.9441 1024.35 53.2841 1022.73 53.2841 cv
1017.49 53.2841 li
1017.49 38.7041 li
f
1031.21 38.7041 mo
1033.87 38.7041 li
1040.33 50.9041 li
1040.33 38.7041 li
1042.25 38.7041 li
1042.25 53.2841 li
1039.59 53.2841 li
1033.13 41.0841 li
1033.13 53.2841 li
1031.21 53.2841 li
1031.21 38.7041 li
f
1056.77 38.1041 mo
1055.89 39.6241 1055.25 41.1041 1054.83 42.5641 cv
1054.39 44.0241 1054.19 45.5041 1054.19 47.0041 cv
1054.19 48.5241 1054.39 50.0041 1054.83 51.4641 cv
1055.25 52.9441 1055.89 54.4041 1056.77 55.9041 cv
1055.21 55.9041 li
1054.23 54.3641 1053.49 52.8841 1053.01 51.4041 cv
1052.53 49.9241 1052.29 48.4641 1052.29 47.0041 cv
1052.29 45.5641 1052.53 44.1041 1053.01 42.6241 cv
1053.49 41.1441 1054.21 39.6441 1055.21 38.1041 cv
1056.77 38.1041 li
f
1067.25 46.4441 mo
1067.67 46.6041 1068.09 46.9041 1068.49 47.3641 cv
1068.89 47.8441 1069.29 48.4841 1069.69 49.3041 cv
1071.69 53.2841 li
1069.57 53.2841 li
1067.71 49.5441 li
1067.23 48.5841 1066.75 47.9241 1066.31 47.6041 cv
1065.85 47.2841 1065.23 47.1241 1064.45 47.1241 cv
1062.31 47.1241 li
1062.31 53.2841 li
1060.33 53.2841 li
1060.33 38.7041 li
1064.79 38.7041 li
1066.45 38.7041 1067.69 39.0641 1068.51 39.7441 cv
1069.33 40.4441 1069.75 41.5041 1069.75 42.9041 cv
1069.75 43.8241 1069.53 44.6041 1069.11 45.2041 cv
1068.67 45.8041 1068.05 46.2241 1067.25 46.4441 cv
1062.31 40.3241 mo
1062.31 45.5041 li
1064.79 45.5041 li
1065.73 45.5041 1066.45 45.2841 1066.93 44.8441 cv
1067.41 44.4041 1067.67 43.7641 1067.67 42.9041 cv
1067.67 42.0641 1067.41 41.4241 1066.93 40.9841 cv
1066.45 40.5441 1065.73 40.3241 1064.79 40.3241 cv
1062.31 40.3241 li
f
1076.21 46.3241 mo
1076.21 51.6641 li
1079.37 51.6641 li
1080.43 51.6641 1081.21 51.4441 1081.73 51.0041 cv
1082.23 50.5641 1082.49 49.9041 1082.49 48.9841 cv
1082.49 48.0841 1082.23 47.4241 1081.73 46.9841 cv
1081.21 46.5441 1080.43 46.3241 1079.37 46.3241 cv
1076.21 46.3241 li
1076.21 40.3241 mo
1076.21 44.7241 li
1079.13 44.7241 li
1080.09 44.7241 1080.79 44.5441 1081.27 44.1841 cv
1081.75 43.8241 1081.99 43.2841 1081.99 42.5241 cv
1081.99 41.8041 1081.75 41.2441 1081.27 40.8841 cv
1080.79 40.5241 1080.09 40.3241 1079.13 40.3241 cv
1076.21 40.3241 li
1074.23 38.7041 mo
1079.27 38.7041 li
1080.77 38.7041 1081.93 39.0241 1082.75 39.6441 cv
1083.55 40.2841 1083.97 41.1641 1083.97 42.3041 cv
1083.97 43.2041 1083.75 43.9241 1083.33 44.4441 cv
1082.91 44.9641 1082.31 45.3041 1081.51 45.4241 cv
1082.47 45.6441 1083.23 46.0841 1083.77 46.7441 cv
1084.29 47.4041 1084.57 48.2241 1084.57 49.2041 cv
1084.57 50.5241 1084.11 51.5241 1083.23 52.2241 cv
1082.35 52.9441 1081.09 53.2841 1079.47 53.2841 cv
1074.23 53.2841 li
1074.23 38.7041 li
f
1087.95 38.7041 mo
1090.89 38.7041 li
1094.61 48.6241 li
1098.35 38.7041 li
1101.29 38.7041 li
1101.29 53.2841 li
1099.37 53.2841 li
1099.37 40.4841 li
1095.61 50.4841 li
1093.63 50.4841 li
1089.87 40.4841 li
1089.87 53.2841 li
1087.95 53.2841 li
1087.95 38.7041 li
f
1105.73 51.6241 mo
1108.95 51.6241 li
1108.95 40.5041 li
1105.45 41.2041 li
1105.45 39.4041 li
1108.93 38.7041 li
1110.91 38.7041 li
1110.91 51.6241 li
1114.13 51.6241 li
1114.13 53.2841 li
1105.73 53.2841 li
1105.73 51.6241 li
f
1117.57 38.1041 mo
1119.13 38.1041 li
1120.09 39.6441 1120.83 41.1441 1121.31 42.6241 cv
1121.79 44.1041 1122.05 45.5641 1122.05 47.0041 cv
1122.05 48.4641 1121.79 49.9241 1121.31 51.4041 cv
1120.83 52.8841 1120.09 54.3641 1119.13 55.9041 cv
1117.57 55.9041 li
1118.43 54.4041 1119.07 52.9441 1119.51 51.4641 cv
1119.93 50.0041 1120.15 48.5241 1120.15 47.0041 cv
1120.15 45.5041 1119.93 44.0241 1119.51 42.5641 cv
1119.07 41.1041 1118.43 39.6241 1117.57 38.1041 cv
f
1.5 lw
2 lc
972.129 74.1435 mo
992.129 74.1435 li
0 1 1 0 cmyk
@
982.129 77.1435 mo
982.129 71.1435 li
f
1 lw
0 lc
982.129 77.1435 mo
982.129 71.1435 li
@
1004.07 64.6835 mo
1004.07 76.0235 li
1006.45 76.0235 li
1008.45 76.0235 1009.93 75.5835 1010.87 74.6635 cv
1011.79 73.7435 1012.27 72.3035 1012.27 70.3435 cv
1012.27 68.3835 1011.79 66.9635 1010.87 66.0435 cv
1009.93 65.1435 1008.45 64.6835 1006.45 64.6835 cv
1004.07 64.6835 li
1002.09 63.0635 mo
1006.15 63.0635 li
1008.97 63.0635 1011.05 63.6635 1012.37 64.8235 cv
1013.69 66.0035 1014.35 67.8435 1014.35 70.3435 cv
1014.35 72.8635 1013.67 74.7035 1012.35 75.8835 cv
1011.03 77.0635 1008.95 77.6435 1006.15 77.6435 cv
1002.09 77.6435 li
1002.09 63.0635 li
1 /0 /CSD get_res sepcs
1 sep
f
1019.47 70.6835 mo
1019.47 76.0235 li
1022.63 76.0235 li
1023.69 76.0235 1024.47 75.8035 1024.99 75.3635 cv
1025.49 74.9235 1025.75 74.2635 1025.75 73.3435 cv
1025.75 72.4435 1025.49 71.7835 1024.99 71.3435 cv
1024.47 70.9035 1023.69 70.6835 1022.63 70.6835 cv
1019.47 70.6835 li
1019.47 64.6835 mo
1019.47 69.0835 li
1022.39 69.0835 li
1023.35 69.0835 1024.05 68.9035 1024.53 68.5435 cv
1025.01 68.1835 1025.25 67.6435 1025.25 66.8835 cv
1025.25 66.1635 1025.01 65.6035 1024.53 65.2435 cv
1024.05 64.8835 1023.35 64.6835 1022.39 64.6835 cv
1019.47 64.6835 li
1017.49 63.0635 mo
1022.53 63.0635 li
1024.03 63.0635 1025.19 63.3835 1026.01 64.0035 cv
1026.81 64.6435 1027.23 65.5235 1027.23 66.6635 cv
1027.23 67.5635 1027.01 68.2835 1026.59 68.8035 cv
1026.17 69.3235 1025.57 69.6635 1024.77 69.7835 cv
1025.73 70.0035 1026.49 70.4435 1027.03 71.1035 cv
1027.55 71.7635 1027.83 72.5835 1027.83 73.5635 cv
1027.83 74.8835 1027.37 75.8835 1026.49 76.5835 cv
1025.61 77.3035 1024.35 77.6435 1022.73 77.6435 cv
1017.49 77.6435 li
1017.49 63.0635 li
f
1031.21 63.0635 mo
1033.87 63.0635 li
1040.33 75.2635 li
1040.33 63.0635 li
1042.25 63.0635 li
1042.25 77.6435 li
1039.59 77.6435 li
1033.13 65.4435 li
1033.13 77.6435 li
1031.21 77.6435 li
1031.21 63.0635 li
f
1056.77 62.4635 mo
1055.89 63.9835 1055.25 65.4635 1054.83 66.9235 cv
1054.39 68.3835 1054.19 69.8635 1054.19 71.3635 cv
1054.19 72.8835 1054.39 74.3635 1054.83 75.8235 cv
1055.25 77.3035 1055.89 78.7635 1056.77 80.2635 cv
1055.21 80.2635 li
1054.23 78.7235 1053.49 77.2435 1053.01 75.7635 cv
1052.53 74.2835 1052.29 72.8235 1052.29 71.3635 cv
1052.29 69.9235 1052.53 68.4635 1053.01 66.9835 cv
1053.49 65.5035 1054.21 64.0035 1055.21 62.4635 cv
1056.77 62.4635 li
f
1067.25 70.8035 mo
1067.67 70.9635 1068.09 71.2635 1068.49 71.7235 cv
1068.89 72.2035 1069.29 72.8435 1069.69 73.6635 cv
1071.69 77.6435 li
1069.57 77.6435 li
1067.71 73.9035 li
1067.23 72.9435 1066.75 72.2835 1066.31 71.9635 cv
1065.85 71.6435 1065.23 71.4835 1064.45 71.4835 cv
1062.31 71.4835 li
1062.31 77.6435 li
1060.33 77.6435 li
1060.33 63.0635 li
1064.79 63.0635 li
1066.45 63.0635 1067.69 63.4235 1068.51 64.1035 cv
1069.33 64.8035 1069.75 65.8635 1069.75 67.2635 cv
1069.75 68.1835 1069.53 68.9635 1069.11 69.5635 cv
1068.67 70.1635 1068.05 70.5835 1067.25 70.8035 cv
1062.31 64.6835 mo
1062.31 69.8635 li
1064.79 69.8635 li
1065.73 69.8635 1066.45 69.6435 1066.93 69.2035 cv
1067.41 68.7635 1067.67 68.1235 1067.67 67.2635 cv
1067.67 66.4235 1067.41 65.7835 1066.93 65.3435 cv
1066.45 64.9035 1065.73 64.6835 1064.79 64.6835 cv
1062.31 64.6835 li
f
1076.21 70.6835 mo
1076.21 76.0235 li
1079.37 76.0235 li
1080.43 76.0235 1081.21 75.8035 1081.73 75.3635 cv
1082.23 74.9235 1082.49 74.2635 1082.49 73.3435 cv
1082.49 72.4435 1082.23 71.7835 1081.73 71.3435 cv
1081.21 70.9035 1080.43 70.6835 1079.37 70.6835 cv
1076.21 70.6835 li
1076.21 64.6835 mo
1076.21 69.0835 li
1079.13 69.0835 li
1080.09 69.0835 1080.79 68.9035 1081.27 68.5435 cv
1081.75 68.1835 1081.99 67.6435 1081.99 66.8835 cv
1081.99 66.1635 1081.75 65.6035 1081.27 65.2435 cv
1080.79 64.8835 1080.09 64.6835 1079.13 64.6835 cv
1076.21 64.6835 li
1074.23 63.0635 mo
1079.27 63.0635 li
1080.77 63.0635 1081.93 63.3835 1082.75 64.0035 cv
1083.55 64.6435 1083.97 65.5235 1083.97 66.6635 cv
1083.97 67.5635 1083.75 68.2835 1083.33 68.8035 cv
1082.91 69.3235 1082.31 69.6635 1081.51 69.7835 cv
1082.47 70.0035 1083.23 70.4435 1083.77 71.1035 cv
1084.29 71.7635 1084.57 72.5835 1084.57 73.5635 cv
1084.57 74.8835 1084.11 75.8835 1083.23 76.5835 cv
1082.35 77.3035 1081.09 77.6435 1079.47 77.6435 cv
1074.23 77.6435 li
1074.23 63.0635 li
f
1087.95 63.0635 mo
1090.89 63.0635 li
1094.61 72.9835 li
1098.35 63.0635 li
1101.29 63.0635 li
1101.29 77.6435 li
1099.37 77.6435 li
1099.37 64.8435 li
1095.61 74.8435 li
1093.63 74.8435 li
1089.87 64.8435 li
1089.87 77.6435 li
1087.95 77.6435 li
1087.95 63.0635 li
f
1107.09 75.9835 mo
1113.97 75.9835 li
1113.97 77.6435 li
1104.71 77.6435 li
1104.71 75.9835 li
1105.45 75.2235 1106.47 74.1835 1107.77 72.8635 cv
1109.05 71.5635 1109.87 70.7235 1110.21 70.3435 cv
1110.85 69.6435 1111.29 69.0435 1111.53 68.5435 cv
1111.77 68.0635 1111.91 67.5635 1111.91 67.0835 cv
1111.91 66.3235 1111.63 65.6835 1111.09 65.2035 cv
1110.55 64.7235 1109.85 64.4635 1108.97 64.4635 cv
1108.35 64.4635 1107.69 64.5835 1107.01 64.7835 cv
1106.33 65.0035 1105.59 65.3235 1104.81 65.7635 cv
1104.81 63.7635 li
1105.61 63.4435 1106.35 63.2035 1107.03 63.0435 cv
1107.71 62.8835 1108.35 62.8035 1108.93 62.8035 cv
1110.43 62.8035 1111.63 63.1835 1112.53 63.9435 cv
1113.43 64.7035 1113.89 65.7035 1113.89 66.9635 cv
1113.89 67.5635 1113.77 68.1435 1113.55 68.6635 cv
1113.33 69.2035 1112.93 69.8435 1112.33 70.5635 cv
1112.17 70.7635 1111.65 71.3035 1110.77 72.2035 cv
1109.89 73.1035 1108.67 74.3635 1107.09 75.9835 cv
f
1117.57 62.4635 mo
1119.13 62.4635 li
1120.09 64.0035 1120.83 65.5035 1121.31 66.9835 cv
1121.79 68.4635 1122.05 69.9235 1122.05 71.3635 cv
1122.05 72.8235 1121.79 74.2835 1121.31 75.7635 cv
1120.83 77.2435 1120.09 78.7235 1119.13 80.2635 cv
1117.57 80.2635 li
1118.43 78.7635 1119.07 77.3035 1119.51 75.8235 cv
1119.93 74.3635 1120.15 72.8835 1120.15 71.3635 cv
1120.15 69.8635 1119.93 68.3835 1119.51 66.9235 cv
1119.07 65.4635 1118.43 63.9835 1117.57 62.4635 cv
f
1.5 lw
2 lc
972.129 98.5029 mo
992.129 98.5029 li
@
1010.83 87.9029 mo
1010.83 89.8229 li
1010.07 89.4629 1009.37 89.2029 1008.71 89.0229 cv
1008.03 88.8629 1007.39 88.7629 1006.79 88.7629 cv
1005.71 88.7629 1004.87 88.9829 1004.29 89.3829 cv
1003.71 89.8029 1003.43 90.4029 1003.43 91.1629 cv
1003.43 91.8029 1003.61 92.3029 1004.01 92.6229 cv
1004.39 92.9629 1005.13 93.2229 1006.21 93.4229 cv
1007.41 93.6629 li
1008.87 93.9429 1009.95 94.4429 1010.65 95.1429 cv
1011.35 95.8629 1011.71 96.8029 1011.71 97.9829 cv
1011.71 99.4029 1011.23 100.463 1010.29 101.183 cv
1009.33 101.903 1007.95 102.263 1006.13 102.263 cv
1005.43 102.263 1004.69 102.183 1003.91 102.043 cv
1003.13 101.903 1002.33 101.683 1001.51 101.363 cv
1001.51 99.3229 li
1002.31 99.7829 1003.09 100.123 1003.85 100.343 cv
1004.61 100.583 1005.37 100.683 1006.13 100.683 cv
1007.25 100.683 1008.11 100.463 1008.73 100.023 cv
1009.33 99.5829 1009.65 98.9629 1009.65 98.1229 cv
1009.65 97.4029 1009.43 96.8429 1008.99 96.4429 cv
1008.55 96.0429 1007.83 95.7429 1006.83 95.5429 cv
1005.63 95.3029 li
1004.15 95.0229 1003.09 94.5629 1002.43 93.9229 cv
1001.77 93.3029 1001.45 92.4429 1001.45 91.3229 cv
1001.45 90.0429 1001.89 89.0229 1002.81 88.2829 cv
1003.71 87.5429 1004.97 87.1629 1006.57 87.1629 cv
1007.25 87.1629 1007.93 87.2229 1008.65 87.3429 cv
1009.35 87.4629 1010.07 87.6629 1010.83 87.9029 cv
f
1023.53 87.9029 mo
1023.53 89.8229 li
1022.77 89.4629 1022.07 89.2029 1021.41 89.0229 cv
1020.73 88.8629 1020.09 88.7629 1019.49 88.7629 cv
1018.41 88.7629 1017.57 88.9829 1016.99 89.3829 cv
1016.41 89.8029 1016.13 90.4029 1016.13 91.1629 cv
1016.13 91.8029 1016.31 92.3029 1016.71 92.6229 cv
1017.09 92.9629 1017.83 93.2229 1018.91 93.4229 cv
1020.11 93.6629 li
1021.57 93.9429 1022.65 94.4429 1023.35 95.1429 cv
1024.05 95.8629 1024.41 96.8029 1024.41 97.9829 cv
1024.41 99.4029 1023.93 100.463 1022.99 101.183 cv
1022.03 101.903 1020.65 102.263 1018.83 102.263 cv
1018.13 102.263 1017.39 102.183 1016.61 102.043 cv
1015.83 101.903 1015.03 101.683 1014.21 101.363 cv
1014.21 99.3229 li
1015.01 99.7829 1015.79 100.123 1016.55 100.343 cv
1017.31 100.583 1018.07 100.683 1018.83 100.683 cv
1019.95 100.683 1020.81 100.463 1021.43 100.023 cv
1022.03 99.5829 1022.35 98.9629 1022.35 98.1229 cv
1022.35 97.4029 1022.13 96.8429 1021.69 96.4429 cv
1021.25 96.0429 1020.53 95.7429 1019.53 95.5429 cv
1018.33 95.3029 li
1016.85 95.0229 1015.79 94.5629 1015.13 93.9229 cv
1014.47 93.3029 1014.15 92.4429 1014.15 91.3229 cv
1014.15 90.0429 1014.59 89.0229 1015.51 88.2829 cv
1016.41 87.5429 1017.67 87.1629 1019.27 87.1629 cv
1019.95 87.1629 1020.63 87.2229 1021.35 87.3429 cv
1022.05 87.4629 1022.77 87.6629 1023.53 87.9029 cv
f
1029.47 89.0429 mo
1029.47 100.383 li
1031.85 100.383 li
1033.85 100.383 1035.33 99.9429 1036.27 99.0229 cv
1037.19 98.1029 1037.67 96.6629 1037.67 94.7029 cv
1037.67 92.7429 1037.19 91.3229 1036.27 90.4029 cv
1035.33 89.5029 1033.85 89.0429 1031.85 89.0429 cv
1029.47 89.0429 li
1027.49 87.4229 mo
1031.55 87.4229 li
1034.37 87.4229 1036.45 88.0229 1037.77 89.1829 cv
1039.09 90.3629 1039.75 92.2029 1039.75 94.7029 cv
1039.75 97.2229 1039.07 99.0629 1037.75 100.243 cv
1036.43 101.423 1034.35 102.003 1031.55 102.003 cv
1027.49 102.003 li
1027.49 87.4229 li
f
1044.87 95.0429 mo
1044.87 100.383 li
1048.03 100.383 li
1049.09 100.383 1049.87 100.163 1050.39 99.7229 cv
1050.89 99.2829 1051.15 98.6229 1051.15 97.7029 cv
1051.15 96.8029 1050.89 96.1429 1050.39 95.7029 cv
1049.87 95.2629 1049.09 95.0429 1048.03 95.0429 cv
1044.87 95.0429 li
1044.87 89.0429 mo
1044.87 93.4429 li
1047.79 93.4429 li
1048.75 93.4429 1049.45 93.2629 1049.93 92.9029 cv
1050.41 92.5429 1050.65 92.0029 1050.65 91.2429 cv
1050.65 90.5229 1050.41 89.9629 1049.93 89.6029 cv
1049.45 89.2429 1048.75 89.0429 1047.79 89.0429 cv
1044.87 89.0429 li
1042.89 87.4229 mo
1047.93 87.4229 li
1049.43 87.4229 1050.59 87.7429 1051.41 88.3629 cv
1052.21 89.0029 1052.63 89.8829 1052.63 91.0229 cv
1052.63 91.9229 1052.41 92.6429 1051.99 93.1629 cv
1051.57 93.6829 1050.97 94.0229 1050.17 94.1429 cv
1051.13 94.3629 1051.89 94.8029 1052.43 95.4629 cv
1052.95 96.1229 1053.23 96.9429 1053.23 97.9229 cv
1053.23 99.2429 1052.77 100.243 1051.89 100.943 cv
1051.01 101.663 1049.75 102.003 1048.13 102.003 cv
1042.89 102.003 li
1042.89 87.4229 li
f
1056.61 87.4229 mo
1059.27 87.4229 li
1065.73 99.6229 li
1065.73 87.4229 li
1067.65 87.4229 li
1067.65 102.003 li
1064.99 102.003 li
1058.53 89.8029 li
1058.53 102.003 li
1056.61 102.003 li
1056.61 87.4229 li
f
1082.17 86.8229 mo
1081.29 88.3429 1080.65 89.8229 1080.23 91.2829 cv
1079.79 92.7429 1079.59 94.2229 1079.59 95.7229 cv
1079.59 97.2429 1079.79 98.7229 1080.23 100.183 cv
1080.65 101.663 1081.29 103.123 1082.17 104.623 cv
1080.61 104.623 li
1079.63 103.083 1078.89 101.603 1078.41 100.123 cv
1077.93 98.6429 1077.69 97.1829 1077.69 95.7229 cv
1077.69 94.2829 1077.93 92.8229 1078.41 91.3429 cv
1078.89 89.8629 1079.61 88.3629 1080.61 86.8229 cv
1082.17 86.8229 li
f
1092.65 95.1629 mo
1093.07 95.3229 1093.49 95.6229 1093.89 96.0829 cv
1094.29 96.5629 1094.69 97.2029 1095.09 98.0229 cv
1097.09 102.003 li
1094.97 102.003 li
1093.11 98.2629 li
1092.63 97.3029 1092.15 96.6429 1091.71 96.3229 cv
1091.25 96.0029 1090.63 95.8429 1089.85 95.8429 cv
1087.71 95.8429 li
1087.71 102.003 li
1085.73 102.003 li
1085.73 87.4229 li
1090.19 87.4229 li
1091.85 87.4229 1093.09 87.7829 1093.91 88.4629 cv
1094.73 89.1629 1095.15 90.2229 1095.15 91.6229 cv
1095.15 92.5429 1094.93 93.3229 1094.51 93.9229 cv
1094.07 94.5229 1093.45 94.9429 1092.65 95.1629 cv
1087.71 89.0429 mo
1087.71 94.2229 li
1090.19 94.2229 li
1091.13 94.2229 1091.85 94.0029 1092.33 93.5629 cv
1092.81 93.1229 1093.07 92.4829 1093.07 91.6229 cv
1093.07 90.7829 1092.81 90.1429 1092.33 89.7029 cv
1091.85 89.2629 1091.13 89.0429 1090.19 89.0429 cv
1087.71 89.0429 li
f
1101.61 95.0429 mo
1101.61 100.383 li
1104.77 100.383 li
1105.83 100.383 1106.61 100.163 1107.13 99.7229 cv
1107.63 99.2829 1107.89 98.6229 1107.89 97.7029 cv
1107.89 96.8029 1107.63 96.1429 1107.13 95.7029 cv
1106.61 95.2629 1105.83 95.0429 1104.77 95.0429 cv
1101.61 95.0429 li
1101.61 89.0429 mo
1101.61 93.4429 li
1104.53 93.4429 li
1105.49 93.4429 1106.19 93.2629 1106.67 92.9029 cv
1107.15 92.5429 1107.39 92.0029 1107.39 91.2429 cv
1107.39 90.5229 1107.15 89.9629 1106.67 89.6029 cv
1106.19 89.2429 1105.49 89.0429 1104.53 89.0429 cv
1101.61 89.0429 li
1099.63 87.4229 mo
1104.67 87.4229 li
1106.17 87.4229 1107.33 87.7429 1108.15 88.3629 cv
1108.95 89.0029 1109.37 89.8829 1109.37 91.0229 cv
1109.37 91.9229 1109.15 92.6429 1108.73 93.1629 cv
1108.31 93.6829 1107.71 94.0229 1106.91 94.1429 cv
1107.87 94.3629 1108.63 94.8029 1109.17 95.4629 cv
1109.69 96.1229 1109.97 96.9429 1109.97 97.9229 cv
1109.97 99.2429 1109.51 100.243 1108.63 100.943 cv
1107.75 101.663 1106.49 102.003 1104.87 102.003 cv
1099.63 102.003 li
1099.63 87.4229 li
f
1113.35 87.4229 mo
1116.29 87.4229 li
1120.01 97.3429 li
1123.75 87.4229 li
1126.69 87.4229 li
1126.69 102.003 li
1124.77 102.003 li
1124.77 89.2029 li
1121.01 99.2029 li
1119.03 99.2029 li
1115.27 89.2029 li
1115.27 102.003 li
1113.35 102.003 li
1113.35 87.4229 li
f
1135.01 88.7229 mo
1133.99 88.7229 1133.23 89.2229 1132.71 90.2229 cv
1132.19 91.2229 1131.95 92.7229 1131.95 94.7229 cv
1131.95 96.7229 1132.19 98.2229 1132.71 99.2229 cv
1133.23 100.223 1133.99 100.723 1135.01 100.723 cv
1136.03 100.723 1136.79 100.223 1137.31 99.2229 cv
1137.81 98.2229 1138.07 96.7229 1138.07 94.7229 cv
1138.07 92.7229 1137.81 91.2229 1137.31 90.2229 cv
1136.79 89.2229 1136.03 88.7229 1135.01 88.7229 cv
1135.01 87.1629 mo
1136.63 87.1629 1137.87 87.8229 1138.75 89.1029 cv
1139.61 90.4029 1140.05 92.2829 1140.05 94.7229 cv
1140.05 97.1829 1139.61 99.0629 1138.75 100.343 cv
1137.87 101.623 1136.63 102.263 1135.01 102.263 cv
1133.37 102.263 1132.11 101.623 1131.25 100.343 cv
1130.39 99.0629 1129.97 97.1829 1129.97 94.7229 cv
1129.97 92.2829 1130.39 90.4029 1131.25 89.1029 cv
1132.11 87.8229 1133.37 87.1629 1135.01 87.1629 cv
f
1142.97 86.8229 mo
1144.53 86.8229 li
1145.49 88.3629 1146.23 89.8629 1146.71 91.3429 cv
1147.19 92.8229 1147.45 94.2829 1147.45 95.7229 cv
1147.45 97.1829 1147.19 98.6429 1146.71 100.123 cv
1146.23 101.603 1145.49 103.083 1144.53 104.623 cv
1142.97 104.623 li
1143.83 103.123 1144.47 101.663 1144.91 100.183 cv
1145.33 98.7229 1145.55 97.2429 1145.55 95.7229 cv
1145.55 94.2229 1145.33 92.7429 1144.91 91.2829 cv
1144.47 89.8229 1143.83 88.3429 1142.97 86.8229 cv
f
972.129 122.862 mo
992.129 122.862 li
@
979.129 125.862 mo
985.129 119.862 li
979.129 119.862 mo
985.129 125.862 li
f
1 lw
0 lc
979.129 125.862 mo
985.129 119.862 li
979.129 119.862 mo
985.129 125.862 li
@
1010.83 112.262 mo
1010.83 114.182 li
1010.07 113.822 1009.37 113.562 1008.71 113.382 cv
1008.03 113.222 1007.39 113.122 1006.79 113.122 cv
1005.71 113.122 1004.87 113.342 1004.29 113.742 cv
1003.71 114.162 1003.43 114.762 1003.43 115.522 cv
1003.43 116.162 1003.61 116.662 1004.01 116.982 cv
1004.39 117.322 1005.13 117.582 1006.21 117.782 cv
1007.41 118.022 li
1008.87 118.302 1009.95 118.802 1010.65 119.502 cv
1011.35 120.222 1011.71 121.162 1011.71 122.342 cv
1011.71 123.762 1011.23 124.822 1010.29 125.542 cv
1009.33 126.262 1007.95 126.622 1006.13 126.622 cv
1005.43 126.622 1004.69 126.542 1003.91 126.402 cv
1003.13 126.262 1002.33 126.042 1001.51 125.722 cv
1001.51 123.682 li
1002.31 124.142 1003.09 124.482 1003.85 124.702 cv
1004.61 124.942 1005.37 125.042 1006.13 125.042 cv
1007.25 125.042 1008.11 124.822 1008.73 124.382 cv
1009.33 123.942 1009.65 123.322 1009.65 122.482 cv
1009.65 121.762 1009.43 121.202 1008.99 120.802 cv
1008.55 120.402 1007.83 120.102 1006.83 119.902 cv
1005.63 119.662 li
1004.15 119.382 1003.09 118.922 1002.43 118.282 cv
1001.77 117.662 1001.45 116.802 1001.45 115.682 cv
1001.45 114.402 1001.89 113.382 1002.81 112.642 cv
1003.71 111.902 1004.97 111.522 1006.57 111.522 cv
1007.25 111.522 1007.93 111.582 1008.65 111.702 cv
1009.35 111.822 1010.07 112.022 1010.83 112.262 cv
f
1023.53 112.262 mo
1023.53 114.182 li
1022.77 113.822 1022.07 113.562 1021.41 113.382 cv
1020.73 113.222 1020.09 113.122 1019.49 113.122 cv
1018.41 113.122 1017.57 113.342 1016.99 113.742 cv
1016.41 114.162 1016.13 114.762 1016.13 115.522 cv
1016.13 116.162 1016.31 116.662 1016.71 116.982 cv
1017.09 117.322 1017.83 117.582 1018.91 117.782 cv
1020.11 118.022 li
1021.57 118.302 1022.65 118.802 1023.35 119.502 cv
1024.05 120.222 1024.41 121.162 1024.41 122.342 cv
1024.41 123.762 1023.93 124.822 1022.99 125.542 cv
1022.03 126.262 1020.65 126.622 1018.83 126.622 cv
1018.13 126.622 1017.39 126.542 1016.61 126.402 cv
1015.83 126.262 1015.03 126.042 1014.21 125.722 cv
1014.21 123.682 li
1015.01 124.142 1015.79 124.482 1016.55 124.702 cv
1017.31 124.942 1018.07 125.042 1018.83 125.042 cv
1019.95 125.042 1020.81 124.822 1021.43 124.382 cv
1022.03 123.942 1022.35 123.322 1022.35 122.482 cv
1022.35 121.762 1022.13 121.202 1021.69 120.802 cv
1021.25 120.402 1020.53 120.102 1019.53 119.902 cv
1018.33 119.662 li
1016.85 119.382 1015.79 118.922 1015.13 118.282 cv
1014.47 117.662 1014.15 116.802 1014.15 115.682 cv
1014.15 114.402 1014.59 113.382 1015.51 112.642 cv
1016.41 111.902 1017.67 111.522 1019.27 111.522 cv
1019.95 111.522 1020.63 111.582 1021.35 111.702 cv
1022.05 111.822 1022.77 112.022 1023.53 112.262 cv
f
1029.47 113.402 mo
1029.47 124.742 li
1031.85 124.742 li
1033.85 124.742 1035.33 124.302 1036.27 123.382 cv
1037.19 122.462 1037.67 121.022 1037.67 119.062 cv
1037.67 117.102 1037.19 115.682 1036.27 114.762 cv
1035.33 113.862 1033.85 113.402 1031.85 113.402 cv
1029.47 113.402 li
1027.49 111.782 mo
1031.55 111.782 li
1034.37 111.782 1036.45 112.382 1037.77 113.542 cv
1039.09 114.722 1039.75 116.562 1039.75 119.062 cv
1039.75 121.582 1039.07 123.422 1037.75 124.602 cv
1036.43 125.782 1034.35 126.362 1031.55 126.362 cv
1027.49 126.362 li
1027.49 111.782 li
f
1044.87 119.402 mo
1044.87 124.742 li
1048.03 124.742 li
1049.09 124.742 1049.87 124.522 1050.39 124.082 cv
1050.89 123.642 1051.15 122.982 1051.15 122.062 cv
1051.15 121.162 1050.89 120.502 1050.39 120.062 cv
1049.87 119.622 1049.09 119.402 1048.03 119.402 cv
1044.87 119.402 li
1044.87 113.402 mo
1044.87 117.802 li
1047.79 117.802 li
1048.75 117.802 1049.45 117.622 1049.93 117.262 cv
1050.41 116.902 1050.65 116.362 1050.65 115.602 cv
1050.65 114.882 1050.41 114.322 1049.93 113.962 cv
1049.45 113.602 1048.75 113.402 1047.79 113.402 cv
1044.87 113.402 li
1042.89 111.782 mo
1047.93 111.782 li
1049.43 111.782 1050.59 112.102 1051.41 112.722 cv
1052.21 113.362 1052.63 114.242 1052.63 115.382 cv
1052.63 116.282 1052.41 117.002 1051.99 117.522 cv
1051.57 118.042 1050.97 118.382 1050.17 118.502 cv
1051.13 118.722 1051.89 119.162 1052.43 119.822 cv
1052.95 120.482 1053.23 121.302 1053.23 122.282 cv
1053.23 123.602 1052.77 124.602 1051.89 125.302 cv
1051.01 126.022 1049.75 126.362 1048.13 126.362 cv
1042.89 126.362 li
1042.89 111.782 li
f
1056.61 111.782 mo
1059.27 111.782 li
1065.73 123.982 li
1065.73 111.782 li
1067.65 111.782 li
1067.65 126.362 li
1064.99 126.362 li
1058.53 114.162 li
1058.53 126.362 li
1056.61 126.362 li
1056.61 111.782 li
f
1082.17 111.182 mo
1081.29 112.702 1080.65 114.182 1080.23 115.642 cv
1079.79 117.102 1079.59 118.582 1079.59 120.082 cv
1079.59 121.602 1079.79 123.082 1080.23 124.542 cv
1080.65 126.022 1081.29 127.482 1082.17 128.982 cv
1080.61 128.982 li
1079.63 127.442 1078.89 125.962 1078.41 124.482 cv
1077.93 123.002 1077.69 121.542 1077.69 120.082 cv
1077.69 118.642 1077.93 117.182 1078.41 115.702 cv
1078.89 114.222 1079.61 112.722 1080.61 111.182 cv
1082.17 111.182 li
f
1092.65 119.522 mo
1093.07 119.682 1093.49 119.982 1093.89 120.442 cv
1094.29 120.922 1094.69 121.562 1095.09 122.382 cv
1097.09 126.362 li
1094.97 126.362 li
1093.11 122.622 li
1092.63 121.662 1092.15 121.002 1091.71 120.682 cv
1091.25 120.362 1090.63 120.202 1089.85 120.202 cv
1087.71 120.202 li
1087.71 126.362 li
1085.73 126.362 li
1085.73 111.782 li
1090.19 111.782 li
1091.85 111.782 1093.09 112.142 1093.91 112.822 cv
1094.73 113.522 1095.15 114.582 1095.15 115.982 cv
1095.15 116.902 1094.93 117.682 1094.51 118.282 cv
1094.07 118.882 1093.45 119.302 1092.65 119.522 cv
1087.71 113.402 mo
1087.71 118.582 li
1090.19 118.582 li
1091.13 118.582 1091.85 118.362 1092.33 117.922 cv
1092.81 117.482 1093.07 116.842 1093.07 115.982 cv
1093.07 115.142 1092.81 114.502 1092.33 114.062 cv
1091.85 113.622 1091.13 113.402 1090.19 113.402 cv
1087.71 113.402 li
f
1101.61 119.402 mo
1101.61 124.742 li
1104.77 124.742 li
1105.83 124.742 1106.61 124.522 1107.13 124.082 cv
1107.63 123.642 1107.89 122.982 1107.89 122.062 cv
1107.89 121.162 1107.63 120.502 1107.13 120.062 cv
1106.61 119.622 1105.83 119.402 1104.77 119.402 cv
1101.61 119.402 li
1101.61 113.402 mo
1101.61 117.802 li
1104.53 117.802 li
1105.49 117.802 1106.19 117.622 1106.67 117.262 cv
1107.15 116.902 1107.39 116.362 1107.39 115.602 cv
1107.39 114.882 1107.15 114.322 1106.67 113.962 cv
1106.19 113.602 1105.49 113.402 1104.53 113.402 cv
1101.61 113.402 li
1099.63 111.782 mo
1104.67 111.782 li
1106.17 111.782 1107.33 112.102 1108.15 112.722 cv
1108.95 113.362 1109.37 114.242 1109.37 115.382 cv
1109.37 116.282 1109.15 117.002 1108.73 117.522 cv
1108.31 118.042 1107.71 118.382 1106.91 118.502 cv
1107.87 118.722 1108.63 119.162 1109.17 119.822 cv
1109.69 120.482 1109.97 121.302 1109.97 122.282 cv
1109.97 123.602 1109.51 124.602 1108.63 125.302 cv
1107.75 126.022 1106.49 126.362 1104.87 126.362 cv
1099.63 126.362 li
1099.63 111.782 li
f
1113.35 111.782 mo
1116.29 111.782 li
1120.01 121.702 li
1123.75 111.782 li
1126.69 111.782 li
1126.69 126.362 li
1124.77 126.362 li
1124.77 113.562 li
1121.01 123.562 li
1119.03 123.562 li
1115.27 113.562 li
1115.27 126.362 li
1113.35 126.362 li
1113.35 111.782 li
f
1131.13 124.702 mo
1134.35 124.702 li
1134.35 113.582 li
1130.85 114.282 li
1130.85 112.482 li
1134.33 111.782 li
1136.31 111.782 li
1136.31 124.702 li
1139.53 124.702 li
1139.53 126.362 li
1131.13 126.362 li
1131.13 124.702 li
f
1142.97 111.182 mo
1144.53 111.182 li
1145.49 112.722 1146.23 114.222 1146.71 115.702 cv
1147.19 117.182 1147.45 118.642 1147.45 120.082 cv
1147.45 121.542 1147.19 123.002 1146.71 124.482 cv
1146.23 125.962 1145.49 127.442 1144.53 128.982 cv
1142.97 128.982 li
1143.83 127.482 1144.47 126.022 1144.91 124.542 cv
1145.33 123.082 1145.55 121.602 1145.55 120.082 cv
1145.55 118.582 1145.33 117.102 1144.91 115.642 cv
1144.47 114.182 1143.83 112.702 1142.97 111.182 cv
f
1.5 lw
2 lc
972.129 147.222 mo
992.129 147.222 li
@
982.129 150.222 mo
982.129 144.222 li
f
1 lw
0 lc
982.129 150.222 mo
982.129 144.222 li
@
1010.83 136.622 mo
1010.83 138.542 li
1010.07 138.182 1009.37 137.922 1008.71 137.742 cv
1008.03 137.582 1007.39 137.482 1006.79 137.482 cv
1005.71 137.482 1004.87 137.702 1004.29 138.102 cv
1003.71 138.522 1003.43 139.122 1003.43 139.882 cv
1003.43 140.522 1003.61 141.022 1004.01 141.342 cv
1004.39 141.682 1005.13 141.942 1006.21 142.142 cv
1007.41 142.382 li
1008.87 142.662 1009.95 143.162 1010.65 143.862 cv
1011.35 144.582 1011.71 145.522 1011.71 146.702 cv
1011.71 148.122 1011.23 149.182 1010.29 149.902 cv
1009.33 150.622 1007.95 150.982 1006.13 150.982 cv
1005.43 150.982 1004.69 150.902 1003.91 150.762 cv
1003.13 150.622 1002.33 150.402 1001.51 150.082 cv
1001.51 148.042 li
1002.31 148.502 1003.09 148.842 1003.85 149.062 cv
1004.61 149.302 1005.37 149.402 1006.13 149.402 cv
1007.25 149.402 1008.11 149.182 1008.73 148.742 cv
1009.33 148.302 1009.65 147.682 1009.65 146.842 cv
1009.65 146.122 1009.43 145.562 1008.99 145.162 cv
1008.55 144.762 1007.83 144.462 1006.83 144.262 cv
1005.63 144.022 li
1004.15 143.742 1003.09 143.282 1002.43 142.642 cv
1001.77 142.022 1001.45 141.162 1001.45 140.042 cv
1001.45 138.762 1001.89 137.742 1002.81 137.002 cv
1003.71 136.262 1004.97 135.882 1006.57 135.882 cv
1007.25 135.882 1007.93 135.942 1008.65 136.062 cv
1009.35 136.182 1010.07 136.382 1010.83 136.622 cv
f
1023.53 136.622 mo
1023.53 138.542 li
1022.77 138.182 1022.07 137.922 1021.41 137.742 cv
1020.73 137.582 1020.09 137.482 1019.49 137.482 cv
1018.41 137.482 1017.57 137.702 1016.99 138.102 cv
1016.41 138.522 1016.13 139.122 1016.13 139.882 cv
1016.13 140.522 1016.31 141.022 1016.71 141.342 cv
1017.09 141.682 1017.83 141.942 1018.91 142.142 cv
1020.11 142.382 li
1021.57 142.662 1022.65 143.162 1023.35 143.862 cv
1024.05 144.582 1024.41 145.522 1024.41 146.702 cv
1024.41 148.122 1023.93 149.182 1022.99 149.902 cv
1022.03 150.622 1020.65 150.982 1018.83 150.982 cv
1018.13 150.982 1017.39 150.902 1016.61 150.762 cv
1015.83 150.622 1015.03 150.402 1014.21 150.082 cv
1014.21 148.042 li
1015.01 148.502 1015.79 148.842 1016.55 149.062 cv
1017.31 149.302 1018.07 149.402 1018.83 149.402 cv
1019.95 149.402 1020.81 149.182 1021.43 148.742 cv
1022.03 148.302 1022.35 147.682 1022.35 146.842 cv
1022.35 146.122 1022.13 145.562 1021.69 145.162 cv
1021.25 144.762 1020.53 144.462 1019.53 144.262 cv
1018.33 144.022 li
1016.85 143.742 1015.79 143.282 1015.13 142.642 cv
1014.47 142.022 1014.15 141.162 1014.15 140.042 cv
1014.15 138.762 1014.59 137.742 1015.51 137.002 cv
1016.41 136.262 1017.67 135.882 1019.27 135.882 cv
1019.95 135.882 1020.63 135.942 1021.35 136.062 cv
1022.05 136.182 1022.77 136.382 1023.53 136.622 cv
f
1029.47 137.762 mo
1029.47 149.102 li
1031.85 149.102 li
1033.85 149.102 1035.33 148.662 1036.27 147.742 cv
1037.19 146.822 1037.67 145.382 1037.67 143.422 cv
1037.67 141.462 1037.19 140.042 1036.27 139.122 cv
1035.33 138.222 1033.85 137.762 1031.85 137.762 cv
1029.47 137.762 li
1027.49 136.142 mo
1031.55 136.142 li
1034.37 136.142 1036.45 136.742 1037.77 137.902 cv
1039.09 139.082 1039.75 140.922 1039.75 143.422 cv
1039.75 145.942 1039.07 147.782 1037.75 148.962 cv
1036.43 150.142 1034.35 150.722 1031.55 150.722 cv
1027.49 150.722 li
1027.49 136.142 li
f
1044.87 143.762 mo
1044.87 149.102 li
1048.03 149.102 li
1049.09 149.102 1049.87 148.882 1050.39 148.442 cv
1050.89 148.002 1051.15 147.342 1051.15 146.422 cv
1051.15 145.522 1050.89 144.862 1050.39 144.422 cv
1049.87 143.982 1049.09 143.762 1048.03 143.762 cv
1044.87 143.762 li
1044.87 137.762 mo
1044.87 142.162 li
1047.79 142.162 li
1048.75 142.162 1049.45 141.982 1049.93 141.622 cv
1050.41 141.262 1050.65 140.722 1050.65 139.962 cv
1050.65 139.242 1050.41 138.682 1049.93 138.322 cv
1049.45 137.962 1048.75 137.762 1047.79 137.762 cv
1044.87 137.762 li
1042.89 136.142 mo
1047.93 136.142 li
1049.43 136.142 1050.59 136.462 1051.41 137.082 cv
1052.21 137.722 1052.63 138.602 1052.63 139.742 cv
1052.63 140.642 1052.41 141.362 1051.99 141.882 cv
1051.57 142.402 1050.97 142.742 1050.17 142.862 cv
1051.13 143.082 1051.89 143.522 1052.43 144.182 cv
1052.95 144.842 1053.23 145.662 1053.23 146.642 cv
1053.23 147.962 1052.77 148.962 1051.89 149.662 cv
1051.01 150.382 1049.75 150.722 1048.13 150.722 cv
1042.89 150.722 li
1042.89 136.142 li
f
1056.61 136.142 mo
1059.27 136.142 li
1065.73 148.342 li
1065.73 136.142 li
1067.65 136.142 li
1067.65 150.722 li
1064.99 150.722 li
1058.53 138.522 li
1058.53 150.722 li
1056.61 150.722 li
1056.61 136.142 li
f
1082.17 135.542 mo
1081.29 137.062 1080.65 138.542 1080.23 140.002 cv
1079.79 141.462 1079.59 142.942 1079.59 144.442 cv
1079.59 145.962 1079.79 147.442 1080.23 148.902 cv
1080.65 150.382 1081.29 151.842 1082.17 153.342 cv
1080.61 153.342 li
1079.63 151.802 1078.89 150.322 1078.41 148.842 cv
1077.93 147.362 1077.69 145.902 1077.69 144.442 cv
1077.69 143.002 1077.93 141.542 1078.41 140.062 cv
1078.89 138.582 1079.61 137.082 1080.61 135.542 cv
1082.17 135.542 li
f
1092.65 143.882 mo
1093.07 144.042 1093.49 144.342 1093.89 144.802 cv
1094.29 145.282 1094.69 145.922 1095.09 146.742 cv
1097.09 150.722 li
1094.97 150.722 li
1093.11 146.982 li
1092.63 146.022 1092.15 145.362 1091.71 145.042 cv
1091.25 144.722 1090.63 144.562 1089.85 144.562 cv
1087.71 144.562 li
1087.71 150.722 li
1085.73 150.722 li
1085.73 136.142 li
1090.19 136.142 li
1091.85 136.142 1093.09 136.502 1093.91 137.182 cv
1094.73 137.882 1095.15 138.942 1095.15 140.342 cv
1095.15 141.262 1094.93 142.042 1094.51 142.642 cv
1094.07 143.242 1093.45 143.662 1092.65 143.882 cv
1087.71 137.762 mo
1087.71 142.942 li
1090.19 142.942 li
1091.13 142.942 1091.85 142.722 1092.33 142.282 cv
1092.81 141.842 1093.07 141.202 1093.07 140.342 cv
1093.07 139.502 1092.81 138.862 1092.33 138.422 cv
1091.85 137.982 1091.13 137.762 1090.19 137.762 cv
1087.71 137.762 li
f
1101.61 143.762 mo
1101.61 149.102 li
1104.77 149.102 li
1105.83 149.102 1106.61 148.882 1107.13 148.442 cv
1107.63 148.002 1107.89 147.342 1107.89 146.422 cv
1107.89 145.522 1107.63 144.862 1107.13 144.422 cv
1106.61 143.982 1105.83 143.762 1104.77 143.762 cv
1101.61 143.762 li
1101.61 137.762 mo
1101.61 142.162 li
1104.53 142.162 li
1105.49 142.162 1106.19 141.982 1106.67 141.622 cv
1107.15 141.262 1107.39 140.722 1107.39 139.962 cv
1107.39 139.242 1107.15 138.682 1106.67 138.322 cv
1106.19 137.962 1105.49 137.762 1104.53 137.762 cv
1101.61 137.762 li
1099.63 136.142 mo
1104.67 136.142 li
1106.17 136.142 1107.33 136.462 1108.15 137.082 cv
1108.95 137.722 1109.37 138.602 1109.37 139.742 cv
1109.37 140.642 1109.15 141.362 1108.73 141.882 cv
1108.31 142.402 1107.71 142.742 1106.91 142.862 cv
1107.87 143.082 1108.63 143.522 1109.17 144.182 cv
1109.69 144.842 1109.97 145.662 1109.97 146.642 cv
1109.97 147.962 1109.51 148.962 1108.63 149.662 cv
1107.75 150.382 1106.49 150.722 1104.87 150.722 cv
1099.63 150.722 li
1099.63 136.142 li
f
1113.35 136.142 mo
1116.29 136.142 li
1120.01 146.062 li
1123.75 136.142 li
1126.69 136.142 li
1126.69 150.722 li
1124.77 150.722 li
1124.77 137.922 li
1121.01 147.922 li
1119.03 147.922 li
1115.27 137.922 li
1115.27 150.722 li
1113.35 150.722 li
1113.35 136.142 li
f
1132.49 149.062 mo
1139.37 149.062 li
1139.37 150.722 li
1130.11 150.722 li
1130.11 149.062 li
1130.85 148.302 1131.87 147.262 1133.17 145.942 cv
1134.45 144.642 1135.27 143.802 1135.61 143.422 cv
1136.25 142.722 1136.69 142.122 1136.93 141.622 cv
1137.17 141.142 1137.31 140.642 1137.31 140.162 cv
1137.31 139.402 1137.03 138.762 1136.49 138.282 cv
1135.95 137.802 1135.25 137.542 1134.37 137.542 cv
1133.75 137.542 1133.09 137.662 1132.41 137.862 cv
1131.73 138.082 1130.99 138.402 1130.21 138.842 cv
1130.21 136.842 li
1131.01 136.522 1131.75 136.282 1132.43 136.122 cv
1133.11 135.962 1133.75 135.882 1134.33 135.882 cv
1135.83 135.882 1137.03 136.262 1137.93 137.022 cv
1138.83 137.782 1139.29 138.782 1139.29 140.042 cv
1139.29 140.642 1139.17 141.222 1138.95 141.742 cv
1138.73 142.282 1138.33 142.922 1137.73 143.642 cv
1137.57 143.842 1137.05 144.382 1136.17 145.282 cv
1135.29 146.182 1134.07 147.442 1132.49 149.062 cv
f
1142.97 135.542 mo
1144.53 135.542 li
1145.49 137.082 1146.23 138.582 1146.71 140.062 cv
1147.19 141.542 1147.45 143.002 1147.45 144.442 cv
1147.45 145.902 1147.19 147.362 1146.71 148.842 cv
1146.23 150.322 1145.49 151.802 1144.53 153.342 cv
1142.97 153.342 li
1143.83 151.842 1144.47 150.382 1144.91 148.902 cv
1145.33 147.442 1145.55 145.962 1145.55 144.442 cv
1145.55 142.942 1145.33 141.462 1144.91 140.002 cv
1144.47 138.542 1143.83 137.062 1142.97 135.542 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
